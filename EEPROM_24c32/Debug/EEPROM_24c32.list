
EEPROM_24c32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023c8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  080024d4  080024d4  000124d4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002648  08002648  00012648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800264c  0800264c  0001264c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000000  08002650  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000c4  20000070  080026c0  00020070  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000134  080026c0  00020134  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000f2b3  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001f7a  00000000  00000000  0002f34c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000509d  00000000  00000000  000312c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000678  00000000  00000000  00036368  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000ae8  00000000  00000000  000369e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000049af  00000000  00000000  000374c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002899  00000000  00000000  0003be77  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003e710  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001654  00000000  00000000  0003e78c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080024bc 	.word	0x080024bc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080024bc 	.word	0x080024bc

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800015c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800015e:	4b0e      	ldr	r3, [pc, #56]	; (8000198 <HAL_InitTick+0x3c>)
{
 8000160:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000162:	7818      	ldrb	r0, [r3, #0]
 8000164:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000168:	fbb3 f3f0 	udiv	r3, r3, r0
 800016c:	4a0b      	ldr	r2, [pc, #44]	; (800019c <HAL_InitTick+0x40>)
 800016e:	6810      	ldr	r0, [r2, #0]
 8000170:	fbb0 f0f3 	udiv	r0, r0, r3
 8000174:	f000 f880 	bl	8000278 <HAL_SYSTICK_Config>
 8000178:	4604      	mov	r4, r0
 800017a:	b958      	cbnz	r0, 8000194 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800017c:	2d0f      	cmp	r5, #15
 800017e:	d809      	bhi.n	8000194 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000180:	4602      	mov	r2, r0
 8000182:	4629      	mov	r1, r5
 8000184:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000188:	f000 f842 	bl	8000210 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <HAL_InitTick+0x44>)
 800018e:	4620      	mov	r0, r4
 8000190:	601d      	str	r5, [r3, #0]
 8000192:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000194:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000196:	bd38      	pop	{r3, r4, r5, pc}
 8000198:	20000000 	.word	0x20000000
 800019c:	20000008 	.word	0x20000008
 80001a0:	20000004 	.word	0x20000004

080001a4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001a4:	4a07      	ldr	r2, [pc, #28]	; (80001c4 <HAL_Init+0x20>)
{
 80001a6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001a8:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001aa:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001ac:	f043 0310 	orr.w	r3, r3, #16
 80001b0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001b2:	f000 f81b 	bl	80001ec <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001b6:	2000      	movs	r0, #0
 80001b8:	f7ff ffd0 	bl	800015c <HAL_InitTick>
  HAL_MspInit();
 80001bc:	f001 fc1a 	bl	80019f4 <HAL_MspInit>
}
 80001c0:	2000      	movs	r0, #0
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	40022000 	.word	0x40022000

080001c8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001c8:	4a03      	ldr	r2, [pc, #12]	; (80001d8 <HAL_IncTick+0x10>)
 80001ca:	4b04      	ldr	r3, [pc, #16]	; (80001dc <HAL_IncTick+0x14>)
 80001cc:	6811      	ldr	r1, [r2, #0]
 80001ce:	781b      	ldrb	r3, [r3, #0]
 80001d0:	440b      	add	r3, r1
 80001d2:	6013      	str	r3, [r2, #0]
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	20000098 	.word	0x20000098
 80001dc:	20000000 	.word	0x20000000

080001e0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001e0:	4b01      	ldr	r3, [pc, #4]	; (80001e8 <HAL_GetTick+0x8>)
 80001e2:	6818      	ldr	r0, [r3, #0]
}
 80001e4:	4770      	bx	lr
 80001e6:	bf00      	nop
 80001e8:	20000098 	.word	0x20000098

080001ec <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001ec:	4a07      	ldr	r2, [pc, #28]	; (800020c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001ee:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001f0:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001f2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001f6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80001fa:	041b      	lsls	r3, r3, #16
 80001fc:	0c1b      	lsrs	r3, r3, #16
 80001fe:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000202:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000206:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000208:	60d3      	str	r3, [r2, #12]
 800020a:	4770      	bx	lr
 800020c:	e000ed00 	.word	0xe000ed00

08000210 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000210:	4b17      	ldr	r3, [pc, #92]	; (8000270 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000212:	b530      	push	{r4, r5, lr}
 8000214:	68dc      	ldr	r4, [r3, #12]
 8000216:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800021a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800021e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000220:	2b04      	cmp	r3, #4
 8000222:	bf28      	it	cs
 8000224:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000226:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000228:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800022c:	bf98      	it	ls
 800022e:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000230:	fa05 f303 	lsl.w	r3, r5, r3
 8000234:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000238:	bf88      	it	hi
 800023a:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800023c:	4019      	ands	r1, r3
 800023e:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000240:	fa05 f404 	lsl.w	r4, r5, r4
 8000244:	3c01      	subs	r4, #1
 8000246:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000248:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800024a:	ea42 0201 	orr.w	r2, r2, r1
 800024e:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000252:	bfaf      	iteee	ge
 8000254:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000258:	4b06      	ldrlt	r3, [pc, #24]	; (8000274 <HAL_NVIC_SetPriority+0x64>)
 800025a:	f000 000f 	andlt.w	r0, r0, #15
 800025e:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000260:	bfa5      	ittet	ge
 8000262:	b2d2      	uxtbge	r2, r2
 8000264:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000268:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800026a:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800026e:	bd30      	pop	{r4, r5, pc}
 8000270:	e000ed00 	.word	0xe000ed00
 8000274:	e000ed14 	.word	0xe000ed14

08000278 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000278:	3801      	subs	r0, #1
 800027a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800027e:	d20a      	bcs.n	8000296 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000280:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000282:	4b06      	ldr	r3, [pc, #24]	; (800029c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000284:	4a06      	ldr	r2, [pc, #24]	; (80002a0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000286:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000288:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800028c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800028e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000290:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000292:	601a      	str	r2, [r3, #0]
 8000294:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000296:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	e000e010 	.word	0xe000e010
 80002a0:	e000ed00 	.word	0xe000ed00

080002a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80002a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80002a8:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80002aa:	4616      	mov	r6, r2
 80002ac:	4b65      	ldr	r3, [pc, #404]	; (8000444 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80002ae:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8000454 <HAL_GPIO_Init+0x1b0>
 80002b2:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8000458 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 80002b6:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002ba:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 80002bc:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002c0:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 80002c4:	45a0      	cmp	r8, r4
 80002c6:	d17f      	bne.n	80003c8 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 80002c8:	684d      	ldr	r5, [r1, #4]
 80002ca:	2d12      	cmp	r5, #18
 80002cc:	f000 80af 	beq.w	800042e <HAL_GPIO_Init+0x18a>
 80002d0:	f200 8088 	bhi.w	80003e4 <HAL_GPIO_Init+0x140>
 80002d4:	2d02      	cmp	r5, #2
 80002d6:	f000 80a7 	beq.w	8000428 <HAL_GPIO_Init+0x184>
 80002da:	d87c      	bhi.n	80003d6 <HAL_GPIO_Init+0x132>
 80002dc:	2d00      	cmp	r5, #0
 80002de:	f000 808e 	beq.w	80003fe <HAL_GPIO_Init+0x15a>
 80002e2:	2d01      	cmp	r5, #1
 80002e4:	f000 809e 	beq.w	8000424 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80002e8:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80002ec:	2cff      	cmp	r4, #255	; 0xff
 80002ee:	bf93      	iteet	ls
 80002f0:	4682      	movls	sl, r0
 80002f2:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 80002f6:	3d08      	subhi	r5, #8
 80002f8:	f8d0 b000 	ldrls.w	fp, [r0]
 80002fc:	bf92      	itee	ls
 80002fe:	00b5      	lslls	r5, r6, #2
 8000300:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000304:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000306:	fa09 f805 	lsl.w	r8, r9, r5
 800030a:	ea2b 0808 	bic.w	r8, fp, r8
 800030e:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000312:	bf88      	it	hi
 8000314:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000318:	ea48 0505 	orr.w	r5, r8, r5
 800031c:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000320:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000324:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000328:	d04e      	beq.n	80003c8 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800032a:	4d47      	ldr	r5, [pc, #284]	; (8000448 <HAL_GPIO_Init+0x1a4>)
 800032c:	4f46      	ldr	r7, [pc, #280]	; (8000448 <HAL_GPIO_Init+0x1a4>)
 800032e:	69ad      	ldr	r5, [r5, #24]
 8000330:	f026 0803 	bic.w	r8, r6, #3
 8000334:	f045 0501 	orr.w	r5, r5, #1
 8000338:	61bd      	str	r5, [r7, #24]
 800033a:	69bd      	ldr	r5, [r7, #24]
 800033c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000340:	f005 0501 	and.w	r5, r5, #1
 8000344:	9501      	str	r5, [sp, #4]
 8000346:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800034a:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800034e:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000350:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8000354:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000358:	fa09 f90b 	lsl.w	r9, r9, fp
 800035c:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000360:	4d3a      	ldr	r5, [pc, #232]	; (800044c <HAL_GPIO_Init+0x1a8>)
 8000362:	42a8      	cmp	r0, r5
 8000364:	d068      	beq.n	8000438 <HAL_GPIO_Init+0x194>
 8000366:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800036a:	42a8      	cmp	r0, r5
 800036c:	d066      	beq.n	800043c <HAL_GPIO_Init+0x198>
 800036e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000372:	42a8      	cmp	r0, r5
 8000374:	d064      	beq.n	8000440 <HAL_GPIO_Init+0x19c>
 8000376:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800037a:	42a8      	cmp	r0, r5
 800037c:	bf0c      	ite	eq
 800037e:	2503      	moveq	r5, #3
 8000380:	2504      	movne	r5, #4
 8000382:	fa05 f50b 	lsl.w	r5, r5, fp
 8000386:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 800038a:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800038e:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000390:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000394:	bf14      	ite	ne
 8000396:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000398:	43a5      	biceq	r5, r4
 800039a:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800039c:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800039e:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80003a2:	bf14      	ite	ne
 80003a4:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80003a6:	43a5      	biceq	r5, r4
 80003a8:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80003aa:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80003ac:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80003b0:	bf14      	ite	ne
 80003b2:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80003b4:	43a5      	biceq	r5, r4
 80003b6:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80003b8:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80003ba:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80003be:	bf14      	ite	ne
 80003c0:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80003c2:	ea25 0404 	biceq.w	r4, r5, r4
 80003c6:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80003c8:	3601      	adds	r6, #1
 80003ca:	2e10      	cmp	r6, #16
 80003cc:	f47f af73 	bne.w	80002b6 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 80003d0:	b003      	add	sp, #12
 80003d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 80003d6:	2d03      	cmp	r5, #3
 80003d8:	d022      	beq.n	8000420 <HAL_GPIO_Init+0x17c>
 80003da:	2d11      	cmp	r5, #17
 80003dc:	d184      	bne.n	80002e8 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80003de:	68ca      	ldr	r2, [r1, #12]
 80003e0:	3204      	adds	r2, #4
          break;
 80003e2:	e781      	b.n	80002e8 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80003e4:	4f1a      	ldr	r7, [pc, #104]	; (8000450 <HAL_GPIO_Init+0x1ac>)
 80003e6:	42bd      	cmp	r5, r7
 80003e8:	d009      	beq.n	80003fe <HAL_GPIO_Init+0x15a>
 80003ea:	d812      	bhi.n	8000412 <HAL_GPIO_Init+0x16e>
 80003ec:	f8df 906c 	ldr.w	r9, [pc, #108]	; 800045c <HAL_GPIO_Init+0x1b8>
 80003f0:	454d      	cmp	r5, r9
 80003f2:	d004      	beq.n	80003fe <HAL_GPIO_Init+0x15a>
 80003f4:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80003f8:	454d      	cmp	r5, r9
 80003fa:	f47f af75 	bne.w	80002e8 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80003fe:	688a      	ldr	r2, [r1, #8]
 8000400:	b1c2      	cbz	r2, 8000434 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000402:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000404:	bf0c      	ite	eq
 8000406:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 800040a:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800040e:	2208      	movs	r2, #8
 8000410:	e76a      	b.n	80002e8 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000412:	4575      	cmp	r5, lr
 8000414:	d0f3      	beq.n	80003fe <HAL_GPIO_Init+0x15a>
 8000416:	4565      	cmp	r5, ip
 8000418:	d0f1      	beq.n	80003fe <HAL_GPIO_Init+0x15a>
 800041a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000460 <HAL_GPIO_Init+0x1bc>
 800041e:	e7eb      	b.n	80003f8 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000420:	2200      	movs	r2, #0
 8000422:	e761      	b.n	80002e8 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000424:	68ca      	ldr	r2, [r1, #12]
          break;
 8000426:	e75f      	b.n	80002e8 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000428:	68ca      	ldr	r2, [r1, #12]
 800042a:	3208      	adds	r2, #8
          break;
 800042c:	e75c      	b.n	80002e8 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800042e:	68ca      	ldr	r2, [r1, #12]
 8000430:	320c      	adds	r2, #12
          break;
 8000432:	e759      	b.n	80002e8 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000434:	2204      	movs	r2, #4
 8000436:	e757      	b.n	80002e8 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000438:	2500      	movs	r5, #0
 800043a:	e7a2      	b.n	8000382 <HAL_GPIO_Init+0xde>
 800043c:	2501      	movs	r5, #1
 800043e:	e7a0      	b.n	8000382 <HAL_GPIO_Init+0xde>
 8000440:	2502      	movs	r5, #2
 8000442:	e79e      	b.n	8000382 <HAL_GPIO_Init+0xde>
 8000444:	40010400 	.word	0x40010400
 8000448:	40021000 	.word	0x40021000
 800044c:	40010800 	.word	0x40010800
 8000450:	10210000 	.word	0x10210000
 8000454:	10310000 	.word	0x10310000
 8000458:	10320000 	.word	0x10320000
 800045c:	10110000 	.word	0x10110000
 8000460:	10220000 	.word	0x10220000

08000464 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000464:	6802      	ldr	r2, [r0, #0]
 8000466:	6953      	ldr	r3, [r2, #20]
 8000468:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 800046c:	d00d      	beq.n	800048a <I2C_IsAcknowledgeFailed+0x26>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800046e:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8000472:	6153      	str	r3, [r2, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000474:	2304      	movs	r3, #4
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 8000476:	2220      	movs	r2, #32
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000478:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 800047a:	2300      	movs	r3, #0
 800047c:	6303      	str	r3, [r0, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800047e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    hi2c->State= HAL_I2C_STATE_READY;
 8000482:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_ERROR;
 8000486:	2001      	movs	r0, #1
 8000488:	4770      	bx	lr
  }
  return HAL_OK;
 800048a:	4618      	mov	r0, r3
}
 800048c:	4770      	bx	lr

0800048e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 800048e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000492:	4604      	mov	r4, r0
 8000494:	4617      	mov	r7, r2
 8000496:	4699      	mov	r9, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000498:	f3c1 4807 	ubfx	r8, r1, #16, #8
 800049c:	b28e      	uxth	r6, r1
 800049e:	6825      	ldr	r5, [r4, #0]
 80004a0:	f1b8 0f01 	cmp.w	r8, #1
 80004a4:	bf0c      	ite	eq
 80004a6:	696b      	ldreq	r3, [r5, #20]
 80004a8:	69ab      	ldrne	r3, [r5, #24]
 80004aa:	ea36 0303 	bics.w	r3, r6, r3
 80004ae:	bf14      	ite	ne
 80004b0:	2001      	movne	r0, #1
 80004b2:	2000      	moveq	r0, #0
 80004b4:	b908      	cbnz	r0, 80004ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 80004b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80004ba:	696b      	ldr	r3, [r5, #20]
 80004bc:	055a      	lsls	r2, r3, #21
 80004be:	d512      	bpl.n	80004e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x58>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80004c0:	682b      	ldr	r3, [r5, #0]
      hi2c->State= HAL_I2C_STATE_READY;
 80004c2:	2220      	movs	r2, #32
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80004c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004c8:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80004ca:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80004ce:	616b      	str	r3, [r5, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80004d0:	2304      	movs	r3, #4
 80004d2:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 80004d4:	2300      	movs	r3, #0
      return HAL_ERROR;
 80004d6:	2001      	movs	r0, #1
      hi2c->PreviousState = I2C_STATE_NONE;
 80004d8:	6323      	str	r3, [r4, #48]	; 0x30
      __HAL_UNLOCK(hi2c);
 80004da:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->State= HAL_I2C_STATE_READY;
 80004de:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 80004e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 80004e6:	1c7b      	adds	r3, r7, #1
 80004e8:	d0d9      	beq.n	800049e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80004ea:	b94f      	cbnz	r7, 8000500 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
        hi2c->PreviousState = I2C_STATE_NONE;
 80004ec:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 80004ee:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80004f0:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80004f2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 80004f6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 80004fa:	2003      	movs	r0, #3
 80004fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000500:	f7ff fe6e 	bl	80001e0 <HAL_GetTick>
 8000504:	eba0 0009 	sub.w	r0, r0, r9
 8000508:	4287      	cmp	r7, r0
 800050a:	d2c8      	bcs.n	800049e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 800050c:	e7ee      	b.n	80004ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>

0800050e <I2C_WaitOnFlagUntilTimeout>:
{
 800050e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000512:	4604      	mov	r4, r0
 8000514:	4690      	mov	r8, r2
 8000516:	461f      	mov	r7, r3
 8000518:	9e08      	ldr	r6, [sp, #32]
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 800051a:	f3c1 4907 	ubfx	r9, r1, #16, #8
 800051e:	b28d      	uxth	r5, r1
 8000520:	6823      	ldr	r3, [r4, #0]
 8000522:	f1b9 0f01 	cmp.w	r9, #1
 8000526:	bf0c      	ite	eq
 8000528:	695b      	ldreq	r3, [r3, #20]
 800052a:	699b      	ldrne	r3, [r3, #24]
 800052c:	ea35 0303 	bics.w	r3, r5, r3
 8000530:	bf0c      	ite	eq
 8000532:	2301      	moveq	r3, #1
 8000534:	2300      	movne	r3, #0
 8000536:	4543      	cmp	r3, r8
 8000538:	d002      	beq.n	8000540 <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 800053a:	2000      	movs	r0, #0
}
 800053c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000540:	1c7b      	adds	r3, r7, #1
 8000542:	d0ed      	beq.n	8000520 <I2C_WaitOnFlagUntilTimeout+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000544:	b95f      	cbnz	r7, 800055e <I2C_WaitOnFlagUntilTimeout+0x50>
        hi2c->PreviousState = I2C_STATE_NONE;
 8000546:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8000548:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 800054a:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 800054c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8000550:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8000554:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000556:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800055a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800055e:	f7ff fe3f 	bl	80001e0 <HAL_GetTick>
 8000562:	1b80      	subs	r0, r0, r6
 8000564:	4287      	cmp	r7, r0
 8000566:	d2db      	bcs.n	8000520 <I2C_WaitOnFlagUntilTimeout+0x12>
 8000568:	e7ed      	b.n	8000546 <I2C_WaitOnFlagUntilTimeout+0x38>

0800056a <I2C_WaitOnTXEFlagUntilTimeout>:
{    
 800056a:	b570      	push	{r4, r5, r6, lr}
 800056c:	4604      	mov	r4, r0
 800056e:	460d      	mov	r5, r1
 8000570:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000572:	6823      	ldr	r3, [r4, #0]
 8000574:	695b      	ldr	r3, [r3, #20]
 8000576:	061b      	lsls	r3, r3, #24
 8000578:	d501      	bpl.n	800057e <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;      
 800057a:	2000      	movs	r0, #0
 800057c:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800057e:	4620      	mov	r0, r4
 8000580:	f7ff ff70 	bl	8000464 <I2C_IsAcknowledgeFailed>
 8000584:	b9a8      	cbnz	r0, 80005b2 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8000586:	1c6a      	adds	r2, r5, #1
 8000588:	d0f3      	beq.n	8000572 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800058a:	b965      	cbnz	r5, 80005a6 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800058c:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 800058e:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000590:	f043 0320 	orr.w	r3, r3, #32
 8000594:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8000596:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 8000598:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 800059a:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 800059c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 80005a0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 80005a4:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80005a6:	f7ff fe1b 	bl	80001e0 <HAL_GetTick>
 80005aa:	1b80      	subs	r0, r0, r6
 80005ac:	4285      	cmp	r5, r0
 80005ae:	d2e0      	bcs.n	8000572 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 80005b0:	e7ec      	b.n	800058c <I2C_WaitOnTXEFlagUntilTimeout+0x22>
      return HAL_ERROR;
 80005b2:	2001      	movs	r0, #1
}
 80005b4:	bd70      	pop	{r4, r5, r6, pc}
	...

080005b8 <I2C_RequestMemoryWrite>:
{
 80005b8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80005bc:	4615      	mov	r5, r2
  hi2c->Instance->CR1 |= I2C_CR1_START;
 80005be:	6802      	ldr	r2, [r0, #0]
{
 80005c0:	4698      	mov	r8, r3
  hi2c->Instance->CR1 |= I2C_CR1_START;
 80005c2:	6813      	ldr	r3, [r2, #0]
{
 80005c4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  hi2c->Instance->CR1 |= I2C_CR1_START;
 80005c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005ca:	6013      	str	r3, [r2, #0]
{
 80005cc:	460f      	mov	r7, r1
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80005ce:	9600      	str	r6, [sp, #0]
 80005d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80005d2:	2200      	movs	r2, #0
 80005d4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 80005d8:	4604      	mov	r4, r0
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80005da:	f7ff ff98 	bl	800050e <I2C_WaitOnFlagUntilTimeout>
 80005de:	b968      	cbnz	r0, 80005fc <I2C_RequestMemoryWrite+0x44>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80005e0:	6823      	ldr	r3, [r4, #0]
 80005e2:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 80005e6:	611f      	str	r7, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80005e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80005ea:	4633      	mov	r3, r6
 80005ec:	491a      	ldr	r1, [pc, #104]	; (8000658 <I2C_RequestMemoryWrite+0xa0>)
 80005ee:	4620      	mov	r0, r4
 80005f0:	f7ff ff4d 	bl	800048e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80005f4:	b130      	cbz	r0, 8000604 <I2C_RequestMemoryWrite+0x4c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80005f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80005f8:	2b04      	cmp	r3, #4
 80005fa:	d018      	beq.n	800062e <I2C_RequestMemoryWrite+0x76>
      return HAL_TIMEOUT;
 80005fc:	2003      	movs	r0, #3
}
 80005fe:	b004      	add	sp, #16
 8000600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000604:	6823      	ldr	r3, [r4, #0]
 8000606:	9003      	str	r0, [sp, #12]
 8000608:	695a      	ldr	r2, [r3, #20]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800060a:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800060c:	9203      	str	r2, [sp, #12]
 800060e:	699b      	ldr	r3, [r3, #24]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000610:	4632      	mov	r2, r6
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000612:	9303      	str	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000614:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000616:	9b03      	ldr	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000618:	f7ff ffa7 	bl	800056a <I2C_WaitOnTXEFlagUntilTimeout>
 800061c:	b148      	cbz	r0, 8000632 <I2C_RequestMemoryWrite+0x7a>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800061e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000620:	2b04      	cmp	r3, #4
 8000622:	d1eb      	bne.n	80005fc <I2C_RequestMemoryWrite+0x44>
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000624:	6822      	ldr	r2, [r4, #0]
 8000626:	6813      	ldr	r3, [r2, #0]
 8000628:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800062c:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 800062e:	2001      	movs	r0, #1
 8000630:	e7e5      	b.n	80005fe <I2C_RequestMemoryWrite+0x46>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8000632:	f1b8 0f01 	cmp.w	r8, #1
 8000636:	6823      	ldr	r3, [r4, #0]
 8000638:	d102      	bne.n	8000640 <I2C_RequestMemoryWrite+0x88>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800063a:	b2ed      	uxtb	r5, r5
 800063c:	611d      	str	r5, [r3, #16]
 800063e:	e7de      	b.n	80005fe <I2C_RequestMemoryWrite+0x46>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8000640:	0a2a      	lsrs	r2, r5, #8
 8000642:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000644:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000646:	4632      	mov	r2, r6
 8000648:	4620      	mov	r0, r4
 800064a:	f7ff ff8e 	bl	800056a <I2C_WaitOnTXEFlagUntilTimeout>
 800064e:	2800      	cmp	r0, #0
 8000650:	d1e5      	bne.n	800061e <I2C_RequestMemoryWrite+0x66>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8000652:	6823      	ldr	r3, [r4, #0]
 8000654:	e7f1      	b.n	800063a <I2C_RequestMemoryWrite+0x82>
 8000656:	bf00      	nop
 8000658:	00010002 	.word	0x00010002

0800065c <I2C_RequestMemoryRead>:
{
 800065c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8000660:	4698      	mov	r8, r3
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8000662:	6803      	ldr	r3, [r0, #0]
{
 8000664:	4616      	mov	r6, r2
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8000666:	681a      	ldr	r2, [r3, #0]
{
 8000668:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800066a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800066e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8000670:	681a      	ldr	r2, [r3, #0]
{
 8000672:	460f      	mov	r7, r1
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8000674:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000678:	601a      	str	r2, [r3, #0]
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800067a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800067e:	9500      	str	r5, [sp, #0]
 8000680:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000682:	2200      	movs	r2, #0
{
 8000684:	4604      	mov	r4, r0
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000686:	f7ff ff42 	bl	800050e <I2C_WaitOnFlagUntilTimeout>
 800068a:	b980      	cbnz	r0, 80006ae <I2C_RequestMemoryRead+0x52>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800068c:	6823      	ldr	r3, [r4, #0]
 800068e:	b2ff      	uxtb	r7, r7
 8000690:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
 8000694:	611a      	str	r2, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000696:	492d      	ldr	r1, [pc, #180]	; (800074c <I2C_RequestMemoryRead+0xf0>)
 8000698:	462b      	mov	r3, r5
 800069a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800069c:	4620      	mov	r0, r4
 800069e:	f7ff fef6 	bl	800048e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80006a2:	b140      	cbz	r0, 80006b6 <I2C_RequestMemoryRead+0x5a>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80006a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80006a6:	2b04      	cmp	r3, #4
 80006a8:	d101      	bne.n	80006ae <I2C_RequestMemoryRead+0x52>
      return HAL_ERROR;
 80006aa:	2001      	movs	r0, #1
 80006ac:	e000      	b.n	80006b0 <I2C_RequestMemoryRead+0x54>
      return HAL_TIMEOUT;
 80006ae:	2003      	movs	r0, #3
}
 80006b0:	b004      	add	sp, #16
 80006b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80006b6:	6823      	ldr	r3, [r4, #0]
 80006b8:	9003      	str	r0, [sp, #12]
 80006ba:	695a      	ldr	r2, [r3, #20]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80006bc:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80006be:	9203      	str	r2, [sp, #12]
 80006c0:	699b      	ldr	r3, [r3, #24]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80006c2:	462a      	mov	r2, r5
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80006c4:	9303      	str	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80006c6:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80006c8:	9b03      	ldr	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80006ca:	f7ff ff4e 	bl	800056a <I2C_WaitOnTXEFlagUntilTimeout>
 80006ce:	b140      	cbz	r0, 80006e2 <I2C_RequestMemoryRead+0x86>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80006d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80006d2:	2b04      	cmp	r3, #4
 80006d4:	d1eb      	bne.n	80006ae <I2C_RequestMemoryRead+0x52>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80006d6:	6822      	ldr	r2, [r4, #0]
 80006d8:	6813      	ldr	r3, [r2, #0]
 80006da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006de:	6013      	str	r3, [r2, #0]
 80006e0:	e7e3      	b.n	80006aa <I2C_RequestMemoryRead+0x4e>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80006e2:	f1b8 0f01 	cmp.w	r8, #1
 80006e6:	6823      	ldr	r3, [r4, #0]
 80006e8:	d124      	bne.n	8000734 <I2C_RequestMemoryRead+0xd8>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80006ea:	b2f6      	uxtb	r6, r6
 80006ec:	611e      	str	r6, [r3, #16]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80006ee:	462a      	mov	r2, r5
 80006f0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80006f2:	4620      	mov	r0, r4
 80006f4:	f7ff ff39 	bl	800056a <I2C_WaitOnTXEFlagUntilTimeout>
 80006f8:	4602      	mov	r2, r0
 80006fa:	2800      	cmp	r0, #0
 80006fc:	d1e8      	bne.n	80006d0 <I2C_RequestMemoryRead+0x74>
  hi2c->Instance->CR1 |= I2C_CR1_START;
 80006fe:	6821      	ldr	r1, [r4, #0]
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000700:	4620      	mov	r0, r4
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8000702:	680b      	ldr	r3, [r1, #0]
 8000704:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000708:	600b      	str	r3, [r1, #0]
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800070a:	9500      	str	r5, [sp, #0]
 800070c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800070e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000712:	f7ff fefc 	bl	800050e <I2C_WaitOnFlagUntilTimeout>
 8000716:	2800      	cmp	r0, #0
 8000718:	d1c9      	bne.n	80006ae <I2C_RequestMemoryRead+0x52>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800071a:	6823      	ldr	r3, [r4, #0]
 800071c:	f047 0701 	orr.w	r7, r7, #1
 8000720:	611f      	str	r7, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000722:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000724:	462b      	mov	r3, r5
 8000726:	4909      	ldr	r1, [pc, #36]	; (800074c <I2C_RequestMemoryRead+0xf0>)
 8000728:	4620      	mov	r0, r4
 800072a:	f7ff feb0 	bl	800048e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800072e:	2800      	cmp	r0, #0
 8000730:	d1b8      	bne.n	80006a4 <I2C_RequestMemoryRead+0x48>
 8000732:	e7bd      	b.n	80006b0 <I2C_RequestMemoryRead+0x54>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8000734:	0a32      	lsrs	r2, r6, #8
 8000736:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000738:	990a      	ldr	r1, [sp, #40]	; 0x28
 800073a:	462a      	mov	r2, r5
 800073c:	4620      	mov	r0, r4
 800073e:	f7ff ff14 	bl	800056a <I2C_WaitOnTXEFlagUntilTimeout>
 8000742:	2800      	cmp	r0, #0
 8000744:	d1c4      	bne.n	80006d0 <I2C_RequestMemoryRead+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8000746:	6823      	ldr	r3, [r4, #0]
 8000748:	e7cf      	b.n	80006ea <I2C_RequestMemoryRead+0x8e>
 800074a:	bf00      	nop
 800074c:	00010002 	.word	0x00010002

08000750 <I2C_WaitOnRXNEFlagUntilTimeout>:
{  
 8000750:	b570      	push	{r4, r5, r6, lr}
 8000752:	4604      	mov	r4, r0
 8000754:	460d      	mov	r5, r1
 8000756:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8000758:	6820      	ldr	r0, [r4, #0]
 800075a:	6943      	ldr	r3, [r0, #20]
 800075c:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8000760:	d001      	beq.n	8000766 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8000762:	2000      	movs	r0, #0
}
 8000764:	bd70      	pop	{r4, r5, r6, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8000766:	6942      	ldr	r2, [r0, #20]
 8000768:	06d2      	lsls	r2, r2, #27
 800076a:	d50b      	bpl.n	8000784 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800076c:	f06f 0210 	mvn.w	r2, #16
 8000770:	6142      	str	r2, [r0, #20]
      hi2c->State= HAL_I2C_STATE_READY;
 8000772:	2220      	movs	r2, #32
      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000774:	6423      	str	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8000776:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->PreviousState = I2C_STATE_NONE;
 800077a:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 800077c:	2001      	movs	r0, #1
      hi2c->State= HAL_I2C_STATE_READY;
 800077e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8000782:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000784:	b95d      	cbnz	r5, 800079e <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000786:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8000788:	2003      	movs	r0, #3
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800078a:	f043 0320 	orr.w	r3, r3, #32
 800078e:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8000790:	2320      	movs	r3, #32
 8000792:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      __HAL_UNLOCK(hi2c);
 8000796:	2300      	movs	r3, #0
 8000798:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 800079c:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800079e:	f7ff fd1f 	bl	80001e0 <HAL_GetTick>
 80007a2:	1b80      	subs	r0, r0, r6
 80007a4:	4285      	cmp	r5, r0
 80007a6:	d2d7      	bcs.n	8000758 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
 80007a8:	e7ed      	b.n	8000786 <I2C_WaitOnRXNEFlagUntilTimeout+0x36>

080007aa <I2C_WaitOnBTFFlagUntilTimeout>:
{  
 80007aa:	b570      	push	{r4, r5, r6, lr}
 80007ac:	4604      	mov	r4, r0
 80007ae:	460d      	mov	r5, r1
 80007b0:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80007b2:	6823      	ldr	r3, [r4, #0]
 80007b4:	695b      	ldr	r3, [r3, #20]
 80007b6:	075b      	lsls	r3, r3, #29
 80007b8:	d501      	bpl.n	80007be <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 80007ba:	2000      	movs	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80007be:	4620      	mov	r0, r4
 80007c0:	f7ff fe50 	bl	8000464 <I2C_IsAcknowledgeFailed>
 80007c4:	b9a8      	cbnz	r0, 80007f2 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 80007c6:	1c6a      	adds	r2, r5, #1
 80007c8:	d0f3      	beq.n	80007b2 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80007ca:	b965      	cbnz	r5, 80007e6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80007cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 80007ce:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80007d0:	f043 0320 	orr.w	r3, r3, #32
 80007d4:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 80007d6:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 80007d8:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 80007da:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80007dc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 80007e0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 80007e4:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80007e6:	f7ff fcfb 	bl	80001e0 <HAL_GetTick>
 80007ea:	1b80      	subs	r0, r0, r6
 80007ec:	4285      	cmp	r5, r0
 80007ee:	d2e0      	bcs.n	80007b2 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 80007f0:	e7ec      	b.n	80007cc <I2C_WaitOnBTFFlagUntilTimeout+0x22>
      return HAL_ERROR;
 80007f2:	2001      	movs	r0, #1
}
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
	...

080007f8 <HAL_I2C_Init>:
{
 80007f8:	b538      	push	{r3, r4, r5, lr}
  if(hi2c == NULL)
 80007fa:	4604      	mov	r4, r0
 80007fc:	b908      	cbnz	r0, 8000802 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 80007fe:	2001      	movs	r0, #1
 8000800:	bd38      	pop	{r3, r4, r5, pc}
  if(hi2c->State == HAL_I2C_STATE_RESET)
 8000802:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000806:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800080a:	b91b      	cbnz	r3, 8000814 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 800080c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8000810:	f001 f912 	bl	8001a38 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000814:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8000816:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000818:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800081c:	6813      	ldr	r3, [r2, #0]
 800081e:	f023 0301 	bic.w	r3, r3, #1
 8000822:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000824:	f000 fd4a 	bl	80012bc <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000828:	6863      	ldr	r3, [r4, #4]
 800082a:	4a2f      	ldr	r2, [pc, #188]	; (80008e8 <HAL_I2C_Init+0xf0>)
 800082c:	4293      	cmp	r3, r2
 800082e:	d830      	bhi.n	8000892 <HAL_I2C_Init+0x9a>
 8000830:	4a2e      	ldr	r2, [pc, #184]	; (80008ec <HAL_I2C_Init+0xf4>)
 8000832:	4290      	cmp	r0, r2
 8000834:	d9e3      	bls.n	80007fe <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8000836:	4a2e      	ldr	r2, [pc, #184]	; (80008f0 <HAL_I2C_Init+0xf8>)
  hi2c->Instance->CR2 = freqrange;
 8000838:	6821      	ldr	r1, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 800083a:	fbb0 f2f2 	udiv	r2, r0, r2
  hi2c->Instance->CR2 = freqrange;
 800083e:	604a      	str	r2, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000840:	3201      	adds	r2, #1
 8000842:	620a      	str	r2, [r1, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000844:	4a28      	ldr	r2, [pc, #160]	; (80008e8 <HAL_I2C_Init+0xf0>)
 8000846:	3801      	subs	r0, #1
 8000848:	4293      	cmp	r3, r2
 800084a:	d832      	bhi.n	80008b2 <HAL_I2C_Init+0xba>
 800084c:	005b      	lsls	r3, r3, #1
 800084e:	fbb0 f0f3 	udiv	r0, r0, r3
 8000852:	1c43      	adds	r3, r0, #1
 8000854:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000858:	2b04      	cmp	r3, #4
 800085a:	bf38      	it	cc
 800085c:	2304      	movcc	r3, #4
 800085e:	61cb      	str	r3, [r1, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000860:	6a22      	ldr	r2, [r4, #32]
 8000862:	69e3      	ldr	r3, [r4, #28]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000864:	2000      	movs	r0, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000866:	4313      	orrs	r3, r2
 8000868:	600b      	str	r3, [r1, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 800086a:	68e2      	ldr	r2, [r4, #12]
 800086c:	6923      	ldr	r3, [r4, #16]
 800086e:	4313      	orrs	r3, r2
 8000870:	608b      	str	r3, [r1, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8000872:	69a2      	ldr	r2, [r4, #24]
 8000874:	6963      	ldr	r3, [r4, #20]
 8000876:	4313      	orrs	r3, r2
 8000878:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 800087a:	680b      	ldr	r3, [r1, #0]
 800087c:	f043 0301 	orr.w	r3, r3, #1
 8000880:	600b      	str	r3, [r1, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8000882:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000884:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000886:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800088a:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800088c:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8000890:	bd38      	pop	{r3, r4, r5, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000892:	4a18      	ldr	r2, [pc, #96]	; (80008f4 <HAL_I2C_Init+0xfc>)
 8000894:	4290      	cmp	r0, r2
 8000896:	d9b2      	bls.n	80007fe <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8000898:	4d15      	ldr	r5, [pc, #84]	; (80008f0 <HAL_I2C_Init+0xf8>)
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800089a:	f44f 7296 	mov.w	r2, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 800089e:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->CR2 = freqrange;
 80008a2:	6821      	ldr	r1, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80008a4:	436a      	muls	r2, r5
  hi2c->Instance->CR2 = freqrange;
 80008a6:	604d      	str	r5, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80008a8:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 80008ac:	fbb2 f2f5 	udiv	r2, r2, r5
 80008b0:	e7c6      	b.n	8000840 <HAL_I2C_Init+0x48>
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80008b2:	68a2      	ldr	r2, [r4, #8]
 80008b4:	b952      	cbnz	r2, 80008cc <HAL_I2C_Init+0xd4>
 80008b6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80008ba:	fbb0 f0f3 	udiv	r0, r0, r3
 80008be:	1c43      	adds	r3, r0, #1
 80008c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80008c4:	b16b      	cbz	r3, 80008e2 <HAL_I2C_Init+0xea>
 80008c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008ca:	e7c8      	b.n	800085e <HAL_I2C_Init+0x66>
 80008cc:	2219      	movs	r2, #25
 80008ce:	4353      	muls	r3, r2
 80008d0:	fbb0 f0f3 	udiv	r0, r0, r3
 80008d4:	1c43      	adds	r3, r0, #1
 80008d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80008da:	b113      	cbz	r3, 80008e2 <HAL_I2C_Init+0xea>
 80008dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008e0:	e7bd      	b.n	800085e <HAL_I2C_Init+0x66>
 80008e2:	2301      	movs	r3, #1
 80008e4:	e7bb      	b.n	800085e <HAL_I2C_Init+0x66>
 80008e6:	bf00      	nop
 80008e8:	000186a0 	.word	0x000186a0
 80008ec:	001e847f 	.word	0x001e847f
 80008f0:	000f4240 	.word	0x000f4240
 80008f4:	003d08ff 	.word	0x003d08ff

080008f8 <HAL_I2C_Mem_Write>:
{
 80008f8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80008fc:	4604      	mov	r4, r0
 80008fe:	469a      	mov	sl, r3
 8000900:	4688      	mov	r8, r1
 8000902:	4691      	mov	r9, r2
 8000904:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  tickstart = HAL_GetTick();
 8000906:	f7ff fc6b 	bl	80001e0 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 800090a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 800090e:	4605      	mov	r5, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8000910:	2b20      	cmp	r3, #32
 8000912:	d003      	beq.n	800091c <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 8000914:	2002      	movs	r0, #2
}
 8000916:	b002      	add	sp, #8
 8000918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800091c:	9000      	str	r0, [sp, #0]
 800091e:	2319      	movs	r3, #25
 8000920:	2201      	movs	r2, #1
 8000922:	493e      	ldr	r1, [pc, #248]	; (8000a1c <HAL_I2C_Mem_Write+0x124>)
 8000924:	4620      	mov	r0, r4
 8000926:	f7ff fdf2 	bl	800050e <I2C_WaitOnFlagUntilTimeout>
 800092a:	2800      	cmp	r0, #0
 800092c:	d1f2      	bne.n	8000914 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 800092e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8000932:	2b01      	cmp	r3, #1
 8000934:	d0ee      	beq.n	8000914 <HAL_I2C_Mem_Write+0x1c>
 8000936:	2301      	movs	r3, #1
 8000938:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800093c:	6823      	ldr	r3, [r4, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800093e:	2700      	movs	r7, #0
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000940:	681a      	ldr	r2, [r3, #0]
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000942:	4641      	mov	r1, r8
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000944:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8000946:	bf58      	it	pl
 8000948:	681a      	ldrpl	r2, [r3, #0]
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800094a:	4620      	mov	r0, r4
      __HAL_I2C_ENABLE(hi2c);
 800094c:	bf5c      	itt	pl
 800094e:	f042 0201 	orrpl.w	r2, r2, #1
 8000952:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8000954:	681a      	ldr	r2, [r3, #0]
 8000956:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800095a:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800095c:	2321      	movs	r3, #33	; 0x21
 800095e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000962:	2340      	movs	r3, #64	; 0x40
 8000964:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->pBuffPtr    = pData;
 8000968:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800096a:	6427      	str	r7, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 800096c:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 800096e:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000972:	9501      	str	r5, [sp, #4]
    hi2c->XferCount   = Size;
 8000974:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000976:	4b2a      	ldr	r3, [pc, #168]	; (8000a20 <HAL_I2C_Mem_Write+0x128>)
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000978:	9600      	str	r6, [sp, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800097a:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 800097c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800097e:	464a      	mov	r2, r9
    hi2c->XferSize    = hi2c->XferCount;
 8000980:	8523      	strh	r3, [r4, #40]	; 0x28
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000982:	4653      	mov	r3, sl
 8000984:	f7ff fe18 	bl	80005b8 <I2C_RequestMemoryWrite>
 8000988:	2800      	cmp	r0, #0
 800098a:	d02a      	beq.n	80009e2 <HAL_I2C_Mem_Write+0xea>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800098c:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800098e:	f884 703c 	strb.w	r7, [r4, #60]	; 0x3c
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000992:	2b04      	cmp	r3, #4
 8000994:	d107      	bne.n	80009a6 <HAL_I2C_Mem_Write+0xae>
        return HAL_ERROR;
 8000996:	2001      	movs	r0, #1
 8000998:	e7bd      	b.n	8000916 <HAL_I2C_Mem_Write+0x1e>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800099a:	f7ff fde6 	bl	800056a <I2C_WaitOnTXEFlagUntilTimeout>
 800099e:	b120      	cbz	r0, 80009aa <HAL_I2C_Mem_Write+0xb2>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80009a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80009a2:	2b04      	cmp	r3, #4
 80009a4:	d034      	beq.n	8000a10 <HAL_I2C_Mem_Write+0x118>
          return HAL_TIMEOUT;
 80009a6:	2003      	movs	r0, #3
 80009a8:	e7b5      	b.n	8000916 <HAL_I2C_Mem_Write+0x1e>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80009aa:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80009ac:	6827      	ldr	r7, [r4, #0]
 80009ae:	1c4b      	adds	r3, r1, #1
 80009b0:	6263      	str	r3, [r4, #36]	; 0x24
 80009b2:	780b      	ldrb	r3, [r1, #0]
      hi2c->XferSize--;
 80009b4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80009b6:	613b      	str	r3, [r7, #16]
      hi2c->XferCount--;
 80009b8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80009ba:	1e50      	subs	r0, r2, #1
      hi2c->XferCount--;
 80009bc:	3b01      	subs	r3, #1
 80009be:	b29b      	uxth	r3, r3
 80009c0:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80009c2:	697b      	ldr	r3, [r7, #20]
      hi2c->XferSize--;
 80009c4:	b280      	uxth	r0, r0
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80009c6:	075b      	lsls	r3, r3, #29
      hi2c->XferSize--;
 80009c8:	8520      	strh	r0, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80009ca:	d50a      	bpl.n	80009e2 <HAL_I2C_Mem_Write+0xea>
 80009cc:	b148      	cbz	r0, 80009e2 <HAL_I2C_Mem_Write+0xea>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80009ce:	1c8b      	adds	r3, r1, #2
 80009d0:	6263      	str	r3, [r4, #36]	; 0x24
 80009d2:	784b      	ldrb	r3, [r1, #1]
        hi2c->XferSize--;
 80009d4:	3a02      	subs	r2, #2
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80009d6:	613b      	str	r3, [r7, #16]
        hi2c->XferCount--;
 80009d8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80009da:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80009dc:	3b01      	subs	r3, #1
 80009de:	b29b      	uxth	r3, r3
 80009e0:	8563      	strh	r3, [r4, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 80009e2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80009e4:	462a      	mov	r2, r5
 80009e6:	4631      	mov	r1, r6
 80009e8:	4620      	mov	r0, r4
    while(hi2c->XferSize > 0U)
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d1d5      	bne.n	800099a <HAL_I2C_Mem_Write+0xa2>
    if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80009ee:	f7ff fedc 	bl	80007aa <I2C_WaitOnBTFFlagUntilTimeout>
 80009f2:	2800      	cmp	r0, #0
 80009f4:	d1d4      	bne.n	80009a0 <HAL_I2C_Mem_Write+0xa8>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80009f6:	6822      	ldr	r2, [r4, #0]
 80009f8:	6813      	ldr	r3, [r2, #0]
 80009fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009fe:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8000a00:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 8000a02:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8000a06:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000a0a:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 8000a0e:	e782      	b.n	8000916 <HAL_I2C_Mem_Write+0x1e>
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000a10:	6822      	ldr	r2, [r4, #0]
 8000a12:	6813      	ldr	r3, [r2, #0]
 8000a14:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a18:	6013      	str	r3, [r2, #0]
 8000a1a:	e7bc      	b.n	8000996 <HAL_I2C_Mem_Write+0x9e>
 8000a1c:	00100002 	.word	0x00100002
 8000a20:	ffff0000 	.word	0xffff0000

08000a24 <HAL_I2C_Mem_Read>:
{
 8000a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a28:	4604      	mov	r4, r0
 8000a2a:	b086      	sub	sp, #24
 8000a2c:	469a      	mov	sl, r3
 8000a2e:	460d      	mov	r5, r1
 8000a30:	4691      	mov	r9, r2
 8000a32:	9f10      	ldr	r7, [sp, #64]	; 0x40
  tickstart = HAL_GetTick();
 8000a34:	f7ff fbd4 	bl	80001e0 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8000a38:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 8000a3c:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8000a3e:	2b20      	cmp	r3, #32
 8000a40:	d004      	beq.n	8000a4c <HAL_I2C_Mem_Read+0x28>
    return HAL_BUSY;
 8000a42:	2502      	movs	r5, #2
}
 8000a44:	4628      	mov	r0, r5
 8000a46:	b006      	add	sp, #24
 8000a48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000a4c:	9000      	str	r0, [sp, #0]
 8000a4e:	2319      	movs	r3, #25
 8000a50:	2201      	movs	r2, #1
 8000a52:	4981      	ldr	r1, [pc, #516]	; (8000c58 <HAL_I2C_Mem_Read+0x234>)
 8000a54:	4620      	mov	r0, r4
 8000a56:	f7ff fd5a 	bl	800050e <I2C_WaitOnFlagUntilTimeout>
 8000a5a:	2800      	cmp	r0, #0
 8000a5c:	d1f1      	bne.n	8000a42 <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 8000a5e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d0ed      	beq.n	8000a42 <HAL_I2C_Mem_Read+0x1e>
 8000a66:	2301      	movs	r3, #1
 8000a68:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000a6c:	6823      	ldr	r3, [r4, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000a6e:	f04f 0800 	mov.w	r8, #0
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000a72:	681a      	ldr	r2, [r3, #0]
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000a74:	4629      	mov	r1, r5
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000a76:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8000a78:	bf58      	it	pl
 8000a7a:	681a      	ldrpl	r2, [r3, #0]
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000a7c:	4620      	mov	r0, r4
      __HAL_I2C_ENABLE(hi2c);
 8000a7e:	bf5c      	itt	pl
 8000a80:	f042 0201 	orrpl.w	r2, r2, #1
 8000a84:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8000a86:	681a      	ldr	r2, [r3, #0]
 8000a88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000a8c:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8000a8e:	2322      	movs	r3, #34	; 0x22
 8000a90:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000a94:	2340      	movs	r3, #64	; 0x40
 8000a96:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->pBuffPtr    = pData;
 8000a9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000a9c:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8000aa0:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8000aa2:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000aa6:	9601      	str	r6, [sp, #4]
    hi2c->XferCount   = Size;
 8000aa8:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000aaa:	4b6c      	ldr	r3, [pc, #432]	; (8000c5c <HAL_I2C_Mem_Read+0x238>)
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000aac:	9700      	str	r7, [sp, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000aae:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8000ab0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000ab2:	464a      	mov	r2, r9
    hi2c->XferSize    = hi2c->XferCount;
 8000ab4:	8523      	strh	r3, [r4, #40]	; 0x28
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000ab6:	4653      	mov	r3, sl
 8000ab8:	f7ff fdd0 	bl	800065c <I2C_RequestMemoryRead>
 8000abc:	4605      	mov	r5, r0
 8000abe:	b130      	cbz	r0, 8000ace <HAL_I2C_Mem_Read+0xaa>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000ac0:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8000ac2:	f884 803c 	strb.w	r8, [r4, #60]	; 0x3c
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000ac6:	2b04      	cmp	r3, #4
 8000ac8:	d13d      	bne.n	8000b46 <HAL_I2C_Mem_Read+0x122>
              return HAL_ERROR;
 8000aca:	2501      	movs	r5, #1
 8000acc:	e7ba      	b.n	8000a44 <HAL_I2C_Mem_Read+0x20>
    if(hi2c->XferSize == 0U)
 8000ace:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8000ad0:	6823      	ldr	r3, [r4, #0]
 8000ad2:	b992      	cbnz	r2, 8000afa <HAL_I2C_Mem_Read+0xd6>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000ad4:	9002      	str	r0, [sp, #8]
 8000ad6:	695a      	ldr	r2, [r3, #20]
 8000ad8:	9202      	str	r2, [sp, #8]
 8000ada:	699a      	ldr	r2, [r3, #24]
 8000adc:	9202      	str	r2, [sp, #8]
 8000ade:	9a02      	ldr	r2, [sp, #8]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000ae0:	681a      	ldr	r2, [r3, #0]
 8000ae2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000ae6:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8000ae8:	2320      	movs	r3, #32
 8000aea:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000aee:	2300      	movs	r3, #0
 8000af0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8000af4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8000af8:	e7a4      	b.n	8000a44 <HAL_I2C_Mem_Read+0x20>
    else if(hi2c->XferSize == 1U)
 8000afa:	2a01      	cmp	r2, #1
 8000afc:	d125      	bne.n	8000b4a <HAL_I2C_Mem_Read+0x126>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000b04:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b06:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000b08:	6823      	ldr	r3, [r4, #0]
 8000b0a:	9003      	str	r0, [sp, #12]
 8000b0c:	695a      	ldr	r2, [r3, #20]
 8000b0e:	9203      	str	r2, [sp, #12]
 8000b10:	699a      	ldr	r2, [r3, #24]
 8000b12:	9203      	str	r2, [sp, #12]
 8000b14:	9a03      	ldr	r2, [sp, #12]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8000b1c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000b1e:	b662      	cpsie	i
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000b20:	f8df 813c 	ldr.w	r8, [pc, #316]	; 8000c60 <HAL_I2C_Mem_Read+0x23c>
    while(hi2c->XferSize > 0U)
 8000b24:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d0de      	beq.n	8000ae8 <HAL_I2C_Mem_Read+0xc4>
      if(hi2c->XferSize <= 3U)
 8000b2a:	2b03      	cmp	r3, #3
 8000b2c:	d877      	bhi.n	8000c1e <HAL_I2C_Mem_Read+0x1fa>
        if(hi2c->XferSize== 1U)
 8000b2e:	2b01      	cmp	r3, #1
 8000b30:	d127      	bne.n	8000b82 <HAL_I2C_Mem_Read+0x15e>
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8000b32:	4632      	mov	r2, r6
 8000b34:	4639      	mov	r1, r7
 8000b36:	4620      	mov	r0, r4
 8000b38:	f7ff fe0a 	bl	8000750 <I2C_WaitOnRXNEFlagUntilTimeout>
 8000b3c:	2800      	cmp	r0, #0
 8000b3e:	d03f      	beq.n	8000bc0 <HAL_I2C_Mem_Read+0x19c>
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8000b40:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000b42:	2b20      	cmp	r3, #32
 8000b44:	d1c1      	bne.n	8000aca <HAL_I2C_Mem_Read+0xa6>
              return HAL_TIMEOUT;
 8000b46:	2503      	movs	r5, #3
 8000b48:	e77c      	b.n	8000a44 <HAL_I2C_Mem_Read+0x20>
    else if(hi2c->XferSize == 2U)
 8000b4a:	2a02      	cmp	r2, #2
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8000b4c:	681a      	ldr	r2, [r3, #0]
    else if(hi2c->XferSize == 2U)
 8000b4e:	d10e      	bne.n	8000b6e <HAL_I2C_Mem_Read+0x14a>
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8000b50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000b54:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000b56:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000b58:	6823      	ldr	r3, [r4, #0]
 8000b5a:	9004      	str	r0, [sp, #16]
 8000b5c:	695a      	ldr	r2, [r3, #20]
 8000b5e:	9204      	str	r2, [sp, #16]
 8000b60:	699a      	ldr	r2, [r3, #24]
 8000b62:	9204      	str	r2, [sp, #16]
 8000b64:	9a04      	ldr	r2, [sp, #16]
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000b6c:	e7d6      	b.n	8000b1c <HAL_I2C_Mem_Read+0xf8>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000b6e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000b72:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000b74:	9005      	str	r0, [sp, #20]
 8000b76:	695a      	ldr	r2, [r3, #20]
 8000b78:	9205      	str	r2, [sp, #20]
 8000b7a:	699b      	ldr	r3, [r3, #24]
 8000b7c:	9305      	str	r3, [sp, #20]
 8000b7e:	9b05      	ldr	r3, [sp, #20]
 8000b80:	e7ce      	b.n	8000b20 <HAL_I2C_Mem_Read+0xfc>
        else if(hi2c->XferSize == 2U)
 8000b82:	2b02      	cmp	r3, #2
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000b84:	9600      	str	r6, [sp, #0]
 8000b86:	463b      	mov	r3, r7
 8000b88:	f04f 0200 	mov.w	r2, #0
 8000b8c:	4641      	mov	r1, r8
 8000b8e:	4620      	mov	r0, r4
        else if(hi2c->XferSize == 2U)
 8000b90:	d124      	bne.n	8000bdc <HAL_I2C_Mem_Read+0x1b8>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000b92:	f7ff fcbc 	bl	800050e <I2C_WaitOnFlagUntilTimeout>
 8000b96:	2800      	cmp	r0, #0
 8000b98:	d1d5      	bne.n	8000b46 <HAL_I2C_Mem_Read+0x122>
 8000b9a:	b672      	cpsid	i
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000b9c:	6823      	ldr	r3, [r4, #0]
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000ba4:	601a      	str	r2, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8000ba6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000ba8:	691b      	ldr	r3, [r3, #16]
 8000baa:	1c51      	adds	r1, r2, #1
 8000bac:	6261      	str	r1, [r4, #36]	; 0x24
 8000bae:	7013      	strb	r3, [r2, #0]
          hi2c->XferSize--;
 8000bb0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8000bb2:	3b01      	subs	r3, #1
 8000bb4:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8000bb6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000bb8:	3b01      	subs	r3, #1
 8000bba:	b29b      	uxth	r3, r3
 8000bbc:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8000bbe:	b662      	cpsie	i
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8000bc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000bc2:	1c5a      	adds	r2, r3, #1
 8000bc4:	6262      	str	r2, [r4, #36]	; 0x24
 8000bc6:	6822      	ldr	r2, [r4, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8000bc8:	6912      	ldr	r2, [r2, #16]
 8000bca:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8000bcc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8000bce:	3b01      	subs	r3, #1
 8000bd0:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8000bd2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000bd4:	3b01      	subs	r3, #1
 8000bd6:	b29b      	uxth	r3, r3
 8000bd8:	8563      	strh	r3, [r4, #42]	; 0x2a
 8000bda:	e7a3      	b.n	8000b24 <HAL_I2C_Mem_Read+0x100>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000bdc:	f7ff fc97 	bl	800050e <I2C_WaitOnFlagUntilTimeout>
 8000be0:	4602      	mov	r2, r0
 8000be2:	2800      	cmp	r0, #0
 8000be4:	d1af      	bne.n	8000b46 <HAL_I2C_Mem_Read+0x122>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8000be6:	6821      	ldr	r1, [r4, #0]
 8000be8:	680b      	ldr	r3, [r1, #0]
 8000bea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000bee:	600b      	str	r3, [r1, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf0:	b672      	cpsid	i
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8000bf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000bf4:	4620      	mov	r0, r4
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8000bf6:	1c59      	adds	r1, r3, #1
 8000bf8:	6261      	str	r1, [r4, #36]	; 0x24
 8000bfa:	6821      	ldr	r1, [r4, #0]
 8000bfc:	6909      	ldr	r1, [r1, #16]
 8000bfe:	7019      	strb	r1, [r3, #0]
          hi2c->XferSize--;
 8000c00:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000c02:	9600      	str	r6, [sp, #0]
          hi2c->XferSize--;
 8000c04:	3b01      	subs	r3, #1
 8000c06:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8000c08:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000c0a:	4641      	mov	r1, r8
          hi2c->XferCount--;
 8000c0c:	3b01      	subs	r3, #1
 8000c0e:	b29b      	uxth	r3, r3
 8000c10:	8563      	strh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000c12:	463b      	mov	r3, r7
 8000c14:	f7ff fc7b 	bl	800050e <I2C_WaitOnFlagUntilTimeout>
 8000c18:	2800      	cmp	r0, #0
 8000c1a:	d0bf      	beq.n	8000b9c <HAL_I2C_Mem_Read+0x178>
 8000c1c:	e793      	b.n	8000b46 <HAL_I2C_Mem_Read+0x122>
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000c1e:	4632      	mov	r2, r6
 8000c20:	4639      	mov	r1, r7
 8000c22:	4620      	mov	r0, r4
 8000c24:	f7ff fd94 	bl	8000750 <I2C_WaitOnRXNEFlagUntilTimeout>
 8000c28:	2800      	cmp	r0, #0
 8000c2a:	d189      	bne.n	8000b40 <HAL_I2C_Mem_Read+0x11c>
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8000c2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000c2e:	1c5a      	adds	r2, r3, #1
 8000c30:	6262      	str	r2, [r4, #36]	; 0x24
 8000c32:	6822      	ldr	r2, [r4, #0]
 8000c34:	6912      	ldr	r2, [r2, #16]
 8000c36:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 8000c38:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8000c3a:	6822      	ldr	r2, [r4, #0]
        hi2c->XferSize--;
 8000c3c:	3b01      	subs	r3, #1
 8000c3e:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8000c40:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000c42:	3b01      	subs	r3, #1
 8000c44:	b29b      	uxth	r3, r3
 8000c46:	8563      	strh	r3, [r4, #42]	; 0x2a
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8000c48:	6953      	ldr	r3, [r2, #20]
 8000c4a:	075b      	lsls	r3, r3, #29
 8000c4c:	f57f af6a 	bpl.w	8000b24 <HAL_I2C_Mem_Read+0x100>
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8000c50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000c52:	1c59      	adds	r1, r3, #1
 8000c54:	6261      	str	r1, [r4, #36]	; 0x24
 8000c56:	e7b7      	b.n	8000bc8 <HAL_I2C_Mem_Read+0x1a4>
 8000c58:	00100002 	.word	0x00100002
 8000c5c:	ffff0000 	.word	0xffff0000
 8000c60:	00010004 	.word	0x00010004

08000c64 <HAL_I2C_IsDeviceReady>:
{
 8000c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c68:	4604      	mov	r4, r0
 8000c6a:	b085      	sub	sp, #20
 8000c6c:	4698      	mov	r8, r3
 8000c6e:	4689      	mov	r9, r1
 8000c70:	4692      	mov	sl, r2
  tickstart = HAL_GetTick();
 8000c72:	f7ff fab5 	bl	80001e0 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8000c76:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 8000c7a:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8000c7c:	2b20      	cmp	r3, #32
 8000c7e:	d003      	beq.n	8000c88 <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 8000c80:	2002      	movs	r0, #2
}
 8000c82:	b005      	add	sp, #20
 8000c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000c88:	9000      	str	r0, [sp, #0]
 8000c8a:	2319      	movs	r3, #25
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	494b      	ldr	r1, [pc, #300]	; (8000dbc <HAL_I2C_IsDeviceReady+0x158>)
 8000c90:	4620      	mov	r0, r4
 8000c92:	f7ff fc3c 	bl	800050e <I2C_WaitOnFlagUntilTimeout>
 8000c96:	2800      	cmp	r0, #0
 8000c98:	d1f2      	bne.n	8000c80 <HAL_I2C_IsDeviceReady+0x1c>
    __HAL_LOCK(hi2c);
 8000c9a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8000c9e:	2b01      	cmp	r3, #1
 8000ca0:	d0ee      	beq.n	8000c80 <HAL_I2C_IsDeviceReady+0x1c>
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000ca8:	6823      	ldr	r3, [r4, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000caa:	2500      	movs	r5, #0
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000cac:	681a      	ldr	r2, [r3, #0]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000cae:	f8df b10c 	ldr.w	fp, [pc, #268]	; 8000dbc <HAL_I2C_IsDeviceReady+0x158>
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000cb2:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8000cb4:	bf58      	it	pl
 8000cb6:	681a      	ldrpl	r2, [r3, #0]
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000cb8:	f009 09fe 	and.w	r9, r9, #254	; 0xfe
      __HAL_I2C_ENABLE(hi2c);
 8000cbc:	bf5c      	itt	pl
 8000cbe:	f042 0201 	orrpl.w	r2, r2, #1
 8000cc2:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000cca:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8000ccc:	2324      	movs	r3, #36	; 0x24
 8000cce:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000cd2:	4b3b      	ldr	r3, [pc, #236]	; (8000dc0 <HAL_I2C_IsDeviceReady+0x15c>)
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000cd4:	6425      	str	r5, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000cd6:	62e3      	str	r3, [r4, #44]	; 0x2c
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8000cd8:	6822      	ldr	r2, [r4, #0]
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8000cda:	f04f 1101 	mov.w	r1, #65537	; 0x10001
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8000cde:	6813      	ldr	r3, [r2, #0]
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8000ce0:	4620      	mov	r0, r4
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8000ce2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ce6:	6013      	str	r3, [r2, #0]
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8000ce8:	9600      	str	r6, [sp, #0]
 8000cea:	4643      	mov	r3, r8
 8000cec:	2200      	movs	r2, #0
 8000cee:	f7ff fc0e 	bl	800050e <I2C_WaitOnFlagUntilTimeout>
 8000cf2:	b108      	cbz	r0, 8000cf8 <HAL_I2C_IsDeviceReady+0x94>
        return HAL_TIMEOUT;
 8000cf4:	2003      	movs	r0, #3
 8000cf6:	e7c4      	b.n	8000c82 <HAL_I2C_IsDeviceReady+0x1e>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000cf8:	6823      	ldr	r3, [r4, #0]
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8000cfa:	27a0      	movs	r7, #160	; 0xa0
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000cfc:	f8c3 9010 	str.w	r9, [r3, #16]
      tickstart = HAL_GetTick();
 8000d00:	f7ff fa6e 	bl	80001e0 <HAL_GetTick>
 8000d04:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8000d06:	6823      	ldr	r3, [r4, #0]
 8000d08:	6959      	ldr	r1, [r3, #20]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8000d0a:	695a      	ldr	r2, [r3, #20]
      tmp3 = hi2c->State;
 8000d0c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8000d10:	f3c1 0140 	ubfx	r1, r1, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8000d14:	f3c2 2280 	ubfx	r2, r2, #10, #1
      tmp3 = hi2c->State;
 8000d18:	b2db      	uxtb	r3, r3
      while((tmp1 == RESET) && (tmp2 == RESET) && (tmp3 != HAL_I2C_STATE_TIMEOUT))
 8000d1a:	b911      	cbnz	r1, 8000d22 <HAL_I2C_IsDeviceReady+0xbe>
 8000d1c:	b90a      	cbnz	r2, 8000d22 <HAL_I2C_IsDeviceReady+0xbe>
 8000d1e:	2ba0      	cmp	r3, #160	; 0xa0
 8000d20:	d120      	bne.n	8000d64 <HAL_I2C_IsDeviceReady+0x100>
      hi2c->State = HAL_I2C_STATE_READY;
 8000d22:	2720      	movs	r7, #32
      if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8000d24:	6823      	ldr	r3, [r4, #0]
      hi2c->State = HAL_I2C_STATE_READY;
 8000d26:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
      if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8000d2a:	695a      	ldr	r2, [r3, #20]
 8000d2c:	f012 0f02 	tst.w	r2, #2
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000d36:	601a      	str	r2, [r3, #0]
      if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8000d38:	d02a      	beq.n	8000d90 <HAL_I2C_IsDeviceReady+0x12c>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	9203      	str	r2, [sp, #12]
 8000d3e:	695a      	ldr	r2, [r3, #20]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000d40:	491e      	ldr	r1, [pc, #120]	; (8000dbc <HAL_I2C_IsDeviceReady+0x158>)
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000d42:	9203      	str	r2, [sp, #12]
 8000d44:	699b      	ldr	r3, [r3, #24]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000d46:	2201      	movs	r2, #1
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000d48:	9303      	str	r3, [sp, #12]
 8000d4a:	9b03      	ldr	r3, [sp, #12]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000d4c:	9600      	str	r6, [sp, #0]
 8000d4e:	2319      	movs	r3, #25
 8000d50:	4620      	mov	r0, r4
 8000d52:	f7ff fbdc 	bl	800050e <I2C_WaitOnFlagUntilTimeout>
 8000d56:	2800      	cmp	r0, #0
 8000d58:	d1cc      	bne.n	8000cf4 <HAL_I2C_IsDeviceReady+0x90>
        hi2c->State = HAL_I2C_STATE_READY;
 8000d5a:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8000d5e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
        return HAL_OK;
 8000d62:	e78e      	b.n	8000c82 <HAL_I2C_IsDeviceReady+0x1e>
        if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8000d64:	f1b8 0f00 	cmp.w	r8, #0
 8000d68:	d10c      	bne.n	8000d84 <HAL_I2C_IsDeviceReady+0x120>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8000d6a:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8000d6e:	6823      	ldr	r3, [r4, #0]
 8000d70:	6959      	ldr	r1, [r3, #20]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8000d72:	695a      	ldr	r2, [r3, #20]
        tmp3 = hi2c->State;
 8000d74:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8000d78:	f3c1 0140 	ubfx	r1, r1, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8000d7c:	f3c2 2280 	ubfx	r2, r2, #10, #1
        tmp3 = hi2c->State;
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	e7ca      	b.n	8000d1a <HAL_I2C_IsDeviceReady+0xb6>
        if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8000d84:	f7ff fa2c 	bl	80001e0 <HAL_GetTick>
 8000d88:	1b80      	subs	r0, r0, r6
 8000d8a:	4580      	cmp	r8, r0
 8000d8c:	d3ed      	bcc.n	8000d6a <HAL_I2C_IsDeviceReady+0x106>
 8000d8e:	e7ee      	b.n	8000d6e <HAL_I2C_IsDeviceReady+0x10a>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000d90:	f46f 6280 	mvn.w	r2, #1024	; 0x400
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000d94:	4659      	mov	r1, fp
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000d96:	615a      	str	r2, [r3, #20]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000d98:	4620      	mov	r0, r4
 8000d9a:	9600      	str	r6, [sp, #0]
 8000d9c:	2319      	movs	r3, #25
 8000d9e:	2201      	movs	r2, #1
 8000da0:	f7ff fbb5 	bl	800050e <I2C_WaitOnFlagUntilTimeout>
 8000da4:	2800      	cmp	r0, #0
 8000da6:	d1a5      	bne.n	8000cf4 <HAL_I2C_IsDeviceReady+0x90>
 8000da8:	3501      	adds	r5, #1
    }while(I2C_Trials++ < Trials);
 8000daa:	45aa      	cmp	sl, r5
 8000dac:	d894      	bhi.n	8000cd8 <HAL_I2C_IsDeviceReady+0x74>
    __HAL_UNLOCK(hi2c);
 8000dae:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8000db2:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
    return HAL_ERROR;
 8000db6:	2001      	movs	r0, #1
 8000db8:	e763      	b.n	8000c82 <HAL_I2C_IsDeviceReady+0x1e>
 8000dba:	bf00      	nop
 8000dbc:	00100002 	.word	0x00100002
 8000dc0:	ffff0000 	.word	0xffff0000

08000dc4 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 8000dc4:	6c00      	ldr	r0, [r0, #64]	; 0x40
}
 8000dc6:	4770      	bx	lr

08000dc8 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dc8:	6803      	ldr	r3, [r0, #0]
{
 8000dca:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dce:	07db      	lsls	r3, r3, #31
{
 8000dd0:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dd2:	d410      	bmi.n	8000df6 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dd4:	682b      	ldr	r3, [r5, #0]
 8000dd6:	079f      	lsls	r7, r3, #30
 8000dd8:	d45e      	bmi.n	8000e98 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000dda:	682b      	ldr	r3, [r5, #0]
 8000ddc:	0719      	lsls	r1, r3, #28
 8000dde:	f100 8095 	bmi.w	8000f0c <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000de2:	682b      	ldr	r3, [r5, #0]
 8000de4:	075a      	lsls	r2, r3, #29
 8000de6:	f100 80bf 	bmi.w	8000f68 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000dea:	69ea      	ldr	r2, [r5, #28]
 8000dec:	2a00      	cmp	r2, #0
 8000dee:	f040 812d 	bne.w	800104c <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000df2:	2000      	movs	r0, #0
 8000df4:	e014      	b.n	8000e20 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000df6:	4c90      	ldr	r4, [pc, #576]	; (8001038 <HAL_RCC_OscConfig+0x270>)
 8000df8:	6863      	ldr	r3, [r4, #4]
 8000dfa:	f003 030c 	and.w	r3, r3, #12
 8000dfe:	2b04      	cmp	r3, #4
 8000e00:	d007      	beq.n	8000e12 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e02:	6863      	ldr	r3, [r4, #4]
 8000e04:	f003 030c 	and.w	r3, r3, #12
 8000e08:	2b08      	cmp	r3, #8
 8000e0a:	d10c      	bne.n	8000e26 <HAL_RCC_OscConfig+0x5e>
 8000e0c:	6863      	ldr	r3, [r4, #4]
 8000e0e:	03de      	lsls	r6, r3, #15
 8000e10:	d509      	bpl.n	8000e26 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e12:	6823      	ldr	r3, [r4, #0]
 8000e14:	039c      	lsls	r4, r3, #14
 8000e16:	d5dd      	bpl.n	8000dd4 <HAL_RCC_OscConfig+0xc>
 8000e18:	686b      	ldr	r3, [r5, #4]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d1da      	bne.n	8000dd4 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000e1e:	2001      	movs	r0, #1
}
 8000e20:	b002      	add	sp, #8
 8000e22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e26:	686b      	ldr	r3, [r5, #4]
 8000e28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e2c:	d110      	bne.n	8000e50 <HAL_RCC_OscConfig+0x88>
 8000e2e:	6823      	ldr	r3, [r4, #0]
 8000e30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e34:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000e36:	f7ff f9d3 	bl	80001e0 <HAL_GetTick>
 8000e3a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e3c:	6823      	ldr	r3, [r4, #0]
 8000e3e:	0398      	lsls	r0, r3, #14
 8000e40:	d4c8      	bmi.n	8000dd4 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e42:	f7ff f9cd 	bl	80001e0 <HAL_GetTick>
 8000e46:	1b80      	subs	r0, r0, r6
 8000e48:	2864      	cmp	r0, #100	; 0x64
 8000e4a:	d9f7      	bls.n	8000e3c <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000e4c:	2003      	movs	r0, #3
 8000e4e:	e7e7      	b.n	8000e20 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e50:	b99b      	cbnz	r3, 8000e7a <HAL_RCC_OscConfig+0xb2>
 8000e52:	6823      	ldr	r3, [r4, #0]
 8000e54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e58:	6023      	str	r3, [r4, #0]
 8000e5a:	6823      	ldr	r3, [r4, #0]
 8000e5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e60:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000e62:	f7ff f9bd 	bl	80001e0 <HAL_GetTick>
 8000e66:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e68:	6823      	ldr	r3, [r4, #0]
 8000e6a:	0399      	lsls	r1, r3, #14
 8000e6c:	d5b2      	bpl.n	8000dd4 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e6e:	f7ff f9b7 	bl	80001e0 <HAL_GetTick>
 8000e72:	1b80      	subs	r0, r0, r6
 8000e74:	2864      	cmp	r0, #100	; 0x64
 8000e76:	d9f7      	bls.n	8000e68 <HAL_RCC_OscConfig+0xa0>
 8000e78:	e7e8      	b.n	8000e4c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e7a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e7e:	6823      	ldr	r3, [r4, #0]
 8000e80:	d103      	bne.n	8000e8a <HAL_RCC_OscConfig+0xc2>
 8000e82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e86:	6023      	str	r3, [r4, #0]
 8000e88:	e7d1      	b.n	8000e2e <HAL_RCC_OscConfig+0x66>
 8000e8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e8e:	6023      	str	r3, [r4, #0]
 8000e90:	6823      	ldr	r3, [r4, #0]
 8000e92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e96:	e7cd      	b.n	8000e34 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000e98:	4c67      	ldr	r4, [pc, #412]	; (8001038 <HAL_RCC_OscConfig+0x270>)
 8000e9a:	6863      	ldr	r3, [r4, #4]
 8000e9c:	f013 0f0c 	tst.w	r3, #12
 8000ea0:	d007      	beq.n	8000eb2 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000ea2:	6863      	ldr	r3, [r4, #4]
 8000ea4:	f003 030c 	and.w	r3, r3, #12
 8000ea8:	2b08      	cmp	r3, #8
 8000eaa:	d110      	bne.n	8000ece <HAL_RCC_OscConfig+0x106>
 8000eac:	6863      	ldr	r3, [r4, #4]
 8000eae:	03da      	lsls	r2, r3, #15
 8000eb0:	d40d      	bmi.n	8000ece <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000eb2:	6823      	ldr	r3, [r4, #0]
 8000eb4:	079b      	lsls	r3, r3, #30
 8000eb6:	d502      	bpl.n	8000ebe <HAL_RCC_OscConfig+0xf6>
 8000eb8:	692b      	ldr	r3, [r5, #16]
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d1af      	bne.n	8000e1e <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ebe:	6823      	ldr	r3, [r4, #0]
 8000ec0:	696a      	ldr	r2, [r5, #20]
 8000ec2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000ec6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000eca:	6023      	str	r3, [r4, #0]
 8000ecc:	e785      	b.n	8000dda <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ece:	692a      	ldr	r2, [r5, #16]
 8000ed0:	4b5a      	ldr	r3, [pc, #360]	; (800103c <HAL_RCC_OscConfig+0x274>)
 8000ed2:	b16a      	cbz	r2, 8000ef0 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000ed8:	f7ff f982 	bl	80001e0 <HAL_GetTick>
 8000edc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ede:	6823      	ldr	r3, [r4, #0]
 8000ee0:	079f      	lsls	r7, r3, #30
 8000ee2:	d4ec      	bmi.n	8000ebe <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ee4:	f7ff f97c 	bl	80001e0 <HAL_GetTick>
 8000ee8:	1b80      	subs	r0, r0, r6
 8000eea:	2802      	cmp	r0, #2
 8000eec:	d9f7      	bls.n	8000ede <HAL_RCC_OscConfig+0x116>
 8000eee:	e7ad      	b.n	8000e4c <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000ef0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000ef2:	f7ff f975 	bl	80001e0 <HAL_GetTick>
 8000ef6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ef8:	6823      	ldr	r3, [r4, #0]
 8000efa:	0798      	lsls	r0, r3, #30
 8000efc:	f57f af6d 	bpl.w	8000dda <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f00:	f7ff f96e 	bl	80001e0 <HAL_GetTick>
 8000f04:	1b80      	subs	r0, r0, r6
 8000f06:	2802      	cmp	r0, #2
 8000f08:	d9f6      	bls.n	8000ef8 <HAL_RCC_OscConfig+0x130>
 8000f0a:	e79f      	b.n	8000e4c <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f0c:	69aa      	ldr	r2, [r5, #24]
 8000f0e:	4c4a      	ldr	r4, [pc, #296]	; (8001038 <HAL_RCC_OscConfig+0x270>)
 8000f10:	4b4b      	ldr	r3, [pc, #300]	; (8001040 <HAL_RCC_OscConfig+0x278>)
 8000f12:	b1da      	cbz	r2, 8000f4c <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8000f14:	2201      	movs	r2, #1
 8000f16:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000f18:	f7ff f962 	bl	80001e0 <HAL_GetTick>
 8000f1c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000f20:	079b      	lsls	r3, r3, #30
 8000f22:	d50d      	bpl.n	8000f40 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000f24:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000f28:	4b46      	ldr	r3, [pc, #280]	; (8001044 <HAL_RCC_OscConfig+0x27c>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8000f30:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000f32:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000f34:	9b01      	ldr	r3, [sp, #4]
 8000f36:	1e5a      	subs	r2, r3, #1
 8000f38:	9201      	str	r2, [sp, #4]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d1f9      	bne.n	8000f32 <HAL_RCC_OscConfig+0x16a>
 8000f3e:	e750      	b.n	8000de2 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f40:	f7ff f94e 	bl	80001e0 <HAL_GetTick>
 8000f44:	1b80      	subs	r0, r0, r6
 8000f46:	2802      	cmp	r0, #2
 8000f48:	d9e9      	bls.n	8000f1e <HAL_RCC_OscConfig+0x156>
 8000f4a:	e77f      	b.n	8000e4c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000f4c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000f4e:	f7ff f947 	bl	80001e0 <HAL_GetTick>
 8000f52:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000f56:	079f      	lsls	r7, r3, #30
 8000f58:	f57f af43 	bpl.w	8000de2 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f5c:	f7ff f940 	bl	80001e0 <HAL_GetTick>
 8000f60:	1b80      	subs	r0, r0, r6
 8000f62:	2802      	cmp	r0, #2
 8000f64:	d9f6      	bls.n	8000f54 <HAL_RCC_OscConfig+0x18c>
 8000f66:	e771      	b.n	8000e4c <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f68:	4c33      	ldr	r4, [pc, #204]	; (8001038 <HAL_RCC_OscConfig+0x270>)
 8000f6a:	69e3      	ldr	r3, [r4, #28]
 8000f6c:	00d8      	lsls	r0, r3, #3
 8000f6e:	d424      	bmi.n	8000fba <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8000f70:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f72:	69e3      	ldr	r3, [r4, #28]
 8000f74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f78:	61e3      	str	r3, [r4, #28]
 8000f7a:	69e3      	ldr	r3, [r4, #28]
 8000f7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f80:	9300      	str	r3, [sp, #0]
 8000f82:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f84:	4e30      	ldr	r6, [pc, #192]	; (8001048 <HAL_RCC_OscConfig+0x280>)
 8000f86:	6833      	ldr	r3, [r6, #0]
 8000f88:	05d9      	lsls	r1, r3, #23
 8000f8a:	d518      	bpl.n	8000fbe <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f8c:	68eb      	ldr	r3, [r5, #12]
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d126      	bne.n	8000fe0 <HAL_RCC_OscConfig+0x218>
 8000f92:	6a23      	ldr	r3, [r4, #32]
 8000f94:	f043 0301 	orr.w	r3, r3, #1
 8000f98:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000f9a:	f7ff f921 	bl	80001e0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f9e:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000fa2:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fa4:	6a23      	ldr	r3, [r4, #32]
 8000fa6:	079b      	lsls	r3, r3, #30
 8000fa8:	d53f      	bpl.n	800102a <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8000faa:	2f00      	cmp	r7, #0
 8000fac:	f43f af1d 	beq.w	8000dea <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fb0:	69e3      	ldr	r3, [r4, #28]
 8000fb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000fb6:	61e3      	str	r3, [r4, #28]
 8000fb8:	e717      	b.n	8000dea <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8000fba:	2700      	movs	r7, #0
 8000fbc:	e7e2      	b.n	8000f84 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fbe:	6833      	ldr	r3, [r6, #0]
 8000fc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fc4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000fc6:	f7ff f90b 	bl	80001e0 <HAL_GetTick>
 8000fca:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fcc:	6833      	ldr	r3, [r6, #0]
 8000fce:	05da      	lsls	r2, r3, #23
 8000fd0:	d4dc      	bmi.n	8000f8c <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fd2:	f7ff f905 	bl	80001e0 <HAL_GetTick>
 8000fd6:	eba0 0008 	sub.w	r0, r0, r8
 8000fda:	2864      	cmp	r0, #100	; 0x64
 8000fdc:	d9f6      	bls.n	8000fcc <HAL_RCC_OscConfig+0x204>
 8000fde:	e735      	b.n	8000e4c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fe0:	b9ab      	cbnz	r3, 800100e <HAL_RCC_OscConfig+0x246>
 8000fe2:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fe4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fe8:	f023 0301 	bic.w	r3, r3, #1
 8000fec:	6223      	str	r3, [r4, #32]
 8000fee:	6a23      	ldr	r3, [r4, #32]
 8000ff0:	f023 0304 	bic.w	r3, r3, #4
 8000ff4:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000ff6:	f7ff f8f3 	bl	80001e0 <HAL_GetTick>
 8000ffa:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ffc:	6a23      	ldr	r3, [r4, #32]
 8000ffe:	0798      	lsls	r0, r3, #30
 8001000:	d5d3      	bpl.n	8000faa <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001002:	f7ff f8ed 	bl	80001e0 <HAL_GetTick>
 8001006:	1b80      	subs	r0, r0, r6
 8001008:	4540      	cmp	r0, r8
 800100a:	d9f7      	bls.n	8000ffc <HAL_RCC_OscConfig+0x234>
 800100c:	e71e      	b.n	8000e4c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800100e:	2b05      	cmp	r3, #5
 8001010:	6a23      	ldr	r3, [r4, #32]
 8001012:	d103      	bne.n	800101c <HAL_RCC_OscConfig+0x254>
 8001014:	f043 0304 	orr.w	r3, r3, #4
 8001018:	6223      	str	r3, [r4, #32]
 800101a:	e7ba      	b.n	8000f92 <HAL_RCC_OscConfig+0x1ca>
 800101c:	f023 0301 	bic.w	r3, r3, #1
 8001020:	6223      	str	r3, [r4, #32]
 8001022:	6a23      	ldr	r3, [r4, #32]
 8001024:	f023 0304 	bic.w	r3, r3, #4
 8001028:	e7b6      	b.n	8000f98 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800102a:	f7ff f8d9 	bl	80001e0 <HAL_GetTick>
 800102e:	eba0 0008 	sub.w	r0, r0, r8
 8001032:	42b0      	cmp	r0, r6
 8001034:	d9b6      	bls.n	8000fa4 <HAL_RCC_OscConfig+0x1dc>
 8001036:	e709      	b.n	8000e4c <HAL_RCC_OscConfig+0x84>
 8001038:	40021000 	.word	0x40021000
 800103c:	42420000 	.word	0x42420000
 8001040:	42420480 	.word	0x42420480
 8001044:	20000008 	.word	0x20000008
 8001048:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800104c:	4c22      	ldr	r4, [pc, #136]	; (80010d8 <HAL_RCC_OscConfig+0x310>)
 800104e:	6863      	ldr	r3, [r4, #4]
 8001050:	f003 030c 	and.w	r3, r3, #12
 8001054:	2b08      	cmp	r3, #8
 8001056:	f43f aee2 	beq.w	8000e1e <HAL_RCC_OscConfig+0x56>
 800105a:	2300      	movs	r3, #0
 800105c:	4e1f      	ldr	r6, [pc, #124]	; (80010dc <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800105e:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001060:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001062:	d12b      	bne.n	80010bc <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8001064:	f7ff f8bc 	bl	80001e0 <HAL_GetTick>
 8001068:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800106a:	6823      	ldr	r3, [r4, #0]
 800106c:	0199      	lsls	r1, r3, #6
 800106e:	d41f      	bmi.n	80010b0 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001070:	6a2b      	ldr	r3, [r5, #32]
 8001072:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001076:	d105      	bne.n	8001084 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001078:	6862      	ldr	r2, [r4, #4]
 800107a:	68a9      	ldr	r1, [r5, #8]
 800107c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001080:	430a      	orrs	r2, r1
 8001082:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001084:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001086:	6862      	ldr	r2, [r4, #4]
 8001088:	430b      	orrs	r3, r1
 800108a:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800108e:	4313      	orrs	r3, r2
 8001090:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001092:	2301      	movs	r3, #1
 8001094:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001096:	f7ff f8a3 	bl	80001e0 <HAL_GetTick>
 800109a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800109c:	6823      	ldr	r3, [r4, #0]
 800109e:	019a      	lsls	r2, r3, #6
 80010a0:	f53f aea7 	bmi.w	8000df2 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010a4:	f7ff f89c 	bl	80001e0 <HAL_GetTick>
 80010a8:	1b40      	subs	r0, r0, r5
 80010aa:	2802      	cmp	r0, #2
 80010ac:	d9f6      	bls.n	800109c <HAL_RCC_OscConfig+0x2d4>
 80010ae:	e6cd      	b.n	8000e4c <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010b0:	f7ff f896 	bl	80001e0 <HAL_GetTick>
 80010b4:	1bc0      	subs	r0, r0, r7
 80010b6:	2802      	cmp	r0, #2
 80010b8:	d9d7      	bls.n	800106a <HAL_RCC_OscConfig+0x2a2>
 80010ba:	e6c7      	b.n	8000e4c <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 80010bc:	f7ff f890 	bl	80001e0 <HAL_GetTick>
 80010c0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010c2:	6823      	ldr	r3, [r4, #0]
 80010c4:	019b      	lsls	r3, r3, #6
 80010c6:	f57f ae94 	bpl.w	8000df2 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010ca:	f7ff f889 	bl	80001e0 <HAL_GetTick>
 80010ce:	1b40      	subs	r0, r0, r5
 80010d0:	2802      	cmp	r0, #2
 80010d2:	d9f6      	bls.n	80010c2 <HAL_RCC_OscConfig+0x2fa>
 80010d4:	e6ba      	b.n	8000e4c <HAL_RCC_OscConfig+0x84>
 80010d6:	bf00      	nop
 80010d8:	40021000 	.word	0x40021000
 80010dc:	42420060 	.word	0x42420060

080010e0 <HAL_RCC_GetSysClockFreq>:
{
 80010e0:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80010e2:	4b19      	ldr	r3, [pc, #100]	; (8001148 <HAL_RCC_GetSysClockFreq+0x68>)
{
 80010e4:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80010e6:	ac02      	add	r4, sp, #8
 80010e8:	f103 0510 	add.w	r5, r3, #16
 80010ec:	4622      	mov	r2, r4
 80010ee:	6818      	ldr	r0, [r3, #0]
 80010f0:	6859      	ldr	r1, [r3, #4]
 80010f2:	3308      	adds	r3, #8
 80010f4:	c203      	stmia	r2!, {r0, r1}
 80010f6:	42ab      	cmp	r3, r5
 80010f8:	4614      	mov	r4, r2
 80010fa:	d1f7      	bne.n	80010ec <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80010fc:	2301      	movs	r3, #1
 80010fe:	f88d 3004 	strb.w	r3, [sp, #4]
 8001102:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8001104:	4911      	ldr	r1, [pc, #68]	; (800114c <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001106:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 800110a:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800110c:	f003 020c 	and.w	r2, r3, #12
 8001110:	2a08      	cmp	r2, #8
 8001112:	d117      	bne.n	8001144 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001114:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001118:	a806      	add	r0, sp, #24
 800111a:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800111c:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800111e:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001122:	d50c      	bpl.n	800113e <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001124:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001126:	480a      	ldr	r0, [pc, #40]	; (8001150 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001128:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800112c:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800112e:	aa06      	add	r2, sp, #24
 8001130:	4413      	add	r3, r2
 8001132:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001136:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800113a:	b007      	add	sp, #28
 800113c:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800113e:	4805      	ldr	r0, [pc, #20]	; (8001154 <HAL_RCC_GetSysClockFreq+0x74>)
 8001140:	4350      	muls	r0, r2
 8001142:	e7fa      	b.n	800113a <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8001144:	4802      	ldr	r0, [pc, #8]	; (8001150 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8001146:	e7f8      	b.n	800113a <HAL_RCC_GetSysClockFreq+0x5a>
 8001148:	080024d4 	.word	0x080024d4
 800114c:	40021000 	.word	0x40021000
 8001150:	007a1200 	.word	0x007a1200
 8001154:	003d0900 	.word	0x003d0900

08001158 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001158:	4a54      	ldr	r2, [pc, #336]	; (80012ac <HAL_RCC_ClockConfig+0x154>)
{
 800115a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800115e:	6813      	ldr	r3, [r2, #0]
{
 8001160:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001162:	f003 0307 	and.w	r3, r3, #7
 8001166:	428b      	cmp	r3, r1
{
 8001168:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800116a:	d32a      	bcc.n	80011c2 <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800116c:	6829      	ldr	r1, [r5, #0]
 800116e:	078c      	lsls	r4, r1, #30
 8001170:	d434      	bmi.n	80011dc <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001172:	07ca      	lsls	r2, r1, #31
 8001174:	d447      	bmi.n	8001206 <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001176:	4a4d      	ldr	r2, [pc, #308]	; (80012ac <HAL_RCC_ClockConfig+0x154>)
 8001178:	6813      	ldr	r3, [r2, #0]
 800117a:	f003 0307 	and.w	r3, r3, #7
 800117e:	429e      	cmp	r6, r3
 8001180:	f0c0 8082 	bcc.w	8001288 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001184:	682a      	ldr	r2, [r5, #0]
 8001186:	4c4a      	ldr	r4, [pc, #296]	; (80012b0 <HAL_RCC_ClockConfig+0x158>)
 8001188:	f012 0f04 	tst.w	r2, #4
 800118c:	f040 8087 	bne.w	800129e <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001190:	0713      	lsls	r3, r2, #28
 8001192:	d506      	bpl.n	80011a2 <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001194:	6863      	ldr	r3, [r4, #4]
 8001196:	692a      	ldr	r2, [r5, #16]
 8001198:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800119c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80011a0:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80011a2:	f7ff ff9d 	bl	80010e0 <HAL_RCC_GetSysClockFreq>
 80011a6:	6863      	ldr	r3, [r4, #4]
 80011a8:	4a42      	ldr	r2, [pc, #264]	; (80012b4 <HAL_RCC_ClockConfig+0x15c>)
 80011aa:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80011ae:	5cd3      	ldrb	r3, [r2, r3]
 80011b0:	40d8      	lsrs	r0, r3
 80011b2:	4b41      	ldr	r3, [pc, #260]	; (80012b8 <HAL_RCC_ClockConfig+0x160>)
 80011b4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80011b6:	2000      	movs	r0, #0
 80011b8:	f7fe ffd0 	bl	800015c <HAL_InitTick>
  return HAL_OK;
 80011bc:	2000      	movs	r0, #0
}
 80011be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011c2:	6813      	ldr	r3, [r2, #0]
 80011c4:	f023 0307 	bic.w	r3, r3, #7
 80011c8:	430b      	orrs	r3, r1
 80011ca:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80011cc:	6813      	ldr	r3, [r2, #0]
 80011ce:	f003 0307 	and.w	r3, r3, #7
 80011d2:	4299      	cmp	r1, r3
 80011d4:	d0ca      	beq.n	800116c <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 80011d6:	2001      	movs	r0, #1
 80011d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80011dc:	4b34      	ldr	r3, [pc, #208]	; (80012b0 <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011de:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011e2:	bf1e      	ittt	ne
 80011e4:	685a      	ldrne	r2, [r3, #4]
 80011e6:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 80011ea:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011ec:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011ee:	bf42      	ittt	mi
 80011f0:	685a      	ldrmi	r2, [r3, #4]
 80011f2:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 80011f6:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011f8:	685a      	ldr	r2, [r3, #4]
 80011fa:	68a8      	ldr	r0, [r5, #8]
 80011fc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001200:	4302      	orrs	r2, r0
 8001202:	605a      	str	r2, [r3, #4]
 8001204:	e7b5      	b.n	8001172 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001206:	686a      	ldr	r2, [r5, #4]
 8001208:	4c29      	ldr	r4, [pc, #164]	; (80012b0 <HAL_RCC_ClockConfig+0x158>)
 800120a:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800120c:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800120e:	d11c      	bne.n	800124a <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001210:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001214:	d0df      	beq.n	80011d6 <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001216:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001218:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800121c:	f023 0303 	bic.w	r3, r3, #3
 8001220:	4313      	orrs	r3, r2
 8001222:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8001224:	f7fe ffdc 	bl	80001e0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001228:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 800122a:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800122c:	2b01      	cmp	r3, #1
 800122e:	d114      	bne.n	800125a <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001230:	6863      	ldr	r3, [r4, #4]
 8001232:	f003 030c 	and.w	r3, r3, #12
 8001236:	2b04      	cmp	r3, #4
 8001238:	d09d      	beq.n	8001176 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800123a:	f7fe ffd1 	bl	80001e0 <HAL_GetTick>
 800123e:	1bc0      	subs	r0, r0, r7
 8001240:	4540      	cmp	r0, r8
 8001242:	d9f5      	bls.n	8001230 <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 8001244:	2003      	movs	r0, #3
 8001246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800124a:	2a02      	cmp	r2, #2
 800124c:	d102      	bne.n	8001254 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800124e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001252:	e7df      	b.n	8001214 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001254:	f013 0f02 	tst.w	r3, #2
 8001258:	e7dc      	b.n	8001214 <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800125a:	2b02      	cmp	r3, #2
 800125c:	d10f      	bne.n	800127e <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800125e:	6863      	ldr	r3, [r4, #4]
 8001260:	f003 030c 	and.w	r3, r3, #12
 8001264:	2b08      	cmp	r3, #8
 8001266:	d086      	beq.n	8001176 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001268:	f7fe ffba 	bl	80001e0 <HAL_GetTick>
 800126c:	1bc0      	subs	r0, r0, r7
 800126e:	4540      	cmp	r0, r8
 8001270:	d9f5      	bls.n	800125e <HAL_RCC_ClockConfig+0x106>
 8001272:	e7e7      	b.n	8001244 <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001274:	f7fe ffb4 	bl	80001e0 <HAL_GetTick>
 8001278:	1bc0      	subs	r0, r0, r7
 800127a:	4540      	cmp	r0, r8
 800127c:	d8e2      	bhi.n	8001244 <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800127e:	6863      	ldr	r3, [r4, #4]
 8001280:	f013 0f0c 	tst.w	r3, #12
 8001284:	d1f6      	bne.n	8001274 <HAL_RCC_ClockConfig+0x11c>
 8001286:	e776      	b.n	8001176 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001288:	6813      	ldr	r3, [r2, #0]
 800128a:	f023 0307 	bic.w	r3, r3, #7
 800128e:	4333      	orrs	r3, r6
 8001290:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001292:	6813      	ldr	r3, [r2, #0]
 8001294:	f003 0307 	and.w	r3, r3, #7
 8001298:	429e      	cmp	r6, r3
 800129a:	d19c      	bne.n	80011d6 <HAL_RCC_ClockConfig+0x7e>
 800129c:	e772      	b.n	8001184 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800129e:	6863      	ldr	r3, [r4, #4]
 80012a0:	68e9      	ldr	r1, [r5, #12]
 80012a2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80012a6:	430b      	orrs	r3, r1
 80012a8:	6063      	str	r3, [r4, #4]
 80012aa:	e771      	b.n	8001190 <HAL_RCC_ClockConfig+0x38>
 80012ac:	40022000 	.word	0x40022000
 80012b0:	40021000 	.word	0x40021000
 80012b4:	080025fc 	.word	0x080025fc
 80012b8:	20000008 	.word	0x20000008

080012bc <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80012bc:	4b04      	ldr	r3, [pc, #16]	; (80012d0 <HAL_RCC_GetPCLK1Freq+0x14>)
 80012be:	4a05      	ldr	r2, [pc, #20]	; (80012d4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80012c6:	5cd3      	ldrb	r3, [r2, r3]
 80012c8:	4a03      	ldr	r2, [pc, #12]	; (80012d8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80012ca:	6810      	ldr	r0, [r2, #0]
}    
 80012cc:	40d8      	lsrs	r0, r3
 80012ce:	4770      	bx	lr
 80012d0:	40021000 	.word	0x40021000
 80012d4:	0800260c 	.word	0x0800260c
 80012d8:	20000008 	.word	0x20000008

080012dc <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80012dc:	4b04      	ldr	r3, [pc, #16]	; (80012f0 <HAL_RCC_GetPCLK2Freq+0x14>)
 80012de:	4a05      	ldr	r2, [pc, #20]	; (80012f4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80012e6:	5cd3      	ldrb	r3, [r2, r3]
 80012e8:	4a03      	ldr	r2, [pc, #12]	; (80012f8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80012ea:	6810      	ldr	r0, [r2, #0]
} 
 80012ec:	40d8      	lsrs	r0, r3
 80012ee:	4770      	bx	lr
 80012f0:	40021000 	.word	0x40021000
 80012f4:	0800260c 	.word	0x0800260c
 80012f8:	20000008 	.word	0x20000008

080012fc <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80012fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001300:	6805      	ldr	r5, [r0, #0]
 8001302:	68c2      	ldr	r2, [r0, #12]
 8001304:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001306:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001308:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800130c:	4313      	orrs	r3, r2
 800130e:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001310:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 8001312:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001314:	430b      	orrs	r3, r1
 8001316:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8001318:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 800131c:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001320:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8001322:	4313      	orrs	r3, r2
 8001324:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001326:	696b      	ldr	r3, [r5, #20]
 8001328:	6982      	ldr	r2, [r0, #24]
 800132a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800132e:	4313      	orrs	r3, r2
 8001330:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8001332:	4b40      	ldr	r3, [pc, #256]	; (8001434 <UART_SetConfig+0x138>)
{
 8001334:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 8001336:	429d      	cmp	r5, r3
 8001338:	f04f 0419 	mov.w	r4, #25
 800133c:	d146      	bne.n	80013cc <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800133e:	f7ff ffcd 	bl	80012dc <HAL_RCC_GetPCLK2Freq>
 8001342:	fb04 f300 	mul.w	r3, r4, r0
 8001346:	f8d9 6004 	ldr.w	r6, [r9, #4]
 800134a:	f04f 0864 	mov.w	r8, #100	; 0x64
 800134e:	00b6      	lsls	r6, r6, #2
 8001350:	fbb3 f3f6 	udiv	r3, r3, r6
 8001354:	fbb3 f3f8 	udiv	r3, r3, r8
 8001358:	011e      	lsls	r6, r3, #4
 800135a:	f7ff ffbf 	bl	80012dc <HAL_RCC_GetPCLK2Freq>
 800135e:	4360      	muls	r0, r4
 8001360:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	fbb0 f7f3 	udiv	r7, r0, r3
 800136a:	f7ff ffb7 	bl	80012dc <HAL_RCC_GetPCLK2Freq>
 800136e:	4360      	muls	r0, r4
 8001370:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	fbb0 f3f3 	udiv	r3, r0, r3
 800137a:	fbb3 f3f8 	udiv	r3, r3, r8
 800137e:	fb08 7313 	mls	r3, r8, r3, r7
 8001382:	011b      	lsls	r3, r3, #4
 8001384:	3332      	adds	r3, #50	; 0x32
 8001386:	fbb3 f3f8 	udiv	r3, r3, r8
 800138a:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 800138e:	f7ff ffa5 	bl	80012dc <HAL_RCC_GetPCLK2Freq>
 8001392:	4360      	muls	r0, r4
 8001394:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8001398:	0092      	lsls	r2, r2, #2
 800139a:	fbb0 faf2 	udiv	sl, r0, r2
 800139e:	f7ff ff9d 	bl	80012dc <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80013a2:	4360      	muls	r0, r4
 80013a4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80013ae:	fbb3 f3f8 	udiv	r3, r3, r8
 80013b2:	fb08 a313 	mls	r3, r8, r3, sl
 80013b6:	011b      	lsls	r3, r3, #4
 80013b8:	3332      	adds	r3, #50	; 0x32
 80013ba:	fbb3 f3f8 	udiv	r3, r3, r8
 80013be:	f003 030f 	and.w	r3, r3, #15
 80013c2:	433b      	orrs	r3, r7
 80013c4:	4433      	add	r3, r6
 80013c6:	60ab      	str	r3, [r5, #8]
 80013c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013cc:	f7ff ff76 	bl	80012bc <HAL_RCC_GetPCLK1Freq>
 80013d0:	fb04 f300 	mul.w	r3, r4, r0
 80013d4:	f8d9 6004 	ldr.w	r6, [r9, #4]
 80013d8:	f04f 0864 	mov.w	r8, #100	; 0x64
 80013dc:	00b6      	lsls	r6, r6, #2
 80013de:	fbb3 f3f6 	udiv	r3, r3, r6
 80013e2:	fbb3 f3f8 	udiv	r3, r3, r8
 80013e6:	011e      	lsls	r6, r3, #4
 80013e8:	f7ff ff68 	bl	80012bc <HAL_RCC_GetPCLK1Freq>
 80013ec:	4360      	muls	r0, r4
 80013ee:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	fbb0 f7f3 	udiv	r7, r0, r3
 80013f8:	f7ff ff60 	bl	80012bc <HAL_RCC_GetPCLK1Freq>
 80013fc:	4360      	muls	r0, r4
 80013fe:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	fbb0 f3f3 	udiv	r3, r0, r3
 8001408:	fbb3 f3f8 	udiv	r3, r3, r8
 800140c:	fb08 7313 	mls	r3, r8, r3, r7
 8001410:	011b      	lsls	r3, r3, #4
 8001412:	3332      	adds	r3, #50	; 0x32
 8001414:	fbb3 f3f8 	udiv	r3, r3, r8
 8001418:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 800141c:	f7ff ff4e 	bl	80012bc <HAL_RCC_GetPCLK1Freq>
 8001420:	4360      	muls	r0, r4
 8001422:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8001426:	0092      	lsls	r2, r2, #2
 8001428:	fbb0 faf2 	udiv	sl, r0, r2
 800142c:	f7ff ff46 	bl	80012bc <HAL_RCC_GetPCLK1Freq>
 8001430:	e7b7      	b.n	80013a2 <UART_SetConfig+0xa6>
 8001432:	bf00      	nop
 8001434:	40013800 	.word	0x40013800

08001438 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8001438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800143a:	4604      	mov	r4, r0
 800143c:	460e      	mov	r6, r1
 800143e:	4617      	mov	r7, r2
 8001440:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8001442:	6821      	ldr	r1, [r4, #0]
 8001444:	680b      	ldr	r3, [r1, #0]
 8001446:	ea36 0303 	bics.w	r3, r6, r3
 800144a:	d101      	bne.n	8001450 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 800144c:	2000      	movs	r0, #0
}
 800144e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001450:	1c6b      	adds	r3, r5, #1
 8001452:	d0f7      	beq.n	8001444 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001454:	b995      	cbnz	r5, 800147c <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001456:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8001458:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800145a:	68da      	ldr	r2, [r3, #12]
 800145c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001460:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001462:	695a      	ldr	r2, [r3, #20]
 8001464:	f022 0201 	bic.w	r2, r2, #1
 8001468:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 800146a:	2320      	movs	r3, #32
 800146c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001470:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8001474:	2300      	movs	r3, #0
 8001476:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 800147a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800147c:	f7fe feb0 	bl	80001e0 <HAL_GetTick>
 8001480:	1bc0      	subs	r0, r0, r7
 8001482:	4285      	cmp	r5, r0
 8001484:	d2dd      	bcs.n	8001442 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8001486:	e7e6      	b.n	8001456 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08001488 <HAL_UART_Init>:
{
 8001488:	b510      	push	{r4, lr}
  if(huart == NULL)
 800148a:	4604      	mov	r4, r0
 800148c:	b340      	cbz	r0, 80014e0 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 800148e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001492:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001496:	b91b      	cbnz	r3, 80014a0 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001498:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800149c:	f000 fafe 	bl	8001a9c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80014a0:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80014a2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80014a4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80014a8:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80014aa:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80014ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80014b0:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80014b2:	f7ff ff23 	bl	80012fc <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80014b6:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80014b8:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80014ba:	691a      	ldr	r2, [r3, #16]
 80014bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80014c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80014c2:	695a      	ldr	r2, [r3, #20]
 80014c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80014c8:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80014ca:	68da      	ldr	r2, [r3, #12]
 80014cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80014d0:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 80014d2:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80014d4:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80014d6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80014da:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80014de:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80014e0:	2001      	movs	r0, #1
}
 80014e2:	bd10      	pop	{r4, pc}

080014e4 <HAL_UART_Transmit>:
{
 80014e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014e8:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 80014ea:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 80014ee:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_READY)
 80014f0:	2b20      	cmp	r3, #32
{
 80014f2:	460d      	mov	r5, r1
 80014f4:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 80014f6:	d14e      	bne.n	8001596 <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0U))
 80014f8:	2900      	cmp	r1, #0
 80014fa:	d049      	beq.n	8001590 <HAL_UART_Transmit+0xac>
 80014fc:	2a00      	cmp	r2, #0
 80014fe:	d047      	beq.n	8001590 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8001500:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001504:	2b01      	cmp	r3, #1
 8001506:	d046      	beq.n	8001596 <HAL_UART_Transmit+0xb2>
 8001508:	2301      	movs	r3, #1
 800150a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800150e:	2300      	movs	r3, #0
 8001510:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001512:	2321      	movs	r3, #33	; 0x21
 8001514:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001518:	f7fe fe62 	bl	80001e0 <HAL_GetTick>
 800151c:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 800151e:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8001522:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8001526:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001528:	b29b      	uxth	r3, r3
 800152a:	b96b      	cbnz	r3, 8001548 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800152c:	463b      	mov	r3, r7
 800152e:	4632      	mov	r2, r6
 8001530:	2140      	movs	r1, #64	; 0x40
 8001532:	4620      	mov	r0, r4
 8001534:	f7ff ff80 	bl	8001438 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001538:	b9a8      	cbnz	r0, 8001566 <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 800153a:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 800153c:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8001540:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8001544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8001548:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800154a:	4632      	mov	r2, r6
      huart->TxXferCount--;
 800154c:	3b01      	subs	r3, #1
 800154e:	b29b      	uxth	r3, r3
 8001550:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001552:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001554:	2180      	movs	r1, #128	; 0x80
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001556:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800155a:	4620      	mov	r0, r4
 800155c:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800155e:	d10e      	bne.n	800157e <HAL_UART_Transmit+0x9a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001560:	f7ff ff6a 	bl	8001438 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001564:	b110      	cbz	r0, 800156c <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 8001566:	2003      	movs	r0, #3
 8001568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800156c:	882b      	ldrh	r3, [r5, #0]
 800156e:	6822      	ldr	r2, [r4, #0]
 8001570:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001574:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001576:	6923      	ldr	r3, [r4, #16]
 8001578:	b943      	cbnz	r3, 800158c <HAL_UART_Transmit+0xa8>
          pData +=2U;
 800157a:	3502      	adds	r5, #2
 800157c:	e7d3      	b.n	8001526 <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800157e:	f7ff ff5b 	bl	8001438 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001582:	2800      	cmp	r0, #0
 8001584:	d1ef      	bne.n	8001566 <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001586:	6823      	ldr	r3, [r4, #0]
 8001588:	782a      	ldrb	r2, [r5, #0]
 800158a:	605a      	str	r2, [r3, #4]
 800158c:	3501      	adds	r5, #1
 800158e:	e7ca      	b.n	8001526 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8001590:	2001      	movs	r0, #1
 8001592:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8001596:	2002      	movs	r0, #2
}
 8001598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800159c <Write_mem>:
 */

#include "epm_24c32.h"

void Write_mem(uint16_t addr, char *wstr, uint16_t len)
{
 800159c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015a0:	4605      	mov	r5, r0
 80015a2:	460f      	mov	r7, r1
 80015a4:	4614      	mov	r4, r2
	uint16_t cycle = len / SIZEBLOCK;
	uint32_t status = 0;

	for(uint16_t i = 0; i < cycle + 1; i++)
 80015a6:	f04f 0800 	mov.w	r8, #0
 80015aa:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
			len = len - SIZEBLOCK;
			addr = addr + SIZEBLOCK;
		}
		else
		{
			status = HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDRESS, addr, I2C_MEMADD_SIZE_16BIT, (uint8_t*)wstr, len, HAL_MAX_DELAY);
 80015ae:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8001640 <Write_mem+0xa4>
{
 80015b2:	b08d      	sub	sp, #52	; 0x34
	uint16_t cycle = len / SIZEBLOCK;
 80015b4:	ea4f 1b52 	mov.w	fp, r2, lsr #5
	for(uint16_t i = 0; i < cycle + 1; i++)
 80015b8:	fa1f f388 	uxth.w	r3, r8
 80015bc:	459b      	cmp	fp, r3
 80015be:	da02      	bge.n	80015c6 <Write_mem+0x2a>
				snprintf(str, 32, "HAL_I2C_IsDeviceReady");
				I2C_Error(str, status);
			}
		}
	}
}
 80015c0:	b00d      	add	sp, #52	; 0x34
 80015c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if(len > SIZEBLOCK)
 80015c6:	2c20      	cmp	r4, #32
			status = HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDRESS, addr, I2C_MEMADD_SIZE_16BIT, (uint8_t*)wstr, SIZEBLOCK, HAL_MAX_DELAY);
 80015c8:	f8cd a008 	str.w	sl, [sp, #8]
		if(len > SIZEBLOCK)
 80015cc:	d92b      	bls.n	8001626 <Write_mem+0x8a>
			status = HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDRESS, addr, I2C_MEMADD_SIZE_16BIT, (uint8_t*)wstr, SIZEBLOCK, HAL_MAX_DELAY);
 80015ce:	2320      	movs	r3, #32
 80015d0:	9700      	str	r7, [sp, #0]
 80015d2:	9301      	str	r3, [sp, #4]
 80015d4:	462a      	mov	r2, r5
 80015d6:	2310      	movs	r3, #16
 80015d8:	21ae      	movs	r1, #174	; 0xae
 80015da:	4648      	mov	r0, r9
 80015dc:	f7ff f98c 	bl	80008f8 <HAL_I2C_Mem_Write>
 80015e0:	4606      	mov	r6, r0
			len = len - SIZEBLOCK;
 80015e2:	3c20      	subs	r4, #32
			addr = addr + SIZEBLOCK;
 80015e4:	3520      	adds	r5, #32
			wstr = wstr + SIZEBLOCK;
 80015e6:	3720      	adds	r7, #32
			len = len - SIZEBLOCK;
 80015e8:	b2a4      	uxth	r4, r4
			addr = addr + SIZEBLOCK;
 80015ea:	b2ad      	uxth	r5, r5
		if(status != HAL_OK)
 80015ec:	b166      	cbz	r6, 8001608 <Write_mem+0x6c>
			char str[32] = {0,};
 80015ee:	2220      	movs	r2, #32
 80015f0:	2100      	movs	r1, #0
 80015f2:	a804      	add	r0, sp, #16
 80015f4:	f000 fb08 	bl	8001c08 <memset>
			snprintf(str, 32, "HAL_I2C_Mem_Write");
 80015f8:	4910      	ldr	r1, [pc, #64]	; (800163c <Write_mem+0xa0>)
 80015fa:	a804      	add	r0, sp, #16
 80015fc:	f000 fb40 	bl	8001c80 <strcpy>
			I2C_Error(str, status);
 8001600:	4631      	mov	r1, r6
 8001602:	a804      	add	r0, sp, #16
 8001604:	f000 f88a 	bl	800171c <I2C_Error>
{
 8001608:	2664      	movs	r6, #100	; 0x64
			status = HAL_I2C_IsDeviceReady(&hi2c1, EEPROM_ADDRESS, 1, 100);
 800160a:	2364      	movs	r3, #100	; 0x64
 800160c:	2201      	movs	r2, #1
 800160e:	21ae      	movs	r1, #174	; 0xae
 8001610:	4648      	mov	r0, r9
 8001612:	f7ff fb27 	bl	8000c64 <HAL_I2C_IsDeviceReady>
			if(status == HAL_OK) break;
 8001616:	b118      	cbz	r0, 8001620 <Write_mem+0x84>
 8001618:	3e01      	subs	r6, #1
		for(uint8_t i = 0; i < 100; i++) // ждём пока eeprom доделает свои делишки и ответит что готова.
 800161a:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 800161e:	d1f4      	bne.n	800160a <Write_mem+0x6e>
 8001620:	f108 0801 	add.w	r8, r8, #1
 8001624:	e7c8      	b.n	80015b8 <Write_mem+0x1c>
			status = HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDRESS, addr, I2C_MEMADD_SIZE_16BIT, (uint8_t*)wstr, len, HAL_MAX_DELAY);
 8001626:	9401      	str	r4, [sp, #4]
 8001628:	9700      	str	r7, [sp, #0]
 800162a:	2310      	movs	r3, #16
 800162c:	462a      	mov	r2, r5
 800162e:	21ae      	movs	r1, #174	; 0xae
 8001630:	4648      	mov	r0, r9
 8001632:	f7ff f961 	bl	80008f8 <HAL_I2C_Mem_Write>
 8001636:	4606      	mov	r6, r0
 8001638:	e7d8      	b.n	80015ec <Write_mem+0x50>
 800163a:	bf00      	nop
 800163c:	080024f5 	.word	0x080024f5
 8001640:	2000009c 	.word	0x2000009c

08001644 <Read_mem>:

void Read_mem(uint16_t addr, char *rstr, uint16_t len)
{
	uint32_t status = HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDRESS, addr, I2C_MEMADD_SIZE_16BIT, (uint8_t*)rstr, len, HAL_MAX_DELAY);
 8001644:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
{
 8001648:	b510      	push	{r4, lr}
 800164a:	b08c      	sub	sp, #48	; 0x30
	uint32_t status = HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDRESS, addr, I2C_MEMADD_SIZE_16BIT, (uint8_t*)rstr, len, HAL_MAX_DELAY);
 800164c:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
 8001650:	4602      	mov	r2, r0
 8001652:	2310      	movs	r3, #16
 8001654:	21ae      	movs	r1, #174	; 0xae
 8001656:	480a      	ldr	r0, [pc, #40]	; (8001680 <Read_mem+0x3c>)
 8001658:	f7ff f9e4 	bl	8000a24 <HAL_I2C_Mem_Read>

	if(status != HAL_OK)
 800165c:	4604      	mov	r4, r0
 800165e:	b160      	cbz	r0, 800167a <Read_mem+0x36>
	{
		char str[32] = {0,};
 8001660:	2220      	movs	r2, #32
 8001662:	2100      	movs	r1, #0
 8001664:	a804      	add	r0, sp, #16
 8001666:	f000 facf 	bl	8001c08 <memset>
		snprintf(str, 32, "HAL_I2C_Mem_Read");
 800166a:	4906      	ldr	r1, [pc, #24]	; (8001684 <Read_mem+0x40>)
 800166c:	a804      	add	r0, sp, #16
 800166e:	f000 fb07 	bl	8001c80 <strcpy>
		I2C_Error(str, status);
 8001672:	4621      	mov	r1, r4
 8001674:	a804      	add	r0, sp, #16
 8001676:	f000 f851 	bl	800171c <I2C_Error>
	}
}
 800167a:	b00c      	add	sp, #48	; 0x30
 800167c:	bd10      	pop	{r4, pc}
 800167e:	bf00      	nop
 8001680:	2000009c 	.word	0x2000009c
 8001684:	080024e4 	.word	0x080024e4

08001688 <I2C_Scan>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void I2C_Scan(I2C_HandleTypeDef *hi2c) // сканирует шину и показывает адреса устройств
{
 8001688:	b5f0      	push	{r4, r5, r6, r7, lr}
 800168a:	b097      	sub	sp, #92	; 0x5c
 800168c:	4605      	mov	r5, r0
    char info[] = "Scanning I2C bus...\n";
 800168e:	466a      	mov	r2, sp
 8001690:	466e      	mov	r6, sp
 8001692:	4b1f      	ldr	r3, [pc, #124]	; (8001710 <I2C_Scan+0x88>)
 8001694:	f103 0710 	add.w	r7, r3, #16
 8001698:	4614      	mov	r4, r2
 800169a:	6818      	ldr	r0, [r3, #0]
 800169c:	6859      	ldr	r1, [r3, #4]
 800169e:	3308      	adds	r3, #8
 80016a0:	c403      	stmia	r4!, {r0, r1}
 80016a2:	42bb      	cmp	r3, r7
 80016a4:	4622      	mov	r2, r4
 80016a6:	d1f7      	bne.n	8001698 <I2C_Scan+0x10>
 80016a8:	6818      	ldr	r0, [r3, #0]
 80016aa:	791b      	ldrb	r3, [r3, #4]
 80016ac:	6020      	str	r0, [r4, #0]
 80016ae:	7123      	strb	r3, [r4, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)info, strlen(info), 1000);
 80016b0:	4630      	mov	r0, r6
 80016b2:	f7fe fd4b 	bl	800014c <strlen>
 80016b6:	4631      	mov	r1, r6
 80016b8:	b282      	uxth	r2, r0
 80016ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016be:	4815      	ldr	r0, [pc, #84]	; (8001714 <I2C_Scan+0x8c>)
 80016c0:	f7ff ff10 	bl	80014e4 <HAL_UART_Transmit>
 80016c4:	2400      	movs	r4, #0
    for(uint16_t i = 0; i < 128; i++)
    {
        if(HAL_I2C_IsDeviceReady(hi2c, i << 1, 1, 100) == HAL_OK)
        {
        	char msg[64] = {0,};
            snprintf(msg, 64, "Device: 0x%02X\n", i);
 80016c6:	4e14      	ldr	r6, [pc, #80]	; (8001718 <I2C_Scan+0x90>)
            HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 1000);
 80016c8:	4f12      	ldr	r7, [pc, #72]	; (8001714 <I2C_Scan+0x8c>)
        if(HAL_I2C_IsDeviceReady(hi2c, i << 1, 1, 100) == HAL_OK)
 80016ca:	0061      	lsls	r1, r4, #1
 80016cc:	b289      	uxth	r1, r1
 80016ce:	2364      	movs	r3, #100	; 0x64
 80016d0:	2201      	movs	r2, #1
 80016d2:	4628      	mov	r0, r5
 80016d4:	f7ff fac6 	bl	8000c64 <HAL_I2C_IsDeviceReady>
 80016d8:	4601      	mov	r1, r0
 80016da:	b998      	cbnz	r0, 8001704 <I2C_Scan+0x7c>
        	char msg[64] = {0,};
 80016dc:	2240      	movs	r2, #64	; 0x40
 80016de:	a806      	add	r0, sp, #24
 80016e0:	f000 fa92 	bl	8001c08 <memset>
            snprintf(msg, 64, "Device: 0x%02X\n", i);
 80016e4:	4623      	mov	r3, r4
 80016e6:	4632      	mov	r2, r6
 80016e8:	2140      	movs	r1, #64	; 0x40
 80016ea:	a806      	add	r0, sp, #24
 80016ec:	f000 fa94 	bl	8001c18 <sniprintf>
            HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 1000);
 80016f0:	a806      	add	r0, sp, #24
 80016f2:	f7fe fd2b 	bl	800014c <strlen>
 80016f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016fa:	b282      	uxth	r2, r0
 80016fc:	a906      	add	r1, sp, #24
 80016fe:	4638      	mov	r0, r7
 8001700:	f7ff fef0 	bl	80014e4 <HAL_UART_Transmit>
 8001704:	3401      	adds	r4, #1
    for(uint16_t i = 0; i < 128; i++)
 8001706:	2c80      	cmp	r4, #128	; 0x80
 8001708:	d1df      	bne.n	80016ca <I2C_Scan+0x42>
        }
    }
}
 800170a:	b017      	add	sp, #92	; 0x5c
 800170c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800170e:	bf00      	nop
 8001710:	080025d3 	.word	0x080025d3
 8001714:	200000f0 	.word	0x200000f0
 8001718:	080025c3 	.word	0x080025c3

0800171c <I2C_Error>:

void I2C_Error(char *er, uint32_t status) // ошибки i2c
{
 800171c:	b530      	push	{r4, r5, lr}
 800171e:	460d      	mov	r5, r1
 8001720:	b091      	sub	sp, #68	; 0x44
 8001722:	4604      	mov	r4, r0
	char str[64] = {0,};
 8001724:	2240      	movs	r2, #64	; 0x40
 8001726:	2100      	movs	r1, #0
 8001728:	4668      	mov	r0, sp
 800172a:	f000 fa6d 	bl	8001c08 <memset>

	switch(status)
 800172e:	2d02      	cmp	r5, #2
 8001730:	d01f      	beq.n	8001772 <I2C_Error+0x56>
 8001732:	2d03      	cmp	r5, #3
 8001734:	d020      	beq.n	8001778 <I2C_Error+0x5c>
 8001736:	2d01      	cmp	r5, #1
 8001738:	d10f      	bne.n	800175a <I2C_Error+0x3e>
	{
		case HAL_ERROR:
			snprintf(str, 64, "%s - HAL_ERROR\n", er);
 800173a:	4623      	mov	r3, r4
 800173c:	4a48      	ldr	r2, [pc, #288]	; (8001860 <I2C_Error+0x144>)
			snprintf(str, 64, "%s - HAL_BUSY\n", er);
			HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
		break;

		case HAL_TIMEOUT:
			snprintf(str, 64, "%s - HAL_TIMEOUT\n", er);
 800173e:	2140      	movs	r1, #64	; 0x40
 8001740:	4668      	mov	r0, sp
 8001742:	f000 fa69 	bl	8001c18 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 8001746:	4668      	mov	r0, sp
 8001748:	f7fe fd00 	bl	800014c <strlen>
 800174c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001750:	b282      	uxth	r2, r0
 8001752:	4669      	mov	r1, sp
 8001754:	4843      	ldr	r0, [pc, #268]	; (8001864 <I2C_Error+0x148>)
 8001756:	f7ff fec5 	bl	80014e4 <HAL_UART_Transmit>

		default:
		break;
	}

	uint32_t err = HAL_I2C_GetError(&hi2c1);
 800175a:	4843      	ldr	r0, [pc, #268]	; (8001868 <I2C_Error+0x14c>)
 800175c:	f7ff fb32 	bl	8000dc4 <HAL_I2C_GetError>

	switch(err)
 8001760:	2804      	cmp	r0, #4
 8001762:	d040      	beq.n	80017e6 <I2C_Error+0xca>
 8001764:	d80b      	bhi.n	800177e <I2C_Error+0x62>
 8001766:	2801      	cmp	r0, #1
 8001768:	d01f      	beq.n	80017aa <I2C_Error+0x8e>
 800176a:	d30f      	bcc.n	800178c <I2C_Error+0x70>
 800176c:	2802      	cmp	r0, #2
 800176e:	d02b      	beq.n	80017c8 <I2C_Error+0xac>
 8001770:	e7fe      	b.n	8001770 <I2C_Error+0x54>
			snprintf(str, 64, "%s - HAL_BUSY\n", er);
 8001772:	4623      	mov	r3, r4
 8001774:	4a3d      	ldr	r2, [pc, #244]	; (800186c <I2C_Error+0x150>)
 8001776:	e7e2      	b.n	800173e <I2C_Error+0x22>
			snprintf(str, 64, "%s - HAL_TIMEOUT\n", er);
 8001778:	4623      	mov	r3, r4
 800177a:	4a3d      	ldr	r2, [pc, #244]	; (8001870 <I2C_Error+0x154>)
 800177c:	e7df      	b.n	800173e <I2C_Error+0x22>
	switch(err)
 800177e:	2810      	cmp	r0, #16
 8001780:	d04f      	beq.n	8001822 <I2C_Error+0x106>
 8001782:	2820      	cmp	r0, #32
 8001784:	d05c      	beq.n	8001840 <I2C_Error+0x124>
 8001786:	2808      	cmp	r0, #8
 8001788:	d03c      	beq.n	8001804 <I2C_Error+0xe8>
 800178a:	e7f1      	b.n	8001770 <I2C_Error+0x54>
	{
		case HAL_I2C_ERROR_NONE:
			snprintf(str, 64, "HAL_I2C_ERROR_NONE\n");
 800178c:	4939      	ldr	r1, [pc, #228]	; (8001874 <I2C_Error+0x158>)
 800178e:	4668      	mov	r0, sp
 8001790:	f000 fa76 	bl	8001c80 <strcpy>
			HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 8001794:	4668      	mov	r0, sp
 8001796:	f7fe fcd9 	bl	800014c <strlen>
 800179a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800179e:	b282      	uxth	r2, r0
 80017a0:	4669      	mov	r1, sp
 80017a2:	4830      	ldr	r0, [pc, #192]	; (8001864 <I2C_Error+0x148>)
 80017a4:	f7ff fe9e 	bl	80014e4 <HAL_UART_Transmit>
		break;
 80017a8:	e7e2      	b.n	8001770 <I2C_Error+0x54>

		case HAL_I2C_ERROR_BERR:
			snprintf(str, 64, "HAL_I2C_ERROR_BERR\n");
 80017aa:	4933      	ldr	r1, [pc, #204]	; (8001878 <I2C_Error+0x15c>)
 80017ac:	4668      	mov	r0, sp
 80017ae:	f000 fa67 	bl	8001c80 <strcpy>
			HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 80017b2:	4668      	mov	r0, sp
 80017b4:	f7fe fcca 	bl	800014c <strlen>
 80017b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017bc:	b282      	uxth	r2, r0
 80017be:	4669      	mov	r1, sp
 80017c0:	4828      	ldr	r0, [pc, #160]	; (8001864 <I2C_Error+0x148>)
 80017c2:	f7ff fe8f 	bl	80014e4 <HAL_UART_Transmit>
		break;
 80017c6:	e7d3      	b.n	8001770 <I2C_Error+0x54>

		case HAL_I2C_ERROR_ARLO:
			snprintf(str, 64, "HAL_I2C_ERROR_ARLO\n");
 80017c8:	492c      	ldr	r1, [pc, #176]	; (800187c <I2C_Error+0x160>)
 80017ca:	4668      	mov	r0, sp
 80017cc:	f000 fa58 	bl	8001c80 <strcpy>
			HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 80017d0:	4668      	mov	r0, sp
 80017d2:	f7fe fcbb 	bl	800014c <strlen>
 80017d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017da:	b282      	uxth	r2, r0
 80017dc:	4669      	mov	r1, sp
 80017de:	4821      	ldr	r0, [pc, #132]	; (8001864 <I2C_Error+0x148>)
 80017e0:	f7ff fe80 	bl	80014e4 <HAL_UART_Transmit>
		break;
 80017e4:	e7c4      	b.n	8001770 <I2C_Error+0x54>

		case HAL_I2C_ERROR_AF:
			snprintf(str, 64, "HAL_I2C_ERROR_AF\n");
 80017e6:	4926      	ldr	r1, [pc, #152]	; (8001880 <I2C_Error+0x164>)
 80017e8:	4668      	mov	r0, sp
 80017ea:	f000 fa49 	bl	8001c80 <strcpy>
			HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 80017ee:	4668      	mov	r0, sp
 80017f0:	f7fe fcac 	bl	800014c <strlen>
 80017f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017f8:	b282      	uxth	r2, r0
 80017fa:	4669      	mov	r1, sp
 80017fc:	4819      	ldr	r0, [pc, #100]	; (8001864 <I2C_Error+0x148>)
 80017fe:	f7ff fe71 	bl	80014e4 <HAL_UART_Transmit>
		break;
 8001802:	e7b5      	b.n	8001770 <I2C_Error+0x54>

		case HAL_I2C_ERROR_OVR:
			snprintf(str, 64, "HAL_I2C_ERROR_OVR\n");
 8001804:	491f      	ldr	r1, [pc, #124]	; (8001884 <I2C_Error+0x168>)
 8001806:	4668      	mov	r0, sp
 8001808:	f000 fa3a 	bl	8001c80 <strcpy>
			HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 800180c:	4668      	mov	r0, sp
 800180e:	f7fe fc9d 	bl	800014c <strlen>
 8001812:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001816:	b282      	uxth	r2, r0
 8001818:	4669      	mov	r1, sp
 800181a:	4812      	ldr	r0, [pc, #72]	; (8001864 <I2C_Error+0x148>)
 800181c:	f7ff fe62 	bl	80014e4 <HAL_UART_Transmit>
		break;
 8001820:	e7a6      	b.n	8001770 <I2C_Error+0x54>

		case HAL_I2C_ERROR_DMA:
			snprintf(str, 64, "HAL_I2C_ERROR_DMA\n");
 8001822:	4919      	ldr	r1, [pc, #100]	; (8001888 <I2C_Error+0x16c>)
 8001824:	4668      	mov	r0, sp
 8001826:	f000 fa2b 	bl	8001c80 <strcpy>
			HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 800182a:	4668      	mov	r0, sp
 800182c:	f7fe fc8e 	bl	800014c <strlen>
 8001830:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001834:	b282      	uxth	r2, r0
 8001836:	4669      	mov	r1, sp
 8001838:	480a      	ldr	r0, [pc, #40]	; (8001864 <I2C_Error+0x148>)
 800183a:	f7ff fe53 	bl	80014e4 <HAL_UART_Transmit>
		break;
 800183e:	e797      	b.n	8001770 <I2C_Error+0x54>

		case HAL_I2C_ERROR_TIMEOUT:
			snprintf(str, 64, "HAL_I2C_ERROR_TIMEOUT\n");
 8001840:	4912      	ldr	r1, [pc, #72]	; (800188c <I2C_Error+0x170>)
 8001842:	4668      	mov	r0, sp
 8001844:	f000 fa1c 	bl	8001c80 <strcpy>
			HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 8001848:	4668      	mov	r0, sp
 800184a:	f7fe fc7f 	bl	800014c <strlen>
 800184e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001852:	b282      	uxth	r2, r0
 8001854:	4669      	mov	r1, sp
 8001856:	4803      	ldr	r0, [pc, #12]	; (8001864 <I2C_Error+0x148>)
 8001858:	f7ff fe44 	bl	80014e4 <HAL_UART_Transmit>
		break;
 800185c:	e788      	b.n	8001770 <I2C_Error+0x54>
 800185e:	bf00      	nop
 8001860:	08002507 	.word	0x08002507
 8001864:	200000f0 	.word	0x200000f0
 8001868:	2000009c 	.word	0x2000009c
 800186c:	08002517 	.word	0x08002517
 8001870:	08002526 	.word	0x08002526
 8001874:	08002538 	.word	0x08002538
 8001878:	0800254c 	.word	0x0800254c
 800187c:	08002560 	.word	0x08002560
 8001880:	08002574 	.word	0x08002574
 8001884:	08002586 	.word	0x08002586
 8001888:	08002599 	.word	0x08002599
 800188c:	080025ac 	.word	0x080025ac

08001890 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001890:	b510      	push	{r4, lr}
 8001892:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001894:	2228      	movs	r2, #40	; 0x28
 8001896:	2100      	movs	r1, #0
 8001898:	a806      	add	r0, sp, #24
 800189a:	f000 f9b5 	bl	8001c08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800189e:	2100      	movs	r1, #0
 80018a0:	2214      	movs	r2, #20
 80018a2:	a801      	add	r0, sp, #4
 80018a4:	f000 f9b0 	bl	8001c08 <memset>

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018ac:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018ae:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018b0:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018b2:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80018b4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018b8:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018ba:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018bc:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80018be:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018c0:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018c2:	f7ff fa81 	bl	8000dc8 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018c6:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018cc:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018ce:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018d0:	4621      	mov	r1, r4
 80018d2:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018d4:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018d6:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018d8:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018da:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018dc:	f7ff fc3c 	bl	8001158 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 80018e0:	b010      	add	sp, #64	; 0x40
 80018e2:	bd10      	pop	{r4, pc}

080018e4 <main>:
{
 80018e4:	b500      	push	{lr}
  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 100000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018e6:	2500      	movs	r5, #0
{
 80018e8:	b0bb      	sub	sp, #236	; 0xec
  HAL_Init();
 80018ea:	f7fe fc5b 	bl	80001a4 <HAL_Init>
  SystemClock_Config();
 80018ee:	f7ff ffcf 	bl	8001890 <SystemClock_Config>
  */
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018f2:	4b38      	ldr	r3, [pc, #224]	; (80019d4 <main+0xf0>)
  hi2c1.Instance = I2C1;
 80018f4:	4c38      	ldr	r4, [pc, #224]	; (80019d8 <main+0xf4>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018f6:	699a      	ldr	r2, [r3, #24]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018f8:	4620      	mov	r0, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018fa:	f042 0220 	orr.w	r2, r2, #32
 80018fe:	619a      	str	r2, [r3, #24]
 8001900:	699a      	ldr	r2, [r3, #24]
 8001902:	f002 0220 	and.w	r2, r2, #32
 8001906:	9200      	str	r2, [sp, #0]
 8001908:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800190a:	699a      	ldr	r2, [r3, #24]
 800190c:	f042 0204 	orr.w	r2, r2, #4
 8001910:	619a      	str	r2, [r3, #24]
 8001912:	699a      	ldr	r2, [r3, #24]
 8001914:	f002 0204 	and.w	r2, r2, #4
 8001918:	9201      	str	r2, [sp, #4]
 800191a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800191c:	699a      	ldr	r2, [r3, #24]
 800191e:	f042 0208 	orr.w	r2, r2, #8
 8001922:	619a      	str	r2, [r3, #24]
 8001924:	699b      	ldr	r3, [r3, #24]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001926:	4a2d      	ldr	r2, [pc, #180]	; (80019dc <main+0xf8>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001928:	f003 0308 	and.w	r3, r3, #8
 800192c:	9302      	str	r3, [sp, #8]
 800192e:	9b02      	ldr	r3, [sp, #8]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001930:	4b2b      	ldr	r3, [pc, #172]	; (80019e0 <main+0xfc>)
  hi2c1.Init.OwnAddress1 = 0;
 8001932:	60e5      	str	r5, [r4, #12]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001934:	e884 002c 	stmia.w	r4, {r2, r3, r5}
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001938:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800193c:	6165      	str	r5, [r4, #20]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800193e:	6123      	str	r3, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001940:	61a5      	str	r5, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001942:	61e5      	str	r5, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001944:	6225      	str	r5, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001946:	f7fe ff57 	bl	80007f8 <HAL_I2C_Init>
  huart1.Init.BaudRate = 115200;
 800194a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart1.Instance = USART1;
 800194e:	4825      	ldr	r0, [pc, #148]	; (80019e4 <main+0x100>)
  huart1.Init.BaudRate = 115200;
 8001950:	4925      	ldr	r1, [pc, #148]	; (80019e8 <main+0x104>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001952:	6085      	str	r5, [r0, #8]
  huart1.Init.BaudRate = 115200;
 8001954:	e880 000a 	stmia.w	r0, {r1, r3}
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001958:	230c      	movs	r3, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 800195a:	60c5      	str	r5, [r0, #12]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800195c:	6143      	str	r3, [r0, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 800195e:	6105      	str	r5, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001960:	6185      	str	r5, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001962:	61c5      	str	r5, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001964:	f7ff fd90 	bl	8001488 <HAL_UART_Init>
  I2C_Scan(&hi2c1); // НОМЕР I2C
 8001968:	4620      	mov	r0, r4
 800196a:	f7ff fe8d 	bl	8001688 <I2C_Scan>
  char wstr[] ="istarik.ru - stD";
 800196e:	aa03      	add	r2, sp, #12
 8001970:	4615      	mov	r5, r2
 8001972:	4b1e      	ldr	r3, [pc, #120]	; (80019ec <main+0x108>)
 8001974:	f103 0610 	add.w	r6, r3, #16
 8001978:	4614      	mov	r4, r2
 800197a:	6818      	ldr	r0, [r3, #0]
 800197c:	6859      	ldr	r1, [r3, #4]
 800197e:	3308      	adds	r3, #8
 8001980:	c403      	stmia	r4!, {r0, r1}
 8001982:	42b3      	cmp	r3, r6
 8001984:	4622      	mov	r2, r4
 8001986:	d1f7      	bne.n	8001978 <main+0x94>
 8001988:	781b      	ldrb	r3, [r3, #0]
  Write_mem(0, wstr, strlen(wstr)); // запись начинается с нулевого адреса (24c32 = 4кБ)
 800198a:	4628      	mov	r0, r5
  char wstr[] ="istarik.ru - stD";
 800198c:	7023      	strb	r3, [r4, #0]
  Write_mem(0, wstr, strlen(wstr)); // запись начинается с нулевого адреса (24c32 = 4кБ)
 800198e:	f7fe fbdd 	bl	800014c <strlen>
 8001992:	4629      	mov	r1, r5
 8001994:	b282      	uxth	r2, r0
 8001996:	2000      	movs	r0, #0
 8001998:	f7ff fe00 	bl	800159c <Write_mem>
  char rstr[200] = {0,};
 800199c:	22c8      	movs	r2, #200	; 0xc8
 800199e:	2100      	movs	r1, #0
 80019a0:	a808      	add	r0, sp, #32
 80019a2:	f000 f931 	bl	8001c08 <memset>
  Read_mem(0, rstr, sizeof(rstr)); // читаем с нулевого адреса
 80019a6:	22c8      	movs	r2, #200	; 0xc8
 80019a8:	a908      	add	r1, sp, #32
 80019aa:	2000      	movs	r0, #0
 80019ac:	f7ff fe4a 	bl	8001644 <Read_mem>
  HAL_UART_Transmit(&huart1, (uint8_t*)rstr, strlen(rstr), 1000);
 80019b0:	a808      	add	r0, sp, #32
 80019b2:	f7fe fbcb 	bl	800014c <strlen>
 80019b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ba:	b282      	uxth	r2, r0
 80019bc:	a908      	add	r1, sp, #32
 80019be:	4809      	ldr	r0, [pc, #36]	; (80019e4 <main+0x100>)
 80019c0:	f7ff fd90 	bl	80014e4 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, 1000);
 80019c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019c8:	2202      	movs	r2, #2
 80019ca:	4909      	ldr	r1, [pc, #36]	; (80019f0 <main+0x10c>)
 80019cc:	4805      	ldr	r0, [pc, #20]	; (80019e4 <main+0x100>)
 80019ce:	f7ff fd89 	bl	80014e4 <HAL_UART_Transmit>
 80019d2:	e7fe      	b.n	80019d2 <main+0xee>
 80019d4:	40021000 	.word	0x40021000
 80019d8:	2000009c 	.word	0x2000009c
 80019dc:	40005400 	.word	0x40005400
 80019e0:	000186a0 	.word	0x000186a0
 80019e4:	200000f0 	.word	0x200000f0
 80019e8:	40013800 	.word	0x40013800
 80019ec:	080025eb 	.word	0x080025eb
 80019f0:	080025e8 	.word	0x080025e8

080019f4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019f4:	4b0e      	ldr	r3, [pc, #56]	; (8001a30 <HAL_MspInit+0x3c>)
{
 80019f6:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80019f8:	699a      	ldr	r2, [r3, #24]
 80019fa:	f042 0201 	orr.w	r2, r2, #1
 80019fe:	619a      	str	r2, [r3, #24]
 8001a00:	699a      	ldr	r2, [r3, #24]
 8001a02:	f002 0201 	and.w	r2, r2, #1
 8001a06:	9200      	str	r2, [sp, #0]
 8001a08:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a0a:	69da      	ldr	r2, [r3, #28]
 8001a0c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001a10:	61da      	str	r2, [r3, #28]
 8001a12:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001a14:	4a07      	ldr	r2, [pc, #28]	; (8001a34 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a1a:	9301      	str	r3, [sp, #4]
 8001a1c:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001a1e:	6853      	ldr	r3, [r2, #4]
 8001a20:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001a24:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a28:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a2a:	b002      	add	sp, #8
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	40021000 	.word	0x40021000
 8001a34:	40010000 	.word	0x40010000

08001a38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a38:	b510      	push	{r4, lr}
 8001a3a:	4604      	mov	r4, r0
 8001a3c:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a3e:	2210      	movs	r2, #16
 8001a40:	2100      	movs	r1, #0
 8001a42:	a802      	add	r0, sp, #8
 8001a44:	f000 f8e0 	bl	8001c08 <memset>
  if(hi2c->Instance==I2C1)
 8001a48:	6822      	ldr	r2, [r4, #0]
 8001a4a:	4b11      	ldr	r3, [pc, #68]	; (8001a90 <HAL_I2C_MspInit+0x58>)
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d11c      	bne.n	8001a8a <HAL_I2C_MspInit+0x52>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a50:	4c10      	ldr	r4, [pc, #64]	; (8001a94 <HAL_I2C_MspInit+0x5c>)
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a52:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a54:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a56:	4810      	ldr	r0, [pc, #64]	; (8001a98 <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a58:	f043 0308 	orr.w	r3, r3, #8
 8001a5c:	61a3      	str	r3, [r4, #24]
 8001a5e:	69a3      	ldr	r3, [r4, #24]
 8001a60:	f003 0308 	and.w	r3, r3, #8
 8001a64:	9300      	str	r3, [sp, #0]
 8001a66:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a68:	23c0      	movs	r3, #192	; 0xc0
 8001a6a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a6c:	2312      	movs	r3, #18
 8001a6e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a70:	2303      	movs	r3, #3
 8001a72:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a74:	f7fe fc16 	bl	80002a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a78:	69e3      	ldr	r3, [r4, #28]
 8001a7a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a7e:	61e3      	str	r3, [r4, #28]
 8001a80:	69e3      	ldr	r3, [r4, #28]
 8001a82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a86:	9301      	str	r3, [sp, #4]
 8001a88:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a8a:	b006      	add	sp, #24
 8001a8c:	bd10      	pop	{r4, pc}
 8001a8e:	bf00      	nop
 8001a90:	40005400 	.word	0x40005400
 8001a94:	40021000 	.word	0x40021000
 8001a98:	40010c00 	.word	0x40010c00

08001a9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a9c:	b510      	push	{r4, lr}
 8001a9e:	4604      	mov	r4, r0
 8001aa0:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa2:	2210      	movs	r2, #16
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	a802      	add	r0, sp, #8
 8001aa8:	f000 f8ae 	bl	8001c08 <memset>
  if(huart->Instance==USART1)
 8001aac:	6822      	ldr	r2, [r4, #0]
 8001aae:	4b17      	ldr	r3, [pc, #92]	; (8001b0c <HAL_UART_MspInit+0x70>)
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d128      	bne.n	8001b06 <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ab4:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001ab8:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aba:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8001abc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ac0:	619a      	str	r2, [r3, #24]
 8001ac2:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac4:	4812      	ldr	r0, [pc, #72]	; (8001b10 <HAL_UART_MspInit+0x74>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ac6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001aca:	9200      	str	r2, [sp, #0]
 8001acc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ace:	699a      	ldr	r2, [r3, #24]
 8001ad0:	f042 0204 	orr.w	r2, r2, #4
 8001ad4:	619a      	str	r2, [r3, #24]
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	f003 0304 	and.w	r3, r3, #4
 8001adc:	9301      	str	r3, [sp, #4]
 8001ade:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ae0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ae4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001aea:	2303      	movs	r3, #3
 8001aec:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aee:	f7fe fbd9 	bl	80002a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001af2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001af6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001af8:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001afa:	a902      	add	r1, sp, #8
 8001afc:	4804      	ldr	r0, [pc, #16]	; (8001b10 <HAL_UART_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001afe:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b00:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b02:	f7fe fbcf 	bl	80002a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001b06:	b006      	add	sp, #24
 8001b08:	bd10      	pop	{r4, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40013800 	.word	0x40013800
 8001b10:	40010800 	.word	0x40010800

08001b14 <NMI_Handler>:
 8001b14:	4770      	bx	lr

08001b16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b16:	e7fe      	b.n	8001b16 <HardFault_Handler>

08001b18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b18:	e7fe      	b.n	8001b18 <MemManage_Handler>

08001b1a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b1a:	e7fe      	b.n	8001b1a <BusFault_Handler>

08001b1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b1c:	e7fe      	b.n	8001b1c <UsageFault_Handler>

08001b1e <SVC_Handler>:
 8001b1e:	4770      	bx	lr

08001b20 <DebugMon_Handler>:
 8001b20:	4770      	bx	lr

08001b22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b22:	4770      	bx	lr

08001b24 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b24:	f7fe bb50 	b.w	80001c8 <HAL_IncTick>

08001b28 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001b28:	4b0f      	ldr	r3, [pc, #60]	; (8001b68 <SystemInit+0x40>)
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	f042 0201 	orr.w	r2, r2, #1
 8001b30:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001b32:	6859      	ldr	r1, [r3, #4]
 8001b34:	4a0d      	ldr	r2, [pc, #52]	; (8001b6c <SystemInit+0x44>)
 8001b36:	400a      	ands	r2, r1
 8001b38:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001b40:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001b44:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b4c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001b4e:	685a      	ldr	r2, [r3, #4]
 8001b50:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001b54:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001b56:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001b5a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001b5c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b60:	4b03      	ldr	r3, [pc, #12]	; (8001b70 <SystemInit+0x48>)
 8001b62:	609a      	str	r2, [r3, #8]
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	f8ff0000 	.word	0xf8ff0000
 8001b70:	e000ed00 	.word	0xe000ed00

08001b74 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001b74:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001b76:	e003      	b.n	8001b80 <LoopCopyDataInit>

08001b78 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001b78:	4b0b      	ldr	r3, [pc, #44]	; (8001ba8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001b7a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001b7c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001b7e:	3104      	adds	r1, #4

08001b80 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001b80:	480a      	ldr	r0, [pc, #40]	; (8001bac <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001b82:	4b0b      	ldr	r3, [pc, #44]	; (8001bb0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001b84:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001b86:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001b88:	d3f6      	bcc.n	8001b78 <CopyDataInit>
  ldr r2, =_sbss
 8001b8a:	4a0a      	ldr	r2, [pc, #40]	; (8001bb4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001b8c:	e002      	b.n	8001b94 <LoopFillZerobss>

08001b8e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001b8e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001b90:	f842 3b04 	str.w	r3, [r2], #4

08001b94 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001b94:	4b08      	ldr	r3, [pc, #32]	; (8001bb8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001b96:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001b98:	d3f9      	bcc.n	8001b8e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b9a:	f7ff ffc5 	bl	8001b28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b9e:	f000 f80f 	bl	8001bc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ba2:	f7ff fe9f 	bl	80018e4 <main>
  bx lr
 8001ba6:	4770      	bx	lr
  ldr r3, =_sidata
 8001ba8:	08002650 	.word	0x08002650
  ldr r0, =_sdata
 8001bac:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001bb0:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8001bb4:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8001bb8:	20000134 	.word	0x20000134

08001bbc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bbc:	e7fe      	b.n	8001bbc <ADC1_2_IRQHandler>
	...

08001bc0 <__libc_init_array>:
 8001bc0:	b570      	push	{r4, r5, r6, lr}
 8001bc2:	2500      	movs	r5, #0
 8001bc4:	4e0c      	ldr	r6, [pc, #48]	; (8001bf8 <__libc_init_array+0x38>)
 8001bc6:	4c0d      	ldr	r4, [pc, #52]	; (8001bfc <__libc_init_array+0x3c>)
 8001bc8:	1ba4      	subs	r4, r4, r6
 8001bca:	10a4      	asrs	r4, r4, #2
 8001bcc:	42a5      	cmp	r5, r4
 8001bce:	d109      	bne.n	8001be4 <__libc_init_array+0x24>
 8001bd0:	f000 fc74 	bl	80024bc <_init>
 8001bd4:	2500      	movs	r5, #0
 8001bd6:	4e0a      	ldr	r6, [pc, #40]	; (8001c00 <__libc_init_array+0x40>)
 8001bd8:	4c0a      	ldr	r4, [pc, #40]	; (8001c04 <__libc_init_array+0x44>)
 8001bda:	1ba4      	subs	r4, r4, r6
 8001bdc:	10a4      	asrs	r4, r4, #2
 8001bde:	42a5      	cmp	r5, r4
 8001be0:	d105      	bne.n	8001bee <__libc_init_array+0x2e>
 8001be2:	bd70      	pop	{r4, r5, r6, pc}
 8001be4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001be8:	4798      	blx	r3
 8001bea:	3501      	adds	r5, #1
 8001bec:	e7ee      	b.n	8001bcc <__libc_init_array+0xc>
 8001bee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001bf2:	4798      	blx	r3
 8001bf4:	3501      	adds	r5, #1
 8001bf6:	e7f2      	b.n	8001bde <__libc_init_array+0x1e>
 8001bf8:	08002648 	.word	0x08002648
 8001bfc:	08002648 	.word	0x08002648
 8001c00:	08002648 	.word	0x08002648
 8001c04:	0800264c 	.word	0x0800264c

08001c08 <memset>:
 8001c08:	4603      	mov	r3, r0
 8001c0a:	4402      	add	r2, r0
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d100      	bne.n	8001c12 <memset+0xa>
 8001c10:	4770      	bx	lr
 8001c12:	f803 1b01 	strb.w	r1, [r3], #1
 8001c16:	e7f9      	b.n	8001c0c <memset+0x4>

08001c18 <sniprintf>:
 8001c18:	b40c      	push	{r2, r3}
 8001c1a:	b530      	push	{r4, r5, lr}
 8001c1c:	4b17      	ldr	r3, [pc, #92]	; (8001c7c <sniprintf+0x64>)
 8001c1e:	1e0c      	subs	r4, r1, #0
 8001c20:	b09d      	sub	sp, #116	; 0x74
 8001c22:	681d      	ldr	r5, [r3, #0]
 8001c24:	da08      	bge.n	8001c38 <sniprintf+0x20>
 8001c26:	238b      	movs	r3, #139	; 0x8b
 8001c28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c2c:	602b      	str	r3, [r5, #0]
 8001c2e:	b01d      	add	sp, #116	; 0x74
 8001c30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001c34:	b002      	add	sp, #8
 8001c36:	4770      	bx	lr
 8001c38:	f44f 7302 	mov.w	r3, #520	; 0x208
 8001c3c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8001c40:	bf0c      	ite	eq
 8001c42:	4623      	moveq	r3, r4
 8001c44:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8001c48:	9304      	str	r3, [sp, #16]
 8001c4a:	9307      	str	r3, [sp, #28]
 8001c4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c50:	9002      	str	r0, [sp, #8]
 8001c52:	9006      	str	r0, [sp, #24]
 8001c54:	f8ad 3016 	strh.w	r3, [sp, #22]
 8001c58:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8001c5a:	ab21      	add	r3, sp, #132	; 0x84
 8001c5c:	a902      	add	r1, sp, #8
 8001c5e:	4628      	mov	r0, r5
 8001c60:	9301      	str	r3, [sp, #4]
 8001c62:	f000 f871 	bl	8001d48 <_svfiprintf_r>
 8001c66:	1c43      	adds	r3, r0, #1
 8001c68:	bfbc      	itt	lt
 8001c6a:	238b      	movlt	r3, #139	; 0x8b
 8001c6c:	602b      	strlt	r3, [r5, #0]
 8001c6e:	2c00      	cmp	r4, #0
 8001c70:	d0dd      	beq.n	8001c2e <sniprintf+0x16>
 8001c72:	2200      	movs	r2, #0
 8001c74:	9b02      	ldr	r3, [sp, #8]
 8001c76:	701a      	strb	r2, [r3, #0]
 8001c78:	e7d9      	b.n	8001c2e <sniprintf+0x16>
 8001c7a:	bf00      	nop
 8001c7c:	2000000c 	.word	0x2000000c

08001c80 <strcpy>:
 8001c80:	4603      	mov	r3, r0
 8001c82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001c86:	f803 2b01 	strb.w	r2, [r3], #1
 8001c8a:	2a00      	cmp	r2, #0
 8001c8c:	d1f9      	bne.n	8001c82 <strcpy+0x2>
 8001c8e:	4770      	bx	lr

08001c90 <__ssputs_r>:
 8001c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001c94:	688e      	ldr	r6, [r1, #8]
 8001c96:	4682      	mov	sl, r0
 8001c98:	429e      	cmp	r6, r3
 8001c9a:	460c      	mov	r4, r1
 8001c9c:	4691      	mov	r9, r2
 8001c9e:	4698      	mov	r8, r3
 8001ca0:	d835      	bhi.n	8001d0e <__ssputs_r+0x7e>
 8001ca2:	898a      	ldrh	r2, [r1, #12]
 8001ca4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001ca8:	d031      	beq.n	8001d0e <__ssputs_r+0x7e>
 8001caa:	2302      	movs	r3, #2
 8001cac:	6825      	ldr	r5, [r4, #0]
 8001cae:	6909      	ldr	r1, [r1, #16]
 8001cb0:	1a6f      	subs	r7, r5, r1
 8001cb2:	6965      	ldr	r5, [r4, #20]
 8001cb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001cb8:	fb95 f5f3 	sdiv	r5, r5, r3
 8001cbc:	f108 0301 	add.w	r3, r8, #1
 8001cc0:	443b      	add	r3, r7
 8001cc2:	429d      	cmp	r5, r3
 8001cc4:	bf38      	it	cc
 8001cc6:	461d      	movcc	r5, r3
 8001cc8:	0553      	lsls	r3, r2, #21
 8001cca:	d531      	bpl.n	8001d30 <__ssputs_r+0xa0>
 8001ccc:	4629      	mov	r1, r5
 8001cce:	f000 fb47 	bl	8002360 <_malloc_r>
 8001cd2:	4606      	mov	r6, r0
 8001cd4:	b950      	cbnz	r0, 8001cec <__ssputs_r+0x5c>
 8001cd6:	230c      	movs	r3, #12
 8001cd8:	f8ca 3000 	str.w	r3, [sl]
 8001cdc:	89a3      	ldrh	r3, [r4, #12]
 8001cde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ce2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ce6:	81a3      	strh	r3, [r4, #12]
 8001ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001cec:	463a      	mov	r2, r7
 8001cee:	6921      	ldr	r1, [r4, #16]
 8001cf0:	f000 fac4 	bl	800227c <memcpy>
 8001cf4:	89a3      	ldrh	r3, [r4, #12]
 8001cf6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001cfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cfe:	81a3      	strh	r3, [r4, #12]
 8001d00:	6126      	str	r6, [r4, #16]
 8001d02:	443e      	add	r6, r7
 8001d04:	6026      	str	r6, [r4, #0]
 8001d06:	4646      	mov	r6, r8
 8001d08:	6165      	str	r5, [r4, #20]
 8001d0a:	1bed      	subs	r5, r5, r7
 8001d0c:	60a5      	str	r5, [r4, #8]
 8001d0e:	4546      	cmp	r6, r8
 8001d10:	bf28      	it	cs
 8001d12:	4646      	movcs	r6, r8
 8001d14:	4649      	mov	r1, r9
 8001d16:	4632      	mov	r2, r6
 8001d18:	6820      	ldr	r0, [r4, #0]
 8001d1a:	f000 faba 	bl	8002292 <memmove>
 8001d1e:	68a3      	ldr	r3, [r4, #8]
 8001d20:	2000      	movs	r0, #0
 8001d22:	1b9b      	subs	r3, r3, r6
 8001d24:	60a3      	str	r3, [r4, #8]
 8001d26:	6823      	ldr	r3, [r4, #0]
 8001d28:	441e      	add	r6, r3
 8001d2a:	6026      	str	r6, [r4, #0]
 8001d2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d30:	462a      	mov	r2, r5
 8001d32:	f000 fb73 	bl	800241c <_realloc_r>
 8001d36:	4606      	mov	r6, r0
 8001d38:	2800      	cmp	r0, #0
 8001d3a:	d1e1      	bne.n	8001d00 <__ssputs_r+0x70>
 8001d3c:	6921      	ldr	r1, [r4, #16]
 8001d3e:	4650      	mov	r0, sl
 8001d40:	f000 fac2 	bl	80022c8 <_free_r>
 8001d44:	e7c7      	b.n	8001cd6 <__ssputs_r+0x46>
	...

08001d48 <_svfiprintf_r>:
 8001d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d4c:	b09d      	sub	sp, #116	; 0x74
 8001d4e:	9303      	str	r3, [sp, #12]
 8001d50:	898b      	ldrh	r3, [r1, #12]
 8001d52:	4680      	mov	r8, r0
 8001d54:	061c      	lsls	r4, r3, #24
 8001d56:	460d      	mov	r5, r1
 8001d58:	4616      	mov	r6, r2
 8001d5a:	d50f      	bpl.n	8001d7c <_svfiprintf_r+0x34>
 8001d5c:	690b      	ldr	r3, [r1, #16]
 8001d5e:	b96b      	cbnz	r3, 8001d7c <_svfiprintf_r+0x34>
 8001d60:	2140      	movs	r1, #64	; 0x40
 8001d62:	f000 fafd 	bl	8002360 <_malloc_r>
 8001d66:	6028      	str	r0, [r5, #0]
 8001d68:	6128      	str	r0, [r5, #16]
 8001d6a:	b928      	cbnz	r0, 8001d78 <_svfiprintf_r+0x30>
 8001d6c:	230c      	movs	r3, #12
 8001d6e:	f8c8 3000 	str.w	r3, [r8]
 8001d72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d76:	e0c4      	b.n	8001f02 <_svfiprintf_r+0x1ba>
 8001d78:	2340      	movs	r3, #64	; 0x40
 8001d7a:	616b      	str	r3, [r5, #20]
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	9309      	str	r3, [sp, #36]	; 0x24
 8001d80:	2320      	movs	r3, #32
 8001d82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001d86:	2330      	movs	r3, #48	; 0x30
 8001d88:	f04f 0b01 	mov.w	fp, #1
 8001d8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001d90:	4637      	mov	r7, r6
 8001d92:	463c      	mov	r4, r7
 8001d94:	f814 3b01 	ldrb.w	r3, [r4], #1
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d13c      	bne.n	8001e16 <_svfiprintf_r+0xce>
 8001d9c:	ebb7 0a06 	subs.w	sl, r7, r6
 8001da0:	d00b      	beq.n	8001dba <_svfiprintf_r+0x72>
 8001da2:	4653      	mov	r3, sl
 8001da4:	4632      	mov	r2, r6
 8001da6:	4629      	mov	r1, r5
 8001da8:	4640      	mov	r0, r8
 8001daa:	f7ff ff71 	bl	8001c90 <__ssputs_r>
 8001dae:	3001      	adds	r0, #1
 8001db0:	f000 80a2 	beq.w	8001ef8 <_svfiprintf_r+0x1b0>
 8001db4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001db6:	4453      	add	r3, sl
 8001db8:	9309      	str	r3, [sp, #36]	; 0x24
 8001dba:	783b      	ldrb	r3, [r7, #0]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	f000 809b 	beq.w	8001ef8 <_svfiprintf_r+0x1b0>
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001dc8:	9304      	str	r3, [sp, #16]
 8001dca:	9307      	str	r3, [sp, #28]
 8001dcc:	9205      	str	r2, [sp, #20]
 8001dce:	9306      	str	r3, [sp, #24]
 8001dd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001dd4:	931a      	str	r3, [sp, #104]	; 0x68
 8001dd6:	2205      	movs	r2, #5
 8001dd8:	7821      	ldrb	r1, [r4, #0]
 8001dda:	4850      	ldr	r0, [pc, #320]	; (8001f1c <_svfiprintf_r+0x1d4>)
 8001ddc:	f000 fa40 	bl	8002260 <memchr>
 8001de0:	1c67      	adds	r7, r4, #1
 8001de2:	9b04      	ldr	r3, [sp, #16]
 8001de4:	b9d8      	cbnz	r0, 8001e1e <_svfiprintf_r+0xd6>
 8001de6:	06d9      	lsls	r1, r3, #27
 8001de8:	bf44      	itt	mi
 8001dea:	2220      	movmi	r2, #32
 8001dec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001df0:	071a      	lsls	r2, r3, #28
 8001df2:	bf44      	itt	mi
 8001df4:	222b      	movmi	r2, #43	; 0x2b
 8001df6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001dfa:	7822      	ldrb	r2, [r4, #0]
 8001dfc:	2a2a      	cmp	r2, #42	; 0x2a
 8001dfe:	d016      	beq.n	8001e2e <_svfiprintf_r+0xe6>
 8001e00:	2100      	movs	r1, #0
 8001e02:	200a      	movs	r0, #10
 8001e04:	9a07      	ldr	r2, [sp, #28]
 8001e06:	4627      	mov	r7, r4
 8001e08:	783b      	ldrb	r3, [r7, #0]
 8001e0a:	3401      	adds	r4, #1
 8001e0c:	3b30      	subs	r3, #48	; 0x30
 8001e0e:	2b09      	cmp	r3, #9
 8001e10:	d950      	bls.n	8001eb4 <_svfiprintf_r+0x16c>
 8001e12:	b1c9      	cbz	r1, 8001e48 <_svfiprintf_r+0x100>
 8001e14:	e011      	b.n	8001e3a <_svfiprintf_r+0xf2>
 8001e16:	2b25      	cmp	r3, #37	; 0x25
 8001e18:	d0c0      	beq.n	8001d9c <_svfiprintf_r+0x54>
 8001e1a:	4627      	mov	r7, r4
 8001e1c:	e7b9      	b.n	8001d92 <_svfiprintf_r+0x4a>
 8001e1e:	4a3f      	ldr	r2, [pc, #252]	; (8001f1c <_svfiprintf_r+0x1d4>)
 8001e20:	463c      	mov	r4, r7
 8001e22:	1a80      	subs	r0, r0, r2
 8001e24:	fa0b f000 	lsl.w	r0, fp, r0
 8001e28:	4318      	orrs	r0, r3
 8001e2a:	9004      	str	r0, [sp, #16]
 8001e2c:	e7d3      	b.n	8001dd6 <_svfiprintf_r+0x8e>
 8001e2e:	9a03      	ldr	r2, [sp, #12]
 8001e30:	1d11      	adds	r1, r2, #4
 8001e32:	6812      	ldr	r2, [r2, #0]
 8001e34:	9103      	str	r1, [sp, #12]
 8001e36:	2a00      	cmp	r2, #0
 8001e38:	db01      	blt.n	8001e3e <_svfiprintf_r+0xf6>
 8001e3a:	9207      	str	r2, [sp, #28]
 8001e3c:	e004      	b.n	8001e48 <_svfiprintf_r+0x100>
 8001e3e:	4252      	negs	r2, r2
 8001e40:	f043 0302 	orr.w	r3, r3, #2
 8001e44:	9207      	str	r2, [sp, #28]
 8001e46:	9304      	str	r3, [sp, #16]
 8001e48:	783b      	ldrb	r3, [r7, #0]
 8001e4a:	2b2e      	cmp	r3, #46	; 0x2e
 8001e4c:	d10d      	bne.n	8001e6a <_svfiprintf_r+0x122>
 8001e4e:	787b      	ldrb	r3, [r7, #1]
 8001e50:	1c79      	adds	r1, r7, #1
 8001e52:	2b2a      	cmp	r3, #42	; 0x2a
 8001e54:	d132      	bne.n	8001ebc <_svfiprintf_r+0x174>
 8001e56:	9b03      	ldr	r3, [sp, #12]
 8001e58:	3702      	adds	r7, #2
 8001e5a:	1d1a      	adds	r2, r3, #4
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	9203      	str	r2, [sp, #12]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	bfb8      	it	lt
 8001e64:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8001e68:	9305      	str	r3, [sp, #20]
 8001e6a:	4c2d      	ldr	r4, [pc, #180]	; (8001f20 <_svfiprintf_r+0x1d8>)
 8001e6c:	2203      	movs	r2, #3
 8001e6e:	7839      	ldrb	r1, [r7, #0]
 8001e70:	4620      	mov	r0, r4
 8001e72:	f000 f9f5 	bl	8002260 <memchr>
 8001e76:	b138      	cbz	r0, 8001e88 <_svfiprintf_r+0x140>
 8001e78:	2340      	movs	r3, #64	; 0x40
 8001e7a:	1b00      	subs	r0, r0, r4
 8001e7c:	fa03 f000 	lsl.w	r0, r3, r0
 8001e80:	9b04      	ldr	r3, [sp, #16]
 8001e82:	3701      	adds	r7, #1
 8001e84:	4303      	orrs	r3, r0
 8001e86:	9304      	str	r3, [sp, #16]
 8001e88:	7839      	ldrb	r1, [r7, #0]
 8001e8a:	2206      	movs	r2, #6
 8001e8c:	4825      	ldr	r0, [pc, #148]	; (8001f24 <_svfiprintf_r+0x1dc>)
 8001e8e:	1c7e      	adds	r6, r7, #1
 8001e90:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001e94:	f000 f9e4 	bl	8002260 <memchr>
 8001e98:	2800      	cmp	r0, #0
 8001e9a:	d035      	beq.n	8001f08 <_svfiprintf_r+0x1c0>
 8001e9c:	4b22      	ldr	r3, [pc, #136]	; (8001f28 <_svfiprintf_r+0x1e0>)
 8001e9e:	b9fb      	cbnz	r3, 8001ee0 <_svfiprintf_r+0x198>
 8001ea0:	9b03      	ldr	r3, [sp, #12]
 8001ea2:	3307      	adds	r3, #7
 8001ea4:	f023 0307 	bic.w	r3, r3, #7
 8001ea8:	3308      	adds	r3, #8
 8001eaa:	9303      	str	r3, [sp, #12]
 8001eac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001eae:	444b      	add	r3, r9
 8001eb0:	9309      	str	r3, [sp, #36]	; 0x24
 8001eb2:	e76d      	b.n	8001d90 <_svfiprintf_r+0x48>
 8001eb4:	fb00 3202 	mla	r2, r0, r2, r3
 8001eb8:	2101      	movs	r1, #1
 8001eba:	e7a4      	b.n	8001e06 <_svfiprintf_r+0xbe>
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	240a      	movs	r4, #10
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	9305      	str	r3, [sp, #20]
 8001ec4:	460f      	mov	r7, r1
 8001ec6:	783a      	ldrb	r2, [r7, #0]
 8001ec8:	3101      	adds	r1, #1
 8001eca:	3a30      	subs	r2, #48	; 0x30
 8001ecc:	2a09      	cmp	r2, #9
 8001ece:	d903      	bls.n	8001ed8 <_svfiprintf_r+0x190>
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d0ca      	beq.n	8001e6a <_svfiprintf_r+0x122>
 8001ed4:	9005      	str	r0, [sp, #20]
 8001ed6:	e7c8      	b.n	8001e6a <_svfiprintf_r+0x122>
 8001ed8:	fb04 2000 	mla	r0, r4, r0, r2
 8001edc:	2301      	movs	r3, #1
 8001ede:	e7f1      	b.n	8001ec4 <_svfiprintf_r+0x17c>
 8001ee0:	ab03      	add	r3, sp, #12
 8001ee2:	9300      	str	r3, [sp, #0]
 8001ee4:	462a      	mov	r2, r5
 8001ee6:	4b11      	ldr	r3, [pc, #68]	; (8001f2c <_svfiprintf_r+0x1e4>)
 8001ee8:	a904      	add	r1, sp, #16
 8001eea:	4640      	mov	r0, r8
 8001eec:	f3af 8000 	nop.w
 8001ef0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8001ef4:	4681      	mov	r9, r0
 8001ef6:	d1d9      	bne.n	8001eac <_svfiprintf_r+0x164>
 8001ef8:	89ab      	ldrh	r3, [r5, #12]
 8001efa:	065b      	lsls	r3, r3, #25
 8001efc:	f53f af39 	bmi.w	8001d72 <_svfiprintf_r+0x2a>
 8001f00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001f02:	b01d      	add	sp, #116	; 0x74
 8001f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f08:	ab03      	add	r3, sp, #12
 8001f0a:	9300      	str	r3, [sp, #0]
 8001f0c:	462a      	mov	r2, r5
 8001f0e:	4b07      	ldr	r3, [pc, #28]	; (8001f2c <_svfiprintf_r+0x1e4>)
 8001f10:	a904      	add	r1, sp, #16
 8001f12:	4640      	mov	r0, r8
 8001f14:	f000 f884 	bl	8002020 <_printf_i>
 8001f18:	e7ea      	b.n	8001ef0 <_svfiprintf_r+0x1a8>
 8001f1a:	bf00      	nop
 8001f1c:	08002614 	.word	0x08002614
 8001f20:	0800261a 	.word	0x0800261a
 8001f24:	0800261e 	.word	0x0800261e
 8001f28:	00000000 	.word	0x00000000
 8001f2c:	08001c91 	.word	0x08001c91

08001f30 <_printf_common>:
 8001f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f34:	4691      	mov	r9, r2
 8001f36:	461f      	mov	r7, r3
 8001f38:	688a      	ldr	r2, [r1, #8]
 8001f3a:	690b      	ldr	r3, [r1, #16]
 8001f3c:	4606      	mov	r6, r0
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	bfb8      	it	lt
 8001f42:	4613      	movlt	r3, r2
 8001f44:	f8c9 3000 	str.w	r3, [r9]
 8001f48:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001f4c:	460c      	mov	r4, r1
 8001f4e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001f52:	b112      	cbz	r2, 8001f5a <_printf_common+0x2a>
 8001f54:	3301      	adds	r3, #1
 8001f56:	f8c9 3000 	str.w	r3, [r9]
 8001f5a:	6823      	ldr	r3, [r4, #0]
 8001f5c:	0699      	lsls	r1, r3, #26
 8001f5e:	bf42      	ittt	mi
 8001f60:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001f64:	3302      	addmi	r3, #2
 8001f66:	f8c9 3000 	strmi.w	r3, [r9]
 8001f6a:	6825      	ldr	r5, [r4, #0]
 8001f6c:	f015 0506 	ands.w	r5, r5, #6
 8001f70:	d107      	bne.n	8001f82 <_printf_common+0x52>
 8001f72:	f104 0a19 	add.w	sl, r4, #25
 8001f76:	68e3      	ldr	r3, [r4, #12]
 8001f78:	f8d9 2000 	ldr.w	r2, [r9]
 8001f7c:	1a9b      	subs	r3, r3, r2
 8001f7e:	429d      	cmp	r5, r3
 8001f80:	db2a      	blt.n	8001fd8 <_printf_common+0xa8>
 8001f82:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001f86:	6822      	ldr	r2, [r4, #0]
 8001f88:	3300      	adds	r3, #0
 8001f8a:	bf18      	it	ne
 8001f8c:	2301      	movne	r3, #1
 8001f8e:	0692      	lsls	r2, r2, #26
 8001f90:	d42f      	bmi.n	8001ff2 <_printf_common+0xc2>
 8001f92:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001f96:	4639      	mov	r1, r7
 8001f98:	4630      	mov	r0, r6
 8001f9a:	47c0      	blx	r8
 8001f9c:	3001      	adds	r0, #1
 8001f9e:	d022      	beq.n	8001fe6 <_printf_common+0xb6>
 8001fa0:	6823      	ldr	r3, [r4, #0]
 8001fa2:	68e5      	ldr	r5, [r4, #12]
 8001fa4:	f003 0306 	and.w	r3, r3, #6
 8001fa8:	2b04      	cmp	r3, #4
 8001faa:	bf18      	it	ne
 8001fac:	2500      	movne	r5, #0
 8001fae:	f8d9 2000 	ldr.w	r2, [r9]
 8001fb2:	f04f 0900 	mov.w	r9, #0
 8001fb6:	bf08      	it	eq
 8001fb8:	1aad      	subeq	r5, r5, r2
 8001fba:	68a3      	ldr	r3, [r4, #8]
 8001fbc:	6922      	ldr	r2, [r4, #16]
 8001fbe:	bf08      	it	eq
 8001fc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	bfc4      	itt	gt
 8001fc8:	1a9b      	subgt	r3, r3, r2
 8001fca:	18ed      	addgt	r5, r5, r3
 8001fcc:	341a      	adds	r4, #26
 8001fce:	454d      	cmp	r5, r9
 8001fd0:	d11b      	bne.n	800200a <_printf_common+0xda>
 8001fd2:	2000      	movs	r0, #0
 8001fd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001fd8:	2301      	movs	r3, #1
 8001fda:	4652      	mov	r2, sl
 8001fdc:	4639      	mov	r1, r7
 8001fde:	4630      	mov	r0, r6
 8001fe0:	47c0      	blx	r8
 8001fe2:	3001      	adds	r0, #1
 8001fe4:	d103      	bne.n	8001fee <_printf_common+0xbe>
 8001fe6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001fee:	3501      	adds	r5, #1
 8001ff0:	e7c1      	b.n	8001f76 <_printf_common+0x46>
 8001ff2:	2030      	movs	r0, #48	; 0x30
 8001ff4:	18e1      	adds	r1, r4, r3
 8001ff6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001ffa:	1c5a      	adds	r2, r3, #1
 8001ffc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002000:	4422      	add	r2, r4
 8002002:	3302      	adds	r3, #2
 8002004:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002008:	e7c3      	b.n	8001f92 <_printf_common+0x62>
 800200a:	2301      	movs	r3, #1
 800200c:	4622      	mov	r2, r4
 800200e:	4639      	mov	r1, r7
 8002010:	4630      	mov	r0, r6
 8002012:	47c0      	blx	r8
 8002014:	3001      	adds	r0, #1
 8002016:	d0e6      	beq.n	8001fe6 <_printf_common+0xb6>
 8002018:	f109 0901 	add.w	r9, r9, #1
 800201c:	e7d7      	b.n	8001fce <_printf_common+0x9e>
	...

08002020 <_printf_i>:
 8002020:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002024:	4617      	mov	r7, r2
 8002026:	7e0a      	ldrb	r2, [r1, #24]
 8002028:	b085      	sub	sp, #20
 800202a:	2a6e      	cmp	r2, #110	; 0x6e
 800202c:	4698      	mov	r8, r3
 800202e:	4606      	mov	r6, r0
 8002030:	460c      	mov	r4, r1
 8002032:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002034:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8002038:	f000 80bc 	beq.w	80021b4 <_printf_i+0x194>
 800203c:	d81a      	bhi.n	8002074 <_printf_i+0x54>
 800203e:	2a63      	cmp	r2, #99	; 0x63
 8002040:	d02e      	beq.n	80020a0 <_printf_i+0x80>
 8002042:	d80a      	bhi.n	800205a <_printf_i+0x3a>
 8002044:	2a00      	cmp	r2, #0
 8002046:	f000 80c8 	beq.w	80021da <_printf_i+0x1ba>
 800204a:	2a58      	cmp	r2, #88	; 0x58
 800204c:	f000 808a 	beq.w	8002164 <_printf_i+0x144>
 8002050:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002054:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8002058:	e02a      	b.n	80020b0 <_printf_i+0x90>
 800205a:	2a64      	cmp	r2, #100	; 0x64
 800205c:	d001      	beq.n	8002062 <_printf_i+0x42>
 800205e:	2a69      	cmp	r2, #105	; 0x69
 8002060:	d1f6      	bne.n	8002050 <_printf_i+0x30>
 8002062:	6821      	ldr	r1, [r4, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	f011 0f80 	tst.w	r1, #128	; 0x80
 800206a:	d023      	beq.n	80020b4 <_printf_i+0x94>
 800206c:	1d11      	adds	r1, r2, #4
 800206e:	6019      	str	r1, [r3, #0]
 8002070:	6813      	ldr	r3, [r2, #0]
 8002072:	e027      	b.n	80020c4 <_printf_i+0xa4>
 8002074:	2a73      	cmp	r2, #115	; 0x73
 8002076:	f000 80b4 	beq.w	80021e2 <_printf_i+0x1c2>
 800207a:	d808      	bhi.n	800208e <_printf_i+0x6e>
 800207c:	2a6f      	cmp	r2, #111	; 0x6f
 800207e:	d02a      	beq.n	80020d6 <_printf_i+0xb6>
 8002080:	2a70      	cmp	r2, #112	; 0x70
 8002082:	d1e5      	bne.n	8002050 <_printf_i+0x30>
 8002084:	680a      	ldr	r2, [r1, #0]
 8002086:	f042 0220 	orr.w	r2, r2, #32
 800208a:	600a      	str	r2, [r1, #0]
 800208c:	e003      	b.n	8002096 <_printf_i+0x76>
 800208e:	2a75      	cmp	r2, #117	; 0x75
 8002090:	d021      	beq.n	80020d6 <_printf_i+0xb6>
 8002092:	2a78      	cmp	r2, #120	; 0x78
 8002094:	d1dc      	bne.n	8002050 <_printf_i+0x30>
 8002096:	2278      	movs	r2, #120	; 0x78
 8002098:	496f      	ldr	r1, [pc, #444]	; (8002258 <_printf_i+0x238>)
 800209a:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800209e:	e064      	b.n	800216a <_printf_i+0x14a>
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80020a6:	1d11      	adds	r1, r2, #4
 80020a8:	6019      	str	r1, [r3, #0]
 80020aa:	6813      	ldr	r3, [r2, #0]
 80020ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80020b0:	2301      	movs	r3, #1
 80020b2:	e0a3      	b.n	80021fc <_printf_i+0x1dc>
 80020b4:	f011 0f40 	tst.w	r1, #64	; 0x40
 80020b8:	f102 0104 	add.w	r1, r2, #4
 80020bc:	6019      	str	r1, [r3, #0]
 80020be:	d0d7      	beq.n	8002070 <_printf_i+0x50>
 80020c0:	f9b2 3000 	ldrsh.w	r3, [r2]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	da03      	bge.n	80020d0 <_printf_i+0xb0>
 80020c8:	222d      	movs	r2, #45	; 0x2d
 80020ca:	425b      	negs	r3, r3
 80020cc:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80020d0:	4962      	ldr	r1, [pc, #392]	; (800225c <_printf_i+0x23c>)
 80020d2:	220a      	movs	r2, #10
 80020d4:	e017      	b.n	8002106 <_printf_i+0xe6>
 80020d6:	6820      	ldr	r0, [r4, #0]
 80020d8:	6819      	ldr	r1, [r3, #0]
 80020da:	f010 0f80 	tst.w	r0, #128	; 0x80
 80020de:	d003      	beq.n	80020e8 <_printf_i+0xc8>
 80020e0:	1d08      	adds	r0, r1, #4
 80020e2:	6018      	str	r0, [r3, #0]
 80020e4:	680b      	ldr	r3, [r1, #0]
 80020e6:	e006      	b.n	80020f6 <_printf_i+0xd6>
 80020e8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80020ec:	f101 0004 	add.w	r0, r1, #4
 80020f0:	6018      	str	r0, [r3, #0]
 80020f2:	d0f7      	beq.n	80020e4 <_printf_i+0xc4>
 80020f4:	880b      	ldrh	r3, [r1, #0]
 80020f6:	2a6f      	cmp	r2, #111	; 0x6f
 80020f8:	bf14      	ite	ne
 80020fa:	220a      	movne	r2, #10
 80020fc:	2208      	moveq	r2, #8
 80020fe:	4957      	ldr	r1, [pc, #348]	; (800225c <_printf_i+0x23c>)
 8002100:	2000      	movs	r0, #0
 8002102:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8002106:	6865      	ldr	r5, [r4, #4]
 8002108:	2d00      	cmp	r5, #0
 800210a:	60a5      	str	r5, [r4, #8]
 800210c:	f2c0 809c 	blt.w	8002248 <_printf_i+0x228>
 8002110:	6820      	ldr	r0, [r4, #0]
 8002112:	f020 0004 	bic.w	r0, r0, #4
 8002116:	6020      	str	r0, [r4, #0]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d13f      	bne.n	800219c <_printf_i+0x17c>
 800211c:	2d00      	cmp	r5, #0
 800211e:	f040 8095 	bne.w	800224c <_printf_i+0x22c>
 8002122:	4675      	mov	r5, lr
 8002124:	2a08      	cmp	r2, #8
 8002126:	d10b      	bne.n	8002140 <_printf_i+0x120>
 8002128:	6823      	ldr	r3, [r4, #0]
 800212a:	07da      	lsls	r2, r3, #31
 800212c:	d508      	bpl.n	8002140 <_printf_i+0x120>
 800212e:	6923      	ldr	r3, [r4, #16]
 8002130:	6862      	ldr	r2, [r4, #4]
 8002132:	429a      	cmp	r2, r3
 8002134:	bfde      	ittt	le
 8002136:	2330      	movle	r3, #48	; 0x30
 8002138:	f805 3c01 	strble.w	r3, [r5, #-1]
 800213c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002140:	ebae 0305 	sub.w	r3, lr, r5
 8002144:	6123      	str	r3, [r4, #16]
 8002146:	f8cd 8000 	str.w	r8, [sp]
 800214a:	463b      	mov	r3, r7
 800214c:	aa03      	add	r2, sp, #12
 800214e:	4621      	mov	r1, r4
 8002150:	4630      	mov	r0, r6
 8002152:	f7ff feed 	bl	8001f30 <_printf_common>
 8002156:	3001      	adds	r0, #1
 8002158:	d155      	bne.n	8002206 <_printf_i+0x1e6>
 800215a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800215e:	b005      	add	sp, #20
 8002160:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002164:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8002168:	493c      	ldr	r1, [pc, #240]	; (800225c <_printf_i+0x23c>)
 800216a:	6822      	ldr	r2, [r4, #0]
 800216c:	6818      	ldr	r0, [r3, #0]
 800216e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002172:	f100 0504 	add.w	r5, r0, #4
 8002176:	601d      	str	r5, [r3, #0]
 8002178:	d001      	beq.n	800217e <_printf_i+0x15e>
 800217a:	6803      	ldr	r3, [r0, #0]
 800217c:	e002      	b.n	8002184 <_printf_i+0x164>
 800217e:	0655      	lsls	r5, r2, #25
 8002180:	d5fb      	bpl.n	800217a <_printf_i+0x15a>
 8002182:	8803      	ldrh	r3, [r0, #0]
 8002184:	07d0      	lsls	r0, r2, #31
 8002186:	bf44      	itt	mi
 8002188:	f042 0220 	orrmi.w	r2, r2, #32
 800218c:	6022      	strmi	r2, [r4, #0]
 800218e:	b91b      	cbnz	r3, 8002198 <_printf_i+0x178>
 8002190:	6822      	ldr	r2, [r4, #0]
 8002192:	f022 0220 	bic.w	r2, r2, #32
 8002196:	6022      	str	r2, [r4, #0]
 8002198:	2210      	movs	r2, #16
 800219a:	e7b1      	b.n	8002100 <_printf_i+0xe0>
 800219c:	4675      	mov	r5, lr
 800219e:	fbb3 f0f2 	udiv	r0, r3, r2
 80021a2:	fb02 3310 	mls	r3, r2, r0, r3
 80021a6:	5ccb      	ldrb	r3, [r1, r3]
 80021a8:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80021ac:	4603      	mov	r3, r0
 80021ae:	2800      	cmp	r0, #0
 80021b0:	d1f5      	bne.n	800219e <_printf_i+0x17e>
 80021b2:	e7b7      	b.n	8002124 <_printf_i+0x104>
 80021b4:	6808      	ldr	r0, [r1, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	f010 0f80 	tst.w	r0, #128	; 0x80
 80021bc:	6949      	ldr	r1, [r1, #20]
 80021be:	d004      	beq.n	80021ca <_printf_i+0x1aa>
 80021c0:	1d10      	adds	r0, r2, #4
 80021c2:	6018      	str	r0, [r3, #0]
 80021c4:	6813      	ldr	r3, [r2, #0]
 80021c6:	6019      	str	r1, [r3, #0]
 80021c8:	e007      	b.n	80021da <_printf_i+0x1ba>
 80021ca:	f010 0f40 	tst.w	r0, #64	; 0x40
 80021ce:	f102 0004 	add.w	r0, r2, #4
 80021d2:	6018      	str	r0, [r3, #0]
 80021d4:	6813      	ldr	r3, [r2, #0]
 80021d6:	d0f6      	beq.n	80021c6 <_printf_i+0x1a6>
 80021d8:	8019      	strh	r1, [r3, #0]
 80021da:	2300      	movs	r3, #0
 80021dc:	4675      	mov	r5, lr
 80021de:	6123      	str	r3, [r4, #16]
 80021e0:	e7b1      	b.n	8002146 <_printf_i+0x126>
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	1d11      	adds	r1, r2, #4
 80021e6:	6019      	str	r1, [r3, #0]
 80021e8:	6815      	ldr	r5, [r2, #0]
 80021ea:	2100      	movs	r1, #0
 80021ec:	6862      	ldr	r2, [r4, #4]
 80021ee:	4628      	mov	r0, r5
 80021f0:	f000 f836 	bl	8002260 <memchr>
 80021f4:	b108      	cbz	r0, 80021fa <_printf_i+0x1da>
 80021f6:	1b40      	subs	r0, r0, r5
 80021f8:	6060      	str	r0, [r4, #4]
 80021fa:	6863      	ldr	r3, [r4, #4]
 80021fc:	6123      	str	r3, [r4, #16]
 80021fe:	2300      	movs	r3, #0
 8002200:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002204:	e79f      	b.n	8002146 <_printf_i+0x126>
 8002206:	6923      	ldr	r3, [r4, #16]
 8002208:	462a      	mov	r2, r5
 800220a:	4639      	mov	r1, r7
 800220c:	4630      	mov	r0, r6
 800220e:	47c0      	blx	r8
 8002210:	3001      	adds	r0, #1
 8002212:	d0a2      	beq.n	800215a <_printf_i+0x13a>
 8002214:	6823      	ldr	r3, [r4, #0]
 8002216:	079b      	lsls	r3, r3, #30
 8002218:	d507      	bpl.n	800222a <_printf_i+0x20a>
 800221a:	2500      	movs	r5, #0
 800221c:	f104 0919 	add.w	r9, r4, #25
 8002220:	68e3      	ldr	r3, [r4, #12]
 8002222:	9a03      	ldr	r2, [sp, #12]
 8002224:	1a9b      	subs	r3, r3, r2
 8002226:	429d      	cmp	r5, r3
 8002228:	db05      	blt.n	8002236 <_printf_i+0x216>
 800222a:	68e0      	ldr	r0, [r4, #12]
 800222c:	9b03      	ldr	r3, [sp, #12]
 800222e:	4298      	cmp	r0, r3
 8002230:	bfb8      	it	lt
 8002232:	4618      	movlt	r0, r3
 8002234:	e793      	b.n	800215e <_printf_i+0x13e>
 8002236:	2301      	movs	r3, #1
 8002238:	464a      	mov	r2, r9
 800223a:	4639      	mov	r1, r7
 800223c:	4630      	mov	r0, r6
 800223e:	47c0      	blx	r8
 8002240:	3001      	adds	r0, #1
 8002242:	d08a      	beq.n	800215a <_printf_i+0x13a>
 8002244:	3501      	adds	r5, #1
 8002246:	e7eb      	b.n	8002220 <_printf_i+0x200>
 8002248:	2b00      	cmp	r3, #0
 800224a:	d1a7      	bne.n	800219c <_printf_i+0x17c>
 800224c:	780b      	ldrb	r3, [r1, #0]
 800224e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002252:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002256:	e765      	b.n	8002124 <_printf_i+0x104>
 8002258:	08002636 	.word	0x08002636
 800225c:	08002625 	.word	0x08002625

08002260 <memchr>:
 8002260:	b510      	push	{r4, lr}
 8002262:	b2c9      	uxtb	r1, r1
 8002264:	4402      	add	r2, r0
 8002266:	4290      	cmp	r0, r2
 8002268:	4603      	mov	r3, r0
 800226a:	d101      	bne.n	8002270 <memchr+0x10>
 800226c:	2000      	movs	r0, #0
 800226e:	bd10      	pop	{r4, pc}
 8002270:	781c      	ldrb	r4, [r3, #0]
 8002272:	3001      	adds	r0, #1
 8002274:	428c      	cmp	r4, r1
 8002276:	d1f6      	bne.n	8002266 <memchr+0x6>
 8002278:	4618      	mov	r0, r3
 800227a:	bd10      	pop	{r4, pc}

0800227c <memcpy>:
 800227c:	b510      	push	{r4, lr}
 800227e:	1e43      	subs	r3, r0, #1
 8002280:	440a      	add	r2, r1
 8002282:	4291      	cmp	r1, r2
 8002284:	d100      	bne.n	8002288 <memcpy+0xc>
 8002286:	bd10      	pop	{r4, pc}
 8002288:	f811 4b01 	ldrb.w	r4, [r1], #1
 800228c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002290:	e7f7      	b.n	8002282 <memcpy+0x6>

08002292 <memmove>:
 8002292:	4288      	cmp	r0, r1
 8002294:	b510      	push	{r4, lr}
 8002296:	eb01 0302 	add.w	r3, r1, r2
 800229a:	d803      	bhi.n	80022a4 <memmove+0x12>
 800229c:	1e42      	subs	r2, r0, #1
 800229e:	4299      	cmp	r1, r3
 80022a0:	d10c      	bne.n	80022bc <memmove+0x2a>
 80022a2:	bd10      	pop	{r4, pc}
 80022a4:	4298      	cmp	r0, r3
 80022a6:	d2f9      	bcs.n	800229c <memmove+0xa>
 80022a8:	1881      	adds	r1, r0, r2
 80022aa:	1ad2      	subs	r2, r2, r3
 80022ac:	42d3      	cmn	r3, r2
 80022ae:	d100      	bne.n	80022b2 <memmove+0x20>
 80022b0:	bd10      	pop	{r4, pc}
 80022b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80022b6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80022ba:	e7f7      	b.n	80022ac <memmove+0x1a>
 80022bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80022c0:	f802 4f01 	strb.w	r4, [r2, #1]!
 80022c4:	e7eb      	b.n	800229e <memmove+0xc>
	...

080022c8 <_free_r>:
 80022c8:	b538      	push	{r3, r4, r5, lr}
 80022ca:	4605      	mov	r5, r0
 80022cc:	2900      	cmp	r1, #0
 80022ce:	d043      	beq.n	8002358 <_free_r+0x90>
 80022d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80022d4:	1f0c      	subs	r4, r1, #4
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	bfb8      	it	lt
 80022da:	18e4      	addlt	r4, r4, r3
 80022dc:	f000 f8d4 	bl	8002488 <__malloc_lock>
 80022e0:	4a1e      	ldr	r2, [pc, #120]	; (800235c <_free_r+0x94>)
 80022e2:	6813      	ldr	r3, [r2, #0]
 80022e4:	4610      	mov	r0, r2
 80022e6:	b933      	cbnz	r3, 80022f6 <_free_r+0x2e>
 80022e8:	6063      	str	r3, [r4, #4]
 80022ea:	6014      	str	r4, [r2, #0]
 80022ec:	4628      	mov	r0, r5
 80022ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80022f2:	f000 b8ca 	b.w	800248a <__malloc_unlock>
 80022f6:	42a3      	cmp	r3, r4
 80022f8:	d90b      	bls.n	8002312 <_free_r+0x4a>
 80022fa:	6821      	ldr	r1, [r4, #0]
 80022fc:	1862      	adds	r2, r4, r1
 80022fe:	4293      	cmp	r3, r2
 8002300:	bf01      	itttt	eq
 8002302:	681a      	ldreq	r2, [r3, #0]
 8002304:	685b      	ldreq	r3, [r3, #4]
 8002306:	1852      	addeq	r2, r2, r1
 8002308:	6022      	streq	r2, [r4, #0]
 800230a:	6063      	str	r3, [r4, #4]
 800230c:	6004      	str	r4, [r0, #0]
 800230e:	e7ed      	b.n	80022ec <_free_r+0x24>
 8002310:	4613      	mov	r3, r2
 8002312:	685a      	ldr	r2, [r3, #4]
 8002314:	b10a      	cbz	r2, 800231a <_free_r+0x52>
 8002316:	42a2      	cmp	r2, r4
 8002318:	d9fa      	bls.n	8002310 <_free_r+0x48>
 800231a:	6819      	ldr	r1, [r3, #0]
 800231c:	1858      	adds	r0, r3, r1
 800231e:	42a0      	cmp	r0, r4
 8002320:	d10b      	bne.n	800233a <_free_r+0x72>
 8002322:	6820      	ldr	r0, [r4, #0]
 8002324:	4401      	add	r1, r0
 8002326:	1858      	adds	r0, r3, r1
 8002328:	4282      	cmp	r2, r0
 800232a:	6019      	str	r1, [r3, #0]
 800232c:	d1de      	bne.n	80022ec <_free_r+0x24>
 800232e:	6810      	ldr	r0, [r2, #0]
 8002330:	6852      	ldr	r2, [r2, #4]
 8002332:	4401      	add	r1, r0
 8002334:	6019      	str	r1, [r3, #0]
 8002336:	605a      	str	r2, [r3, #4]
 8002338:	e7d8      	b.n	80022ec <_free_r+0x24>
 800233a:	d902      	bls.n	8002342 <_free_r+0x7a>
 800233c:	230c      	movs	r3, #12
 800233e:	602b      	str	r3, [r5, #0]
 8002340:	e7d4      	b.n	80022ec <_free_r+0x24>
 8002342:	6820      	ldr	r0, [r4, #0]
 8002344:	1821      	adds	r1, r4, r0
 8002346:	428a      	cmp	r2, r1
 8002348:	bf01      	itttt	eq
 800234a:	6811      	ldreq	r1, [r2, #0]
 800234c:	6852      	ldreq	r2, [r2, #4]
 800234e:	1809      	addeq	r1, r1, r0
 8002350:	6021      	streq	r1, [r4, #0]
 8002352:	6062      	str	r2, [r4, #4]
 8002354:	605c      	str	r4, [r3, #4]
 8002356:	e7c9      	b.n	80022ec <_free_r+0x24>
 8002358:	bd38      	pop	{r3, r4, r5, pc}
 800235a:	bf00      	nop
 800235c:	2000008c 	.word	0x2000008c

08002360 <_malloc_r>:
 8002360:	b570      	push	{r4, r5, r6, lr}
 8002362:	1ccd      	adds	r5, r1, #3
 8002364:	f025 0503 	bic.w	r5, r5, #3
 8002368:	3508      	adds	r5, #8
 800236a:	2d0c      	cmp	r5, #12
 800236c:	bf38      	it	cc
 800236e:	250c      	movcc	r5, #12
 8002370:	2d00      	cmp	r5, #0
 8002372:	4606      	mov	r6, r0
 8002374:	db01      	blt.n	800237a <_malloc_r+0x1a>
 8002376:	42a9      	cmp	r1, r5
 8002378:	d903      	bls.n	8002382 <_malloc_r+0x22>
 800237a:	230c      	movs	r3, #12
 800237c:	6033      	str	r3, [r6, #0]
 800237e:	2000      	movs	r0, #0
 8002380:	bd70      	pop	{r4, r5, r6, pc}
 8002382:	f000 f881 	bl	8002488 <__malloc_lock>
 8002386:	4a23      	ldr	r2, [pc, #140]	; (8002414 <_malloc_r+0xb4>)
 8002388:	6814      	ldr	r4, [r2, #0]
 800238a:	4621      	mov	r1, r4
 800238c:	b991      	cbnz	r1, 80023b4 <_malloc_r+0x54>
 800238e:	4c22      	ldr	r4, [pc, #136]	; (8002418 <_malloc_r+0xb8>)
 8002390:	6823      	ldr	r3, [r4, #0]
 8002392:	b91b      	cbnz	r3, 800239c <_malloc_r+0x3c>
 8002394:	4630      	mov	r0, r6
 8002396:	f000 f867 	bl	8002468 <_sbrk_r>
 800239a:	6020      	str	r0, [r4, #0]
 800239c:	4629      	mov	r1, r5
 800239e:	4630      	mov	r0, r6
 80023a0:	f000 f862 	bl	8002468 <_sbrk_r>
 80023a4:	1c43      	adds	r3, r0, #1
 80023a6:	d126      	bne.n	80023f6 <_malloc_r+0x96>
 80023a8:	230c      	movs	r3, #12
 80023aa:	4630      	mov	r0, r6
 80023ac:	6033      	str	r3, [r6, #0]
 80023ae:	f000 f86c 	bl	800248a <__malloc_unlock>
 80023b2:	e7e4      	b.n	800237e <_malloc_r+0x1e>
 80023b4:	680b      	ldr	r3, [r1, #0]
 80023b6:	1b5b      	subs	r3, r3, r5
 80023b8:	d41a      	bmi.n	80023f0 <_malloc_r+0x90>
 80023ba:	2b0b      	cmp	r3, #11
 80023bc:	d90f      	bls.n	80023de <_malloc_r+0x7e>
 80023be:	600b      	str	r3, [r1, #0]
 80023c0:	18cc      	adds	r4, r1, r3
 80023c2:	50cd      	str	r5, [r1, r3]
 80023c4:	4630      	mov	r0, r6
 80023c6:	f000 f860 	bl	800248a <__malloc_unlock>
 80023ca:	f104 000b 	add.w	r0, r4, #11
 80023ce:	1d23      	adds	r3, r4, #4
 80023d0:	f020 0007 	bic.w	r0, r0, #7
 80023d4:	1ac3      	subs	r3, r0, r3
 80023d6:	d01b      	beq.n	8002410 <_malloc_r+0xb0>
 80023d8:	425a      	negs	r2, r3
 80023da:	50e2      	str	r2, [r4, r3]
 80023dc:	bd70      	pop	{r4, r5, r6, pc}
 80023de:	428c      	cmp	r4, r1
 80023e0:	bf0b      	itete	eq
 80023e2:	6863      	ldreq	r3, [r4, #4]
 80023e4:	684b      	ldrne	r3, [r1, #4]
 80023e6:	6013      	streq	r3, [r2, #0]
 80023e8:	6063      	strne	r3, [r4, #4]
 80023ea:	bf18      	it	ne
 80023ec:	460c      	movne	r4, r1
 80023ee:	e7e9      	b.n	80023c4 <_malloc_r+0x64>
 80023f0:	460c      	mov	r4, r1
 80023f2:	6849      	ldr	r1, [r1, #4]
 80023f4:	e7ca      	b.n	800238c <_malloc_r+0x2c>
 80023f6:	1cc4      	adds	r4, r0, #3
 80023f8:	f024 0403 	bic.w	r4, r4, #3
 80023fc:	42a0      	cmp	r0, r4
 80023fe:	d005      	beq.n	800240c <_malloc_r+0xac>
 8002400:	1a21      	subs	r1, r4, r0
 8002402:	4630      	mov	r0, r6
 8002404:	f000 f830 	bl	8002468 <_sbrk_r>
 8002408:	3001      	adds	r0, #1
 800240a:	d0cd      	beq.n	80023a8 <_malloc_r+0x48>
 800240c:	6025      	str	r5, [r4, #0]
 800240e:	e7d9      	b.n	80023c4 <_malloc_r+0x64>
 8002410:	bd70      	pop	{r4, r5, r6, pc}
 8002412:	bf00      	nop
 8002414:	2000008c 	.word	0x2000008c
 8002418:	20000090 	.word	0x20000090

0800241c <_realloc_r>:
 800241c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800241e:	4607      	mov	r7, r0
 8002420:	4614      	mov	r4, r2
 8002422:	460e      	mov	r6, r1
 8002424:	b921      	cbnz	r1, 8002430 <_realloc_r+0x14>
 8002426:	4611      	mov	r1, r2
 8002428:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800242c:	f7ff bf98 	b.w	8002360 <_malloc_r>
 8002430:	b922      	cbnz	r2, 800243c <_realloc_r+0x20>
 8002432:	f7ff ff49 	bl	80022c8 <_free_r>
 8002436:	4625      	mov	r5, r4
 8002438:	4628      	mov	r0, r5
 800243a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800243c:	f000 f826 	bl	800248c <_malloc_usable_size_r>
 8002440:	4284      	cmp	r4, r0
 8002442:	d90f      	bls.n	8002464 <_realloc_r+0x48>
 8002444:	4621      	mov	r1, r4
 8002446:	4638      	mov	r0, r7
 8002448:	f7ff ff8a 	bl	8002360 <_malloc_r>
 800244c:	4605      	mov	r5, r0
 800244e:	2800      	cmp	r0, #0
 8002450:	d0f2      	beq.n	8002438 <_realloc_r+0x1c>
 8002452:	4631      	mov	r1, r6
 8002454:	4622      	mov	r2, r4
 8002456:	f7ff ff11 	bl	800227c <memcpy>
 800245a:	4631      	mov	r1, r6
 800245c:	4638      	mov	r0, r7
 800245e:	f7ff ff33 	bl	80022c8 <_free_r>
 8002462:	e7e9      	b.n	8002438 <_realloc_r+0x1c>
 8002464:	4635      	mov	r5, r6
 8002466:	e7e7      	b.n	8002438 <_realloc_r+0x1c>

08002468 <_sbrk_r>:
 8002468:	b538      	push	{r3, r4, r5, lr}
 800246a:	2300      	movs	r3, #0
 800246c:	4c05      	ldr	r4, [pc, #20]	; (8002484 <_sbrk_r+0x1c>)
 800246e:	4605      	mov	r5, r0
 8002470:	4608      	mov	r0, r1
 8002472:	6023      	str	r3, [r4, #0]
 8002474:	f000 f814 	bl	80024a0 <_sbrk>
 8002478:	1c43      	adds	r3, r0, #1
 800247a:	d102      	bne.n	8002482 <_sbrk_r+0x1a>
 800247c:	6823      	ldr	r3, [r4, #0]
 800247e:	b103      	cbz	r3, 8002482 <_sbrk_r+0x1a>
 8002480:	602b      	str	r3, [r5, #0]
 8002482:	bd38      	pop	{r3, r4, r5, pc}
 8002484:	20000130 	.word	0x20000130

08002488 <__malloc_lock>:
 8002488:	4770      	bx	lr

0800248a <__malloc_unlock>:
 800248a:	4770      	bx	lr

0800248c <_malloc_usable_size_r>:
 800248c:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8002490:	2800      	cmp	r0, #0
 8002492:	f1a0 0004 	sub.w	r0, r0, #4
 8002496:	bfbc      	itt	lt
 8002498:	580b      	ldrlt	r3, [r1, r0]
 800249a:	18c0      	addlt	r0, r0, r3
 800249c:	4770      	bx	lr
	...

080024a0 <_sbrk>:
 80024a0:	4b04      	ldr	r3, [pc, #16]	; (80024b4 <_sbrk+0x14>)
 80024a2:	4602      	mov	r2, r0
 80024a4:	6819      	ldr	r1, [r3, #0]
 80024a6:	b909      	cbnz	r1, 80024ac <_sbrk+0xc>
 80024a8:	4903      	ldr	r1, [pc, #12]	; (80024b8 <_sbrk+0x18>)
 80024aa:	6019      	str	r1, [r3, #0]
 80024ac:	6818      	ldr	r0, [r3, #0]
 80024ae:	4402      	add	r2, r0
 80024b0:	601a      	str	r2, [r3, #0]
 80024b2:	4770      	bx	lr
 80024b4:	20000094 	.word	0x20000094
 80024b8:	20000134 	.word	0x20000134

080024bc <_init>:
 80024bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024be:	bf00      	nop
 80024c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024c2:	bc08      	pop	{r3}
 80024c4:	469e      	mov	lr, r3
 80024c6:	4770      	bx	lr

080024c8 <_fini>:
 80024c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024ca:	bf00      	nop
 80024cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024ce:	bc08      	pop	{r3}
 80024d0:	469e      	mov	lr, r3
 80024d2:	4770      	bx	lr
