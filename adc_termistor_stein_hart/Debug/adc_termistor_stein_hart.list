
adc_termistor_stein_hart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004960  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ac  08004a70  08004a70  00014a70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004d1c  08004d1c  00014d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004d20  08004d20  00014d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001e0  20000000  08004d24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000a0  200001e0  08004f04  000201e0  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000280  08004f04  00020280  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000eaf6  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002404  00000000  00000000  0002ecff  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003991  00000000  00000000  00031103  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000006d8  00000000  00000000  00034a98  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000008a0  00000000  00000000  00035170  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00004305  00000000  00000000  00035a10  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000028bf  00000000  00000000  00039d15  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003c5d4  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001d18  00000000  00000000  0003c650  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08004a58 	.word	0x08004a58

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08004a58 	.word	0x08004a58

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f092 0f00 	teq	r2, #0
 800044a:	bf14      	ite	ne
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	4770      	bxeq	lr
 8000452:	b530      	push	{r4, r5, lr}
 8000454:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000460:	e720      	b.n	80002a4 <__adddf3+0x138>
 8000462:	bf00      	nop

08000464 <__aeabi_ul2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f04f 0500 	mov.w	r5, #0
 8000472:	e00a      	b.n	800048a <__aeabi_l2d+0x16>

08000474 <__aeabi_l2d>:
 8000474:	ea50 0201 	orrs.w	r2, r0, r1
 8000478:	bf08      	it	eq
 800047a:	4770      	bxeq	lr
 800047c:	b530      	push	{r4, r5, lr}
 800047e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000482:	d502      	bpl.n	800048a <__aeabi_l2d+0x16>
 8000484:	4240      	negs	r0, r0
 8000486:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000492:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000496:	f43f aedc 	beq.w	8000252 <__adddf3+0xe6>
 800049a:	f04f 0203 	mov.w	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b2:	f1c2 0320 	rsb	r3, r2, #32
 80004b6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ba:	fa20 f002 	lsr.w	r0, r0, r2
 80004be:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c2:	ea40 000e 	orr.w	r0, r0, lr
 80004c6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ca:	4414      	add	r4, r2
 80004cc:	e6c1      	b.n	8000252 <__adddf3+0xe6>
 80004ce:	bf00      	nop

080004d0 <__aeabi_dmul>:
 80004d0:	b570      	push	{r4, r5, r6, lr}
 80004d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004de:	bf1d      	ittte	ne
 80004e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004e4:	ea94 0f0c 	teqne	r4, ip
 80004e8:	ea95 0f0c 	teqne	r5, ip
 80004ec:	f000 f8de 	bleq	80006ac <__aeabi_dmul+0x1dc>
 80004f0:	442c      	add	r4, r5
 80004f2:	ea81 0603 	eor.w	r6, r1, r3
 80004f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000502:	bf18      	it	ne
 8000504:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000508:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800050c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000510:	d038      	beq.n	8000584 <__aeabi_dmul+0xb4>
 8000512:	fba0 ce02 	umull	ip, lr, r0, r2
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800051e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000522:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000526:	f04f 0600 	mov.w	r6, #0
 800052a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800052e:	f09c 0f00 	teq	ip, #0
 8000532:	bf18      	it	ne
 8000534:	f04e 0e01 	orrne.w	lr, lr, #1
 8000538:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800053c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000540:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000544:	d204      	bcs.n	8000550 <__aeabi_dmul+0x80>
 8000546:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800054a:	416d      	adcs	r5, r5
 800054c:	eb46 0606 	adc.w	r6, r6, r6
 8000550:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000554:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000558:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800055c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000560:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000564:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000568:	bf88      	it	hi
 800056a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800056e:	d81e      	bhi.n	80005ae <__aeabi_dmul+0xde>
 8000570:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000574:	bf08      	it	eq
 8000576:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800057a:	f150 0000 	adcs.w	r0, r0, #0
 800057e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000582:	bd70      	pop	{r4, r5, r6, pc}
 8000584:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000588:	ea46 0101 	orr.w	r1, r6, r1
 800058c:	ea40 0002 	orr.w	r0, r0, r2
 8000590:	ea81 0103 	eor.w	r1, r1, r3
 8000594:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000598:	bfc2      	ittt	gt
 800059a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800059e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005a2:	bd70      	popgt	{r4, r5, r6, pc}
 80005a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a8:	f04f 0e00 	mov.w	lr, #0
 80005ac:	3c01      	subs	r4, #1
 80005ae:	f300 80ab 	bgt.w	8000708 <__aeabi_dmul+0x238>
 80005b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005b6:	bfde      	ittt	le
 80005b8:	2000      	movle	r0, #0
 80005ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005be:	bd70      	pople	{r4, r5, r6, pc}
 80005c0:	f1c4 0400 	rsb	r4, r4, #0
 80005c4:	3c20      	subs	r4, #32
 80005c6:	da35      	bge.n	8000634 <__aeabi_dmul+0x164>
 80005c8:	340c      	adds	r4, #12
 80005ca:	dc1b      	bgt.n	8000604 <__aeabi_dmul+0x134>
 80005cc:	f104 0414 	add.w	r4, r4, #20
 80005d0:	f1c4 0520 	rsb	r5, r4, #32
 80005d4:	fa00 f305 	lsl.w	r3, r0, r5
 80005d8:	fa20 f004 	lsr.w	r0, r0, r4
 80005dc:	fa01 f205 	lsl.w	r2, r1, r5
 80005e0:	ea40 0002 	orr.w	r0, r0, r2
 80005e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f0:	fa21 f604 	lsr.w	r6, r1, r4
 80005f4:	eb42 0106 	adc.w	r1, r2, r6
 80005f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005fc:	bf08      	it	eq
 80005fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f1c4 040c 	rsb	r4, r4, #12
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f304 	lsl.w	r3, r0, r4
 8000610:	fa20 f005 	lsr.w	r0, r0, r5
 8000614:	fa01 f204 	lsl.w	r2, r1, r4
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000620:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000624:	f141 0100 	adc.w	r1, r1, #0
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 0520 	rsb	r5, r4, #32
 8000638:	fa00 f205 	lsl.w	r2, r0, r5
 800063c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000640:	fa20 f304 	lsr.w	r3, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea43 0302 	orr.w	r3, r3, r2
 800064c:	fa21 f004 	lsr.w	r0, r1, r4
 8000650:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000654:	fa21 f204 	lsr.w	r2, r1, r4
 8000658:	ea20 0002 	bic.w	r0, r0, r2
 800065c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f094 0f00 	teq	r4, #0
 8000670:	d10f      	bne.n	8000692 <__aeabi_dmul+0x1c2>
 8000672:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000676:	0040      	lsls	r0, r0, #1
 8000678:	eb41 0101 	adc.w	r1, r1, r1
 800067c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000680:	bf08      	it	eq
 8000682:	3c01      	subeq	r4, #1
 8000684:	d0f7      	beq.n	8000676 <__aeabi_dmul+0x1a6>
 8000686:	ea41 0106 	orr.w	r1, r1, r6
 800068a:	f095 0f00 	teq	r5, #0
 800068e:	bf18      	it	ne
 8000690:	4770      	bxne	lr
 8000692:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000696:	0052      	lsls	r2, r2, #1
 8000698:	eb43 0303 	adc.w	r3, r3, r3
 800069c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a0:	bf08      	it	eq
 80006a2:	3d01      	subeq	r5, #1
 80006a4:	d0f7      	beq.n	8000696 <__aeabi_dmul+0x1c6>
 80006a6:	ea43 0306 	orr.w	r3, r3, r6
 80006aa:	4770      	bx	lr
 80006ac:	ea94 0f0c 	teq	r4, ip
 80006b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006b4:	bf18      	it	ne
 80006b6:	ea95 0f0c 	teqne	r5, ip
 80006ba:	d00c      	beq.n	80006d6 <__aeabi_dmul+0x206>
 80006bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c0:	bf18      	it	ne
 80006c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006c6:	d1d1      	bne.n	800066c <__aeabi_dmul+0x19c>
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	f04f 0000 	mov.w	r0, #0
 80006d4:	bd70      	pop	{r4, r5, r6, pc}
 80006d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006da:	bf06      	itte	eq
 80006dc:	4610      	moveq	r0, r2
 80006de:	4619      	moveq	r1, r3
 80006e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e4:	d019      	beq.n	800071a <__aeabi_dmul+0x24a>
 80006e6:	ea94 0f0c 	teq	r4, ip
 80006ea:	d102      	bne.n	80006f2 <__aeabi_dmul+0x222>
 80006ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f0:	d113      	bne.n	800071a <__aeabi_dmul+0x24a>
 80006f2:	ea95 0f0c 	teq	r5, ip
 80006f6:	d105      	bne.n	8000704 <__aeabi_dmul+0x234>
 80006f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006fc:	bf1c      	itt	ne
 80006fe:	4610      	movne	r0, r2
 8000700:	4619      	movne	r1, r3
 8000702:	d10a      	bne.n	800071a <__aeabi_dmul+0x24a>
 8000704:	ea81 0103 	eor.w	r1, r1, r3
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000710:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000714:	f04f 0000 	mov.w	r0, #0
 8000718:	bd70      	pop	{r4, r5, r6, pc}
 800071a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800071e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000722:	bd70      	pop	{r4, r5, r6, pc}

08000724 <__aeabi_ddiv>:
 8000724:	b570      	push	{r4, r5, r6, lr}
 8000726:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800072a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800072e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000732:	bf1d      	ittte	ne
 8000734:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000738:	ea94 0f0c 	teqne	r4, ip
 800073c:	ea95 0f0c 	teqne	r5, ip
 8000740:	f000 f8a7 	bleq	8000892 <__aeabi_ddiv+0x16e>
 8000744:	eba4 0405 	sub.w	r4, r4, r5
 8000748:	ea81 0e03 	eor.w	lr, r1, r3
 800074c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000750:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000754:	f000 8088 	beq.w	8000868 <__aeabi_ddiv+0x144>
 8000758:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800075c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000760:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000764:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000768:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800076c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000770:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000774:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000778:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800077c:	429d      	cmp	r5, r3
 800077e:	bf08      	it	eq
 8000780:	4296      	cmpeq	r6, r2
 8000782:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000786:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800078a:	d202      	bcs.n	8000792 <__aeabi_ddiv+0x6e>
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	1ab6      	subs	r6, r6, r2
 8000794:	eb65 0503 	sbc.w	r5, r5, r3
 8000798:	085b      	lsrs	r3, r3, #1
 800079a:	ea4f 0232 	mov.w	r2, r2, rrx
 800079e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ae:	bf22      	ittt	cs
 80007b0:	1ab6      	subcs	r6, r6, r2
 80007b2:	4675      	movcs	r5, lr
 80007b4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b8:	085b      	lsrs	r3, r3, #1
 80007ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000800:	ea55 0e06 	orrs.w	lr, r5, r6
 8000804:	d018      	beq.n	8000838 <__aeabi_ddiv+0x114>
 8000806:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800080a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800080e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000812:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000816:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800081a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800081e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000822:	d1c0      	bne.n	80007a6 <__aeabi_ddiv+0x82>
 8000824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000828:	d10b      	bne.n	8000842 <__aeabi_ddiv+0x11e>
 800082a:	ea41 0100 	orr.w	r1, r1, r0
 800082e:	f04f 0000 	mov.w	r0, #0
 8000832:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000836:	e7b6      	b.n	80007a6 <__aeabi_ddiv+0x82>
 8000838:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800083c:	bf04      	itt	eq
 800083e:	4301      	orreq	r1, r0
 8000840:	2000      	moveq	r0, #0
 8000842:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000846:	bf88      	it	hi
 8000848:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800084c:	f63f aeaf 	bhi.w	80005ae <__aeabi_dmul+0xde>
 8000850:	ebb5 0c03 	subs.w	ip, r5, r3
 8000854:	bf04      	itt	eq
 8000856:	ebb6 0c02 	subseq.w	ip, r6, r2
 800085a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800085e:	f150 0000 	adcs.w	r0, r0, #0
 8000862:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000866:	bd70      	pop	{r4, r5, r6, pc}
 8000868:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800086c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000870:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000874:	bfc2      	ittt	gt
 8000876:	ebd4 050c 	rsbsgt	r5, r4, ip
 800087a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800087e:	bd70      	popgt	{r4, r5, r6, pc}
 8000880:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000884:	f04f 0e00 	mov.w	lr, #0
 8000888:	3c01      	subs	r4, #1
 800088a:	e690      	b.n	80005ae <__aeabi_dmul+0xde>
 800088c:	ea45 0e06 	orr.w	lr, r5, r6
 8000890:	e68d      	b.n	80005ae <__aeabi_dmul+0xde>
 8000892:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000896:	ea94 0f0c 	teq	r4, ip
 800089a:	bf08      	it	eq
 800089c:	ea95 0f0c 	teqeq	r5, ip
 80008a0:	f43f af3b 	beq.w	800071a <__aeabi_dmul+0x24a>
 80008a4:	ea94 0f0c 	teq	r4, ip
 80008a8:	d10a      	bne.n	80008c0 <__aeabi_ddiv+0x19c>
 80008aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ae:	f47f af34 	bne.w	800071a <__aeabi_dmul+0x24a>
 80008b2:	ea95 0f0c 	teq	r5, ip
 80008b6:	f47f af25 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ba:	4610      	mov	r0, r2
 80008bc:	4619      	mov	r1, r3
 80008be:	e72c      	b.n	800071a <__aeabi_dmul+0x24a>
 80008c0:	ea95 0f0c 	teq	r5, ip
 80008c4:	d106      	bne.n	80008d4 <__aeabi_ddiv+0x1b0>
 80008c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ca:	f43f aefd 	beq.w	80006c8 <__aeabi_dmul+0x1f8>
 80008ce:	4610      	mov	r0, r2
 80008d0:	4619      	mov	r1, r3
 80008d2:	e722      	b.n	800071a <__aeabi_dmul+0x24a>
 80008d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d8:	bf18      	it	ne
 80008da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008de:	f47f aec5 	bne.w	800066c <__aeabi_dmul+0x19c>
 80008e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008e6:	f47f af0d 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008ee:	f47f aeeb 	bne.w	80006c8 <__aeabi_dmul+0x1f8>
 80008f2:	e712      	b.n	800071a <__aeabi_dmul+0x24a>

080008f4 <__gedf2>:
 80008f4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80008f8:	e006      	b.n	8000908 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__ledf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	e002      	b.n	8000908 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__cmpdf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	f84d cd04 	str.w	ip, [sp, #-4]!
 800090c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000910:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000914:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000918:	bf18      	it	ne
 800091a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800091e:	d01b      	beq.n	8000958 <__cmpdf2+0x54>
 8000920:	b001      	add	sp, #4
 8000922:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000926:	bf0c      	ite	eq
 8000928:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800092c:	ea91 0f03 	teqne	r1, r3
 8000930:	bf02      	ittt	eq
 8000932:	ea90 0f02 	teqeq	r0, r2
 8000936:	2000      	moveq	r0, #0
 8000938:	4770      	bxeq	lr
 800093a:	f110 0f00 	cmn.w	r0, #0
 800093e:	ea91 0f03 	teq	r1, r3
 8000942:	bf58      	it	pl
 8000944:	4299      	cmppl	r1, r3
 8000946:	bf08      	it	eq
 8000948:	4290      	cmpeq	r0, r2
 800094a:	bf2c      	ite	cs
 800094c:	17d8      	asrcs	r0, r3, #31
 800094e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000952:	f040 0001 	orr.w	r0, r0, #1
 8000956:	4770      	bx	lr
 8000958:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	d102      	bne.n	8000968 <__cmpdf2+0x64>
 8000962:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000966:	d107      	bne.n	8000978 <__cmpdf2+0x74>
 8000968:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800096c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000970:	d1d6      	bne.n	8000920 <__cmpdf2+0x1c>
 8000972:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000976:	d0d3      	beq.n	8000920 <__cmpdf2+0x1c>
 8000978:	f85d 0b04 	ldr.w	r0, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop

08000980 <__aeabi_cdrcmple>:
 8000980:	4684      	mov	ip, r0
 8000982:	4610      	mov	r0, r2
 8000984:	4662      	mov	r2, ip
 8000986:	468c      	mov	ip, r1
 8000988:	4619      	mov	r1, r3
 800098a:	4663      	mov	r3, ip
 800098c:	e000      	b.n	8000990 <__aeabi_cdcmpeq>
 800098e:	bf00      	nop

08000990 <__aeabi_cdcmpeq>:
 8000990:	b501      	push	{r0, lr}
 8000992:	f7ff ffb7 	bl	8000904 <__cmpdf2>
 8000996:	2800      	cmp	r0, #0
 8000998:	bf48      	it	mi
 800099a:	f110 0f00 	cmnmi.w	r0, #0
 800099e:	bd01      	pop	{r0, pc}

080009a0 <__aeabi_dcmpeq>:
 80009a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a4:	f7ff fff4 	bl	8000990 <__aeabi_cdcmpeq>
 80009a8:	bf0c      	ite	eq
 80009aa:	2001      	moveq	r0, #1
 80009ac:	2000      	movne	r0, #0
 80009ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b2:	bf00      	nop

080009b4 <__aeabi_dcmplt>:
 80009b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b8:	f7ff ffea 	bl	8000990 <__aeabi_cdcmpeq>
 80009bc:	bf34      	ite	cc
 80009be:	2001      	movcc	r0, #1
 80009c0:	2000      	movcs	r0, #0
 80009c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009c6:	bf00      	nop

080009c8 <__aeabi_dcmple>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff ffe0 	bl	8000990 <__aeabi_cdcmpeq>
 80009d0:	bf94      	ite	ls
 80009d2:	2001      	movls	r0, #1
 80009d4:	2000      	movhi	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmpge>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffce 	bl	8000980 <__aeabi_cdrcmple>
 80009e4:	bf94      	ite	ls
 80009e6:	2001      	movls	r0, #1
 80009e8:	2000      	movhi	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmpgt>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffc4 	bl	8000980 <__aeabi_cdrcmple>
 80009f8:	bf34      	ite	cc
 80009fa:	2001      	movcc	r0, #1
 80009fc:	2000      	movcs	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpun>:
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	d102      	bne.n	8000a14 <__aeabi_dcmpun+0x10>
 8000a0e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a12:	d10a      	bne.n	8000a2a <__aeabi_dcmpun+0x26>
 8000a14:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a1c:	d102      	bne.n	8000a24 <__aeabi_dcmpun+0x20>
 8000a1e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a22:	d102      	bne.n	8000a2a <__aeabi_dcmpun+0x26>
 8000a24:	f04f 0000 	mov.w	r0, #0
 8000a28:	4770      	bx	lr
 8000a2a:	f04f 0001 	mov.w	r0, #1
 8000a2e:	4770      	bx	lr

08000a30 <__aeabi_d2iz>:
 8000a30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a34:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a38:	d215      	bcs.n	8000a66 <__aeabi_d2iz+0x36>
 8000a3a:	d511      	bpl.n	8000a60 <__aeabi_d2iz+0x30>
 8000a3c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a40:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a44:	d912      	bls.n	8000a6c <__aeabi_d2iz+0x3c>
 8000a46:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a52:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a56:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5a:	bf18      	it	ne
 8000a5c:	4240      	negne	r0, r0
 8000a5e:	4770      	bx	lr
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6a:	d105      	bne.n	8000a78 <__aeabi_d2iz+0x48>
 8000a6c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a70:	bf08      	it	eq
 8000a72:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a76:	4770      	bx	lr
 8000a78:	f04f 0000 	mov.w	r0, #0
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop

08000a80 <__aeabi_d2f>:
 8000a80:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a84:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a88:	bf24      	itt	cs
 8000a8a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a8e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a92:	d90d      	bls.n	8000ab0 <__aeabi_d2f+0x30>
 8000a94:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a98:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a9c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aa4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa8:	bf08      	it	eq
 8000aaa:	f020 0001 	biceq.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ab4:	d121      	bne.n	8000afa <__aeabi_d2f+0x7a>
 8000ab6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aba:	bfbc      	itt	lt
 8000abc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac0:	4770      	bxlt	lr
 8000ac2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ac6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aca:	f1c2 0218 	rsb	r2, r2, #24
 8000ace:	f1c2 0c20 	rsb	ip, r2, #32
 8000ad2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ad6:	fa20 f002 	lsr.w	r0, r0, r2
 8000ada:	bf18      	it	ne
 8000adc:	f040 0001 	orrne.w	r0, r0, #1
 8000ae0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000aec:	ea40 000c 	orr.w	r0, r0, ip
 8000af0:	fa23 f302 	lsr.w	r3, r3, r2
 8000af4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af8:	e7cc      	b.n	8000a94 <__aeabi_d2f+0x14>
 8000afa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000afe:	d107      	bne.n	8000b10 <__aeabi_d2f+0x90>
 8000b00:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b04:	bf1e      	ittt	ne
 8000b06:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b0a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b0e:	4770      	bxne	lr
 8000b10:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b14:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b18:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop

08000b20 <__aeabi_fmul>:
 8000b20:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b24:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b28:	bf1e      	ittt	ne
 8000b2a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b2e:	ea92 0f0c 	teqne	r2, ip
 8000b32:	ea93 0f0c 	teqne	r3, ip
 8000b36:	d06f      	beq.n	8000c18 <__aeabi_fmul+0xf8>
 8000b38:	441a      	add	r2, r3
 8000b3a:	ea80 0c01 	eor.w	ip, r0, r1
 8000b3e:	0240      	lsls	r0, r0, #9
 8000b40:	bf18      	it	ne
 8000b42:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b46:	d01e      	beq.n	8000b86 <__aeabi_fmul+0x66>
 8000b48:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000b4c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000b50:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000b54:	fba0 3101 	umull	r3, r1, r0, r1
 8000b58:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000b5c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000b60:	bf3e      	ittt	cc
 8000b62:	0049      	lslcc	r1, r1, #1
 8000b64:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000b68:	005b      	lslcc	r3, r3, #1
 8000b6a:	ea40 0001 	orr.w	r0, r0, r1
 8000b6e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000b72:	2afd      	cmp	r2, #253	; 0xfd
 8000b74:	d81d      	bhi.n	8000bb2 <__aeabi_fmul+0x92>
 8000b76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000b7a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b7e:	bf08      	it	eq
 8000b80:	f020 0001 	biceq.w	r0, r0, #1
 8000b84:	4770      	bx	lr
 8000b86:	f090 0f00 	teq	r0, #0
 8000b8a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000b8e:	bf08      	it	eq
 8000b90:	0249      	lsleq	r1, r1, #9
 8000b92:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000b96:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000b9a:	3a7f      	subs	r2, #127	; 0x7f
 8000b9c:	bfc2      	ittt	gt
 8000b9e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ba2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ba6:	4770      	bxgt	lr
 8000ba8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bac:	f04f 0300 	mov.w	r3, #0
 8000bb0:	3a01      	subs	r2, #1
 8000bb2:	dc5d      	bgt.n	8000c70 <__aeabi_fmul+0x150>
 8000bb4:	f112 0f19 	cmn.w	r2, #25
 8000bb8:	bfdc      	itt	le
 8000bba:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bxle	lr
 8000bc0:	f1c2 0200 	rsb	r2, r2, #0
 8000bc4:	0041      	lsls	r1, r0, #1
 8000bc6:	fa21 f102 	lsr.w	r1, r1, r2
 8000bca:	f1c2 0220 	rsb	r2, r2, #32
 8000bce:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bd2:	ea5f 0031 	movs.w	r0, r1, rrx
 8000bd6:	f140 0000 	adc.w	r0, r0, #0
 8000bda:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000bde:	bf08      	it	eq
 8000be0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000be4:	4770      	bx	lr
 8000be6:	f092 0f00 	teq	r2, #0
 8000bea:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000bee:	bf02      	ittt	eq
 8000bf0:	0040      	lsleq	r0, r0, #1
 8000bf2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000bf6:	3a01      	subeq	r2, #1
 8000bf8:	d0f9      	beq.n	8000bee <__aeabi_fmul+0xce>
 8000bfa:	ea40 000c 	orr.w	r0, r0, ip
 8000bfe:	f093 0f00 	teq	r3, #0
 8000c02:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c06:	bf02      	ittt	eq
 8000c08:	0049      	lsleq	r1, r1, #1
 8000c0a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c0e:	3b01      	subeq	r3, #1
 8000c10:	d0f9      	beq.n	8000c06 <__aeabi_fmul+0xe6>
 8000c12:	ea41 010c 	orr.w	r1, r1, ip
 8000c16:	e78f      	b.n	8000b38 <__aeabi_fmul+0x18>
 8000c18:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c1c:	ea92 0f0c 	teq	r2, ip
 8000c20:	bf18      	it	ne
 8000c22:	ea93 0f0c 	teqne	r3, ip
 8000c26:	d00a      	beq.n	8000c3e <__aeabi_fmul+0x11e>
 8000c28:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c2c:	bf18      	it	ne
 8000c2e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c32:	d1d8      	bne.n	8000be6 <__aeabi_fmul+0xc6>
 8000c34:	ea80 0001 	eor.w	r0, r0, r1
 8000c38:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c3c:	4770      	bx	lr
 8000c3e:	f090 0f00 	teq	r0, #0
 8000c42:	bf17      	itett	ne
 8000c44:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000c48:	4608      	moveq	r0, r1
 8000c4a:	f091 0f00 	teqne	r1, #0
 8000c4e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000c52:	d014      	beq.n	8000c7e <__aeabi_fmul+0x15e>
 8000c54:	ea92 0f0c 	teq	r2, ip
 8000c58:	d101      	bne.n	8000c5e <__aeabi_fmul+0x13e>
 8000c5a:	0242      	lsls	r2, r0, #9
 8000c5c:	d10f      	bne.n	8000c7e <__aeabi_fmul+0x15e>
 8000c5e:	ea93 0f0c 	teq	r3, ip
 8000c62:	d103      	bne.n	8000c6c <__aeabi_fmul+0x14c>
 8000c64:	024b      	lsls	r3, r1, #9
 8000c66:	bf18      	it	ne
 8000c68:	4608      	movne	r0, r1
 8000c6a:	d108      	bne.n	8000c7e <__aeabi_fmul+0x15e>
 8000c6c:	ea80 0001 	eor.w	r0, r0, r1
 8000c70:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c74:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c78:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c7c:	4770      	bx	lr
 8000c7e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bx	lr

08000c88 <__aeabi_fdiv>:
 8000c88:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c8c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c90:	bf1e      	ittt	ne
 8000c92:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c96:	ea92 0f0c 	teqne	r2, ip
 8000c9a:	ea93 0f0c 	teqne	r3, ip
 8000c9e:	d069      	beq.n	8000d74 <__aeabi_fdiv+0xec>
 8000ca0:	eba2 0203 	sub.w	r2, r2, r3
 8000ca4:	ea80 0c01 	eor.w	ip, r0, r1
 8000ca8:	0249      	lsls	r1, r1, #9
 8000caa:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000cae:	d037      	beq.n	8000d20 <__aeabi_fdiv+0x98>
 8000cb0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000cb4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000cb8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000cbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cc0:	428b      	cmp	r3, r1
 8000cc2:	bf38      	it	cc
 8000cc4:	005b      	lslcc	r3, r3, #1
 8000cc6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000cca:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	bf24      	itt	cs
 8000cd2:	1a5b      	subcs	r3, r3, r1
 8000cd4:	ea40 000c 	orrcs.w	r0, r0, ip
 8000cd8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000cdc:	bf24      	itt	cs
 8000cde:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ce2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ce6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000cea:	bf24      	itt	cs
 8000cec:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000cf0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000cf4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000cf8:	bf24      	itt	cs
 8000cfa:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000cfe:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d02:	011b      	lsls	r3, r3, #4
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d0a:	d1e0      	bne.n	8000cce <__aeabi_fdiv+0x46>
 8000d0c:	2afd      	cmp	r2, #253	; 0xfd
 8000d0e:	f63f af50 	bhi.w	8000bb2 <__aeabi_fmul+0x92>
 8000d12:	428b      	cmp	r3, r1
 8000d14:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d18:	bf08      	it	eq
 8000d1a:	f020 0001 	biceq.w	r0, r0, #1
 8000d1e:	4770      	bx	lr
 8000d20:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d24:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d28:	327f      	adds	r2, #127	; 0x7f
 8000d2a:	bfc2      	ittt	gt
 8000d2c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d30:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d34:	4770      	bxgt	lr
 8000d36:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d3a:	f04f 0300 	mov.w	r3, #0
 8000d3e:	3a01      	subs	r2, #1
 8000d40:	e737      	b.n	8000bb2 <__aeabi_fmul+0x92>
 8000d42:	f092 0f00 	teq	r2, #0
 8000d46:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d4a:	bf02      	ittt	eq
 8000d4c:	0040      	lsleq	r0, r0, #1
 8000d4e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d52:	3a01      	subeq	r2, #1
 8000d54:	d0f9      	beq.n	8000d4a <__aeabi_fdiv+0xc2>
 8000d56:	ea40 000c 	orr.w	r0, r0, ip
 8000d5a:	f093 0f00 	teq	r3, #0
 8000d5e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d62:	bf02      	ittt	eq
 8000d64:	0049      	lsleq	r1, r1, #1
 8000d66:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d6a:	3b01      	subeq	r3, #1
 8000d6c:	d0f9      	beq.n	8000d62 <__aeabi_fdiv+0xda>
 8000d6e:	ea41 010c 	orr.w	r1, r1, ip
 8000d72:	e795      	b.n	8000ca0 <__aeabi_fdiv+0x18>
 8000d74:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d78:	ea92 0f0c 	teq	r2, ip
 8000d7c:	d108      	bne.n	8000d90 <__aeabi_fdiv+0x108>
 8000d7e:	0242      	lsls	r2, r0, #9
 8000d80:	f47f af7d 	bne.w	8000c7e <__aeabi_fmul+0x15e>
 8000d84:	ea93 0f0c 	teq	r3, ip
 8000d88:	f47f af70 	bne.w	8000c6c <__aeabi_fmul+0x14c>
 8000d8c:	4608      	mov	r0, r1
 8000d8e:	e776      	b.n	8000c7e <__aeabi_fmul+0x15e>
 8000d90:	ea93 0f0c 	teq	r3, ip
 8000d94:	d104      	bne.n	8000da0 <__aeabi_fdiv+0x118>
 8000d96:	024b      	lsls	r3, r1, #9
 8000d98:	f43f af4c 	beq.w	8000c34 <__aeabi_fmul+0x114>
 8000d9c:	4608      	mov	r0, r1
 8000d9e:	e76e      	b.n	8000c7e <__aeabi_fmul+0x15e>
 8000da0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000da4:	bf18      	it	ne
 8000da6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000daa:	d1ca      	bne.n	8000d42 <__aeabi_fdiv+0xba>
 8000dac:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000db0:	f47f af5c 	bne.w	8000c6c <__aeabi_fmul+0x14c>
 8000db4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000db8:	f47f af3c 	bne.w	8000c34 <__aeabi_fmul+0x114>
 8000dbc:	e75f      	b.n	8000c7e <__aeabi_fmul+0x15e>
 8000dbe:	bf00      	nop

08000dc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dc2:	4b0e      	ldr	r3, [pc, #56]	; (8000dfc <HAL_InitTick+0x3c>)
{
 8000dc4:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dc6:	7818      	ldrb	r0, [r3, #0]
 8000dc8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dcc:	fbb3 f3f0 	udiv	r3, r3, r0
 8000dd0:	4a0b      	ldr	r2, [pc, #44]	; (8000e00 <HAL_InitTick+0x40>)
 8000dd2:	6810      	ldr	r0, [r2, #0]
 8000dd4:	fbb0 f0f3 	udiv	r0, r0, r3
 8000dd8:	f000 fb5c 	bl	8001494 <HAL_SYSTICK_Config>
 8000ddc:	4604      	mov	r4, r0
 8000dde:	b958      	cbnz	r0, 8000df8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000de0:	2d0f      	cmp	r5, #15
 8000de2:	d809      	bhi.n	8000df8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000de4:	4602      	mov	r2, r0
 8000de6:	4629      	mov	r1, r5
 8000de8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000dec:	f000 fb1e 	bl	800142c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000df0:	4b04      	ldr	r3, [pc, #16]	; (8000e04 <HAL_InitTick+0x44>)
 8000df2:	4620      	mov	r0, r4
 8000df4:	601d      	str	r5, [r3, #0]
 8000df6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000df8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000dfa:	bd38      	pop	{r3, r4, r5, pc}
 8000dfc:	20000000 	.word	0x20000000
 8000e00:	20000008 	.word	0x20000008
 8000e04:	20000004 	.word	0x20000004

08000e08 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e08:	4a07      	ldr	r2, [pc, #28]	; (8000e28 <HAL_Init+0x20>)
{
 8000e0a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e0c:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e0e:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e10:	f043 0310 	orr.w	r3, r3, #16
 8000e14:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e16:	f000 faf7 	bl	8001408 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e1a:	2000      	movs	r0, #0
 8000e1c:	f7ff ffd0 	bl	8000dc0 <HAL_InitTick>
  HAL_MspInit();
 8000e20:	f001 fa1e 	bl	8002260 <HAL_MspInit>
}
 8000e24:	2000      	movs	r0, #0
 8000e26:	bd08      	pop	{r3, pc}
 8000e28:	40022000 	.word	0x40022000

08000e2c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000e2c:	4a03      	ldr	r2, [pc, #12]	; (8000e3c <HAL_IncTick+0x10>)
 8000e2e:	4b04      	ldr	r3, [pc, #16]	; (8000e40 <HAL_IncTick+0x14>)
 8000e30:	6811      	ldr	r1, [r2, #0]
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	440b      	add	r3, r1
 8000e36:	6013      	str	r3, [r2, #0]
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	20000208 	.word	0x20000208
 8000e40:	20000000 	.word	0x20000000

08000e44 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000e44:	4b01      	ldr	r3, [pc, #4]	; (8000e4c <HAL_GetTick+0x8>)
 8000e46:	6818      	ldr	r0, [r3, #0]
}
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	20000208 	.word	0x20000208

08000e50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e50:	b538      	push	{r3, r4, r5, lr}
 8000e52:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000e54:	f7ff fff6 	bl	8000e44 <HAL_GetTick>
 8000e58:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e5a:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000e5c:	bf1e      	ittt	ne
 8000e5e:	4b04      	ldrne	r3, [pc, #16]	; (8000e70 <HAL_Delay+0x20>)
 8000e60:	781b      	ldrbne	r3, [r3, #0]
 8000e62:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e64:	f7ff ffee 	bl	8000e44 <HAL_GetTick>
 8000e68:	1b40      	subs	r0, r0, r5
 8000e6a:	4284      	cmp	r4, r0
 8000e6c:	d8fa      	bhi.n	8000e64 <HAL_Delay+0x14>
  {
  }
}
 8000e6e:	bd38      	pop	{r3, r4, r5, pc}
 8000e70:	20000000 	.word	0x20000000

08000e74 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000e74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart = 0U;
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000e76:	2600      	movs	r6, #0
{
 8000e78:	4604      	mov	r4, r0
 8000e7a:	460d      	mov	r5, r1
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000e7c:	9601      	str	r6, [sp, #4]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000e7e:	f7ff ffe1 	bl	8000e44 <HAL_GetTick>
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000e82:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8000e84:	4607      	mov	r7, r0
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000e86:	689a      	ldr	r2, [r3, #8]
 8000e88:	05d2      	lsls	r2, r2, #23
 8000e8a:	d508      	bpl.n	8000e9e <HAL_ADC_PollForConversion+0x2a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
    
    return HAL_ERROR;
 8000e8c:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e8e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    __HAL_UNLOCK(hadc);
 8000e90:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e94:	f043 0320 	orr.w	r3, r3, #32
 8000e98:	62a3      	str	r3, [r4, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
}
 8000e9a:	b003      	add	sp, #12
 8000e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000e9e:	685a      	ldr	r2, [r3, #4]
 8000ea0:	05d6      	lsls	r6, r2, #23
 8000ea2:	d403      	bmi.n	8000eac <HAL_ADC_PollForConversion+0x38>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000ea6:	f413 0f70 	tst.w	r3, #15728640	; 0xf00000
 8000eaa:	d03b      	beq.n	8000f24 <HAL_ADC_PollForConversion+0xb0>
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000eac:	4b3a      	ldr	r3, [pc, #232]	; (8000f98 <HAL_ADC_PollForConversion+0x124>)
 8000eae:	2002      	movs	r0, #2
 8000eb0:	681e      	ldr	r6, [r3, #0]
 8000eb2:	f000 fef7 	bl	8001ca4 <HAL_RCCEx_GetPeriphCLKFreq>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000eb6:	6823      	ldr	r3, [r4, #0]
 8000eb8:	4a38      	ldr	r2, [pc, #224]	; (8000f9c <HAL_ADC_PollForConversion+0x128>)
 8000eba:	6919      	ldr	r1, [r3, #16]
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000ebc:	fbb6 f0f0 	udiv	r0, r6, r0
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000ec0:	4211      	tst	r1, r2
 8000ec2:	4a37      	ldr	r2, [pc, #220]	; (8000fa0 <HAL_ADC_PollForConversion+0x12c>)
 8000ec4:	d14f      	bne.n	8000f66 <HAL_ADC_PollForConversion+0xf2>
 8000ec6:	68de      	ldr	r6, [r3, #12]
 8000ec8:	4936      	ldr	r1, [pc, #216]	; (8000fa4 <HAL_ADC_PollForConversion+0x130>)
 8000eca:	420e      	tst	r6, r1
 8000ecc:	d14b      	bne.n	8000f66 <HAL_ADC_PollForConversion+0xf2>
 8000ece:	6919      	ldr	r1, [r3, #16]
 8000ed0:	4211      	tst	r1, r2
 8000ed2:	d159      	bne.n	8000f88 <HAL_ADC_PollForConversion+0x114>
 8000ed4:	68da      	ldr	r2, [r3, #12]
 8000ed6:	4b34      	ldr	r3, [pc, #208]	; (8000fa8 <HAL_ADC_PollForConversion+0x134>)
 8000ed8:	421a      	tst	r2, r3
 8000eda:	bf14      	ite	ne
 8000edc:	2329      	movne	r3, #41	; 0x29
 8000ede:	2314      	moveq	r3, #20
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000ee0:	fb00 f603 	mul.w	r6, r0, r3
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000ee4:	9b01      	ldr	r3, [sp, #4]
 8000ee6:	429e      	cmp	r6, r3
 8000ee8:	d920      	bls.n	8000f2c <HAL_ADC_PollForConversion+0xb8>
      if(Timeout != HAL_MAX_DELAY)
 8000eea:	1c6b      	adds	r3, r5, #1
 8000eec:	d005      	beq.n	8000efa <HAL_ADC_PollForConversion+0x86>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000eee:	b15d      	cbz	r5, 8000f08 <HAL_ADC_PollForConversion+0x94>
 8000ef0:	f7ff ffa8 	bl	8000e44 <HAL_GetTick>
 8000ef4:	1bc0      	subs	r0, r0, r7
 8000ef6:	4285      	cmp	r5, r0
 8000ef8:	d306      	bcc.n	8000f08 <HAL_ADC_PollForConversion+0x94>
      Conversion_Timeout_CPU_cycles ++;
 8000efa:	9b01      	ldr	r3, [sp, #4]
 8000efc:	3301      	adds	r3, #1
 8000efe:	9301      	str	r3, [sp, #4]
 8000f00:	e7f0      	b.n	8000ee4 <HAL_ADC_PollForConversion+0x70>
      if(Timeout != HAL_MAX_DELAY)
 8000f02:	1c68      	adds	r0, r5, #1
 8000f04:	d00f      	beq.n	8000f26 <HAL_ADC_PollForConversion+0xb2>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000f06:	b945      	cbnz	r5, 8000f1a <HAL_ADC_PollForConversion+0xa6>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000f08:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          return HAL_TIMEOUT;
 8000f0a:	2003      	movs	r0, #3
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000f0c:	f043 0304 	orr.w	r3, r3, #4
 8000f10:	62a3      	str	r3, [r4, #40]	; 0x28
          __HAL_UNLOCK(hadc);
 8000f12:	2300      	movs	r3, #0
 8000f14:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          return HAL_TIMEOUT;
 8000f18:	e7bf      	b.n	8000e9a <HAL_ADC_PollForConversion+0x26>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000f1a:	f7ff ff93 	bl	8000e44 <HAL_GetTick>
 8000f1e:	1bc0      	subs	r0, r0, r7
 8000f20:	4285      	cmp	r5, r0
 8000f22:	d3f1      	bcc.n	8000f08 <HAL_ADC_PollForConversion+0x94>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000f24:	6822      	ldr	r2, [r4, #0]
 8000f26:	6813      	ldr	r3, [r2, #0]
 8000f28:	0799      	lsls	r1, r3, #30
 8000f2a:	d5ea      	bpl.n	8000f02 <HAL_ADC_PollForConversion+0x8e>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000f2c:	f06f 0312 	mvn.w	r3, #18
 8000f30:	6822      	ldr	r2, [r4, #0]
 8000f32:	6013      	str	r3, [r2, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000f34:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000f36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f3a:	62a3      	str	r3, [r4, #40]	; 0x28
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000f3c:	6893      	ldr	r3, [r2, #8]
 8000f3e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000f42:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000f46:	d125      	bne.n	8000f94 <HAL_ADC_PollForConversion+0x120>
 8000f48:	68e3      	ldr	r3, [r4, #12]
 8000f4a:	bb1b      	cbnz	r3, 8000f94 <HAL_ADC_PollForConversion+0x120>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000f4c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000f4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f52:	62a3      	str	r3, [r4, #40]	; 0x28
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f54:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000f56:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
 8000f5a:	d11b      	bne.n	8000f94 <HAL_ADC_PollForConversion+0x120>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f5c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000f5e:	f043 0301 	orr.w	r3, r3, #1
 8000f62:	62a3      	str	r3, [r4, #40]	; 0x28
 8000f64:	e799      	b.n	8000e9a <HAL_ADC_PollForConversion+0x26>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000f66:	6919      	ldr	r1, [r3, #16]
 8000f68:	4211      	tst	r1, r2
 8000f6a:	d103      	bne.n	8000f74 <HAL_ADC_PollForConversion+0x100>
 8000f6c:	68d9      	ldr	r1, [r3, #12]
 8000f6e:	4a0e      	ldr	r2, [pc, #56]	; (8000fa8 <HAL_ADC_PollForConversion+0x134>)
 8000f70:	4211      	tst	r1, r2
 8000f72:	d00b      	beq.n	8000f8c <HAL_ADC_PollForConversion+0x118>
 8000f74:	6919      	ldr	r1, [r3, #16]
 8000f76:	4a0d      	ldr	r2, [pc, #52]	; (8000fac <HAL_ADC_PollForConversion+0x138>)
 8000f78:	4211      	tst	r1, r2
 8000f7a:	d109      	bne.n	8000f90 <HAL_ADC_PollForConversion+0x11c>
 8000f7c:	68db      	ldr	r3, [r3, #12]
 8000f7e:	4213      	tst	r3, r2
 8000f80:	bf14      	ite	ne
 8000f82:	23fc      	movne	r3, #252	; 0xfc
 8000f84:	2354      	moveq	r3, #84	; 0x54
 8000f86:	e7ab      	b.n	8000ee0 <HAL_ADC_PollForConversion+0x6c>
 8000f88:	2329      	movs	r3, #41	; 0x29
 8000f8a:	e7a9      	b.n	8000ee0 <HAL_ADC_PollForConversion+0x6c>
 8000f8c:	2354      	movs	r3, #84	; 0x54
 8000f8e:	e7a7      	b.n	8000ee0 <HAL_ADC_PollForConversion+0x6c>
 8000f90:	23fc      	movs	r3, #252	; 0xfc
 8000f92:	e7a5      	b.n	8000ee0 <HAL_ADC_PollForConversion+0x6c>
  return HAL_OK;
 8000f94:	2000      	movs	r0, #0
 8000f96:	e780      	b.n	8000e9a <HAL_ADC_PollForConversion+0x26>
 8000f98:	20000008 	.word	0x20000008
 8000f9c:	24924924 	.word	0x24924924
 8000fa0:	12492492 	.word	0x12492492
 8000fa4:	00924924 	.word	0x00924924
 8000fa8:	00492492 	.word	0x00492492
 8000fac:	00249249 	.word	0x00249249

08000fb0 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000fb0:	6803      	ldr	r3, [r0, #0]
 8000fb2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8000fb4:	4770      	bx	lr
	...

08000fb8 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8000fb8:	2300      	movs	r3, #0
{ 
 8000fba:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000fbc:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000fbe:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d074      	beq.n	80010b0 <HAL_ADC_ConfigChannel+0xf8>
 8000fc6:	2301      	movs	r3, #1
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000fc8:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 8000fca:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8000fce:	2d06      	cmp	r5, #6
 8000fd0:	6802      	ldr	r2, [r0, #0]
 8000fd2:	ea4f 0385 	mov.w	r3, r5, lsl #2
 8000fd6:	680c      	ldr	r4, [r1, #0]
 8000fd8:	d825      	bhi.n	8001026 <HAL_ADC_ConfigChannel+0x6e>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000fda:	442b      	add	r3, r5
 8000fdc:	251f      	movs	r5, #31
 8000fde:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8000fe0:	3b05      	subs	r3, #5
 8000fe2:	409d      	lsls	r5, r3
 8000fe4:	ea26 0505 	bic.w	r5, r6, r5
 8000fe8:	fa04 f303 	lsl.w	r3, r4, r3
 8000fec:	432b      	orrs	r3, r5
 8000fee:	6353      	str	r3, [r2, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000ff0:	2c09      	cmp	r4, #9
 8000ff2:	ea4f 0344 	mov.w	r3, r4, lsl #1
 8000ff6:	688d      	ldr	r5, [r1, #8]
 8000ff8:	d92f      	bls.n	800105a <HAL_ADC_ConfigChannel+0xa2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000ffa:	2607      	movs	r6, #7
 8000ffc:	4423      	add	r3, r4
 8000ffe:	68d1      	ldr	r1, [r2, #12]
 8001000:	3b1e      	subs	r3, #30
 8001002:	409e      	lsls	r6, r3
 8001004:	ea21 0106 	bic.w	r1, r1, r6
 8001008:	fa05 f303 	lsl.w	r3, r5, r3
 800100c:	430b      	orrs	r3, r1
 800100e:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001010:	f1a4 0310 	sub.w	r3, r4, #16
 8001014:	2b01      	cmp	r3, #1
 8001016:	d92b      	bls.n	8001070 <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001018:	2300      	movs	r3, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800101a:	2200      	movs	r2, #0
 800101c:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8001020:	4618      	mov	r0, r3
 8001022:	b002      	add	sp, #8
 8001024:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 8001026:	2d0c      	cmp	r5, #12
 8001028:	d80b      	bhi.n	8001042 <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800102a:	442b      	add	r3, r5
 800102c:	251f      	movs	r5, #31
 800102e:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8001030:	3b23      	subs	r3, #35	; 0x23
 8001032:	409d      	lsls	r5, r3
 8001034:	ea26 0505 	bic.w	r5, r6, r5
 8001038:	fa04 f303 	lsl.w	r3, r4, r3
 800103c:	432b      	orrs	r3, r5
 800103e:	6313      	str	r3, [r2, #48]	; 0x30
 8001040:	e7d6      	b.n	8000ff0 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001042:	442b      	add	r3, r5
 8001044:	251f      	movs	r5, #31
 8001046:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8001048:	3b41      	subs	r3, #65	; 0x41
 800104a:	409d      	lsls	r5, r3
 800104c:	ea26 0505 	bic.w	r5, r6, r5
 8001050:	fa04 f303 	lsl.w	r3, r4, r3
 8001054:	432b      	orrs	r3, r5
 8001056:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001058:	e7ca      	b.n	8000ff0 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800105a:	2607      	movs	r6, #7
 800105c:	6911      	ldr	r1, [r2, #16]
 800105e:	4423      	add	r3, r4
 8001060:	409e      	lsls	r6, r3
 8001062:	ea21 0106 	bic.w	r1, r1, r6
 8001066:	fa05 f303 	lsl.w	r3, r5, r3
 800106a:	430b      	orrs	r3, r1
 800106c:	6113      	str	r3, [r2, #16]
 800106e:	e7cf      	b.n	8001010 <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 8001070:	4b10      	ldr	r3, [pc, #64]	; (80010b4 <HAL_ADC_ConfigChannel+0xfc>)
 8001072:	429a      	cmp	r2, r3
 8001074:	d116      	bne.n	80010a4 <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001076:	6893      	ldr	r3, [r2, #8]
 8001078:	021b      	lsls	r3, r3, #8
 800107a:	d4cd      	bmi.n	8001018 <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800107c:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800107e:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001080:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001084:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001086:	d1c7      	bne.n	8001018 <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001088:	4b0b      	ldr	r3, [pc, #44]	; (80010b8 <HAL_ADC_ConfigChannel+0x100>)
 800108a:	4a0c      	ldr	r2, [pc, #48]	; (80010bc <HAL_ADC_ConfigChannel+0x104>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	fbb3 f2f2 	udiv	r2, r3, r2
 8001092:	230a      	movs	r3, #10
 8001094:	4353      	muls	r3, r2
            wait_loop_index--;
 8001096:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8001098:	9b01      	ldr	r3, [sp, #4]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d0bc      	beq.n	8001018 <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 800109e:	9b01      	ldr	r3, [sp, #4]
 80010a0:	3b01      	subs	r3, #1
 80010a2:	e7f8      	b.n	8001096 <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010a4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80010a6:	f043 0320 	orr.w	r3, r3, #32
 80010aa:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 80010ac:	2301      	movs	r3, #1
 80010ae:	e7b4      	b.n	800101a <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 80010b0:	2302      	movs	r3, #2
 80010b2:	e7b5      	b.n	8001020 <HAL_ADC_ConfigChannel+0x68>
 80010b4:	40012400 	.word	0x40012400
 80010b8:	20000008 	.word	0x20000008
 80010bc:	000f4240 	.word	0x000f4240

080010c0 <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 80010c0:	2300      	movs	r3, #0
{
 80010c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 80010c4:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80010c6:	6803      	ldr	r3, [r0, #0]
{
 80010c8:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 80010ca:	689a      	ldr	r2, [r3, #8]
 80010cc:	07d2      	lsls	r2, r2, #31
 80010ce:	d502      	bpl.n	80010d6 <ADC_Enable+0x16>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80010d0:	2000      	movs	r0, #0
}
 80010d2:	b002      	add	sp, #8
 80010d4:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 80010d6:	689a      	ldr	r2, [r3, #8]
 80010d8:	f042 0201 	orr.w	r2, r2, #1
 80010dc:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80010de:	4b12      	ldr	r3, [pc, #72]	; (8001128 <ADC_Enable+0x68>)
 80010e0:	4a12      	ldr	r2, [pc, #72]	; (800112c <ADC_Enable+0x6c>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 80010e8:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80010ea:	9b01      	ldr	r3, [sp, #4]
 80010ec:	b9c3      	cbnz	r3, 8001120 <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 80010ee:	f7ff fea9 	bl	8000e44 <HAL_GetTick>
 80010f2:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 80010f4:	6823      	ldr	r3, [r4, #0]
 80010f6:	689d      	ldr	r5, [r3, #8]
 80010f8:	f015 0501 	ands.w	r5, r5, #1
 80010fc:	d1e8      	bne.n	80010d0 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80010fe:	f7ff fea1 	bl	8000e44 <HAL_GetTick>
 8001102:	1b80      	subs	r0, r0, r6
 8001104:	2802      	cmp	r0, #2
 8001106:	d9f5      	bls.n	80010f4 <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001108:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 800110a:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800110e:	f043 0310 	orr.w	r3, r3, #16
 8001112:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001114:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 8001116:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800111e:	e7d8      	b.n	80010d2 <ADC_Enable+0x12>
      wait_loop_index--;
 8001120:	9b01      	ldr	r3, [sp, #4]
 8001122:	3b01      	subs	r3, #1
 8001124:	e7e0      	b.n	80010e8 <ADC_Enable+0x28>
 8001126:	bf00      	nop
 8001128:	20000008 	.word	0x20000008
 800112c:	000f4240 	.word	0x000f4240

08001130 <HAL_ADC_Start>:
  __HAL_LOCK(hadc);
 8001130:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8001134:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8001136:	2b01      	cmp	r3, #1
{
 8001138:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 800113a:	d054      	beq.n	80011e6 <HAL_ADC_Start+0xb6>
 800113c:	2301      	movs	r3, #1
 800113e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 8001142:	f7ff ffbd 	bl	80010c0 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8001146:	2800      	cmp	r0, #0
 8001148:	d149      	bne.n	80011de <HAL_ADC_Start+0xae>
    ADC_STATE_CLR_SET(hadc->State,
 800114a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800114c:	4a27      	ldr	r2, [pc, #156]	; (80011ec <HAL_ADC_Start+0xbc>)
    ADC_STATE_CLR_SET(hadc->State,
 800114e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001152:	f023 0301 	bic.w	r3, r3, #1
 8001156:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800115a:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800115c:	6823      	ldr	r3, [r4, #0]
 800115e:	4293      	cmp	r3, r2
 8001160:	d104      	bne.n	800116c <HAL_ADC_Start+0x3c>
 8001162:	4923      	ldr	r1, [pc, #140]	; (80011f0 <HAL_ADC_Start+0xc0>)
 8001164:	684a      	ldr	r2, [r1, #4]
 8001166:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 800116a:	d12e      	bne.n	80011ca <HAL_ADC_Start+0x9a>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800116c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800116e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001172:	62a2      	str	r2, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001174:	685a      	ldr	r2, [r3, #4]
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001176:	0552      	lsls	r2, r2, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001178:	bf41      	itttt	mi
 800117a:	6aa2      	ldrmi	r2, [r4, #40]	; 0x28
 800117c:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 8001180:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 8001184:	62a2      	strmi	r2, [r4, #40]	; 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001186:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001188:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800118c:	bf1c      	itt	ne
 800118e:	6ae2      	ldrne	r2, [r4, #44]	; 0x2c
 8001190:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8001194:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 8001196:	2200      	movs	r2, #0
 8001198:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800119c:	f06f 0202 	mvn.w	r2, #2
 80011a0:	601a      	str	r2, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80011a2:	689a      	ldr	r2, [r3, #8]
 80011a4:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 80011a8:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 80011ac:	d113      	bne.n	80011d6 <HAL_ADC_Start+0xa6>
 80011ae:	4a0f      	ldr	r2, [pc, #60]	; (80011ec <HAL_ADC_Start+0xbc>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d105      	bne.n	80011c0 <HAL_ADC_Start+0x90>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80011b4:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 80011b8:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80011ba:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 80011be:	d10a      	bne.n	80011d6 <HAL_ADC_Start+0xa6>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80011c0:	689a      	ldr	r2, [r3, #8]
 80011c2:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	bd10      	pop	{r4, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80011ca:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80011cc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80011d0:	62a2      	str	r2, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80011d2:	684a      	ldr	r2, [r1, #4]
 80011d4:	e7cf      	b.n	8001176 <HAL_ADC_Start+0x46>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80011d6:	689a      	ldr	r2, [r3, #8]
 80011d8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80011dc:	e7f3      	b.n	80011c6 <HAL_ADC_Start+0x96>
    __HAL_UNLOCK(hadc);
 80011de:	2300      	movs	r3, #0
 80011e0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80011e4:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 80011e6:	2002      	movs	r0, #2
}
 80011e8:	bd10      	pop	{r4, pc}
 80011ea:	bf00      	nop
 80011ec:	40012800 	.word	0x40012800
 80011f0:	40012400 	.word	0x40012400

080011f4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80011f4:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80011f6:	6803      	ldr	r3, [r0, #0]
{
 80011f8:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 80011fa:	689a      	ldr	r2, [r3, #8]
 80011fc:	07d2      	lsls	r2, r2, #31
 80011fe:	d401      	bmi.n	8001204 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001200:	2000      	movs	r0, #0
 8001202:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8001204:	689a      	ldr	r2, [r3, #8]
 8001206:	f022 0201 	bic.w	r2, r2, #1
 800120a:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800120c:	f7ff fe1a 	bl	8000e44 <HAL_GetTick>
 8001210:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001212:	6823      	ldr	r3, [r4, #0]
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	07db      	lsls	r3, r3, #31
 8001218:	d5f2      	bpl.n	8001200 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800121a:	f7ff fe13 	bl	8000e44 <HAL_GetTick>
 800121e:	1b40      	subs	r0, r0, r5
 8001220:	2802      	cmp	r0, #2
 8001222:	d9f6      	bls.n	8001212 <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001224:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001226:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001228:	f043 0310 	orr.w	r3, r3, #16
 800122c:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800122e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001230:	f043 0301 	orr.w	r3, r3, #1
 8001234:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001236:	bd38      	pop	{r3, r4, r5, pc}

08001238 <HAL_ADC_Init>:
{
 8001238:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 800123a:	4604      	mov	r4, r0
 800123c:	2800      	cmp	r0, #0
 800123e:	d071      	beq.n	8001324 <HAL_ADC_Init+0xec>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001240:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001242:	b923      	cbnz	r3, 800124e <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8001244:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8001246:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 800124a:	f001 f82b 	bl	80022a4 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800124e:	4620      	mov	r0, r4
 8001250:	f7ff ffd0 	bl	80011f4 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001254:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001256:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 800125a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800125c:	d164      	bne.n	8001328 <HAL_ADC_Init+0xf0>
 800125e:	2800      	cmp	r0, #0
 8001260:	d162      	bne.n	8001328 <HAL_ADC_Init+0xf0>
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8001262:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 8001264:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8001268:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 800126a:	f023 0302 	bic.w	r3, r3, #2
 800126e:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8001272:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001274:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8001276:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 8001278:	68e3      	ldr	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800127a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 800127e:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001282:	d038      	beq.n	80012f6 <HAL_ADC_Init+0xbe>
 8001284:	2901      	cmp	r1, #1
 8001286:	bf14      	ite	ne
 8001288:	4606      	movne	r6, r0
 800128a:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800128e:	6965      	ldr	r5, [r4, #20]
 8001290:	2d01      	cmp	r5, #1
 8001292:	d107      	bne.n	80012a4 <HAL_ADC_Init+0x6c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001294:	2b00      	cmp	r3, #0
 8001296:	d130      	bne.n	80012fa <HAL_ADC_Init+0xc2>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001298:	69a3      	ldr	r3, [r4, #24]
 800129a:	3b01      	subs	r3, #1
 800129c:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 80012a0:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 80012a4:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80012a6:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 80012aa:	685d      	ldr	r5, [r3, #4]
 80012ac:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 80012b0:	ea45 0506 	orr.w	r5, r5, r6
 80012b4:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80012b6:	689e      	ldr	r6, [r3, #8]
 80012b8:	4d1d      	ldr	r5, [pc, #116]	; (8001330 <HAL_ADC_Init+0xf8>)
 80012ba:	ea05 0506 	and.w	r5, r5, r6
 80012be:	ea45 0502 	orr.w	r5, r5, r2
 80012c2:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80012c4:	d001      	beq.n	80012ca <HAL_ADC_Init+0x92>
 80012c6:	2901      	cmp	r1, #1
 80012c8:	d120      	bne.n	800130c <HAL_ADC_Init+0xd4>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80012ca:	6921      	ldr	r1, [r4, #16]
 80012cc:	3901      	subs	r1, #1
 80012ce:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 80012d0:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80012d2:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 80012d6:	4329      	orrs	r1, r5
 80012d8:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80012da:	6899      	ldr	r1, [r3, #8]
 80012dc:	4b15      	ldr	r3, [pc, #84]	; (8001334 <HAL_ADC_Init+0xfc>)
 80012de:	400b      	ands	r3, r1
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d115      	bne.n	8001310 <HAL_ADC_Init+0xd8>
      ADC_CLEAR_ERRORCODE(hadc);
 80012e4:	2300      	movs	r3, #0
 80012e6:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 80012e8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80012ea:	f023 0303 	bic.w	r3, r3, #3
 80012ee:	f043 0301 	orr.w	r3, r3, #1
 80012f2:	62a3      	str	r3, [r4, #40]	; 0x28
 80012f4:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80012f6:	460e      	mov	r6, r1
 80012f8:	e7c9      	b.n	800128e <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80012fc:	f043 0320 	orr.w	r3, r3, #32
 8001300:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001302:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001304:	f043 0301 	orr.w	r3, r3, #1
 8001308:	62e3      	str	r3, [r4, #44]	; 0x2c
 800130a:	e7cb      	b.n	80012a4 <HAL_ADC_Init+0x6c>
  uint32_t tmp_sqr1 = 0U;
 800130c:	2100      	movs	r1, #0
 800130e:	e7df      	b.n	80012d0 <HAL_ADC_Init+0x98>
      ADC_STATE_CLR_SET(hadc->State,
 8001310:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001312:	f023 0312 	bic.w	r3, r3, #18
 8001316:	f043 0310 	orr.w	r3, r3, #16
 800131a:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800131c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800131e:	f043 0301 	orr.w	r3, r3, #1
 8001322:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8001324:	2001      	movs	r0, #1
}
 8001326:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001328:	f043 0310 	orr.w	r3, r3, #16
 800132c:	62a3      	str	r3, [r4, #40]	; 0x28
 800132e:	e7f9      	b.n	8001324 <HAL_ADC_Init+0xec>
 8001330:	ffe1f7fd 	.word	0xffe1f7fd
 8001334:	ff1f0efe 	.word	0xff1f0efe

08001338 <HAL_ADCEx_Calibration_Start>:
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001338:	2300      	movs	r3, #0
{
 800133a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 800133c:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800133e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8001342:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8001344:	2b01      	cmp	r3, #1
 8001346:	d05a      	beq.n	80013fe <HAL_ADCEx_Calibration_Start+0xc6>
 8001348:	2301      	movs	r3, #1
 800134a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800134e:	f7ff ff51 	bl	80011f4 <ADC_ConversionStop_Disable>
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001352:	4605      	mov	r5, r0
 8001354:	2800      	cmp	r0, #0
 8001356:	d132      	bne.n	80013be <HAL_ADCEx_Calibration_Start+0x86>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001358:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800135a:	2002      	movs	r0, #2
    ADC_STATE_CLR_SET(hadc->State,
 800135c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001360:	f023 0302 	bic.w	r3, r3, #2
 8001364:	f043 0302 	orr.w	r3, r3, #2
 8001368:	62a3      	str	r3, [r4, #40]	; 0x28
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800136a:	4b26      	ldr	r3, [pc, #152]	; (8001404 <HAL_ADCEx_Calibration_Start+0xcc>)
 800136c:	681e      	ldr	r6, [r3, #0]
 800136e:	f000 fc99 	bl	8001ca4 <HAL_RCCEx_GetPeriphCLKFreq>
 8001372:	fbb6 f0f0 	udiv	r0, r6, r0
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001376:	0040      	lsls	r0, r0, #1
    wait_loop_index = ((SystemCoreClock
 8001378:	9001      	str	r0, [sp, #4]

    while(wait_loop_index != 0U)
 800137a:	9b01      	ldr	r3, [sp, #4]
 800137c:	bb1b      	cbnz	r3, 80013c6 <HAL_ADCEx_Calibration_Start+0x8e>
    {
      wait_loop_index--;
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 800137e:	4620      	mov	r0, r4
 8001380:	f7ff fe9e 	bl	80010c0 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001384:	6822      	ldr	r2, [r4, #0]
 8001386:	6893      	ldr	r3, [r2, #8]
 8001388:	f043 0308 	orr.w	r3, r3, #8
 800138c:	6093      	str	r3, [r2, #8]
    
    tickstart = HAL_GetTick();  
 800138e:	f7ff fd59 	bl	8000e44 <HAL_GetTick>
 8001392:	4606      	mov	r6, r0

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001394:	6823      	ldr	r3, [r4, #0]
 8001396:	689a      	ldr	r2, [r3, #8]
 8001398:	0712      	lsls	r2, r2, #28
 800139a:	d418      	bmi.n	80013ce <HAL_ADCEx_Calibration_Start+0x96>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800139c:	689a      	ldr	r2, [r3, #8]
 800139e:	f042 0204 	orr.w	r2, r2, #4
 80013a2:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80013a4:	f7ff fd4e 	bl	8000e44 <HAL_GetTick>
 80013a8:	4606      	mov	r6, r0

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80013aa:	6823      	ldr	r3, [r4, #0]
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	075b      	lsls	r3, r3, #29
 80013b0:	d41f      	bmi.n	80013f2 <HAL_ADCEx_Calibration_Start+0xba>
        return HAL_ERROR;
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80013b4:	f023 0303 	bic.w	r3, r3, #3
 80013b8:	f043 0301 	orr.w	r3, r3, #1
 80013bc:	62a3      	str	r3, [r4, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013be:	2300      	movs	r3, #0
 80013c0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80013c4:	e012      	b.n	80013ec <HAL_ADCEx_Calibration_Start+0xb4>
      wait_loop_index--;
 80013c6:	9b01      	ldr	r3, [sp, #4]
 80013c8:	3b01      	subs	r3, #1
 80013ca:	9301      	str	r3, [sp, #4]
 80013cc:	e7d5      	b.n	800137a <HAL_ADCEx_Calibration_Start+0x42>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80013ce:	f7ff fd39 	bl	8000e44 <HAL_GetTick>
 80013d2:	1b80      	subs	r0, r0, r6
 80013d4:	280a      	cmp	r0, #10
 80013d6:	d9dd      	bls.n	8001394 <HAL_ADCEx_Calibration_Start+0x5c>
        ADC_STATE_CLR_SET(hadc->State,
 80013d8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        return HAL_ERROR;
 80013da:	2501      	movs	r5, #1
        ADC_STATE_CLR_SET(hadc->State,
 80013dc:	f023 0312 	bic.w	r3, r3, #18
 80013e0:	f043 0310 	orr.w	r3, r3, #16
 80013e4:	62a3      	str	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 80013e6:	2300      	movs	r3, #0
 80013e8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 80013ec:	4628      	mov	r0, r5
 80013ee:	b002      	add	sp, #8
 80013f0:	bd70      	pop	{r4, r5, r6, pc}
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80013f2:	f7ff fd27 	bl	8000e44 <HAL_GetTick>
 80013f6:	1b80      	subs	r0, r0, r6
 80013f8:	280a      	cmp	r0, #10
 80013fa:	d9d6      	bls.n	80013aa <HAL_ADCEx_Calibration_Start+0x72>
 80013fc:	e7ec      	b.n	80013d8 <HAL_ADCEx_Calibration_Start+0xa0>
  __HAL_LOCK(hadc);
 80013fe:	2502      	movs	r5, #2
 8001400:	e7f4      	b.n	80013ec <HAL_ADCEx_Calibration_Start+0xb4>
 8001402:	bf00      	nop
 8001404:	20000008 	.word	0x20000008

08001408 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001408:	4a07      	ldr	r2, [pc, #28]	; (8001428 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800140a:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800140c:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800140e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001412:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001416:	041b      	lsls	r3, r3, #16
 8001418:	0c1b      	lsrs	r3, r3, #16
 800141a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800141e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8001422:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001424:	60d3      	str	r3, [r2, #12]
 8001426:	4770      	bx	lr
 8001428:	e000ed00 	.word	0xe000ed00

0800142c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800142c:	4b17      	ldr	r3, [pc, #92]	; (800148c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800142e:	b530      	push	{r4, r5, lr}
 8001430:	68dc      	ldr	r4, [r3, #12]
 8001432:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001436:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800143a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800143c:	2b04      	cmp	r3, #4
 800143e:	bf28      	it	cs
 8001440:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001442:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001444:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001448:	bf98      	it	ls
 800144a:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800144c:	fa05 f303 	lsl.w	r3, r5, r3
 8001450:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001454:	bf88      	it	hi
 8001456:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001458:	4019      	ands	r1, r3
 800145a:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800145c:	fa05 f404 	lsl.w	r4, r5, r4
 8001460:	3c01      	subs	r4, #1
 8001462:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8001464:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001466:	ea42 0201 	orr.w	r2, r2, r1
 800146a:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800146e:	bfaf      	iteee	ge
 8001470:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001474:	4b06      	ldrlt	r3, [pc, #24]	; (8001490 <HAL_NVIC_SetPriority+0x64>)
 8001476:	f000 000f 	andlt.w	r0, r0, #15
 800147a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800147c:	bfa5      	ittet	ge
 800147e:	b2d2      	uxtbge	r2, r2
 8001480:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001484:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001486:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800148a:	bd30      	pop	{r4, r5, pc}
 800148c:	e000ed00 	.word	0xe000ed00
 8001490:	e000ed14 	.word	0xe000ed14

08001494 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001494:	3801      	subs	r0, #1
 8001496:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800149a:	d20a      	bcs.n	80014b2 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800149c:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800149e:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014a0:	4a06      	ldr	r2, [pc, #24]	; (80014bc <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014a2:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014a4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014a8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014aa:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014ac:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80014b2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	e000e010 	.word	0xe000e010
 80014bc:	e000ed00 	.word	0xe000ed00

080014c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80014c4:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80014c6:	4616      	mov	r6, r2
 80014c8:	4b65      	ldr	r3, [pc, #404]	; (8001660 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014ca:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8001670 <HAL_GPIO_Init+0x1b0>
 80014ce:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8001674 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 80014d2:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014d6:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 80014d8:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014dc:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 80014e0:	45a0      	cmp	r8, r4
 80014e2:	d17f      	bne.n	80015e4 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 80014e4:	684d      	ldr	r5, [r1, #4]
 80014e6:	2d12      	cmp	r5, #18
 80014e8:	f000 80af 	beq.w	800164a <HAL_GPIO_Init+0x18a>
 80014ec:	f200 8088 	bhi.w	8001600 <HAL_GPIO_Init+0x140>
 80014f0:	2d02      	cmp	r5, #2
 80014f2:	f000 80a7 	beq.w	8001644 <HAL_GPIO_Init+0x184>
 80014f6:	d87c      	bhi.n	80015f2 <HAL_GPIO_Init+0x132>
 80014f8:	2d00      	cmp	r5, #0
 80014fa:	f000 808e 	beq.w	800161a <HAL_GPIO_Init+0x15a>
 80014fe:	2d01      	cmp	r5, #1
 8001500:	f000 809e 	beq.w	8001640 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001504:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001508:	2cff      	cmp	r4, #255	; 0xff
 800150a:	bf93      	iteet	ls
 800150c:	4682      	movls	sl, r0
 800150e:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8001512:	3d08      	subhi	r5, #8
 8001514:	f8d0 b000 	ldrls.w	fp, [r0]
 8001518:	bf92      	itee	ls
 800151a:	00b5      	lslls	r5, r6, #2
 800151c:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8001520:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001522:	fa09 f805 	lsl.w	r8, r9, r5
 8001526:	ea2b 0808 	bic.w	r8, fp, r8
 800152a:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800152e:	bf88      	it	hi
 8001530:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001534:	ea48 0505 	orr.w	r5, r8, r5
 8001538:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800153c:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8001540:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8001544:	d04e      	beq.n	80015e4 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001546:	4d47      	ldr	r5, [pc, #284]	; (8001664 <HAL_GPIO_Init+0x1a4>)
 8001548:	4f46      	ldr	r7, [pc, #280]	; (8001664 <HAL_GPIO_Init+0x1a4>)
 800154a:	69ad      	ldr	r5, [r5, #24]
 800154c:	f026 0803 	bic.w	r8, r6, #3
 8001550:	f045 0501 	orr.w	r5, r5, #1
 8001554:	61bd      	str	r5, [r7, #24]
 8001556:	69bd      	ldr	r5, [r7, #24]
 8001558:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 800155c:	f005 0501 	and.w	r5, r5, #1
 8001560:	9501      	str	r5, [sp, #4]
 8001562:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001566:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800156a:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800156c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8001570:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001574:	fa09 f90b 	lsl.w	r9, r9, fp
 8001578:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800157c:	4d3a      	ldr	r5, [pc, #232]	; (8001668 <HAL_GPIO_Init+0x1a8>)
 800157e:	42a8      	cmp	r0, r5
 8001580:	d068      	beq.n	8001654 <HAL_GPIO_Init+0x194>
 8001582:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001586:	42a8      	cmp	r0, r5
 8001588:	d066      	beq.n	8001658 <HAL_GPIO_Init+0x198>
 800158a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800158e:	42a8      	cmp	r0, r5
 8001590:	d064      	beq.n	800165c <HAL_GPIO_Init+0x19c>
 8001592:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001596:	42a8      	cmp	r0, r5
 8001598:	bf0c      	ite	eq
 800159a:	2503      	moveq	r5, #3
 800159c:	2504      	movne	r5, #4
 800159e:	fa05 f50b 	lsl.w	r5, r5, fp
 80015a2:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 80015a6:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015aa:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015ac:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80015b0:	bf14      	ite	ne
 80015b2:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015b4:	43a5      	biceq	r5, r4
 80015b6:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015b8:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015ba:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80015be:	bf14      	ite	ne
 80015c0:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015c2:	43a5      	biceq	r5, r4
 80015c4:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015c6:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015c8:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80015cc:	bf14      	ite	ne
 80015ce:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015d0:	43a5      	biceq	r5, r4
 80015d2:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015d4:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015d6:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80015da:	bf14      	ite	ne
 80015dc:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80015de:	ea25 0404 	biceq.w	r4, r5, r4
 80015e2:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80015e4:	3601      	adds	r6, #1
 80015e6:	2e10      	cmp	r6, #16
 80015e8:	f47f af73 	bne.w	80014d2 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 80015ec:	b003      	add	sp, #12
 80015ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 80015f2:	2d03      	cmp	r5, #3
 80015f4:	d022      	beq.n	800163c <HAL_GPIO_Init+0x17c>
 80015f6:	2d11      	cmp	r5, #17
 80015f8:	d184      	bne.n	8001504 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015fa:	68ca      	ldr	r2, [r1, #12]
 80015fc:	3204      	adds	r2, #4
          break;
 80015fe:	e781      	b.n	8001504 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8001600:	4f1a      	ldr	r7, [pc, #104]	; (800166c <HAL_GPIO_Init+0x1ac>)
 8001602:	42bd      	cmp	r5, r7
 8001604:	d009      	beq.n	800161a <HAL_GPIO_Init+0x15a>
 8001606:	d812      	bhi.n	800162e <HAL_GPIO_Init+0x16e>
 8001608:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8001678 <HAL_GPIO_Init+0x1b8>
 800160c:	454d      	cmp	r5, r9
 800160e:	d004      	beq.n	800161a <HAL_GPIO_Init+0x15a>
 8001610:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8001614:	454d      	cmp	r5, r9
 8001616:	f47f af75 	bne.w	8001504 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800161a:	688a      	ldr	r2, [r1, #8]
 800161c:	b1c2      	cbz	r2, 8001650 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800161e:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8001620:	bf0c      	ite	eq
 8001622:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8001626:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800162a:	2208      	movs	r2, #8
 800162c:	e76a      	b.n	8001504 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 800162e:	4575      	cmp	r5, lr
 8001630:	d0f3      	beq.n	800161a <HAL_GPIO_Init+0x15a>
 8001632:	4565      	cmp	r5, ip
 8001634:	d0f1      	beq.n	800161a <HAL_GPIO_Init+0x15a>
 8001636:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800167c <HAL_GPIO_Init+0x1bc>
 800163a:	e7eb      	b.n	8001614 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800163c:	2200      	movs	r2, #0
 800163e:	e761      	b.n	8001504 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001640:	68ca      	ldr	r2, [r1, #12]
          break;
 8001642:	e75f      	b.n	8001504 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001644:	68ca      	ldr	r2, [r1, #12]
 8001646:	3208      	adds	r2, #8
          break;
 8001648:	e75c      	b.n	8001504 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800164a:	68ca      	ldr	r2, [r1, #12]
 800164c:	320c      	adds	r2, #12
          break;
 800164e:	e759      	b.n	8001504 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001650:	2204      	movs	r2, #4
 8001652:	e757      	b.n	8001504 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001654:	2500      	movs	r5, #0
 8001656:	e7a2      	b.n	800159e <HAL_GPIO_Init+0xde>
 8001658:	2501      	movs	r5, #1
 800165a:	e7a0      	b.n	800159e <HAL_GPIO_Init+0xde>
 800165c:	2502      	movs	r5, #2
 800165e:	e79e      	b.n	800159e <HAL_GPIO_Init+0xde>
 8001660:	40010400 	.word	0x40010400
 8001664:	40021000 	.word	0x40021000
 8001668:	40010800 	.word	0x40010800
 800166c:	10210000 	.word	0x10210000
 8001670:	10310000 	.word	0x10310000
 8001674:	10320000 	.word	0x10320000
 8001678:	10110000 	.word	0x10110000
 800167c:	10220000 	.word	0x10220000

08001680 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001680:	6803      	ldr	r3, [r0, #0]
{
 8001682:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001686:	07db      	lsls	r3, r3, #31
{
 8001688:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800168a:	d410      	bmi.n	80016ae <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800168c:	682b      	ldr	r3, [r5, #0]
 800168e:	079f      	lsls	r7, r3, #30
 8001690:	d45e      	bmi.n	8001750 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001692:	682b      	ldr	r3, [r5, #0]
 8001694:	0719      	lsls	r1, r3, #28
 8001696:	f100 8095 	bmi.w	80017c4 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800169a:	682b      	ldr	r3, [r5, #0]
 800169c:	075a      	lsls	r2, r3, #29
 800169e:	f100 80bf 	bmi.w	8001820 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016a2:	69ea      	ldr	r2, [r5, #28]
 80016a4:	2a00      	cmp	r2, #0
 80016a6:	f040 812d 	bne.w	8001904 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80016aa:	2000      	movs	r0, #0
 80016ac:	e014      	b.n	80016d8 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80016ae:	4c90      	ldr	r4, [pc, #576]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 80016b0:	6863      	ldr	r3, [r4, #4]
 80016b2:	f003 030c 	and.w	r3, r3, #12
 80016b6:	2b04      	cmp	r3, #4
 80016b8:	d007      	beq.n	80016ca <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016ba:	6863      	ldr	r3, [r4, #4]
 80016bc:	f003 030c 	and.w	r3, r3, #12
 80016c0:	2b08      	cmp	r3, #8
 80016c2:	d10c      	bne.n	80016de <HAL_RCC_OscConfig+0x5e>
 80016c4:	6863      	ldr	r3, [r4, #4]
 80016c6:	03de      	lsls	r6, r3, #15
 80016c8:	d509      	bpl.n	80016de <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016ca:	6823      	ldr	r3, [r4, #0]
 80016cc:	039c      	lsls	r4, r3, #14
 80016ce:	d5dd      	bpl.n	800168c <HAL_RCC_OscConfig+0xc>
 80016d0:	686b      	ldr	r3, [r5, #4]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d1da      	bne.n	800168c <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80016d6:	2001      	movs	r0, #1
}
 80016d8:	b002      	add	sp, #8
 80016da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016de:	686b      	ldr	r3, [r5, #4]
 80016e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016e4:	d110      	bne.n	8001708 <HAL_RCC_OscConfig+0x88>
 80016e6:	6823      	ldr	r3, [r4, #0]
 80016e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016ec:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80016ee:	f7ff fba9 	bl	8000e44 <HAL_GetTick>
 80016f2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016f4:	6823      	ldr	r3, [r4, #0]
 80016f6:	0398      	lsls	r0, r3, #14
 80016f8:	d4c8      	bmi.n	800168c <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016fa:	f7ff fba3 	bl	8000e44 <HAL_GetTick>
 80016fe:	1b80      	subs	r0, r0, r6
 8001700:	2864      	cmp	r0, #100	; 0x64
 8001702:	d9f7      	bls.n	80016f4 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8001704:	2003      	movs	r0, #3
 8001706:	e7e7      	b.n	80016d8 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001708:	b99b      	cbnz	r3, 8001732 <HAL_RCC_OscConfig+0xb2>
 800170a:	6823      	ldr	r3, [r4, #0]
 800170c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001710:	6023      	str	r3, [r4, #0]
 8001712:	6823      	ldr	r3, [r4, #0]
 8001714:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001718:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800171a:	f7ff fb93 	bl	8000e44 <HAL_GetTick>
 800171e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001720:	6823      	ldr	r3, [r4, #0]
 8001722:	0399      	lsls	r1, r3, #14
 8001724:	d5b2      	bpl.n	800168c <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001726:	f7ff fb8d 	bl	8000e44 <HAL_GetTick>
 800172a:	1b80      	subs	r0, r0, r6
 800172c:	2864      	cmp	r0, #100	; 0x64
 800172e:	d9f7      	bls.n	8001720 <HAL_RCC_OscConfig+0xa0>
 8001730:	e7e8      	b.n	8001704 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001732:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001736:	6823      	ldr	r3, [r4, #0]
 8001738:	d103      	bne.n	8001742 <HAL_RCC_OscConfig+0xc2>
 800173a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800173e:	6023      	str	r3, [r4, #0]
 8001740:	e7d1      	b.n	80016e6 <HAL_RCC_OscConfig+0x66>
 8001742:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001746:	6023      	str	r3, [r4, #0]
 8001748:	6823      	ldr	r3, [r4, #0]
 800174a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800174e:	e7cd      	b.n	80016ec <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001750:	4c67      	ldr	r4, [pc, #412]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 8001752:	6863      	ldr	r3, [r4, #4]
 8001754:	f013 0f0c 	tst.w	r3, #12
 8001758:	d007      	beq.n	800176a <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800175a:	6863      	ldr	r3, [r4, #4]
 800175c:	f003 030c 	and.w	r3, r3, #12
 8001760:	2b08      	cmp	r3, #8
 8001762:	d110      	bne.n	8001786 <HAL_RCC_OscConfig+0x106>
 8001764:	6863      	ldr	r3, [r4, #4]
 8001766:	03da      	lsls	r2, r3, #15
 8001768:	d40d      	bmi.n	8001786 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800176a:	6823      	ldr	r3, [r4, #0]
 800176c:	079b      	lsls	r3, r3, #30
 800176e:	d502      	bpl.n	8001776 <HAL_RCC_OscConfig+0xf6>
 8001770:	692b      	ldr	r3, [r5, #16]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d1af      	bne.n	80016d6 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001776:	6823      	ldr	r3, [r4, #0]
 8001778:	696a      	ldr	r2, [r5, #20]
 800177a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800177e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001782:	6023      	str	r3, [r4, #0]
 8001784:	e785      	b.n	8001692 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001786:	692a      	ldr	r2, [r5, #16]
 8001788:	4b5a      	ldr	r3, [pc, #360]	; (80018f4 <HAL_RCC_OscConfig+0x274>)
 800178a:	b16a      	cbz	r2, 80017a8 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 800178c:	2201      	movs	r2, #1
 800178e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001790:	f7ff fb58 	bl	8000e44 <HAL_GetTick>
 8001794:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001796:	6823      	ldr	r3, [r4, #0]
 8001798:	079f      	lsls	r7, r3, #30
 800179a:	d4ec      	bmi.n	8001776 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800179c:	f7ff fb52 	bl	8000e44 <HAL_GetTick>
 80017a0:	1b80      	subs	r0, r0, r6
 80017a2:	2802      	cmp	r0, #2
 80017a4:	d9f7      	bls.n	8001796 <HAL_RCC_OscConfig+0x116>
 80017a6:	e7ad      	b.n	8001704 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80017a8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80017aa:	f7ff fb4b 	bl	8000e44 <HAL_GetTick>
 80017ae:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017b0:	6823      	ldr	r3, [r4, #0]
 80017b2:	0798      	lsls	r0, r3, #30
 80017b4:	f57f af6d 	bpl.w	8001692 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017b8:	f7ff fb44 	bl	8000e44 <HAL_GetTick>
 80017bc:	1b80      	subs	r0, r0, r6
 80017be:	2802      	cmp	r0, #2
 80017c0:	d9f6      	bls.n	80017b0 <HAL_RCC_OscConfig+0x130>
 80017c2:	e79f      	b.n	8001704 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017c4:	69aa      	ldr	r2, [r5, #24]
 80017c6:	4c4a      	ldr	r4, [pc, #296]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 80017c8:	4b4b      	ldr	r3, [pc, #300]	; (80018f8 <HAL_RCC_OscConfig+0x278>)
 80017ca:	b1da      	cbz	r2, 8001804 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 80017cc:	2201      	movs	r2, #1
 80017ce:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80017d0:	f7ff fb38 	bl	8000e44 <HAL_GetTick>
 80017d4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80017d8:	079b      	lsls	r3, r3, #30
 80017da:	d50d      	bpl.n	80017f8 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80017dc:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80017e0:	4b46      	ldr	r3, [pc, #280]	; (80018fc <HAL_RCC_OscConfig+0x27c>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80017e8:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80017ea:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80017ec:	9b01      	ldr	r3, [sp, #4]
 80017ee:	1e5a      	subs	r2, r3, #1
 80017f0:	9201      	str	r2, [sp, #4]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d1f9      	bne.n	80017ea <HAL_RCC_OscConfig+0x16a>
 80017f6:	e750      	b.n	800169a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017f8:	f7ff fb24 	bl	8000e44 <HAL_GetTick>
 80017fc:	1b80      	subs	r0, r0, r6
 80017fe:	2802      	cmp	r0, #2
 8001800:	d9e9      	bls.n	80017d6 <HAL_RCC_OscConfig+0x156>
 8001802:	e77f      	b.n	8001704 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8001804:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001806:	f7ff fb1d 	bl	8000e44 <HAL_GetTick>
 800180a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800180c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800180e:	079f      	lsls	r7, r3, #30
 8001810:	f57f af43 	bpl.w	800169a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001814:	f7ff fb16 	bl	8000e44 <HAL_GetTick>
 8001818:	1b80      	subs	r0, r0, r6
 800181a:	2802      	cmp	r0, #2
 800181c:	d9f6      	bls.n	800180c <HAL_RCC_OscConfig+0x18c>
 800181e:	e771      	b.n	8001704 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001820:	4c33      	ldr	r4, [pc, #204]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 8001822:	69e3      	ldr	r3, [r4, #28]
 8001824:	00d8      	lsls	r0, r3, #3
 8001826:	d424      	bmi.n	8001872 <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8001828:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800182a:	69e3      	ldr	r3, [r4, #28]
 800182c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001830:	61e3      	str	r3, [r4, #28]
 8001832:	69e3      	ldr	r3, [r4, #28]
 8001834:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001838:	9300      	str	r3, [sp, #0]
 800183a:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800183c:	4e30      	ldr	r6, [pc, #192]	; (8001900 <HAL_RCC_OscConfig+0x280>)
 800183e:	6833      	ldr	r3, [r6, #0]
 8001840:	05d9      	lsls	r1, r3, #23
 8001842:	d518      	bpl.n	8001876 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001844:	68eb      	ldr	r3, [r5, #12]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d126      	bne.n	8001898 <HAL_RCC_OscConfig+0x218>
 800184a:	6a23      	ldr	r3, [r4, #32]
 800184c:	f043 0301 	orr.w	r3, r3, #1
 8001850:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001852:	f7ff faf7 	bl	8000e44 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001856:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800185a:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800185c:	6a23      	ldr	r3, [r4, #32]
 800185e:	079b      	lsls	r3, r3, #30
 8001860:	d53f      	bpl.n	80018e2 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8001862:	2f00      	cmp	r7, #0
 8001864:	f43f af1d 	beq.w	80016a2 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001868:	69e3      	ldr	r3, [r4, #28]
 800186a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800186e:	61e3      	str	r3, [r4, #28]
 8001870:	e717      	b.n	80016a2 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8001872:	2700      	movs	r7, #0
 8001874:	e7e2      	b.n	800183c <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001876:	6833      	ldr	r3, [r6, #0]
 8001878:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800187c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800187e:	f7ff fae1 	bl	8000e44 <HAL_GetTick>
 8001882:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001884:	6833      	ldr	r3, [r6, #0]
 8001886:	05da      	lsls	r2, r3, #23
 8001888:	d4dc      	bmi.n	8001844 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800188a:	f7ff fadb 	bl	8000e44 <HAL_GetTick>
 800188e:	eba0 0008 	sub.w	r0, r0, r8
 8001892:	2864      	cmp	r0, #100	; 0x64
 8001894:	d9f6      	bls.n	8001884 <HAL_RCC_OscConfig+0x204>
 8001896:	e735      	b.n	8001704 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001898:	b9ab      	cbnz	r3, 80018c6 <HAL_RCC_OscConfig+0x246>
 800189a:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800189c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018a0:	f023 0301 	bic.w	r3, r3, #1
 80018a4:	6223      	str	r3, [r4, #32]
 80018a6:	6a23      	ldr	r3, [r4, #32]
 80018a8:	f023 0304 	bic.w	r3, r3, #4
 80018ac:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80018ae:	f7ff fac9 	bl	8000e44 <HAL_GetTick>
 80018b2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018b4:	6a23      	ldr	r3, [r4, #32]
 80018b6:	0798      	lsls	r0, r3, #30
 80018b8:	d5d3      	bpl.n	8001862 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018ba:	f7ff fac3 	bl	8000e44 <HAL_GetTick>
 80018be:	1b80      	subs	r0, r0, r6
 80018c0:	4540      	cmp	r0, r8
 80018c2:	d9f7      	bls.n	80018b4 <HAL_RCC_OscConfig+0x234>
 80018c4:	e71e      	b.n	8001704 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018c6:	2b05      	cmp	r3, #5
 80018c8:	6a23      	ldr	r3, [r4, #32]
 80018ca:	d103      	bne.n	80018d4 <HAL_RCC_OscConfig+0x254>
 80018cc:	f043 0304 	orr.w	r3, r3, #4
 80018d0:	6223      	str	r3, [r4, #32]
 80018d2:	e7ba      	b.n	800184a <HAL_RCC_OscConfig+0x1ca>
 80018d4:	f023 0301 	bic.w	r3, r3, #1
 80018d8:	6223      	str	r3, [r4, #32]
 80018da:	6a23      	ldr	r3, [r4, #32]
 80018dc:	f023 0304 	bic.w	r3, r3, #4
 80018e0:	e7b6      	b.n	8001850 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018e2:	f7ff faaf 	bl	8000e44 <HAL_GetTick>
 80018e6:	eba0 0008 	sub.w	r0, r0, r8
 80018ea:	42b0      	cmp	r0, r6
 80018ec:	d9b6      	bls.n	800185c <HAL_RCC_OscConfig+0x1dc>
 80018ee:	e709      	b.n	8001704 <HAL_RCC_OscConfig+0x84>
 80018f0:	40021000 	.word	0x40021000
 80018f4:	42420000 	.word	0x42420000
 80018f8:	42420480 	.word	0x42420480
 80018fc:	20000008 	.word	0x20000008
 8001900:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001904:	4c22      	ldr	r4, [pc, #136]	; (8001990 <HAL_RCC_OscConfig+0x310>)
 8001906:	6863      	ldr	r3, [r4, #4]
 8001908:	f003 030c 	and.w	r3, r3, #12
 800190c:	2b08      	cmp	r3, #8
 800190e:	f43f aee2 	beq.w	80016d6 <HAL_RCC_OscConfig+0x56>
 8001912:	2300      	movs	r3, #0
 8001914:	4e1f      	ldr	r6, [pc, #124]	; (8001994 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001916:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001918:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800191a:	d12b      	bne.n	8001974 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 800191c:	f7ff fa92 	bl	8000e44 <HAL_GetTick>
 8001920:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001922:	6823      	ldr	r3, [r4, #0]
 8001924:	0199      	lsls	r1, r3, #6
 8001926:	d41f      	bmi.n	8001968 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001928:	6a2b      	ldr	r3, [r5, #32]
 800192a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800192e:	d105      	bne.n	800193c <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001930:	6862      	ldr	r2, [r4, #4]
 8001932:	68a9      	ldr	r1, [r5, #8]
 8001934:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001938:	430a      	orrs	r2, r1
 800193a:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800193c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800193e:	6862      	ldr	r2, [r4, #4]
 8001940:	430b      	orrs	r3, r1
 8001942:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001946:	4313      	orrs	r3, r2
 8001948:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800194a:	2301      	movs	r3, #1
 800194c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800194e:	f7ff fa79 	bl	8000e44 <HAL_GetTick>
 8001952:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001954:	6823      	ldr	r3, [r4, #0]
 8001956:	019a      	lsls	r2, r3, #6
 8001958:	f53f aea7 	bmi.w	80016aa <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800195c:	f7ff fa72 	bl	8000e44 <HAL_GetTick>
 8001960:	1b40      	subs	r0, r0, r5
 8001962:	2802      	cmp	r0, #2
 8001964:	d9f6      	bls.n	8001954 <HAL_RCC_OscConfig+0x2d4>
 8001966:	e6cd      	b.n	8001704 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001968:	f7ff fa6c 	bl	8000e44 <HAL_GetTick>
 800196c:	1bc0      	subs	r0, r0, r7
 800196e:	2802      	cmp	r0, #2
 8001970:	d9d7      	bls.n	8001922 <HAL_RCC_OscConfig+0x2a2>
 8001972:	e6c7      	b.n	8001704 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8001974:	f7ff fa66 	bl	8000e44 <HAL_GetTick>
 8001978:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800197a:	6823      	ldr	r3, [r4, #0]
 800197c:	019b      	lsls	r3, r3, #6
 800197e:	f57f ae94 	bpl.w	80016aa <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001982:	f7ff fa5f 	bl	8000e44 <HAL_GetTick>
 8001986:	1b40      	subs	r0, r0, r5
 8001988:	2802      	cmp	r0, #2
 800198a:	d9f6      	bls.n	800197a <HAL_RCC_OscConfig+0x2fa>
 800198c:	e6ba      	b.n	8001704 <HAL_RCC_OscConfig+0x84>
 800198e:	bf00      	nop
 8001990:	40021000 	.word	0x40021000
 8001994:	42420060 	.word	0x42420060

08001998 <HAL_RCC_GetSysClockFreq>:
{
 8001998:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800199a:	4b19      	ldr	r3, [pc, #100]	; (8001a00 <HAL_RCC_GetSysClockFreq+0x68>)
{
 800199c:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800199e:	ac02      	add	r4, sp, #8
 80019a0:	f103 0510 	add.w	r5, r3, #16
 80019a4:	4622      	mov	r2, r4
 80019a6:	6818      	ldr	r0, [r3, #0]
 80019a8:	6859      	ldr	r1, [r3, #4]
 80019aa:	3308      	adds	r3, #8
 80019ac:	c203      	stmia	r2!, {r0, r1}
 80019ae:	42ab      	cmp	r3, r5
 80019b0:	4614      	mov	r4, r2
 80019b2:	d1f7      	bne.n	80019a4 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80019b4:	2301      	movs	r3, #1
 80019b6:	f88d 3004 	strb.w	r3, [sp, #4]
 80019ba:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 80019bc:	4911      	ldr	r1, [pc, #68]	; (8001a04 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80019be:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 80019c2:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80019c4:	f003 020c 	and.w	r2, r3, #12
 80019c8:	2a08      	cmp	r2, #8
 80019ca:	d117      	bne.n	80019fc <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80019cc:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80019d0:	a806      	add	r0, sp, #24
 80019d2:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80019d4:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80019d6:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80019da:	d50c      	bpl.n	80019f6 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80019dc:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80019de:	480a      	ldr	r0, [pc, #40]	; (8001a08 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80019e0:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80019e4:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80019e6:	aa06      	add	r2, sp, #24
 80019e8:	4413      	add	r3, r2
 80019ea:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80019ee:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80019f2:	b007      	add	sp, #28
 80019f4:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80019f6:	4805      	ldr	r0, [pc, #20]	; (8001a0c <HAL_RCC_GetSysClockFreq+0x74>)
 80019f8:	4350      	muls	r0, r2
 80019fa:	e7fa      	b.n	80019f2 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 80019fc:	4802      	ldr	r0, [pc, #8]	; (8001a08 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 80019fe:	e7f8      	b.n	80019f2 <HAL_RCC_GetSysClockFreq+0x5a>
 8001a00:	08004a70 	.word	0x08004a70
 8001a04:	40021000 	.word	0x40021000
 8001a08:	007a1200 	.word	0x007a1200
 8001a0c:	003d0900 	.word	0x003d0900

08001a10 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001a10:	4a54      	ldr	r2, [pc, #336]	; (8001b64 <HAL_RCC_ClockConfig+0x154>)
{
 8001a12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001a16:	6813      	ldr	r3, [r2, #0]
{
 8001a18:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001a1a:	f003 0307 	and.w	r3, r3, #7
 8001a1e:	428b      	cmp	r3, r1
{
 8001a20:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001a22:	d32a      	bcc.n	8001a7a <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a24:	6829      	ldr	r1, [r5, #0]
 8001a26:	078c      	lsls	r4, r1, #30
 8001a28:	d434      	bmi.n	8001a94 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a2a:	07ca      	lsls	r2, r1, #31
 8001a2c:	d447      	bmi.n	8001abe <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001a2e:	4a4d      	ldr	r2, [pc, #308]	; (8001b64 <HAL_RCC_ClockConfig+0x154>)
 8001a30:	6813      	ldr	r3, [r2, #0]
 8001a32:	f003 0307 	and.w	r3, r3, #7
 8001a36:	429e      	cmp	r6, r3
 8001a38:	f0c0 8082 	bcc.w	8001b40 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a3c:	682a      	ldr	r2, [r5, #0]
 8001a3e:	4c4a      	ldr	r4, [pc, #296]	; (8001b68 <HAL_RCC_ClockConfig+0x158>)
 8001a40:	f012 0f04 	tst.w	r2, #4
 8001a44:	f040 8087 	bne.w	8001b56 <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a48:	0713      	lsls	r3, r2, #28
 8001a4a:	d506      	bpl.n	8001a5a <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a4c:	6863      	ldr	r3, [r4, #4]
 8001a4e:	692a      	ldr	r2, [r5, #16]
 8001a50:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001a54:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001a58:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a5a:	f7ff ff9d 	bl	8001998 <HAL_RCC_GetSysClockFreq>
 8001a5e:	6863      	ldr	r3, [r4, #4]
 8001a60:	4a42      	ldr	r2, [pc, #264]	; (8001b6c <HAL_RCC_ClockConfig+0x15c>)
 8001a62:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001a66:	5cd3      	ldrb	r3, [r2, r3]
 8001a68:	40d8      	lsrs	r0, r3
 8001a6a:	4b41      	ldr	r3, [pc, #260]	; (8001b70 <HAL_RCC_ClockConfig+0x160>)
 8001a6c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001a6e:	2000      	movs	r0, #0
 8001a70:	f7ff f9a6 	bl	8000dc0 <HAL_InitTick>
  return HAL_OK;
 8001a74:	2000      	movs	r0, #0
}
 8001a76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a7a:	6813      	ldr	r3, [r2, #0]
 8001a7c:	f023 0307 	bic.w	r3, r3, #7
 8001a80:	430b      	orrs	r3, r1
 8001a82:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a84:	6813      	ldr	r3, [r2, #0]
 8001a86:	f003 0307 	and.w	r3, r3, #7
 8001a8a:	4299      	cmp	r1, r3
 8001a8c:	d0ca      	beq.n	8001a24 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8001a8e:	2001      	movs	r0, #1
 8001a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a94:	4b34      	ldr	r3, [pc, #208]	; (8001b68 <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a96:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a9a:	bf1e      	ittt	ne
 8001a9c:	685a      	ldrne	r2, [r3, #4]
 8001a9e:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8001aa2:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aa4:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001aa6:	bf42      	ittt	mi
 8001aa8:	685a      	ldrmi	r2, [r3, #4]
 8001aaa:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8001aae:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ab0:	685a      	ldr	r2, [r3, #4]
 8001ab2:	68a8      	ldr	r0, [r5, #8]
 8001ab4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001ab8:	4302      	orrs	r2, r0
 8001aba:	605a      	str	r2, [r3, #4]
 8001abc:	e7b5      	b.n	8001a2a <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001abe:	686a      	ldr	r2, [r5, #4]
 8001ac0:	4c29      	ldr	r4, [pc, #164]	; (8001b68 <HAL_RCC_ClockConfig+0x158>)
 8001ac2:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ac4:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ac6:	d11c      	bne.n	8001b02 <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ac8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001acc:	d0df      	beq.n	8001a8e <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ace:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ad0:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ad4:	f023 0303 	bic.w	r3, r3, #3
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8001adc:	f7ff f9b2 	bl	8000e44 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ae0:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8001ae2:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d114      	bne.n	8001b12 <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ae8:	6863      	ldr	r3, [r4, #4]
 8001aea:	f003 030c 	and.w	r3, r3, #12
 8001aee:	2b04      	cmp	r3, #4
 8001af0:	d09d      	beq.n	8001a2e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001af2:	f7ff f9a7 	bl	8000e44 <HAL_GetTick>
 8001af6:	1bc0      	subs	r0, r0, r7
 8001af8:	4540      	cmp	r0, r8
 8001afa:	d9f5      	bls.n	8001ae8 <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 8001afc:	2003      	movs	r0, #3
 8001afe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b02:	2a02      	cmp	r2, #2
 8001b04:	d102      	bne.n	8001b0c <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b06:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001b0a:	e7df      	b.n	8001acc <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b0c:	f013 0f02 	tst.w	r3, #2
 8001b10:	e7dc      	b.n	8001acc <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d10f      	bne.n	8001b36 <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b16:	6863      	ldr	r3, [r4, #4]
 8001b18:	f003 030c 	and.w	r3, r3, #12
 8001b1c:	2b08      	cmp	r3, #8
 8001b1e:	d086      	beq.n	8001a2e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b20:	f7ff f990 	bl	8000e44 <HAL_GetTick>
 8001b24:	1bc0      	subs	r0, r0, r7
 8001b26:	4540      	cmp	r0, r8
 8001b28:	d9f5      	bls.n	8001b16 <HAL_RCC_ClockConfig+0x106>
 8001b2a:	e7e7      	b.n	8001afc <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b2c:	f7ff f98a 	bl	8000e44 <HAL_GetTick>
 8001b30:	1bc0      	subs	r0, r0, r7
 8001b32:	4540      	cmp	r0, r8
 8001b34:	d8e2      	bhi.n	8001afc <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b36:	6863      	ldr	r3, [r4, #4]
 8001b38:	f013 0f0c 	tst.w	r3, #12
 8001b3c:	d1f6      	bne.n	8001b2c <HAL_RCC_ClockConfig+0x11c>
 8001b3e:	e776      	b.n	8001a2e <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b40:	6813      	ldr	r3, [r2, #0]
 8001b42:	f023 0307 	bic.w	r3, r3, #7
 8001b46:	4333      	orrs	r3, r6
 8001b48:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b4a:	6813      	ldr	r3, [r2, #0]
 8001b4c:	f003 0307 	and.w	r3, r3, #7
 8001b50:	429e      	cmp	r6, r3
 8001b52:	d19c      	bne.n	8001a8e <HAL_RCC_ClockConfig+0x7e>
 8001b54:	e772      	b.n	8001a3c <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b56:	6863      	ldr	r3, [r4, #4]
 8001b58:	68e9      	ldr	r1, [r5, #12]
 8001b5a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001b5e:	430b      	orrs	r3, r1
 8001b60:	6063      	str	r3, [r4, #4]
 8001b62:	e771      	b.n	8001a48 <HAL_RCC_ClockConfig+0x38>
 8001b64:	40022000 	.word	0x40022000
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	08004aa6 	.word	0x08004aa6
 8001b70:	20000008 	.word	0x20000008

08001b74 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b74:	4b04      	ldr	r3, [pc, #16]	; (8001b88 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001b76:	4a05      	ldr	r2, [pc, #20]	; (8001b8c <HAL_RCC_GetPCLK1Freq+0x18>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001b7e:	5cd3      	ldrb	r3, [r2, r3]
 8001b80:	4a03      	ldr	r2, [pc, #12]	; (8001b90 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001b82:	6810      	ldr	r0, [r2, #0]
}    
 8001b84:	40d8      	lsrs	r0, r3
 8001b86:	4770      	bx	lr
 8001b88:	40021000 	.word	0x40021000
 8001b8c:	08004ab6 	.word	0x08004ab6
 8001b90:	20000008 	.word	0x20000008

08001b94 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b94:	4b04      	ldr	r3, [pc, #16]	; (8001ba8 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001b96:	4a05      	ldr	r2, [pc, #20]	; (8001bac <HAL_RCC_GetPCLK2Freq+0x18>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001b9e:	5cd3      	ldrb	r3, [r2, r3]
 8001ba0:	4a03      	ldr	r2, [pc, #12]	; (8001bb0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001ba2:	6810      	ldr	r0, [r2, #0]
} 
 8001ba4:	40d8      	lsrs	r0, r3
 8001ba6:	4770      	bx	lr
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	08004ab6 	.word	0x08004ab6
 8001bb0:	20000008 	.word	0x20000008

08001bb4 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001bb4:	6803      	ldr	r3, [r0, #0]
{
 8001bb6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001bba:	07d9      	lsls	r1, r3, #31
{
 8001bbc:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001bbe:	d520      	bpl.n	8001c02 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bc0:	4c35      	ldr	r4, [pc, #212]	; (8001c98 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001bc2:	69e3      	ldr	r3, [r4, #28]
 8001bc4:	00da      	lsls	r2, r3, #3
 8001bc6:	d432      	bmi.n	8001c2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8001bc8:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 8001bca:	69e3      	ldr	r3, [r4, #28]
 8001bcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bd0:	61e3      	str	r3, [r4, #28]
 8001bd2:	69e3      	ldr	r3, [r4, #28]
 8001bd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd8:	9301      	str	r3, [sp, #4]
 8001bda:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bdc:	4e2f      	ldr	r6, [pc, #188]	; (8001c9c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8001bde:	6833      	ldr	r3, [r6, #0]
 8001be0:	05db      	lsls	r3, r3, #23
 8001be2:	d526      	bpl.n	8001c32 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001be4:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001be6:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001bea:	d136      	bne.n	8001c5a <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001bec:	6a23      	ldr	r3, [r4, #32]
 8001bee:	686a      	ldr	r2, [r5, #4]
 8001bf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001bf8:	b11f      	cbz	r7, 8001c02 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bfa:	69e3      	ldr	r3, [r4, #28]
 8001bfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c00:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001c02:	6828      	ldr	r0, [r5, #0]
 8001c04:	0783      	lsls	r3, r0, #30
 8001c06:	d506      	bpl.n	8001c16 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001c08:	4a23      	ldr	r2, [pc, #140]	; (8001c98 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001c0a:	68a9      	ldr	r1, [r5, #8]
 8001c0c:	6853      	ldr	r3, [r2, #4]
 8001c0e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001c12:	430b      	orrs	r3, r1
 8001c14:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001c16:	f010 0010 	ands.w	r0, r0, #16
 8001c1a:	d01b      	beq.n	8001c54 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001c1c:	4a1e      	ldr	r2, [pc, #120]	; (8001c98 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001c1e:	68e9      	ldr	r1, [r5, #12]
 8001c20:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001c22:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001c24:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001c28:	430b      	orrs	r3, r1
 8001c2a:	6053      	str	r3, [r2, #4]
 8001c2c:	e012      	b.n	8001c54 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8001c2e:	2700      	movs	r7, #0
 8001c30:	e7d4      	b.n	8001bdc <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c32:	6833      	ldr	r3, [r6, #0]
 8001c34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c38:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001c3a:	f7ff f903 	bl	8000e44 <HAL_GetTick>
 8001c3e:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c40:	6833      	ldr	r3, [r6, #0]
 8001c42:	05d8      	lsls	r0, r3, #23
 8001c44:	d4ce      	bmi.n	8001be4 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c46:	f7ff f8fd 	bl	8000e44 <HAL_GetTick>
 8001c4a:	eba0 0008 	sub.w	r0, r0, r8
 8001c4e:	2864      	cmp	r0, #100	; 0x64
 8001c50:	d9f6      	bls.n	8001c40 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8001c52:	2003      	movs	r0, #3
}
 8001c54:	b002      	add	sp, #8
 8001c56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001c5a:	686a      	ldr	r2, [r5, #4]
 8001c5c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d0c3      	beq.n	8001bec <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c64:	2001      	movs	r0, #1
 8001c66:	4a0e      	ldr	r2, [pc, #56]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001c68:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c6a:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c6c:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001c6e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c72:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8001c74:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001c76:	07d9      	lsls	r1, r3, #31
 8001c78:	d5b8      	bpl.n	8001bec <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8001c7a:	f7ff f8e3 	bl	8000e44 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c7e:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001c82:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c84:	6a23      	ldr	r3, [r4, #32]
 8001c86:	079a      	lsls	r2, r3, #30
 8001c88:	d4b0      	bmi.n	8001bec <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c8a:	f7ff f8db 	bl	8000e44 <HAL_GetTick>
 8001c8e:	1b80      	subs	r0, r0, r6
 8001c90:	4540      	cmp	r0, r8
 8001c92:	d9f7      	bls.n	8001c84 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8001c94:	e7dd      	b.n	8001c52 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8001c96:	bf00      	nop
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	40007000 	.word	0x40007000
 8001ca0:	42420440 	.word	0x42420440

08001ca4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001ca4:	b570      	push	{r4, r5, r6, lr}
 8001ca6:	4604      	mov	r4, r0
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001ca8:	4b35      	ldr	r3, [pc, #212]	; (8001d80 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
{
 8001caa:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001cac:	ad02      	add	r5, sp, #8
 8001cae:	f103 0610 	add.w	r6, r3, #16
 8001cb2:	462a      	mov	r2, r5
 8001cb4:	6818      	ldr	r0, [r3, #0]
 8001cb6:	6859      	ldr	r1, [r3, #4]
 8001cb8:	3308      	adds	r3, #8
 8001cba:	c203      	stmia	r2!, {r0, r1}
 8001cbc:	42b3      	cmp	r3, r6
 8001cbe:	4615      	mov	r5, r2
 8001cc0:	d1f7      	bne.n	8001cb2 <HAL_RCCEx_GetPeriphCLKFreq+0xe>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	f88d 3004 	strb.w	r3, [sp, #4]
 8001cc8:	2302      	movs	r3, #2
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 8001cca:	429c      	cmp	r4, r3
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001ccc:	f88d 3005 	strb.w	r3, [sp, #5]
  switch (PeriphClk)
 8001cd0:	d047      	beq.n	8001d62 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
 8001cd2:	2c10      	cmp	r4, #16
 8001cd4:	d017      	beq.n	8001d06 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 8001cd6:	2c01      	cmp	r4, #1
 8001cd8:	d14f      	bne.n	8001d7a <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001cda:	f240 3102 	movw	r1, #770	; 0x302
      temp_reg = RCC->BDCR;
 8001cde:	4a29      	ldr	r2, [pc, #164]	; (8001d84 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8001ce0:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001ce2:	4019      	ands	r1, r3
 8001ce4:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
 8001ce8:	d044      	beq.n	8001d74 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
      {
        frequency = LSE_VALUE;
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001cea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cf2:	d12d      	bne.n	8001d50 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
      {
        frequency = LSI_VALUE;
 8001cf4:	f649 4040 	movw	r0, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001cf8:	6a53      	ldr	r3, [r2, #36]	; 0x24
        frequency = LSI_VALUE;
 8001cfa:	f013 0f02 	tst.w	r3, #2
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
      {
        frequency = HSE_VALUE / 128U;
 8001cfe:	bf08      	it	eq
 8001d00:	2000      	moveq	r0, #0
    {
      break;
    }
  }
  return(frequency);
}
 8001d02:	b006      	add	sp, #24
 8001d04:	bd70      	pop	{r4, r5, r6, pc}
      temp_reg = RCC->CFGR;
 8001d06:	4b1f      	ldr	r3, [pc, #124]	; (8001d84 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8001d08:	6859      	ldr	r1, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLLON))
 8001d0a:	6818      	ldr	r0, [r3, #0]
 8001d0c:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8001d10:	d0f7      	beq.n	8001d02 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d12:	f3c1 4283 	ubfx	r2, r1, #18, #4
 8001d16:	a806      	add	r0, sp, #24
 8001d18:	4402      	add	r2, r0
 8001d1a:	f812 0c10 	ldrb.w	r0, [r2, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d1e:	03ca      	lsls	r2, r1, #15
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d20:	bf41      	itttt	mi
 8001d22:	685a      	ldrmi	r2, [r3, #4]
 8001d24:	a906      	addmi	r1, sp, #24
 8001d26:	f3c2 4240 	ubfxmi	r2, r2, #17, #1
 8001d2a:	1852      	addmi	r2, r2, r1
 8001d2c:	bf44      	itt	mi
 8001d2e:	f812 1c14 	ldrbmi.w	r1, [r2, #-20]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001d32:	4a15      	ldrmi	r2, [pc, #84]	; (8001d88 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001d34:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001d36:	bf4c      	ite	mi
 8001d38:	fbb2 f2f1 	udivmi	r2, r2, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d3c:	4a13      	ldrpl	r2, [pc, #76]	; (8001d8c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001d3e:	025b      	lsls	r3, r3, #9
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d40:	fb02 f000 	mul.w	r0, r2, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001d44:	d4dd      	bmi.n	8001d02 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          frequency = (pllclk * 2) / 3;
 8001d46:	2303      	movs	r3, #3
 8001d48:	0040      	lsls	r0, r0, #1
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8001d4a:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8001d4e:	e7d8      	b.n	8001d02 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8001d50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001d54:	d111      	bne.n	8001d7a <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8001d56:	6813      	ldr	r3, [r2, #0]
        frequency = HSE_VALUE / 128U;
 8001d58:	f24f 4024 	movw	r0, #62500	; 0xf424
 8001d5c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001d60:	e7cd      	b.n	8001cfe <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8001d62:	f7ff ff17 	bl	8001b94 <HAL_RCC_GetPCLK2Freq>
 8001d66:	4b07      	ldr	r3, [pc, #28]	; (8001d84 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8001d6e:	3301      	adds	r3, #1
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	e7ea      	b.n	8001d4a <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
        frequency = LSE_VALUE;
 8001d74:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001d78:	e7c3      	b.n	8001d02 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
        frequency = 0U;
 8001d7a:	2000      	movs	r0, #0
 8001d7c:	e7c1      	b.n	8001d02 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 8001d7e:	bf00      	nop
 8001d80:	08004a80 	.word	0x08004a80
 8001d84:	40021000 	.word	0x40021000
 8001d88:	007a1200 	.word	0x007a1200
 8001d8c:	003d0900 	.word	0x003d0900

08001d90 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d94:	6805      	ldr	r5, [r0, #0]
 8001d96:	68c2      	ldr	r2, [r0, #12]
 8001d98:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001d9a:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d9c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001da0:	4313      	orrs	r3, r2
 8001da2:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001da4:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 8001da6:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001da8:	430b      	orrs	r3, r1
 8001daa:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8001dac:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8001db0:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001db4:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8001db6:	4313      	orrs	r3, r2
 8001db8:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001dba:	696b      	ldr	r3, [r5, #20]
 8001dbc:	6982      	ldr	r2, [r0, #24]
 8001dbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8001dc6:	4b40      	ldr	r3, [pc, #256]	; (8001ec8 <UART_SetConfig+0x138>)
{
 8001dc8:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 8001dca:	429d      	cmp	r5, r3
 8001dcc:	f04f 0419 	mov.w	r4, #25
 8001dd0:	d146      	bne.n	8001e60 <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001dd2:	f7ff fedf 	bl	8001b94 <HAL_RCC_GetPCLK2Freq>
 8001dd6:	fb04 f300 	mul.w	r3, r4, r0
 8001dda:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8001dde:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001de2:	00b6      	lsls	r6, r6, #2
 8001de4:	fbb3 f3f6 	udiv	r3, r3, r6
 8001de8:	fbb3 f3f8 	udiv	r3, r3, r8
 8001dec:	011e      	lsls	r6, r3, #4
 8001dee:	f7ff fed1 	bl	8001b94 <HAL_RCC_GetPCLK2Freq>
 8001df2:	4360      	muls	r0, r4
 8001df4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	fbb0 f7f3 	udiv	r7, r0, r3
 8001dfe:	f7ff fec9 	bl	8001b94 <HAL_RCC_GetPCLK2Freq>
 8001e02:	4360      	muls	r0, r4
 8001e04:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e0e:	fbb3 f3f8 	udiv	r3, r3, r8
 8001e12:	fb08 7313 	mls	r3, r8, r3, r7
 8001e16:	011b      	lsls	r3, r3, #4
 8001e18:	3332      	adds	r3, #50	; 0x32
 8001e1a:	fbb3 f3f8 	udiv	r3, r3, r8
 8001e1e:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8001e22:	f7ff feb7 	bl	8001b94 <HAL_RCC_GetPCLK2Freq>
 8001e26:	4360      	muls	r0, r4
 8001e28:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8001e2c:	0092      	lsls	r2, r2, #2
 8001e2e:	fbb0 faf2 	udiv	sl, r0, r2
 8001e32:	f7ff feaf 	bl	8001b94 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001e36:	4360      	muls	r0, r4
 8001e38:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e42:	fbb3 f3f8 	udiv	r3, r3, r8
 8001e46:	fb08 a313 	mls	r3, r8, r3, sl
 8001e4a:	011b      	lsls	r3, r3, #4
 8001e4c:	3332      	adds	r3, #50	; 0x32
 8001e4e:	fbb3 f3f8 	udiv	r3, r3, r8
 8001e52:	f003 030f 	and.w	r3, r3, #15
 8001e56:	433b      	orrs	r3, r7
 8001e58:	4433      	add	r3, r6
 8001e5a:	60ab      	str	r3, [r5, #8]
 8001e5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e60:	f7ff fe88 	bl	8001b74 <HAL_RCC_GetPCLK1Freq>
 8001e64:	fb04 f300 	mul.w	r3, r4, r0
 8001e68:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8001e6c:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001e70:	00b6      	lsls	r6, r6, #2
 8001e72:	fbb3 f3f6 	udiv	r3, r3, r6
 8001e76:	fbb3 f3f8 	udiv	r3, r3, r8
 8001e7a:	011e      	lsls	r6, r3, #4
 8001e7c:	f7ff fe7a 	bl	8001b74 <HAL_RCC_GetPCLK1Freq>
 8001e80:	4360      	muls	r0, r4
 8001e82:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	fbb0 f7f3 	udiv	r7, r0, r3
 8001e8c:	f7ff fe72 	bl	8001b74 <HAL_RCC_GetPCLK1Freq>
 8001e90:	4360      	muls	r0, r4
 8001e92:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e9c:	fbb3 f3f8 	udiv	r3, r3, r8
 8001ea0:	fb08 7313 	mls	r3, r8, r3, r7
 8001ea4:	011b      	lsls	r3, r3, #4
 8001ea6:	3332      	adds	r3, #50	; 0x32
 8001ea8:	fbb3 f3f8 	udiv	r3, r3, r8
 8001eac:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8001eb0:	f7ff fe60 	bl	8001b74 <HAL_RCC_GetPCLK1Freq>
 8001eb4:	4360      	muls	r0, r4
 8001eb6:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8001eba:	0092      	lsls	r2, r2, #2
 8001ebc:	fbb0 faf2 	udiv	sl, r0, r2
 8001ec0:	f7ff fe58 	bl	8001b74 <HAL_RCC_GetPCLK1Freq>
 8001ec4:	e7b7      	b.n	8001e36 <UART_SetConfig+0xa6>
 8001ec6:	bf00      	nop
 8001ec8:	40013800 	.word	0x40013800

08001ecc <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8001ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ece:	4604      	mov	r4, r0
 8001ed0:	460e      	mov	r6, r1
 8001ed2:	4617      	mov	r7, r2
 8001ed4:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8001ed6:	6821      	ldr	r1, [r4, #0]
 8001ed8:	680b      	ldr	r3, [r1, #0]
 8001eda:	ea36 0303 	bics.w	r3, r6, r3
 8001ede:	d101      	bne.n	8001ee4 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8001ee0:	2000      	movs	r0, #0
}
 8001ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001ee4:	1c6b      	adds	r3, r5, #1
 8001ee6:	d0f7      	beq.n	8001ed8 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001ee8:	b995      	cbnz	r5, 8001f10 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001eea:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8001eec:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001eee:	68da      	ldr	r2, [r3, #12]
 8001ef0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001ef4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ef6:	695a      	ldr	r2, [r3, #20]
 8001ef8:	f022 0201 	bic.w	r2, r2, #1
 8001efc:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001efe:	2320      	movs	r3, #32
 8001f00:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001f04:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8001f08:	2300      	movs	r3, #0
 8001f0a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8001f0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001f10:	f7fe ff98 	bl	8000e44 <HAL_GetTick>
 8001f14:	1bc0      	subs	r0, r0, r7
 8001f16:	4285      	cmp	r5, r0
 8001f18:	d2dd      	bcs.n	8001ed6 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8001f1a:	e7e6      	b.n	8001eea <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08001f1c <HAL_UART_Init>:
{
 8001f1c:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001f1e:	4604      	mov	r4, r0
 8001f20:	b340      	cbz	r0, 8001f74 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001f22:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001f26:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001f2a:	b91b      	cbnz	r3, 8001f34 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001f2c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001f30:	f000 f9e6 	bl	8002300 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001f34:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001f36:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001f38:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001f3c:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8001f3e:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8001f40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001f44:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001f46:	f7ff ff23 	bl	8001d90 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f4a:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f4c:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f4e:	691a      	ldr	r2, [r3, #16]
 8001f50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f56:	695a      	ldr	r2, [r3, #20]
 8001f58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f5c:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001f5e:	68da      	ldr	r2, [r3, #12]
 8001f60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f64:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 8001f66:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f68:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001f6a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001f6e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001f72:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001f74:	2001      	movs	r0, #1
}
 8001f76:	bd10      	pop	{r4, pc}

08001f78 <HAL_UART_Transmit>:
{
 8001f78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f7c:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8001f7e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8001f82:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_READY)
 8001f84:	2b20      	cmp	r3, #32
{
 8001f86:	460d      	mov	r5, r1
 8001f88:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8001f8a:	d14e      	bne.n	800202a <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0U))
 8001f8c:	2900      	cmp	r1, #0
 8001f8e:	d049      	beq.n	8002024 <HAL_UART_Transmit+0xac>
 8001f90:	2a00      	cmp	r2, #0
 8001f92:	d047      	beq.n	8002024 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8001f94:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d046      	beq.n	800202a <HAL_UART_Transmit+0xb2>
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001fa6:	2321      	movs	r3, #33	; 0x21
 8001fa8:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001fac:	f7fe ff4a 	bl	8000e44 <HAL_GetTick>
 8001fb0:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 8001fb2:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8001fb6:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8001fba:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	b96b      	cbnz	r3, 8001fdc <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001fc0:	463b      	mov	r3, r7
 8001fc2:	4632      	mov	r2, r6
 8001fc4:	2140      	movs	r1, #64	; 0x40
 8001fc6:	4620      	mov	r0, r4
 8001fc8:	f7ff ff80 	bl	8001ecc <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001fcc:	b9a8      	cbnz	r0, 8001ffa <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8001fce:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8001fd0:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8001fd4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8001fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8001fdc:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001fde:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8001fe0:	3b01      	subs	r3, #1
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001fe6:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001fe8:	2180      	movs	r1, #128	; 0x80
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001fea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001fee:	4620      	mov	r0, r4
 8001ff0:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001ff2:	d10e      	bne.n	8002012 <HAL_UART_Transmit+0x9a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ff4:	f7ff ff6a 	bl	8001ecc <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001ff8:	b110      	cbz	r0, 8002000 <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 8001ffa:	2003      	movs	r0, #3
 8001ffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002000:	882b      	ldrh	r3, [r5, #0]
 8002002:	6822      	ldr	r2, [r4, #0]
 8002004:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002008:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 800200a:	6923      	ldr	r3, [r4, #16]
 800200c:	b943      	cbnz	r3, 8002020 <HAL_UART_Transmit+0xa8>
          pData +=2U;
 800200e:	3502      	adds	r5, #2
 8002010:	e7d3      	b.n	8001fba <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002012:	f7ff ff5b 	bl	8001ecc <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002016:	2800      	cmp	r0, #0
 8002018:	d1ef      	bne.n	8001ffa <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800201a:	6823      	ldr	r3, [r4, #0]
 800201c:	782a      	ldrb	r2, [r5, #0]
 800201e:	605a      	str	r2, [r3, #4]
 8002020:	3501      	adds	r5, #1
 8002022:	e7ca      	b.n	8001fba <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8002024:	2001      	movs	r0, #1
 8002026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800202a:	2002      	movs	r0, #2
}
 800202c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002030 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002030:	2228      	movs	r2, #40	; 0x28
{
 8002032:	b510      	push	{r4, lr}
 8002034:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002036:	eb0d 0002 	add.w	r0, sp, r2
 800203a:	2100      	movs	r1, #0
 800203c:	f000 fa36 	bl	80024ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002040:	2214      	movs	r2, #20
 8002042:	2100      	movs	r1, #0
 8002044:	eb0d 0002 	add.w	r0, sp, r2
 8002048:	f000 fa30 	bl	80024ac <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800204c:	2100      	movs	r1, #0
 800204e:	2210      	movs	r2, #16
 8002050:	a801      	add	r0, sp, #4
 8002052:	f000 fa2b 	bl	80024ac <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002056:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800205a:	2402      	movs	r4, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800205c:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800205e:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002060:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002062:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002066:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002068:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800206a:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800206c:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800206e:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002070:	f7ff fb06 	bl	8001680 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002074:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002076:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800207a:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800207c:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800207e:	4621      	mov	r1, r4
 8002080:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002082:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002084:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002086:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002088:	9406      	str	r4, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800208a:	f7ff fcc1 	bl	8001a10 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800208e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002092:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002094:	9401      	str	r4, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002096:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002098:	f7ff fd8c 	bl	8001bb4 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 800209c:	b014      	add	sp, #80	; 0x50
 800209e:	bd10      	pop	{r4, pc}

080020a0 <main>:
{
 80020a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	  float tr = 4095.0 / adc - 1;
 80020a4:	f20f 1970 	addw	r9, pc, #368	; 0x170
 80020a8:	e9d9 8900 	ldrd	r8, r9, [r9]
{
 80020ac:	b096      	sub	sp, #88	; 0x58
  HAL_Init();
 80020ae:	f7fe feab 	bl	8000e08 <HAL_Init>
  SystemClock_Config();
 80020b2:	f7ff ffbd 	bl	8002030 <SystemClock_Config>
  */
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020b6:	4b60      	ldr	r3, [pc, #384]	; (8002238 <main+0x198>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80020b8:	2500      	movs	r5, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020ba:	699a      	ldr	r2, [r3, #24]
  huart1.Instance = USART1;
 80020bc:	485f      	ldr	r0, [pc, #380]	; (800223c <main+0x19c>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020be:	f042 0220 	orr.w	r2, r2, #32
 80020c2:	619a      	str	r2, [r3, #24]
 80020c4:	699a      	ldr	r2, [r3, #24]
  hadc1.Instance = ADC1;
 80020c6:	4c5e      	ldr	r4, [pc, #376]	; (8002240 <main+0x1a0>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020c8:	f002 0220 	and.w	r2, r2, #32
 80020cc:	9204      	str	r2, [sp, #16]
 80020ce:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020d0:	699a      	ldr	r2, [r3, #24]
  hadc1.Init.NbrOfConversion = 1;
 80020d2:	2601      	movs	r6, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020d4:	f042 0204 	orr.w	r2, r2, #4
 80020d8:	619a      	str	r2, [r3, #24]
 80020da:	699b      	ldr	r3, [r3, #24]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80020dc:	4a59      	ldr	r2, [pc, #356]	; (8002244 <main+0x1a4>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020de:	f003 0304 	and.w	r3, r3, #4
 80020e2:	9305      	str	r3, [sp, #20]
 80020e4:	9b05      	ldr	r3, [sp, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80020e6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80020ea:	e880 002c 	stmia.w	r0, {r2, r3, r5}
  huart1.Init.Mode = UART_MODE_TX_RX;
 80020ee:	230c      	movs	r3, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 80020f0:	60c5      	str	r5, [r0, #12]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80020f2:	6143      	str	r3, [r0, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 80020f4:	6105      	str	r5, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020f6:	6185      	str	r5, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80020f8:	61c5      	str	r5, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80020fa:	f7ff ff0f 	bl	8001f1c <HAL_UART_Init>
  hadc1.Instance = ADC1;
 80020fe:	4b52      	ldr	r3, [pc, #328]	; (8002248 <main+0x1a8>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002100:	4620      	mov	r0, r4
  hadc1.Instance = ADC1;
 8002102:	6023      	str	r3, [r4, #0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002104:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  ADC_ChannelConfTypeDef sConfig = {0};
 8002108:	9506      	str	r5, [sp, #24]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800210a:	61e3      	str	r3, [r4, #28]
  ADC_ChannelConfTypeDef sConfig = {0};
 800210c:	9507      	str	r5, [sp, #28]
 800210e:	9508      	str	r5, [sp, #32]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002110:	60a5      	str	r5, [r4, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002112:	60e5      	str	r5, [r4, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002114:	6165      	str	r5, [r4, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002116:	6065      	str	r5, [r4, #4]
  hadc1.Init.NbrOfConversion = 1;
 8002118:	6126      	str	r6, [r4, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800211a:	f7ff f88d 	bl	8001238 <HAL_ADC_Init>
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800211e:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002120:	a906      	add	r1, sp, #24
 8002122:	4620      	mov	r0, r4
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8002124:	9308      	str	r3, [sp, #32]
  sConfig.Channel = ADC_CHANNEL_0;
 8002126:	9506      	str	r5, [sp, #24]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002128:	9607      	str	r6, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800212a:	f7fe ff45 	bl	8000fb8 <HAL_ADC_ConfigChannel>
  HAL_ADCEx_Calibration_Start(&hadc1);
 800212e:	4620      	mov	r0, r4
 8002130:	f7ff f902 	bl	8001338 <HAL_ADCEx_Calibration_Start>
	  HAL_ADC_Start(&hadc1); // запускаем преобразование сигнала АЦП
 8002134:	4620      	mov	r0, r4
 8002136:	f7fe fffb 	bl	8001130 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 100); // ожидаем окончания преобразования
 800213a:	2164      	movs	r1, #100	; 0x64
 800213c:	4620      	mov	r0, r4
 800213e:	f7fe fe99 	bl	8000e74 <HAL_ADC_PollForConversion>
	  uint16_t adc = HAL_ADC_GetValue(&hadc1); // читаем полученное значение в переменную adc
 8002142:	4620      	mov	r0, r4
 8002144:	f7fe ff34 	bl	8000fb0 <HAL_ADC_GetValue>
	  float tr = 4095.0 / adc - 1;
 8002148:	b285      	uxth	r5, r0
 800214a:	4628      	mov	r0, r5
 800214c:	f7fe f95a 	bl	8000404 <__aeabi_i2d>
 8002150:	4602      	mov	r2, r0
 8002152:	460b      	mov	r3, r1
 8002154:	4640      	mov	r0, r8
 8002156:	4649      	mov	r1, r9
 8002158:	f7fe fae4 	bl	8000724 <__aeabi_ddiv>
 800215c:	2200      	movs	r2, #0
 800215e:	4b3b      	ldr	r3, [pc, #236]	; (800224c <main+0x1ac>)
 8002160:	f7fe f802 	bl	8000168 <__aeabi_dsub>
 8002164:	f7fe fc8c 	bl	8000a80 <__aeabi_d2f>
	  tr = MY_RESISTOR / tr;
 8002168:	4601      	mov	r1, r0
 800216a:	4839      	ldr	r0, [pc, #228]	; (8002250 <main+0x1b0>)
 800216c:	f7fe fd8c 	bl	8000c88 <__aeabi_fdiv>
	  stein_hart = tr / THERMISTOR_R;           // (R/Ro)
 8002170:	4938      	ldr	r1, [pc, #224]	; (8002254 <main+0x1b4>)
	  tr = MY_RESISTOR / tr;
 8002172:	4682      	mov	sl, r0
	  stein_hart = tr / THERMISTOR_R;           // (R/Ro)
 8002174:	f7fe fd88 	bl	8000c88 <__aeabi_fdiv>
	  stein_hart = log(stein_hart);             // ln(R/Ro)
 8002178:	f7fe f956 	bl	8000428 <__aeabi_f2d>
 800217c:	f002 fa16 	bl	80045ac <log>
 8002180:	f7fe fc7e 	bl	8000a80 <__aeabi_d2f>
	  stein_hart /= B_PARAM;                    // 1/B_PARAM * ln(R/Ro)
 8002184:	4934      	ldr	r1, [pc, #208]	; (8002258 <main+0x1b8>)
 8002186:	f7fe fd7f 	bl	8000c88 <__aeabi_fdiv>
	  stein_hart += 1.0 / (NOMINAL_T + 273.15); // + (1/To)
 800218a:	f7fe f94d 	bl	8000428 <__aeabi_f2d>
 800218e:	a324      	add	r3, pc, #144	; (adr r3, 8002220 <main+0x180>)
 8002190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002194:	f7fd ffea 	bl	800016c <__adddf3>
 8002198:	f7fe fc72 	bl	8000a80 <__aeabi_d2f>
	  stein_hart = 1.0 / stein_hart;            // Invert
 800219c:	4601      	mov	r1, r0
 800219e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80021a2:	f7fe fd71 	bl	8000c88 <__aeabi_fdiv>
	  stein_hart -= 273.15;
 80021a6:	f7fe f93f 	bl	8000428 <__aeabi_f2d>
 80021aa:	a31f      	add	r3, pc, #124	; (adr r3, 8002228 <main+0x188>)
 80021ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021b0:	f7fd ffda 	bl	8000168 <__aeabi_dsub>
 80021b4:	f7fe fc64 	bl	8000a80 <__aeabi_d2f>
	  stein_hart = stein_hart * 1.08; // моя коррекция (для высоких температур)
 80021b8:	f7fe f936 	bl	8000428 <__aeabi_f2d>
 80021bc:	a31c      	add	r3, pc, #112	; (adr r3, 8002230 <main+0x190>)
 80021be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c2:	f7fe f985 	bl	80004d0 <__aeabi_dmul>
 80021c6:	4606      	mov	r6, r0
 80021c8:	460f      	mov	r7, r1
	  char trans_str[64] = {0,};
 80021ca:	2240      	movs	r2, #64	; 0x40
 80021cc:	2100      	movs	r1, #0
 80021ce:	a806      	add	r0, sp, #24
 80021d0:	f000 f96c 	bl	80024ac <memset>
	  stein_hart = stein_hart * 1.08; // моя коррекция (для высоких температур)
 80021d4:	4639      	mov	r1, r7
 80021d6:	4630      	mov	r0, r6
 80021d8:	f7fe fc52 	bl	8000a80 <__aeabi_d2f>
	  snprintf(trans_str, 64, "ADC %d R %.2f T %.2f\n", adc, tr, stein_hart); // значение АЦП, сопротивление термистора, температура
 80021dc:	f7fe f924 	bl	8000428 <__aeabi_f2d>
 80021e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80021e4:	4650      	mov	r0, sl
 80021e6:	f7fe f91f 	bl	8000428 <__aeabi_f2d>
 80021ea:	462b      	mov	r3, r5
 80021ec:	e9cd 0100 	strd	r0, r1, [sp]
 80021f0:	4a1a      	ldr	r2, [pc, #104]	; (800225c <main+0x1bc>)
 80021f2:	2140      	movs	r1, #64	; 0x40
 80021f4:	a806      	add	r0, sp, #24
 80021f6:	f000 fdc3 	bl	8002d80 <sniprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*)trans_str, strlen(trans_str), 1000);
 80021fa:	a806      	add	r0, sp, #24
 80021fc:	f7fd ffa8 	bl	8000150 <strlen>
 8002200:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002204:	b282      	uxth	r2, r0
 8002206:	a906      	add	r1, sp, #24
 8002208:	480c      	ldr	r0, [pc, #48]	; (800223c <main+0x19c>)
 800220a:	f7ff feb5 	bl	8001f78 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 800220e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002212:	f7fe fe1d 	bl	8000e50 <HAL_Delay>
 8002216:	e78d      	b.n	8002134 <main+0x94>
 8002218:	00000000 	.word	0x00000000
 800221c:	40affe00 	.word	0x40affe00
 8002220:	dcb5db83 	.word	0xdcb5db83
 8002224:	3f6b79e1 	.word	0x3f6b79e1
 8002228:	66666666 	.word	0x66666666
 800222c:	40711266 	.word	0x40711266
 8002230:	147ae148 	.word	0x147ae148
 8002234:	3ff147ae 	.word	0x3ff147ae
 8002238:	40021000 	.word	0x40021000
 800223c:	2000023c 	.word	0x2000023c
 8002240:	2000020c 	.word	0x2000020c
 8002244:	40013800 	.word	0x40013800
 8002248:	40012400 	.word	0x40012400
 800224c:	3ff00000 	.word	0x3ff00000
 8002250:	4590b000 	.word	0x4590b000
 8002254:	4592e000 	.word	0x4592e000
 8002258:	4576e000 	.word	0x4576e000
 800225c:	08004a90 	.word	0x08004a90

08002260 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002260:	4b0e      	ldr	r3, [pc, #56]	; (800229c <HAL_MspInit+0x3c>)
{
 8002262:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002264:	699a      	ldr	r2, [r3, #24]
 8002266:	f042 0201 	orr.w	r2, r2, #1
 800226a:	619a      	str	r2, [r3, #24]
 800226c:	699a      	ldr	r2, [r3, #24]
 800226e:	f002 0201 	and.w	r2, r2, #1
 8002272:	9200      	str	r2, [sp, #0]
 8002274:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002276:	69da      	ldr	r2, [r3, #28]
 8002278:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800227c:	61da      	str	r2, [r3, #28]
 800227e:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002280:	4a07      	ldr	r2, [pc, #28]	; (80022a0 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002286:	9301      	str	r3, [sp, #4]
 8002288:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800228a:	6853      	ldr	r3, [r2, #4]
 800228c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002290:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002294:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002296:	b002      	add	sp, #8
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	40021000 	.word	0x40021000
 80022a0:	40010000 	.word	0x40010000

080022a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80022a4:	b510      	push	{r4, lr}
 80022a6:	4604      	mov	r4, r0
 80022a8:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022aa:	2210      	movs	r2, #16
 80022ac:	2100      	movs	r1, #0
 80022ae:	a802      	add	r0, sp, #8
 80022b0:	f000 f8fc 	bl	80024ac <memset>
  if(hadc->Instance==ADC1)
 80022b4:	6822      	ldr	r2, [r4, #0]
 80022b6:	4b10      	ldr	r3, [pc, #64]	; (80022f8 <HAL_ADC_MspInit+0x54>)
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d11b      	bne.n	80022f4 <HAL_ADC_MspInit+0x50>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80022bc:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 80022c0:	699a      	ldr	r2, [r3, #24]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022c2:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 80022c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022c8:	619a      	str	r2, [r3, #24]
 80022ca:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022cc:	480b      	ldr	r0, [pc, #44]	; (80022fc <HAL_ADC_MspInit+0x58>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80022ce:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80022d2:	9200      	str	r2, [sp, #0]
 80022d4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022d6:	699a      	ldr	r2, [r3, #24]
 80022d8:	f042 0204 	orr.w	r2, r2, #4
 80022dc:	619a      	str	r2, [r3, #24]
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	f003 0304 	and.w	r3, r3, #4
 80022e4:	9301      	str	r3, [sp, #4]
 80022e6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80022e8:	2301      	movs	r3, #1
 80022ea:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022ec:	2303      	movs	r3, #3
 80022ee:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022f0:	f7ff f8e6 	bl	80014c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80022f4:	b006      	add	sp, #24
 80022f6:	bd10      	pop	{r4, pc}
 80022f8:	40012400 	.word	0x40012400
 80022fc:	40010800 	.word	0x40010800

08002300 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002300:	b510      	push	{r4, lr}
 8002302:	4604      	mov	r4, r0
 8002304:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002306:	2210      	movs	r2, #16
 8002308:	2100      	movs	r1, #0
 800230a:	a802      	add	r0, sp, #8
 800230c:	f000 f8ce 	bl	80024ac <memset>
  if(huart->Instance==USART1)
 8002310:	6822      	ldr	r2, [r4, #0]
 8002312:	4b17      	ldr	r3, [pc, #92]	; (8002370 <HAL_UART_MspInit+0x70>)
 8002314:	429a      	cmp	r2, r3
 8002316:	d128      	bne.n	800236a <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002318:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 800231c:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800231e:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8002320:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002324:	619a      	str	r2, [r3, #24]
 8002326:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002328:	4812      	ldr	r0, [pc, #72]	; (8002374 <HAL_UART_MspInit+0x74>)
    __HAL_RCC_USART1_CLK_ENABLE();
 800232a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800232e:	9200      	str	r2, [sp, #0]
 8002330:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002332:	699a      	ldr	r2, [r3, #24]
 8002334:	f042 0204 	orr.w	r2, r2, #4
 8002338:	619a      	str	r2, [r3, #24]
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	f003 0304 	and.w	r3, r3, #4
 8002340:	9301      	str	r3, [sp, #4]
 8002342:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002344:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002348:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800234a:	2302      	movs	r3, #2
 800234c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800234e:	2303      	movs	r3, #3
 8002350:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002352:	f7ff f8b5 	bl	80014c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002356:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800235a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800235c:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800235e:	a902      	add	r1, sp, #8
 8002360:	4804      	ldr	r0, [pc, #16]	; (8002374 <HAL_UART_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002362:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002364:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002366:	f7ff f8ab 	bl	80014c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800236a:	b006      	add	sp, #24
 800236c:	bd10      	pop	{r4, pc}
 800236e:	bf00      	nop
 8002370:	40013800 	.word	0x40013800
 8002374:	40010800 	.word	0x40010800

08002378 <NMI_Handler>:
 8002378:	4770      	bx	lr

0800237a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800237a:	e7fe      	b.n	800237a <HardFault_Handler>

0800237c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800237c:	e7fe      	b.n	800237c <MemManage_Handler>

0800237e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800237e:	e7fe      	b.n	800237e <BusFault_Handler>

08002380 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002380:	e7fe      	b.n	8002380 <UsageFault_Handler>

08002382 <SVC_Handler>:
 8002382:	4770      	bx	lr

08002384 <DebugMon_Handler>:
 8002384:	4770      	bx	lr

08002386 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002386:	4770      	bx	lr

08002388 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002388:	f7fe bd50 	b.w	8000e2c <HAL_IncTick>

0800238c <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 800238c:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800238e:	4b0a      	ldr	r3, [pc, #40]	; (80023b8 <_sbrk+0x2c>)
{
 8002390:	4602      	mov	r2, r0
	if (heap_end == 0)
 8002392:	6819      	ldr	r1, [r3, #0]
 8002394:	b909      	cbnz	r1, 800239a <_sbrk+0xe>
		heap_end = &end;
 8002396:	4909      	ldr	r1, [pc, #36]	; (80023bc <_sbrk+0x30>)
 8002398:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 800239a:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 800239c:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 800239e:	4402      	add	r2, r0
 80023a0:	428a      	cmp	r2, r1
 80023a2:	d906      	bls.n	80023b2 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80023a4:	f000 f858 	bl	8002458 <__errno>
 80023a8:	230c      	movs	r3, #12
 80023aa:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80023ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80023b0:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 80023b2:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 80023b4:	bd08      	pop	{r3, pc}
 80023b6:	bf00      	nop
 80023b8:	200001fc 	.word	0x200001fc
 80023bc:	20000280 	.word	0x20000280

080023c0 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80023c0:	4b0f      	ldr	r3, [pc, #60]	; (8002400 <SystemInit+0x40>)
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	f042 0201 	orr.w	r2, r2, #1
 80023c8:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80023ca:	6859      	ldr	r1, [r3, #4]
 80023cc:	4a0d      	ldr	r2, [pc, #52]	; (8002404 <SystemInit+0x44>)
 80023ce:	400a      	ands	r2, r1
 80023d0:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80023d8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80023dc:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80023e4:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80023e6:	685a      	ldr	r2, [r3, #4]
 80023e8:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80023ec:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80023ee:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80023f2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80023f4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80023f8:	4b03      	ldr	r3, [pc, #12]	; (8002408 <SystemInit+0x48>)
 80023fa:	609a      	str	r2, [r3, #8]
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	40021000 	.word	0x40021000
 8002404:	f8ff0000 	.word	0xf8ff0000
 8002408:	e000ed00 	.word	0xe000ed00

0800240c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800240c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800240e:	e003      	b.n	8002418 <LoopCopyDataInit>

08002410 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002410:	4b0b      	ldr	r3, [pc, #44]	; (8002440 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002412:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002414:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002416:	3104      	adds	r1, #4

08002418 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002418:	480a      	ldr	r0, [pc, #40]	; (8002444 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800241a:	4b0b      	ldr	r3, [pc, #44]	; (8002448 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800241c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800241e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002420:	d3f6      	bcc.n	8002410 <CopyDataInit>
  ldr r2, =_sbss
 8002422:	4a0a      	ldr	r2, [pc, #40]	; (800244c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002424:	e002      	b.n	800242c <LoopFillZerobss>

08002426 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002426:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002428:	f842 3b04 	str.w	r3, [r2], #4

0800242c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800242c:	4b08      	ldr	r3, [pc, #32]	; (8002450 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800242e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002430:	d3f9      	bcc.n	8002426 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002432:	f7ff ffc5 	bl	80023c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002436:	f000 f815 	bl	8002464 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800243a:	f7ff fe31 	bl	80020a0 <main>
  bx lr
 800243e:	4770      	bx	lr
  ldr r3, =_sidata
 8002440:	08004d24 	.word	0x08004d24
  ldr r0, =_sdata
 8002444:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002448:	200001e0 	.word	0x200001e0
  ldr r2, =_sbss
 800244c:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 8002450:	20000280 	.word	0x20000280

08002454 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002454:	e7fe      	b.n	8002454 <ADC1_2_IRQHandler>
	...

08002458 <__errno>:
 8002458:	4b01      	ldr	r3, [pc, #4]	; (8002460 <__errno+0x8>)
 800245a:	6818      	ldr	r0, [r3, #0]
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	2000000c 	.word	0x2000000c

08002464 <__libc_init_array>:
 8002464:	b570      	push	{r4, r5, r6, lr}
 8002466:	2500      	movs	r5, #0
 8002468:	4e0c      	ldr	r6, [pc, #48]	; (800249c <__libc_init_array+0x38>)
 800246a:	4c0d      	ldr	r4, [pc, #52]	; (80024a0 <__libc_init_array+0x3c>)
 800246c:	1ba4      	subs	r4, r4, r6
 800246e:	10a4      	asrs	r4, r4, #2
 8002470:	42a5      	cmp	r5, r4
 8002472:	d109      	bne.n	8002488 <__libc_init_array+0x24>
 8002474:	f002 faf0 	bl	8004a58 <_init>
 8002478:	2500      	movs	r5, #0
 800247a:	4e0a      	ldr	r6, [pc, #40]	; (80024a4 <__libc_init_array+0x40>)
 800247c:	4c0a      	ldr	r4, [pc, #40]	; (80024a8 <__libc_init_array+0x44>)
 800247e:	1ba4      	subs	r4, r4, r6
 8002480:	10a4      	asrs	r4, r4, #2
 8002482:	42a5      	cmp	r5, r4
 8002484:	d105      	bne.n	8002492 <__libc_init_array+0x2e>
 8002486:	bd70      	pop	{r4, r5, r6, pc}
 8002488:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800248c:	4798      	blx	r3
 800248e:	3501      	adds	r5, #1
 8002490:	e7ee      	b.n	8002470 <__libc_init_array+0xc>
 8002492:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002496:	4798      	blx	r3
 8002498:	3501      	adds	r5, #1
 800249a:	e7f2      	b.n	8002482 <__libc_init_array+0x1e>
 800249c:	08004d1c 	.word	0x08004d1c
 80024a0:	08004d1c 	.word	0x08004d1c
 80024a4:	08004d1c 	.word	0x08004d1c
 80024a8:	08004d20 	.word	0x08004d20

080024ac <memset>:
 80024ac:	4603      	mov	r3, r0
 80024ae:	4402      	add	r2, r0
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d100      	bne.n	80024b6 <memset+0xa>
 80024b4:	4770      	bx	lr
 80024b6:	f803 1b01 	strb.w	r1, [r3], #1
 80024ba:	e7f9      	b.n	80024b0 <memset+0x4>

080024bc <__cvt>:
 80024bc:	2b00      	cmp	r3, #0
 80024be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80024c2:	461e      	mov	r6, r3
 80024c4:	bfbb      	ittet	lt
 80024c6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80024ca:	461e      	movlt	r6, r3
 80024cc:	2300      	movge	r3, #0
 80024ce:	232d      	movlt	r3, #45	; 0x2d
 80024d0:	b088      	sub	sp, #32
 80024d2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80024d4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80024d6:	f027 0720 	bic.w	r7, r7, #32
 80024da:	2f46      	cmp	r7, #70	; 0x46
 80024dc:	4614      	mov	r4, r2
 80024de:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80024e0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80024e4:	700b      	strb	r3, [r1, #0]
 80024e6:	d004      	beq.n	80024f2 <__cvt+0x36>
 80024e8:	2f45      	cmp	r7, #69	; 0x45
 80024ea:	d100      	bne.n	80024ee <__cvt+0x32>
 80024ec:	3501      	adds	r5, #1
 80024ee:	2302      	movs	r3, #2
 80024f0:	e000      	b.n	80024f4 <__cvt+0x38>
 80024f2:	2303      	movs	r3, #3
 80024f4:	aa07      	add	r2, sp, #28
 80024f6:	9204      	str	r2, [sp, #16]
 80024f8:	aa06      	add	r2, sp, #24
 80024fa:	9203      	str	r2, [sp, #12]
 80024fc:	e88d 0428 	stmia.w	sp, {r3, r5, sl}
 8002500:	4622      	mov	r2, r4
 8002502:	4633      	mov	r3, r6
 8002504:	f000 fcfc 	bl	8002f00 <_dtoa_r>
 8002508:	2f47      	cmp	r7, #71	; 0x47
 800250a:	4680      	mov	r8, r0
 800250c:	d102      	bne.n	8002514 <__cvt+0x58>
 800250e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002510:	07db      	lsls	r3, r3, #31
 8002512:	d526      	bpl.n	8002562 <__cvt+0xa6>
 8002514:	2f46      	cmp	r7, #70	; 0x46
 8002516:	eb08 0905 	add.w	r9, r8, r5
 800251a:	d111      	bne.n	8002540 <__cvt+0x84>
 800251c:	f898 3000 	ldrb.w	r3, [r8]
 8002520:	2b30      	cmp	r3, #48	; 0x30
 8002522:	d10a      	bne.n	800253a <__cvt+0x7e>
 8002524:	2200      	movs	r2, #0
 8002526:	2300      	movs	r3, #0
 8002528:	4620      	mov	r0, r4
 800252a:	4631      	mov	r1, r6
 800252c:	f7fe fa38 	bl	80009a0 <__aeabi_dcmpeq>
 8002530:	b918      	cbnz	r0, 800253a <__cvt+0x7e>
 8002532:	f1c5 0501 	rsb	r5, r5, #1
 8002536:	f8ca 5000 	str.w	r5, [sl]
 800253a:	f8da 3000 	ldr.w	r3, [sl]
 800253e:	4499      	add	r9, r3
 8002540:	2200      	movs	r2, #0
 8002542:	2300      	movs	r3, #0
 8002544:	4620      	mov	r0, r4
 8002546:	4631      	mov	r1, r6
 8002548:	f7fe fa2a 	bl	80009a0 <__aeabi_dcmpeq>
 800254c:	b938      	cbnz	r0, 800255e <__cvt+0xa2>
 800254e:	2230      	movs	r2, #48	; 0x30
 8002550:	9b07      	ldr	r3, [sp, #28]
 8002552:	4599      	cmp	r9, r3
 8002554:	d905      	bls.n	8002562 <__cvt+0xa6>
 8002556:	1c59      	adds	r1, r3, #1
 8002558:	9107      	str	r1, [sp, #28]
 800255a:	701a      	strb	r2, [r3, #0]
 800255c:	e7f8      	b.n	8002550 <__cvt+0x94>
 800255e:	f8cd 901c 	str.w	r9, [sp, #28]
 8002562:	4640      	mov	r0, r8
 8002564:	9b07      	ldr	r3, [sp, #28]
 8002566:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8002568:	eba3 0308 	sub.w	r3, r3, r8
 800256c:	6013      	str	r3, [r2, #0]
 800256e:	b008      	add	sp, #32
 8002570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002574 <__exponent>:
 8002574:	4603      	mov	r3, r0
 8002576:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002578:	2900      	cmp	r1, #0
 800257a:	f803 2b02 	strb.w	r2, [r3], #2
 800257e:	bfb6      	itet	lt
 8002580:	222d      	movlt	r2, #45	; 0x2d
 8002582:	222b      	movge	r2, #43	; 0x2b
 8002584:	4249      	neglt	r1, r1
 8002586:	2909      	cmp	r1, #9
 8002588:	7042      	strb	r2, [r0, #1]
 800258a:	dd21      	ble.n	80025d0 <__exponent+0x5c>
 800258c:	f10d 0207 	add.w	r2, sp, #7
 8002590:	4617      	mov	r7, r2
 8002592:	260a      	movs	r6, #10
 8002594:	fb91 f5f6 	sdiv	r5, r1, r6
 8002598:	fb06 1115 	mls	r1, r6, r5, r1
 800259c:	2d09      	cmp	r5, #9
 800259e:	f101 0130 	add.w	r1, r1, #48	; 0x30
 80025a2:	f802 1c01 	strb.w	r1, [r2, #-1]
 80025a6:	f102 34ff 	add.w	r4, r2, #4294967295	; 0xffffffff
 80025aa:	4629      	mov	r1, r5
 80025ac:	dc09      	bgt.n	80025c2 <__exponent+0x4e>
 80025ae:	3130      	adds	r1, #48	; 0x30
 80025b0:	3a02      	subs	r2, #2
 80025b2:	f804 1c01 	strb.w	r1, [r4, #-1]
 80025b6:	42ba      	cmp	r2, r7
 80025b8:	461c      	mov	r4, r3
 80025ba:	d304      	bcc.n	80025c6 <__exponent+0x52>
 80025bc:	1a20      	subs	r0, r4, r0
 80025be:	b003      	add	sp, #12
 80025c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025c2:	4622      	mov	r2, r4
 80025c4:	e7e6      	b.n	8002594 <__exponent+0x20>
 80025c6:	f812 1b01 	ldrb.w	r1, [r2], #1
 80025ca:	f803 1b01 	strb.w	r1, [r3], #1
 80025ce:	e7f2      	b.n	80025b6 <__exponent+0x42>
 80025d0:	2230      	movs	r2, #48	; 0x30
 80025d2:	461c      	mov	r4, r3
 80025d4:	4411      	add	r1, r2
 80025d6:	f804 2b02 	strb.w	r2, [r4], #2
 80025da:	7059      	strb	r1, [r3, #1]
 80025dc:	e7ee      	b.n	80025bc <__exponent+0x48>
	...

080025e0 <_printf_float>:
 80025e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025e4:	b091      	sub	sp, #68	; 0x44
 80025e6:	460c      	mov	r4, r1
 80025e8:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80025ea:	4693      	mov	fp, r2
 80025ec:	461e      	mov	r6, r3
 80025ee:	4605      	mov	r5, r0
 80025f0:	f001 fa5a 	bl	8003aa8 <_localeconv_r>
 80025f4:	6803      	ldr	r3, [r0, #0]
 80025f6:	4618      	mov	r0, r3
 80025f8:	9309      	str	r3, [sp, #36]	; 0x24
 80025fa:	f7fd fda9 	bl	8000150 <strlen>
 80025fe:	2300      	movs	r3, #0
 8002600:	930e      	str	r3, [sp, #56]	; 0x38
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	900a      	str	r0, [sp, #40]	; 0x28
 8002606:	3307      	adds	r3, #7
 8002608:	f023 0307 	bic.w	r3, r3, #7
 800260c:	f103 0208 	add.w	r2, r3, #8
 8002610:	f894 8018 	ldrb.w	r8, [r4, #24]
 8002614:	f8d4 a000 	ldr.w	sl, [r4]
 8002618:	603a      	str	r2, [r7, #0]
 800261a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800261e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002622:	f8d4 904c 	ldr.w	r9, [r4, #76]	; 0x4c
 8002626:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 8002628:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800262c:	930b      	str	r3, [sp, #44]	; 0x2c
 800262e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002632:	4ba6      	ldr	r3, [pc, #664]	; (80028cc <_printf_float+0x2ec>)
 8002634:	4638      	mov	r0, r7
 8002636:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002638:	f7fe f9e4 	bl	8000a04 <__aeabi_dcmpun>
 800263c:	2800      	cmp	r0, #0
 800263e:	f040 81f7 	bne.w	8002a30 <_printf_float+0x450>
 8002642:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002646:	4ba1      	ldr	r3, [pc, #644]	; (80028cc <_printf_float+0x2ec>)
 8002648:	4638      	mov	r0, r7
 800264a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800264c:	f7fe f9bc 	bl	80009c8 <__aeabi_dcmple>
 8002650:	2800      	cmp	r0, #0
 8002652:	f040 81ed 	bne.w	8002a30 <_printf_float+0x450>
 8002656:	2200      	movs	r2, #0
 8002658:	2300      	movs	r3, #0
 800265a:	4638      	mov	r0, r7
 800265c:	4649      	mov	r1, r9
 800265e:	f7fe f9a9 	bl	80009b4 <__aeabi_dcmplt>
 8002662:	b110      	cbz	r0, 800266a <_printf_float+0x8a>
 8002664:	232d      	movs	r3, #45	; 0x2d
 8002666:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800266a:	4b99      	ldr	r3, [pc, #612]	; (80028d0 <_printf_float+0x2f0>)
 800266c:	4f99      	ldr	r7, [pc, #612]	; (80028d4 <_printf_float+0x2f4>)
 800266e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002672:	bf98      	it	ls
 8002674:	461f      	movls	r7, r3
 8002676:	2303      	movs	r3, #3
 8002678:	f04f 0900 	mov.w	r9, #0
 800267c:	6123      	str	r3, [r4, #16]
 800267e:	f02a 0304 	bic.w	r3, sl, #4
 8002682:	6023      	str	r3, [r4, #0]
 8002684:	9600      	str	r6, [sp, #0]
 8002686:	465b      	mov	r3, fp
 8002688:	aa0f      	add	r2, sp, #60	; 0x3c
 800268a:	4621      	mov	r1, r4
 800268c:	4628      	mov	r0, r5
 800268e:	f000 f9df 	bl	8002a50 <_printf_common>
 8002692:	3001      	adds	r0, #1
 8002694:	f040 809a 	bne.w	80027cc <_printf_float+0x1ec>
 8002698:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800269c:	b011      	add	sp, #68	; 0x44
 800269e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026a2:	6862      	ldr	r2, [r4, #4]
 80026a4:	a80e      	add	r0, sp, #56	; 0x38
 80026a6:	1c53      	adds	r3, r2, #1
 80026a8:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
 80026ac:	f44a 6380 	orr.w	r3, sl, #1024	; 0x400
 80026b0:	d141      	bne.n	8002736 <_printf_float+0x156>
 80026b2:	2206      	movs	r2, #6
 80026b4:	6062      	str	r2, [r4, #4]
 80026b6:	2100      	movs	r1, #0
 80026b8:	6023      	str	r3, [r4, #0]
 80026ba:	9301      	str	r3, [sp, #4]
 80026bc:	6863      	ldr	r3, [r4, #4]
 80026be:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80026c2:	9005      	str	r0, [sp, #20]
 80026c4:	9202      	str	r2, [sp, #8]
 80026c6:	9300      	str	r3, [sp, #0]
 80026c8:	463a      	mov	r2, r7
 80026ca:	464b      	mov	r3, r9
 80026cc:	9106      	str	r1, [sp, #24]
 80026ce:	f8cd 8010 	str.w	r8, [sp, #16]
 80026d2:	f8cd e00c 	str.w	lr, [sp, #12]
 80026d6:	4628      	mov	r0, r5
 80026d8:	f7ff fef0 	bl	80024bc <__cvt>
 80026dc:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 80026e0:	2b47      	cmp	r3, #71	; 0x47
 80026e2:	4607      	mov	r7, r0
 80026e4:	d109      	bne.n	80026fa <_printf_float+0x11a>
 80026e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80026e8:	1cd8      	adds	r0, r3, #3
 80026ea:	db02      	blt.n	80026f2 <_printf_float+0x112>
 80026ec:	6862      	ldr	r2, [r4, #4]
 80026ee:	4293      	cmp	r3, r2
 80026f0:	dd59      	ble.n	80027a6 <_printf_float+0x1c6>
 80026f2:	f1a8 0802 	sub.w	r8, r8, #2
 80026f6:	fa5f f888 	uxtb.w	r8, r8
 80026fa:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80026fe:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002700:	d836      	bhi.n	8002770 <_printf_float+0x190>
 8002702:	3901      	subs	r1, #1
 8002704:	4642      	mov	r2, r8
 8002706:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800270a:	910d      	str	r1, [sp, #52]	; 0x34
 800270c:	f7ff ff32 	bl	8002574 <__exponent>
 8002710:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002712:	4681      	mov	r9, r0
 8002714:	1883      	adds	r3, r0, r2
 8002716:	2a01      	cmp	r2, #1
 8002718:	6123      	str	r3, [r4, #16]
 800271a:	dc02      	bgt.n	8002722 <_printf_float+0x142>
 800271c:	6822      	ldr	r2, [r4, #0]
 800271e:	07d1      	lsls	r1, r2, #31
 8002720:	d501      	bpl.n	8002726 <_printf_float+0x146>
 8002722:	3301      	adds	r3, #1
 8002724:	6123      	str	r3, [r4, #16]
 8002726:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800272a:	2b00      	cmp	r3, #0
 800272c:	d0aa      	beq.n	8002684 <_printf_float+0xa4>
 800272e:	232d      	movs	r3, #45	; 0x2d
 8002730:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002734:	e7a6      	b.n	8002684 <_printf_float+0xa4>
 8002736:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 800273a:	d002      	beq.n	8002742 <_printf_float+0x162>
 800273c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002740:	d1b9      	bne.n	80026b6 <_printf_float+0xd6>
 8002742:	b19a      	cbz	r2, 800276c <_printf_float+0x18c>
 8002744:	2100      	movs	r1, #0
 8002746:	9106      	str	r1, [sp, #24]
 8002748:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 800274c:	e88d 000c 	stmia.w	sp, {r2, r3}
 8002750:	6023      	str	r3, [r4, #0]
 8002752:	9005      	str	r0, [sp, #20]
 8002754:	463a      	mov	r2, r7
 8002756:	f8cd 8010 	str.w	r8, [sp, #16]
 800275a:	f8cd e00c 	str.w	lr, [sp, #12]
 800275e:	9102      	str	r1, [sp, #8]
 8002760:	464b      	mov	r3, r9
 8002762:	4628      	mov	r0, r5
 8002764:	f7ff feaa 	bl	80024bc <__cvt>
 8002768:	4607      	mov	r7, r0
 800276a:	e7bc      	b.n	80026e6 <_printf_float+0x106>
 800276c:	2201      	movs	r2, #1
 800276e:	e7a1      	b.n	80026b4 <_printf_float+0xd4>
 8002770:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8002774:	d119      	bne.n	80027aa <_printf_float+0x1ca>
 8002776:	2900      	cmp	r1, #0
 8002778:	6863      	ldr	r3, [r4, #4]
 800277a:	dd0c      	ble.n	8002796 <_printf_float+0x1b6>
 800277c:	6121      	str	r1, [r4, #16]
 800277e:	b913      	cbnz	r3, 8002786 <_printf_float+0x1a6>
 8002780:	6822      	ldr	r2, [r4, #0]
 8002782:	07d2      	lsls	r2, r2, #31
 8002784:	d502      	bpl.n	800278c <_printf_float+0x1ac>
 8002786:	3301      	adds	r3, #1
 8002788:	440b      	add	r3, r1
 800278a:	6123      	str	r3, [r4, #16]
 800278c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800278e:	f04f 0900 	mov.w	r9, #0
 8002792:	65a3      	str	r3, [r4, #88]	; 0x58
 8002794:	e7c7      	b.n	8002726 <_printf_float+0x146>
 8002796:	b913      	cbnz	r3, 800279e <_printf_float+0x1be>
 8002798:	6822      	ldr	r2, [r4, #0]
 800279a:	07d0      	lsls	r0, r2, #31
 800279c:	d501      	bpl.n	80027a2 <_printf_float+0x1c2>
 800279e:	3302      	adds	r3, #2
 80027a0:	e7f3      	b.n	800278a <_printf_float+0x1aa>
 80027a2:	2301      	movs	r3, #1
 80027a4:	e7f1      	b.n	800278a <_printf_float+0x1aa>
 80027a6:	f04f 0867 	mov.w	r8, #103	; 0x67
 80027aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80027ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80027ae:	4293      	cmp	r3, r2
 80027b0:	db05      	blt.n	80027be <_printf_float+0x1de>
 80027b2:	6822      	ldr	r2, [r4, #0]
 80027b4:	6123      	str	r3, [r4, #16]
 80027b6:	07d1      	lsls	r1, r2, #31
 80027b8:	d5e8      	bpl.n	800278c <_printf_float+0x1ac>
 80027ba:	3301      	adds	r3, #1
 80027bc:	e7e5      	b.n	800278a <_printf_float+0x1aa>
 80027be:	2b00      	cmp	r3, #0
 80027c0:	bfcc      	ite	gt
 80027c2:	2301      	movgt	r3, #1
 80027c4:	f1c3 0302 	rsble	r3, r3, #2
 80027c8:	4413      	add	r3, r2
 80027ca:	e7de      	b.n	800278a <_printf_float+0x1aa>
 80027cc:	6823      	ldr	r3, [r4, #0]
 80027ce:	055a      	lsls	r2, r3, #21
 80027d0:	d407      	bmi.n	80027e2 <_printf_float+0x202>
 80027d2:	6923      	ldr	r3, [r4, #16]
 80027d4:	463a      	mov	r2, r7
 80027d6:	4659      	mov	r1, fp
 80027d8:	4628      	mov	r0, r5
 80027da:	47b0      	blx	r6
 80027dc:	3001      	adds	r0, #1
 80027de:	d12a      	bne.n	8002836 <_printf_float+0x256>
 80027e0:	e75a      	b.n	8002698 <_printf_float+0xb8>
 80027e2:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80027e6:	f240 80dc 	bls.w	80029a2 <_printf_float+0x3c2>
 80027ea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80027ee:	2200      	movs	r2, #0
 80027f0:	2300      	movs	r3, #0
 80027f2:	f7fe f8d5 	bl	80009a0 <__aeabi_dcmpeq>
 80027f6:	2800      	cmp	r0, #0
 80027f8:	d039      	beq.n	800286e <_printf_float+0x28e>
 80027fa:	2301      	movs	r3, #1
 80027fc:	4a36      	ldr	r2, [pc, #216]	; (80028d8 <_printf_float+0x2f8>)
 80027fe:	4659      	mov	r1, fp
 8002800:	4628      	mov	r0, r5
 8002802:	47b0      	blx	r6
 8002804:	3001      	adds	r0, #1
 8002806:	f43f af47 	beq.w	8002698 <_printf_float+0xb8>
 800280a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800280c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800280e:	429a      	cmp	r2, r3
 8002810:	db02      	blt.n	8002818 <_printf_float+0x238>
 8002812:	6823      	ldr	r3, [r4, #0]
 8002814:	07d8      	lsls	r0, r3, #31
 8002816:	d50e      	bpl.n	8002836 <_printf_float+0x256>
 8002818:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800281a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800281c:	4659      	mov	r1, fp
 800281e:	4628      	mov	r0, r5
 8002820:	47b0      	blx	r6
 8002822:	3001      	adds	r0, #1
 8002824:	f43f af38 	beq.w	8002698 <_printf_float+0xb8>
 8002828:	2700      	movs	r7, #0
 800282a:	f104 081a 	add.w	r8, r4, #26
 800282e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002830:	3b01      	subs	r3, #1
 8002832:	429f      	cmp	r7, r3
 8002834:	db11      	blt.n	800285a <_printf_float+0x27a>
 8002836:	6823      	ldr	r3, [r4, #0]
 8002838:	079f      	lsls	r7, r3, #30
 800283a:	d508      	bpl.n	800284e <_printf_float+0x26e>
 800283c:	2700      	movs	r7, #0
 800283e:	f104 0819 	add.w	r8, r4, #25
 8002842:	68e3      	ldr	r3, [r4, #12]
 8002844:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002846:	1a9b      	subs	r3, r3, r2
 8002848:	429f      	cmp	r7, r3
 800284a:	f2c0 80e7 	blt.w	8002a1c <_printf_float+0x43c>
 800284e:	68e0      	ldr	r0, [r4, #12]
 8002850:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002852:	4298      	cmp	r0, r3
 8002854:	bfb8      	it	lt
 8002856:	4618      	movlt	r0, r3
 8002858:	e720      	b.n	800269c <_printf_float+0xbc>
 800285a:	2301      	movs	r3, #1
 800285c:	4642      	mov	r2, r8
 800285e:	4659      	mov	r1, fp
 8002860:	4628      	mov	r0, r5
 8002862:	47b0      	blx	r6
 8002864:	3001      	adds	r0, #1
 8002866:	f43f af17 	beq.w	8002698 <_printf_float+0xb8>
 800286a:	3701      	adds	r7, #1
 800286c:	e7df      	b.n	800282e <_printf_float+0x24e>
 800286e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002870:	2b00      	cmp	r3, #0
 8002872:	dc33      	bgt.n	80028dc <_printf_float+0x2fc>
 8002874:	2301      	movs	r3, #1
 8002876:	4a18      	ldr	r2, [pc, #96]	; (80028d8 <_printf_float+0x2f8>)
 8002878:	4659      	mov	r1, fp
 800287a:	4628      	mov	r0, r5
 800287c:	47b0      	blx	r6
 800287e:	3001      	adds	r0, #1
 8002880:	f43f af0a 	beq.w	8002698 <_printf_float+0xb8>
 8002884:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002886:	b923      	cbnz	r3, 8002892 <_printf_float+0x2b2>
 8002888:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800288a:	b913      	cbnz	r3, 8002892 <_printf_float+0x2b2>
 800288c:	6823      	ldr	r3, [r4, #0]
 800288e:	07d9      	lsls	r1, r3, #31
 8002890:	d5d1      	bpl.n	8002836 <_printf_float+0x256>
 8002892:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002894:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002896:	4659      	mov	r1, fp
 8002898:	4628      	mov	r0, r5
 800289a:	47b0      	blx	r6
 800289c:	3001      	adds	r0, #1
 800289e:	f43f aefb 	beq.w	8002698 <_printf_float+0xb8>
 80028a2:	f04f 0800 	mov.w	r8, #0
 80028a6:	f104 091a 	add.w	r9, r4, #26
 80028aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80028ac:	425b      	negs	r3, r3
 80028ae:	4598      	cmp	r8, r3
 80028b0:	db01      	blt.n	80028b6 <_printf_float+0x2d6>
 80028b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80028b4:	e78e      	b.n	80027d4 <_printf_float+0x1f4>
 80028b6:	2301      	movs	r3, #1
 80028b8:	464a      	mov	r2, r9
 80028ba:	4659      	mov	r1, fp
 80028bc:	4628      	mov	r0, r5
 80028be:	47b0      	blx	r6
 80028c0:	3001      	adds	r0, #1
 80028c2:	f43f aee9 	beq.w	8002698 <_printf_float+0xb8>
 80028c6:	f108 0801 	add.w	r8, r8, #1
 80028ca:	e7ee      	b.n	80028aa <_printf_float+0x2ca>
 80028cc:	7fefffff 	.word	0x7fefffff
 80028d0:	08004abe 	.word	0x08004abe
 80028d4:	08004ac2 	.word	0x08004ac2
 80028d8:	08004ace 	.word	0x08004ace
 80028dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80028de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80028e0:	429a      	cmp	r2, r3
 80028e2:	bfa8      	it	ge
 80028e4:	461a      	movge	r2, r3
 80028e6:	2a00      	cmp	r2, #0
 80028e8:	4690      	mov	r8, r2
 80028ea:	dc36      	bgt.n	800295a <_printf_float+0x37a>
 80028ec:	f04f 0a00 	mov.w	sl, #0
 80028f0:	f104 031a 	add.w	r3, r4, #26
 80028f4:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 80028f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80028fa:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80028fe:	eba9 0308 	sub.w	r3, r9, r8
 8002902:	459a      	cmp	sl, r3
 8002904:	db31      	blt.n	800296a <_printf_float+0x38a>
 8002906:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002908:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800290a:	429a      	cmp	r2, r3
 800290c:	db38      	blt.n	8002980 <_printf_float+0x3a0>
 800290e:	6823      	ldr	r3, [r4, #0]
 8002910:	07da      	lsls	r2, r3, #31
 8002912:	d435      	bmi.n	8002980 <_printf_float+0x3a0>
 8002914:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002916:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002918:	eba3 0209 	sub.w	r2, r3, r9
 800291c:	eba3 0801 	sub.w	r8, r3, r1
 8002920:	4590      	cmp	r8, r2
 8002922:	bfa8      	it	ge
 8002924:	4690      	movge	r8, r2
 8002926:	f1b8 0f00 	cmp.w	r8, #0
 800292a:	dc31      	bgt.n	8002990 <_printf_float+0x3b0>
 800292c:	2700      	movs	r7, #0
 800292e:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8002932:	f104 091a 	add.w	r9, r4, #26
 8002936:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002938:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800293a:	1a9b      	subs	r3, r3, r2
 800293c:	eba3 0308 	sub.w	r3, r3, r8
 8002940:	429f      	cmp	r7, r3
 8002942:	f6bf af78 	bge.w	8002836 <_printf_float+0x256>
 8002946:	2301      	movs	r3, #1
 8002948:	464a      	mov	r2, r9
 800294a:	4659      	mov	r1, fp
 800294c:	4628      	mov	r0, r5
 800294e:	47b0      	blx	r6
 8002950:	3001      	adds	r0, #1
 8002952:	f43f aea1 	beq.w	8002698 <_printf_float+0xb8>
 8002956:	3701      	adds	r7, #1
 8002958:	e7ed      	b.n	8002936 <_printf_float+0x356>
 800295a:	4613      	mov	r3, r2
 800295c:	4659      	mov	r1, fp
 800295e:	463a      	mov	r2, r7
 8002960:	4628      	mov	r0, r5
 8002962:	47b0      	blx	r6
 8002964:	3001      	adds	r0, #1
 8002966:	d1c1      	bne.n	80028ec <_printf_float+0x30c>
 8002968:	e696      	b.n	8002698 <_printf_float+0xb8>
 800296a:	2301      	movs	r3, #1
 800296c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800296e:	4659      	mov	r1, fp
 8002970:	4628      	mov	r0, r5
 8002972:	47b0      	blx	r6
 8002974:	3001      	adds	r0, #1
 8002976:	f43f ae8f 	beq.w	8002698 <_printf_float+0xb8>
 800297a:	f10a 0a01 	add.w	sl, sl, #1
 800297e:	e7bc      	b.n	80028fa <_printf_float+0x31a>
 8002980:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002982:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002984:	4659      	mov	r1, fp
 8002986:	4628      	mov	r0, r5
 8002988:	47b0      	blx	r6
 800298a:	3001      	adds	r0, #1
 800298c:	d1c2      	bne.n	8002914 <_printf_float+0x334>
 800298e:	e683      	b.n	8002698 <_printf_float+0xb8>
 8002990:	4643      	mov	r3, r8
 8002992:	eb07 0209 	add.w	r2, r7, r9
 8002996:	4659      	mov	r1, fp
 8002998:	4628      	mov	r0, r5
 800299a:	47b0      	blx	r6
 800299c:	3001      	adds	r0, #1
 800299e:	d1c5      	bne.n	800292c <_printf_float+0x34c>
 80029a0:	e67a      	b.n	8002698 <_printf_float+0xb8>
 80029a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80029a4:	2a01      	cmp	r2, #1
 80029a6:	dc01      	bgt.n	80029ac <_printf_float+0x3cc>
 80029a8:	07db      	lsls	r3, r3, #31
 80029aa:	d534      	bpl.n	8002a16 <_printf_float+0x436>
 80029ac:	2301      	movs	r3, #1
 80029ae:	463a      	mov	r2, r7
 80029b0:	4659      	mov	r1, fp
 80029b2:	4628      	mov	r0, r5
 80029b4:	47b0      	blx	r6
 80029b6:	3001      	adds	r0, #1
 80029b8:	f43f ae6e 	beq.w	8002698 <_printf_float+0xb8>
 80029bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80029be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80029c0:	4659      	mov	r1, fp
 80029c2:	4628      	mov	r0, r5
 80029c4:	47b0      	blx	r6
 80029c6:	3001      	adds	r0, #1
 80029c8:	f43f ae66 	beq.w	8002698 <_printf_float+0xb8>
 80029cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80029d0:	2200      	movs	r2, #0
 80029d2:	2300      	movs	r3, #0
 80029d4:	f7fd ffe4 	bl	80009a0 <__aeabi_dcmpeq>
 80029d8:	b150      	cbz	r0, 80029f0 <_printf_float+0x410>
 80029da:	2700      	movs	r7, #0
 80029dc:	f104 081a 	add.w	r8, r4, #26
 80029e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80029e2:	3b01      	subs	r3, #1
 80029e4:	429f      	cmp	r7, r3
 80029e6:	db0c      	blt.n	8002a02 <_printf_float+0x422>
 80029e8:	464b      	mov	r3, r9
 80029ea:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80029ee:	e6f2      	b.n	80027d6 <_printf_float+0x1f6>
 80029f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80029f2:	1c7a      	adds	r2, r7, #1
 80029f4:	3b01      	subs	r3, #1
 80029f6:	4659      	mov	r1, fp
 80029f8:	4628      	mov	r0, r5
 80029fa:	47b0      	blx	r6
 80029fc:	3001      	adds	r0, #1
 80029fe:	d1f3      	bne.n	80029e8 <_printf_float+0x408>
 8002a00:	e64a      	b.n	8002698 <_printf_float+0xb8>
 8002a02:	2301      	movs	r3, #1
 8002a04:	4642      	mov	r2, r8
 8002a06:	4659      	mov	r1, fp
 8002a08:	4628      	mov	r0, r5
 8002a0a:	47b0      	blx	r6
 8002a0c:	3001      	adds	r0, #1
 8002a0e:	f43f ae43 	beq.w	8002698 <_printf_float+0xb8>
 8002a12:	3701      	adds	r7, #1
 8002a14:	e7e4      	b.n	80029e0 <_printf_float+0x400>
 8002a16:	2301      	movs	r3, #1
 8002a18:	463a      	mov	r2, r7
 8002a1a:	e7ec      	b.n	80029f6 <_printf_float+0x416>
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	4642      	mov	r2, r8
 8002a20:	4659      	mov	r1, fp
 8002a22:	4628      	mov	r0, r5
 8002a24:	47b0      	blx	r6
 8002a26:	3001      	adds	r0, #1
 8002a28:	f43f ae36 	beq.w	8002698 <_printf_float+0xb8>
 8002a2c:	3701      	adds	r7, #1
 8002a2e:	e708      	b.n	8002842 <_printf_float+0x262>
 8002a30:	463a      	mov	r2, r7
 8002a32:	464b      	mov	r3, r9
 8002a34:	4638      	mov	r0, r7
 8002a36:	4649      	mov	r1, r9
 8002a38:	f7fd ffe4 	bl	8000a04 <__aeabi_dcmpun>
 8002a3c:	2800      	cmp	r0, #0
 8002a3e:	f43f ae30 	beq.w	80026a2 <_printf_float+0xc2>
 8002a42:	4b01      	ldr	r3, [pc, #4]	; (8002a48 <_printf_float+0x468>)
 8002a44:	4f01      	ldr	r7, [pc, #4]	; (8002a4c <_printf_float+0x46c>)
 8002a46:	e612      	b.n	800266e <_printf_float+0x8e>
 8002a48:	08004ac6 	.word	0x08004ac6
 8002a4c:	08004aca 	.word	0x08004aca

08002a50 <_printf_common>:
 8002a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a54:	4691      	mov	r9, r2
 8002a56:	461f      	mov	r7, r3
 8002a58:	688a      	ldr	r2, [r1, #8]
 8002a5a:	690b      	ldr	r3, [r1, #16]
 8002a5c:	4606      	mov	r6, r0
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	bfb8      	it	lt
 8002a62:	4613      	movlt	r3, r2
 8002a64:	f8c9 3000 	str.w	r3, [r9]
 8002a68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002a6c:	460c      	mov	r4, r1
 8002a6e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002a72:	b112      	cbz	r2, 8002a7a <_printf_common+0x2a>
 8002a74:	3301      	adds	r3, #1
 8002a76:	f8c9 3000 	str.w	r3, [r9]
 8002a7a:	6823      	ldr	r3, [r4, #0]
 8002a7c:	0699      	lsls	r1, r3, #26
 8002a7e:	bf42      	ittt	mi
 8002a80:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002a84:	3302      	addmi	r3, #2
 8002a86:	f8c9 3000 	strmi.w	r3, [r9]
 8002a8a:	6825      	ldr	r5, [r4, #0]
 8002a8c:	f015 0506 	ands.w	r5, r5, #6
 8002a90:	d107      	bne.n	8002aa2 <_printf_common+0x52>
 8002a92:	f104 0a19 	add.w	sl, r4, #25
 8002a96:	68e3      	ldr	r3, [r4, #12]
 8002a98:	f8d9 2000 	ldr.w	r2, [r9]
 8002a9c:	1a9b      	subs	r3, r3, r2
 8002a9e:	429d      	cmp	r5, r3
 8002aa0:	db2a      	blt.n	8002af8 <_printf_common+0xa8>
 8002aa2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002aa6:	6822      	ldr	r2, [r4, #0]
 8002aa8:	3300      	adds	r3, #0
 8002aaa:	bf18      	it	ne
 8002aac:	2301      	movne	r3, #1
 8002aae:	0692      	lsls	r2, r2, #26
 8002ab0:	d42f      	bmi.n	8002b12 <_printf_common+0xc2>
 8002ab2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002ab6:	4639      	mov	r1, r7
 8002ab8:	4630      	mov	r0, r6
 8002aba:	47c0      	blx	r8
 8002abc:	3001      	adds	r0, #1
 8002abe:	d022      	beq.n	8002b06 <_printf_common+0xb6>
 8002ac0:	6823      	ldr	r3, [r4, #0]
 8002ac2:	68e5      	ldr	r5, [r4, #12]
 8002ac4:	f003 0306 	and.w	r3, r3, #6
 8002ac8:	2b04      	cmp	r3, #4
 8002aca:	bf18      	it	ne
 8002acc:	2500      	movne	r5, #0
 8002ace:	f8d9 2000 	ldr.w	r2, [r9]
 8002ad2:	f04f 0900 	mov.w	r9, #0
 8002ad6:	bf08      	it	eq
 8002ad8:	1aad      	subeq	r5, r5, r2
 8002ada:	68a3      	ldr	r3, [r4, #8]
 8002adc:	6922      	ldr	r2, [r4, #16]
 8002ade:	bf08      	it	eq
 8002ae0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	bfc4      	itt	gt
 8002ae8:	1a9b      	subgt	r3, r3, r2
 8002aea:	18ed      	addgt	r5, r5, r3
 8002aec:	341a      	adds	r4, #26
 8002aee:	454d      	cmp	r5, r9
 8002af0:	d11b      	bne.n	8002b2a <_printf_common+0xda>
 8002af2:	2000      	movs	r0, #0
 8002af4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002af8:	2301      	movs	r3, #1
 8002afa:	4652      	mov	r2, sl
 8002afc:	4639      	mov	r1, r7
 8002afe:	4630      	mov	r0, r6
 8002b00:	47c0      	blx	r8
 8002b02:	3001      	adds	r0, #1
 8002b04:	d103      	bne.n	8002b0e <_printf_common+0xbe>
 8002b06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b0e:	3501      	adds	r5, #1
 8002b10:	e7c1      	b.n	8002a96 <_printf_common+0x46>
 8002b12:	2030      	movs	r0, #48	; 0x30
 8002b14:	18e1      	adds	r1, r4, r3
 8002b16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002b1a:	1c5a      	adds	r2, r3, #1
 8002b1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002b20:	4422      	add	r2, r4
 8002b22:	3302      	adds	r3, #2
 8002b24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002b28:	e7c3      	b.n	8002ab2 <_printf_common+0x62>
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	4622      	mov	r2, r4
 8002b2e:	4639      	mov	r1, r7
 8002b30:	4630      	mov	r0, r6
 8002b32:	47c0      	blx	r8
 8002b34:	3001      	adds	r0, #1
 8002b36:	d0e6      	beq.n	8002b06 <_printf_common+0xb6>
 8002b38:	f109 0901 	add.w	r9, r9, #1
 8002b3c:	e7d7      	b.n	8002aee <_printf_common+0x9e>
	...

08002b40 <_printf_i>:
 8002b40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002b44:	4617      	mov	r7, r2
 8002b46:	7e0a      	ldrb	r2, [r1, #24]
 8002b48:	b085      	sub	sp, #20
 8002b4a:	2a6e      	cmp	r2, #110	; 0x6e
 8002b4c:	4698      	mov	r8, r3
 8002b4e:	4606      	mov	r6, r0
 8002b50:	460c      	mov	r4, r1
 8002b52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002b54:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8002b58:	f000 80bc 	beq.w	8002cd4 <_printf_i+0x194>
 8002b5c:	d81a      	bhi.n	8002b94 <_printf_i+0x54>
 8002b5e:	2a63      	cmp	r2, #99	; 0x63
 8002b60:	d02e      	beq.n	8002bc0 <_printf_i+0x80>
 8002b62:	d80a      	bhi.n	8002b7a <_printf_i+0x3a>
 8002b64:	2a00      	cmp	r2, #0
 8002b66:	f000 80c8 	beq.w	8002cfa <_printf_i+0x1ba>
 8002b6a:	2a58      	cmp	r2, #88	; 0x58
 8002b6c:	f000 808a 	beq.w	8002c84 <_printf_i+0x144>
 8002b70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002b74:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8002b78:	e02a      	b.n	8002bd0 <_printf_i+0x90>
 8002b7a:	2a64      	cmp	r2, #100	; 0x64
 8002b7c:	d001      	beq.n	8002b82 <_printf_i+0x42>
 8002b7e:	2a69      	cmp	r2, #105	; 0x69
 8002b80:	d1f6      	bne.n	8002b70 <_printf_i+0x30>
 8002b82:	6821      	ldr	r1, [r4, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002b8a:	d023      	beq.n	8002bd4 <_printf_i+0x94>
 8002b8c:	1d11      	adds	r1, r2, #4
 8002b8e:	6019      	str	r1, [r3, #0]
 8002b90:	6813      	ldr	r3, [r2, #0]
 8002b92:	e027      	b.n	8002be4 <_printf_i+0xa4>
 8002b94:	2a73      	cmp	r2, #115	; 0x73
 8002b96:	f000 80b4 	beq.w	8002d02 <_printf_i+0x1c2>
 8002b9a:	d808      	bhi.n	8002bae <_printf_i+0x6e>
 8002b9c:	2a6f      	cmp	r2, #111	; 0x6f
 8002b9e:	d02a      	beq.n	8002bf6 <_printf_i+0xb6>
 8002ba0:	2a70      	cmp	r2, #112	; 0x70
 8002ba2:	d1e5      	bne.n	8002b70 <_printf_i+0x30>
 8002ba4:	680a      	ldr	r2, [r1, #0]
 8002ba6:	f042 0220 	orr.w	r2, r2, #32
 8002baa:	600a      	str	r2, [r1, #0]
 8002bac:	e003      	b.n	8002bb6 <_printf_i+0x76>
 8002bae:	2a75      	cmp	r2, #117	; 0x75
 8002bb0:	d021      	beq.n	8002bf6 <_printf_i+0xb6>
 8002bb2:	2a78      	cmp	r2, #120	; 0x78
 8002bb4:	d1dc      	bne.n	8002b70 <_printf_i+0x30>
 8002bb6:	2278      	movs	r2, #120	; 0x78
 8002bb8:	496f      	ldr	r1, [pc, #444]	; (8002d78 <_printf_i+0x238>)
 8002bba:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8002bbe:	e064      	b.n	8002c8a <_printf_i+0x14a>
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8002bc6:	1d11      	adds	r1, r2, #4
 8002bc8:	6019      	str	r1, [r3, #0]
 8002bca:	6813      	ldr	r3, [r2, #0]
 8002bcc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e0a3      	b.n	8002d1c <_printf_i+0x1dc>
 8002bd4:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002bd8:	f102 0104 	add.w	r1, r2, #4
 8002bdc:	6019      	str	r1, [r3, #0]
 8002bde:	d0d7      	beq.n	8002b90 <_printf_i+0x50>
 8002be0:	f9b2 3000 	ldrsh.w	r3, [r2]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	da03      	bge.n	8002bf0 <_printf_i+0xb0>
 8002be8:	222d      	movs	r2, #45	; 0x2d
 8002bea:	425b      	negs	r3, r3
 8002bec:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002bf0:	4962      	ldr	r1, [pc, #392]	; (8002d7c <_printf_i+0x23c>)
 8002bf2:	220a      	movs	r2, #10
 8002bf4:	e017      	b.n	8002c26 <_printf_i+0xe6>
 8002bf6:	6820      	ldr	r0, [r4, #0]
 8002bf8:	6819      	ldr	r1, [r3, #0]
 8002bfa:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002bfe:	d003      	beq.n	8002c08 <_printf_i+0xc8>
 8002c00:	1d08      	adds	r0, r1, #4
 8002c02:	6018      	str	r0, [r3, #0]
 8002c04:	680b      	ldr	r3, [r1, #0]
 8002c06:	e006      	b.n	8002c16 <_printf_i+0xd6>
 8002c08:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002c0c:	f101 0004 	add.w	r0, r1, #4
 8002c10:	6018      	str	r0, [r3, #0]
 8002c12:	d0f7      	beq.n	8002c04 <_printf_i+0xc4>
 8002c14:	880b      	ldrh	r3, [r1, #0]
 8002c16:	2a6f      	cmp	r2, #111	; 0x6f
 8002c18:	bf14      	ite	ne
 8002c1a:	220a      	movne	r2, #10
 8002c1c:	2208      	moveq	r2, #8
 8002c1e:	4957      	ldr	r1, [pc, #348]	; (8002d7c <_printf_i+0x23c>)
 8002c20:	2000      	movs	r0, #0
 8002c22:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8002c26:	6865      	ldr	r5, [r4, #4]
 8002c28:	2d00      	cmp	r5, #0
 8002c2a:	60a5      	str	r5, [r4, #8]
 8002c2c:	f2c0 809c 	blt.w	8002d68 <_printf_i+0x228>
 8002c30:	6820      	ldr	r0, [r4, #0]
 8002c32:	f020 0004 	bic.w	r0, r0, #4
 8002c36:	6020      	str	r0, [r4, #0]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d13f      	bne.n	8002cbc <_printf_i+0x17c>
 8002c3c:	2d00      	cmp	r5, #0
 8002c3e:	f040 8095 	bne.w	8002d6c <_printf_i+0x22c>
 8002c42:	4675      	mov	r5, lr
 8002c44:	2a08      	cmp	r2, #8
 8002c46:	d10b      	bne.n	8002c60 <_printf_i+0x120>
 8002c48:	6823      	ldr	r3, [r4, #0]
 8002c4a:	07da      	lsls	r2, r3, #31
 8002c4c:	d508      	bpl.n	8002c60 <_printf_i+0x120>
 8002c4e:	6923      	ldr	r3, [r4, #16]
 8002c50:	6862      	ldr	r2, [r4, #4]
 8002c52:	429a      	cmp	r2, r3
 8002c54:	bfde      	ittt	le
 8002c56:	2330      	movle	r3, #48	; 0x30
 8002c58:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002c5c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002c60:	ebae 0305 	sub.w	r3, lr, r5
 8002c64:	6123      	str	r3, [r4, #16]
 8002c66:	f8cd 8000 	str.w	r8, [sp]
 8002c6a:	463b      	mov	r3, r7
 8002c6c:	aa03      	add	r2, sp, #12
 8002c6e:	4621      	mov	r1, r4
 8002c70:	4630      	mov	r0, r6
 8002c72:	f7ff feed 	bl	8002a50 <_printf_common>
 8002c76:	3001      	adds	r0, #1
 8002c78:	d155      	bne.n	8002d26 <_printf_i+0x1e6>
 8002c7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c7e:	b005      	add	sp, #20
 8002c80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002c84:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8002c88:	493c      	ldr	r1, [pc, #240]	; (8002d7c <_printf_i+0x23c>)
 8002c8a:	6822      	ldr	r2, [r4, #0]
 8002c8c:	6818      	ldr	r0, [r3, #0]
 8002c8e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002c92:	f100 0504 	add.w	r5, r0, #4
 8002c96:	601d      	str	r5, [r3, #0]
 8002c98:	d001      	beq.n	8002c9e <_printf_i+0x15e>
 8002c9a:	6803      	ldr	r3, [r0, #0]
 8002c9c:	e002      	b.n	8002ca4 <_printf_i+0x164>
 8002c9e:	0655      	lsls	r5, r2, #25
 8002ca0:	d5fb      	bpl.n	8002c9a <_printf_i+0x15a>
 8002ca2:	8803      	ldrh	r3, [r0, #0]
 8002ca4:	07d0      	lsls	r0, r2, #31
 8002ca6:	bf44      	itt	mi
 8002ca8:	f042 0220 	orrmi.w	r2, r2, #32
 8002cac:	6022      	strmi	r2, [r4, #0]
 8002cae:	b91b      	cbnz	r3, 8002cb8 <_printf_i+0x178>
 8002cb0:	6822      	ldr	r2, [r4, #0]
 8002cb2:	f022 0220 	bic.w	r2, r2, #32
 8002cb6:	6022      	str	r2, [r4, #0]
 8002cb8:	2210      	movs	r2, #16
 8002cba:	e7b1      	b.n	8002c20 <_printf_i+0xe0>
 8002cbc:	4675      	mov	r5, lr
 8002cbe:	fbb3 f0f2 	udiv	r0, r3, r2
 8002cc2:	fb02 3310 	mls	r3, r2, r0, r3
 8002cc6:	5ccb      	ldrb	r3, [r1, r3]
 8002cc8:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2800      	cmp	r0, #0
 8002cd0:	d1f5      	bne.n	8002cbe <_printf_i+0x17e>
 8002cd2:	e7b7      	b.n	8002c44 <_printf_i+0x104>
 8002cd4:	6808      	ldr	r0, [r1, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002cdc:	6949      	ldr	r1, [r1, #20]
 8002cde:	d004      	beq.n	8002cea <_printf_i+0x1aa>
 8002ce0:	1d10      	adds	r0, r2, #4
 8002ce2:	6018      	str	r0, [r3, #0]
 8002ce4:	6813      	ldr	r3, [r2, #0]
 8002ce6:	6019      	str	r1, [r3, #0]
 8002ce8:	e007      	b.n	8002cfa <_printf_i+0x1ba>
 8002cea:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002cee:	f102 0004 	add.w	r0, r2, #4
 8002cf2:	6018      	str	r0, [r3, #0]
 8002cf4:	6813      	ldr	r3, [r2, #0]
 8002cf6:	d0f6      	beq.n	8002ce6 <_printf_i+0x1a6>
 8002cf8:	8019      	strh	r1, [r3, #0]
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	4675      	mov	r5, lr
 8002cfe:	6123      	str	r3, [r4, #16]
 8002d00:	e7b1      	b.n	8002c66 <_printf_i+0x126>
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	1d11      	adds	r1, r2, #4
 8002d06:	6019      	str	r1, [r3, #0]
 8002d08:	6815      	ldr	r5, [r2, #0]
 8002d0a:	2100      	movs	r1, #0
 8002d0c:	6862      	ldr	r2, [r4, #4]
 8002d0e:	4628      	mov	r0, r5
 8002d10:	f000 fee0 	bl	8003ad4 <memchr>
 8002d14:	b108      	cbz	r0, 8002d1a <_printf_i+0x1da>
 8002d16:	1b40      	subs	r0, r0, r5
 8002d18:	6060      	str	r0, [r4, #4]
 8002d1a:	6863      	ldr	r3, [r4, #4]
 8002d1c:	6123      	str	r3, [r4, #16]
 8002d1e:	2300      	movs	r3, #0
 8002d20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d24:	e79f      	b.n	8002c66 <_printf_i+0x126>
 8002d26:	6923      	ldr	r3, [r4, #16]
 8002d28:	462a      	mov	r2, r5
 8002d2a:	4639      	mov	r1, r7
 8002d2c:	4630      	mov	r0, r6
 8002d2e:	47c0      	blx	r8
 8002d30:	3001      	adds	r0, #1
 8002d32:	d0a2      	beq.n	8002c7a <_printf_i+0x13a>
 8002d34:	6823      	ldr	r3, [r4, #0]
 8002d36:	079b      	lsls	r3, r3, #30
 8002d38:	d507      	bpl.n	8002d4a <_printf_i+0x20a>
 8002d3a:	2500      	movs	r5, #0
 8002d3c:	f104 0919 	add.w	r9, r4, #25
 8002d40:	68e3      	ldr	r3, [r4, #12]
 8002d42:	9a03      	ldr	r2, [sp, #12]
 8002d44:	1a9b      	subs	r3, r3, r2
 8002d46:	429d      	cmp	r5, r3
 8002d48:	db05      	blt.n	8002d56 <_printf_i+0x216>
 8002d4a:	68e0      	ldr	r0, [r4, #12]
 8002d4c:	9b03      	ldr	r3, [sp, #12]
 8002d4e:	4298      	cmp	r0, r3
 8002d50:	bfb8      	it	lt
 8002d52:	4618      	movlt	r0, r3
 8002d54:	e793      	b.n	8002c7e <_printf_i+0x13e>
 8002d56:	2301      	movs	r3, #1
 8002d58:	464a      	mov	r2, r9
 8002d5a:	4639      	mov	r1, r7
 8002d5c:	4630      	mov	r0, r6
 8002d5e:	47c0      	blx	r8
 8002d60:	3001      	adds	r0, #1
 8002d62:	d08a      	beq.n	8002c7a <_printf_i+0x13a>
 8002d64:	3501      	adds	r5, #1
 8002d66:	e7eb      	b.n	8002d40 <_printf_i+0x200>
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d1a7      	bne.n	8002cbc <_printf_i+0x17c>
 8002d6c:	780b      	ldrb	r3, [r1, #0]
 8002d6e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d72:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002d76:	e765      	b.n	8002c44 <_printf_i+0x104>
 8002d78:	08004ae1 	.word	0x08004ae1
 8002d7c:	08004ad0 	.word	0x08004ad0

08002d80 <sniprintf>:
 8002d80:	b40c      	push	{r2, r3}
 8002d82:	b530      	push	{r4, r5, lr}
 8002d84:	4b17      	ldr	r3, [pc, #92]	; (8002de4 <sniprintf+0x64>)
 8002d86:	1e0c      	subs	r4, r1, #0
 8002d88:	b09d      	sub	sp, #116	; 0x74
 8002d8a:	681d      	ldr	r5, [r3, #0]
 8002d8c:	da08      	bge.n	8002da0 <sniprintf+0x20>
 8002d8e:	238b      	movs	r3, #139	; 0x8b
 8002d90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d94:	602b      	str	r3, [r5, #0]
 8002d96:	b01d      	add	sp, #116	; 0x74
 8002d98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002d9c:	b002      	add	sp, #8
 8002d9e:	4770      	bx	lr
 8002da0:	f44f 7302 	mov.w	r3, #520	; 0x208
 8002da4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002da8:	bf0c      	ite	eq
 8002daa:	4623      	moveq	r3, r4
 8002dac:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8002db0:	9304      	str	r3, [sp, #16]
 8002db2:	9307      	str	r3, [sp, #28]
 8002db4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002db8:	9002      	str	r0, [sp, #8]
 8002dba:	9006      	str	r0, [sp, #24]
 8002dbc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002dc0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002dc2:	ab21      	add	r3, sp, #132	; 0x84
 8002dc4:	a902      	add	r1, sp, #8
 8002dc6:	4628      	mov	r0, r5
 8002dc8:	9301      	str	r3, [sp, #4]
 8002dca:	f001 fa81 	bl	80042d0 <_svfiprintf_r>
 8002dce:	1c43      	adds	r3, r0, #1
 8002dd0:	bfbc      	itt	lt
 8002dd2:	238b      	movlt	r3, #139	; 0x8b
 8002dd4:	602b      	strlt	r3, [r5, #0]
 8002dd6:	2c00      	cmp	r4, #0
 8002dd8:	d0dd      	beq.n	8002d96 <sniprintf+0x16>
 8002dda:	2200      	movs	r2, #0
 8002ddc:	9b02      	ldr	r3, [sp, #8]
 8002dde:	701a      	strb	r2, [r3, #0]
 8002de0:	e7d9      	b.n	8002d96 <sniprintf+0x16>
 8002de2:	bf00      	nop
 8002de4:	2000000c 	.word	0x2000000c

08002de8 <quorem>:
 8002de8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dec:	6903      	ldr	r3, [r0, #16]
 8002dee:	690c      	ldr	r4, [r1, #16]
 8002df0:	4680      	mov	r8, r0
 8002df2:	429c      	cmp	r4, r3
 8002df4:	f300 8082 	bgt.w	8002efc <quorem+0x114>
 8002df8:	3c01      	subs	r4, #1
 8002dfa:	f101 0714 	add.w	r7, r1, #20
 8002dfe:	f100 0614 	add.w	r6, r0, #20
 8002e02:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8002e06:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8002e0a:	3501      	adds	r5, #1
 8002e0c:	fbb0 f5f5 	udiv	r5, r0, r5
 8002e10:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8002e14:	eb06 030e 	add.w	r3, r6, lr
 8002e18:	eb07 090e 	add.w	r9, r7, lr
 8002e1c:	9301      	str	r3, [sp, #4]
 8002e1e:	b38d      	cbz	r5, 8002e84 <quorem+0x9c>
 8002e20:	f04f 0a00 	mov.w	sl, #0
 8002e24:	4638      	mov	r0, r7
 8002e26:	46b4      	mov	ip, r6
 8002e28:	46d3      	mov	fp, sl
 8002e2a:	f850 2b04 	ldr.w	r2, [r0], #4
 8002e2e:	b293      	uxth	r3, r2
 8002e30:	fb05 a303 	mla	r3, r5, r3, sl
 8002e34:	0c12      	lsrs	r2, r2, #16
 8002e36:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8002e3a:	fb05 a202 	mla	r2, r5, r2, sl
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	ebab 0303 	sub.w	r3, fp, r3
 8002e44:	f8bc b000 	ldrh.w	fp, [ip]
 8002e48:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8002e4c:	445b      	add	r3, fp
 8002e4e:	fa1f fb82 	uxth.w	fp, r2
 8002e52:	f8dc 2000 	ldr.w	r2, [ip]
 8002e56:	4581      	cmp	r9, r0
 8002e58:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8002e5c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002e66:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8002e6a:	f84c 3b04 	str.w	r3, [ip], #4
 8002e6e:	d2dc      	bcs.n	8002e2a <quorem+0x42>
 8002e70:	f856 300e 	ldr.w	r3, [r6, lr]
 8002e74:	b933      	cbnz	r3, 8002e84 <quorem+0x9c>
 8002e76:	9b01      	ldr	r3, [sp, #4]
 8002e78:	3b04      	subs	r3, #4
 8002e7a:	429e      	cmp	r6, r3
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	d331      	bcc.n	8002ee4 <quorem+0xfc>
 8002e80:	f8c8 4010 	str.w	r4, [r8, #16]
 8002e84:	4640      	mov	r0, r8
 8002e86:	f001 f846 	bl	8003f16 <__mcmp>
 8002e8a:	2800      	cmp	r0, #0
 8002e8c:	db26      	blt.n	8002edc <quorem+0xf4>
 8002e8e:	4630      	mov	r0, r6
 8002e90:	f04f 0e00 	mov.w	lr, #0
 8002e94:	3501      	adds	r5, #1
 8002e96:	f857 1b04 	ldr.w	r1, [r7], #4
 8002e9a:	f8d0 c000 	ldr.w	ip, [r0]
 8002e9e:	b28b      	uxth	r3, r1
 8002ea0:	ebae 0303 	sub.w	r3, lr, r3
 8002ea4:	fa1f f28c 	uxth.w	r2, ip
 8002ea8:	4413      	add	r3, r2
 8002eaa:	0c0a      	lsrs	r2, r1, #16
 8002eac:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8002eb0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002eba:	45b9      	cmp	r9, r7
 8002ebc:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8002ec0:	f840 3b04 	str.w	r3, [r0], #4
 8002ec4:	d2e7      	bcs.n	8002e96 <quorem+0xae>
 8002ec6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8002eca:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8002ece:	b92a      	cbnz	r2, 8002edc <quorem+0xf4>
 8002ed0:	3b04      	subs	r3, #4
 8002ed2:	429e      	cmp	r6, r3
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	d30b      	bcc.n	8002ef0 <quorem+0x108>
 8002ed8:	f8c8 4010 	str.w	r4, [r8, #16]
 8002edc:	4628      	mov	r0, r5
 8002ede:	b003      	add	sp, #12
 8002ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ee4:	6812      	ldr	r2, [r2, #0]
 8002ee6:	3b04      	subs	r3, #4
 8002ee8:	2a00      	cmp	r2, #0
 8002eea:	d1c9      	bne.n	8002e80 <quorem+0x98>
 8002eec:	3c01      	subs	r4, #1
 8002eee:	e7c4      	b.n	8002e7a <quorem+0x92>
 8002ef0:	6812      	ldr	r2, [r2, #0]
 8002ef2:	3b04      	subs	r3, #4
 8002ef4:	2a00      	cmp	r2, #0
 8002ef6:	d1ef      	bne.n	8002ed8 <quorem+0xf0>
 8002ef8:	3c01      	subs	r4, #1
 8002efa:	e7ea      	b.n	8002ed2 <quorem+0xea>
 8002efc:	2000      	movs	r0, #0
 8002efe:	e7ee      	b.n	8002ede <quorem+0xf6>

08002f00 <_dtoa_r>:
 8002f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f04:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8002f06:	b095      	sub	sp, #84	; 0x54
 8002f08:	4604      	mov	r4, r0
 8002f0a:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8002f0c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002f10:	b93e      	cbnz	r6, 8002f22 <_dtoa_r+0x22>
 8002f12:	2010      	movs	r0, #16
 8002f14:	f000 fdd6 	bl	8003ac4 <malloc>
 8002f18:	6260      	str	r0, [r4, #36]	; 0x24
 8002f1a:	6046      	str	r6, [r0, #4]
 8002f1c:	6086      	str	r6, [r0, #8]
 8002f1e:	6006      	str	r6, [r0, #0]
 8002f20:	60c6      	str	r6, [r0, #12]
 8002f22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002f24:	6819      	ldr	r1, [r3, #0]
 8002f26:	b151      	cbz	r1, 8002f3e <_dtoa_r+0x3e>
 8002f28:	685a      	ldr	r2, [r3, #4]
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	4093      	lsls	r3, r2
 8002f2e:	604a      	str	r2, [r1, #4]
 8002f30:	608b      	str	r3, [r1, #8]
 8002f32:	4620      	mov	r0, r4
 8002f34:	f000 fe1b 	bl	8003b6e <_Bfree>
 8002f38:	2200      	movs	r2, #0
 8002f3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002f3c:	601a      	str	r2, [r3, #0]
 8002f3e:	9b03      	ldr	r3, [sp, #12]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	bfb7      	itett	lt
 8002f44:	2301      	movlt	r3, #1
 8002f46:	2300      	movge	r3, #0
 8002f48:	602b      	strlt	r3, [r5, #0]
 8002f4a:	9b03      	ldrlt	r3, [sp, #12]
 8002f4c:	bfae      	itee	ge
 8002f4e:	602b      	strge	r3, [r5, #0]
 8002f50:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8002f54:	9303      	strlt	r3, [sp, #12]
 8002f56:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8002f5a:	4bab      	ldr	r3, [pc, #684]	; (8003208 <_dtoa_r+0x308>)
 8002f5c:	ea33 0309 	bics.w	r3, r3, r9
 8002f60:	d11b      	bne.n	8002f9a <_dtoa_r+0x9a>
 8002f62:	f242 730f 	movw	r3, #9999	; 0x270f
 8002f66:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002f68:	6013      	str	r3, [r2, #0]
 8002f6a:	9b02      	ldr	r3, [sp, #8]
 8002f6c:	b923      	cbnz	r3, 8002f78 <_dtoa_r+0x78>
 8002f6e:	f3c9 0013 	ubfx	r0, r9, #0, #20
 8002f72:	2800      	cmp	r0, #0
 8002f74:	f000 8583 	beq.w	8003a7e <_dtoa_r+0xb7e>
 8002f78:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002f7a:	b953      	cbnz	r3, 8002f92 <_dtoa_r+0x92>
 8002f7c:	4ba3      	ldr	r3, [pc, #652]	; (800320c <_dtoa_r+0x30c>)
 8002f7e:	e021      	b.n	8002fc4 <_dtoa_r+0xc4>
 8002f80:	4ba3      	ldr	r3, [pc, #652]	; (8003210 <_dtoa_r+0x310>)
 8002f82:	9306      	str	r3, [sp, #24]
 8002f84:	3308      	adds	r3, #8
 8002f86:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8002f88:	6013      	str	r3, [r2, #0]
 8002f8a:	9806      	ldr	r0, [sp, #24]
 8002f8c:	b015      	add	sp, #84	; 0x54
 8002f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f92:	4b9e      	ldr	r3, [pc, #632]	; (800320c <_dtoa_r+0x30c>)
 8002f94:	9306      	str	r3, [sp, #24]
 8002f96:	3303      	adds	r3, #3
 8002f98:	e7f5      	b.n	8002f86 <_dtoa_r+0x86>
 8002f9a:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	4630      	mov	r0, r6
 8002fa4:	4639      	mov	r1, r7
 8002fa6:	f7fd fcfb 	bl	80009a0 <__aeabi_dcmpeq>
 8002faa:	4680      	mov	r8, r0
 8002fac:	b160      	cbz	r0, 8002fc8 <_dtoa_r+0xc8>
 8002fae:	2301      	movs	r3, #1
 8002fb0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002fb2:	6013      	str	r3, [r2, #0]
 8002fb4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	f000 855e 	beq.w	8003a78 <_dtoa_r+0xb78>
 8002fbc:	4b95      	ldr	r3, [pc, #596]	; (8003214 <_dtoa_r+0x314>)
 8002fbe:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8002fc0:	6013      	str	r3, [r2, #0]
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	9306      	str	r3, [sp, #24]
 8002fc6:	e7e0      	b.n	8002f8a <_dtoa_r+0x8a>
 8002fc8:	ab12      	add	r3, sp, #72	; 0x48
 8002fca:	9301      	str	r3, [sp, #4]
 8002fcc:	ab13      	add	r3, sp, #76	; 0x4c
 8002fce:	9300      	str	r3, [sp, #0]
 8002fd0:	4632      	mov	r2, r6
 8002fd2:	463b      	mov	r3, r7
 8002fd4:	4620      	mov	r0, r4
 8002fd6:	f001 f817 	bl	8004008 <__d2b>
 8002fda:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8002fde:	4682      	mov	sl, r0
 8002fe0:	2d00      	cmp	r5, #0
 8002fe2:	d07d      	beq.n	80030e0 <_dtoa_r+0x1e0>
 8002fe4:	4630      	mov	r0, r6
 8002fe6:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8002fea:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8002fee:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8002ff2:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8002ff6:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	4b86      	ldr	r3, [pc, #536]	; (8003218 <_dtoa_r+0x318>)
 8002ffe:	f7fd f8b3 	bl	8000168 <__aeabi_dsub>
 8003002:	a37b      	add	r3, pc, #492	; (adr r3, 80031f0 <_dtoa_r+0x2f0>)
 8003004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003008:	f7fd fa62 	bl	80004d0 <__aeabi_dmul>
 800300c:	a37a      	add	r3, pc, #488	; (adr r3, 80031f8 <_dtoa_r+0x2f8>)
 800300e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003012:	f7fd f8ab 	bl	800016c <__adddf3>
 8003016:	4606      	mov	r6, r0
 8003018:	4628      	mov	r0, r5
 800301a:	460f      	mov	r7, r1
 800301c:	f7fd f9f2 	bl	8000404 <__aeabi_i2d>
 8003020:	a377      	add	r3, pc, #476	; (adr r3, 8003200 <_dtoa_r+0x300>)
 8003022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003026:	f7fd fa53 	bl	80004d0 <__aeabi_dmul>
 800302a:	4602      	mov	r2, r0
 800302c:	460b      	mov	r3, r1
 800302e:	4630      	mov	r0, r6
 8003030:	4639      	mov	r1, r7
 8003032:	f7fd f89b 	bl	800016c <__adddf3>
 8003036:	4606      	mov	r6, r0
 8003038:	460f      	mov	r7, r1
 800303a:	f7fd fcf9 	bl	8000a30 <__aeabi_d2iz>
 800303e:	2200      	movs	r2, #0
 8003040:	4683      	mov	fp, r0
 8003042:	2300      	movs	r3, #0
 8003044:	4630      	mov	r0, r6
 8003046:	4639      	mov	r1, r7
 8003048:	f7fd fcb4 	bl	80009b4 <__aeabi_dcmplt>
 800304c:	b158      	cbz	r0, 8003066 <_dtoa_r+0x166>
 800304e:	4658      	mov	r0, fp
 8003050:	f7fd f9d8 	bl	8000404 <__aeabi_i2d>
 8003054:	4602      	mov	r2, r0
 8003056:	460b      	mov	r3, r1
 8003058:	4630      	mov	r0, r6
 800305a:	4639      	mov	r1, r7
 800305c:	f7fd fca0 	bl	80009a0 <__aeabi_dcmpeq>
 8003060:	b908      	cbnz	r0, 8003066 <_dtoa_r+0x166>
 8003062:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8003066:	f1bb 0f16 	cmp.w	fp, #22
 800306a:	d858      	bhi.n	800311e <_dtoa_r+0x21e>
 800306c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003070:	496a      	ldr	r1, [pc, #424]	; (800321c <_dtoa_r+0x31c>)
 8003072:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8003076:	e9d1 0100 	ldrd	r0, r1, [r1]
 800307a:	f7fd fcb9 	bl	80009f0 <__aeabi_dcmpgt>
 800307e:	2800      	cmp	r0, #0
 8003080:	d04f      	beq.n	8003122 <_dtoa_r+0x222>
 8003082:	2300      	movs	r3, #0
 8003084:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8003088:	930d      	str	r3, [sp, #52]	; 0x34
 800308a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800308c:	1b5d      	subs	r5, r3, r5
 800308e:	1e6b      	subs	r3, r5, #1
 8003090:	9307      	str	r3, [sp, #28]
 8003092:	bf43      	ittte	mi
 8003094:	2300      	movmi	r3, #0
 8003096:	f1c5 0801 	rsbmi	r8, r5, #1
 800309a:	9307      	strmi	r3, [sp, #28]
 800309c:	f04f 0800 	movpl.w	r8, #0
 80030a0:	f1bb 0f00 	cmp.w	fp, #0
 80030a4:	db3f      	blt.n	8003126 <_dtoa_r+0x226>
 80030a6:	9b07      	ldr	r3, [sp, #28]
 80030a8:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 80030ac:	445b      	add	r3, fp
 80030ae:	9307      	str	r3, [sp, #28]
 80030b0:	2300      	movs	r3, #0
 80030b2:	9308      	str	r3, [sp, #32]
 80030b4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80030b6:	2b09      	cmp	r3, #9
 80030b8:	f200 80b4 	bhi.w	8003224 <_dtoa_r+0x324>
 80030bc:	2b05      	cmp	r3, #5
 80030be:	bfc4      	itt	gt
 80030c0:	3b04      	subgt	r3, #4
 80030c2:	931e      	strgt	r3, [sp, #120]	; 0x78
 80030c4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80030c6:	bfc8      	it	gt
 80030c8:	2600      	movgt	r6, #0
 80030ca:	f1a3 0302 	sub.w	r3, r3, #2
 80030ce:	bfd8      	it	le
 80030d0:	2601      	movle	r6, #1
 80030d2:	2b03      	cmp	r3, #3
 80030d4:	f200 80b2 	bhi.w	800323c <_dtoa_r+0x33c>
 80030d8:	e8df f003 	tbb	[pc, r3]
 80030dc:	782d8684 	.word	0x782d8684
 80030e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80030e2:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80030e4:	441d      	add	r5, r3
 80030e6:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80030ea:	2b20      	cmp	r3, #32
 80030ec:	dd11      	ble.n	8003112 <_dtoa_r+0x212>
 80030ee:	9a02      	ldr	r2, [sp, #8]
 80030f0:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80030f4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80030f8:	fa22 f000 	lsr.w	r0, r2, r0
 80030fc:	fa09 f303 	lsl.w	r3, r9, r3
 8003100:	4318      	orrs	r0, r3
 8003102:	f7fd f96f 	bl	80003e4 <__aeabi_ui2d>
 8003106:	2301      	movs	r3, #1
 8003108:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800310c:	3d01      	subs	r5, #1
 800310e:	9310      	str	r3, [sp, #64]	; 0x40
 8003110:	e773      	b.n	8002ffa <_dtoa_r+0xfa>
 8003112:	f1c3 0020 	rsb	r0, r3, #32
 8003116:	9b02      	ldr	r3, [sp, #8]
 8003118:	fa03 f000 	lsl.w	r0, r3, r0
 800311c:	e7f1      	b.n	8003102 <_dtoa_r+0x202>
 800311e:	2301      	movs	r3, #1
 8003120:	e7b2      	b.n	8003088 <_dtoa_r+0x188>
 8003122:	900d      	str	r0, [sp, #52]	; 0x34
 8003124:	e7b1      	b.n	800308a <_dtoa_r+0x18a>
 8003126:	f1cb 0300 	rsb	r3, fp, #0
 800312a:	9308      	str	r3, [sp, #32]
 800312c:	2300      	movs	r3, #0
 800312e:	eba8 080b 	sub.w	r8, r8, fp
 8003132:	930c      	str	r3, [sp, #48]	; 0x30
 8003134:	e7be      	b.n	80030b4 <_dtoa_r+0x1b4>
 8003136:	2301      	movs	r3, #1
 8003138:	9309      	str	r3, [sp, #36]	; 0x24
 800313a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800313c:	2b00      	cmp	r3, #0
 800313e:	f340 8080 	ble.w	8003242 <_dtoa_r+0x342>
 8003142:	4699      	mov	r9, r3
 8003144:	9304      	str	r3, [sp, #16]
 8003146:	2200      	movs	r2, #0
 8003148:	2104      	movs	r1, #4
 800314a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800314c:	606a      	str	r2, [r5, #4]
 800314e:	f101 0214 	add.w	r2, r1, #20
 8003152:	429a      	cmp	r2, r3
 8003154:	d97a      	bls.n	800324c <_dtoa_r+0x34c>
 8003156:	6869      	ldr	r1, [r5, #4]
 8003158:	4620      	mov	r0, r4
 800315a:	f000 fcd4 	bl	8003b06 <_Balloc>
 800315e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003160:	6028      	str	r0, [r5, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f1b9 0f0e 	cmp.w	r9, #14
 8003168:	9306      	str	r3, [sp, #24]
 800316a:	f200 80f0 	bhi.w	800334e <_dtoa_r+0x44e>
 800316e:	2e00      	cmp	r6, #0
 8003170:	f000 80ed 	beq.w	800334e <_dtoa_r+0x44e>
 8003174:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003178:	f1bb 0f00 	cmp.w	fp, #0
 800317c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8003180:	dd79      	ble.n	8003276 <_dtoa_r+0x376>
 8003182:	4a26      	ldr	r2, [pc, #152]	; (800321c <_dtoa_r+0x31c>)
 8003184:	f00b 030f 	and.w	r3, fp, #15
 8003188:	ea4f 162b 	mov.w	r6, fp, asr #4
 800318c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003190:	06f0      	lsls	r0, r6, #27
 8003192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003196:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800319a:	d55c      	bpl.n	8003256 <_dtoa_r+0x356>
 800319c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80031a0:	4b1f      	ldr	r3, [pc, #124]	; (8003220 <_dtoa_r+0x320>)
 80031a2:	2503      	movs	r5, #3
 80031a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80031a8:	f7fd fabc 	bl	8000724 <__aeabi_ddiv>
 80031ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80031b0:	f006 060f 	and.w	r6, r6, #15
 80031b4:	4f1a      	ldr	r7, [pc, #104]	; (8003220 <_dtoa_r+0x320>)
 80031b6:	2e00      	cmp	r6, #0
 80031b8:	d14f      	bne.n	800325a <_dtoa_r+0x35a>
 80031ba:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80031be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80031c2:	f7fd faaf 	bl	8000724 <__aeabi_ddiv>
 80031c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80031ca:	e06e      	b.n	80032aa <_dtoa_r+0x3aa>
 80031cc:	2301      	movs	r3, #1
 80031ce:	9309      	str	r3, [sp, #36]	; 0x24
 80031d0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80031d2:	445b      	add	r3, fp
 80031d4:	f103 0901 	add.w	r9, r3, #1
 80031d8:	9304      	str	r3, [sp, #16]
 80031da:	464b      	mov	r3, r9
 80031dc:	2b01      	cmp	r3, #1
 80031de:	bfb8      	it	lt
 80031e0:	2301      	movlt	r3, #1
 80031e2:	e7b0      	b.n	8003146 <_dtoa_r+0x246>
 80031e4:	2300      	movs	r3, #0
 80031e6:	e7a7      	b.n	8003138 <_dtoa_r+0x238>
 80031e8:	2300      	movs	r3, #0
 80031ea:	e7f0      	b.n	80031ce <_dtoa_r+0x2ce>
 80031ec:	f3af 8000 	nop.w
 80031f0:	636f4361 	.word	0x636f4361
 80031f4:	3fd287a7 	.word	0x3fd287a7
 80031f8:	8b60c8b3 	.word	0x8b60c8b3
 80031fc:	3fc68a28 	.word	0x3fc68a28
 8003200:	509f79fb 	.word	0x509f79fb
 8003204:	3fd34413 	.word	0x3fd34413
 8003208:	7ff00000 	.word	0x7ff00000
 800320c:	08004afb 	.word	0x08004afb
 8003210:	08004af2 	.word	0x08004af2
 8003214:	08004acf 	.word	0x08004acf
 8003218:	3ff80000 	.word	0x3ff80000
 800321c:	08004b28 	.word	0x08004b28
 8003220:	08004b00 	.word	0x08004b00
 8003224:	2601      	movs	r6, #1
 8003226:	2300      	movs	r3, #0
 8003228:	9609      	str	r6, [sp, #36]	; 0x24
 800322a:	931e      	str	r3, [sp, #120]	; 0x78
 800322c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003230:	2200      	movs	r2, #0
 8003232:	9304      	str	r3, [sp, #16]
 8003234:	4699      	mov	r9, r3
 8003236:	2312      	movs	r3, #18
 8003238:	921f      	str	r2, [sp, #124]	; 0x7c
 800323a:	e784      	b.n	8003146 <_dtoa_r+0x246>
 800323c:	2301      	movs	r3, #1
 800323e:	9309      	str	r3, [sp, #36]	; 0x24
 8003240:	e7f4      	b.n	800322c <_dtoa_r+0x32c>
 8003242:	2301      	movs	r3, #1
 8003244:	9304      	str	r3, [sp, #16]
 8003246:	4699      	mov	r9, r3
 8003248:	461a      	mov	r2, r3
 800324a:	e7f5      	b.n	8003238 <_dtoa_r+0x338>
 800324c:	686a      	ldr	r2, [r5, #4]
 800324e:	0049      	lsls	r1, r1, #1
 8003250:	3201      	adds	r2, #1
 8003252:	606a      	str	r2, [r5, #4]
 8003254:	e77b      	b.n	800314e <_dtoa_r+0x24e>
 8003256:	2502      	movs	r5, #2
 8003258:	e7ac      	b.n	80031b4 <_dtoa_r+0x2b4>
 800325a:	07f1      	lsls	r1, r6, #31
 800325c:	d508      	bpl.n	8003270 <_dtoa_r+0x370>
 800325e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003262:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003266:	f7fd f933 	bl	80004d0 <__aeabi_dmul>
 800326a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800326e:	3501      	adds	r5, #1
 8003270:	1076      	asrs	r6, r6, #1
 8003272:	3708      	adds	r7, #8
 8003274:	e79f      	b.n	80031b6 <_dtoa_r+0x2b6>
 8003276:	f000 80a5 	beq.w	80033c4 <_dtoa_r+0x4c4>
 800327a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800327e:	f1cb 0600 	rsb	r6, fp, #0
 8003282:	4ba2      	ldr	r3, [pc, #648]	; (800350c <_dtoa_r+0x60c>)
 8003284:	f006 020f 	and.w	r2, r6, #15
 8003288:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800328c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003290:	f7fd f91e 	bl	80004d0 <__aeabi_dmul>
 8003294:	2502      	movs	r5, #2
 8003296:	2300      	movs	r3, #0
 8003298:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800329c:	4f9c      	ldr	r7, [pc, #624]	; (8003510 <_dtoa_r+0x610>)
 800329e:	1136      	asrs	r6, r6, #4
 80032a0:	2e00      	cmp	r6, #0
 80032a2:	f040 8084 	bne.w	80033ae <_dtoa_r+0x4ae>
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d18d      	bne.n	80031c6 <_dtoa_r+0x2c6>
 80032aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	f000 808b 	beq.w	80033c8 <_dtoa_r+0x4c8>
 80032b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80032b6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80032ba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80032be:	2200      	movs	r2, #0
 80032c0:	4b94      	ldr	r3, [pc, #592]	; (8003514 <_dtoa_r+0x614>)
 80032c2:	f7fd fb77 	bl	80009b4 <__aeabi_dcmplt>
 80032c6:	2800      	cmp	r0, #0
 80032c8:	d07e      	beq.n	80033c8 <_dtoa_r+0x4c8>
 80032ca:	f1b9 0f00 	cmp.w	r9, #0
 80032ce:	d07b      	beq.n	80033c8 <_dtoa_r+0x4c8>
 80032d0:	9b04      	ldr	r3, [sp, #16]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	dd37      	ble.n	8003346 <_dtoa_r+0x446>
 80032d6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80032da:	2200      	movs	r2, #0
 80032dc:	4b8e      	ldr	r3, [pc, #568]	; (8003518 <_dtoa_r+0x618>)
 80032de:	f7fd f8f7 	bl	80004d0 <__aeabi_dmul>
 80032e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80032e6:	9e04      	ldr	r6, [sp, #16]
 80032e8:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 80032ec:	3501      	adds	r5, #1
 80032ee:	4628      	mov	r0, r5
 80032f0:	f7fd f888 	bl	8000404 <__aeabi_i2d>
 80032f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80032f8:	f7fd f8ea 	bl	80004d0 <__aeabi_dmul>
 80032fc:	4b87      	ldr	r3, [pc, #540]	; (800351c <_dtoa_r+0x61c>)
 80032fe:	2200      	movs	r2, #0
 8003300:	f7fc ff34 	bl	800016c <__adddf3>
 8003304:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003308:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800330a:	f1a3 7550 	sub.w	r5, r3, #54525952	; 0x3400000
 800330e:	950b      	str	r5, [sp, #44]	; 0x2c
 8003310:	2e00      	cmp	r6, #0
 8003312:	d15c      	bne.n	80033ce <_dtoa_r+0x4ce>
 8003314:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003318:	2200      	movs	r2, #0
 800331a:	4b81      	ldr	r3, [pc, #516]	; (8003520 <_dtoa_r+0x620>)
 800331c:	f7fc ff24 	bl	8000168 <__aeabi_dsub>
 8003320:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003322:	462b      	mov	r3, r5
 8003324:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003328:	f7fd fb62 	bl	80009f0 <__aeabi_dcmpgt>
 800332c:	2800      	cmp	r0, #0
 800332e:	f040 82f7 	bne.w	8003920 <_dtoa_r+0xa20>
 8003332:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003336:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003338:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800333c:	f7fd fb3a 	bl	80009b4 <__aeabi_dcmplt>
 8003340:	2800      	cmp	r0, #0
 8003342:	f040 82eb 	bne.w	800391c <_dtoa_r+0xa1c>
 8003346:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800334a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800334e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003350:	2b00      	cmp	r3, #0
 8003352:	f2c0 8150 	blt.w	80035f6 <_dtoa_r+0x6f6>
 8003356:	f1bb 0f0e 	cmp.w	fp, #14
 800335a:	f300 814c 	bgt.w	80035f6 <_dtoa_r+0x6f6>
 800335e:	4b6b      	ldr	r3, [pc, #428]	; (800350c <_dtoa_r+0x60c>)
 8003360:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003368:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800336c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800336e:	2b00      	cmp	r3, #0
 8003370:	f280 80da 	bge.w	8003528 <_dtoa_r+0x628>
 8003374:	f1b9 0f00 	cmp.w	r9, #0
 8003378:	f300 80d6 	bgt.w	8003528 <_dtoa_r+0x628>
 800337c:	f040 82cd 	bne.w	800391a <_dtoa_r+0xa1a>
 8003380:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003384:	2200      	movs	r2, #0
 8003386:	4b66      	ldr	r3, [pc, #408]	; (8003520 <_dtoa_r+0x620>)
 8003388:	f7fd f8a2 	bl	80004d0 <__aeabi_dmul>
 800338c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003390:	f7fd fb24 	bl	80009dc <__aeabi_dcmpge>
 8003394:	464e      	mov	r6, r9
 8003396:	464f      	mov	r7, r9
 8003398:	2800      	cmp	r0, #0
 800339a:	f040 82a4 	bne.w	80038e6 <_dtoa_r+0x9e6>
 800339e:	9b06      	ldr	r3, [sp, #24]
 80033a0:	9a06      	ldr	r2, [sp, #24]
 80033a2:	1c5d      	adds	r5, r3, #1
 80033a4:	2331      	movs	r3, #49	; 0x31
 80033a6:	f10b 0b01 	add.w	fp, fp, #1
 80033aa:	7013      	strb	r3, [r2, #0]
 80033ac:	e29f      	b.n	80038ee <_dtoa_r+0x9ee>
 80033ae:	07f2      	lsls	r2, r6, #31
 80033b0:	d505      	bpl.n	80033be <_dtoa_r+0x4be>
 80033b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80033b6:	f7fd f88b 	bl	80004d0 <__aeabi_dmul>
 80033ba:	2301      	movs	r3, #1
 80033bc:	3501      	adds	r5, #1
 80033be:	1076      	asrs	r6, r6, #1
 80033c0:	3708      	adds	r7, #8
 80033c2:	e76d      	b.n	80032a0 <_dtoa_r+0x3a0>
 80033c4:	2502      	movs	r5, #2
 80033c6:	e770      	b.n	80032aa <_dtoa_r+0x3aa>
 80033c8:	465f      	mov	r7, fp
 80033ca:	464e      	mov	r6, r9
 80033cc:	e78f      	b.n	80032ee <_dtoa_r+0x3ee>
 80033ce:	9a06      	ldr	r2, [sp, #24]
 80033d0:	4b4e      	ldr	r3, [pc, #312]	; (800350c <_dtoa_r+0x60c>)
 80033d2:	4432      	add	r2, r6
 80033d4:	9211      	str	r2, [sp, #68]	; 0x44
 80033d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80033d8:	1e71      	subs	r1, r6, #1
 80033da:	2a00      	cmp	r2, #0
 80033dc:	d048      	beq.n	8003470 <_dtoa_r+0x570>
 80033de:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80033e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e6:	2000      	movs	r0, #0
 80033e8:	494e      	ldr	r1, [pc, #312]	; (8003524 <_dtoa_r+0x624>)
 80033ea:	f7fd f99b 	bl	8000724 <__aeabi_ddiv>
 80033ee:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80033f2:	f7fc feb9 	bl	8000168 <__aeabi_dsub>
 80033f6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80033fa:	9d06      	ldr	r5, [sp, #24]
 80033fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003400:	f7fd fb16 	bl	8000a30 <__aeabi_d2iz>
 8003404:	4606      	mov	r6, r0
 8003406:	f7fc fffd 	bl	8000404 <__aeabi_i2d>
 800340a:	4602      	mov	r2, r0
 800340c:	460b      	mov	r3, r1
 800340e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003412:	f7fc fea9 	bl	8000168 <__aeabi_dsub>
 8003416:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800341a:	3630      	adds	r6, #48	; 0x30
 800341c:	f805 6b01 	strb.w	r6, [r5], #1
 8003420:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003424:	f7fd fac6 	bl	80009b4 <__aeabi_dcmplt>
 8003428:	2800      	cmp	r0, #0
 800342a:	d164      	bne.n	80034f6 <_dtoa_r+0x5f6>
 800342c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003430:	2000      	movs	r0, #0
 8003432:	4938      	ldr	r1, [pc, #224]	; (8003514 <_dtoa_r+0x614>)
 8003434:	f7fc fe98 	bl	8000168 <__aeabi_dsub>
 8003438:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800343c:	f7fd faba 	bl	80009b4 <__aeabi_dcmplt>
 8003440:	2800      	cmp	r0, #0
 8003442:	f040 80b9 	bne.w	80035b8 <_dtoa_r+0x6b8>
 8003446:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003448:	429d      	cmp	r5, r3
 800344a:	f43f af7c 	beq.w	8003346 <_dtoa_r+0x446>
 800344e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003452:	2200      	movs	r2, #0
 8003454:	4b30      	ldr	r3, [pc, #192]	; (8003518 <_dtoa_r+0x618>)
 8003456:	f7fd f83b 	bl	80004d0 <__aeabi_dmul>
 800345a:	2200      	movs	r2, #0
 800345c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003460:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003464:	4b2c      	ldr	r3, [pc, #176]	; (8003518 <_dtoa_r+0x618>)
 8003466:	f7fd f833 	bl	80004d0 <__aeabi_dmul>
 800346a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800346e:	e7c5      	b.n	80033fc <_dtoa_r+0x4fc>
 8003470:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8003474:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003478:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800347c:	f7fd f828 	bl	80004d0 <__aeabi_dmul>
 8003480:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003484:	9d06      	ldr	r5, [sp, #24]
 8003486:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800348a:	f7fd fad1 	bl	8000a30 <__aeabi_d2iz>
 800348e:	4606      	mov	r6, r0
 8003490:	f7fc ffb8 	bl	8000404 <__aeabi_i2d>
 8003494:	4602      	mov	r2, r0
 8003496:	460b      	mov	r3, r1
 8003498:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800349c:	f7fc fe64 	bl	8000168 <__aeabi_dsub>
 80034a0:	3630      	adds	r6, #48	; 0x30
 80034a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80034a4:	f805 6b01 	strb.w	r6, [r5], #1
 80034a8:	42ab      	cmp	r3, r5
 80034aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80034ae:	f04f 0200 	mov.w	r2, #0
 80034b2:	d124      	bne.n	80034fe <_dtoa_r+0x5fe>
 80034b4:	4b1b      	ldr	r3, [pc, #108]	; (8003524 <_dtoa_r+0x624>)
 80034b6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80034ba:	f7fc fe57 	bl	800016c <__adddf3>
 80034be:	4602      	mov	r2, r0
 80034c0:	460b      	mov	r3, r1
 80034c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80034c6:	f7fd fa93 	bl	80009f0 <__aeabi_dcmpgt>
 80034ca:	2800      	cmp	r0, #0
 80034cc:	d174      	bne.n	80035b8 <_dtoa_r+0x6b8>
 80034ce:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80034d2:	2000      	movs	r0, #0
 80034d4:	4913      	ldr	r1, [pc, #76]	; (8003524 <_dtoa_r+0x624>)
 80034d6:	f7fc fe47 	bl	8000168 <__aeabi_dsub>
 80034da:	4602      	mov	r2, r0
 80034dc:	460b      	mov	r3, r1
 80034de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80034e2:	f7fd fa67 	bl	80009b4 <__aeabi_dcmplt>
 80034e6:	2800      	cmp	r0, #0
 80034e8:	f43f af2d 	beq.w	8003346 <_dtoa_r+0x446>
 80034ec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80034f0:	1e6a      	subs	r2, r5, #1
 80034f2:	2b30      	cmp	r3, #48	; 0x30
 80034f4:	d001      	beq.n	80034fa <_dtoa_r+0x5fa>
 80034f6:	46bb      	mov	fp, r7
 80034f8:	e04d      	b.n	8003596 <_dtoa_r+0x696>
 80034fa:	4615      	mov	r5, r2
 80034fc:	e7f6      	b.n	80034ec <_dtoa_r+0x5ec>
 80034fe:	4b06      	ldr	r3, [pc, #24]	; (8003518 <_dtoa_r+0x618>)
 8003500:	f7fc ffe6 	bl	80004d0 <__aeabi_dmul>
 8003504:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003508:	e7bd      	b.n	8003486 <_dtoa_r+0x586>
 800350a:	bf00      	nop
 800350c:	08004b28 	.word	0x08004b28
 8003510:	08004b00 	.word	0x08004b00
 8003514:	3ff00000 	.word	0x3ff00000
 8003518:	40240000 	.word	0x40240000
 800351c:	401c0000 	.word	0x401c0000
 8003520:	40140000 	.word	0x40140000
 8003524:	3fe00000 	.word	0x3fe00000
 8003528:	9d06      	ldr	r5, [sp, #24]
 800352a:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800352e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003532:	4630      	mov	r0, r6
 8003534:	4639      	mov	r1, r7
 8003536:	f7fd f8f5 	bl	8000724 <__aeabi_ddiv>
 800353a:	f7fd fa79 	bl	8000a30 <__aeabi_d2iz>
 800353e:	4680      	mov	r8, r0
 8003540:	f7fc ff60 	bl	8000404 <__aeabi_i2d>
 8003544:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003548:	f7fc ffc2 	bl	80004d0 <__aeabi_dmul>
 800354c:	4602      	mov	r2, r0
 800354e:	460b      	mov	r3, r1
 8003550:	4630      	mov	r0, r6
 8003552:	4639      	mov	r1, r7
 8003554:	f7fc fe08 	bl	8000168 <__aeabi_dsub>
 8003558:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800355c:	f805 6b01 	strb.w	r6, [r5], #1
 8003560:	9e06      	ldr	r6, [sp, #24]
 8003562:	4602      	mov	r2, r0
 8003564:	1bae      	subs	r6, r5, r6
 8003566:	45b1      	cmp	r9, r6
 8003568:	460b      	mov	r3, r1
 800356a:	d137      	bne.n	80035dc <_dtoa_r+0x6dc>
 800356c:	f7fc fdfe 	bl	800016c <__adddf3>
 8003570:	4606      	mov	r6, r0
 8003572:	460f      	mov	r7, r1
 8003574:	4602      	mov	r2, r0
 8003576:	460b      	mov	r3, r1
 8003578:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800357c:	f7fd fa1a 	bl	80009b4 <__aeabi_dcmplt>
 8003580:	b9c8      	cbnz	r0, 80035b6 <_dtoa_r+0x6b6>
 8003582:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003586:	4632      	mov	r2, r6
 8003588:	463b      	mov	r3, r7
 800358a:	f7fd fa09 	bl	80009a0 <__aeabi_dcmpeq>
 800358e:	b110      	cbz	r0, 8003596 <_dtoa_r+0x696>
 8003590:	f018 0f01 	tst.w	r8, #1
 8003594:	d10f      	bne.n	80035b6 <_dtoa_r+0x6b6>
 8003596:	4651      	mov	r1, sl
 8003598:	4620      	mov	r0, r4
 800359a:	f000 fae8 	bl	8003b6e <_Bfree>
 800359e:	2300      	movs	r3, #0
 80035a0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80035a2:	702b      	strb	r3, [r5, #0]
 80035a4:	f10b 0301 	add.w	r3, fp, #1
 80035a8:	6013      	str	r3, [r2, #0]
 80035aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	f43f acec 	beq.w	8002f8a <_dtoa_r+0x8a>
 80035b2:	601d      	str	r5, [r3, #0]
 80035b4:	e4e9      	b.n	8002f8a <_dtoa_r+0x8a>
 80035b6:	465f      	mov	r7, fp
 80035b8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80035bc:	1e6b      	subs	r3, r5, #1
 80035be:	2a39      	cmp	r2, #57	; 0x39
 80035c0:	d106      	bne.n	80035d0 <_dtoa_r+0x6d0>
 80035c2:	9a06      	ldr	r2, [sp, #24]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d107      	bne.n	80035d8 <_dtoa_r+0x6d8>
 80035c8:	2330      	movs	r3, #48	; 0x30
 80035ca:	7013      	strb	r3, [r2, #0]
 80035cc:	4613      	mov	r3, r2
 80035ce:	3701      	adds	r7, #1
 80035d0:	781a      	ldrb	r2, [r3, #0]
 80035d2:	3201      	adds	r2, #1
 80035d4:	701a      	strb	r2, [r3, #0]
 80035d6:	e78e      	b.n	80034f6 <_dtoa_r+0x5f6>
 80035d8:	461d      	mov	r5, r3
 80035da:	e7ed      	b.n	80035b8 <_dtoa_r+0x6b8>
 80035dc:	2200      	movs	r2, #0
 80035de:	4bb5      	ldr	r3, [pc, #724]	; (80038b4 <_dtoa_r+0x9b4>)
 80035e0:	f7fc ff76 	bl	80004d0 <__aeabi_dmul>
 80035e4:	2200      	movs	r2, #0
 80035e6:	2300      	movs	r3, #0
 80035e8:	4606      	mov	r6, r0
 80035ea:	460f      	mov	r7, r1
 80035ec:	f7fd f9d8 	bl	80009a0 <__aeabi_dcmpeq>
 80035f0:	2800      	cmp	r0, #0
 80035f2:	d09c      	beq.n	800352e <_dtoa_r+0x62e>
 80035f4:	e7cf      	b.n	8003596 <_dtoa_r+0x696>
 80035f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80035f8:	2a00      	cmp	r2, #0
 80035fa:	f000 8129 	beq.w	8003850 <_dtoa_r+0x950>
 80035fe:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003600:	2a01      	cmp	r2, #1
 8003602:	f300 810e 	bgt.w	8003822 <_dtoa_r+0x922>
 8003606:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003608:	2a00      	cmp	r2, #0
 800360a:	f000 8106 	beq.w	800381a <_dtoa_r+0x91a>
 800360e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003612:	4645      	mov	r5, r8
 8003614:	9e08      	ldr	r6, [sp, #32]
 8003616:	9a07      	ldr	r2, [sp, #28]
 8003618:	2101      	movs	r1, #1
 800361a:	441a      	add	r2, r3
 800361c:	4620      	mov	r0, r4
 800361e:	4498      	add	r8, r3
 8003620:	9207      	str	r2, [sp, #28]
 8003622:	f000 fb44 	bl	8003cae <__i2b>
 8003626:	4607      	mov	r7, r0
 8003628:	2d00      	cmp	r5, #0
 800362a:	dd0b      	ble.n	8003644 <_dtoa_r+0x744>
 800362c:	9b07      	ldr	r3, [sp, #28]
 800362e:	2b00      	cmp	r3, #0
 8003630:	dd08      	ble.n	8003644 <_dtoa_r+0x744>
 8003632:	42ab      	cmp	r3, r5
 8003634:	bfa8      	it	ge
 8003636:	462b      	movge	r3, r5
 8003638:	9a07      	ldr	r2, [sp, #28]
 800363a:	eba8 0803 	sub.w	r8, r8, r3
 800363e:	1aed      	subs	r5, r5, r3
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	9307      	str	r3, [sp, #28]
 8003644:	9b08      	ldr	r3, [sp, #32]
 8003646:	b1fb      	cbz	r3, 8003688 <_dtoa_r+0x788>
 8003648:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800364a:	2b00      	cmp	r3, #0
 800364c:	f000 8104 	beq.w	8003858 <_dtoa_r+0x958>
 8003650:	2e00      	cmp	r6, #0
 8003652:	dd11      	ble.n	8003678 <_dtoa_r+0x778>
 8003654:	4639      	mov	r1, r7
 8003656:	4632      	mov	r2, r6
 8003658:	4620      	mov	r0, r4
 800365a:	f000 fbbd 	bl	8003dd8 <__pow5mult>
 800365e:	4652      	mov	r2, sl
 8003660:	4601      	mov	r1, r0
 8003662:	4607      	mov	r7, r0
 8003664:	4620      	mov	r0, r4
 8003666:	f000 fb2b 	bl	8003cc0 <__multiply>
 800366a:	4651      	mov	r1, sl
 800366c:	900a      	str	r0, [sp, #40]	; 0x28
 800366e:	4620      	mov	r0, r4
 8003670:	f000 fa7d 	bl	8003b6e <_Bfree>
 8003674:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003676:	469a      	mov	sl, r3
 8003678:	9b08      	ldr	r3, [sp, #32]
 800367a:	1b9a      	subs	r2, r3, r6
 800367c:	d004      	beq.n	8003688 <_dtoa_r+0x788>
 800367e:	4651      	mov	r1, sl
 8003680:	4620      	mov	r0, r4
 8003682:	f000 fba9 	bl	8003dd8 <__pow5mult>
 8003686:	4682      	mov	sl, r0
 8003688:	2101      	movs	r1, #1
 800368a:	4620      	mov	r0, r4
 800368c:	f000 fb0f 	bl	8003cae <__i2b>
 8003690:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003692:	4606      	mov	r6, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	f340 80e1 	ble.w	800385c <_dtoa_r+0x95c>
 800369a:	461a      	mov	r2, r3
 800369c:	4601      	mov	r1, r0
 800369e:	4620      	mov	r0, r4
 80036a0:	f000 fb9a 	bl	8003dd8 <__pow5mult>
 80036a4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80036a6:	4606      	mov	r6, r0
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	f340 80da 	ble.w	8003862 <_dtoa_r+0x962>
 80036ae:	2300      	movs	r3, #0
 80036b0:	9308      	str	r3, [sp, #32]
 80036b2:	6933      	ldr	r3, [r6, #16]
 80036b4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80036b8:	6918      	ldr	r0, [r3, #16]
 80036ba:	f000 faaa 	bl	8003c12 <__hi0bits>
 80036be:	f1c0 0020 	rsb	r0, r0, #32
 80036c2:	9b07      	ldr	r3, [sp, #28]
 80036c4:	4418      	add	r0, r3
 80036c6:	f010 001f 	ands.w	r0, r0, #31
 80036ca:	f000 80f0 	beq.w	80038ae <_dtoa_r+0x9ae>
 80036ce:	f1c0 0320 	rsb	r3, r0, #32
 80036d2:	2b04      	cmp	r3, #4
 80036d4:	f340 80e2 	ble.w	800389c <_dtoa_r+0x99c>
 80036d8:	9b07      	ldr	r3, [sp, #28]
 80036da:	f1c0 001c 	rsb	r0, r0, #28
 80036de:	4480      	add	r8, r0
 80036e0:	4405      	add	r5, r0
 80036e2:	4403      	add	r3, r0
 80036e4:	9307      	str	r3, [sp, #28]
 80036e6:	f1b8 0f00 	cmp.w	r8, #0
 80036ea:	dd05      	ble.n	80036f8 <_dtoa_r+0x7f8>
 80036ec:	4651      	mov	r1, sl
 80036ee:	4642      	mov	r2, r8
 80036f0:	4620      	mov	r0, r4
 80036f2:	f000 fbbf 	bl	8003e74 <__lshift>
 80036f6:	4682      	mov	sl, r0
 80036f8:	9b07      	ldr	r3, [sp, #28]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	dd05      	ble.n	800370a <_dtoa_r+0x80a>
 80036fe:	4631      	mov	r1, r6
 8003700:	461a      	mov	r2, r3
 8003702:	4620      	mov	r0, r4
 8003704:	f000 fbb6 	bl	8003e74 <__lshift>
 8003708:	4606      	mov	r6, r0
 800370a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800370c:	2b00      	cmp	r3, #0
 800370e:	f000 80d3 	beq.w	80038b8 <_dtoa_r+0x9b8>
 8003712:	4631      	mov	r1, r6
 8003714:	4650      	mov	r0, sl
 8003716:	f000 fbfe 	bl	8003f16 <__mcmp>
 800371a:	2800      	cmp	r0, #0
 800371c:	f280 80cc 	bge.w	80038b8 <_dtoa_r+0x9b8>
 8003720:	2300      	movs	r3, #0
 8003722:	4651      	mov	r1, sl
 8003724:	220a      	movs	r2, #10
 8003726:	4620      	mov	r0, r4
 8003728:	f000 fa38 	bl	8003b9c <__multadd>
 800372c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800372e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8003732:	4682      	mov	sl, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	f000 81a9 	beq.w	8003a8c <_dtoa_r+0xb8c>
 800373a:	2300      	movs	r3, #0
 800373c:	4639      	mov	r1, r7
 800373e:	220a      	movs	r2, #10
 8003740:	4620      	mov	r0, r4
 8003742:	f000 fa2b 	bl	8003b9c <__multadd>
 8003746:	9b04      	ldr	r3, [sp, #16]
 8003748:	4607      	mov	r7, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	dc03      	bgt.n	8003756 <_dtoa_r+0x856>
 800374e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003750:	2b02      	cmp	r3, #2
 8003752:	f300 80b9 	bgt.w	80038c8 <_dtoa_r+0x9c8>
 8003756:	2d00      	cmp	r5, #0
 8003758:	dd05      	ble.n	8003766 <_dtoa_r+0x866>
 800375a:	4639      	mov	r1, r7
 800375c:	462a      	mov	r2, r5
 800375e:	4620      	mov	r0, r4
 8003760:	f000 fb88 	bl	8003e74 <__lshift>
 8003764:	4607      	mov	r7, r0
 8003766:	9b08      	ldr	r3, [sp, #32]
 8003768:	2b00      	cmp	r3, #0
 800376a:	f000 8110 	beq.w	800398e <_dtoa_r+0xa8e>
 800376e:	6879      	ldr	r1, [r7, #4]
 8003770:	4620      	mov	r0, r4
 8003772:	f000 f9c8 	bl	8003b06 <_Balloc>
 8003776:	4605      	mov	r5, r0
 8003778:	693a      	ldr	r2, [r7, #16]
 800377a:	f107 010c 	add.w	r1, r7, #12
 800377e:	3202      	adds	r2, #2
 8003780:	0092      	lsls	r2, r2, #2
 8003782:	300c      	adds	r0, #12
 8003784:	f000 f9b4 	bl	8003af0 <memcpy>
 8003788:	2201      	movs	r2, #1
 800378a:	4629      	mov	r1, r5
 800378c:	4620      	mov	r0, r4
 800378e:	f000 fb71 	bl	8003e74 <__lshift>
 8003792:	9707      	str	r7, [sp, #28]
 8003794:	4607      	mov	r7, r0
 8003796:	9b02      	ldr	r3, [sp, #8]
 8003798:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800379c:	f003 0301 	and.w	r3, r3, #1
 80037a0:	9308      	str	r3, [sp, #32]
 80037a2:	4631      	mov	r1, r6
 80037a4:	4650      	mov	r0, sl
 80037a6:	f7ff fb1f 	bl	8002de8 <quorem>
 80037aa:	9907      	ldr	r1, [sp, #28]
 80037ac:	4605      	mov	r5, r0
 80037ae:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80037b2:	4650      	mov	r0, sl
 80037b4:	f000 fbaf 	bl	8003f16 <__mcmp>
 80037b8:	463a      	mov	r2, r7
 80037ba:	9002      	str	r0, [sp, #8]
 80037bc:	4631      	mov	r1, r6
 80037be:	4620      	mov	r0, r4
 80037c0:	f000 fbc3 	bl	8003f4a <__mdiff>
 80037c4:	68c3      	ldr	r3, [r0, #12]
 80037c6:	4602      	mov	r2, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	f040 80e2 	bne.w	8003992 <_dtoa_r+0xa92>
 80037ce:	4601      	mov	r1, r0
 80037d0:	9009      	str	r0, [sp, #36]	; 0x24
 80037d2:	4650      	mov	r0, sl
 80037d4:	f000 fb9f 	bl	8003f16 <__mcmp>
 80037d8:	4603      	mov	r3, r0
 80037da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80037dc:	4611      	mov	r1, r2
 80037de:	4620      	mov	r0, r4
 80037e0:	9309      	str	r3, [sp, #36]	; 0x24
 80037e2:	f000 f9c4 	bl	8003b6e <_Bfree>
 80037e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	f040 80d4 	bne.w	8003996 <_dtoa_r+0xa96>
 80037ee:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80037f0:	2a00      	cmp	r2, #0
 80037f2:	f040 80d0 	bne.w	8003996 <_dtoa_r+0xa96>
 80037f6:	9a08      	ldr	r2, [sp, #32]
 80037f8:	2a00      	cmp	r2, #0
 80037fa:	f040 80cc 	bne.w	8003996 <_dtoa_r+0xa96>
 80037fe:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8003802:	f000 80e8 	beq.w	80039d6 <_dtoa_r+0xad6>
 8003806:	9b02      	ldr	r3, [sp, #8]
 8003808:	2b00      	cmp	r3, #0
 800380a:	dd01      	ble.n	8003810 <_dtoa_r+0x910>
 800380c:	f105 0931 	add.w	r9, r5, #49	; 0x31
 8003810:	f108 0501 	add.w	r5, r8, #1
 8003814:	f888 9000 	strb.w	r9, [r8]
 8003818:	e06b      	b.n	80038f2 <_dtoa_r+0x9f2>
 800381a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800381c:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003820:	e6f7      	b.n	8003612 <_dtoa_r+0x712>
 8003822:	9b08      	ldr	r3, [sp, #32]
 8003824:	f109 36ff 	add.w	r6, r9, #4294967295	; 0xffffffff
 8003828:	42b3      	cmp	r3, r6
 800382a:	bfb7      	itett	lt
 800382c:	9b08      	ldrlt	r3, [sp, #32]
 800382e:	1b9e      	subge	r6, r3, r6
 8003830:	1af2      	sublt	r2, r6, r3
 8003832:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8003834:	bfbf      	itttt	lt
 8003836:	9608      	strlt	r6, [sp, #32]
 8003838:	189b      	addlt	r3, r3, r2
 800383a:	930c      	strlt	r3, [sp, #48]	; 0x30
 800383c:	2600      	movlt	r6, #0
 800383e:	f1b9 0f00 	cmp.w	r9, #0
 8003842:	bfb9      	ittee	lt
 8003844:	eba8 0509 	sublt.w	r5, r8, r9
 8003848:	2300      	movlt	r3, #0
 800384a:	4645      	movge	r5, r8
 800384c:	464b      	movge	r3, r9
 800384e:	e6e2      	b.n	8003616 <_dtoa_r+0x716>
 8003850:	9e08      	ldr	r6, [sp, #32]
 8003852:	4645      	mov	r5, r8
 8003854:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8003856:	e6e7      	b.n	8003628 <_dtoa_r+0x728>
 8003858:	9a08      	ldr	r2, [sp, #32]
 800385a:	e710      	b.n	800367e <_dtoa_r+0x77e>
 800385c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800385e:	2b01      	cmp	r3, #1
 8003860:	dc18      	bgt.n	8003894 <_dtoa_r+0x994>
 8003862:	9b02      	ldr	r3, [sp, #8]
 8003864:	b9b3      	cbnz	r3, 8003894 <_dtoa_r+0x994>
 8003866:	9b03      	ldr	r3, [sp, #12]
 8003868:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800386c:	b9a3      	cbnz	r3, 8003898 <_dtoa_r+0x998>
 800386e:	9b03      	ldr	r3, [sp, #12]
 8003870:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003874:	0d1b      	lsrs	r3, r3, #20
 8003876:	051b      	lsls	r3, r3, #20
 8003878:	b12b      	cbz	r3, 8003886 <_dtoa_r+0x986>
 800387a:	9b07      	ldr	r3, [sp, #28]
 800387c:	f108 0801 	add.w	r8, r8, #1
 8003880:	3301      	adds	r3, #1
 8003882:	9307      	str	r3, [sp, #28]
 8003884:	2301      	movs	r3, #1
 8003886:	9308      	str	r3, [sp, #32]
 8003888:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800388a:	2b00      	cmp	r3, #0
 800388c:	f47f af11 	bne.w	80036b2 <_dtoa_r+0x7b2>
 8003890:	2001      	movs	r0, #1
 8003892:	e716      	b.n	80036c2 <_dtoa_r+0x7c2>
 8003894:	2300      	movs	r3, #0
 8003896:	e7f6      	b.n	8003886 <_dtoa_r+0x986>
 8003898:	9b02      	ldr	r3, [sp, #8]
 800389a:	e7f4      	b.n	8003886 <_dtoa_r+0x986>
 800389c:	f43f af23 	beq.w	80036e6 <_dtoa_r+0x7e6>
 80038a0:	9a07      	ldr	r2, [sp, #28]
 80038a2:	331c      	adds	r3, #28
 80038a4:	441a      	add	r2, r3
 80038a6:	4498      	add	r8, r3
 80038a8:	441d      	add	r5, r3
 80038aa:	4613      	mov	r3, r2
 80038ac:	e71a      	b.n	80036e4 <_dtoa_r+0x7e4>
 80038ae:	4603      	mov	r3, r0
 80038b0:	e7f6      	b.n	80038a0 <_dtoa_r+0x9a0>
 80038b2:	bf00      	nop
 80038b4:	40240000 	.word	0x40240000
 80038b8:	f1b9 0f00 	cmp.w	r9, #0
 80038bc:	dc33      	bgt.n	8003926 <_dtoa_r+0xa26>
 80038be:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	dd30      	ble.n	8003926 <_dtoa_r+0xa26>
 80038c4:	f8cd 9010 	str.w	r9, [sp, #16]
 80038c8:	9b04      	ldr	r3, [sp, #16]
 80038ca:	b963      	cbnz	r3, 80038e6 <_dtoa_r+0x9e6>
 80038cc:	4631      	mov	r1, r6
 80038ce:	2205      	movs	r2, #5
 80038d0:	4620      	mov	r0, r4
 80038d2:	f000 f963 	bl	8003b9c <__multadd>
 80038d6:	4601      	mov	r1, r0
 80038d8:	4606      	mov	r6, r0
 80038da:	4650      	mov	r0, sl
 80038dc:	f000 fb1b 	bl	8003f16 <__mcmp>
 80038e0:	2800      	cmp	r0, #0
 80038e2:	f73f ad5c 	bgt.w	800339e <_dtoa_r+0x49e>
 80038e6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80038e8:	9d06      	ldr	r5, [sp, #24]
 80038ea:	ea6f 0b03 	mvn.w	fp, r3
 80038ee:	2300      	movs	r3, #0
 80038f0:	9307      	str	r3, [sp, #28]
 80038f2:	4631      	mov	r1, r6
 80038f4:	4620      	mov	r0, r4
 80038f6:	f000 f93a 	bl	8003b6e <_Bfree>
 80038fa:	2f00      	cmp	r7, #0
 80038fc:	f43f ae4b 	beq.w	8003596 <_dtoa_r+0x696>
 8003900:	9b07      	ldr	r3, [sp, #28]
 8003902:	b12b      	cbz	r3, 8003910 <_dtoa_r+0xa10>
 8003904:	42bb      	cmp	r3, r7
 8003906:	d003      	beq.n	8003910 <_dtoa_r+0xa10>
 8003908:	4619      	mov	r1, r3
 800390a:	4620      	mov	r0, r4
 800390c:	f000 f92f 	bl	8003b6e <_Bfree>
 8003910:	4639      	mov	r1, r7
 8003912:	4620      	mov	r0, r4
 8003914:	f000 f92b 	bl	8003b6e <_Bfree>
 8003918:	e63d      	b.n	8003596 <_dtoa_r+0x696>
 800391a:	2600      	movs	r6, #0
 800391c:	4637      	mov	r7, r6
 800391e:	e7e2      	b.n	80038e6 <_dtoa_r+0x9e6>
 8003920:	46bb      	mov	fp, r7
 8003922:	4637      	mov	r7, r6
 8003924:	e53b      	b.n	800339e <_dtoa_r+0x49e>
 8003926:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003928:	f8cd 9010 	str.w	r9, [sp, #16]
 800392c:	2b00      	cmp	r3, #0
 800392e:	f47f af12 	bne.w	8003756 <_dtoa_r+0x856>
 8003932:	9d06      	ldr	r5, [sp, #24]
 8003934:	4631      	mov	r1, r6
 8003936:	4650      	mov	r0, sl
 8003938:	f7ff fa56 	bl	8002de8 <quorem>
 800393c:	9b06      	ldr	r3, [sp, #24]
 800393e:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8003942:	f805 9b01 	strb.w	r9, [r5], #1
 8003946:	9a04      	ldr	r2, [sp, #16]
 8003948:	1aeb      	subs	r3, r5, r3
 800394a:	429a      	cmp	r2, r3
 800394c:	f300 8081 	bgt.w	8003a52 <_dtoa_r+0xb52>
 8003950:	9b06      	ldr	r3, [sp, #24]
 8003952:	2a01      	cmp	r2, #1
 8003954:	bfac      	ite	ge
 8003956:	189b      	addge	r3, r3, r2
 8003958:	3301      	addlt	r3, #1
 800395a:	4698      	mov	r8, r3
 800395c:	2300      	movs	r3, #0
 800395e:	9307      	str	r3, [sp, #28]
 8003960:	4651      	mov	r1, sl
 8003962:	2201      	movs	r2, #1
 8003964:	4620      	mov	r0, r4
 8003966:	f000 fa85 	bl	8003e74 <__lshift>
 800396a:	4631      	mov	r1, r6
 800396c:	4682      	mov	sl, r0
 800396e:	f000 fad2 	bl	8003f16 <__mcmp>
 8003972:	2800      	cmp	r0, #0
 8003974:	dc34      	bgt.n	80039e0 <_dtoa_r+0xae0>
 8003976:	d102      	bne.n	800397e <_dtoa_r+0xa7e>
 8003978:	f019 0f01 	tst.w	r9, #1
 800397c:	d130      	bne.n	80039e0 <_dtoa_r+0xae0>
 800397e:	4645      	mov	r5, r8
 8003980:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003984:	1e6a      	subs	r2, r5, #1
 8003986:	2b30      	cmp	r3, #48	; 0x30
 8003988:	d1b3      	bne.n	80038f2 <_dtoa_r+0x9f2>
 800398a:	4615      	mov	r5, r2
 800398c:	e7f8      	b.n	8003980 <_dtoa_r+0xa80>
 800398e:	4638      	mov	r0, r7
 8003990:	e6ff      	b.n	8003792 <_dtoa_r+0x892>
 8003992:	2301      	movs	r3, #1
 8003994:	e722      	b.n	80037dc <_dtoa_r+0x8dc>
 8003996:	9a02      	ldr	r2, [sp, #8]
 8003998:	2a00      	cmp	r2, #0
 800399a:	db04      	blt.n	80039a6 <_dtoa_r+0xaa6>
 800399c:	d128      	bne.n	80039f0 <_dtoa_r+0xaf0>
 800399e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80039a0:	bb32      	cbnz	r2, 80039f0 <_dtoa_r+0xaf0>
 80039a2:	9a08      	ldr	r2, [sp, #32]
 80039a4:	bb22      	cbnz	r2, 80039f0 <_dtoa_r+0xaf0>
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	f77f af32 	ble.w	8003810 <_dtoa_r+0x910>
 80039ac:	4651      	mov	r1, sl
 80039ae:	2201      	movs	r2, #1
 80039b0:	4620      	mov	r0, r4
 80039b2:	f000 fa5f 	bl	8003e74 <__lshift>
 80039b6:	4631      	mov	r1, r6
 80039b8:	4682      	mov	sl, r0
 80039ba:	f000 faac 	bl	8003f16 <__mcmp>
 80039be:	2800      	cmp	r0, #0
 80039c0:	dc05      	bgt.n	80039ce <_dtoa_r+0xace>
 80039c2:	f47f af25 	bne.w	8003810 <_dtoa_r+0x910>
 80039c6:	f019 0f01 	tst.w	r9, #1
 80039ca:	f43f af21 	beq.w	8003810 <_dtoa_r+0x910>
 80039ce:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80039d2:	f47f af1b 	bne.w	800380c <_dtoa_r+0x90c>
 80039d6:	2339      	movs	r3, #57	; 0x39
 80039d8:	f108 0801 	add.w	r8, r8, #1
 80039dc:	f808 3c01 	strb.w	r3, [r8, #-1]
 80039e0:	4645      	mov	r5, r8
 80039e2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80039e6:	1e6a      	subs	r2, r5, #1
 80039e8:	2b39      	cmp	r3, #57	; 0x39
 80039ea:	d03a      	beq.n	8003a62 <_dtoa_r+0xb62>
 80039ec:	3301      	adds	r3, #1
 80039ee:	e03f      	b.n	8003a70 <_dtoa_r+0xb70>
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	f108 0501 	add.w	r5, r8, #1
 80039f6:	dd05      	ble.n	8003a04 <_dtoa_r+0xb04>
 80039f8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80039fc:	d0eb      	beq.n	80039d6 <_dtoa_r+0xad6>
 80039fe:	f109 0901 	add.w	r9, r9, #1
 8003a02:	e707      	b.n	8003814 <_dtoa_r+0x914>
 8003a04:	9b06      	ldr	r3, [sp, #24]
 8003a06:	9a04      	ldr	r2, [sp, #16]
 8003a08:	1aeb      	subs	r3, r5, r3
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	46a8      	mov	r8, r5
 8003a0e:	f805 9c01 	strb.w	r9, [r5, #-1]
 8003a12:	d0a5      	beq.n	8003960 <_dtoa_r+0xa60>
 8003a14:	4651      	mov	r1, sl
 8003a16:	2300      	movs	r3, #0
 8003a18:	220a      	movs	r2, #10
 8003a1a:	4620      	mov	r0, r4
 8003a1c:	f000 f8be 	bl	8003b9c <__multadd>
 8003a20:	9b07      	ldr	r3, [sp, #28]
 8003a22:	4682      	mov	sl, r0
 8003a24:	42bb      	cmp	r3, r7
 8003a26:	f04f 020a 	mov.w	r2, #10
 8003a2a:	f04f 0300 	mov.w	r3, #0
 8003a2e:	9907      	ldr	r1, [sp, #28]
 8003a30:	4620      	mov	r0, r4
 8003a32:	d104      	bne.n	8003a3e <_dtoa_r+0xb3e>
 8003a34:	f000 f8b2 	bl	8003b9c <__multadd>
 8003a38:	9007      	str	r0, [sp, #28]
 8003a3a:	4607      	mov	r7, r0
 8003a3c:	e6b1      	b.n	80037a2 <_dtoa_r+0x8a2>
 8003a3e:	f000 f8ad 	bl	8003b9c <__multadd>
 8003a42:	2300      	movs	r3, #0
 8003a44:	9007      	str	r0, [sp, #28]
 8003a46:	220a      	movs	r2, #10
 8003a48:	4639      	mov	r1, r7
 8003a4a:	4620      	mov	r0, r4
 8003a4c:	f000 f8a6 	bl	8003b9c <__multadd>
 8003a50:	e7f3      	b.n	8003a3a <_dtoa_r+0xb3a>
 8003a52:	4651      	mov	r1, sl
 8003a54:	2300      	movs	r3, #0
 8003a56:	220a      	movs	r2, #10
 8003a58:	4620      	mov	r0, r4
 8003a5a:	f000 f89f 	bl	8003b9c <__multadd>
 8003a5e:	4682      	mov	sl, r0
 8003a60:	e768      	b.n	8003934 <_dtoa_r+0xa34>
 8003a62:	9b06      	ldr	r3, [sp, #24]
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d105      	bne.n	8003a74 <_dtoa_r+0xb74>
 8003a68:	2331      	movs	r3, #49	; 0x31
 8003a6a:	9a06      	ldr	r2, [sp, #24]
 8003a6c:	f10b 0b01 	add.w	fp, fp, #1
 8003a70:	7013      	strb	r3, [r2, #0]
 8003a72:	e73e      	b.n	80038f2 <_dtoa_r+0x9f2>
 8003a74:	4615      	mov	r5, r2
 8003a76:	e7b4      	b.n	80039e2 <_dtoa_r+0xae2>
 8003a78:	4b09      	ldr	r3, [pc, #36]	; (8003aa0 <_dtoa_r+0xba0>)
 8003a7a:	f7ff baa3 	b.w	8002fc4 <_dtoa_r+0xc4>
 8003a7e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	f47f aa7d 	bne.w	8002f80 <_dtoa_r+0x80>
 8003a86:	4b07      	ldr	r3, [pc, #28]	; (8003aa4 <_dtoa_r+0xba4>)
 8003a88:	f7ff ba9c 	b.w	8002fc4 <_dtoa_r+0xc4>
 8003a8c:	9b04      	ldr	r3, [sp, #16]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	f73f af4f 	bgt.w	8003932 <_dtoa_r+0xa32>
 8003a94:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	f77f af4b 	ble.w	8003932 <_dtoa_r+0xa32>
 8003a9c:	e714      	b.n	80038c8 <_dtoa_r+0x9c8>
 8003a9e:	bf00      	nop
 8003aa0:	08004ace 	.word	0x08004ace
 8003aa4:	08004af2 	.word	0x08004af2

08003aa8 <_localeconv_r>:
 8003aa8:	4b04      	ldr	r3, [pc, #16]	; (8003abc <_localeconv_r+0x14>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	6a18      	ldr	r0, [r3, #32]
 8003aae:	4b04      	ldr	r3, [pc, #16]	; (8003ac0 <_localeconv_r+0x18>)
 8003ab0:	2800      	cmp	r0, #0
 8003ab2:	bf08      	it	eq
 8003ab4:	4618      	moveq	r0, r3
 8003ab6:	30f0      	adds	r0, #240	; 0xf0
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	2000000c 	.word	0x2000000c
 8003ac0:	20000070 	.word	0x20000070

08003ac4 <malloc>:
 8003ac4:	4b02      	ldr	r3, [pc, #8]	; (8003ad0 <malloc+0xc>)
 8003ac6:	4601      	mov	r1, r0
 8003ac8:	6818      	ldr	r0, [r3, #0]
 8003aca:	f000 bb47 	b.w	800415c <_malloc_r>
 8003ace:	bf00      	nop
 8003ad0:	2000000c 	.word	0x2000000c

08003ad4 <memchr>:
 8003ad4:	b510      	push	{r4, lr}
 8003ad6:	b2c9      	uxtb	r1, r1
 8003ad8:	4402      	add	r2, r0
 8003ada:	4290      	cmp	r0, r2
 8003adc:	4603      	mov	r3, r0
 8003ade:	d101      	bne.n	8003ae4 <memchr+0x10>
 8003ae0:	2000      	movs	r0, #0
 8003ae2:	bd10      	pop	{r4, pc}
 8003ae4:	781c      	ldrb	r4, [r3, #0]
 8003ae6:	3001      	adds	r0, #1
 8003ae8:	428c      	cmp	r4, r1
 8003aea:	d1f6      	bne.n	8003ada <memchr+0x6>
 8003aec:	4618      	mov	r0, r3
 8003aee:	bd10      	pop	{r4, pc}

08003af0 <memcpy>:
 8003af0:	b510      	push	{r4, lr}
 8003af2:	1e43      	subs	r3, r0, #1
 8003af4:	440a      	add	r2, r1
 8003af6:	4291      	cmp	r1, r2
 8003af8:	d100      	bne.n	8003afc <memcpy+0xc>
 8003afa:	bd10      	pop	{r4, pc}
 8003afc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b00:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b04:	e7f7      	b.n	8003af6 <memcpy+0x6>

08003b06 <_Balloc>:
 8003b06:	b570      	push	{r4, r5, r6, lr}
 8003b08:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003b0a:	4604      	mov	r4, r0
 8003b0c:	460e      	mov	r6, r1
 8003b0e:	b93d      	cbnz	r5, 8003b20 <_Balloc+0x1a>
 8003b10:	2010      	movs	r0, #16
 8003b12:	f7ff ffd7 	bl	8003ac4 <malloc>
 8003b16:	6260      	str	r0, [r4, #36]	; 0x24
 8003b18:	6045      	str	r5, [r0, #4]
 8003b1a:	6085      	str	r5, [r0, #8]
 8003b1c:	6005      	str	r5, [r0, #0]
 8003b1e:	60c5      	str	r5, [r0, #12]
 8003b20:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003b22:	68eb      	ldr	r3, [r5, #12]
 8003b24:	b183      	cbz	r3, 8003b48 <_Balloc+0x42>
 8003b26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8003b2e:	b9b8      	cbnz	r0, 8003b60 <_Balloc+0x5a>
 8003b30:	2101      	movs	r1, #1
 8003b32:	fa01 f506 	lsl.w	r5, r1, r6
 8003b36:	1d6a      	adds	r2, r5, #5
 8003b38:	0092      	lsls	r2, r2, #2
 8003b3a:	4620      	mov	r0, r4
 8003b3c:	f000 fab3 	bl	80040a6 <_calloc_r>
 8003b40:	b160      	cbz	r0, 8003b5c <_Balloc+0x56>
 8003b42:	6046      	str	r6, [r0, #4]
 8003b44:	6085      	str	r5, [r0, #8]
 8003b46:	e00e      	b.n	8003b66 <_Balloc+0x60>
 8003b48:	2221      	movs	r2, #33	; 0x21
 8003b4a:	2104      	movs	r1, #4
 8003b4c:	4620      	mov	r0, r4
 8003b4e:	f000 faaa 	bl	80040a6 <_calloc_r>
 8003b52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b54:	60e8      	str	r0, [r5, #12]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d1e4      	bne.n	8003b26 <_Balloc+0x20>
 8003b5c:	2000      	movs	r0, #0
 8003b5e:	bd70      	pop	{r4, r5, r6, pc}
 8003b60:	6802      	ldr	r2, [r0, #0]
 8003b62:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8003b66:	2300      	movs	r3, #0
 8003b68:	6103      	str	r3, [r0, #16]
 8003b6a:	60c3      	str	r3, [r0, #12]
 8003b6c:	bd70      	pop	{r4, r5, r6, pc}

08003b6e <_Bfree>:
 8003b6e:	b570      	push	{r4, r5, r6, lr}
 8003b70:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8003b72:	4606      	mov	r6, r0
 8003b74:	460d      	mov	r5, r1
 8003b76:	b93c      	cbnz	r4, 8003b88 <_Bfree+0x1a>
 8003b78:	2010      	movs	r0, #16
 8003b7a:	f7ff ffa3 	bl	8003ac4 <malloc>
 8003b7e:	6270      	str	r0, [r6, #36]	; 0x24
 8003b80:	6044      	str	r4, [r0, #4]
 8003b82:	6084      	str	r4, [r0, #8]
 8003b84:	6004      	str	r4, [r0, #0]
 8003b86:	60c4      	str	r4, [r0, #12]
 8003b88:	b13d      	cbz	r5, 8003b9a <_Bfree+0x2c>
 8003b8a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003b8c:	686a      	ldr	r2, [r5, #4]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003b94:	6029      	str	r1, [r5, #0]
 8003b96:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8003b9a:	bd70      	pop	{r4, r5, r6, pc}

08003b9c <__multadd>:
 8003b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ba0:	461f      	mov	r7, r3
 8003ba2:	4606      	mov	r6, r0
 8003ba4:	460c      	mov	r4, r1
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	690d      	ldr	r5, [r1, #16]
 8003baa:	f101 0e14 	add.w	lr, r1, #20
 8003bae:	f8de 0000 	ldr.w	r0, [lr]
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	b281      	uxth	r1, r0
 8003bb6:	fb02 7101 	mla	r1, r2, r1, r7
 8003bba:	0c00      	lsrs	r0, r0, #16
 8003bbc:	0c0f      	lsrs	r7, r1, #16
 8003bbe:	fb02 7000 	mla	r0, r2, r0, r7
 8003bc2:	b289      	uxth	r1, r1
 8003bc4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8003bc8:	429d      	cmp	r5, r3
 8003bca:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8003bce:	f84e 1b04 	str.w	r1, [lr], #4
 8003bd2:	dcec      	bgt.n	8003bae <__multadd+0x12>
 8003bd4:	b1d7      	cbz	r7, 8003c0c <__multadd+0x70>
 8003bd6:	68a3      	ldr	r3, [r4, #8]
 8003bd8:	429d      	cmp	r5, r3
 8003bda:	db12      	blt.n	8003c02 <__multadd+0x66>
 8003bdc:	6861      	ldr	r1, [r4, #4]
 8003bde:	4630      	mov	r0, r6
 8003be0:	3101      	adds	r1, #1
 8003be2:	f7ff ff90 	bl	8003b06 <_Balloc>
 8003be6:	4680      	mov	r8, r0
 8003be8:	6922      	ldr	r2, [r4, #16]
 8003bea:	f104 010c 	add.w	r1, r4, #12
 8003bee:	3202      	adds	r2, #2
 8003bf0:	0092      	lsls	r2, r2, #2
 8003bf2:	300c      	adds	r0, #12
 8003bf4:	f7ff ff7c 	bl	8003af0 <memcpy>
 8003bf8:	4621      	mov	r1, r4
 8003bfa:	4630      	mov	r0, r6
 8003bfc:	f7ff ffb7 	bl	8003b6e <_Bfree>
 8003c00:	4644      	mov	r4, r8
 8003c02:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8003c06:	3501      	adds	r5, #1
 8003c08:	615f      	str	r7, [r3, #20]
 8003c0a:	6125      	str	r5, [r4, #16]
 8003c0c:	4620      	mov	r0, r4
 8003c0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003c12 <__hi0bits>:
 8003c12:	0c02      	lsrs	r2, r0, #16
 8003c14:	0412      	lsls	r2, r2, #16
 8003c16:	4603      	mov	r3, r0
 8003c18:	b9b2      	cbnz	r2, 8003c48 <__hi0bits+0x36>
 8003c1a:	0403      	lsls	r3, r0, #16
 8003c1c:	2010      	movs	r0, #16
 8003c1e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8003c22:	bf04      	itt	eq
 8003c24:	021b      	lsleq	r3, r3, #8
 8003c26:	3008      	addeq	r0, #8
 8003c28:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8003c2c:	bf04      	itt	eq
 8003c2e:	011b      	lsleq	r3, r3, #4
 8003c30:	3004      	addeq	r0, #4
 8003c32:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8003c36:	bf04      	itt	eq
 8003c38:	009b      	lsleq	r3, r3, #2
 8003c3a:	3002      	addeq	r0, #2
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	db06      	blt.n	8003c4e <__hi0bits+0x3c>
 8003c40:	005b      	lsls	r3, r3, #1
 8003c42:	d503      	bpl.n	8003c4c <__hi0bits+0x3a>
 8003c44:	3001      	adds	r0, #1
 8003c46:	4770      	bx	lr
 8003c48:	2000      	movs	r0, #0
 8003c4a:	e7e8      	b.n	8003c1e <__hi0bits+0xc>
 8003c4c:	2020      	movs	r0, #32
 8003c4e:	4770      	bx	lr

08003c50 <__lo0bits>:
 8003c50:	6803      	ldr	r3, [r0, #0]
 8003c52:	4601      	mov	r1, r0
 8003c54:	f013 0207 	ands.w	r2, r3, #7
 8003c58:	d00b      	beq.n	8003c72 <__lo0bits+0x22>
 8003c5a:	07da      	lsls	r2, r3, #31
 8003c5c:	d423      	bmi.n	8003ca6 <__lo0bits+0x56>
 8003c5e:	0798      	lsls	r0, r3, #30
 8003c60:	bf49      	itett	mi
 8003c62:	085b      	lsrmi	r3, r3, #1
 8003c64:	089b      	lsrpl	r3, r3, #2
 8003c66:	2001      	movmi	r0, #1
 8003c68:	600b      	strmi	r3, [r1, #0]
 8003c6a:	bf5c      	itt	pl
 8003c6c:	600b      	strpl	r3, [r1, #0]
 8003c6e:	2002      	movpl	r0, #2
 8003c70:	4770      	bx	lr
 8003c72:	b298      	uxth	r0, r3
 8003c74:	b9a8      	cbnz	r0, 8003ca2 <__lo0bits+0x52>
 8003c76:	2010      	movs	r0, #16
 8003c78:	0c1b      	lsrs	r3, r3, #16
 8003c7a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003c7e:	bf04      	itt	eq
 8003c80:	0a1b      	lsreq	r3, r3, #8
 8003c82:	3008      	addeq	r0, #8
 8003c84:	071a      	lsls	r2, r3, #28
 8003c86:	bf04      	itt	eq
 8003c88:	091b      	lsreq	r3, r3, #4
 8003c8a:	3004      	addeq	r0, #4
 8003c8c:	079a      	lsls	r2, r3, #30
 8003c8e:	bf04      	itt	eq
 8003c90:	089b      	lsreq	r3, r3, #2
 8003c92:	3002      	addeq	r0, #2
 8003c94:	07da      	lsls	r2, r3, #31
 8003c96:	d402      	bmi.n	8003c9e <__lo0bits+0x4e>
 8003c98:	085b      	lsrs	r3, r3, #1
 8003c9a:	d006      	beq.n	8003caa <__lo0bits+0x5a>
 8003c9c:	3001      	adds	r0, #1
 8003c9e:	600b      	str	r3, [r1, #0]
 8003ca0:	4770      	bx	lr
 8003ca2:	4610      	mov	r0, r2
 8003ca4:	e7e9      	b.n	8003c7a <__lo0bits+0x2a>
 8003ca6:	2000      	movs	r0, #0
 8003ca8:	4770      	bx	lr
 8003caa:	2020      	movs	r0, #32
 8003cac:	4770      	bx	lr

08003cae <__i2b>:
 8003cae:	b510      	push	{r4, lr}
 8003cb0:	460c      	mov	r4, r1
 8003cb2:	2101      	movs	r1, #1
 8003cb4:	f7ff ff27 	bl	8003b06 <_Balloc>
 8003cb8:	2201      	movs	r2, #1
 8003cba:	6144      	str	r4, [r0, #20]
 8003cbc:	6102      	str	r2, [r0, #16]
 8003cbe:	bd10      	pop	{r4, pc}

08003cc0 <__multiply>:
 8003cc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cc4:	4614      	mov	r4, r2
 8003cc6:	690a      	ldr	r2, [r1, #16]
 8003cc8:	6923      	ldr	r3, [r4, #16]
 8003cca:	4689      	mov	r9, r1
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	bfbe      	ittt	lt
 8003cd0:	460b      	movlt	r3, r1
 8003cd2:	46a1      	movlt	r9, r4
 8003cd4:	461c      	movlt	r4, r3
 8003cd6:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8003cda:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8003cde:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8003ce2:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8003ce6:	eb07 060a 	add.w	r6, r7, sl
 8003cea:	429e      	cmp	r6, r3
 8003cec:	bfc8      	it	gt
 8003cee:	3101      	addgt	r1, #1
 8003cf0:	f7ff ff09 	bl	8003b06 <_Balloc>
 8003cf4:	f100 0514 	add.w	r5, r0, #20
 8003cf8:	462b      	mov	r3, r5
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8003d00:	4543      	cmp	r3, r8
 8003d02:	d316      	bcc.n	8003d32 <__multiply+0x72>
 8003d04:	f104 0214 	add.w	r2, r4, #20
 8003d08:	f109 0114 	add.w	r1, r9, #20
 8003d0c:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8003d10:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8003d14:	9301      	str	r3, [sp, #4]
 8003d16:	9c01      	ldr	r4, [sp, #4]
 8003d18:	4613      	mov	r3, r2
 8003d1a:	4294      	cmp	r4, r2
 8003d1c:	d80c      	bhi.n	8003d38 <__multiply+0x78>
 8003d1e:	2e00      	cmp	r6, #0
 8003d20:	dd03      	ble.n	8003d2a <__multiply+0x6a>
 8003d22:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d054      	beq.n	8003dd4 <__multiply+0x114>
 8003d2a:	6106      	str	r6, [r0, #16]
 8003d2c:	b003      	add	sp, #12
 8003d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d32:	f843 2b04 	str.w	r2, [r3], #4
 8003d36:	e7e3      	b.n	8003d00 <__multiply+0x40>
 8003d38:	f8b3 a000 	ldrh.w	sl, [r3]
 8003d3c:	3204      	adds	r2, #4
 8003d3e:	f1ba 0f00 	cmp.w	sl, #0
 8003d42:	d020      	beq.n	8003d86 <__multiply+0xc6>
 8003d44:	46ae      	mov	lr, r5
 8003d46:	4689      	mov	r9, r1
 8003d48:	f04f 0c00 	mov.w	ip, #0
 8003d4c:	f859 4b04 	ldr.w	r4, [r9], #4
 8003d50:	f8be b000 	ldrh.w	fp, [lr]
 8003d54:	b2a3      	uxth	r3, r4
 8003d56:	fb0a b303 	mla	r3, sl, r3, fp
 8003d5a:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8003d5e:	f8de 4000 	ldr.w	r4, [lr]
 8003d62:	4463      	add	r3, ip
 8003d64:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8003d68:	fb0a c40b 	mla	r4, sl, fp, ip
 8003d6c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8003d76:	454f      	cmp	r7, r9
 8003d78:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8003d7c:	f84e 3b04 	str.w	r3, [lr], #4
 8003d80:	d8e4      	bhi.n	8003d4c <__multiply+0x8c>
 8003d82:	f8ce c000 	str.w	ip, [lr]
 8003d86:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8003d8a:	f1b9 0f00 	cmp.w	r9, #0
 8003d8e:	d01f      	beq.n	8003dd0 <__multiply+0x110>
 8003d90:	46ae      	mov	lr, r5
 8003d92:	468c      	mov	ip, r1
 8003d94:	f04f 0a00 	mov.w	sl, #0
 8003d98:	682b      	ldr	r3, [r5, #0]
 8003d9a:	f8bc 4000 	ldrh.w	r4, [ip]
 8003d9e:	f8be b002 	ldrh.w	fp, [lr, #2]
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	fb09 b404 	mla	r4, r9, r4, fp
 8003da8:	44a2      	add	sl, r4
 8003daa:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8003dae:	f84e 3b04 	str.w	r3, [lr], #4
 8003db2:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003db6:	f8be 4000 	ldrh.w	r4, [lr]
 8003dba:	0c1b      	lsrs	r3, r3, #16
 8003dbc:	fb09 4303 	mla	r3, r9, r3, r4
 8003dc0:	4567      	cmp	r7, ip
 8003dc2:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8003dc6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003dca:	d8e6      	bhi.n	8003d9a <__multiply+0xda>
 8003dcc:	f8ce 3000 	str.w	r3, [lr]
 8003dd0:	3504      	adds	r5, #4
 8003dd2:	e7a0      	b.n	8003d16 <__multiply+0x56>
 8003dd4:	3e01      	subs	r6, #1
 8003dd6:	e7a2      	b.n	8003d1e <__multiply+0x5e>

08003dd8 <__pow5mult>:
 8003dd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ddc:	4615      	mov	r5, r2
 8003dde:	f012 0203 	ands.w	r2, r2, #3
 8003de2:	4606      	mov	r6, r0
 8003de4:	460f      	mov	r7, r1
 8003de6:	d007      	beq.n	8003df8 <__pow5mult+0x20>
 8003de8:	4c21      	ldr	r4, [pc, #132]	; (8003e70 <__pow5mult+0x98>)
 8003dea:	3a01      	subs	r2, #1
 8003dec:	2300      	movs	r3, #0
 8003dee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8003df2:	f7ff fed3 	bl	8003b9c <__multadd>
 8003df6:	4607      	mov	r7, r0
 8003df8:	10ad      	asrs	r5, r5, #2
 8003dfa:	d035      	beq.n	8003e68 <__pow5mult+0x90>
 8003dfc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8003dfe:	b93c      	cbnz	r4, 8003e10 <__pow5mult+0x38>
 8003e00:	2010      	movs	r0, #16
 8003e02:	f7ff fe5f 	bl	8003ac4 <malloc>
 8003e06:	6270      	str	r0, [r6, #36]	; 0x24
 8003e08:	6044      	str	r4, [r0, #4]
 8003e0a:	6084      	str	r4, [r0, #8]
 8003e0c:	6004      	str	r4, [r0, #0]
 8003e0e:	60c4      	str	r4, [r0, #12]
 8003e10:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8003e14:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003e18:	b94c      	cbnz	r4, 8003e2e <__pow5mult+0x56>
 8003e1a:	f240 2171 	movw	r1, #625	; 0x271
 8003e1e:	4630      	mov	r0, r6
 8003e20:	f7ff ff45 	bl	8003cae <__i2b>
 8003e24:	2300      	movs	r3, #0
 8003e26:	4604      	mov	r4, r0
 8003e28:	f8c8 0008 	str.w	r0, [r8, #8]
 8003e2c:	6003      	str	r3, [r0, #0]
 8003e2e:	f04f 0800 	mov.w	r8, #0
 8003e32:	07eb      	lsls	r3, r5, #31
 8003e34:	d50a      	bpl.n	8003e4c <__pow5mult+0x74>
 8003e36:	4639      	mov	r1, r7
 8003e38:	4622      	mov	r2, r4
 8003e3a:	4630      	mov	r0, r6
 8003e3c:	f7ff ff40 	bl	8003cc0 <__multiply>
 8003e40:	4681      	mov	r9, r0
 8003e42:	4639      	mov	r1, r7
 8003e44:	4630      	mov	r0, r6
 8003e46:	f7ff fe92 	bl	8003b6e <_Bfree>
 8003e4a:	464f      	mov	r7, r9
 8003e4c:	106d      	asrs	r5, r5, #1
 8003e4e:	d00b      	beq.n	8003e68 <__pow5mult+0x90>
 8003e50:	6820      	ldr	r0, [r4, #0]
 8003e52:	b938      	cbnz	r0, 8003e64 <__pow5mult+0x8c>
 8003e54:	4622      	mov	r2, r4
 8003e56:	4621      	mov	r1, r4
 8003e58:	4630      	mov	r0, r6
 8003e5a:	f7ff ff31 	bl	8003cc0 <__multiply>
 8003e5e:	6020      	str	r0, [r4, #0]
 8003e60:	f8c0 8000 	str.w	r8, [r0]
 8003e64:	4604      	mov	r4, r0
 8003e66:	e7e4      	b.n	8003e32 <__pow5mult+0x5a>
 8003e68:	4638      	mov	r0, r7
 8003e6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e6e:	bf00      	nop
 8003e70:	08004bf0 	.word	0x08004bf0

08003e74 <__lshift>:
 8003e74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e78:	460c      	mov	r4, r1
 8003e7a:	4607      	mov	r7, r0
 8003e7c:	4616      	mov	r6, r2
 8003e7e:	6923      	ldr	r3, [r4, #16]
 8003e80:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8003e84:	eb0a 0903 	add.w	r9, sl, r3
 8003e88:	6849      	ldr	r1, [r1, #4]
 8003e8a:	68a3      	ldr	r3, [r4, #8]
 8003e8c:	f109 0501 	add.w	r5, r9, #1
 8003e90:	42ab      	cmp	r3, r5
 8003e92:	db31      	blt.n	8003ef8 <__lshift+0x84>
 8003e94:	4638      	mov	r0, r7
 8003e96:	f7ff fe36 	bl	8003b06 <_Balloc>
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	4680      	mov	r8, r0
 8003e9e:	4611      	mov	r1, r2
 8003ea0:	f100 0314 	add.w	r3, r0, #20
 8003ea4:	4552      	cmp	r2, sl
 8003ea6:	db2a      	blt.n	8003efe <__lshift+0x8a>
 8003ea8:	6920      	ldr	r0, [r4, #16]
 8003eaa:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003eae:	f104 0114 	add.w	r1, r4, #20
 8003eb2:	f016 021f 	ands.w	r2, r6, #31
 8003eb6:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8003eba:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8003ebe:	d022      	beq.n	8003f06 <__lshift+0x92>
 8003ec0:	2000      	movs	r0, #0
 8003ec2:	f1c2 0c20 	rsb	ip, r2, #32
 8003ec6:	680e      	ldr	r6, [r1, #0]
 8003ec8:	4096      	lsls	r6, r2
 8003eca:	4330      	orrs	r0, r6
 8003ecc:	f843 0b04 	str.w	r0, [r3], #4
 8003ed0:	f851 0b04 	ldr.w	r0, [r1], #4
 8003ed4:	458e      	cmp	lr, r1
 8003ed6:	fa20 f00c 	lsr.w	r0, r0, ip
 8003eda:	d8f4      	bhi.n	8003ec6 <__lshift+0x52>
 8003edc:	6018      	str	r0, [r3, #0]
 8003ede:	b108      	cbz	r0, 8003ee4 <__lshift+0x70>
 8003ee0:	f109 0502 	add.w	r5, r9, #2
 8003ee4:	3d01      	subs	r5, #1
 8003ee6:	4638      	mov	r0, r7
 8003ee8:	f8c8 5010 	str.w	r5, [r8, #16]
 8003eec:	4621      	mov	r1, r4
 8003eee:	f7ff fe3e 	bl	8003b6e <_Bfree>
 8003ef2:	4640      	mov	r0, r8
 8003ef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ef8:	3101      	adds	r1, #1
 8003efa:	005b      	lsls	r3, r3, #1
 8003efc:	e7c8      	b.n	8003e90 <__lshift+0x1c>
 8003efe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003f02:	3201      	adds	r2, #1
 8003f04:	e7ce      	b.n	8003ea4 <__lshift+0x30>
 8003f06:	3b04      	subs	r3, #4
 8003f08:	f851 2b04 	ldr.w	r2, [r1], #4
 8003f0c:	458e      	cmp	lr, r1
 8003f0e:	f843 2f04 	str.w	r2, [r3, #4]!
 8003f12:	d8f9      	bhi.n	8003f08 <__lshift+0x94>
 8003f14:	e7e6      	b.n	8003ee4 <__lshift+0x70>

08003f16 <__mcmp>:
 8003f16:	6903      	ldr	r3, [r0, #16]
 8003f18:	690a      	ldr	r2, [r1, #16]
 8003f1a:	b530      	push	{r4, r5, lr}
 8003f1c:	1a9b      	subs	r3, r3, r2
 8003f1e:	d10c      	bne.n	8003f3a <__mcmp+0x24>
 8003f20:	0092      	lsls	r2, r2, #2
 8003f22:	3014      	adds	r0, #20
 8003f24:	3114      	adds	r1, #20
 8003f26:	1884      	adds	r4, r0, r2
 8003f28:	4411      	add	r1, r2
 8003f2a:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8003f2e:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8003f32:	4295      	cmp	r5, r2
 8003f34:	d003      	beq.n	8003f3e <__mcmp+0x28>
 8003f36:	d305      	bcc.n	8003f44 <__mcmp+0x2e>
 8003f38:	2301      	movs	r3, #1
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	bd30      	pop	{r4, r5, pc}
 8003f3e:	42a0      	cmp	r0, r4
 8003f40:	d3f3      	bcc.n	8003f2a <__mcmp+0x14>
 8003f42:	e7fa      	b.n	8003f3a <__mcmp+0x24>
 8003f44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f48:	e7f7      	b.n	8003f3a <__mcmp+0x24>

08003f4a <__mdiff>:
 8003f4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f4e:	460d      	mov	r5, r1
 8003f50:	4607      	mov	r7, r0
 8003f52:	4611      	mov	r1, r2
 8003f54:	4628      	mov	r0, r5
 8003f56:	4614      	mov	r4, r2
 8003f58:	f7ff ffdd 	bl	8003f16 <__mcmp>
 8003f5c:	1e06      	subs	r6, r0, #0
 8003f5e:	d108      	bne.n	8003f72 <__mdiff+0x28>
 8003f60:	4631      	mov	r1, r6
 8003f62:	4638      	mov	r0, r7
 8003f64:	f7ff fdcf 	bl	8003b06 <_Balloc>
 8003f68:	2301      	movs	r3, #1
 8003f6a:	6146      	str	r6, [r0, #20]
 8003f6c:	6103      	str	r3, [r0, #16]
 8003f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f72:	bfa4      	itt	ge
 8003f74:	4623      	movge	r3, r4
 8003f76:	462c      	movge	r4, r5
 8003f78:	4638      	mov	r0, r7
 8003f7a:	6861      	ldr	r1, [r4, #4]
 8003f7c:	bfa6      	itte	ge
 8003f7e:	461d      	movge	r5, r3
 8003f80:	2600      	movge	r6, #0
 8003f82:	2601      	movlt	r6, #1
 8003f84:	f7ff fdbf 	bl	8003b06 <_Balloc>
 8003f88:	f04f 0c00 	mov.w	ip, #0
 8003f8c:	60c6      	str	r6, [r0, #12]
 8003f8e:	692b      	ldr	r3, [r5, #16]
 8003f90:	6926      	ldr	r6, [r4, #16]
 8003f92:	f104 0214 	add.w	r2, r4, #20
 8003f96:	f105 0914 	add.w	r9, r5, #20
 8003f9a:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8003f9e:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8003fa2:	f100 0114 	add.w	r1, r0, #20
 8003fa6:	f852 ab04 	ldr.w	sl, [r2], #4
 8003faa:	f859 5b04 	ldr.w	r5, [r9], #4
 8003fae:	fa1f f38a 	uxth.w	r3, sl
 8003fb2:	4463      	add	r3, ip
 8003fb4:	b2ac      	uxth	r4, r5
 8003fb6:	1b1b      	subs	r3, r3, r4
 8003fb8:	0c2c      	lsrs	r4, r5, #16
 8003fba:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8003fbe:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8003fc8:	45c8      	cmp	r8, r9
 8003fca:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8003fce:	4696      	mov	lr, r2
 8003fd0:	f841 4b04 	str.w	r4, [r1], #4
 8003fd4:	d8e7      	bhi.n	8003fa6 <__mdiff+0x5c>
 8003fd6:	45be      	cmp	lr, r7
 8003fd8:	d305      	bcc.n	8003fe6 <__mdiff+0x9c>
 8003fda:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8003fde:	b18b      	cbz	r3, 8004004 <__mdiff+0xba>
 8003fe0:	6106      	str	r6, [r0, #16]
 8003fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fe6:	f85e 4b04 	ldr.w	r4, [lr], #4
 8003fea:	b2a2      	uxth	r2, r4
 8003fec:	4462      	add	r2, ip
 8003fee:	1413      	asrs	r3, r2, #16
 8003ff0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8003ff4:	b292      	uxth	r2, r2
 8003ff6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8003ffa:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8003ffe:	f841 2b04 	str.w	r2, [r1], #4
 8004002:	e7e8      	b.n	8003fd6 <__mdiff+0x8c>
 8004004:	3e01      	subs	r6, #1
 8004006:	e7e8      	b.n	8003fda <__mdiff+0x90>

08004008 <__d2b>:
 8004008:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800400c:	461c      	mov	r4, r3
 800400e:	2101      	movs	r1, #1
 8004010:	4690      	mov	r8, r2
 8004012:	9e08      	ldr	r6, [sp, #32]
 8004014:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004016:	f7ff fd76 	bl	8003b06 <_Balloc>
 800401a:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800401e:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8004022:	4607      	mov	r7, r0
 8004024:	bb34      	cbnz	r4, 8004074 <__d2b+0x6c>
 8004026:	9201      	str	r2, [sp, #4]
 8004028:	f1b8 0f00 	cmp.w	r8, #0
 800402c:	d027      	beq.n	800407e <__d2b+0x76>
 800402e:	a802      	add	r0, sp, #8
 8004030:	f840 8d08 	str.w	r8, [r0, #-8]!
 8004034:	f7ff fe0c 	bl	8003c50 <__lo0bits>
 8004038:	9900      	ldr	r1, [sp, #0]
 800403a:	b1f0      	cbz	r0, 800407a <__d2b+0x72>
 800403c:	9a01      	ldr	r2, [sp, #4]
 800403e:	f1c0 0320 	rsb	r3, r0, #32
 8004042:	fa02 f303 	lsl.w	r3, r2, r3
 8004046:	430b      	orrs	r3, r1
 8004048:	40c2      	lsrs	r2, r0
 800404a:	617b      	str	r3, [r7, #20]
 800404c:	9201      	str	r2, [sp, #4]
 800404e:	9b01      	ldr	r3, [sp, #4]
 8004050:	2b00      	cmp	r3, #0
 8004052:	bf14      	ite	ne
 8004054:	2102      	movne	r1, #2
 8004056:	2101      	moveq	r1, #1
 8004058:	61bb      	str	r3, [r7, #24]
 800405a:	6139      	str	r1, [r7, #16]
 800405c:	b1c4      	cbz	r4, 8004090 <__d2b+0x88>
 800405e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8004062:	4404      	add	r4, r0
 8004064:	6034      	str	r4, [r6, #0]
 8004066:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800406a:	6028      	str	r0, [r5, #0]
 800406c:	4638      	mov	r0, r7
 800406e:	b002      	add	sp, #8
 8004070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004074:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004078:	e7d5      	b.n	8004026 <__d2b+0x1e>
 800407a:	6179      	str	r1, [r7, #20]
 800407c:	e7e7      	b.n	800404e <__d2b+0x46>
 800407e:	a801      	add	r0, sp, #4
 8004080:	f7ff fde6 	bl	8003c50 <__lo0bits>
 8004084:	2101      	movs	r1, #1
 8004086:	9b01      	ldr	r3, [sp, #4]
 8004088:	6139      	str	r1, [r7, #16]
 800408a:	617b      	str	r3, [r7, #20]
 800408c:	3020      	adds	r0, #32
 800408e:	e7e5      	b.n	800405c <__d2b+0x54>
 8004090:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004094:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8004098:	6030      	str	r0, [r6, #0]
 800409a:	6918      	ldr	r0, [r3, #16]
 800409c:	f7ff fdb9 	bl	8003c12 <__hi0bits>
 80040a0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80040a4:	e7e1      	b.n	800406a <__d2b+0x62>

080040a6 <_calloc_r>:
 80040a6:	b538      	push	{r3, r4, r5, lr}
 80040a8:	fb02 f401 	mul.w	r4, r2, r1
 80040ac:	4621      	mov	r1, r4
 80040ae:	f000 f855 	bl	800415c <_malloc_r>
 80040b2:	4605      	mov	r5, r0
 80040b4:	b118      	cbz	r0, 80040be <_calloc_r+0x18>
 80040b6:	4622      	mov	r2, r4
 80040b8:	2100      	movs	r1, #0
 80040ba:	f7fe f9f7 	bl	80024ac <memset>
 80040be:	4628      	mov	r0, r5
 80040c0:	bd38      	pop	{r3, r4, r5, pc}
	...

080040c4 <_free_r>:
 80040c4:	b538      	push	{r3, r4, r5, lr}
 80040c6:	4605      	mov	r5, r0
 80040c8:	2900      	cmp	r1, #0
 80040ca:	d043      	beq.n	8004154 <_free_r+0x90>
 80040cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040d0:	1f0c      	subs	r4, r1, #4
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	bfb8      	it	lt
 80040d6:	18e4      	addlt	r4, r4, r3
 80040d8:	f000 fa2a 	bl	8004530 <__malloc_lock>
 80040dc:	4a1e      	ldr	r2, [pc, #120]	; (8004158 <_free_r+0x94>)
 80040de:	6813      	ldr	r3, [r2, #0]
 80040e0:	4610      	mov	r0, r2
 80040e2:	b933      	cbnz	r3, 80040f2 <_free_r+0x2e>
 80040e4:	6063      	str	r3, [r4, #4]
 80040e6:	6014      	str	r4, [r2, #0]
 80040e8:	4628      	mov	r0, r5
 80040ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80040ee:	f000 ba20 	b.w	8004532 <__malloc_unlock>
 80040f2:	42a3      	cmp	r3, r4
 80040f4:	d90b      	bls.n	800410e <_free_r+0x4a>
 80040f6:	6821      	ldr	r1, [r4, #0]
 80040f8:	1862      	adds	r2, r4, r1
 80040fa:	4293      	cmp	r3, r2
 80040fc:	bf01      	itttt	eq
 80040fe:	681a      	ldreq	r2, [r3, #0]
 8004100:	685b      	ldreq	r3, [r3, #4]
 8004102:	1852      	addeq	r2, r2, r1
 8004104:	6022      	streq	r2, [r4, #0]
 8004106:	6063      	str	r3, [r4, #4]
 8004108:	6004      	str	r4, [r0, #0]
 800410a:	e7ed      	b.n	80040e8 <_free_r+0x24>
 800410c:	4613      	mov	r3, r2
 800410e:	685a      	ldr	r2, [r3, #4]
 8004110:	b10a      	cbz	r2, 8004116 <_free_r+0x52>
 8004112:	42a2      	cmp	r2, r4
 8004114:	d9fa      	bls.n	800410c <_free_r+0x48>
 8004116:	6819      	ldr	r1, [r3, #0]
 8004118:	1858      	adds	r0, r3, r1
 800411a:	42a0      	cmp	r0, r4
 800411c:	d10b      	bne.n	8004136 <_free_r+0x72>
 800411e:	6820      	ldr	r0, [r4, #0]
 8004120:	4401      	add	r1, r0
 8004122:	1858      	adds	r0, r3, r1
 8004124:	4282      	cmp	r2, r0
 8004126:	6019      	str	r1, [r3, #0]
 8004128:	d1de      	bne.n	80040e8 <_free_r+0x24>
 800412a:	6810      	ldr	r0, [r2, #0]
 800412c:	6852      	ldr	r2, [r2, #4]
 800412e:	4401      	add	r1, r0
 8004130:	6019      	str	r1, [r3, #0]
 8004132:	605a      	str	r2, [r3, #4]
 8004134:	e7d8      	b.n	80040e8 <_free_r+0x24>
 8004136:	d902      	bls.n	800413e <_free_r+0x7a>
 8004138:	230c      	movs	r3, #12
 800413a:	602b      	str	r3, [r5, #0]
 800413c:	e7d4      	b.n	80040e8 <_free_r+0x24>
 800413e:	6820      	ldr	r0, [r4, #0]
 8004140:	1821      	adds	r1, r4, r0
 8004142:	428a      	cmp	r2, r1
 8004144:	bf01      	itttt	eq
 8004146:	6811      	ldreq	r1, [r2, #0]
 8004148:	6852      	ldreq	r2, [r2, #4]
 800414a:	1809      	addeq	r1, r1, r0
 800414c:	6021      	streq	r1, [r4, #0]
 800414e:	6062      	str	r2, [r4, #4]
 8004150:	605c      	str	r4, [r3, #4]
 8004152:	e7c9      	b.n	80040e8 <_free_r+0x24>
 8004154:	bd38      	pop	{r3, r4, r5, pc}
 8004156:	bf00      	nop
 8004158:	20000200 	.word	0x20000200

0800415c <_malloc_r>:
 800415c:	b570      	push	{r4, r5, r6, lr}
 800415e:	1ccd      	adds	r5, r1, #3
 8004160:	f025 0503 	bic.w	r5, r5, #3
 8004164:	3508      	adds	r5, #8
 8004166:	2d0c      	cmp	r5, #12
 8004168:	bf38      	it	cc
 800416a:	250c      	movcc	r5, #12
 800416c:	2d00      	cmp	r5, #0
 800416e:	4606      	mov	r6, r0
 8004170:	db01      	blt.n	8004176 <_malloc_r+0x1a>
 8004172:	42a9      	cmp	r1, r5
 8004174:	d903      	bls.n	800417e <_malloc_r+0x22>
 8004176:	230c      	movs	r3, #12
 8004178:	6033      	str	r3, [r6, #0]
 800417a:	2000      	movs	r0, #0
 800417c:	bd70      	pop	{r4, r5, r6, pc}
 800417e:	f000 f9d7 	bl	8004530 <__malloc_lock>
 8004182:	4a23      	ldr	r2, [pc, #140]	; (8004210 <_malloc_r+0xb4>)
 8004184:	6814      	ldr	r4, [r2, #0]
 8004186:	4621      	mov	r1, r4
 8004188:	b991      	cbnz	r1, 80041b0 <_malloc_r+0x54>
 800418a:	4c22      	ldr	r4, [pc, #136]	; (8004214 <_malloc_r+0xb8>)
 800418c:	6823      	ldr	r3, [r4, #0]
 800418e:	b91b      	cbnz	r3, 8004198 <_malloc_r+0x3c>
 8004190:	4630      	mov	r0, r6
 8004192:	f000 f991 	bl	80044b8 <_sbrk_r>
 8004196:	6020      	str	r0, [r4, #0]
 8004198:	4629      	mov	r1, r5
 800419a:	4630      	mov	r0, r6
 800419c:	f000 f98c 	bl	80044b8 <_sbrk_r>
 80041a0:	1c43      	adds	r3, r0, #1
 80041a2:	d126      	bne.n	80041f2 <_malloc_r+0x96>
 80041a4:	230c      	movs	r3, #12
 80041a6:	4630      	mov	r0, r6
 80041a8:	6033      	str	r3, [r6, #0]
 80041aa:	f000 f9c2 	bl	8004532 <__malloc_unlock>
 80041ae:	e7e4      	b.n	800417a <_malloc_r+0x1e>
 80041b0:	680b      	ldr	r3, [r1, #0]
 80041b2:	1b5b      	subs	r3, r3, r5
 80041b4:	d41a      	bmi.n	80041ec <_malloc_r+0x90>
 80041b6:	2b0b      	cmp	r3, #11
 80041b8:	d90f      	bls.n	80041da <_malloc_r+0x7e>
 80041ba:	600b      	str	r3, [r1, #0]
 80041bc:	18cc      	adds	r4, r1, r3
 80041be:	50cd      	str	r5, [r1, r3]
 80041c0:	4630      	mov	r0, r6
 80041c2:	f000 f9b6 	bl	8004532 <__malloc_unlock>
 80041c6:	f104 000b 	add.w	r0, r4, #11
 80041ca:	1d23      	adds	r3, r4, #4
 80041cc:	f020 0007 	bic.w	r0, r0, #7
 80041d0:	1ac3      	subs	r3, r0, r3
 80041d2:	d01b      	beq.n	800420c <_malloc_r+0xb0>
 80041d4:	425a      	negs	r2, r3
 80041d6:	50e2      	str	r2, [r4, r3]
 80041d8:	bd70      	pop	{r4, r5, r6, pc}
 80041da:	428c      	cmp	r4, r1
 80041dc:	bf0b      	itete	eq
 80041de:	6863      	ldreq	r3, [r4, #4]
 80041e0:	684b      	ldrne	r3, [r1, #4]
 80041e2:	6013      	streq	r3, [r2, #0]
 80041e4:	6063      	strne	r3, [r4, #4]
 80041e6:	bf18      	it	ne
 80041e8:	460c      	movne	r4, r1
 80041ea:	e7e9      	b.n	80041c0 <_malloc_r+0x64>
 80041ec:	460c      	mov	r4, r1
 80041ee:	6849      	ldr	r1, [r1, #4]
 80041f0:	e7ca      	b.n	8004188 <_malloc_r+0x2c>
 80041f2:	1cc4      	adds	r4, r0, #3
 80041f4:	f024 0403 	bic.w	r4, r4, #3
 80041f8:	42a0      	cmp	r0, r4
 80041fa:	d005      	beq.n	8004208 <_malloc_r+0xac>
 80041fc:	1a21      	subs	r1, r4, r0
 80041fe:	4630      	mov	r0, r6
 8004200:	f000 f95a 	bl	80044b8 <_sbrk_r>
 8004204:	3001      	adds	r0, #1
 8004206:	d0cd      	beq.n	80041a4 <_malloc_r+0x48>
 8004208:	6025      	str	r5, [r4, #0]
 800420a:	e7d9      	b.n	80041c0 <_malloc_r+0x64>
 800420c:	bd70      	pop	{r4, r5, r6, pc}
 800420e:	bf00      	nop
 8004210:	20000200 	.word	0x20000200
 8004214:	20000204 	.word	0x20000204

08004218 <__ssputs_r>:
 8004218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800421c:	688e      	ldr	r6, [r1, #8]
 800421e:	4682      	mov	sl, r0
 8004220:	429e      	cmp	r6, r3
 8004222:	460c      	mov	r4, r1
 8004224:	4691      	mov	r9, r2
 8004226:	4698      	mov	r8, r3
 8004228:	d835      	bhi.n	8004296 <__ssputs_r+0x7e>
 800422a:	898a      	ldrh	r2, [r1, #12]
 800422c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004230:	d031      	beq.n	8004296 <__ssputs_r+0x7e>
 8004232:	2302      	movs	r3, #2
 8004234:	6825      	ldr	r5, [r4, #0]
 8004236:	6909      	ldr	r1, [r1, #16]
 8004238:	1a6f      	subs	r7, r5, r1
 800423a:	6965      	ldr	r5, [r4, #20]
 800423c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004240:	fb95 f5f3 	sdiv	r5, r5, r3
 8004244:	f108 0301 	add.w	r3, r8, #1
 8004248:	443b      	add	r3, r7
 800424a:	429d      	cmp	r5, r3
 800424c:	bf38      	it	cc
 800424e:	461d      	movcc	r5, r3
 8004250:	0553      	lsls	r3, r2, #21
 8004252:	d531      	bpl.n	80042b8 <__ssputs_r+0xa0>
 8004254:	4629      	mov	r1, r5
 8004256:	f7ff ff81 	bl	800415c <_malloc_r>
 800425a:	4606      	mov	r6, r0
 800425c:	b950      	cbnz	r0, 8004274 <__ssputs_r+0x5c>
 800425e:	230c      	movs	r3, #12
 8004260:	f8ca 3000 	str.w	r3, [sl]
 8004264:	89a3      	ldrh	r3, [r4, #12]
 8004266:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800426a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800426e:	81a3      	strh	r3, [r4, #12]
 8004270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004274:	463a      	mov	r2, r7
 8004276:	6921      	ldr	r1, [r4, #16]
 8004278:	f7ff fc3a 	bl	8003af0 <memcpy>
 800427c:	89a3      	ldrh	r3, [r4, #12]
 800427e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004282:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004286:	81a3      	strh	r3, [r4, #12]
 8004288:	6126      	str	r6, [r4, #16]
 800428a:	443e      	add	r6, r7
 800428c:	6026      	str	r6, [r4, #0]
 800428e:	4646      	mov	r6, r8
 8004290:	6165      	str	r5, [r4, #20]
 8004292:	1bed      	subs	r5, r5, r7
 8004294:	60a5      	str	r5, [r4, #8]
 8004296:	4546      	cmp	r6, r8
 8004298:	bf28      	it	cs
 800429a:	4646      	movcs	r6, r8
 800429c:	4649      	mov	r1, r9
 800429e:	4632      	mov	r2, r6
 80042a0:	6820      	ldr	r0, [r4, #0]
 80042a2:	f000 f92b 	bl	80044fc <memmove>
 80042a6:	68a3      	ldr	r3, [r4, #8]
 80042a8:	2000      	movs	r0, #0
 80042aa:	1b9b      	subs	r3, r3, r6
 80042ac:	60a3      	str	r3, [r4, #8]
 80042ae:	6823      	ldr	r3, [r4, #0]
 80042b0:	441e      	add	r6, r3
 80042b2:	6026      	str	r6, [r4, #0]
 80042b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042b8:	462a      	mov	r2, r5
 80042ba:	f000 f93b 	bl	8004534 <_realloc_r>
 80042be:	4606      	mov	r6, r0
 80042c0:	2800      	cmp	r0, #0
 80042c2:	d1e1      	bne.n	8004288 <__ssputs_r+0x70>
 80042c4:	6921      	ldr	r1, [r4, #16]
 80042c6:	4650      	mov	r0, sl
 80042c8:	f7ff fefc 	bl	80040c4 <_free_r>
 80042cc:	e7c7      	b.n	800425e <__ssputs_r+0x46>
	...

080042d0 <_svfiprintf_r>:
 80042d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042d4:	b09d      	sub	sp, #116	; 0x74
 80042d6:	9303      	str	r3, [sp, #12]
 80042d8:	898b      	ldrh	r3, [r1, #12]
 80042da:	4680      	mov	r8, r0
 80042dc:	061c      	lsls	r4, r3, #24
 80042de:	460d      	mov	r5, r1
 80042e0:	4616      	mov	r6, r2
 80042e2:	d50f      	bpl.n	8004304 <_svfiprintf_r+0x34>
 80042e4:	690b      	ldr	r3, [r1, #16]
 80042e6:	b96b      	cbnz	r3, 8004304 <_svfiprintf_r+0x34>
 80042e8:	2140      	movs	r1, #64	; 0x40
 80042ea:	f7ff ff37 	bl	800415c <_malloc_r>
 80042ee:	6028      	str	r0, [r5, #0]
 80042f0:	6128      	str	r0, [r5, #16]
 80042f2:	b928      	cbnz	r0, 8004300 <_svfiprintf_r+0x30>
 80042f4:	230c      	movs	r3, #12
 80042f6:	f8c8 3000 	str.w	r3, [r8]
 80042fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80042fe:	e0c4      	b.n	800448a <_svfiprintf_r+0x1ba>
 8004300:	2340      	movs	r3, #64	; 0x40
 8004302:	616b      	str	r3, [r5, #20]
 8004304:	2300      	movs	r3, #0
 8004306:	9309      	str	r3, [sp, #36]	; 0x24
 8004308:	2320      	movs	r3, #32
 800430a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800430e:	2330      	movs	r3, #48	; 0x30
 8004310:	f04f 0b01 	mov.w	fp, #1
 8004314:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004318:	4637      	mov	r7, r6
 800431a:	463c      	mov	r4, r7
 800431c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004320:	2b00      	cmp	r3, #0
 8004322:	d13c      	bne.n	800439e <_svfiprintf_r+0xce>
 8004324:	ebb7 0a06 	subs.w	sl, r7, r6
 8004328:	d00b      	beq.n	8004342 <_svfiprintf_r+0x72>
 800432a:	4653      	mov	r3, sl
 800432c:	4632      	mov	r2, r6
 800432e:	4629      	mov	r1, r5
 8004330:	4640      	mov	r0, r8
 8004332:	f7ff ff71 	bl	8004218 <__ssputs_r>
 8004336:	3001      	adds	r0, #1
 8004338:	f000 80a2 	beq.w	8004480 <_svfiprintf_r+0x1b0>
 800433c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800433e:	4453      	add	r3, sl
 8004340:	9309      	str	r3, [sp, #36]	; 0x24
 8004342:	783b      	ldrb	r3, [r7, #0]
 8004344:	2b00      	cmp	r3, #0
 8004346:	f000 809b 	beq.w	8004480 <_svfiprintf_r+0x1b0>
 800434a:	2300      	movs	r3, #0
 800434c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004350:	9304      	str	r3, [sp, #16]
 8004352:	9307      	str	r3, [sp, #28]
 8004354:	9205      	str	r2, [sp, #20]
 8004356:	9306      	str	r3, [sp, #24]
 8004358:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800435c:	931a      	str	r3, [sp, #104]	; 0x68
 800435e:	2205      	movs	r2, #5
 8004360:	7821      	ldrb	r1, [r4, #0]
 8004362:	4850      	ldr	r0, [pc, #320]	; (80044a4 <_svfiprintf_r+0x1d4>)
 8004364:	f7ff fbb6 	bl	8003ad4 <memchr>
 8004368:	1c67      	adds	r7, r4, #1
 800436a:	9b04      	ldr	r3, [sp, #16]
 800436c:	b9d8      	cbnz	r0, 80043a6 <_svfiprintf_r+0xd6>
 800436e:	06d9      	lsls	r1, r3, #27
 8004370:	bf44      	itt	mi
 8004372:	2220      	movmi	r2, #32
 8004374:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004378:	071a      	lsls	r2, r3, #28
 800437a:	bf44      	itt	mi
 800437c:	222b      	movmi	r2, #43	; 0x2b
 800437e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004382:	7822      	ldrb	r2, [r4, #0]
 8004384:	2a2a      	cmp	r2, #42	; 0x2a
 8004386:	d016      	beq.n	80043b6 <_svfiprintf_r+0xe6>
 8004388:	2100      	movs	r1, #0
 800438a:	200a      	movs	r0, #10
 800438c:	9a07      	ldr	r2, [sp, #28]
 800438e:	4627      	mov	r7, r4
 8004390:	783b      	ldrb	r3, [r7, #0]
 8004392:	3401      	adds	r4, #1
 8004394:	3b30      	subs	r3, #48	; 0x30
 8004396:	2b09      	cmp	r3, #9
 8004398:	d950      	bls.n	800443c <_svfiprintf_r+0x16c>
 800439a:	b1c9      	cbz	r1, 80043d0 <_svfiprintf_r+0x100>
 800439c:	e011      	b.n	80043c2 <_svfiprintf_r+0xf2>
 800439e:	2b25      	cmp	r3, #37	; 0x25
 80043a0:	d0c0      	beq.n	8004324 <_svfiprintf_r+0x54>
 80043a2:	4627      	mov	r7, r4
 80043a4:	e7b9      	b.n	800431a <_svfiprintf_r+0x4a>
 80043a6:	4a3f      	ldr	r2, [pc, #252]	; (80044a4 <_svfiprintf_r+0x1d4>)
 80043a8:	463c      	mov	r4, r7
 80043aa:	1a80      	subs	r0, r0, r2
 80043ac:	fa0b f000 	lsl.w	r0, fp, r0
 80043b0:	4318      	orrs	r0, r3
 80043b2:	9004      	str	r0, [sp, #16]
 80043b4:	e7d3      	b.n	800435e <_svfiprintf_r+0x8e>
 80043b6:	9a03      	ldr	r2, [sp, #12]
 80043b8:	1d11      	adds	r1, r2, #4
 80043ba:	6812      	ldr	r2, [r2, #0]
 80043bc:	9103      	str	r1, [sp, #12]
 80043be:	2a00      	cmp	r2, #0
 80043c0:	db01      	blt.n	80043c6 <_svfiprintf_r+0xf6>
 80043c2:	9207      	str	r2, [sp, #28]
 80043c4:	e004      	b.n	80043d0 <_svfiprintf_r+0x100>
 80043c6:	4252      	negs	r2, r2
 80043c8:	f043 0302 	orr.w	r3, r3, #2
 80043cc:	9207      	str	r2, [sp, #28]
 80043ce:	9304      	str	r3, [sp, #16]
 80043d0:	783b      	ldrb	r3, [r7, #0]
 80043d2:	2b2e      	cmp	r3, #46	; 0x2e
 80043d4:	d10d      	bne.n	80043f2 <_svfiprintf_r+0x122>
 80043d6:	787b      	ldrb	r3, [r7, #1]
 80043d8:	1c79      	adds	r1, r7, #1
 80043da:	2b2a      	cmp	r3, #42	; 0x2a
 80043dc:	d132      	bne.n	8004444 <_svfiprintf_r+0x174>
 80043de:	9b03      	ldr	r3, [sp, #12]
 80043e0:	3702      	adds	r7, #2
 80043e2:	1d1a      	adds	r2, r3, #4
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	9203      	str	r2, [sp, #12]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	bfb8      	it	lt
 80043ec:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80043f0:	9305      	str	r3, [sp, #20]
 80043f2:	4c2d      	ldr	r4, [pc, #180]	; (80044a8 <_svfiprintf_r+0x1d8>)
 80043f4:	2203      	movs	r2, #3
 80043f6:	7839      	ldrb	r1, [r7, #0]
 80043f8:	4620      	mov	r0, r4
 80043fa:	f7ff fb6b 	bl	8003ad4 <memchr>
 80043fe:	b138      	cbz	r0, 8004410 <_svfiprintf_r+0x140>
 8004400:	2340      	movs	r3, #64	; 0x40
 8004402:	1b00      	subs	r0, r0, r4
 8004404:	fa03 f000 	lsl.w	r0, r3, r0
 8004408:	9b04      	ldr	r3, [sp, #16]
 800440a:	3701      	adds	r7, #1
 800440c:	4303      	orrs	r3, r0
 800440e:	9304      	str	r3, [sp, #16]
 8004410:	7839      	ldrb	r1, [r7, #0]
 8004412:	2206      	movs	r2, #6
 8004414:	4825      	ldr	r0, [pc, #148]	; (80044ac <_svfiprintf_r+0x1dc>)
 8004416:	1c7e      	adds	r6, r7, #1
 8004418:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800441c:	f7ff fb5a 	bl	8003ad4 <memchr>
 8004420:	2800      	cmp	r0, #0
 8004422:	d035      	beq.n	8004490 <_svfiprintf_r+0x1c0>
 8004424:	4b22      	ldr	r3, [pc, #136]	; (80044b0 <_svfiprintf_r+0x1e0>)
 8004426:	b9fb      	cbnz	r3, 8004468 <_svfiprintf_r+0x198>
 8004428:	9b03      	ldr	r3, [sp, #12]
 800442a:	3307      	adds	r3, #7
 800442c:	f023 0307 	bic.w	r3, r3, #7
 8004430:	3308      	adds	r3, #8
 8004432:	9303      	str	r3, [sp, #12]
 8004434:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004436:	444b      	add	r3, r9
 8004438:	9309      	str	r3, [sp, #36]	; 0x24
 800443a:	e76d      	b.n	8004318 <_svfiprintf_r+0x48>
 800443c:	fb00 3202 	mla	r2, r0, r2, r3
 8004440:	2101      	movs	r1, #1
 8004442:	e7a4      	b.n	800438e <_svfiprintf_r+0xbe>
 8004444:	2300      	movs	r3, #0
 8004446:	240a      	movs	r4, #10
 8004448:	4618      	mov	r0, r3
 800444a:	9305      	str	r3, [sp, #20]
 800444c:	460f      	mov	r7, r1
 800444e:	783a      	ldrb	r2, [r7, #0]
 8004450:	3101      	adds	r1, #1
 8004452:	3a30      	subs	r2, #48	; 0x30
 8004454:	2a09      	cmp	r2, #9
 8004456:	d903      	bls.n	8004460 <_svfiprintf_r+0x190>
 8004458:	2b00      	cmp	r3, #0
 800445a:	d0ca      	beq.n	80043f2 <_svfiprintf_r+0x122>
 800445c:	9005      	str	r0, [sp, #20]
 800445e:	e7c8      	b.n	80043f2 <_svfiprintf_r+0x122>
 8004460:	fb04 2000 	mla	r0, r4, r0, r2
 8004464:	2301      	movs	r3, #1
 8004466:	e7f1      	b.n	800444c <_svfiprintf_r+0x17c>
 8004468:	ab03      	add	r3, sp, #12
 800446a:	9300      	str	r3, [sp, #0]
 800446c:	462a      	mov	r2, r5
 800446e:	4b11      	ldr	r3, [pc, #68]	; (80044b4 <_svfiprintf_r+0x1e4>)
 8004470:	a904      	add	r1, sp, #16
 8004472:	4640      	mov	r0, r8
 8004474:	f7fe f8b4 	bl	80025e0 <_printf_float>
 8004478:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800447c:	4681      	mov	r9, r0
 800447e:	d1d9      	bne.n	8004434 <_svfiprintf_r+0x164>
 8004480:	89ab      	ldrh	r3, [r5, #12]
 8004482:	065b      	lsls	r3, r3, #25
 8004484:	f53f af39 	bmi.w	80042fa <_svfiprintf_r+0x2a>
 8004488:	9809      	ldr	r0, [sp, #36]	; 0x24
 800448a:	b01d      	add	sp, #116	; 0x74
 800448c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004490:	ab03      	add	r3, sp, #12
 8004492:	9300      	str	r3, [sp, #0]
 8004494:	462a      	mov	r2, r5
 8004496:	4b07      	ldr	r3, [pc, #28]	; (80044b4 <_svfiprintf_r+0x1e4>)
 8004498:	a904      	add	r1, sp, #16
 800449a:	4640      	mov	r0, r8
 800449c:	f7fe fb50 	bl	8002b40 <_printf_i>
 80044a0:	e7ea      	b.n	8004478 <_svfiprintf_r+0x1a8>
 80044a2:	bf00      	nop
 80044a4:	08004bfc 	.word	0x08004bfc
 80044a8:	08004c02 	.word	0x08004c02
 80044ac:	08004c06 	.word	0x08004c06
 80044b0:	080025e1 	.word	0x080025e1
 80044b4:	08004219 	.word	0x08004219

080044b8 <_sbrk_r>:
 80044b8:	b538      	push	{r3, r4, r5, lr}
 80044ba:	2300      	movs	r3, #0
 80044bc:	4c05      	ldr	r4, [pc, #20]	; (80044d4 <_sbrk_r+0x1c>)
 80044be:	4605      	mov	r5, r0
 80044c0:	4608      	mov	r0, r1
 80044c2:	6023      	str	r3, [r4, #0]
 80044c4:	f7fd ff62 	bl	800238c <_sbrk>
 80044c8:	1c43      	adds	r3, r0, #1
 80044ca:	d102      	bne.n	80044d2 <_sbrk_r+0x1a>
 80044cc:	6823      	ldr	r3, [r4, #0]
 80044ce:	b103      	cbz	r3, 80044d2 <_sbrk_r+0x1a>
 80044d0:	602b      	str	r3, [r5, #0]
 80044d2:	bd38      	pop	{r3, r4, r5, pc}
 80044d4:	2000027c 	.word	0x2000027c

080044d8 <__ascii_mbtowc>:
 80044d8:	b082      	sub	sp, #8
 80044da:	b901      	cbnz	r1, 80044de <__ascii_mbtowc+0x6>
 80044dc:	a901      	add	r1, sp, #4
 80044de:	b142      	cbz	r2, 80044f2 <__ascii_mbtowc+0x1a>
 80044e0:	b14b      	cbz	r3, 80044f6 <__ascii_mbtowc+0x1e>
 80044e2:	7813      	ldrb	r3, [r2, #0]
 80044e4:	600b      	str	r3, [r1, #0]
 80044e6:	7812      	ldrb	r2, [r2, #0]
 80044e8:	1c10      	adds	r0, r2, #0
 80044ea:	bf18      	it	ne
 80044ec:	2001      	movne	r0, #1
 80044ee:	b002      	add	sp, #8
 80044f0:	4770      	bx	lr
 80044f2:	4610      	mov	r0, r2
 80044f4:	e7fb      	b.n	80044ee <__ascii_mbtowc+0x16>
 80044f6:	f06f 0001 	mvn.w	r0, #1
 80044fa:	e7f8      	b.n	80044ee <__ascii_mbtowc+0x16>

080044fc <memmove>:
 80044fc:	4288      	cmp	r0, r1
 80044fe:	b510      	push	{r4, lr}
 8004500:	eb01 0302 	add.w	r3, r1, r2
 8004504:	d803      	bhi.n	800450e <memmove+0x12>
 8004506:	1e42      	subs	r2, r0, #1
 8004508:	4299      	cmp	r1, r3
 800450a:	d10c      	bne.n	8004526 <memmove+0x2a>
 800450c:	bd10      	pop	{r4, pc}
 800450e:	4298      	cmp	r0, r3
 8004510:	d2f9      	bcs.n	8004506 <memmove+0xa>
 8004512:	1881      	adds	r1, r0, r2
 8004514:	1ad2      	subs	r2, r2, r3
 8004516:	42d3      	cmn	r3, r2
 8004518:	d100      	bne.n	800451c <memmove+0x20>
 800451a:	bd10      	pop	{r4, pc}
 800451c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004520:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004524:	e7f7      	b.n	8004516 <memmove+0x1a>
 8004526:	f811 4b01 	ldrb.w	r4, [r1], #1
 800452a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800452e:	e7eb      	b.n	8004508 <memmove+0xc>

08004530 <__malloc_lock>:
 8004530:	4770      	bx	lr

08004532 <__malloc_unlock>:
 8004532:	4770      	bx	lr

08004534 <_realloc_r>:
 8004534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004536:	4607      	mov	r7, r0
 8004538:	4614      	mov	r4, r2
 800453a:	460e      	mov	r6, r1
 800453c:	b921      	cbnz	r1, 8004548 <_realloc_r+0x14>
 800453e:	4611      	mov	r1, r2
 8004540:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004544:	f7ff be0a 	b.w	800415c <_malloc_r>
 8004548:	b922      	cbnz	r2, 8004554 <_realloc_r+0x20>
 800454a:	f7ff fdbb 	bl	80040c4 <_free_r>
 800454e:	4625      	mov	r5, r4
 8004550:	4628      	mov	r0, r5
 8004552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004554:	f000 f821 	bl	800459a <_malloc_usable_size_r>
 8004558:	4284      	cmp	r4, r0
 800455a:	d90f      	bls.n	800457c <_realloc_r+0x48>
 800455c:	4621      	mov	r1, r4
 800455e:	4638      	mov	r0, r7
 8004560:	f7ff fdfc 	bl	800415c <_malloc_r>
 8004564:	4605      	mov	r5, r0
 8004566:	2800      	cmp	r0, #0
 8004568:	d0f2      	beq.n	8004550 <_realloc_r+0x1c>
 800456a:	4631      	mov	r1, r6
 800456c:	4622      	mov	r2, r4
 800456e:	f7ff fabf 	bl	8003af0 <memcpy>
 8004572:	4631      	mov	r1, r6
 8004574:	4638      	mov	r0, r7
 8004576:	f7ff fda5 	bl	80040c4 <_free_r>
 800457a:	e7e9      	b.n	8004550 <_realloc_r+0x1c>
 800457c:	4635      	mov	r5, r6
 800457e:	e7e7      	b.n	8004550 <_realloc_r+0x1c>

08004580 <__ascii_wctomb>:
 8004580:	b149      	cbz	r1, 8004596 <__ascii_wctomb+0x16>
 8004582:	2aff      	cmp	r2, #255	; 0xff
 8004584:	bf8b      	itete	hi
 8004586:	238a      	movhi	r3, #138	; 0x8a
 8004588:	700a      	strbls	r2, [r1, #0]
 800458a:	6003      	strhi	r3, [r0, #0]
 800458c:	2001      	movls	r0, #1
 800458e:	bf88      	it	hi
 8004590:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8004594:	4770      	bx	lr
 8004596:	4608      	mov	r0, r1
 8004598:	4770      	bx	lr

0800459a <_malloc_usable_size_r>:
 800459a:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800459e:	2800      	cmp	r0, #0
 80045a0:	f1a0 0004 	sub.w	r0, r0, #4
 80045a4:	bfbc      	itt	lt
 80045a6:	580b      	ldrlt	r3, [r1, r0]
 80045a8:	18c0      	addlt	r0, r0, r3
 80045aa:	4770      	bx	lr

080045ac <log>:
 80045ac:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 80045b0:	b08a      	sub	sp, #40	; 0x28
 80045b2:	4604      	mov	r4, r0
 80045b4:	460d      	mov	r5, r1
 80045b6:	f000 f873 	bl	80046a0 <__ieee754_log>
 80045ba:	4b34      	ldr	r3, [pc, #208]	; (800468c <log+0xe0>)
 80045bc:	4680      	mov	r8, r0
 80045be:	f993 6000 	ldrsb.w	r6, [r3]
 80045c2:	4689      	mov	r9, r1
 80045c4:	1c73      	adds	r3, r6, #1
 80045c6:	d05b      	beq.n	8004680 <log+0xd4>
 80045c8:	4622      	mov	r2, r4
 80045ca:	462b      	mov	r3, r5
 80045cc:	4620      	mov	r0, r4
 80045ce:	4629      	mov	r1, r5
 80045d0:	f7fc fa18 	bl	8000a04 <__aeabi_dcmpun>
 80045d4:	2800      	cmp	r0, #0
 80045d6:	d153      	bne.n	8004680 <log+0xd4>
 80045d8:	2200      	movs	r2, #0
 80045da:	2300      	movs	r3, #0
 80045dc:	4620      	mov	r0, r4
 80045de:	4629      	mov	r1, r5
 80045e0:	f7fc fa06 	bl	80009f0 <__aeabi_dcmpgt>
 80045e4:	2800      	cmp	r0, #0
 80045e6:	d14b      	bne.n	8004680 <log+0xd4>
 80045e8:	4b29      	ldr	r3, [pc, #164]	; (8004690 <log+0xe4>)
 80045ea:	9008      	str	r0, [sp, #32]
 80045ec:	9301      	str	r3, [sp, #4]
 80045ee:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80045f2:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80045f6:	b9a6      	cbnz	r6, 8004622 <log+0x76>
 80045f8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80045fc:	4b25      	ldr	r3, [pc, #148]	; (8004694 <log+0xe8>)
 80045fe:	4620      	mov	r0, r4
 8004600:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004604:	4629      	mov	r1, r5
 8004606:	2200      	movs	r2, #0
 8004608:	2300      	movs	r3, #0
 800460a:	f7fc f9c9 	bl	80009a0 <__aeabi_dcmpeq>
 800460e:	bb40      	cbnz	r0, 8004662 <log+0xb6>
 8004610:	2301      	movs	r3, #1
 8004612:	2e02      	cmp	r6, #2
 8004614:	9300      	str	r3, [sp, #0]
 8004616:	d119      	bne.n	800464c <log+0xa0>
 8004618:	f7fd ff1e 	bl	8002458 <__errno>
 800461c:	2321      	movs	r3, #33	; 0x21
 800461e:	6003      	str	r3, [r0, #0]
 8004620:	e019      	b.n	8004656 <log+0xaa>
 8004622:	2200      	movs	r2, #0
 8004624:	4b1c      	ldr	r3, [pc, #112]	; (8004698 <log+0xec>)
 8004626:	4620      	mov	r0, r4
 8004628:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800462c:	4629      	mov	r1, r5
 800462e:	2200      	movs	r2, #0
 8004630:	2300      	movs	r3, #0
 8004632:	f7fc f9b5 	bl	80009a0 <__aeabi_dcmpeq>
 8004636:	2800      	cmp	r0, #0
 8004638:	d0ea      	beq.n	8004610 <log+0x64>
 800463a:	2302      	movs	r3, #2
 800463c:	429e      	cmp	r6, r3
 800463e:	9300      	str	r3, [sp, #0]
 8004640:	d111      	bne.n	8004666 <log+0xba>
 8004642:	f7fd ff09 	bl	8002458 <__errno>
 8004646:	2322      	movs	r3, #34	; 0x22
 8004648:	6003      	str	r3, [r0, #0]
 800464a:	e011      	b.n	8004670 <log+0xc4>
 800464c:	4668      	mov	r0, sp
 800464e:	f000 f9fb 	bl	8004a48 <matherr>
 8004652:	2800      	cmp	r0, #0
 8004654:	d0e0      	beq.n	8004618 <log+0x6c>
 8004656:	4811      	ldr	r0, [pc, #68]	; (800469c <log+0xf0>)
 8004658:	f000 f9f8 	bl	8004a4c <nan>
 800465c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004660:	e006      	b.n	8004670 <log+0xc4>
 8004662:	2302      	movs	r3, #2
 8004664:	9300      	str	r3, [sp, #0]
 8004666:	4668      	mov	r0, sp
 8004668:	f000 f9ee 	bl	8004a48 <matherr>
 800466c:	2800      	cmp	r0, #0
 800466e:	d0e8      	beq.n	8004642 <log+0x96>
 8004670:	9b08      	ldr	r3, [sp, #32]
 8004672:	b11b      	cbz	r3, 800467c <log+0xd0>
 8004674:	f7fd fef0 	bl	8002458 <__errno>
 8004678:	9b08      	ldr	r3, [sp, #32]
 800467a:	6003      	str	r3, [r0, #0]
 800467c:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8004680:	4640      	mov	r0, r8
 8004682:	4649      	mov	r1, r9
 8004684:	b00a      	add	sp, #40	; 0x28
 8004686:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800468a:	bf00      	nop
 800468c:	200001dc 	.word	0x200001dc
 8004690:	08004d18 	.word	0x08004d18
 8004694:	c7efffff 	.word	0xc7efffff
 8004698:	fff00000 	.word	0xfff00000
 800469c:	08004aa5 	.word	0x08004aa5

080046a0 <__ieee754_log>:
 80046a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046a4:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80046a8:	b087      	sub	sp, #28
 80046aa:	4602      	mov	r2, r0
 80046ac:	460b      	mov	r3, r1
 80046ae:	4604      	mov	r4, r0
 80046b0:	460d      	mov	r5, r1
 80046b2:	da24      	bge.n	80046fe <__ieee754_log+0x5e>
 80046b4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80046b8:	4334      	orrs	r4, r6
 80046ba:	d108      	bne.n	80046ce <__ieee754_log+0x2e>
 80046bc:	2200      	movs	r2, #0
 80046be:	2300      	movs	r3, #0
 80046c0:	2000      	movs	r0, #0
 80046c2:	49c9      	ldr	r1, [pc, #804]	; (80049e8 <__ieee754_log+0x348>)
 80046c4:	f7fc f82e 	bl	8000724 <__aeabi_ddiv>
 80046c8:	b007      	add	sp, #28
 80046ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046ce:	2900      	cmp	r1, #0
 80046d0:	da04      	bge.n	80046dc <__ieee754_log+0x3c>
 80046d2:	f7fb fd49 	bl	8000168 <__aeabi_dsub>
 80046d6:	2200      	movs	r2, #0
 80046d8:	2300      	movs	r3, #0
 80046da:	e7f3      	b.n	80046c4 <__ieee754_log+0x24>
 80046dc:	2200      	movs	r2, #0
 80046de:	4bc3      	ldr	r3, [pc, #780]	; (80049ec <__ieee754_log+0x34c>)
 80046e0:	f7fb fef6 	bl	80004d0 <__aeabi_dmul>
 80046e4:	f06f 0635 	mvn.w	r6, #53	; 0x35
 80046e8:	4602      	mov	r2, r0
 80046ea:	460b      	mov	r3, r1
 80046ec:	460d      	mov	r5, r1
 80046ee:	49c0      	ldr	r1, [pc, #768]	; (80049f0 <__ieee754_log+0x350>)
 80046f0:	428d      	cmp	r5, r1
 80046f2:	dd06      	ble.n	8004702 <__ieee754_log+0x62>
 80046f4:	4610      	mov	r0, r2
 80046f6:	4619      	mov	r1, r3
 80046f8:	f7fb fd38 	bl	800016c <__adddf3>
 80046fc:	e7e4      	b.n	80046c8 <__ieee754_log+0x28>
 80046fe:	2600      	movs	r6, #0
 8004700:	e7f5      	b.n	80046ee <__ieee754_log+0x4e>
 8004702:	152c      	asrs	r4, r5, #20
 8004704:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8004708:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
 800470c:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004710:	f601 7164 	addw	r1, r1, #3940	; 0xf64
 8004714:	4426      	add	r6, r4
 8004716:	f401 1480 	and.w	r4, r1, #1048576	; 0x100000
 800471a:	f084 517f 	eor.w	r1, r4, #1069547520	; 0x3fc00000
 800471e:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 8004722:	ea41 0305 	orr.w	r3, r1, r5
 8004726:	4610      	mov	r0, r2
 8004728:	4619      	mov	r1, r3
 800472a:	2200      	movs	r2, #0
 800472c:	4bb1      	ldr	r3, [pc, #708]	; (80049f4 <__ieee754_log+0x354>)
 800472e:	f7fb fd1b 	bl	8000168 <__aeabi_dsub>
 8004732:	1cab      	adds	r3, r5, #2
 8004734:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004738:	2b02      	cmp	r3, #2
 800473a:	eb06 5414 	add.w	r4, r6, r4, lsr #20
 800473e:	4682      	mov	sl, r0
 8004740:	468b      	mov	fp, r1
 8004742:	f04f 0200 	mov.w	r2, #0
 8004746:	dc5b      	bgt.n	8004800 <__ieee754_log+0x160>
 8004748:	2300      	movs	r3, #0
 800474a:	f7fc f929 	bl	80009a0 <__aeabi_dcmpeq>
 800474e:	b1d0      	cbz	r0, 8004786 <__ieee754_log+0xe6>
 8004750:	2c00      	cmp	r4, #0
 8004752:	f000 816e 	beq.w	8004a32 <__ieee754_log+0x392>
 8004756:	4620      	mov	r0, r4
 8004758:	f7fb fe54 	bl	8000404 <__aeabi_i2d>
 800475c:	a38e      	add	r3, pc, #568	; (adr r3, 8004998 <__ieee754_log+0x2f8>)
 800475e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004762:	4606      	mov	r6, r0
 8004764:	460f      	mov	r7, r1
 8004766:	f7fb feb3 	bl	80004d0 <__aeabi_dmul>
 800476a:	a38d      	add	r3, pc, #564	; (adr r3, 80049a0 <__ieee754_log+0x300>)
 800476c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004770:	4604      	mov	r4, r0
 8004772:	460d      	mov	r5, r1
 8004774:	4630      	mov	r0, r6
 8004776:	4639      	mov	r1, r7
 8004778:	f7fb feaa 	bl	80004d0 <__aeabi_dmul>
 800477c:	4602      	mov	r2, r0
 800477e:	460b      	mov	r3, r1
 8004780:	4620      	mov	r0, r4
 8004782:	4629      	mov	r1, r5
 8004784:	e7b8      	b.n	80046f8 <__ieee754_log+0x58>
 8004786:	a388      	add	r3, pc, #544	; (adr r3, 80049a8 <__ieee754_log+0x308>)
 8004788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800478c:	4650      	mov	r0, sl
 800478e:	4659      	mov	r1, fp
 8004790:	f7fb fe9e 	bl	80004d0 <__aeabi_dmul>
 8004794:	4602      	mov	r2, r0
 8004796:	460b      	mov	r3, r1
 8004798:	2000      	movs	r0, #0
 800479a:	4997      	ldr	r1, [pc, #604]	; (80049f8 <__ieee754_log+0x358>)
 800479c:	f7fb fce4 	bl	8000168 <__aeabi_dsub>
 80047a0:	4652      	mov	r2, sl
 80047a2:	4606      	mov	r6, r0
 80047a4:	460f      	mov	r7, r1
 80047a6:	465b      	mov	r3, fp
 80047a8:	4650      	mov	r0, sl
 80047aa:	4659      	mov	r1, fp
 80047ac:	f7fb fe90 	bl	80004d0 <__aeabi_dmul>
 80047b0:	4602      	mov	r2, r0
 80047b2:	460b      	mov	r3, r1
 80047b4:	4630      	mov	r0, r6
 80047b6:	4639      	mov	r1, r7
 80047b8:	f7fb fe8a 	bl	80004d0 <__aeabi_dmul>
 80047bc:	4606      	mov	r6, r0
 80047be:	460f      	mov	r7, r1
 80047c0:	b934      	cbnz	r4, 80047d0 <__ieee754_log+0x130>
 80047c2:	4602      	mov	r2, r0
 80047c4:	460b      	mov	r3, r1
 80047c6:	4650      	mov	r0, sl
 80047c8:	4659      	mov	r1, fp
 80047ca:	f7fb fccd 	bl	8000168 <__aeabi_dsub>
 80047ce:	e77b      	b.n	80046c8 <__ieee754_log+0x28>
 80047d0:	4620      	mov	r0, r4
 80047d2:	f7fb fe17 	bl	8000404 <__aeabi_i2d>
 80047d6:	a370      	add	r3, pc, #448	; (adr r3, 8004998 <__ieee754_log+0x2f8>)
 80047d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047dc:	4680      	mov	r8, r0
 80047de:	4689      	mov	r9, r1
 80047e0:	f7fb fe76 	bl	80004d0 <__aeabi_dmul>
 80047e4:	a36e      	add	r3, pc, #440	; (adr r3, 80049a0 <__ieee754_log+0x300>)
 80047e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ea:	4604      	mov	r4, r0
 80047ec:	460d      	mov	r5, r1
 80047ee:	4640      	mov	r0, r8
 80047f0:	4649      	mov	r1, r9
 80047f2:	f7fb fe6d 	bl	80004d0 <__aeabi_dmul>
 80047f6:	4602      	mov	r2, r0
 80047f8:	460b      	mov	r3, r1
 80047fa:	4630      	mov	r0, r6
 80047fc:	4639      	mov	r1, r7
 80047fe:	e0b2      	b.n	8004966 <__ieee754_log+0x2c6>
 8004800:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004804:	f7fb fcb2 	bl	800016c <__adddf3>
 8004808:	4602      	mov	r2, r0
 800480a:	460b      	mov	r3, r1
 800480c:	4650      	mov	r0, sl
 800480e:	4659      	mov	r1, fp
 8004810:	f7fb ff88 	bl	8000724 <__aeabi_ddiv>
 8004814:	e9cd 0100 	strd	r0, r1, [sp]
 8004818:	4620      	mov	r0, r4
 800481a:	f7fb fdf3 	bl	8000404 <__aeabi_i2d>
 800481e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004822:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004826:	4610      	mov	r0, r2
 8004828:	4619      	mov	r1, r3
 800482a:	f7fb fe51 	bl	80004d0 <__aeabi_dmul>
 800482e:	4602      	mov	r2, r0
 8004830:	460b      	mov	r3, r1
 8004832:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004836:	f7fb fe4b 	bl	80004d0 <__aeabi_dmul>
 800483a:	a35d      	add	r3, pc, #372	; (adr r3, 80049b0 <__ieee754_log+0x310>)
 800483c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004840:	4606      	mov	r6, r0
 8004842:	460f      	mov	r7, r1
 8004844:	f7fb fe44 	bl	80004d0 <__aeabi_dmul>
 8004848:	a35b      	add	r3, pc, #364	; (adr r3, 80049b8 <__ieee754_log+0x318>)
 800484a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800484e:	f7fb fc8d 	bl	800016c <__adddf3>
 8004852:	4632      	mov	r2, r6
 8004854:	463b      	mov	r3, r7
 8004856:	f7fb fe3b 	bl	80004d0 <__aeabi_dmul>
 800485a:	a359      	add	r3, pc, #356	; (adr r3, 80049c0 <__ieee754_log+0x320>)
 800485c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004860:	f7fb fc84 	bl	800016c <__adddf3>
 8004864:	4632      	mov	r2, r6
 8004866:	463b      	mov	r3, r7
 8004868:	f7fb fe32 	bl	80004d0 <__aeabi_dmul>
 800486c:	a356      	add	r3, pc, #344	; (adr r3, 80049c8 <__ieee754_log+0x328>)
 800486e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004872:	f7fb fc7b 	bl	800016c <__adddf3>
 8004876:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800487a:	f7fb fe29 	bl	80004d0 <__aeabi_dmul>
 800487e:	a354      	add	r3, pc, #336	; (adr r3, 80049d0 <__ieee754_log+0x330>)
 8004880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004884:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004888:	4630      	mov	r0, r6
 800488a:	4639      	mov	r1, r7
 800488c:	f7fb fe20 	bl	80004d0 <__aeabi_dmul>
 8004890:	a351      	add	r3, pc, #324	; (adr r3, 80049d8 <__ieee754_log+0x338>)
 8004892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004896:	f7fb fc69 	bl	800016c <__adddf3>
 800489a:	4632      	mov	r2, r6
 800489c:	463b      	mov	r3, r7
 800489e:	f7fb fe17 	bl	80004d0 <__aeabi_dmul>
 80048a2:	a34f      	add	r3, pc, #316	; (adr r3, 80049e0 <__ieee754_log+0x340>)
 80048a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048a8:	f7fb fc60 	bl	800016c <__adddf3>
 80048ac:	4632      	mov	r2, r6
 80048ae:	463b      	mov	r3, r7
 80048b0:	f7fb fe0e 	bl	80004d0 <__aeabi_dmul>
 80048b4:	4602      	mov	r2, r0
 80048b6:	460b      	mov	r3, r1
 80048b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80048bc:	f7fb fc56 	bl	800016c <__adddf3>
 80048c0:	f5a5 28c2 	sub.w	r8, r5, #397312	; 0x61000
 80048c4:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 80048c8:	f2a8 487a 	subw	r8, r8, #1146	; 0x47a
 80048cc:	3551      	adds	r5, #81	; 0x51
 80048ce:	ea45 0508 	orr.w	r5, r5, r8
 80048d2:	2d00      	cmp	r5, #0
 80048d4:	4606      	mov	r6, r0
 80048d6:	460f      	mov	r7, r1
 80048d8:	dd50      	ble.n	800497c <__ieee754_log+0x2dc>
 80048da:	2200      	movs	r2, #0
 80048dc:	4b46      	ldr	r3, [pc, #280]	; (80049f8 <__ieee754_log+0x358>)
 80048de:	4650      	mov	r0, sl
 80048e0:	4659      	mov	r1, fp
 80048e2:	f7fb fdf5 	bl	80004d0 <__aeabi_dmul>
 80048e6:	4652      	mov	r2, sl
 80048e8:	465b      	mov	r3, fp
 80048ea:	f7fb fdf1 	bl	80004d0 <__aeabi_dmul>
 80048ee:	4680      	mov	r8, r0
 80048f0:	4689      	mov	r9, r1
 80048f2:	b994      	cbnz	r4, 800491a <__ieee754_log+0x27a>
 80048f4:	4602      	mov	r2, r0
 80048f6:	460b      	mov	r3, r1
 80048f8:	4630      	mov	r0, r6
 80048fa:	4639      	mov	r1, r7
 80048fc:	f7fb fc36 	bl	800016c <__adddf3>
 8004900:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004904:	f7fb fde4 	bl	80004d0 <__aeabi_dmul>
 8004908:	4602      	mov	r2, r0
 800490a:	460b      	mov	r3, r1
 800490c:	4640      	mov	r0, r8
 800490e:	4649      	mov	r1, r9
 8004910:	f7fb fc2a 	bl	8000168 <__aeabi_dsub>
 8004914:	4602      	mov	r2, r0
 8004916:	460b      	mov	r3, r1
 8004918:	e755      	b.n	80047c6 <__ieee754_log+0x126>
 800491a:	a31f      	add	r3, pc, #124	; (adr r3, 8004998 <__ieee754_log+0x2f8>)
 800491c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004920:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004924:	f7fb fdd4 	bl	80004d0 <__aeabi_dmul>
 8004928:	4642      	mov	r2, r8
 800492a:	464b      	mov	r3, r9
 800492c:	4604      	mov	r4, r0
 800492e:	460d      	mov	r5, r1
 8004930:	4630      	mov	r0, r6
 8004932:	4639      	mov	r1, r7
 8004934:	f7fb fc1a 	bl	800016c <__adddf3>
 8004938:	e9dd 2300 	ldrd	r2, r3, [sp]
 800493c:	f7fb fdc8 	bl	80004d0 <__aeabi_dmul>
 8004940:	a317      	add	r3, pc, #92	; (adr r3, 80049a0 <__ieee754_log+0x300>)
 8004942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004946:	4606      	mov	r6, r0
 8004948:	460f      	mov	r7, r1
 800494a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800494e:	f7fb fdbf 	bl	80004d0 <__aeabi_dmul>
 8004952:	4602      	mov	r2, r0
 8004954:	460b      	mov	r3, r1
 8004956:	4630      	mov	r0, r6
 8004958:	4639      	mov	r1, r7
 800495a:	f7fb fc07 	bl	800016c <__adddf3>
 800495e:	4602      	mov	r2, r0
 8004960:	460b      	mov	r3, r1
 8004962:	4640      	mov	r0, r8
 8004964:	4649      	mov	r1, r9
 8004966:	f7fb fbff 	bl	8000168 <__aeabi_dsub>
 800496a:	4652      	mov	r2, sl
 800496c:	465b      	mov	r3, fp
 800496e:	f7fb fbfb 	bl	8000168 <__aeabi_dsub>
 8004972:	4602      	mov	r2, r0
 8004974:	460b      	mov	r3, r1
 8004976:	4620      	mov	r0, r4
 8004978:	4629      	mov	r1, r5
 800497a:	e726      	b.n	80047ca <__ieee754_log+0x12a>
 800497c:	2c00      	cmp	r4, #0
 800497e:	d13d      	bne.n	80049fc <__ieee754_log+0x35c>
 8004980:	4602      	mov	r2, r0
 8004982:	460b      	mov	r3, r1
 8004984:	4650      	mov	r0, sl
 8004986:	4659      	mov	r1, fp
 8004988:	f7fb fbee 	bl	8000168 <__aeabi_dsub>
 800498c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004990:	f7fb fd9e 	bl	80004d0 <__aeabi_dmul>
 8004994:	e7be      	b.n	8004914 <__ieee754_log+0x274>
 8004996:	bf00      	nop
 8004998:	fee00000 	.word	0xfee00000
 800499c:	3fe62e42 	.word	0x3fe62e42
 80049a0:	35793c76 	.word	0x35793c76
 80049a4:	3dea39ef 	.word	0x3dea39ef
 80049a8:	55555555 	.word	0x55555555
 80049ac:	3fd55555 	.word	0x3fd55555
 80049b0:	df3e5244 	.word	0xdf3e5244
 80049b4:	3fc2f112 	.word	0x3fc2f112
 80049b8:	96cb03de 	.word	0x96cb03de
 80049bc:	3fc74664 	.word	0x3fc74664
 80049c0:	94229359 	.word	0x94229359
 80049c4:	3fd24924 	.word	0x3fd24924
 80049c8:	55555593 	.word	0x55555593
 80049cc:	3fe55555 	.word	0x3fe55555
 80049d0:	d078c69f 	.word	0xd078c69f
 80049d4:	3fc39a09 	.word	0x3fc39a09
 80049d8:	1d8e78af 	.word	0x1d8e78af
 80049dc:	3fcc71c5 	.word	0x3fcc71c5
 80049e0:	9997fa04 	.word	0x9997fa04
 80049e4:	3fd99999 	.word	0x3fd99999
 80049e8:	c3500000 	.word	0xc3500000
 80049ec:	43500000 	.word	0x43500000
 80049f0:	7fefffff 	.word	0x7fefffff
 80049f4:	3ff00000 	.word	0x3ff00000
 80049f8:	3fe00000 	.word	0x3fe00000
 80049fc:	a30e      	add	r3, pc, #56	; (adr r3, 8004a38 <__ieee754_log+0x398>)
 80049fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a06:	f7fb fd63 	bl	80004d0 <__aeabi_dmul>
 8004a0a:	4632      	mov	r2, r6
 8004a0c:	463b      	mov	r3, r7
 8004a0e:	4604      	mov	r4, r0
 8004a10:	460d      	mov	r5, r1
 8004a12:	4650      	mov	r0, sl
 8004a14:	4659      	mov	r1, fp
 8004a16:	f7fb fba7 	bl	8000168 <__aeabi_dsub>
 8004a1a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004a1e:	f7fb fd57 	bl	80004d0 <__aeabi_dmul>
 8004a22:	a307      	add	r3, pc, #28	; (adr r3, 8004a40 <__ieee754_log+0x3a0>)
 8004a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a28:	4606      	mov	r6, r0
 8004a2a:	460f      	mov	r7, r1
 8004a2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a30:	e6df      	b.n	80047f2 <__ieee754_log+0x152>
 8004a32:	2000      	movs	r0, #0
 8004a34:	2100      	movs	r1, #0
 8004a36:	e647      	b.n	80046c8 <__ieee754_log+0x28>
 8004a38:	fee00000 	.word	0xfee00000
 8004a3c:	3fe62e42 	.word	0x3fe62e42
 8004a40:	35793c76 	.word	0x35793c76
 8004a44:	3dea39ef 	.word	0x3dea39ef

08004a48 <matherr>:
 8004a48:	2000      	movs	r0, #0
 8004a4a:	4770      	bx	lr

08004a4c <nan>:
 8004a4c:	2000      	movs	r0, #0
 8004a4e:	4901      	ldr	r1, [pc, #4]	; (8004a54 <nan+0x8>)
 8004a50:	4770      	bx	lr
 8004a52:	bf00      	nop
 8004a54:	7ff80000 	.word	0x7ff80000

08004a58 <_init>:
 8004a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a5a:	bf00      	nop
 8004a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a5e:	bc08      	pop	{r3}
 8004a60:	469e      	mov	lr, r3
 8004a62:	4770      	bx	lr

08004a64 <_fini>:
 8004a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a66:	bf00      	nop
 8004a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a6a:	bc08      	pop	{r3}
 8004a6c:	469e      	mov	lr, r3
 8004a6e:	4770      	bx	lr
