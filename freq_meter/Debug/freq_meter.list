
freq_meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000525c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000488  08005370  08005370  00015370  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080057f8  080057f8  000157f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080057fc  080057fc  000157fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001e0  20000000  08005800  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000140  200001e0  080059e0  000201e0  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000320  080059e0  00020320  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001393f  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002388  00000000  00000000  00033b48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006081  00000000  00000000  00035ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000920  00000000  00000000  0003bf58  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000bb0  00000000  00000000  0003c878  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000061a3  00000000  00000000  0003d428  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000034cf  00000000  00000000  000435cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00046a9a  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002668  00000000  00000000  00046b18  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08005354 	.word	0x08005354

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08005354 	.word	0x08005354

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f092 0f00 	teq	r2, #0
 800044a:	bf14      	ite	ne
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	4770      	bxeq	lr
 8000452:	b530      	push	{r4, r5, lr}
 8000454:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000460:	e720      	b.n	80002a4 <__adddf3+0x138>
 8000462:	bf00      	nop

08000464 <__aeabi_ul2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f04f 0500 	mov.w	r5, #0
 8000472:	e00a      	b.n	800048a <__aeabi_l2d+0x16>

08000474 <__aeabi_l2d>:
 8000474:	ea50 0201 	orrs.w	r2, r0, r1
 8000478:	bf08      	it	eq
 800047a:	4770      	bxeq	lr
 800047c:	b530      	push	{r4, r5, lr}
 800047e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000482:	d502      	bpl.n	800048a <__aeabi_l2d+0x16>
 8000484:	4240      	negs	r0, r0
 8000486:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000492:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000496:	f43f aedc 	beq.w	8000252 <__adddf3+0xe6>
 800049a:	f04f 0203 	mov.w	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b2:	f1c2 0320 	rsb	r3, r2, #32
 80004b6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ba:	fa20 f002 	lsr.w	r0, r0, r2
 80004be:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c2:	ea40 000e 	orr.w	r0, r0, lr
 80004c6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ca:	4414      	add	r4, r2
 80004cc:	e6c1      	b.n	8000252 <__adddf3+0xe6>
 80004ce:	bf00      	nop

080004d0 <__aeabi_dmul>:
 80004d0:	b570      	push	{r4, r5, r6, lr}
 80004d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004de:	bf1d      	ittte	ne
 80004e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004e4:	ea94 0f0c 	teqne	r4, ip
 80004e8:	ea95 0f0c 	teqne	r5, ip
 80004ec:	f000 f8de 	bleq	80006ac <__aeabi_dmul+0x1dc>
 80004f0:	442c      	add	r4, r5
 80004f2:	ea81 0603 	eor.w	r6, r1, r3
 80004f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000502:	bf18      	it	ne
 8000504:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000508:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800050c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000510:	d038      	beq.n	8000584 <__aeabi_dmul+0xb4>
 8000512:	fba0 ce02 	umull	ip, lr, r0, r2
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800051e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000522:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000526:	f04f 0600 	mov.w	r6, #0
 800052a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800052e:	f09c 0f00 	teq	ip, #0
 8000532:	bf18      	it	ne
 8000534:	f04e 0e01 	orrne.w	lr, lr, #1
 8000538:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800053c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000540:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000544:	d204      	bcs.n	8000550 <__aeabi_dmul+0x80>
 8000546:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800054a:	416d      	adcs	r5, r5
 800054c:	eb46 0606 	adc.w	r6, r6, r6
 8000550:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000554:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000558:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800055c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000560:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000564:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000568:	bf88      	it	hi
 800056a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800056e:	d81e      	bhi.n	80005ae <__aeabi_dmul+0xde>
 8000570:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000574:	bf08      	it	eq
 8000576:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800057a:	f150 0000 	adcs.w	r0, r0, #0
 800057e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000582:	bd70      	pop	{r4, r5, r6, pc}
 8000584:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000588:	ea46 0101 	orr.w	r1, r6, r1
 800058c:	ea40 0002 	orr.w	r0, r0, r2
 8000590:	ea81 0103 	eor.w	r1, r1, r3
 8000594:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000598:	bfc2      	ittt	gt
 800059a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800059e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005a2:	bd70      	popgt	{r4, r5, r6, pc}
 80005a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a8:	f04f 0e00 	mov.w	lr, #0
 80005ac:	3c01      	subs	r4, #1
 80005ae:	f300 80ab 	bgt.w	8000708 <__aeabi_dmul+0x238>
 80005b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005b6:	bfde      	ittt	le
 80005b8:	2000      	movle	r0, #0
 80005ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005be:	bd70      	pople	{r4, r5, r6, pc}
 80005c0:	f1c4 0400 	rsb	r4, r4, #0
 80005c4:	3c20      	subs	r4, #32
 80005c6:	da35      	bge.n	8000634 <__aeabi_dmul+0x164>
 80005c8:	340c      	adds	r4, #12
 80005ca:	dc1b      	bgt.n	8000604 <__aeabi_dmul+0x134>
 80005cc:	f104 0414 	add.w	r4, r4, #20
 80005d0:	f1c4 0520 	rsb	r5, r4, #32
 80005d4:	fa00 f305 	lsl.w	r3, r0, r5
 80005d8:	fa20 f004 	lsr.w	r0, r0, r4
 80005dc:	fa01 f205 	lsl.w	r2, r1, r5
 80005e0:	ea40 0002 	orr.w	r0, r0, r2
 80005e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f0:	fa21 f604 	lsr.w	r6, r1, r4
 80005f4:	eb42 0106 	adc.w	r1, r2, r6
 80005f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005fc:	bf08      	it	eq
 80005fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f1c4 040c 	rsb	r4, r4, #12
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f304 	lsl.w	r3, r0, r4
 8000610:	fa20 f005 	lsr.w	r0, r0, r5
 8000614:	fa01 f204 	lsl.w	r2, r1, r4
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000620:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000624:	f141 0100 	adc.w	r1, r1, #0
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 0520 	rsb	r5, r4, #32
 8000638:	fa00 f205 	lsl.w	r2, r0, r5
 800063c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000640:	fa20 f304 	lsr.w	r3, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea43 0302 	orr.w	r3, r3, r2
 800064c:	fa21 f004 	lsr.w	r0, r1, r4
 8000650:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000654:	fa21 f204 	lsr.w	r2, r1, r4
 8000658:	ea20 0002 	bic.w	r0, r0, r2
 800065c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f094 0f00 	teq	r4, #0
 8000670:	d10f      	bne.n	8000692 <__aeabi_dmul+0x1c2>
 8000672:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000676:	0040      	lsls	r0, r0, #1
 8000678:	eb41 0101 	adc.w	r1, r1, r1
 800067c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000680:	bf08      	it	eq
 8000682:	3c01      	subeq	r4, #1
 8000684:	d0f7      	beq.n	8000676 <__aeabi_dmul+0x1a6>
 8000686:	ea41 0106 	orr.w	r1, r1, r6
 800068a:	f095 0f00 	teq	r5, #0
 800068e:	bf18      	it	ne
 8000690:	4770      	bxne	lr
 8000692:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000696:	0052      	lsls	r2, r2, #1
 8000698:	eb43 0303 	adc.w	r3, r3, r3
 800069c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a0:	bf08      	it	eq
 80006a2:	3d01      	subeq	r5, #1
 80006a4:	d0f7      	beq.n	8000696 <__aeabi_dmul+0x1c6>
 80006a6:	ea43 0306 	orr.w	r3, r3, r6
 80006aa:	4770      	bx	lr
 80006ac:	ea94 0f0c 	teq	r4, ip
 80006b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006b4:	bf18      	it	ne
 80006b6:	ea95 0f0c 	teqne	r5, ip
 80006ba:	d00c      	beq.n	80006d6 <__aeabi_dmul+0x206>
 80006bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c0:	bf18      	it	ne
 80006c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006c6:	d1d1      	bne.n	800066c <__aeabi_dmul+0x19c>
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	f04f 0000 	mov.w	r0, #0
 80006d4:	bd70      	pop	{r4, r5, r6, pc}
 80006d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006da:	bf06      	itte	eq
 80006dc:	4610      	moveq	r0, r2
 80006de:	4619      	moveq	r1, r3
 80006e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e4:	d019      	beq.n	800071a <__aeabi_dmul+0x24a>
 80006e6:	ea94 0f0c 	teq	r4, ip
 80006ea:	d102      	bne.n	80006f2 <__aeabi_dmul+0x222>
 80006ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f0:	d113      	bne.n	800071a <__aeabi_dmul+0x24a>
 80006f2:	ea95 0f0c 	teq	r5, ip
 80006f6:	d105      	bne.n	8000704 <__aeabi_dmul+0x234>
 80006f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006fc:	bf1c      	itt	ne
 80006fe:	4610      	movne	r0, r2
 8000700:	4619      	movne	r1, r3
 8000702:	d10a      	bne.n	800071a <__aeabi_dmul+0x24a>
 8000704:	ea81 0103 	eor.w	r1, r1, r3
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000710:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000714:	f04f 0000 	mov.w	r0, #0
 8000718:	bd70      	pop	{r4, r5, r6, pc}
 800071a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800071e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000722:	bd70      	pop	{r4, r5, r6, pc}

08000724 <__aeabi_ddiv>:
 8000724:	b570      	push	{r4, r5, r6, lr}
 8000726:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800072a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800072e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000732:	bf1d      	ittte	ne
 8000734:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000738:	ea94 0f0c 	teqne	r4, ip
 800073c:	ea95 0f0c 	teqne	r5, ip
 8000740:	f000 f8a7 	bleq	8000892 <__aeabi_ddiv+0x16e>
 8000744:	eba4 0405 	sub.w	r4, r4, r5
 8000748:	ea81 0e03 	eor.w	lr, r1, r3
 800074c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000750:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000754:	f000 8088 	beq.w	8000868 <__aeabi_ddiv+0x144>
 8000758:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800075c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000760:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000764:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000768:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800076c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000770:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000774:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000778:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800077c:	429d      	cmp	r5, r3
 800077e:	bf08      	it	eq
 8000780:	4296      	cmpeq	r6, r2
 8000782:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000786:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800078a:	d202      	bcs.n	8000792 <__aeabi_ddiv+0x6e>
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	1ab6      	subs	r6, r6, r2
 8000794:	eb65 0503 	sbc.w	r5, r5, r3
 8000798:	085b      	lsrs	r3, r3, #1
 800079a:	ea4f 0232 	mov.w	r2, r2, rrx
 800079e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ae:	bf22      	ittt	cs
 80007b0:	1ab6      	subcs	r6, r6, r2
 80007b2:	4675      	movcs	r5, lr
 80007b4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b8:	085b      	lsrs	r3, r3, #1
 80007ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000800:	ea55 0e06 	orrs.w	lr, r5, r6
 8000804:	d018      	beq.n	8000838 <__aeabi_ddiv+0x114>
 8000806:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800080a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800080e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000812:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000816:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800081a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800081e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000822:	d1c0      	bne.n	80007a6 <__aeabi_ddiv+0x82>
 8000824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000828:	d10b      	bne.n	8000842 <__aeabi_ddiv+0x11e>
 800082a:	ea41 0100 	orr.w	r1, r1, r0
 800082e:	f04f 0000 	mov.w	r0, #0
 8000832:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000836:	e7b6      	b.n	80007a6 <__aeabi_ddiv+0x82>
 8000838:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800083c:	bf04      	itt	eq
 800083e:	4301      	orreq	r1, r0
 8000840:	2000      	moveq	r0, #0
 8000842:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000846:	bf88      	it	hi
 8000848:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800084c:	f63f aeaf 	bhi.w	80005ae <__aeabi_dmul+0xde>
 8000850:	ebb5 0c03 	subs.w	ip, r5, r3
 8000854:	bf04      	itt	eq
 8000856:	ebb6 0c02 	subseq.w	ip, r6, r2
 800085a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800085e:	f150 0000 	adcs.w	r0, r0, #0
 8000862:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000866:	bd70      	pop	{r4, r5, r6, pc}
 8000868:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800086c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000870:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000874:	bfc2      	ittt	gt
 8000876:	ebd4 050c 	rsbsgt	r5, r4, ip
 800087a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800087e:	bd70      	popgt	{r4, r5, r6, pc}
 8000880:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000884:	f04f 0e00 	mov.w	lr, #0
 8000888:	3c01      	subs	r4, #1
 800088a:	e690      	b.n	80005ae <__aeabi_dmul+0xde>
 800088c:	ea45 0e06 	orr.w	lr, r5, r6
 8000890:	e68d      	b.n	80005ae <__aeabi_dmul+0xde>
 8000892:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000896:	ea94 0f0c 	teq	r4, ip
 800089a:	bf08      	it	eq
 800089c:	ea95 0f0c 	teqeq	r5, ip
 80008a0:	f43f af3b 	beq.w	800071a <__aeabi_dmul+0x24a>
 80008a4:	ea94 0f0c 	teq	r4, ip
 80008a8:	d10a      	bne.n	80008c0 <__aeabi_ddiv+0x19c>
 80008aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ae:	f47f af34 	bne.w	800071a <__aeabi_dmul+0x24a>
 80008b2:	ea95 0f0c 	teq	r5, ip
 80008b6:	f47f af25 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ba:	4610      	mov	r0, r2
 80008bc:	4619      	mov	r1, r3
 80008be:	e72c      	b.n	800071a <__aeabi_dmul+0x24a>
 80008c0:	ea95 0f0c 	teq	r5, ip
 80008c4:	d106      	bne.n	80008d4 <__aeabi_ddiv+0x1b0>
 80008c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ca:	f43f aefd 	beq.w	80006c8 <__aeabi_dmul+0x1f8>
 80008ce:	4610      	mov	r0, r2
 80008d0:	4619      	mov	r1, r3
 80008d2:	e722      	b.n	800071a <__aeabi_dmul+0x24a>
 80008d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d8:	bf18      	it	ne
 80008da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008de:	f47f aec5 	bne.w	800066c <__aeabi_dmul+0x19c>
 80008e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008e6:	f47f af0d 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008ee:	f47f aeeb 	bne.w	80006c8 <__aeabi_dmul+0x1f8>
 80008f2:	e712      	b.n	800071a <__aeabi_dmul+0x24a>

080008f4 <__gedf2>:
 80008f4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80008f8:	e006      	b.n	8000908 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__ledf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	e002      	b.n	8000908 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__cmpdf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	f84d cd04 	str.w	ip, [sp, #-4]!
 800090c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000910:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000914:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000918:	bf18      	it	ne
 800091a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800091e:	d01b      	beq.n	8000958 <__cmpdf2+0x54>
 8000920:	b001      	add	sp, #4
 8000922:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000926:	bf0c      	ite	eq
 8000928:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800092c:	ea91 0f03 	teqne	r1, r3
 8000930:	bf02      	ittt	eq
 8000932:	ea90 0f02 	teqeq	r0, r2
 8000936:	2000      	moveq	r0, #0
 8000938:	4770      	bxeq	lr
 800093a:	f110 0f00 	cmn.w	r0, #0
 800093e:	ea91 0f03 	teq	r1, r3
 8000942:	bf58      	it	pl
 8000944:	4299      	cmppl	r1, r3
 8000946:	bf08      	it	eq
 8000948:	4290      	cmpeq	r0, r2
 800094a:	bf2c      	ite	cs
 800094c:	17d8      	asrcs	r0, r3, #31
 800094e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000952:	f040 0001 	orr.w	r0, r0, #1
 8000956:	4770      	bx	lr
 8000958:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	d102      	bne.n	8000968 <__cmpdf2+0x64>
 8000962:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000966:	d107      	bne.n	8000978 <__cmpdf2+0x74>
 8000968:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800096c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000970:	d1d6      	bne.n	8000920 <__cmpdf2+0x1c>
 8000972:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000976:	d0d3      	beq.n	8000920 <__cmpdf2+0x1c>
 8000978:	f85d 0b04 	ldr.w	r0, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop

08000980 <__aeabi_cdrcmple>:
 8000980:	4684      	mov	ip, r0
 8000982:	4610      	mov	r0, r2
 8000984:	4662      	mov	r2, ip
 8000986:	468c      	mov	ip, r1
 8000988:	4619      	mov	r1, r3
 800098a:	4663      	mov	r3, ip
 800098c:	e000      	b.n	8000990 <__aeabi_cdcmpeq>
 800098e:	bf00      	nop

08000990 <__aeabi_cdcmpeq>:
 8000990:	b501      	push	{r0, lr}
 8000992:	f7ff ffb7 	bl	8000904 <__cmpdf2>
 8000996:	2800      	cmp	r0, #0
 8000998:	bf48      	it	mi
 800099a:	f110 0f00 	cmnmi.w	r0, #0
 800099e:	bd01      	pop	{r0, pc}

080009a0 <__aeabi_dcmpeq>:
 80009a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a4:	f7ff fff4 	bl	8000990 <__aeabi_cdcmpeq>
 80009a8:	bf0c      	ite	eq
 80009aa:	2001      	moveq	r0, #1
 80009ac:	2000      	movne	r0, #0
 80009ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b2:	bf00      	nop

080009b4 <__aeabi_dcmplt>:
 80009b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b8:	f7ff ffea 	bl	8000990 <__aeabi_cdcmpeq>
 80009bc:	bf34      	ite	cc
 80009be:	2001      	movcc	r0, #1
 80009c0:	2000      	movcs	r0, #0
 80009c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009c6:	bf00      	nop

080009c8 <__aeabi_dcmple>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff ffe0 	bl	8000990 <__aeabi_cdcmpeq>
 80009d0:	bf94      	ite	ls
 80009d2:	2001      	movls	r0, #1
 80009d4:	2000      	movhi	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmpge>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffce 	bl	8000980 <__aeabi_cdrcmple>
 80009e4:	bf94      	ite	ls
 80009e6:	2001      	movls	r0, #1
 80009e8:	2000      	movhi	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmpgt>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffc4 	bl	8000980 <__aeabi_cdrcmple>
 80009f8:	bf34      	ite	cc
 80009fa:	2001      	movcc	r0, #1
 80009fc:	2000      	movcs	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpun>:
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	d102      	bne.n	8000a14 <__aeabi_dcmpun+0x10>
 8000a0e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a12:	d10a      	bne.n	8000a2a <__aeabi_dcmpun+0x26>
 8000a14:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a1c:	d102      	bne.n	8000a24 <__aeabi_dcmpun+0x20>
 8000a1e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a22:	d102      	bne.n	8000a2a <__aeabi_dcmpun+0x26>
 8000a24:	f04f 0000 	mov.w	r0, #0
 8000a28:	4770      	bx	lr
 8000a2a:	f04f 0001 	mov.w	r0, #1
 8000a2e:	4770      	bx	lr

08000a30 <__aeabi_d2iz>:
 8000a30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a34:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a38:	d215      	bcs.n	8000a66 <__aeabi_d2iz+0x36>
 8000a3a:	d511      	bpl.n	8000a60 <__aeabi_d2iz+0x30>
 8000a3c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a40:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a44:	d912      	bls.n	8000a6c <__aeabi_d2iz+0x3c>
 8000a46:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a52:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a56:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5a:	bf18      	it	ne
 8000a5c:	4240      	negne	r0, r0
 8000a5e:	4770      	bx	lr
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6a:	d105      	bne.n	8000a78 <__aeabi_d2iz+0x48>
 8000a6c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a70:	bf08      	it	eq
 8000a72:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a76:	4770      	bx	lr
 8000a78:	f04f 0000 	mov.w	r0, #0
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop

08000a80 <__aeabi_frsub>:
 8000a80:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a84:	e002      	b.n	8000a8c <__addsf3>
 8000a86:	bf00      	nop

08000a88 <__aeabi_fsub>:
 8000a88:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a8c <__addsf3>:
 8000a8c:	0042      	lsls	r2, r0, #1
 8000a8e:	bf1f      	itttt	ne
 8000a90:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a94:	ea92 0f03 	teqne	r2, r3
 8000a98:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a9c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa0:	d06a      	beq.n	8000b78 <__addsf3+0xec>
 8000aa2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aa6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000aaa:	bfc1      	itttt	gt
 8000aac:	18d2      	addgt	r2, r2, r3
 8000aae:	4041      	eorgt	r1, r0
 8000ab0:	4048      	eorgt	r0, r1
 8000ab2:	4041      	eorgt	r1, r0
 8000ab4:	bfb8      	it	lt
 8000ab6:	425b      	neglt	r3, r3
 8000ab8:	2b19      	cmp	r3, #25
 8000aba:	bf88      	it	hi
 8000abc:	4770      	bxhi	lr
 8000abe:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ac2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ad6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ada:	bf18      	it	ne
 8000adc:	4249      	negne	r1, r1
 8000ade:	ea92 0f03 	teq	r2, r3
 8000ae2:	d03f      	beq.n	8000b64 <__addsf3+0xd8>
 8000ae4:	f1a2 0201 	sub.w	r2, r2, #1
 8000ae8:	fa41 fc03 	asr.w	ip, r1, r3
 8000aec:	eb10 000c 	adds.w	r0, r0, ip
 8000af0:	f1c3 0320 	rsb	r3, r3, #32
 8000af4:	fa01 f103 	lsl.w	r1, r1, r3
 8000af8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000afc:	d502      	bpl.n	8000b04 <__addsf3+0x78>
 8000afe:	4249      	negs	r1, r1
 8000b00:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b04:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b08:	d313      	bcc.n	8000b32 <__addsf3+0xa6>
 8000b0a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b0e:	d306      	bcc.n	8000b1e <__addsf3+0x92>
 8000b10:	0840      	lsrs	r0, r0, #1
 8000b12:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b16:	f102 0201 	add.w	r2, r2, #1
 8000b1a:	2afe      	cmp	r2, #254	; 0xfe
 8000b1c:	d251      	bcs.n	8000bc2 <__addsf3+0x136>
 8000b1e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b22:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b26:	bf08      	it	eq
 8000b28:	f020 0001 	biceq.w	r0, r0, #1
 8000b2c:	ea40 0003 	orr.w	r0, r0, r3
 8000b30:	4770      	bx	lr
 8000b32:	0049      	lsls	r1, r1, #1
 8000b34:	eb40 0000 	adc.w	r0, r0, r0
 8000b38:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b3c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b40:	d1ed      	bne.n	8000b1e <__addsf3+0x92>
 8000b42:	fab0 fc80 	clz	ip, r0
 8000b46:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b4a:	ebb2 020c 	subs.w	r2, r2, ip
 8000b4e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b52:	bfaa      	itet	ge
 8000b54:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b58:	4252      	neglt	r2, r2
 8000b5a:	4318      	orrge	r0, r3
 8000b5c:	bfbc      	itt	lt
 8000b5e:	40d0      	lsrlt	r0, r2
 8000b60:	4318      	orrlt	r0, r3
 8000b62:	4770      	bx	lr
 8000b64:	f092 0f00 	teq	r2, #0
 8000b68:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b6c:	bf06      	itte	eq
 8000b6e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b72:	3201      	addeq	r2, #1
 8000b74:	3b01      	subne	r3, #1
 8000b76:	e7b5      	b.n	8000ae4 <__addsf3+0x58>
 8000b78:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b7c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b80:	bf18      	it	ne
 8000b82:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b86:	d021      	beq.n	8000bcc <__addsf3+0x140>
 8000b88:	ea92 0f03 	teq	r2, r3
 8000b8c:	d004      	beq.n	8000b98 <__addsf3+0x10c>
 8000b8e:	f092 0f00 	teq	r2, #0
 8000b92:	bf08      	it	eq
 8000b94:	4608      	moveq	r0, r1
 8000b96:	4770      	bx	lr
 8000b98:	ea90 0f01 	teq	r0, r1
 8000b9c:	bf1c      	itt	ne
 8000b9e:	2000      	movne	r0, #0
 8000ba0:	4770      	bxne	lr
 8000ba2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ba6:	d104      	bne.n	8000bb2 <__addsf3+0x126>
 8000ba8:	0040      	lsls	r0, r0, #1
 8000baa:	bf28      	it	cs
 8000bac:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb0:	4770      	bx	lr
 8000bb2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bb6:	bf3c      	itt	cc
 8000bb8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bbc:	4770      	bxcc	lr
 8000bbe:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bc2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bc6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bca:	4770      	bx	lr
 8000bcc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd0:	bf16      	itet	ne
 8000bd2:	4608      	movne	r0, r1
 8000bd4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bd8:	4601      	movne	r1, r0
 8000bda:	0242      	lsls	r2, r0, #9
 8000bdc:	bf06      	itte	eq
 8000bde:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000be2:	ea90 0f01 	teqeq	r0, r1
 8000be6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bea:	4770      	bx	lr

08000bec <__aeabi_ui2f>:
 8000bec:	f04f 0300 	mov.w	r3, #0
 8000bf0:	e004      	b.n	8000bfc <__aeabi_i2f+0x8>
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_i2f>:
 8000bf4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000bf8:	bf48      	it	mi
 8000bfa:	4240      	negmi	r0, r0
 8000bfc:	ea5f 0c00 	movs.w	ip, r0
 8000c00:	bf08      	it	eq
 8000c02:	4770      	bxeq	lr
 8000c04:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c08:	4601      	mov	r1, r0
 8000c0a:	f04f 0000 	mov.w	r0, #0
 8000c0e:	e01c      	b.n	8000c4a <__aeabi_l2f+0x2a>

08000c10 <__aeabi_ul2f>:
 8000c10:	ea50 0201 	orrs.w	r2, r0, r1
 8000c14:	bf08      	it	eq
 8000c16:	4770      	bxeq	lr
 8000c18:	f04f 0300 	mov.w	r3, #0
 8000c1c:	e00a      	b.n	8000c34 <__aeabi_l2f+0x14>
 8000c1e:	bf00      	nop

08000c20 <__aeabi_l2f>:
 8000c20:	ea50 0201 	orrs.w	r2, r0, r1
 8000c24:	bf08      	it	eq
 8000c26:	4770      	bxeq	lr
 8000c28:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c2c:	d502      	bpl.n	8000c34 <__aeabi_l2f+0x14>
 8000c2e:	4240      	negs	r0, r0
 8000c30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c34:	ea5f 0c01 	movs.w	ip, r1
 8000c38:	bf02      	ittt	eq
 8000c3a:	4684      	moveq	ip, r0
 8000c3c:	4601      	moveq	r1, r0
 8000c3e:	2000      	moveq	r0, #0
 8000c40:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c44:	bf08      	it	eq
 8000c46:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c4a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c4e:	fabc f28c 	clz	r2, ip
 8000c52:	3a08      	subs	r2, #8
 8000c54:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c58:	db10      	blt.n	8000c7c <__aeabi_l2f+0x5c>
 8000c5a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c5e:	4463      	add	r3, ip
 8000c60:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c64:	f1c2 0220 	rsb	r2, r2, #32
 8000c68:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c6c:	fa20 f202 	lsr.w	r2, r0, r2
 8000c70:	eb43 0002 	adc.w	r0, r3, r2
 8000c74:	bf08      	it	eq
 8000c76:	f020 0001 	biceq.w	r0, r0, #1
 8000c7a:	4770      	bx	lr
 8000c7c:	f102 0220 	add.w	r2, r2, #32
 8000c80:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c84:	f1c2 0220 	rsb	r2, r2, #32
 8000c88:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c8c:	fa21 f202 	lsr.w	r2, r1, r2
 8000c90:	eb43 0002 	adc.w	r0, r3, r2
 8000c94:	bf08      	it	eq
 8000c96:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c9a:	4770      	bx	lr

08000c9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c9c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c9e:	4b0e      	ldr	r3, [pc, #56]	; (8000cd8 <HAL_InitTick+0x3c>)
{
 8000ca0:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ca2:	7818      	ldrb	r0, [r3, #0]
 8000ca4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ca8:	fbb3 f3f0 	udiv	r3, r3, r0
 8000cac:	4a0b      	ldr	r2, [pc, #44]	; (8000cdc <HAL_InitTick+0x40>)
 8000cae:	6810      	ldr	r0, [r2, #0]
 8000cb0:	fbb0 f0f3 	udiv	r0, r0, r3
 8000cb4:	f000 f8d8 	bl	8000e68 <HAL_SYSTICK_Config>
 8000cb8:	4604      	mov	r4, r0
 8000cba:	b958      	cbnz	r0, 8000cd4 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cbc:	2d0f      	cmp	r5, #15
 8000cbe:	d809      	bhi.n	8000cd4 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cc0:	4602      	mov	r2, r0
 8000cc2:	4629      	mov	r1, r5
 8000cc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cc8:	f000 f860 	bl	8000d8c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ccc:	4b04      	ldr	r3, [pc, #16]	; (8000ce0 <HAL_InitTick+0x44>)
 8000cce:	4620      	mov	r0, r4
 8000cd0:	601d      	str	r5, [r3, #0]
 8000cd2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000cd4:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000cd6:	bd38      	pop	{r3, r4, r5, pc}
 8000cd8:	20000000 	.word	0x20000000
 8000cdc:	2000000c 	.word	0x2000000c
 8000ce0:	20000004 	.word	0x20000004

08000ce4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ce4:	4a07      	ldr	r2, [pc, #28]	; (8000d04 <HAL_Init+0x20>)
{
 8000ce6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ce8:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cea:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cec:	f043 0310 	orr.w	r3, r3, #16
 8000cf0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cf2:	f000 f82d 	bl	8000d50 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cf6:	2000      	movs	r0, #0
 8000cf8:	f7ff ffd0 	bl	8000c9c <HAL_InitTick>
  HAL_MspInit();
 8000cfc:	f002 f920 	bl	8002f40 <HAL_MspInit>
}
 8000d00:	2000      	movs	r0, #0
 8000d02:	bd08      	pop	{r3, pc}
 8000d04:	40022000 	.word	0x40022000

08000d08 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000d08:	4a03      	ldr	r2, [pc, #12]	; (8000d18 <HAL_IncTick+0x10>)
 8000d0a:	4b04      	ldr	r3, [pc, #16]	; (8000d1c <HAL_IncTick+0x14>)
 8000d0c:	6811      	ldr	r1, [r2, #0]
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	440b      	add	r3, r1
 8000d12:	6013      	str	r3, [r2, #0]
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	20000218 	.word	0x20000218
 8000d1c:	20000000 	.word	0x20000000

08000d20 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000d20:	4b01      	ldr	r3, [pc, #4]	; (8000d28 <HAL_GetTick+0x8>)
 8000d22:	6818      	ldr	r0, [r3, #0]
}
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	20000218 	.word	0x20000218

08000d2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d2c:	b538      	push	{r3, r4, r5, lr}
 8000d2e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000d30:	f7ff fff6 	bl	8000d20 <HAL_GetTick>
 8000d34:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d36:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000d38:	bf1e      	ittt	ne
 8000d3a:	4b04      	ldrne	r3, [pc, #16]	; (8000d4c <HAL_Delay+0x20>)
 8000d3c:	781b      	ldrbne	r3, [r3, #0]
 8000d3e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d40:	f7ff ffee 	bl	8000d20 <HAL_GetTick>
 8000d44:	1b40      	subs	r0, r0, r5
 8000d46:	4284      	cmp	r4, r0
 8000d48:	d8fa      	bhi.n	8000d40 <HAL_Delay+0x14>
  {
  }
}
 8000d4a:	bd38      	pop	{r3, r4, r5, pc}
 8000d4c:	20000000 	.word	0x20000000

08000d50 <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000d50:	1ec3      	subs	r3, r0, #3
 8000d52:	2b04      	cmp	r3, #4
{
 8000d54:	b510      	push	{r4, lr}
 8000d56:	4604      	mov	r4, r0
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000d58:	d903      	bls.n	8000d62 <HAL_NVIC_SetPriorityGrouping+0x12>
 8000d5a:	21a2      	movs	r1, #162	; 0xa2
 8000d5c:	4809      	ldr	r0, [pc, #36]	; (8000d84 <HAL_NVIC_SetPriorityGrouping+0x34>)
 8000d5e:	f002 f8e3 	bl	8002f28 <assert_failed>
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d62:	4a09      	ldr	r2, [pc, #36]	; (8000d88 <HAL_NVIC_SetPriorityGrouping+0x38>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000d64:	0224      	lsls	r4, r4, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d66:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000d68:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d6c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000d70:	041b      	lsls	r3, r3, #16
 8000d72:	0c1b      	lsrs	r3, r3, #16
 8000d74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000d7c:	431c      	orrs	r4, r3
  SCB->AIRCR =  reg_value;
 8000d7e:	60d4      	str	r4, [r2, #12]
 8000d80:	bd10      	pop	{r4, pc}
 8000d82:	bf00      	nop
 8000d84:	08005380 	.word	0x08005380
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
  uint32_t prioritygroup = 0x00U;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000d8c:	2a0f      	cmp	r2, #15
{ 
 8000d8e:	b570      	push	{r4, r5, r6, lr}
 8000d90:	4604      	mov	r4, r0
 8000d92:	460e      	mov	r6, r1
 8000d94:	4615      	mov	r5, r2
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000d96:	d903      	bls.n	8000da0 <HAL_NVIC_SetPriority+0x14>
 8000d98:	21ba      	movs	r1, #186	; 0xba
 8000d9a:	481a      	ldr	r0, [pc, #104]	; (8000e04 <HAL_NVIC_SetPriority+0x78>)
 8000d9c:	f002 f8c4 	bl	8002f28 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000da0:	2e0f      	cmp	r6, #15
 8000da2:	d903      	bls.n	8000dac <HAL_NVIC_SetPriority+0x20>
 8000da4:	21bb      	movs	r1, #187	; 0xbb
 8000da6:	4817      	ldr	r0, [pc, #92]	; (8000e04 <HAL_NVIC_SetPriority+0x78>)
 8000da8:	f002 f8be 	bl	8002f28 <assert_failed>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dac:	4b16      	ldr	r3, [pc, #88]	; (8000e08 <HAL_NVIC_SetPriority+0x7c>)

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dae:	2001      	movs	r0, #1
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000db0:	68d9      	ldr	r1, [r3, #12]
 8000db2:	f3c1 2102 	ubfx	r1, r1, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000db6:	f1c1 0307 	rsb	r3, r1, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dba:	1d0a      	adds	r2, r1, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dbc:	2b04      	cmp	r3, #4
 8000dbe:	bf28      	it	cs
 8000dc0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dc2:	2a06      	cmp	r2, #6
 8000dc4:	bf94      	ite	ls
 8000dc6:	2100      	movls	r1, #0
 8000dc8:	3903      	subhi	r1, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dca:	fa00 f203 	lsl.w	r2, r0, r3
 8000dce:	3a01      	subs	r2, #1
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dd0:	4088      	lsls	r0, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd2:	4032      	ands	r2, r6
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dd4:	3801      	subs	r0, #1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd6:	408a      	lsls	r2, r1
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dd8:	4005      	ands	r5, r0
  if ((int32_t)(IRQn) < 0)
 8000dda:	2c00      	cmp	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ddc:	ea42 0205 	orr.w	r2, r2, r5
 8000de0:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de4:	bfaf      	iteee	ge
 8000de6:	f104 4460 	addge.w	r4, r4, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dea:	4b08      	ldrlt	r3, [pc, #32]	; (8000e0c <HAL_NVIC_SetPriority+0x80>)
 8000dec:	f004 040f 	andlt.w	r4, r4, #15
 8000df0:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df2:	bfa5      	ittet	ge
 8000df4:	b2d2      	uxtbge	r2, r2
 8000df6:	f504 4461 	addge.w	r4, r4, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfa:	551a      	strblt	r2, [r3, r4]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfc:	f884 2300 	strbge.w	r2, [r4, #768]	; 0x300
 8000e00:	bd70      	pop	{r4, r5, r6, pc}
 8000e02:	bf00      	nop
 8000e04:	08005380 	.word	0x08005380
 8000e08:	e000ed00 	.word	0xe000ed00
 8000e0c:	e000ed14 	.word	0xe000ed14

08000e10 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e10:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8000e12:	1e04      	subs	r4, r0, #0
 8000e14:	da03      	bge.n	8000e1e <HAL_NVIC_EnableIRQ+0xe>
 8000e16:	21ce      	movs	r1, #206	; 0xce
 8000e18:	4806      	ldr	r0, [pc, #24]	; (8000e34 <HAL_NVIC_EnableIRQ+0x24>)
 8000e1a:	f002 f885 	bl	8002f28 <assert_failed>
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000e1e:	2301      	movs	r3, #1
 8000e20:	0962      	lsrs	r2, r4, #5
 8000e22:	f004 041f 	and.w	r4, r4, #31
 8000e26:	fa03 f404 	lsl.w	r4, r3, r4
 8000e2a:	4b03      	ldr	r3, [pc, #12]	; (8000e38 <HAL_NVIC_EnableIRQ+0x28>)
 8000e2c:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8000e30:	bd10      	pop	{r4, pc}
 8000e32:	bf00      	nop
 8000e34:	08005380 	.word	0x08005380
 8000e38:	e000e100 	.word	0xe000e100

08000e3c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000e3c:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8000e3e:	1e04      	subs	r4, r0, #0
 8000e40:	da03      	bge.n	8000e4a <HAL_NVIC_DisableIRQ+0xe>
 8000e42:	21de      	movs	r1, #222	; 0xde
 8000e44:	4806      	ldr	r0, [pc, #24]	; (8000e60 <HAL_NVIC_DisableIRQ+0x24>)
 8000e46:	f002 f86f 	bl	8002f28 <assert_failed>
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	0963      	lsrs	r3, r4, #5
 8000e4e:	f004 041f 	and.w	r4, r4, #31
 8000e52:	fa02 f404 	lsl.w	r4, r2, r4
 8000e56:	4a03      	ldr	r2, [pc, #12]	; (8000e64 <HAL_NVIC_DisableIRQ+0x28>)
 8000e58:	3320      	adds	r3, #32
 8000e5a:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 8000e5e:	bd10      	pop	{r4, pc}
 8000e60:	08005380 	.word	0x08005380
 8000e64:	e000e100 	.word	0xe000e100

08000e68 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e68:	3801      	subs	r0, #1
 8000e6a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000e6e:	d20a      	bcs.n	8000e86 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e70:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e72:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e74:	4a06      	ldr	r2, [pc, #24]	; (8000e90 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e76:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e78:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e7c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e7e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e80:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000e86:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	e000e010 	.word	0xe000e010
 8000e90:	e000ed00 	.word	0xe000ed00

08000e94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t config = 0x00U;
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000e98:	4aaa      	ldr	r2, [pc, #680]	; (8001144 <HAL_GPIO_Init+0x2b0>)
{
 8000e9a:	b085      	sub	sp, #20
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000e9c:	4290      	cmp	r0, r2
{
 8000e9e:	4604      	mov	r4, r0
 8000ea0:	468b      	mov	fp, r1
 8000ea2:	9201      	str	r2, [sp, #4]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000ea4:	d013      	beq.n	8000ece <HAL_GPIO_Init+0x3a>
 8000ea6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000eaa:	4290      	cmp	r0, r2
 8000eac:	d00f      	beq.n	8000ece <HAL_GPIO_Init+0x3a>
 8000eae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000eb2:	4290      	cmp	r0, r2
 8000eb4:	d00b      	beq.n	8000ece <HAL_GPIO_Init+0x3a>
 8000eb6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000eba:	4290      	cmp	r0, r2
 8000ebc:	d007      	beq.n	8000ece <HAL_GPIO_Init+0x3a>
 8000ebe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ec2:	4290      	cmp	r0, r2
 8000ec4:	d003      	beq.n	8000ece <HAL_GPIO_Init+0x3a>
 8000ec6:	21cd      	movs	r1, #205	; 0xcd
 8000ec8:	489f      	ldr	r0, [pc, #636]	; (8001148 <HAL_GPIO_Init+0x2b4>)
 8000eca:	f002 f82d 	bl	8002f28 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8000ece:	f8db 2000 	ldr.w	r2, [fp]
 8000ed2:	b291      	uxth	r1, r2
 8000ed4:	b111      	cbz	r1, 8000edc <HAL_GPIO_Init+0x48>
 8000ed6:	0c12      	lsrs	r2, r2, #16
 8000ed8:	0412      	lsls	r2, r2, #16
 8000eda:	b11a      	cbz	r2, 8000ee4 <HAL_GPIO_Init+0x50>
 8000edc:	21ce      	movs	r1, #206	; 0xce
 8000ede:	489a      	ldr	r0, [pc, #616]	; (8001148 <HAL_GPIO_Init+0x2b4>)
 8000ee0:	f002 f822 	bl	8002f28 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8000ee4:	f8db 2004 	ldr.w	r2, [fp, #4]
 8000ee8:	2a03      	cmp	r2, #3
 8000eea:	d917      	bls.n	8000f1c <HAL_GPIO_Init+0x88>
 8000eec:	f1a2 0111 	sub.w	r1, r2, #17
 8000ef0:	2901      	cmp	r1, #1
 8000ef2:	d913      	bls.n	8000f1c <HAL_GPIO_Init+0x88>
 8000ef4:	4895      	ldr	r0, [pc, #596]	; (800114c <HAL_GPIO_Init+0x2b8>)
 8000ef6:	f422 1100 	bic.w	r1, r2, #2097152	; 0x200000
 8000efa:	4281      	cmp	r1, r0
 8000efc:	d00e      	beq.n	8000f1c <HAL_GPIO_Init+0x88>
 8000efe:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8000f02:	4282      	cmp	r2, r0
 8000f04:	d00a      	beq.n	8000f1c <HAL_GPIO_Init+0x88>
 8000f06:	f5a0 2070 	sub.w	r0, r0, #983040	; 0xf0000
 8000f0a:	4281      	cmp	r1, r0
 8000f0c:	d006      	beq.n	8000f1c <HAL_GPIO_Init+0x88>
 8000f0e:	4990      	ldr	r1, [pc, #576]	; (8001150 <HAL_GPIO_Init+0x2bc>)
 8000f10:	428a      	cmp	r2, r1
 8000f12:	d003      	beq.n	8000f1c <HAL_GPIO_Init+0x88>
 8000f14:	21cf      	movs	r1, #207	; 0xcf
 8000f16:	488c      	ldr	r0, [pc, #560]	; (8001148 <HAL_GPIO_Init+0x2b4>)
 8000f18:	f002 f806 	bl	8002f28 <assert_failed>
{
 8000f1c:	2500      	movs	r5, #0
 8000f1e:	46a8      	mov	r8, r5
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f20:	f8df a244 	ldr.w	sl, [pc, #580]	; 8001168 <HAL_GPIO_Init+0x2d4>
 8000f24:	4e8b      	ldr	r6, [pc, #556]	; (8001154 <HAL_GPIO_Init+0x2c0>)
    ioposition = (0x01U << position);
 8000f26:	2201      	movs	r2, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f28:	f8db 7000 	ldr.w	r7, [fp]
    ioposition = (0x01U << position);
 8000f2c:	fa02 f908 	lsl.w	r9, r2, r8
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f30:	ea09 0707 	and.w	r7, r9, r7
    if (iocurrent == ioposition)
 8000f34:	45b9      	cmp	r9, r7
 8000f36:	f040 808f 	bne.w	8001058 <HAL_GPIO_Init+0x1c4>
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8000f3a:	9b01      	ldr	r3, [sp, #4]
 8000f3c:	429c      	cmp	r4, r3
 8000f3e:	d011      	beq.n	8000f64 <HAL_GPIO_Init+0xd0>
 8000f40:	4985      	ldr	r1, [pc, #532]	; (8001158 <HAL_GPIO_Init+0x2c4>)
 8000f42:	428c      	cmp	r4, r1
 8000f44:	d00e      	beq.n	8000f64 <HAL_GPIO_Init+0xd0>
 8000f46:	4b85      	ldr	r3, [pc, #532]	; (800115c <HAL_GPIO_Init+0x2c8>)
 8000f48:	429c      	cmp	r4, r3
 8000f4a:	d00b      	beq.n	8000f64 <HAL_GPIO_Init+0xd0>
 8000f4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8000f50:	428c      	cmp	r4, r1
 8000f52:	d007      	beq.n	8000f64 <HAL_GPIO_Init+0xd0>
 8000f54:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8000f58:	428c      	cmp	r4, r1
 8000f5a:	d003      	beq.n	8000f64 <HAL_GPIO_Init+0xd0>
 8000f5c:	21dd      	movs	r1, #221	; 0xdd
 8000f5e:	487a      	ldr	r0, [pc, #488]	; (8001148 <HAL_GPIO_Init+0x2b4>)
 8000f60:	f001 ffe2 	bl	8002f28 <assert_failed>
      switch (GPIO_Init->Mode)
 8000f64:	f8db 1004 	ldr.w	r1, [fp, #4]
 8000f68:	2912      	cmp	r1, #18
 8000f6a:	f000 80d3 	beq.w	8001114 <HAL_GPIO_Init+0x280>
 8000f6e:	f200 808d 	bhi.w	800108c <HAL_GPIO_Init+0x1f8>
 8000f72:	2902      	cmp	r1, #2
 8000f74:	f000 80c1 	beq.w	80010fa <HAL_GPIO_Init+0x266>
 8000f78:	d877      	bhi.n	800106a <HAL_GPIO_Init+0x1d6>
 8000f7a:	2900      	cmp	r1, #0
 8000f7c:	f000 8093 	beq.w	80010a6 <HAL_GPIO_Init+0x212>
 8000f80:	2901      	cmp	r1, #1
 8000f82:	f000 80ae 	beq.w	80010e2 <HAL_GPIO_Init+0x24e>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f86:	2fff      	cmp	r7, #255	; 0xff
 8000f88:	bf82      	ittt	hi
 8000f8a:	f108 4e80 	addhi.w	lr, r8, #1073741824	; 0x40000000
 8000f8e:	f1ae 0e08 	subhi.w	lr, lr, #8
 8000f92:	ea4f 018e 	movhi.w	r1, lr, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f96:	f04f 0e0f 	mov.w	lr, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f9a:	bf9d      	ittte	ls
 8000f9c:	4620      	movls	r0, r4
 8000f9e:	6822      	ldrls	r2, [r4, #0]
 8000fa0:	ea4f 0188 	movls.w	r1, r8, lsl #2
 8000fa4:	6862      	ldrhi	r2, [r4, #4]
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000fa6:	fa0e fc01 	lsl.w	ip, lr, r1
 8000faa:	ea22 020c 	bic.w	r2, r2, ip
 8000fae:	fa05 f101 	lsl.w	r1, r5, r1
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000fb2:	bf88      	it	hi
 8000fb4:	1d20      	addhi	r0, r4, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000fb6:	4311      	orrs	r1, r2
 8000fb8:	6001      	str	r1, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fba:	f8db 0004 	ldr.w	r0, [fp, #4]
 8000fbe:	00c3      	lsls	r3, r0, #3
 8000fc0:	d54a      	bpl.n	8001058 <HAL_GPIO_Init+0x1c4>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000fc2:	f8da 2018 	ldr.w	r2, [sl, #24]
 8000fc6:	f028 0103 	bic.w	r1, r8, #3
 8000fca:	f042 0201 	orr.w	r2, r2, #1
 8000fce:	f8ca 2018 	str.w	r2, [sl, #24]
 8000fd2:	f8da 2018 	ldr.w	r2, [sl, #24]
 8000fd6:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8000fda:	f002 0201 	and.w	r2, r2, #1
 8000fde:	9203      	str	r2, [sp, #12]
 8000fe0:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000fe4:	f008 0c03 	and.w	ip, r8, #3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fe8:	9b01      	ldr	r3, [sp, #4]
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000fea:	9a03      	ldr	r2, [sp, #12]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000fec:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8000ff0:	688a      	ldr	r2, [r1, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000ff2:	fa0e fe0c 	lsl.w	lr, lr, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ff6:	429c      	cmp	r4, r3
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000ff8:	ea22 0e0e 	bic.w	lr, r2, lr
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ffc:	f000 809b 	beq.w	8001136 <HAL_GPIO_Init+0x2a2>
 8001000:	4a55      	ldr	r2, [pc, #340]	; (8001158 <HAL_GPIO_Init+0x2c4>)
 8001002:	4294      	cmp	r4, r2
 8001004:	f000 8099 	beq.w	800113a <HAL_GPIO_Init+0x2a6>
 8001008:	4b54      	ldr	r3, [pc, #336]	; (800115c <HAL_GPIO_Init+0x2c8>)
 800100a:	429c      	cmp	r4, r3
 800100c:	f000 8097 	beq.w	800113e <HAL_GPIO_Init+0x2aa>
 8001010:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001014:	4294      	cmp	r4, r2
 8001016:	bf14      	ite	ne
 8001018:	2204      	movne	r2, #4
 800101a:	2203      	moveq	r2, #3
 800101c:	fa02 f20c 	lsl.w	r2, r2, ip
 8001020:	ea42 020e 	orr.w	r2, r2, lr
        AFIO->EXTICR[position >> 2U] = temp;
 8001024:	608a      	str	r2, [r1, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001026:	6832      	ldr	r2, [r6, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001028:	03c1      	lsls	r1, r0, #15
          SET_BIT(EXTI->IMR, iocurrent);
 800102a:	bf4c      	ite	mi
 800102c:	433a      	orrmi	r2, r7
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800102e:	43ba      	bicpl	r2, r7
 8001030:	6032      	str	r2, [r6, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001032:	6872      	ldr	r2, [r6, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001034:	0383      	lsls	r3, r0, #14
          SET_BIT(EXTI->EMR, iocurrent);
 8001036:	bf4c      	ite	mi
 8001038:	433a      	orrmi	r2, r7
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800103a:	43ba      	bicpl	r2, r7
 800103c:	6072      	str	r2, [r6, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800103e:	68b2      	ldr	r2, [r6, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001040:	02c1      	lsls	r1, r0, #11
          SET_BIT(EXTI->RTSR, iocurrent);
 8001042:	bf4c      	ite	mi
 8001044:	433a      	orrmi	r2, r7
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001046:	43ba      	bicpl	r2, r7
 8001048:	60b2      	str	r2, [r6, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800104a:	68f2      	ldr	r2, [r6, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800104c:	0283      	lsls	r3, r0, #10
          SET_BIT(EXTI->FTSR, iocurrent);
 800104e:	bf4c      	ite	mi
 8001050:	4317      	orrmi	r7, r2
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001052:	ea22 0707 	bicpl.w	r7, r2, r7
 8001056:	60f7      	str	r7, [r6, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001058:	f108 0801 	add.w	r8, r8, #1
 800105c:	f1b8 0f10 	cmp.w	r8, #16
 8001060:	f47f af61 	bne.w	8000f26 <HAL_GPIO_Init+0x92>
        }
      }
    }
  }
}
 8001064:	b005      	add	sp, #20
 8001066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 800106a:	2903      	cmp	r1, #3
 800106c:	d05f      	beq.n	800112e <HAL_GPIO_Init+0x29a>
 800106e:	2911      	cmp	r1, #17
 8001070:	d189      	bne.n	8000f86 <HAL_GPIO_Init+0xf2>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001072:	f8db 200c 	ldr.w	r2, [fp, #12]
 8001076:	3a01      	subs	r2, #1
 8001078:	2a02      	cmp	r2, #2
 800107a:	d903      	bls.n	8001084 <HAL_GPIO_Init+0x1f0>
 800107c:	21ec      	movs	r1, #236	; 0xec
 800107e:	4832      	ldr	r0, [pc, #200]	; (8001148 <HAL_GPIO_Init+0x2b4>)
 8001080:	f001 ff52 	bl	8002f28 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001084:	f8db 500c 	ldr.w	r5, [fp, #12]
 8001088:	3504      	adds	r5, #4
          break;
 800108a:	e77c      	b.n	8000f86 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 800108c:	4834      	ldr	r0, [pc, #208]	; (8001160 <HAL_GPIO_Init+0x2cc>)
 800108e:	4281      	cmp	r1, r0
 8001090:	d009      	beq.n	80010a6 <HAL_GPIO_Init+0x212>
 8001092:	d81c      	bhi.n	80010ce <HAL_GPIO_Init+0x23a>
 8001094:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8001098:	4281      	cmp	r1, r0
 800109a:	d004      	beq.n	80010a6 <HAL_GPIO_Init+0x212>
 800109c:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 80010a0:	4281      	cmp	r1, r0
 80010a2:	f47f af70 	bne.w	8000f86 <HAL_GPIO_Init+0xf2>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80010a6:	f8db 1008 	ldr.w	r1, [fp, #8]
 80010aa:	2902      	cmp	r1, #2
 80010ac:	d904      	bls.n	80010b8 <HAL_GPIO_Init+0x224>
 80010ae:	f240 1107 	movw	r1, #263	; 0x107
 80010b2:	4825      	ldr	r0, [pc, #148]	; (8001148 <HAL_GPIO_Init+0x2b4>)
 80010b4:	f001 ff38 	bl	8002f28 <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80010b8:	f8db 1008 	ldr.w	r1, [fp, #8]
 80010bc:	b3c9      	cbz	r1, 8001132 <HAL_GPIO_Init+0x29e>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80010be:	2901      	cmp	r1, #1
            GPIOx->BSRR = ioposition;
 80010c0:	bf0c      	ite	eq
 80010c2:	f8c4 9010 	streq.w	r9, [r4, #16]
            GPIOx->BRR = ioposition;
 80010c6:	f8c4 9014 	strne.w	r9, [r4, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010ca:	2508      	movs	r5, #8
 80010cc:	e75b      	b.n	8000f86 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 80010ce:	4825      	ldr	r0, [pc, #148]	; (8001164 <HAL_GPIO_Init+0x2d0>)
 80010d0:	4281      	cmp	r1, r0
 80010d2:	d0e8      	beq.n	80010a6 <HAL_GPIO_Init+0x212>
 80010d4:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 80010d8:	4281      	cmp	r1, r0
 80010da:	d0e4      	beq.n	80010a6 <HAL_GPIO_Init+0x212>
 80010dc:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 80010e0:	e7de      	b.n	80010a0 <HAL_GPIO_Init+0x20c>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80010e2:	f8db 200c 	ldr.w	r2, [fp, #12]
 80010e6:	3a01      	subs	r2, #1
 80010e8:	2a02      	cmp	r2, #2
 80010ea:	d903      	bls.n	80010f4 <HAL_GPIO_Init+0x260>
 80010ec:	21e5      	movs	r1, #229	; 0xe5
 80010ee:	4816      	ldr	r0, [pc, #88]	; (8001148 <HAL_GPIO_Init+0x2b4>)
 80010f0:	f001 ff1a 	bl	8002f28 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80010f4:	f8db 500c 	ldr.w	r5, [fp, #12]
          break;
 80010f8:	e745      	b.n	8000f86 <HAL_GPIO_Init+0xf2>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80010fa:	f8db 200c 	ldr.w	r2, [fp, #12]
 80010fe:	3a01      	subs	r2, #1
 8001100:	2a02      	cmp	r2, #2
 8001102:	d903      	bls.n	800110c <HAL_GPIO_Init+0x278>
 8001104:	21f3      	movs	r1, #243	; 0xf3
 8001106:	4810      	ldr	r0, [pc, #64]	; (8001148 <HAL_GPIO_Init+0x2b4>)
 8001108:	f001 ff0e 	bl	8002f28 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800110c:	f8db 500c 	ldr.w	r5, [fp, #12]
 8001110:	3508      	adds	r5, #8
          break;
 8001112:	e738      	b.n	8000f86 <HAL_GPIO_Init+0xf2>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001114:	f8db 200c 	ldr.w	r2, [fp, #12]
 8001118:	3a01      	subs	r2, #1
 800111a:	2a02      	cmp	r2, #2
 800111c:	d903      	bls.n	8001126 <HAL_GPIO_Init+0x292>
 800111e:	21fa      	movs	r1, #250	; 0xfa
 8001120:	4809      	ldr	r0, [pc, #36]	; (8001148 <HAL_GPIO_Init+0x2b4>)
 8001122:	f001 ff01 	bl	8002f28 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001126:	f8db 500c 	ldr.w	r5, [fp, #12]
 800112a:	350c      	adds	r5, #12
          break;
 800112c:	e72b      	b.n	8000f86 <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800112e:	2500      	movs	r5, #0
 8001130:	e729      	b.n	8000f86 <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001132:	2504      	movs	r5, #4
 8001134:	e727      	b.n	8000f86 <HAL_GPIO_Init+0xf2>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001136:	2200      	movs	r2, #0
 8001138:	e770      	b.n	800101c <HAL_GPIO_Init+0x188>
 800113a:	2201      	movs	r2, #1
 800113c:	e76e      	b.n	800101c <HAL_GPIO_Init+0x188>
 800113e:	2202      	movs	r2, #2
 8001140:	e76c      	b.n	800101c <HAL_GPIO_Init+0x188>
 8001142:	bf00      	nop
 8001144:	40010800 	.word	0x40010800
 8001148:	080053bb 	.word	0x080053bb
 800114c:	10110000 	.word	0x10110000
 8001150:	10220000 	.word	0x10220000
 8001154:	40010400 	.word	0x40010400
 8001158:	40010c00 	.word	0x40010c00
 800115c:	40011000 	.word	0x40011000
 8001160:	10210000 	.word	0x10210000
 8001164:	10310000 	.word	0x10310000
 8001168:	40021000 	.word	0x40021000

0800116c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800116c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t tmp = 0x00U;
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001170:	4b45      	ldr	r3, [pc, #276]	; (8001288 <HAL_GPIO_DeInit+0x11c>)
{
 8001172:	4604      	mov	r4, r0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001174:	4298      	cmp	r0, r3
{
 8001176:	460e      	mov	r6, r1
 8001178:	4699      	mov	r9, r3
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800117a:	d014      	beq.n	80011a6 <HAL_GPIO_DeInit+0x3a>
 800117c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001180:	4298      	cmp	r0, r3
 8001182:	d010      	beq.n	80011a6 <HAL_GPIO_DeInit+0x3a>
 8001184:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001188:	4298      	cmp	r0, r3
 800118a:	d00c      	beq.n	80011a6 <HAL_GPIO_DeInit+0x3a>
 800118c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001190:	4298      	cmp	r0, r3
 8001192:	d008      	beq.n	80011a6 <HAL_GPIO_DeInit+0x3a>
 8001194:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001198:	4298      	cmp	r0, r3
 800119a:	d004      	beq.n	80011a6 <HAL_GPIO_DeInit+0x3a>
 800119c:	f44f 71bb 	mov.w	r1, #374	; 0x176
 80011a0:	483a      	ldr	r0, [pc, #232]	; (800128c <HAL_GPIO_DeInit+0x120>)
 80011a2:	f001 fec1 	bl	8002f28 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80011a6:	b2b3      	uxth	r3, r6
 80011a8:	b113      	cbz	r3, 80011b0 <HAL_GPIO_DeInit+0x44>
 80011aa:	0c33      	lsrs	r3, r6, #16
 80011ac:	041b      	lsls	r3, r3, #16
 80011ae:	b123      	cbz	r3, 80011ba <HAL_GPIO_DeInit+0x4e>
 80011b0:	f240 1177 	movw	r1, #375	; 0x177
 80011b4:	4835      	ldr	r0, [pc, #212]	; (800128c <HAL_GPIO_DeInit+0x120>)
 80011b6:	f001 feb7 	bl	8002f28 <assert_failed>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2U];
      tmp &= 0x0FU << (4U * (position & 0x03U));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80011ba:	2200      	movs	r2, #0
    iocurrent = (GPIO_Pin) & (1U << position);
 80011bc:	f04f 0a01 	mov.w	sl, #1
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 80011c0:	f04f 0c0f 	mov.w	ip, #15
 80011c4:	f04f 0b04 	mov.w	fp, #4
      {
        tmp = 0x0FU << (4U * (position & 0x03U));
        CLEAR_BIT(AFIO->EXTICR[position >> 2U], tmp);

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80011c8:	4931      	ldr	r1, [pc, #196]	; (8001290 <HAL_GPIO_DeInit+0x124>)
  while ((GPIO_Pin >> position) != 0U)
 80011ca:	fa36 f302 	lsrs.w	r3, r6, r2
 80011ce:	d101      	bne.n	80011d4 <HAL_GPIO_DeInit+0x68>
      }
    }

    position++;
  }
}
 80011d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Pin) & (1U << position);
 80011d4:	fa0a f302 	lsl.w	r3, sl, r2
    if (iocurrent)
 80011d8:	4033      	ands	r3, r6
 80011da:	d04c      	beq.n	8001276 <HAL_GPIO_DeInit+0x10a>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011dc:	2bff      	cmp	r3, #255	; 0xff
 80011de:	bf98      	it	ls
 80011e0:	4627      	movls	r7, r4
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 80011e2:	ea6f 0303 	mvn.w	r3, r3
 80011e6:	bf85      	ittet	hi
 80011e8:	f102 4080 	addhi.w	r0, r2, #1073741824	; 0x40000000
 80011ec:	3808      	subhi	r0, #8
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011ee:	f8d4 e000 	ldrls.w	lr, [r4]
 80011f2:	f8d4 e004 	ldrhi.w	lr, [r4, #4]
 80011f6:	bf94      	ite	ls
 80011f8:	0090      	lslls	r0, r2, #2
 80011fa:	0080      	lslhi	r0, r0, #2
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 80011fc:	fa0c f500 	lsl.w	r5, ip, r0
 8001200:	ea2e 0505 	bic.w	r5, lr, r5
 8001204:	fa0b f000 	lsl.w	r0, fp, r0
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001208:	bf88      	it	hi
 800120a:	1d27      	addhi	r7, r4, #4
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 800120c:	4305      	orrs	r5, r0
 800120e:	603d      	str	r5, [r7, #0]
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8001210:	68e0      	ldr	r0, [r4, #12]
      tmp &= 0x0FU << (4U * (position & 0x03U));
 8001212:	f002 0703 	and.w	r7, r2, #3
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8001216:	4018      	ands	r0, r3
 8001218:	60e0      	str	r0, [r4, #12]
 800121a:	f022 0003 	bic.w	r0, r2, #3
 800121e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8001222:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
      tmp = AFIO->EXTICR[position >> 2U];
 8001226:	6885      	ldr	r5, [r0, #8]
      tmp &= 0x0FU << (4U * (position & 0x03U));
 8001228:	00bf      	lsls	r7, r7, #2
 800122a:	fa0c f807 	lsl.w	r8, ip, r7
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800122e:	454c      	cmp	r4, r9
      tmp &= 0x0FU << (4U * (position & 0x03U));
 8001230:	ea05 0e08 	and.w	lr, r5, r8
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8001234:	d021      	beq.n	800127a <HAL_GPIO_DeInit+0x10e>
 8001236:	4d17      	ldr	r5, [pc, #92]	; (8001294 <HAL_GPIO_DeInit+0x128>)
 8001238:	42ac      	cmp	r4, r5
 800123a:	d020      	beq.n	800127e <HAL_GPIO_DeInit+0x112>
 800123c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001240:	42ac      	cmp	r4, r5
 8001242:	d01e      	beq.n	8001282 <HAL_GPIO_DeInit+0x116>
 8001244:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001248:	42ac      	cmp	r4, r5
 800124a:	bf0c      	ite	eq
 800124c:	2503      	moveq	r5, #3
 800124e:	2504      	movne	r5, #4
 8001250:	40bd      	lsls	r5, r7
 8001252:	45ae      	cmp	lr, r5
 8001254:	d10f      	bne.n	8001276 <HAL_GPIO_DeInit+0x10a>
        CLEAR_BIT(AFIO->EXTICR[position >> 2U], tmp);
 8001256:	6885      	ldr	r5, [r0, #8]
 8001258:	ea25 0508 	bic.w	r5, r5, r8
 800125c:	6085      	str	r5, [r0, #8]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800125e:	6808      	ldr	r0, [r1, #0]
 8001260:	4018      	ands	r0, r3
 8001262:	6008      	str	r0, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8001264:	6848      	ldr	r0, [r1, #4]
 8001266:	4018      	ands	r0, r3
 8001268:	6048      	str	r0, [r1, #4]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 800126a:	6888      	ldr	r0, [r1, #8]
 800126c:	4018      	ands	r0, r3
 800126e:	6088      	str	r0, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8001270:	68c8      	ldr	r0, [r1, #12]
 8001272:	4003      	ands	r3, r0
 8001274:	60cb      	str	r3, [r1, #12]
    position++;
 8001276:	3201      	adds	r2, #1
 8001278:	e7a7      	b.n	80011ca <HAL_GPIO_DeInit+0x5e>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800127a:	2500      	movs	r5, #0
 800127c:	e7e8      	b.n	8001250 <HAL_GPIO_DeInit+0xe4>
 800127e:	2501      	movs	r5, #1
 8001280:	e7e6      	b.n	8001250 <HAL_GPIO_DeInit+0xe4>
 8001282:	2502      	movs	r5, #2
 8001284:	e7e4      	b.n	8001250 <HAL_GPIO_DeInit+0xe4>
 8001286:	bf00      	nop
 8001288:	40010800 	.word	0x40010800
 800128c:	080053bb 	.word	0x080053bb
 8001290:	40010400 	.word	0x40010400
 8001294:	40010c00 	.word	0x40010c00

08001298 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001298:	b538      	push	{r3, r4, r5, lr}
 800129a:	4605      	mov	r5, r0
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800129c:	460c      	mov	r4, r1
 800129e:	b921      	cbnz	r1, 80012aa <HAL_GPIO_ReadPin+0x12>
 80012a0:	f240 11c3 	movw	r1, #451	; 0x1c3
 80012a4:	4804      	ldr	r0, [pc, #16]	; (80012b8 <HAL_GPIO_ReadPin+0x20>)
 80012a6:	f001 fe3f 	bl	8002f28 <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80012aa:	68ab      	ldr	r3, [r5, #8]
 80012ac:	421c      	tst	r4, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80012ae:	bf14      	ite	ne
 80012b0:	2001      	movne	r0, #1
 80012b2:	2000      	moveq	r0, #0
 80012b4:	bd38      	pop	{r3, r4, r5, pc}
 80012b6:	bf00      	nop
 80012b8:	080053bb 	.word	0x080053bb

080012bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   uint32_t tickstart = 0U;
  
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
 80012c0:	4604      	mov	r4, r0
 80012c2:	b920      	cbnz	r0, 80012ce <HAL_RCC_OscConfig+0x12>
 80012c4:	f44f 71b8 	mov.w	r1, #368	; 0x170
 80012c8:	48a5      	ldr	r0, [pc, #660]	; (8001560 <HAL_RCC_OscConfig+0x2a4>)
 80012ca:	f001 fe2d 	bl	8002f28 <assert_failed>
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80012ce:	6823      	ldr	r3, [r4, #0]
 80012d0:	b133      	cbz	r3, 80012e0 <HAL_RCC_OscConfig+0x24>
 80012d2:	071a      	lsls	r2, r3, #28
 80012d4:	d104      	bne.n	80012e0 <HAL_RCC_OscConfig+0x24>
 80012d6:	f240 1171 	movw	r1, #369	; 0x171
 80012da:	48a1      	ldr	r0, [pc, #644]	; (8001560 <HAL_RCC_OscConfig+0x2a4>)
 80012dc:	f001 fe24 	bl	8002f28 <assert_failed>
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012e0:	6823      	ldr	r3, [r4, #0]
 80012e2:	07db      	lsls	r3, r3, #31
 80012e4:	d418      	bmi.n	8001318 <HAL_RCC_OscConfig+0x5c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012e6:	6823      	ldr	r3, [r4, #0]
 80012e8:	079f      	lsls	r7, r3, #30
 80012ea:	d472      	bmi.n	80013d2 <HAL_RCC_OscConfig+0x116>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012ec:	6823      	ldr	r3, [r4, #0]
 80012ee:	0719      	lsls	r1, r3, #28
 80012f0:	f100 80b9 	bmi.w	8001466 <HAL_RCC_OscConfig+0x1aa>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012f4:	6823      	ldr	r3, [r4, #0]
 80012f6:	075a      	lsls	r2, r3, #29
 80012f8:	f100 80eb 	bmi.w	80014d2 <HAL_RCC_OscConfig+0x216>
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80012fc:	69e3      	ldr	r3, [r4, #28]
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d904      	bls.n	800130c <HAL_RCC_OscConfig+0x50>
 8001302:	f240 21b9 	movw	r1, #697	; 0x2b9
 8001306:	4896      	ldr	r0, [pc, #600]	; (8001560 <HAL_RCC_OscConfig+0x2a4>)
 8001308:	f001 fe0e 	bl	8002f28 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800130c:	69e2      	ldr	r2, [r4, #28]
 800130e:	2a00      	cmp	r2, #0
 8001310:	f040 815e 	bne.w	80015d0 <HAL_RCC_OscConfig+0x314>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001314:	2000      	movs	r0, #0
 8001316:	e020      	b.n	800135a <HAL_RCC_OscConfig+0x9e>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8001318:	6863      	ldr	r3, [r4, #4]
 800131a:	f433 3280 	bics.w	r2, r3, #65536	; 0x10000
 800131e:	d007      	beq.n	8001330 <HAL_RCC_OscConfig+0x74>
 8001320:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001324:	d004      	beq.n	8001330 <HAL_RCC_OscConfig+0x74>
 8001326:	f240 1177 	movw	r1, #375	; 0x177
 800132a:	488d      	ldr	r0, [pc, #564]	; (8001560 <HAL_RCC_OscConfig+0x2a4>)
 800132c:	f001 fdfc 	bl	8002f28 <assert_failed>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001330:	4d8c      	ldr	r5, [pc, #560]	; (8001564 <HAL_RCC_OscConfig+0x2a8>)
 8001332:	686b      	ldr	r3, [r5, #4]
 8001334:	f003 030c 	and.w	r3, r3, #12
 8001338:	2b04      	cmp	r3, #4
 800133a:	d007      	beq.n	800134c <HAL_RCC_OscConfig+0x90>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800133c:	686b      	ldr	r3, [r5, #4]
 800133e:	f003 030c 	and.w	r3, r3, #12
 8001342:	2b08      	cmp	r3, #8
 8001344:	d10c      	bne.n	8001360 <HAL_RCC_OscConfig+0xa4>
 8001346:	686b      	ldr	r3, [r5, #4]
 8001348:	03de      	lsls	r6, r3, #15
 800134a:	d509      	bpl.n	8001360 <HAL_RCC_OscConfig+0xa4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800134c:	682b      	ldr	r3, [r5, #0]
 800134e:	039d      	lsls	r5, r3, #14
 8001350:	d5c9      	bpl.n	80012e6 <HAL_RCC_OscConfig+0x2a>
 8001352:	6863      	ldr	r3, [r4, #4]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d1c6      	bne.n	80012e6 <HAL_RCC_OscConfig+0x2a>
        return HAL_ERROR;
 8001358:	2001      	movs	r0, #1
}
 800135a:	b002      	add	sp, #8
 800135c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001360:	6863      	ldr	r3, [r4, #4]
 8001362:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001366:	d110      	bne.n	800138a <HAL_RCC_OscConfig+0xce>
 8001368:	682b      	ldr	r3, [r5, #0]
 800136a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800136e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001370:	f7ff fcd6 	bl	8000d20 <HAL_GetTick>
 8001374:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001376:	682b      	ldr	r3, [r5, #0]
 8001378:	0398      	lsls	r0, r3, #14
 800137a:	d4b4      	bmi.n	80012e6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800137c:	f7ff fcd0 	bl	8000d20 <HAL_GetTick>
 8001380:	1b80      	subs	r0, r0, r6
 8001382:	2864      	cmp	r0, #100	; 0x64
 8001384:	d9f7      	bls.n	8001376 <HAL_RCC_OscConfig+0xba>
            return HAL_TIMEOUT;
 8001386:	2003      	movs	r0, #3
 8001388:	e7e7      	b.n	800135a <HAL_RCC_OscConfig+0x9e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800138a:	b99b      	cbnz	r3, 80013b4 <HAL_RCC_OscConfig+0xf8>
 800138c:	682b      	ldr	r3, [r5, #0]
 800138e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001392:	602b      	str	r3, [r5, #0]
 8001394:	682b      	ldr	r3, [r5, #0]
 8001396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800139a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800139c:	f7ff fcc0 	bl	8000d20 <HAL_GetTick>
 80013a0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013a2:	682b      	ldr	r3, [r5, #0]
 80013a4:	0399      	lsls	r1, r3, #14
 80013a6:	d59e      	bpl.n	80012e6 <HAL_RCC_OscConfig+0x2a>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013a8:	f7ff fcba 	bl	8000d20 <HAL_GetTick>
 80013ac:	1b80      	subs	r0, r0, r6
 80013ae:	2864      	cmp	r0, #100	; 0x64
 80013b0:	d9f7      	bls.n	80013a2 <HAL_RCC_OscConfig+0xe6>
 80013b2:	e7e8      	b.n	8001386 <HAL_RCC_OscConfig+0xca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013b8:	682b      	ldr	r3, [r5, #0]
 80013ba:	d103      	bne.n	80013c4 <HAL_RCC_OscConfig+0x108>
 80013bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013c0:	602b      	str	r3, [r5, #0]
 80013c2:	e7d1      	b.n	8001368 <HAL_RCC_OscConfig+0xac>
 80013c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013c8:	602b      	str	r3, [r5, #0]
 80013ca:	682b      	ldr	r3, [r5, #0]
 80013cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013d0:	e7cd      	b.n	800136e <HAL_RCC_OscConfig+0xb2>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80013d2:	6923      	ldr	r3, [r4, #16]
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d904      	bls.n	80013e2 <HAL_RCC_OscConfig+0x126>
 80013d8:	f240 11ab 	movw	r1, #427	; 0x1ab
 80013dc:	4860      	ldr	r0, [pc, #384]	; (8001560 <HAL_RCC_OscConfig+0x2a4>)
 80013de:	f001 fda3 	bl	8002f28 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80013e2:	6963      	ldr	r3, [r4, #20]
 80013e4:	2b1f      	cmp	r3, #31
 80013e6:	d904      	bls.n	80013f2 <HAL_RCC_OscConfig+0x136>
 80013e8:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 80013ec:	485c      	ldr	r0, [pc, #368]	; (8001560 <HAL_RCC_OscConfig+0x2a4>)
 80013ee:	f001 fd9b 	bl	8002f28 <assert_failed>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80013f2:	4d5c      	ldr	r5, [pc, #368]	; (8001564 <HAL_RCC_OscConfig+0x2a8>)
 80013f4:	686b      	ldr	r3, [r5, #4]
 80013f6:	f013 0f0c 	tst.w	r3, #12
 80013fa:	d007      	beq.n	800140c <HAL_RCC_OscConfig+0x150>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80013fc:	686b      	ldr	r3, [r5, #4]
 80013fe:	f003 030c 	and.w	r3, r3, #12
 8001402:	2b08      	cmp	r3, #8
 8001404:	d110      	bne.n	8001428 <HAL_RCC_OscConfig+0x16c>
 8001406:	686b      	ldr	r3, [r5, #4]
 8001408:	03da      	lsls	r2, r3, #15
 800140a:	d40d      	bmi.n	8001428 <HAL_RCC_OscConfig+0x16c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800140c:	682b      	ldr	r3, [r5, #0]
 800140e:	079b      	lsls	r3, r3, #30
 8001410:	d502      	bpl.n	8001418 <HAL_RCC_OscConfig+0x15c>
 8001412:	6923      	ldr	r3, [r4, #16]
 8001414:	2b01      	cmp	r3, #1
 8001416:	d19f      	bne.n	8001358 <HAL_RCC_OscConfig+0x9c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001418:	682b      	ldr	r3, [r5, #0]
 800141a:	6962      	ldr	r2, [r4, #20]
 800141c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001420:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001424:	602b      	str	r3, [r5, #0]
 8001426:	e761      	b.n	80012ec <HAL_RCC_OscConfig+0x30>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001428:	6922      	ldr	r2, [r4, #16]
 800142a:	4b4f      	ldr	r3, [pc, #316]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 800142c:	b16a      	cbz	r2, 800144a <HAL_RCC_OscConfig+0x18e>
        __HAL_RCC_HSI_ENABLE();
 800142e:	2201      	movs	r2, #1
 8001430:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001432:	f7ff fc75 	bl	8000d20 <HAL_GetTick>
 8001436:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001438:	682b      	ldr	r3, [r5, #0]
 800143a:	079f      	lsls	r7, r3, #30
 800143c:	d4ec      	bmi.n	8001418 <HAL_RCC_OscConfig+0x15c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800143e:	f7ff fc6f 	bl	8000d20 <HAL_GetTick>
 8001442:	1b80      	subs	r0, r0, r6
 8001444:	2802      	cmp	r0, #2
 8001446:	d9f7      	bls.n	8001438 <HAL_RCC_OscConfig+0x17c>
 8001448:	e79d      	b.n	8001386 <HAL_RCC_OscConfig+0xca>
        __HAL_RCC_HSI_DISABLE();
 800144a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800144c:	f7ff fc68 	bl	8000d20 <HAL_GetTick>
 8001450:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001452:	682b      	ldr	r3, [r5, #0]
 8001454:	0798      	lsls	r0, r3, #30
 8001456:	f57f af49 	bpl.w	80012ec <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800145a:	f7ff fc61 	bl	8000d20 <HAL_GetTick>
 800145e:	1b80      	subs	r0, r0, r6
 8001460:	2802      	cmp	r0, #2
 8001462:	d9f6      	bls.n	8001452 <HAL_RCC_OscConfig+0x196>
 8001464:	e78f      	b.n	8001386 <HAL_RCC_OscConfig+0xca>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8001466:	69a3      	ldr	r3, [r4, #24]
 8001468:	2b01      	cmp	r3, #1
 800146a:	d904      	bls.n	8001476 <HAL_RCC_OscConfig+0x1ba>
 800146c:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 8001470:	483b      	ldr	r0, [pc, #236]	; (8001560 <HAL_RCC_OscConfig+0x2a4>)
 8001472:	f001 fd59 	bl	8002f28 <assert_failed>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001476:	69a2      	ldr	r2, [r4, #24]
 8001478:	4d3a      	ldr	r5, [pc, #232]	; (8001564 <HAL_RCC_OscConfig+0x2a8>)
 800147a:	4b3c      	ldr	r3, [pc, #240]	; (800156c <HAL_RCC_OscConfig+0x2b0>)
 800147c:	b1da      	cbz	r2, 80014b6 <HAL_RCC_OscConfig+0x1fa>
      __HAL_RCC_LSI_ENABLE();
 800147e:	2201      	movs	r2, #1
 8001480:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001482:	f7ff fc4d 	bl	8000d20 <HAL_GetTick>
 8001486:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001488:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800148a:	079b      	lsls	r3, r3, #30
 800148c:	d50d      	bpl.n	80014aa <HAL_RCC_OscConfig+0x1ee>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800148e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001492:	4b37      	ldr	r3, [pc, #220]	; (8001570 <HAL_RCC_OscConfig+0x2b4>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	fbb3 f3f2 	udiv	r3, r3, r2
 800149a:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 800149c:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 800149e:	9b01      	ldr	r3, [sp, #4]
 80014a0:	1e5a      	subs	r2, r3, #1
 80014a2:	9201      	str	r2, [sp, #4]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d1f9      	bne.n	800149c <HAL_RCC_OscConfig+0x1e0>
 80014a8:	e724      	b.n	80012f4 <HAL_RCC_OscConfig+0x38>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014aa:	f7ff fc39 	bl	8000d20 <HAL_GetTick>
 80014ae:	1b80      	subs	r0, r0, r6
 80014b0:	2802      	cmp	r0, #2
 80014b2:	d9e9      	bls.n	8001488 <HAL_RCC_OscConfig+0x1cc>
 80014b4:	e767      	b.n	8001386 <HAL_RCC_OscConfig+0xca>
      __HAL_RCC_LSI_DISABLE();
 80014b6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80014b8:	f7ff fc32 	bl	8000d20 <HAL_GetTick>
 80014bc:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80014c0:	079f      	lsls	r7, r3, #30
 80014c2:	f57f af17 	bpl.w	80012f4 <HAL_RCC_OscConfig+0x38>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014c6:	f7ff fc2b 	bl	8000d20 <HAL_GetTick>
 80014ca:	1b80      	subs	r0, r0, r6
 80014cc:	2802      	cmp	r0, #2
 80014ce:	d9f6      	bls.n	80014be <HAL_RCC_OscConfig+0x202>
 80014d0:	e759      	b.n	8001386 <HAL_RCC_OscConfig+0xca>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80014d2:	68e3      	ldr	r3, [r4, #12]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d906      	bls.n	80014e6 <HAL_RCC_OscConfig+0x22a>
 80014d8:	2b05      	cmp	r3, #5
 80014da:	d004      	beq.n	80014e6 <HAL_RCC_OscConfig+0x22a>
 80014dc:	f240 211b 	movw	r1, #539	; 0x21b
 80014e0:	481f      	ldr	r0, [pc, #124]	; (8001560 <HAL_RCC_OscConfig+0x2a4>)
 80014e2:	f001 fd21 	bl	8002f28 <assert_failed>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014e6:	4d1f      	ldr	r5, [pc, #124]	; (8001564 <HAL_RCC_OscConfig+0x2a8>)
 80014e8:	69eb      	ldr	r3, [r5, #28]
 80014ea:	00d8      	lsls	r0, r3, #3
 80014ec:	d424      	bmi.n	8001538 <HAL_RCC_OscConfig+0x27c>
      pwrclkchanged = SET;
 80014ee:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80014f0:	69eb      	ldr	r3, [r5, #28]
 80014f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014f6:	61eb      	str	r3, [r5, #28]
 80014f8:	69eb      	ldr	r3, [r5, #28]
 80014fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014fe:	9300      	str	r3, [sp, #0]
 8001500:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001502:	4e1c      	ldr	r6, [pc, #112]	; (8001574 <HAL_RCC_OscConfig+0x2b8>)
 8001504:	6833      	ldr	r3, [r6, #0]
 8001506:	05d9      	lsls	r1, r3, #23
 8001508:	d518      	bpl.n	800153c <HAL_RCC_OscConfig+0x280>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800150a:	68e3      	ldr	r3, [r4, #12]
 800150c:	2b01      	cmp	r3, #1
 800150e:	d133      	bne.n	8001578 <HAL_RCC_OscConfig+0x2bc>
 8001510:	6a2b      	ldr	r3, [r5, #32]
 8001512:	f043 0301 	orr.w	r3, r3, #1
 8001516:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8001518:	f7ff fc02 	bl	8000d20 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800151c:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001520:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001522:	6a2b      	ldr	r3, [r5, #32]
 8001524:	079b      	lsls	r3, r3, #30
 8001526:	d54c      	bpl.n	80015c2 <HAL_RCC_OscConfig+0x306>
    if(pwrclkchanged == SET)
 8001528:	2f00      	cmp	r7, #0
 800152a:	f43f aee7 	beq.w	80012fc <HAL_RCC_OscConfig+0x40>
      __HAL_RCC_PWR_CLK_DISABLE();
 800152e:	69eb      	ldr	r3, [r5, #28]
 8001530:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001534:	61eb      	str	r3, [r5, #28]
 8001536:	e6e1      	b.n	80012fc <HAL_RCC_OscConfig+0x40>
    FlagStatus       pwrclkchanged = RESET;
 8001538:	2700      	movs	r7, #0
 800153a:	e7e2      	b.n	8001502 <HAL_RCC_OscConfig+0x246>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800153c:	6833      	ldr	r3, [r6, #0]
 800153e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001542:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001544:	f7ff fbec 	bl	8000d20 <HAL_GetTick>
 8001548:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800154a:	6833      	ldr	r3, [r6, #0]
 800154c:	05da      	lsls	r2, r3, #23
 800154e:	d4dc      	bmi.n	800150a <HAL_RCC_OscConfig+0x24e>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001550:	f7ff fbe6 	bl	8000d20 <HAL_GetTick>
 8001554:	eba0 0008 	sub.w	r0, r0, r8
 8001558:	2864      	cmp	r0, #100	; 0x64
 800155a:	d9f6      	bls.n	800154a <HAL_RCC_OscConfig+0x28e>
 800155c:	e713      	b.n	8001386 <HAL_RCC_OscConfig+0xca>
 800155e:	bf00      	nop
 8001560:	080053f4 	.word	0x080053f4
 8001564:	40021000 	.word	0x40021000
 8001568:	42420000 	.word	0x42420000
 800156c:	42420480 	.word	0x42420480
 8001570:	2000000c 	.word	0x2000000c
 8001574:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001578:	b9ab      	cbnz	r3, 80015a6 <HAL_RCC_OscConfig+0x2ea>
 800157a:	6a2b      	ldr	r3, [r5, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800157c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001580:	f023 0301 	bic.w	r3, r3, #1
 8001584:	622b      	str	r3, [r5, #32]
 8001586:	6a2b      	ldr	r3, [r5, #32]
 8001588:	f023 0304 	bic.w	r3, r3, #4
 800158c:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 800158e:	f7ff fbc7 	bl	8000d20 <HAL_GetTick>
 8001592:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001594:	6a2b      	ldr	r3, [r5, #32]
 8001596:	0798      	lsls	r0, r3, #30
 8001598:	d5c6      	bpl.n	8001528 <HAL_RCC_OscConfig+0x26c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800159a:	f7ff fbc1 	bl	8000d20 <HAL_GetTick>
 800159e:	1b80      	subs	r0, r0, r6
 80015a0:	4540      	cmp	r0, r8
 80015a2:	d9f7      	bls.n	8001594 <HAL_RCC_OscConfig+0x2d8>
 80015a4:	e6ef      	b.n	8001386 <HAL_RCC_OscConfig+0xca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015a6:	2b05      	cmp	r3, #5
 80015a8:	6a2b      	ldr	r3, [r5, #32]
 80015aa:	d103      	bne.n	80015b4 <HAL_RCC_OscConfig+0x2f8>
 80015ac:	f043 0304 	orr.w	r3, r3, #4
 80015b0:	622b      	str	r3, [r5, #32]
 80015b2:	e7ad      	b.n	8001510 <HAL_RCC_OscConfig+0x254>
 80015b4:	f023 0301 	bic.w	r3, r3, #1
 80015b8:	622b      	str	r3, [r5, #32]
 80015ba:	6a2b      	ldr	r3, [r5, #32]
 80015bc:	f023 0304 	bic.w	r3, r3, #4
 80015c0:	e7a9      	b.n	8001516 <HAL_RCC_OscConfig+0x25a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015c2:	f7ff fbad 	bl	8000d20 <HAL_GetTick>
 80015c6:	eba0 0008 	sub.w	r0, r0, r8
 80015ca:	42b0      	cmp	r0, r6
 80015cc:	d9a9      	bls.n	8001522 <HAL_RCC_OscConfig+0x266>
 80015ce:	e6da      	b.n	8001386 <HAL_RCC_OscConfig+0xca>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015d0:	4d38      	ldr	r5, [pc, #224]	; (80016b4 <HAL_RCC_OscConfig+0x3f8>)
 80015d2:	686b      	ldr	r3, [r5, #4]
 80015d4:	f003 030c 	and.w	r3, r3, #12
 80015d8:	2b08      	cmp	r3, #8
 80015da:	f43f aebd 	beq.w	8001358 <HAL_RCC_OscConfig+0x9c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015de:	2a02      	cmp	r2, #2
 80015e0:	4e35      	ldr	r6, [pc, #212]	; (80016b8 <HAL_RCC_OscConfig+0x3fc>)
 80015e2:	d157      	bne.n	8001694 <HAL_RCC_OscConfig+0x3d8>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80015e4:	6a23      	ldr	r3, [r4, #32]
 80015e6:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 80015ea:	d004      	beq.n	80015f6 <HAL_RCC_OscConfig+0x33a>
 80015ec:	f240 21c2 	movw	r1, #706	; 0x2c2
 80015f0:	4832      	ldr	r0, [pc, #200]	; (80016bc <HAL_RCC_OscConfig+0x400>)
 80015f2:	f001 fc99 	bl	8002f28 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 80015f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80015f8:	f433 2240 	bics.w	r2, r3, #786432	; 0xc0000
 80015fc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8001600:	d010      	beq.n	8001624 <HAL_RCC_OscConfig+0x368>
 8001602:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8001606:	d00d      	beq.n	8001624 <HAL_RCC_OscConfig+0x368>
 8001608:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 800160c:	d00a      	beq.n	8001624 <HAL_RCC_OscConfig+0x368>
 800160e:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 8001612:	d007      	beq.n	8001624 <HAL_RCC_OscConfig+0x368>
 8001614:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8001618:	d004      	beq.n	8001624 <HAL_RCC_OscConfig+0x368>
 800161a:	f240 21c3 	movw	r1, #707	; 0x2c3
 800161e:	4827      	ldr	r0, [pc, #156]	; (80016bc <HAL_RCC_OscConfig+0x400>)
 8001620:	f001 fc82 	bl	8002f28 <assert_failed>
        __HAL_RCC_PLL_DISABLE();
 8001624:	2300      	movs	r3, #0
 8001626:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001628:	f7ff fb7a 	bl	8000d20 <HAL_GetTick>
 800162c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800162e:	682b      	ldr	r3, [r5, #0]
 8001630:	0199      	lsls	r1, r3, #6
 8001632:	d429      	bmi.n	8001688 <HAL_RCC_OscConfig+0x3cc>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001634:	6a23      	ldr	r3, [r4, #32]
 8001636:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800163a:	d10e      	bne.n	800165a <HAL_RCC_OscConfig+0x39e>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 800163c:	68a3      	ldr	r3, [r4, #8]
 800163e:	f433 3300 	bics.w	r3, r3, #131072	; 0x20000
 8001642:	d004      	beq.n	800164e <HAL_RCC_OscConfig+0x392>
 8001644:	f240 21d9 	movw	r1, #729	; 0x2d9
 8001648:	481c      	ldr	r0, [pc, #112]	; (80016bc <HAL_RCC_OscConfig+0x400>)
 800164a:	f001 fc6d 	bl	8002f28 <assert_failed>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800164e:	686b      	ldr	r3, [r5, #4]
 8001650:	68a2      	ldr	r2, [r4, #8]
 8001652:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001656:	4313      	orrs	r3, r2
 8001658:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800165a:	6a23      	ldr	r3, [r4, #32]
 800165c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800165e:	686a      	ldr	r2, [r5, #4]
 8001660:	430b      	orrs	r3, r1
 8001662:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001666:	4313      	orrs	r3, r2
 8001668:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800166a:	2301      	movs	r3, #1
 800166c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800166e:	f7ff fb57 	bl	8000d20 <HAL_GetTick>
 8001672:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001674:	682b      	ldr	r3, [r5, #0]
 8001676:	019a      	lsls	r2, r3, #6
 8001678:	f53f ae4c 	bmi.w	8001314 <HAL_RCC_OscConfig+0x58>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800167c:	f7ff fb50 	bl	8000d20 <HAL_GetTick>
 8001680:	1b00      	subs	r0, r0, r4
 8001682:	2802      	cmp	r0, #2
 8001684:	d9f6      	bls.n	8001674 <HAL_RCC_OscConfig+0x3b8>
 8001686:	e67e      	b.n	8001386 <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001688:	f7ff fb4a 	bl	8000d20 <HAL_GetTick>
 800168c:	1bc0      	subs	r0, r0, r7
 800168e:	2802      	cmp	r0, #2
 8001690:	d9cd      	bls.n	800162e <HAL_RCC_OscConfig+0x372>
 8001692:	e678      	b.n	8001386 <HAL_RCC_OscConfig+0xca>
        __HAL_RCC_PLL_DISABLE();
 8001694:	2300      	movs	r3, #0
 8001696:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001698:	f7ff fb42 	bl	8000d20 <HAL_GetTick>
 800169c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800169e:	682b      	ldr	r3, [r5, #0]
 80016a0:	019b      	lsls	r3, r3, #6
 80016a2:	f57f ae37 	bpl.w	8001314 <HAL_RCC_OscConfig+0x58>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016a6:	f7ff fb3b 	bl	8000d20 <HAL_GetTick>
 80016aa:	1b00      	subs	r0, r0, r4
 80016ac:	2802      	cmp	r0, #2
 80016ae:	d9f6      	bls.n	800169e <HAL_RCC_OscConfig+0x3e2>
 80016b0:	e669      	b.n	8001386 <HAL_RCC_OscConfig+0xca>
 80016b2:	bf00      	nop
 80016b4:	40021000 	.word	0x40021000
 80016b8:	42420060 	.word	0x42420060
 80016bc:	080053f4 	.word	0x080053f4

080016c0 <HAL_RCC_MCOConfig>:
{
 80016c0:	b570      	push	{r4, r5, r6, lr}
 80016c2:	4606      	mov	r6, r0
 80016c4:	b086      	sub	sp, #24
 80016c6:	460d      	mov	r5, r1
 80016c8:	4614      	mov	r4, r2
  GPIO_InitTypeDef gpio = {0U};
 80016ca:	2100      	movs	r1, #0
 80016cc:	2210      	movs	r2, #16
 80016ce:	a802      	add	r0, sp, #8
 80016d0:	f001 fdb6 	bl	8003240 <memset>
  assert_param(IS_RCC_MCO(RCC_MCOx));
 80016d4:	b126      	cbz	r6, 80016e0 <HAL_RCC_MCOConfig+0x20>
 80016d6:	f44f 717f 	mov.w	r1, #1020	; 0x3fc
 80016da:	481b      	ldr	r0, [pc, #108]	; (8001748 <HAL_RCC_MCOConfig+0x88>)
 80016dc:	f001 fc24 	bl	8002f28 <assert_failed>
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
 80016e0:	b124      	cbz	r4, 80016ec <HAL_RCC_MCOConfig+0x2c>
 80016e2:	f240 31fd 	movw	r1, #1021	; 0x3fd
 80016e6:	4818      	ldr	r0, [pc, #96]	; (8001748 <HAL_RCC_MCOConfig+0x88>)
 80016e8:	f001 fc1e 	bl	8002f28 <assert_failed>
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
 80016ec:	f025 7300 	bic.w	r3, r5, #33554432	; 0x2000000
 80016f0:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80016f4:	d00a      	beq.n	800170c <HAL_RCC_MCOConfig+0x4c>
 80016f6:	f1b5 6fc0 	cmp.w	r5, #100663296	; 0x6000000
 80016fa:	d007      	beq.n	800170c <HAL_RCC_MCOConfig+0x4c>
 80016fc:	f035 6380 	bics.w	r3, r5, #67108864	; 0x4000000
 8001700:	d004      	beq.n	800170c <HAL_RCC_MCOConfig+0x4c>
 8001702:	f240 31fe 	movw	r1, #1022	; 0x3fe
 8001706:	4810      	ldr	r0, [pc, #64]	; (8001748 <HAL_RCC_MCOConfig+0x88>)
 8001708:	f001 fc0e 	bl	8002f28 <assert_failed>
  gpio.Mode      = GPIO_MODE_AF_PP;
 800170c:	2302      	movs	r3, #2
 800170e:	9303      	str	r3, [sp, #12]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001710:	2303      	movs	r3, #3
 8001712:	9305      	str	r3, [sp, #20]
  gpio.Pull      = GPIO_NOPULL;
 8001714:	2300      	movs	r3, #0
 8001716:	9304      	str	r3, [sp, #16]
  gpio.Pin       = MCO1_PIN;
 8001718:	f44f 7380 	mov.w	r3, #256	; 0x100
  MCO1_CLK_ENABLE();
 800171c:	4c0b      	ldr	r4, [pc, #44]	; (800174c <HAL_RCC_MCOConfig+0x8c>)
  gpio.Pin       = MCO1_PIN;
 800171e:	9302      	str	r3, [sp, #8]
  MCO1_CLK_ENABLE();
 8001720:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8001722:	a902      	add	r1, sp, #8
  MCO1_CLK_ENABLE();
 8001724:	f043 0304 	orr.w	r3, r3, #4
 8001728:	61a3      	str	r3, [r4, #24]
 800172a:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 800172c:	4808      	ldr	r0, [pc, #32]	; (8001750 <HAL_RCC_MCOConfig+0x90>)
  MCO1_CLK_ENABLE();
 800172e:	f003 0304 	and.w	r3, r3, #4
 8001732:	9301      	str	r3, [sp, #4]
 8001734:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8001736:	f7ff fbad 	bl	8000e94 <HAL_GPIO_Init>
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 800173a:	6861      	ldr	r1, [r4, #4]
 800173c:	f021 61e0 	bic.w	r1, r1, #117440512	; 0x7000000
 8001740:	4329      	orrs	r1, r5
 8001742:	6061      	str	r1, [r4, #4]
}
 8001744:	b006      	add	sp, #24
 8001746:	bd70      	pop	{r4, r5, r6, pc}
 8001748:	080053f4 	.word	0x080053f4
 800174c:	40021000 	.word	0x40021000
 8001750:	40010800 	.word	0x40010800

08001754 <HAL_RCC_GetSysClockFreq>:
{
 8001754:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001756:	4b19      	ldr	r3, [pc, #100]	; (80017bc <HAL_RCC_GetSysClockFreq+0x68>)
{
 8001758:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800175a:	ac02      	add	r4, sp, #8
 800175c:	f103 0510 	add.w	r5, r3, #16
 8001760:	4622      	mov	r2, r4
 8001762:	6818      	ldr	r0, [r3, #0]
 8001764:	6859      	ldr	r1, [r3, #4]
 8001766:	3308      	adds	r3, #8
 8001768:	c203      	stmia	r2!, {r0, r1}
 800176a:	42ab      	cmp	r3, r5
 800176c:	4614      	mov	r4, r2
 800176e:	d1f7      	bne.n	8001760 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001770:	2301      	movs	r3, #1
 8001772:	f88d 3004 	strb.w	r3, [sp, #4]
 8001776:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8001778:	4911      	ldr	r1, [pc, #68]	; (80017c0 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800177a:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 800177e:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001780:	f003 020c 	and.w	r2, r3, #12
 8001784:	2a08      	cmp	r2, #8
 8001786:	d117      	bne.n	80017b8 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001788:	f3c3 4283 	ubfx	r2, r3, #18, #4
 800178c:	a806      	add	r0, sp, #24
 800178e:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001790:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001792:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001796:	d50c      	bpl.n	80017b2 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001798:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800179a:	480a      	ldr	r0, [pc, #40]	; (80017c4 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800179c:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80017a0:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80017a2:	aa06      	add	r2, sp, #24
 80017a4:	4413      	add	r3, r2
 80017a6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80017aa:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80017ae:	b007      	add	sp, #28
 80017b0:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80017b2:	4805      	ldr	r0, [pc, #20]	; (80017c8 <HAL_RCC_GetSysClockFreq+0x74>)
 80017b4:	4350      	muls	r0, r2
 80017b6:	e7fa      	b.n	80017ae <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 80017b8:	4802      	ldr	r0, [pc, #8]	; (80017c4 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 80017ba:	e7f8      	b.n	80017ae <HAL_RCC_GetSysClockFreq+0x5a>
 80017bc:	08005370 	.word	0x08005370
 80017c0:	40021000 	.word	0x40021000
 80017c4:	007a1200 	.word	0x007a1200
 80017c8:	003d0900 	.word	0x003d0900

080017cc <HAL_RCC_ClockConfig>:
{
 80017cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017d0:	460e      	mov	r6, r1
  assert_param(RCC_ClkInitStruct != NULL);
 80017d2:	4604      	mov	r4, r0
 80017d4:	b920      	cbnz	r0, 80017e0 <HAL_RCC_ClockConfig+0x14>
 80017d6:	f240 312e 	movw	r1, #814	; 0x32e
 80017da:	487f      	ldr	r0, [pc, #508]	; (80019d8 <HAL_RCC_ClockConfig+0x20c>)
 80017dc:	f001 fba4 	bl	8002f28 <assert_failed>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80017e0:	6823      	ldr	r3, [r4, #0]
 80017e2:	071d      	lsls	r5, r3, #28
 80017e4:	d104      	bne.n	80017f0 <HAL_RCC_ClockConfig+0x24>
 80017e6:	f240 312f 	movw	r1, #815	; 0x32f
 80017ea:	487b      	ldr	r0, [pc, #492]	; (80019d8 <HAL_RCC_ClockConfig+0x20c>)
 80017ec:	f001 fb9c 	bl	8002f28 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80017f0:	2e02      	cmp	r6, #2
 80017f2:	d904      	bls.n	80017fe <HAL_RCC_ClockConfig+0x32>
 80017f4:	f44f 714c 	mov.w	r1, #816	; 0x330
 80017f8:	4877      	ldr	r0, [pc, #476]	; (80019d8 <HAL_RCC_ClockConfig+0x20c>)
 80017fa:	f001 fb95 	bl	8002f28 <assert_failed>
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80017fe:	4a77      	ldr	r2, [pc, #476]	; (80019dc <HAL_RCC_ClockConfig+0x210>)
 8001800:	6813      	ldr	r3, [r2, #0]
 8001802:	f003 0307 	and.w	r3, r3, #7
 8001806:	429e      	cmp	r6, r3
 8001808:	d83d      	bhi.n	8001886 <HAL_RCC_ClockConfig+0xba>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800180a:	6823      	ldr	r3, [r4, #0]
 800180c:	0798      	lsls	r0, r3, #30
 800180e:	d447      	bmi.n	80018a0 <HAL_RCC_ClockConfig+0xd4>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001810:	6823      	ldr	r3, [r4, #0]
 8001812:	07da      	lsls	r2, r3, #31
 8001814:	d470      	bmi.n	80018f8 <HAL_RCC_ClockConfig+0x12c>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001816:	4a71      	ldr	r2, [pc, #452]	; (80019dc <HAL_RCC_ClockConfig+0x210>)
 8001818:	6813      	ldr	r3, [r2, #0]
 800181a:	f003 0307 	and.w	r3, r3, #7
 800181e:	429e      	cmp	r6, r3
 8001820:	f0c0 80b5 	bcc.w	800198e <HAL_RCC_ClockConfig+0x1c2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001824:	6823      	ldr	r3, [r4, #0]
 8001826:	4d6e      	ldr	r5, [pc, #440]	; (80019e0 <HAL_RCC_ClockConfig+0x214>)
 8001828:	f013 0f04 	tst.w	r3, #4
 800182c:	f040 80bb 	bne.w	80019a6 <HAL_RCC_ClockConfig+0x1da>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001830:	6823      	ldr	r3, [r4, #0]
 8001832:	071b      	lsls	r3, r3, #28
 8001834:	d517      	bpl.n	8001866 <HAL_RCC_ClockConfig+0x9a>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8001836:	6923      	ldr	r3, [r4, #16]
 8001838:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 800183c:	d00c      	beq.n	8001858 <HAL_RCC_ClockConfig+0x8c>
 800183e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001842:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 8001846:	d007      	beq.n	8001858 <HAL_RCC_ClockConfig+0x8c>
 8001848:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800184c:	d004      	beq.n	8001858 <HAL_RCC_ClockConfig+0x8c>
 800184e:	f44f 716e 	mov.w	r1, #952	; 0x3b8
 8001852:	4861      	ldr	r0, [pc, #388]	; (80019d8 <HAL_RCC_ClockConfig+0x20c>)
 8001854:	f001 fb68 	bl	8002f28 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001858:	686b      	ldr	r3, [r5, #4]
 800185a:	6922      	ldr	r2, [r4, #16]
 800185c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001860:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001864:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001866:	f7ff ff75 	bl	8001754 <HAL_RCC_GetSysClockFreq>
 800186a:	686b      	ldr	r3, [r5, #4]
 800186c:	4a5d      	ldr	r2, [pc, #372]	; (80019e4 <HAL_RCC_ClockConfig+0x218>)
 800186e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001872:	5cd3      	ldrb	r3, [r2, r3]
 8001874:	40d8      	lsrs	r0, r3
 8001876:	4b5c      	ldr	r3, [pc, #368]	; (80019e8 <HAL_RCC_ClockConfig+0x21c>)
 8001878:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800187a:	2000      	movs	r0, #0
 800187c:	f7ff fa0e 	bl	8000c9c <HAL_InitTick>
  return HAL_OK;
 8001880:	2000      	movs	r0, #0
}
 8001882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001886:	6813      	ldr	r3, [r2, #0]
 8001888:	f023 0307 	bic.w	r3, r3, #7
 800188c:	4333      	orrs	r3, r6
 800188e:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001890:	6813      	ldr	r3, [r2, #0]
 8001892:	f003 0307 	and.w	r3, r3, #7
 8001896:	429e      	cmp	r6, r3
 8001898:	d0b7      	beq.n	800180a <HAL_RCC_ClockConfig+0x3e>
      return HAL_ERROR;
 800189a:	2001      	movs	r0, #1
 800189c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80018a0:	4d4f      	ldr	r5, [pc, #316]	; (80019e0 <HAL_RCC_ClockConfig+0x214>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018a2:	f013 0f04 	tst.w	r3, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018a6:	bf1e      	ittt	ne
 80018a8:	686a      	ldrne	r2, [r5, #4]
 80018aa:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 80018ae:	606a      	strne	r2, [r5, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018b0:	0719      	lsls	r1, r3, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018b2:	bf42      	ittt	mi
 80018b4:	686b      	ldrmi	r3, [r5, #4]
 80018b6:	f443 5360 	orrmi.w	r3, r3, #14336	; 0x3800
 80018ba:	606b      	strmi	r3, [r5, #4]
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80018bc:	68a3      	ldr	r3, [r4, #8]
 80018be:	f033 0280 	bics.w	r2, r3, #128	; 0x80
 80018c2:	d012      	beq.n	80018ea <HAL_RCC_ClockConfig+0x11e>
 80018c4:	f023 0220 	bic.w	r2, r3, #32
 80018c8:	2a90      	cmp	r2, #144	; 0x90
 80018ca:	d00e      	beq.n	80018ea <HAL_RCC_ClockConfig+0x11e>
 80018cc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80018d0:	2aa0      	cmp	r2, #160	; 0xa0
 80018d2:	d00a      	beq.n	80018ea <HAL_RCC_ClockConfig+0x11e>
 80018d4:	f023 0210 	bic.w	r2, r3, #16
 80018d8:	2ac0      	cmp	r2, #192	; 0xc0
 80018da:	d006      	beq.n	80018ea <HAL_RCC_ClockConfig+0x11e>
 80018dc:	2bf0      	cmp	r3, #240	; 0xf0
 80018de:	d004      	beq.n	80018ea <HAL_RCC_ClockConfig+0x11e>
 80018e0:	f240 3156 	movw	r1, #854	; 0x356
 80018e4:	483c      	ldr	r0, [pc, #240]	; (80019d8 <HAL_RCC_ClockConfig+0x20c>)
 80018e6:	f001 fb1f 	bl	8002f28 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018ea:	686b      	ldr	r3, [r5, #4]
 80018ec:	68a2      	ldr	r2, [r4, #8]
 80018ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80018f2:	4313      	orrs	r3, r2
 80018f4:	606b      	str	r3, [r5, #4]
 80018f6:	e78b      	b.n	8001810 <HAL_RCC_ClockConfig+0x44>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80018f8:	6863      	ldr	r3, [r4, #4]
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d904      	bls.n	8001908 <HAL_RCC_ClockConfig+0x13c>
 80018fe:	f240 315d 	movw	r1, #861	; 0x35d
 8001902:	4835      	ldr	r0, [pc, #212]	; (80019d8 <HAL_RCC_ClockConfig+0x20c>)
 8001904:	f001 fb10 	bl	8002f28 <assert_failed>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001908:	6862      	ldr	r2, [r4, #4]
 800190a:	4d35      	ldr	r5, [pc, #212]	; (80019e0 <HAL_RCC_ClockConfig+0x214>)
 800190c:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800190e:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001910:	d11d      	bne.n	800194e <HAL_RCC_ClockConfig+0x182>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001912:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001916:	d0c0      	beq.n	800189a <HAL_RCC_ClockConfig+0xce>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001918:	686b      	ldr	r3, [r5, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800191a:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800191e:	f023 0303 	bic.w	r3, r3, #3
 8001922:	4313      	orrs	r3, r2
 8001924:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8001926:	f7ff f9fb 	bl	8000d20 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800192a:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 800192c:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800192e:	2b01      	cmp	r3, #1
 8001930:	d115      	bne.n	800195e <HAL_RCC_ClockConfig+0x192>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001932:	686b      	ldr	r3, [r5, #4]
 8001934:	f003 030c 	and.w	r3, r3, #12
 8001938:	2b04      	cmp	r3, #4
 800193a:	f43f af6c 	beq.w	8001816 <HAL_RCC_ClockConfig+0x4a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800193e:	f7ff f9ef 	bl	8000d20 <HAL_GetTick>
 8001942:	1bc0      	subs	r0, r0, r7
 8001944:	4540      	cmp	r0, r8
 8001946:	d9f4      	bls.n	8001932 <HAL_RCC_ClockConfig+0x166>
          return HAL_TIMEOUT;
 8001948:	2003      	movs	r0, #3
 800194a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800194e:	2a02      	cmp	r2, #2
 8001950:	d102      	bne.n	8001958 <HAL_RCC_ClockConfig+0x18c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001952:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001956:	e7de      	b.n	8001916 <HAL_RCC_ClockConfig+0x14a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001958:	f013 0f02 	tst.w	r3, #2
 800195c:	e7db      	b.n	8001916 <HAL_RCC_ClockConfig+0x14a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800195e:	2b02      	cmp	r3, #2
 8001960:	d110      	bne.n	8001984 <HAL_RCC_ClockConfig+0x1b8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001962:	686b      	ldr	r3, [r5, #4]
 8001964:	f003 030c 	and.w	r3, r3, #12
 8001968:	2b08      	cmp	r3, #8
 800196a:	f43f af54 	beq.w	8001816 <HAL_RCC_ClockConfig+0x4a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800196e:	f7ff f9d7 	bl	8000d20 <HAL_GetTick>
 8001972:	1bc0      	subs	r0, r0, r7
 8001974:	4540      	cmp	r0, r8
 8001976:	d9f4      	bls.n	8001962 <HAL_RCC_ClockConfig+0x196>
 8001978:	e7e6      	b.n	8001948 <HAL_RCC_ClockConfig+0x17c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800197a:	f7ff f9d1 	bl	8000d20 <HAL_GetTick>
 800197e:	1bc0      	subs	r0, r0, r7
 8001980:	4540      	cmp	r0, r8
 8001982:	d8e1      	bhi.n	8001948 <HAL_RCC_ClockConfig+0x17c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001984:	686b      	ldr	r3, [r5, #4]
 8001986:	f013 0f0c 	tst.w	r3, #12
 800198a:	d1f6      	bne.n	800197a <HAL_RCC_ClockConfig+0x1ae>
 800198c:	e743      	b.n	8001816 <HAL_RCC_ClockConfig+0x4a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800198e:	6813      	ldr	r3, [r2, #0]
 8001990:	f023 0307 	bic.w	r3, r3, #7
 8001994:	4333      	orrs	r3, r6
 8001996:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001998:	6813      	ldr	r3, [r2, #0]
 800199a:	f003 0307 	and.w	r3, r3, #7
 800199e:	429e      	cmp	r6, r3
 80019a0:	f47f af7b 	bne.w	800189a <HAL_RCC_ClockConfig+0xce>
 80019a4:	e73e      	b.n	8001824 <HAL_RCC_ClockConfig+0x58>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80019a6:	68e3      	ldr	r3, [r4, #12]
 80019a8:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 80019ac:	d00c      	beq.n	80019c8 <HAL_RCC_ClockConfig+0x1fc>
 80019ae:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80019b2:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 80019b6:	d007      	beq.n	80019c8 <HAL_RCC_ClockConfig+0x1fc>
 80019b8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80019bc:	d004      	beq.n	80019c8 <HAL_RCC_ClockConfig+0x1fc>
 80019be:	f240 31b1 	movw	r1, #945	; 0x3b1
 80019c2:	4805      	ldr	r0, [pc, #20]	; (80019d8 <HAL_RCC_ClockConfig+0x20c>)
 80019c4:	f001 fab0 	bl	8002f28 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019c8:	686b      	ldr	r3, [r5, #4]
 80019ca:	68e2      	ldr	r2, [r4, #12]
 80019cc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80019d0:	4313      	orrs	r3, r2
 80019d2:	606b      	str	r3, [r5, #4]
 80019d4:	e72c      	b.n	8001830 <HAL_RCC_ClockConfig+0x64>
 80019d6:	bf00      	nop
 80019d8:	080053f4 	.word	0x080053f4
 80019dc:	40022000 	.word	0x40022000
 80019e0:	40021000 	.word	0x40021000
 80019e4:	08005580 	.word	0x08005580
 80019e8:	2000000c 	.word	0x2000000c

080019ec <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80019ec:	4b04      	ldr	r3, [pc, #16]	; (8001a00 <HAL_RCC_GetPCLK1Freq+0x14>)
 80019ee:	4a05      	ldr	r2, [pc, #20]	; (8001a04 <HAL_RCC_GetPCLK1Freq+0x18>)
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80019f6:	5cd3      	ldrb	r3, [r2, r3]
 80019f8:	4a03      	ldr	r2, [pc, #12]	; (8001a08 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80019fa:	6810      	ldr	r0, [r2, #0]
}    
 80019fc:	40d8      	lsrs	r0, r3
 80019fe:	4770      	bx	lr
 8001a00:	40021000 	.word	0x40021000
 8001a04:	08005590 	.word	0x08005590
 8001a08:	2000000c 	.word	0x2000000c

08001a0c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a0c:	4b04      	ldr	r3, [pc, #16]	; (8001a20 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001a0e:	4a05      	ldr	r2, [pc, #20]	; (8001a24 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001a16:	5cd3      	ldrb	r3, [r2, r3]
 8001a18:	4a03      	ldr	r2, [pc, #12]	; (8001a28 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001a1a:	6810      	ldr	r0, [r2, #0]
} 
 8001a1c:	40d8      	lsrs	r0, r3
 8001a1e:	4770      	bx	lr
 8001a20:	40021000 	.word	0x40021000
 8001a24:	08005590 	.word	0x08005590
 8001a28:	2000000c 	.word	0x2000000c

08001a2c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig: The slave configuration structure
  * @retval None
  */
static void TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                              TIM_SlaveConfigTypeDef * sSlaveConfig)
{
 8001a2c:	b538      	push	{r3, r4, r5, lr}
 8001a2e:	460c      	mov	r4, r1
  uint32_t tmpsmcr = 0U;
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001a30:	6803      	ldr	r3, [r0, #0]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8001a32:	6862      	ldr	r2, [r4, #4]
  tmpsmcr = htim->Instance->SMCR;
 8001a34:	6899      	ldr	r1, [r3, #8]
{
 8001a36:	4605      	mov	r5, r0
  tmpsmcr &= ~TIM_SMCR_TS;
 8001a38:	f021 0170 	bic.w	r1, r1, #112	; 0x70

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8001a3c:	6820      	ldr	r0, [r4, #0]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8001a3e:	4311      	orrs	r1, r2
  tmpsmcr &= ~TIM_SMCR_SMS;
 8001a40:	f021 0107 	bic.w	r1, r1, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8001a44:	4301      	orrs	r1, r0

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8001a46:	2a30      	cmp	r2, #48	; 0x30
  htim->Instance->SMCR = tmpsmcr;
 8001a48:	6099      	str	r1, [r3, #8]
  switch (sSlaveConfig->InputTrigger)
 8001a4a:	f000 8131 	beq.w	8001cb0 <TIM_SlaveTimer_SetConfig+0x284>
 8001a4e:	d821      	bhi.n	8001a94 <TIM_SlaveTimer_SetConfig+0x68>
 8001a50:	2a10      	cmp	r2, #16
 8001a52:	f000 810b 	beq.w	8001c6c <TIM_SlaveTimer_SetConfig+0x240>
 8001a56:	2a20      	cmp	r2, #32
 8001a58:	f000 8119 	beq.w	8001c8e <TIM_SlaveTimer_SetConfig+0x262>
 8001a5c:	2a00      	cmp	r2, #0
 8001a5e:	f040 8138 	bne.w	8001cd2 <TIM_SlaveTimer_SetConfig+0x2a6>
    break;

  case TIM_TS_ITR0:
    {
      /* Check the parameter */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8001a62:	4a9c      	ldr	r2, [pc, #624]	; (8001cd4 <TIM_SlaveTimer_SetConfig+0x2a8>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	f000 8134 	beq.w	8001cd2 <TIM_SlaveTimer_SetConfig+0x2a6>
 8001a6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a6e:	f000 8130 	beq.w	8001cd2 <TIM_SlaveTimer_SetConfig+0x2a6>
 8001a72:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001a76:	4293      	cmp	r3, r2
 8001a78:	f000 812b 	beq.w	8001cd2 <TIM_SlaveTimer_SetConfig+0x2a6>
 8001a7c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a80:	4293      	cmp	r3, r2
 8001a82:	f000 8126 	beq.w	8001cd2 <TIM_SlaveTimer_SetConfig+0x2a6>
 8001a86:	f241 319a 	movw	r1, #5018	; 0x139a
    break;

  default:
    break;
  }
}
 8001a8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8001a8e:	4892      	ldr	r0, [pc, #584]	; (8001cd8 <TIM_SlaveTimer_SetConfig+0x2ac>)
 8001a90:	f001 ba4a 	b.w	8002f28 <assert_failed>
  switch (sSlaveConfig->InputTrigger)
 8001a94:	2a50      	cmp	r2, #80	; 0x50
 8001a96:	d072      	beq.n	8001b7e <TIM_SlaveTimer_SetConfig+0x152>
 8001a98:	d802      	bhi.n	8001aa0 <TIM_SlaveTimer_SetConfig+0x74>
 8001a9a:	2a40      	cmp	r2, #64	; 0x40
 8001a9c:	d045      	beq.n	8001b2a <TIM_SlaveTimer_SetConfig+0xfe>
 8001a9e:	bd38      	pop	{r3, r4, r5, pc}
 8001aa0:	2a60      	cmp	r2, #96	; 0x60
 8001aa2:	f000 80a6 	beq.w	8001bf2 <TIM_SlaveTimer_SetConfig+0x1c6>
 8001aa6:	2a70      	cmp	r2, #112	; 0x70
 8001aa8:	f040 8113 	bne.w	8001cd2 <TIM_SlaveTimer_SetConfig+0x2a6>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8001aac:	4a89      	ldr	r2, [pc, #548]	; (8001cd4 <TIM_SlaveTimer_SetConfig+0x2a8>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d00f      	beq.n	8001ad2 <TIM_SlaveTimer_SetConfig+0xa6>
 8001ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ab6:	d00c      	beq.n	8001ad2 <TIM_SlaveTimer_SetConfig+0xa6>
 8001ab8:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d008      	beq.n	8001ad2 <TIM_SlaveTimer_SetConfig+0xa6>
 8001ac0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d004      	beq.n	8001ad2 <TIM_SlaveTimer_SetConfig+0xa6>
 8001ac8:	f241 3159 	movw	r1, #4953	; 0x1359
 8001acc:	4882      	ldr	r0, [pc, #520]	; (8001cd8 <TIM_SlaveTimer_SetConfig+0x2ac>)
 8001ace:	f001 fa2b 	bl	8002f28 <assert_failed>
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
 8001ad2:	68e3      	ldr	r3, [r4, #12]
 8001ad4:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 8001ad8:	d004      	beq.n	8001ae4 <TIM_SlaveTimer_SetConfig+0xb8>
 8001ada:	f241 315a 	movw	r1, #4954	; 0x135a
 8001ade:	487e      	ldr	r0, [pc, #504]	; (8001cd8 <TIM_SlaveTimer_SetConfig+0x2ac>)
 8001ae0:	f001 fa22 	bl	8002f28 <assert_failed>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 8001ae4:	68a3      	ldr	r3, [r4, #8]
 8001ae6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001aea:	d009      	beq.n	8001b00 <TIM_SlaveTimer_SetConfig+0xd4>
 8001aec:	f033 0202 	bics.w	r2, r3, #2
 8001af0:	d006      	beq.n	8001b00 <TIM_SlaveTimer_SetConfig+0xd4>
 8001af2:	2b0a      	cmp	r3, #10
 8001af4:	d004      	beq.n	8001b00 <TIM_SlaveTimer_SetConfig+0xd4>
 8001af6:	f241 315b 	movw	r1, #4955	; 0x135b
 8001afa:	4877      	ldr	r0, [pc, #476]	; (8001cd8 <TIM_SlaveTimer_SetConfig+0x2ac>)
 8001afc:	f001 fa14 	bl	8002f28 <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 8001b00:	6923      	ldr	r3, [r4, #16]
 8001b02:	2b0f      	cmp	r3, #15
 8001b04:	d904      	bls.n	8001b10 <TIM_SlaveTimer_SetConfig+0xe4>
 8001b06:	f241 315c 	movw	r1, #4956	; 0x135c
 8001b0a:	4873      	ldr	r0, [pc, #460]	; (8001cd8 <TIM_SlaveTimer_SetConfig+0x2ac>)
 8001b0c:	f001 fa0c 	bl	8002f28 <assert_failed>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001b10:	68a0      	ldr	r0, [r4, #8]
      TIM_ETR_SetConfig(htim->Instance,
 8001b12:	6829      	ldr	r1, [r5, #0]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001b14:	68e3      	ldr	r3, [r4, #12]
  tmpsmcr = TIMx->SMCR;
 8001b16:	688a      	ldr	r2, [r1, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001b18:	4303      	orrs	r3, r0
 8001b1a:	6920      	ldr	r0, [r4, #16]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001b1c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001b20:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001b24:	4313      	orrs	r3, r2

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001b26:	608b      	str	r3, [r1, #8]
 8001b28:	bd38      	pop	{r3, r4, r5, pc}
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8001b2a:	4a6a      	ldr	r2, [pc, #424]	; (8001cd4 <TIM_SlaveTimer_SetConfig+0x2a8>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d00f      	beq.n	8001b50 <TIM_SlaveTimer_SetConfig+0x124>
 8001b30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b34:	d00c      	beq.n	8001b50 <TIM_SlaveTimer_SetConfig+0x124>
 8001b36:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d008      	beq.n	8001b50 <TIM_SlaveTimer_SetConfig+0x124>
 8001b3e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d004      	beq.n	8001b50 <TIM_SlaveTimer_SetConfig+0x124>
 8001b46:	f241 3168 	movw	r1, #4968	; 0x1368
 8001b4a:	4863      	ldr	r0, [pc, #396]	; (8001cd8 <TIM_SlaveTimer_SetConfig+0x2ac>)
 8001b4c:	f001 f9ec 	bl	8002f28 <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 8001b50:	6923      	ldr	r3, [r4, #16]
 8001b52:	2b0f      	cmp	r3, #15
 8001b54:	d904      	bls.n	8001b60 <TIM_SlaveTimer_SetConfig+0x134>
 8001b56:	f241 3169 	movw	r1, #4969	; 0x1369
 8001b5a:	485f      	ldr	r0, [pc, #380]	; (8001cd8 <TIM_SlaveTimer_SetConfig+0x2ac>)
 8001b5c:	f001 f9e4 	bl	8002f28 <assert_failed>
      tmpccer = htim->Instance->CCER;
 8001b60:	682b      	ldr	r3, [r5, #0]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8001b62:	6920      	ldr	r0, [r4, #16]
      tmpccer = htim->Instance->CCER;
 8001b64:	6a19      	ldr	r1, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8001b66:	6a1a      	ldr	r2, [r3, #32]
 8001b68:	f022 0201 	bic.w	r2, r2, #1
 8001b6c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8001b6e:	699a      	ldr	r2, [r3, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001b70:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8001b74:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001b78:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001b7a:	6219      	str	r1, [r3, #32]
 8001b7c:	bd38      	pop	{r3, r4, r5, pc}
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8001b7e:	4a55      	ldr	r2, [pc, #340]	; (8001cd4 <TIM_SlaveTimer_SetConfig+0x2a8>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d00f      	beq.n	8001ba4 <TIM_SlaveTimer_SetConfig+0x178>
 8001b84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b88:	d00c      	beq.n	8001ba4 <TIM_SlaveTimer_SetConfig+0x178>
 8001b8a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d008      	beq.n	8001ba4 <TIM_SlaveTimer_SetConfig+0x178>
 8001b92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d004      	beq.n	8001ba4 <TIM_SlaveTimer_SetConfig+0x178>
 8001b9a:	f241 317e 	movw	r1, #4990	; 0x137e
 8001b9e:	484e      	ldr	r0, [pc, #312]	; (8001cd8 <TIM_SlaveTimer_SetConfig+0x2ac>)
 8001ba0:	f001 f9c2 	bl	8002f28 <assert_failed>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 8001ba4:	68a3      	ldr	r3, [r4, #8]
 8001ba6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001baa:	d009      	beq.n	8001bc0 <TIM_SlaveTimer_SetConfig+0x194>
 8001bac:	f033 0202 	bics.w	r2, r3, #2
 8001bb0:	d006      	beq.n	8001bc0 <TIM_SlaveTimer_SetConfig+0x194>
 8001bb2:	2b0a      	cmp	r3, #10
 8001bb4:	d004      	beq.n	8001bc0 <TIM_SlaveTimer_SetConfig+0x194>
 8001bb6:	f241 317f 	movw	r1, #4991	; 0x137f
 8001bba:	4847      	ldr	r0, [pc, #284]	; (8001cd8 <TIM_SlaveTimer_SetConfig+0x2ac>)
 8001bbc:	f001 f9b4 	bl	8002f28 <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 8001bc0:	6923      	ldr	r3, [r4, #16]
 8001bc2:	2b0f      	cmp	r3, #15
 8001bc4:	d904      	bls.n	8001bd0 <TIM_SlaveTimer_SetConfig+0x1a4>
 8001bc6:	f44f 519c 	mov.w	r1, #4992	; 0x1380
 8001bca:	4843      	ldr	r0, [pc, #268]	; (8001cd8 <TIM_SlaveTimer_SetConfig+0x2ac>)
 8001bcc:	f001 f9ac 	bl	8002f28 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001bd0:	682b      	ldr	r3, [r5, #0]
 8001bd2:	68a1      	ldr	r1, [r4, #8]
  tmpccer = TIMx->CCER;
 8001bd4:	6a18      	ldr	r0, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001bd6:	6925      	ldr	r5, [r4, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001bd8:	6a1c      	ldr	r4, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001bda:	f020 000a 	bic.w	r0, r0, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001bde:	f024 0401 	bic.w	r4, r4, #1
 8001be2:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001be4:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8001be6:	4301      	orrs	r1, r0
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001be8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001bec:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8001bf0:	e7c2      	b.n	8001b78 <TIM_SlaveTimer_SetConfig+0x14c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8001bf2:	4a38      	ldr	r2, [pc, #224]	; (8001cd4 <TIM_SlaveTimer_SetConfig+0x2a8>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d00f      	beq.n	8001c18 <TIM_SlaveTimer_SetConfig+0x1ec>
 8001bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bfc:	d00c      	beq.n	8001c18 <TIM_SlaveTimer_SetConfig+0x1ec>
 8001bfe:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d008      	beq.n	8001c18 <TIM_SlaveTimer_SetConfig+0x1ec>
 8001c06:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d004      	beq.n	8001c18 <TIM_SlaveTimer_SetConfig+0x1ec>
 8001c0e:	f241 318c 	movw	r1, #5004	; 0x138c
 8001c12:	4831      	ldr	r0, [pc, #196]	; (8001cd8 <TIM_SlaveTimer_SetConfig+0x2ac>)
 8001c14:	f001 f988 	bl	8002f28 <assert_failed>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 8001c18:	68a3      	ldr	r3, [r4, #8]
 8001c1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c1e:	d009      	beq.n	8001c34 <TIM_SlaveTimer_SetConfig+0x208>
 8001c20:	f033 0202 	bics.w	r2, r3, #2
 8001c24:	d006      	beq.n	8001c34 <TIM_SlaveTimer_SetConfig+0x208>
 8001c26:	2b0a      	cmp	r3, #10
 8001c28:	d004      	beq.n	8001c34 <TIM_SlaveTimer_SetConfig+0x208>
 8001c2a:	f241 318d 	movw	r1, #5005	; 0x138d
 8001c2e:	482a      	ldr	r0, [pc, #168]	; (8001cd8 <TIM_SlaveTimer_SetConfig+0x2ac>)
 8001c30:	f001 f97a 	bl	8002f28 <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 8001c34:	6923      	ldr	r3, [r4, #16]
 8001c36:	2b0f      	cmp	r3, #15
 8001c38:	d904      	bls.n	8001c44 <TIM_SlaveTimer_SetConfig+0x218>
 8001c3a:	f241 318e 	movw	r1, #5006	; 0x138e
 8001c3e:	4826      	ldr	r0, [pc, #152]	; (8001cd8 <TIM_SlaveTimer_SetConfig+0x2ac>)
 8001c40:	f001 f972 	bl	8002f28 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001c44:	682b      	ldr	r3, [r5, #0]
 8001c46:	68a5      	ldr	r5, [r4, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001c48:	6a18      	ldr	r0, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001c4a:	6924      	ldr	r4, [r4, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001c4c:	f020 0010 	bic.w	r0, r0, #16
 8001c50:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c52:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8001c54:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001c56:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001c5a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001c5e:	ea41 3104 	orr.w	r1, r1, r4, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8001c62:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8001c66:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8001c68:	621a      	str	r2, [r3, #32]
 8001c6a:	bd38      	pop	{r3, r4, r5, pc}
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8001c6c:	4a19      	ldr	r2, [pc, #100]	; (8001cd4 <TIM_SlaveTimer_SetConfig+0x2a8>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d02f      	beq.n	8001cd2 <TIM_SlaveTimer_SetConfig+0x2a6>
 8001c72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c76:	d02c      	beq.n	8001cd2 <TIM_SlaveTimer_SetConfig+0x2a6>
 8001c78:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d028      	beq.n	8001cd2 <TIM_SlaveTimer_SetConfig+0x2a6>
 8001c80:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d024      	beq.n	8001cd2 <TIM_SlaveTimer_SetConfig+0x2a6>
 8001c88:	f241 31a1 	movw	r1, #5025	; 0x13a1
 8001c8c:	e6fd      	b.n	8001a8a <TIM_SlaveTimer_SetConfig+0x5e>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8001c8e:	4a11      	ldr	r2, [pc, #68]	; (8001cd4 <TIM_SlaveTimer_SetConfig+0x2a8>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d01e      	beq.n	8001cd2 <TIM_SlaveTimer_SetConfig+0x2a6>
 8001c94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c98:	d01b      	beq.n	8001cd2 <TIM_SlaveTimer_SetConfig+0x2a6>
 8001c9a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d017      	beq.n	8001cd2 <TIM_SlaveTimer_SetConfig+0x2a6>
 8001ca2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d013      	beq.n	8001cd2 <TIM_SlaveTimer_SetConfig+0x2a6>
 8001caa:	f241 31a8 	movw	r1, #5032	; 0x13a8
 8001cae:	e6ec      	b.n	8001a8a <TIM_SlaveTimer_SetConfig+0x5e>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8001cb0:	4a08      	ldr	r2, [pc, #32]	; (8001cd4 <TIM_SlaveTimer_SetConfig+0x2a8>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d00d      	beq.n	8001cd2 <TIM_SlaveTimer_SetConfig+0x2a6>
 8001cb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cba:	d00a      	beq.n	8001cd2 <TIM_SlaveTimer_SetConfig+0x2a6>
 8001cbc:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d006      	beq.n	8001cd2 <TIM_SlaveTimer_SetConfig+0x2a6>
 8001cc4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d002      	beq.n	8001cd2 <TIM_SlaveTimer_SetConfig+0x2a6>
 8001ccc:	f241 31af 	movw	r1, #5039	; 0x13af
 8001cd0:	e6db      	b.n	8001a8a <TIM_SlaveTimer_SetConfig+0x5e>
 8001cd2:	bd38      	pop	{r3, r4, r5, pc}
 8001cd4:	40012c00 	.word	0x40012c00
 8001cd8:	0800542c 	.word	0x0800542c

08001cdc <HAL_TIM_Base_DeInit>:
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8001cdc:	6803      	ldr	r3, [r0, #0]
 8001cde:	4a17      	ldr	r2, [pc, #92]	; (8001d3c <HAL_TIM_Base_DeInit+0x60>)
{
 8001ce0:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8001ce2:	4293      	cmp	r3, r2
{
 8001ce4:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8001ce6:	d00e      	beq.n	8001d06 <HAL_TIM_Base_DeInit+0x2a>
 8001ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cec:	d00b      	beq.n	8001d06 <HAL_TIM_Base_DeInit+0x2a>
 8001cee:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d007      	beq.n	8001d06 <HAL_TIM_Base_DeInit+0x2a>
 8001cf6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d003      	beq.n	8001d06 <HAL_TIM_Base_DeInit+0x2a>
 8001cfe:	21fb      	movs	r1, #251	; 0xfb
 8001d00:	480f      	ldr	r0, [pc, #60]	; (8001d40 <HAL_TIM_Base_DeInit+0x64>)
 8001d02:	f001 f911 	bl	8002f28 <assert_failed>
  htim->State = HAL_TIM_STATE_BUSY;
 8001d06:	2302      	movs	r3, #2
  __HAL_TIM_DISABLE(htim);
 8001d08:	f241 1211 	movw	r2, #4369	; 0x1111
  htim->State = HAL_TIM_STATE_BUSY;
 8001d0c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_TIM_DISABLE(htim);
 8001d10:	6823      	ldr	r3, [r4, #0]
 8001d12:	6a19      	ldr	r1, [r3, #32]
 8001d14:	4211      	tst	r1, r2
 8001d16:	d108      	bne.n	8001d2a <HAL_TIM_Base_DeInit+0x4e>
 8001d18:	f240 4244 	movw	r2, #1092	; 0x444
 8001d1c:	6a19      	ldr	r1, [r3, #32]
 8001d1e:	4211      	tst	r1, r2
 8001d20:	bf02      	ittt	eq
 8001d22:	681a      	ldreq	r2, [r3, #0]
 8001d24:	f022 0201 	biceq.w	r2, r2, #1
 8001d28:	601a      	streq	r2, [r3, #0]
  HAL_TIM_Base_MspDeInit(htim);
 8001d2a:	4620      	mov	r0, r4
 8001d2c:	f001 f980 	bl	8003030 <HAL_TIM_Base_MspDeInit>
  htim->State = HAL_TIM_STATE_RESET;
 8001d30:	2000      	movs	r0, #0
 8001d32:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001d36:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001d3a:	bd10      	pop	{r4, pc}
 8001d3c:	40012c00 	.word	0x40012c00
 8001d40:	0800542c 	.word	0x0800542c

08001d44 <HAL_TIM_Base_Start>:
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8001d44:	6803      	ldr	r3, [r0, #0]
 8001d46:	4a11      	ldr	r2, [pc, #68]	; (8001d8c <HAL_TIM_Base_Start+0x48>)
{
 8001d48:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8001d4a:	4293      	cmp	r3, r2
{
 8001d4c:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8001d4e:	d00f      	beq.n	8001d70 <HAL_TIM_Base_Start+0x2c>
 8001d50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d54:	d00c      	beq.n	8001d70 <HAL_TIM_Base_Start+0x2c>
 8001d56:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d008      	beq.n	8001d70 <HAL_TIM_Base_Start+0x2c>
 8001d5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d004      	beq.n	8001d70 <HAL_TIM_Base_Start+0x2c>
 8001d66:	f240 1133 	movw	r1, #307	; 0x133
 8001d6a:	4809      	ldr	r0, [pc, #36]	; (8001d90 <HAL_TIM_Base_Start+0x4c>)
 8001d6c:	f001 f8dc 	bl	8002f28 <assert_failed>
  htim->State= HAL_TIM_STATE_BUSY;
 8001d70:	2302      	movs	r3, #2
  __HAL_TIM_ENABLE(htim);
 8001d72:	6822      	ldr	r2, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8001d74:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_TIM_ENABLE(htim);
 8001d78:	6813      	ldr	r3, [r2, #0]
}
 8001d7a:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 8001d7c:	f043 0301 	orr.w	r3, r3, #1
 8001d80:	6013      	str	r3, [r2, #0]
  htim->State= HAL_TIM_STATE_READY;
 8001d82:	2301      	movs	r3, #1
 8001d84:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8001d88:	bd10      	pop	{r4, pc}
 8001d8a:	bf00      	nop
 8001d8c:	40012c00 	.word	0x40012c00
 8001d90:	0800542c 	.word	0x0800542c

08001d94 <HAL_TIM_Base_Stop>:
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8001d94:	6803      	ldr	r3, [r0, #0]
 8001d96:	4a16      	ldr	r2, [pc, #88]	; (8001df0 <HAL_TIM_Base_Stop+0x5c>)
{
 8001d98:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8001d9a:	4293      	cmp	r3, r2
{
 8001d9c:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8001d9e:	d00f      	beq.n	8001dc0 <HAL_TIM_Base_Stop+0x2c>
 8001da0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001da4:	d00c      	beq.n	8001dc0 <HAL_TIM_Base_Stop+0x2c>
 8001da6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d008      	beq.n	8001dc0 <HAL_TIM_Base_Stop+0x2c>
 8001dae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d004      	beq.n	8001dc0 <HAL_TIM_Base_Stop+0x2c>
 8001db6:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8001dba:	480e      	ldr	r0, [pc, #56]	; (8001df4 <HAL_TIM_Base_Stop+0x60>)
 8001dbc:	f001 f8b4 	bl	8002f28 <assert_failed>
  htim->State= HAL_TIM_STATE_BUSY;
 8001dc0:	2302      	movs	r3, #2
  __HAL_TIM_DISABLE(htim);
 8001dc2:	f241 1211 	movw	r2, #4369	; 0x1111
  htim->State= HAL_TIM_STATE_BUSY;
 8001dc6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_TIM_DISABLE(htim);
 8001dca:	6823      	ldr	r3, [r4, #0]
 8001dcc:	6a19      	ldr	r1, [r3, #32]
 8001dce:	4211      	tst	r1, r2
 8001dd0:	d108      	bne.n	8001de4 <HAL_TIM_Base_Stop+0x50>
 8001dd2:	f240 4244 	movw	r2, #1092	; 0x444
 8001dd6:	6a19      	ldr	r1, [r3, #32]
 8001dd8:	4211      	tst	r1, r2
 8001dda:	bf02      	ittt	eq
 8001ddc:	681a      	ldreq	r2, [r3, #0]
 8001dde:	f022 0201 	biceq.w	r2, r2, #1
 8001de2:	601a      	streq	r2, [r3, #0]
  htim->State= HAL_TIM_STATE_READY;
 8001de4:	2301      	movs	r3, #1
}
 8001de6:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8001de8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8001dec:	bd10      	pop	{r4, pc}
 8001dee:	bf00      	nop
 8001df0:	40012c00 	.word	0x40012c00
 8001df4:	0800542c 	.word	0x0800542c

08001df8 <HAL_TIM_Base_Start_IT>:
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8001df8:	6803      	ldr	r3, [r0, #0]
 8001dfa:	4a10      	ldr	r2, [pc, #64]	; (8001e3c <HAL_TIM_Base_Start_IT+0x44>)
{
 8001dfc:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8001dfe:	4293      	cmp	r3, r2
{
 8001e00:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8001e02:	d00f      	beq.n	8001e24 <HAL_TIM_Base_Start_IT+0x2c>
 8001e04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e08:	d00c      	beq.n	8001e24 <HAL_TIM_Base_Start_IT+0x2c>
 8001e0a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d008      	beq.n	8001e24 <HAL_TIM_Base_Start_IT+0x2c>
 8001e12:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d004      	beq.n	8001e24 <HAL_TIM_Base_Start_IT+0x2c>
 8001e1a:	f240 1161 	movw	r1, #353	; 0x161
 8001e1e:	4808      	ldr	r0, [pc, #32]	; (8001e40 <HAL_TIM_Base_Start_IT+0x48>)
 8001e20:	f001 f882 	bl	8002f28 <assert_failed>
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e24:	6823      	ldr	r3, [r4, #0]
}
 8001e26:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e28:	68da      	ldr	r2, [r3, #12]
 8001e2a:	f042 0201 	orr.w	r2, r2, #1
 8001e2e:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	f042 0201 	orr.w	r2, r2, #1
 8001e36:	601a      	str	r2, [r3, #0]
}
 8001e38:	bd10      	pop	{r4, pc}
 8001e3a:	bf00      	nop
 8001e3c:	40012c00 	.word	0x40012c00
 8001e40:	0800542c 	.word	0x0800542c

08001e44 <HAL_TIM_OnePulse_MspInit>:
 8001e44:	4770      	bx	lr
	...

08001e48 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001e48:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001e4c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8001e4e:	2b01      	cmp	r3, #1
{
 8001e50:	4605      	mov	r5, r0
 8001e52:	460c      	mov	r4, r1
 8001e54:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001e58:	d02e      	beq.n	8001eb8 <HAL_TIM_ConfigClockSource+0x70>
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8001e60:	680b      	ldr	r3, [r1, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001e62:	f885 003d 	strb.w	r0, [r5, #61]	; 0x3d
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8001e66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e6a:	d00c      	beq.n	8001e86 <HAL_TIM_ConfigClockSource+0x3e>
 8001e6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e70:	d009      	beq.n	8001e86 <HAL_TIM_ConfigClockSource+0x3e>
 8001e72:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 8001e76:	d006      	beq.n	8001e86 <HAL_TIM_ConfigClockSource+0x3e>
 8001e78:	2b40      	cmp	r3, #64	; 0x40
 8001e7a:	d004      	beq.n	8001e86 <HAL_TIM_ConfigClockSource+0x3e>
 8001e7c:	f640 7171 	movw	r1, #3953	; 0xf71
 8001e80:	48b5      	ldr	r0, [pc, #724]	; (8002158 <HAL_TIM_ConfigClockSource+0x310>)
 8001e82:	f001 f851 	bl	8002f28 <assert_failed>
  tmpsmcr = htim->Instance->SMCR;
 8001e86:	682b      	ldr	r3, [r5, #0]
 8001e88:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e8a:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001e8e:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001e92:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8001e94:	6822      	ldr	r2, [r4, #0]
 8001e96:	2a40      	cmp	r2, #64	; 0x40
 8001e98:	f000 8162 	beq.w	8002160 <HAL_TIM_ConfigClockSource+0x318>
 8001e9c:	d82c      	bhi.n	8001ef8 <HAL_TIM_ConfigClockSource+0xb0>
 8001e9e:	2a10      	cmp	r2, #16
 8001ea0:	f000 81b9 	beq.w	8002216 <HAL_TIM_ConfigClockSource+0x3ce>
 8001ea4:	d809      	bhi.n	8001eba <HAL_TIM_ConfigClockSource+0x72>
 8001ea6:	2a00      	cmp	r2, #0
 8001ea8:	f000 819b 	beq.w	80021e2 <HAL_TIM_ConfigClockSource+0x39a>
  htim->State = HAL_TIM_STATE_READY;
 8001eac:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001eae:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001eb0:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001eb4:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
}
 8001eb8:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001eba:	2a20      	cmp	r2, #32
 8001ebc:	f000 81c5 	beq.w	800224a <HAL_TIM_ConfigClockSource+0x402>
 8001ec0:	2a30      	cmp	r2, #48	; 0x30
 8001ec2:	d1f3      	bne.n	8001eac <HAL_TIM_ConfigClockSource+0x64>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8001ec4:	4aa5      	ldr	r2, [pc, #660]	; (800215c <HAL_TIM_ConfigClockSource+0x314>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d00f      	beq.n	8001eea <HAL_TIM_ConfigClockSource+0xa2>
 8001eca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ece:	d00c      	beq.n	8001eea <HAL_TIM_ConfigClockSource+0xa2>
 8001ed0:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d008      	beq.n	8001eea <HAL_TIM_ConfigClockSource+0xa2>
 8001ed8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d004      	beq.n	8001eea <HAL_TIM_ConfigClockSource+0xa2>
 8001ee0:	f640 71f9 	movw	r1, #4089	; 0xff9
 8001ee4:	489c      	ldr	r0, [pc, #624]	; (8002158 <HAL_TIM_ConfigClockSource+0x310>)
 8001ee6:	f001 f81f 	bl	8002f28 <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8001eea:	682a      	ldr	r2, [r5, #0]
   tmpsmcr = TIMx->SMCR;
 8001eec:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001eee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001ef2:	f043 0337 	orr.w	r3, r3, #55	; 0x37
 8001ef6:	e0a9      	b.n	800204c <HAL_TIM_ConfigClockSource+0x204>
  switch (sClockSourceConfig->ClockSource)
 8001ef8:	2a70      	cmp	r2, #112	; 0x70
 8001efa:	f000 80a9 	beq.w	8002050 <HAL_TIM_ConfigClockSource+0x208>
 8001efe:	d846      	bhi.n	8001f8e <HAL_TIM_ConfigClockSource+0x146>
 8001f00:	2a50      	cmp	r2, #80	; 0x50
 8001f02:	f000 80e7 	beq.w	80020d4 <HAL_TIM_ConfigClockSource+0x28c>
 8001f06:	2a60      	cmp	r2, #96	; 0x60
 8001f08:	d1d0      	bne.n	8001eac <HAL_TIM_ConfigClockSource+0x64>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8001f0a:	4a94      	ldr	r2, [pc, #592]	; (800215c <HAL_TIM_ConfigClockSource+0x314>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d00f      	beq.n	8001f30 <HAL_TIM_ConfigClockSource+0xe8>
 8001f10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f14:	d00c      	beq.n	8001f30 <HAL_TIM_ConfigClockSource+0xe8>
 8001f16:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d008      	beq.n	8001f30 <HAL_TIM_ConfigClockSource+0xe8>
 8001f1e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d004      	beq.n	8001f30 <HAL_TIM_ConfigClockSource+0xe8>
 8001f26:	f640 71c3 	movw	r1, #4035	; 0xfc3
 8001f2a:	488b      	ldr	r0, [pc, #556]	; (8002158 <HAL_TIM_ConfigClockSource+0x310>)
 8001f2c:	f000 fffc 	bl	8002f28 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8001f30:	6863      	ldr	r3, [r4, #4]
 8001f32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f36:	d009      	beq.n	8001f4c <HAL_TIM_ConfigClockSource+0x104>
 8001f38:	f033 0202 	bics.w	r2, r3, #2
 8001f3c:	d006      	beq.n	8001f4c <HAL_TIM_ConfigClockSource+0x104>
 8001f3e:	2b0a      	cmp	r3, #10
 8001f40:	d004      	beq.n	8001f4c <HAL_TIM_ConfigClockSource+0x104>
 8001f42:	f640 71c6 	movw	r1, #4038	; 0xfc6
 8001f46:	4884      	ldr	r0, [pc, #528]	; (8002158 <HAL_TIM_ConfigClockSource+0x310>)
 8001f48:	f000 ffee 	bl	8002f28 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8001f4c:	68e3      	ldr	r3, [r4, #12]
 8001f4e:	2b0f      	cmp	r3, #15
 8001f50:	d904      	bls.n	8001f5c <HAL_TIM_ConfigClockSource+0x114>
 8001f52:	f640 71c7 	movw	r1, #4039	; 0xfc7
 8001f56:	4880      	ldr	r0, [pc, #512]	; (8002158 <HAL_TIM_ConfigClockSource+0x310>)
 8001f58:	f000 ffe6 	bl	8002f28 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f5c:	682b      	ldr	r3, [r5, #0]
 8001f5e:	6866      	ldr	r6, [r4, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f60:	6a18      	ldr	r0, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f62:	68e4      	ldr	r4, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f64:	f020 0010 	bic.w	r0, r0, #16
 8001f68:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f6a:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8001f6c:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001f6e:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001f72:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001f76:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001f7a:	ea41 3104 	orr.w	r1, r1, r4, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8001f7e:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8001f80:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001f82:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001f84:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001f88:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8001f8c:	e0e2      	b.n	8002154 <HAL_TIM_ConfigClockSource+0x30c>
  switch (sClockSourceConfig->ClockSource)
 8001f8e:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001f92:	d044      	beq.n	800201e <HAL_TIM_ConfigClockSource+0x1d6>
 8001f94:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001f98:	d188      	bne.n	8001eac <HAL_TIM_ConfigClockSource+0x64>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8001f9a:	4a70      	ldr	r2, [pc, #448]	; (800215c <HAL_TIM_ConfigClockSource+0x314>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d00f      	beq.n	8001fc0 <HAL_TIM_ConfigClockSource+0x178>
 8001fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fa4:	d00c      	beq.n	8001fc0 <HAL_TIM_ConfigClockSource+0x178>
 8001fa6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d008      	beq.n	8001fc0 <HAL_TIM_ConfigClockSource+0x178>
 8001fae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d004      	beq.n	8001fc0 <HAL_TIM_ConfigClockSource+0x178>
 8001fb6:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8001fba:	4867      	ldr	r0, [pc, #412]	; (8002158 <HAL_TIM_ConfigClockSource+0x310>)
 8001fbc:	f000 ffb4 	bl	8002f28 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8001fc0:	68a3      	ldr	r3, [r4, #8]
 8001fc2:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 8001fc6:	d004      	beq.n	8001fd2 <HAL_TIM_ConfigClockSource+0x18a>
 8001fc8:	f640 71a3 	movw	r1, #4003	; 0xfa3
 8001fcc:	4862      	ldr	r0, [pc, #392]	; (8002158 <HAL_TIM_ConfigClockSource+0x310>)
 8001fce:	f000 ffab 	bl	8002f28 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8001fd2:	6863      	ldr	r3, [r4, #4]
 8001fd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fd8:	d009      	beq.n	8001fee <HAL_TIM_ConfigClockSource+0x1a6>
 8001fda:	f033 0202 	bics.w	r2, r3, #2
 8001fde:	d006      	beq.n	8001fee <HAL_TIM_ConfigClockSource+0x1a6>
 8001fe0:	2b0a      	cmp	r3, #10
 8001fe2:	d004      	beq.n	8001fee <HAL_TIM_ConfigClockSource+0x1a6>
 8001fe4:	f640 71a4 	movw	r1, #4004	; 0xfa4
 8001fe8:	485b      	ldr	r0, [pc, #364]	; (8002158 <HAL_TIM_ConfigClockSource+0x310>)
 8001fea:	f000 ff9d 	bl	8002f28 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8001fee:	68e3      	ldr	r3, [r4, #12]
 8001ff0:	2b0f      	cmp	r3, #15
 8001ff2:	d904      	bls.n	8001ffe <HAL_TIM_ConfigClockSource+0x1b6>
 8001ff4:	f640 71a5 	movw	r1, #4005	; 0xfa5
 8001ff8:	4857      	ldr	r0, [pc, #348]	; (8002158 <HAL_TIM_ConfigClockSource+0x310>)
 8001ffa:	f000 ff95 	bl	8002f28 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8001ffe:	682a      	ldr	r2, [r5, #0]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002000:	6860      	ldr	r0, [r4, #4]
 8002002:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr = TIMx->SMCR;
 8002004:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002006:	4303      	orrs	r3, r0
 8002008:	68e0      	ldr	r0, [r4, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800200a:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800200e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8002012:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8002014:	6093      	str	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002016:	6893      	ldr	r3, [r2, #8]
 8002018:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800201c:	e016      	b.n	800204c <HAL_TIM_ConfigClockSource+0x204>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800201e:	4a4f      	ldr	r2, [pc, #316]	; (800215c <HAL_TIM_ConfigClockSource+0x314>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d00f      	beq.n	8002044 <HAL_TIM_ConfigClockSource+0x1fc>
 8002024:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002028:	d00c      	beq.n	8002044 <HAL_TIM_ConfigClockSource+0x1fc>
 800202a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800202e:	4293      	cmp	r3, r2
 8002030:	d008      	beq.n	8002044 <HAL_TIM_ConfigClockSource+0x1fc>
 8002032:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002036:	4293      	cmp	r3, r2
 8002038:	d004      	beq.n	8002044 <HAL_TIM_ConfigClockSource+0x1fc>
 800203a:	f640 717d 	movw	r1, #3965	; 0xf7d
 800203e:	4846      	ldr	r0, [pc, #280]	; (8002158 <HAL_TIM_ConfigClockSource+0x310>)
 8002040:	f000 ff72 	bl	8002f28 <assert_failed>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002044:	682a      	ldr	r2, [r5, #0]
 8002046:	6893      	ldr	r3, [r2, #8]
 8002048:	f023 0307 	bic.w	r3, r3, #7
   TIMx->SMCR = tmpsmcr;
 800204c:	6093      	str	r3, [r2, #8]
 800204e:	e72d      	b.n	8001eac <HAL_TIM_ConfigClockSource+0x64>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8002050:	4a42      	ldr	r2, [pc, #264]	; (800215c <HAL_TIM_ConfigClockSource+0x314>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d00f      	beq.n	8002076 <HAL_TIM_ConfigClockSource+0x22e>
 8002056:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800205a:	d00c      	beq.n	8002076 <HAL_TIM_ConfigClockSource+0x22e>
 800205c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002060:	4293      	cmp	r3, r2
 8002062:	d008      	beq.n	8002076 <HAL_TIM_ConfigClockSource+0x22e>
 8002064:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002068:	4293      	cmp	r3, r2
 800206a:	d004      	beq.n	8002076 <HAL_TIM_ConfigClockSource+0x22e>
 800206c:	f640 7186 	movw	r1, #3974	; 0xf86
 8002070:	4839      	ldr	r0, [pc, #228]	; (8002158 <HAL_TIM_ConfigClockSource+0x310>)
 8002072:	f000 ff59 	bl	8002f28 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8002076:	68a3      	ldr	r3, [r4, #8]
 8002078:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800207c:	d004      	beq.n	8002088 <HAL_TIM_ConfigClockSource+0x240>
 800207e:	f640 7189 	movw	r1, #3977	; 0xf89
 8002082:	4835      	ldr	r0, [pc, #212]	; (8002158 <HAL_TIM_ConfigClockSource+0x310>)
 8002084:	f000 ff50 	bl	8002f28 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8002088:	6863      	ldr	r3, [r4, #4]
 800208a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800208e:	d009      	beq.n	80020a4 <HAL_TIM_ConfigClockSource+0x25c>
 8002090:	f033 0202 	bics.w	r2, r3, #2
 8002094:	d006      	beq.n	80020a4 <HAL_TIM_ConfigClockSource+0x25c>
 8002096:	2b0a      	cmp	r3, #10
 8002098:	d004      	beq.n	80020a4 <HAL_TIM_ConfigClockSource+0x25c>
 800209a:	f640 718a 	movw	r1, #3978	; 0xf8a
 800209e:	482e      	ldr	r0, [pc, #184]	; (8002158 <HAL_TIM_ConfigClockSource+0x310>)
 80020a0:	f000 ff42 	bl	8002f28 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80020a4:	68e3      	ldr	r3, [r4, #12]
 80020a6:	2b0f      	cmp	r3, #15
 80020a8:	d904      	bls.n	80020b4 <HAL_TIM_ConfigClockSource+0x26c>
 80020aa:	f640 718b 	movw	r1, #3979	; 0xf8b
 80020ae:	482a      	ldr	r0, [pc, #168]	; (8002158 <HAL_TIM_ConfigClockSource+0x310>)
 80020b0:	f000 ff3a 	bl	8002f28 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 80020b4:	682a      	ldr	r2, [r5, #0]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80020b6:	6860      	ldr	r0, [r4, #4]
 80020b8:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr = TIMx->SMCR;
 80020ba:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80020bc:	4303      	orrs	r3, r0
 80020be:	68e0      	ldr	r0, [r4, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020c0:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80020c4:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80020c8:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 80020ca:	6093      	str	r3, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 80020cc:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80020ce:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80020d2:	e7bb      	b.n	800204c <HAL_TIM_ConfigClockSource+0x204>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80020d4:	4a21      	ldr	r2, [pc, #132]	; (800215c <HAL_TIM_ConfigClockSource+0x314>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d00f      	beq.n	80020fa <HAL_TIM_ConfigClockSource+0x2b2>
 80020da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020de:	d00c      	beq.n	80020fa <HAL_TIM_ConfigClockSource+0x2b2>
 80020e0:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d008      	beq.n	80020fa <HAL_TIM_ConfigClockSource+0x2b2>
 80020e8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d004      	beq.n	80020fa <HAL_TIM_ConfigClockSource+0x2b2>
 80020f0:	f640 71b4 	movw	r1, #4020	; 0xfb4
 80020f4:	4818      	ldr	r0, [pc, #96]	; (8002158 <HAL_TIM_ConfigClockSource+0x310>)
 80020f6:	f000 ff17 	bl	8002f28 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80020fa:	6863      	ldr	r3, [r4, #4]
 80020fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002100:	d009      	beq.n	8002116 <HAL_TIM_ConfigClockSource+0x2ce>
 8002102:	f033 0202 	bics.w	r2, r3, #2
 8002106:	d006      	beq.n	8002116 <HAL_TIM_ConfigClockSource+0x2ce>
 8002108:	2b0a      	cmp	r3, #10
 800210a:	d004      	beq.n	8002116 <HAL_TIM_ConfigClockSource+0x2ce>
 800210c:	f640 71b7 	movw	r1, #4023	; 0xfb7
 8002110:	4811      	ldr	r0, [pc, #68]	; (8002158 <HAL_TIM_ConfigClockSource+0x310>)
 8002112:	f000 ff09 	bl	8002f28 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8002116:	68e3      	ldr	r3, [r4, #12]
 8002118:	2b0f      	cmp	r3, #15
 800211a:	d904      	bls.n	8002126 <HAL_TIM_ConfigClockSource+0x2de>
 800211c:	f640 71b8 	movw	r1, #4024	; 0xfb8
 8002120:	480d      	ldr	r0, [pc, #52]	; (8002158 <HAL_TIM_ConfigClockSource+0x310>)
 8002122:	f000 ff01 	bl	8002f28 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002126:	682b      	ldr	r3, [r5, #0]
 8002128:	6861      	ldr	r1, [r4, #4]
  tmpccer = TIMx->CCER;
 800212a:	6a18      	ldr	r0, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800212c:	68e6      	ldr	r6, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800212e:	6a1c      	ldr	r4, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002130:	f020 000a 	bic.w	r0, r0, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002134:	f024 0401 	bic.w	r4, r4, #1
 8002138:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800213a:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 800213c:	4301      	orrs	r1, r0
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800213e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002142:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002146:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002148:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800214a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800214c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002150:	f042 0257 	orr.w	r2, r2, #87	; 0x57
   TIMx->SMCR = tmpsmcr;
 8002154:	609a      	str	r2, [r3, #8]
 8002156:	e6a9      	b.n	8001eac <HAL_TIM_ConfigClockSource+0x64>
 8002158:	0800542c 	.word	0x0800542c
 800215c:	40012c00 	.word	0x40012c00
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8002160:	4a47      	ldr	r2, [pc, #284]	; (8002280 <HAL_TIM_ConfigClockSource+0x438>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d00f      	beq.n	8002186 <HAL_TIM_ConfigClockSource+0x33e>
 8002166:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800216a:	d00c      	beq.n	8002186 <HAL_TIM_ConfigClockSource+0x33e>
 800216c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002170:	4293      	cmp	r3, r2
 8002172:	d008      	beq.n	8002186 <HAL_TIM_ConfigClockSource+0x33e>
 8002174:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002178:	4293      	cmp	r3, r2
 800217a:	d004      	beq.n	8002186 <HAL_TIM_ConfigClockSource+0x33e>
 800217c:	f640 71d2 	movw	r1, #4050	; 0xfd2
 8002180:	4840      	ldr	r0, [pc, #256]	; (8002284 <HAL_TIM_ConfigClockSource+0x43c>)
 8002182:	f000 fed1 	bl	8002f28 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8002186:	6863      	ldr	r3, [r4, #4]
 8002188:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800218c:	d009      	beq.n	80021a2 <HAL_TIM_ConfigClockSource+0x35a>
 800218e:	f033 0202 	bics.w	r2, r3, #2
 8002192:	d006      	beq.n	80021a2 <HAL_TIM_ConfigClockSource+0x35a>
 8002194:	2b0a      	cmp	r3, #10
 8002196:	d004      	beq.n	80021a2 <HAL_TIM_ConfigClockSource+0x35a>
 8002198:	f640 71d5 	movw	r1, #4053	; 0xfd5
 800219c:	4839      	ldr	r0, [pc, #228]	; (8002284 <HAL_TIM_ConfigClockSource+0x43c>)
 800219e:	f000 fec3 	bl	8002f28 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80021a2:	68e3      	ldr	r3, [r4, #12]
 80021a4:	2b0f      	cmp	r3, #15
 80021a6:	d904      	bls.n	80021b2 <HAL_TIM_ConfigClockSource+0x36a>
 80021a8:	f640 71d6 	movw	r1, #4054	; 0xfd6
 80021ac:	4835      	ldr	r0, [pc, #212]	; (8002284 <HAL_TIM_ConfigClockSource+0x43c>)
 80021ae:	f000 febb 	bl	8002f28 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80021b2:	682b      	ldr	r3, [r5, #0]
 80021b4:	6861      	ldr	r1, [r4, #4]
  tmpccer = TIMx->CCER;
 80021b6:	6a18      	ldr	r0, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80021b8:	68e6      	ldr	r6, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021ba:	6a1c      	ldr	r4, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80021bc:	f020 000a 	bic.w	r0, r0, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021c0:	f024 0401 	bic.w	r4, r4, #1
 80021c4:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021c6:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 80021c8:	4301      	orrs	r1, r0
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80021ca:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80021ce:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80021d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80021d4:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80021d6:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80021d8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80021dc:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 80021e0:	e7b8      	b.n	8002154 <HAL_TIM_ConfigClockSource+0x30c>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 80021e2:	4a27      	ldr	r2, [pc, #156]	; (8002280 <HAL_TIM_ConfigClockSource+0x438>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d00f      	beq.n	8002208 <HAL_TIM_ConfigClockSource+0x3c0>
 80021e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021ec:	d00c      	beq.n	8002208 <HAL_TIM_ConfigClockSource+0x3c0>
 80021ee:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d008      	beq.n	8002208 <HAL_TIM_ConfigClockSource+0x3c0>
 80021f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d004      	beq.n	8002208 <HAL_TIM_ConfigClockSource+0x3c0>
 80021fe:	f640 71e1 	movw	r1, #4065	; 0xfe1
 8002202:	4820      	ldr	r0, [pc, #128]	; (8002284 <HAL_TIM_ConfigClockSource+0x43c>)
 8002204:	f000 fe90 	bl	8002f28 <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8002208:	682a      	ldr	r2, [r5, #0]
   tmpsmcr = TIMx->SMCR;
 800220a:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800220c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002210:	f043 0307 	orr.w	r3, r3, #7
 8002214:	e71a      	b.n	800204c <HAL_TIM_ConfigClockSource+0x204>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8002216:	4a1a      	ldr	r2, [pc, #104]	; (8002280 <HAL_TIM_ConfigClockSource+0x438>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d00f      	beq.n	800223c <HAL_TIM_ConfigClockSource+0x3f4>
 800221c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002220:	d00c      	beq.n	800223c <HAL_TIM_ConfigClockSource+0x3f4>
 8002222:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002226:	4293      	cmp	r3, r2
 8002228:	d008      	beq.n	800223c <HAL_TIM_ConfigClockSource+0x3f4>
 800222a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800222e:	4293      	cmp	r3, r2
 8002230:	d004      	beq.n	800223c <HAL_TIM_ConfigClockSource+0x3f4>
 8002232:	f640 71e9 	movw	r1, #4073	; 0xfe9
 8002236:	4813      	ldr	r0, [pc, #76]	; (8002284 <HAL_TIM_ConfigClockSource+0x43c>)
 8002238:	f000 fe76 	bl	8002f28 <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 800223c:	682a      	ldr	r2, [r5, #0]
   tmpsmcr = TIMx->SMCR;
 800223e:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002240:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002244:	f043 0317 	orr.w	r3, r3, #23
 8002248:	e700      	b.n	800204c <HAL_TIM_ConfigClockSource+0x204>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800224a:	4a0d      	ldr	r2, [pc, #52]	; (8002280 <HAL_TIM_ConfigClockSource+0x438>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d00f      	beq.n	8002270 <HAL_TIM_ConfigClockSource+0x428>
 8002250:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002254:	d00c      	beq.n	8002270 <HAL_TIM_ConfigClockSource+0x428>
 8002256:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800225a:	4293      	cmp	r3, r2
 800225c:	d008      	beq.n	8002270 <HAL_TIM_ConfigClockSource+0x428>
 800225e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002262:	4293      	cmp	r3, r2
 8002264:	d004      	beq.n	8002270 <HAL_TIM_ConfigClockSource+0x428>
 8002266:	f640 71f1 	movw	r1, #4081	; 0xff1
 800226a:	4806      	ldr	r0, [pc, #24]	; (8002284 <HAL_TIM_ConfigClockSource+0x43c>)
 800226c:	f000 fe5c 	bl	8002f28 <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8002270:	682a      	ldr	r2, [r5, #0]
   tmpsmcr = TIMx->SMCR;
 8002272:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002274:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002278:	f043 0327 	orr.w	r3, r3, #39	; 0x27
 800227c:	e6e6      	b.n	800204c <HAL_TIM_ConfigClockSource+0x204>
 800227e:	bf00      	nop
 8002280:	40012c00 	.word	0x40012c00
 8002284:	0800542c 	.word	0x0800542c

08002288 <HAL_TIM_SlaveConfigSynchronization>:
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 8002288:	6803      	ldr	r3, [r0, #0]
 800228a:	4a24      	ldr	r2, [pc, #144]	; (800231c <HAL_TIM_SlaveConfigSynchronization+0x94>)
{
 800228c:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 800228e:	4293      	cmp	r3, r2
{
 8002290:	4604      	mov	r4, r0
 8002292:	460d      	mov	r5, r1
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 8002294:	d00f      	beq.n	80022b6 <HAL_TIM_SlaveConfigSynchronization+0x2e>
 8002296:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800229a:	d00c      	beq.n	80022b6 <HAL_TIM_SlaveConfigSynchronization+0x2e>
 800229c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d008      	beq.n	80022b6 <HAL_TIM_SlaveConfigSynchronization+0x2e>
 80022a4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d004      	beq.n	80022b6 <HAL_TIM_SlaveConfigSynchronization+0x2e>
 80022ac:	f241 0138 	movw	r1, #4152	; 0x1038
 80022b0:	481b      	ldr	r0, [pc, #108]	; (8002320 <HAL_TIM_SlaveConfigSynchronization+0x98>)
 80022b2:	f000 fe39 	bl	8002f28 <assert_failed>
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
 80022b6:	682b      	ldr	r3, [r5, #0]
 80022b8:	b13b      	cbz	r3, 80022ca <HAL_TIM_SlaveConfigSynchronization+0x42>
 80022ba:	3b04      	subs	r3, #4
 80022bc:	2b03      	cmp	r3, #3
 80022be:	d904      	bls.n	80022ca <HAL_TIM_SlaveConfigSynchronization+0x42>
 80022c0:	f241 0139 	movw	r1, #4153	; 0x1039
 80022c4:	4816      	ldr	r0, [pc, #88]	; (8002320 <HAL_TIM_SlaveConfigSynchronization+0x98>)
 80022c6:	f000 fe2f 	bl	8002f28 <assert_failed>
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));
 80022ca:	686b      	ldr	r3, [r5, #4]
 80022cc:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 80022d0:	d006      	beq.n	80022e0 <HAL_TIM_SlaveConfigSynchronization+0x58>
 80022d2:	2b40      	cmp	r3, #64	; 0x40
 80022d4:	d004      	beq.n	80022e0 <HAL_TIM_SlaveConfigSynchronization+0x58>
 80022d6:	f241 013a 	movw	r1, #4154	; 0x103a
 80022da:	4811      	ldr	r0, [pc, #68]	; (8002320 <HAL_TIM_SlaveConfigSynchronization+0x98>)
 80022dc:	f000 fe24 	bl	8002f28 <assert_failed>
  __HAL_LOCK(htim);
 80022e0:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80022e4:	2002      	movs	r0, #2
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d016      	beq.n	8002318 <HAL_TIM_SlaveConfigSynchronization+0x90>
 80022ea:	2601      	movs	r6, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80022ec:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 80022f0:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
  TIM_SlaveTimer_SetConfig(htim, sSlaveConfig);
 80022f4:	4620      	mov	r0, r4
 80022f6:	4629      	mov	r1, r5
 80022f8:	f7ff fb98 	bl	8001a2c <TIM_SlaveTimer_SetConfig>
  __HAL_UNLOCK(htim);
 80022fc:	2000      	movs	r0, #0
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80022fe:	6823      	ldr	r3, [r4, #0]
 8002300:	68da      	ldr	r2, [r3, #12]
 8002302:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002306:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8002308:	68da      	ldr	r2, [r3, #12]
 800230a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800230e:	60da      	str	r2, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 8002310:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002314:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    }
 8002318:	bd70      	pop	{r4, r5, r6, pc}
 800231a:	bf00      	nop
 800231c:	40012c00 	.word	0x40012c00
 8002320:	0800542c 	.word	0x0800542c

08002324 <HAL_TIM_OC_DelayElapsedCallback>:
 8002324:	4770      	bx	lr

08002326 <HAL_TIM_IC_CaptureCallback>:
 8002326:	4770      	bx	lr

08002328 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002328:	4770      	bx	lr

0800232a <HAL_TIM_TriggerCallback>:
 800232a:	4770      	bx	lr

0800232c <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800232c:	6803      	ldr	r3, [r0, #0]
{
 800232e:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002330:	691a      	ldr	r2, [r3, #16]
{
 8002332:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002334:	0791      	lsls	r1, r2, #30
 8002336:	d50e      	bpl.n	8002356 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002338:	68da      	ldr	r2, [r3, #12]
 800233a:	0792      	lsls	r2, r2, #30
 800233c:	d50b      	bpl.n	8002356 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800233e:	f06f 0202 	mvn.w	r2, #2
 8002342:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002344:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002346:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002348:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800234a:	079b      	lsls	r3, r3, #30
 800234c:	d077      	beq.n	800243e <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 800234e:	f7ff ffea 	bl	8002326 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002352:	2300      	movs	r3, #0
 8002354:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002356:	6823      	ldr	r3, [r4, #0]
 8002358:	691a      	ldr	r2, [r3, #16]
 800235a:	0750      	lsls	r0, r2, #29
 800235c:	d510      	bpl.n	8002380 <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800235e:	68da      	ldr	r2, [r3, #12]
 8002360:	0751      	lsls	r1, r2, #29
 8002362:	d50d      	bpl.n	8002380 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002364:	f06f 0204 	mvn.w	r2, #4
 8002368:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800236a:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800236c:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800236e:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002370:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8002374:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002376:	d068      	beq.n	800244a <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8002378:	f7ff ffd5 	bl	8002326 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800237c:	2300      	movs	r3, #0
 800237e:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002380:	6823      	ldr	r3, [r4, #0]
 8002382:	691a      	ldr	r2, [r3, #16]
 8002384:	0712      	lsls	r2, r2, #28
 8002386:	d50f      	bpl.n	80023a8 <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002388:	68da      	ldr	r2, [r3, #12]
 800238a:	0710      	lsls	r0, r2, #28
 800238c:	d50c      	bpl.n	80023a8 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800238e:	f06f 0208 	mvn.w	r2, #8
 8002392:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002394:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002396:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002398:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800239a:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 800239c:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800239e:	d05a      	beq.n	8002456 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80023a0:	f7ff ffc1 	bl	8002326 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023a4:	2300      	movs	r3, #0
 80023a6:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80023a8:	6823      	ldr	r3, [r4, #0]
 80023aa:	691a      	ldr	r2, [r3, #16]
 80023ac:	06d2      	lsls	r2, r2, #27
 80023ae:	d510      	bpl.n	80023d2 <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80023b0:	68da      	ldr	r2, [r3, #12]
 80023b2:	06d0      	lsls	r0, r2, #27
 80023b4:	d50d      	bpl.n	80023d2 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80023b6:	f06f 0210 	mvn.w	r2, #16
 80023ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023bc:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023be:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023c0:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023c2:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80023c6:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023c8:	d04b      	beq.n	8002462 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 80023ca:	f7ff ffac 	bl	8002326 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023ce:	2300      	movs	r3, #0
 80023d0:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80023d2:	6823      	ldr	r3, [r4, #0]
 80023d4:	691a      	ldr	r2, [r3, #16]
 80023d6:	07d1      	lsls	r1, r2, #31
 80023d8:	d508      	bpl.n	80023ec <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80023da:	68da      	ldr	r2, [r3, #12]
 80023dc:	07d2      	lsls	r2, r2, #31
 80023de:	d505      	bpl.n	80023ec <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80023e0:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 80023e4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80023e6:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80023e8:	f000 fb46 	bl	8002a78 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80023ec:	6823      	ldr	r3, [r4, #0]
 80023ee:	691a      	ldr	r2, [r3, #16]
 80023f0:	0610      	lsls	r0, r2, #24
 80023f2:	d508      	bpl.n	8002406 <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80023f4:	68da      	ldr	r2, [r3, #12]
 80023f6:	0611      	lsls	r1, r2, #24
 80023f8:	d505      	bpl.n	8002406 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80023fa:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 80023fe:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002400:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002402:	f000 f97a 	bl	80026fa <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002406:	6823      	ldr	r3, [r4, #0]
 8002408:	691a      	ldr	r2, [r3, #16]
 800240a:	0652      	lsls	r2, r2, #25
 800240c:	d508      	bpl.n	8002420 <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800240e:	68da      	ldr	r2, [r3, #12]
 8002410:	0650      	lsls	r0, r2, #25
 8002412:	d505      	bpl.n	8002420 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002414:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8002418:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800241a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800241c:	f7ff ff85 	bl	800232a <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002420:	6823      	ldr	r3, [r4, #0]
 8002422:	691a      	ldr	r2, [r3, #16]
 8002424:	0691      	lsls	r1, r2, #26
 8002426:	d522      	bpl.n	800246e <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002428:	68da      	ldr	r2, [r3, #12]
 800242a:	0692      	lsls	r2, r2, #26
 800242c:	d51f      	bpl.n	800246e <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800242e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8002432:	4620      	mov	r0, r4
}
 8002434:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002438:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 800243a:	f000 b95d 	b.w	80026f8 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800243e:	f7ff ff71 	bl	8002324 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002442:	4620      	mov	r0, r4
 8002444:	f7ff ff70 	bl	8002328 <HAL_TIM_PWM_PulseFinishedCallback>
 8002448:	e783      	b.n	8002352 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800244a:	f7ff ff6b 	bl	8002324 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800244e:	4620      	mov	r0, r4
 8002450:	f7ff ff6a 	bl	8002328 <HAL_TIM_PWM_PulseFinishedCallback>
 8002454:	e792      	b.n	800237c <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002456:	f7ff ff65 	bl	8002324 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800245a:	4620      	mov	r0, r4
 800245c:	f7ff ff64 	bl	8002328 <HAL_TIM_PWM_PulseFinishedCallback>
 8002460:	e7a0      	b.n	80023a4 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002462:	f7ff ff5f 	bl	8002324 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002466:	4620      	mov	r0, r4
 8002468:	f7ff ff5e 	bl	8002328 <HAL_TIM_PWM_PulseFinishedCallback>
 800246c:	e7af      	b.n	80023ce <HAL_TIM_IRQHandler+0xa2>
 800246e:	bd10      	pop	{r4, pc}

08002470 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002470:	4a1a      	ldr	r2, [pc, #104]	; (80024dc <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8002472:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002474:	4290      	cmp	r0, r2
 8002476:	d00a      	beq.n	800248e <TIM_Base_SetConfig+0x1e>
 8002478:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800247c:	d007      	beq.n	800248e <TIM_Base_SetConfig+0x1e>
 800247e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002482:	4290      	cmp	r0, r2
 8002484:	d003      	beq.n	800248e <TIM_Base_SetConfig+0x1e>
 8002486:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800248a:	4290      	cmp	r0, r2
 800248c:	d115      	bne.n	80024ba <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 800248e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002490:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002494:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002496:	4a11      	ldr	r2, [pc, #68]	; (80024dc <TIM_Base_SetConfig+0x6c>)
 8002498:	4290      	cmp	r0, r2
 800249a:	d00a      	beq.n	80024b2 <TIM_Base_SetConfig+0x42>
 800249c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80024a0:	d007      	beq.n	80024b2 <TIM_Base_SetConfig+0x42>
 80024a2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80024a6:	4290      	cmp	r0, r2
 80024a8:	d003      	beq.n	80024b2 <TIM_Base_SetConfig+0x42>
 80024aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80024ae:	4290      	cmp	r0, r2
 80024b0:	d103      	bne.n	80024ba <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024b2:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80024b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024b8:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 80024ba:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 80024bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 80024c0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80024c2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024c4:	688b      	ldr	r3, [r1, #8]
 80024c6:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80024c8:	680b      	ldr	r3, [r1, #0]
 80024ca:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024cc:	4b03      	ldr	r3, [pc, #12]	; (80024dc <TIM_Base_SetConfig+0x6c>)
 80024ce:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 80024d0:	bf04      	itt	eq
 80024d2:	690b      	ldreq	r3, [r1, #16]
 80024d4:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80024d6:	2301      	movs	r3, #1
 80024d8:	6143      	str	r3, [r0, #20]
 80024da:	4770      	bx	lr
 80024dc:	40012c00 	.word	0x40012c00

080024e0 <HAL_TIM_Base_Init>:
{
 80024e0:	b510      	push	{r4, lr}
  if(htim == NULL)
 80024e2:	4604      	mov	r4, r0
 80024e4:	2800      	cmp	r0, #0
 80024e6:	d049      	beq.n	800257c <HAL_TIM_Base_Init+0x9c>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80024e8:	6803      	ldr	r3, [r0, #0]
 80024ea:	4a25      	ldr	r2, [pc, #148]	; (8002580 <HAL_TIM_Base_Init+0xa0>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d00e      	beq.n	800250e <HAL_TIM_Base_Init+0x2e>
 80024f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024f4:	d00b      	beq.n	800250e <HAL_TIM_Base_Init+0x2e>
 80024f6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d007      	beq.n	800250e <HAL_TIM_Base_Init+0x2e>
 80024fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002502:	4293      	cmp	r3, r2
 8002504:	d003      	beq.n	800250e <HAL_TIM_Base_Init+0x2e>
 8002506:	21d9      	movs	r1, #217	; 0xd9
 8002508:	481e      	ldr	r0, [pc, #120]	; (8002584 <HAL_TIM_Base_Init+0xa4>)
 800250a:	f000 fd0d 	bl	8002f28 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800250e:	68a3      	ldr	r3, [r4, #8]
 8002510:	f033 0210 	bics.w	r2, r3, #16
 8002514:	d009      	beq.n	800252a <HAL_TIM_Base_Init+0x4a>
 8002516:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800251a:	2a20      	cmp	r2, #32
 800251c:	d005      	beq.n	800252a <HAL_TIM_Base_Init+0x4a>
 800251e:	2b40      	cmp	r3, #64	; 0x40
 8002520:	d003      	beq.n	800252a <HAL_TIM_Base_Init+0x4a>
 8002522:	21da      	movs	r1, #218	; 0xda
 8002524:	4817      	ldr	r0, [pc, #92]	; (8002584 <HAL_TIM_Base_Init+0xa4>)
 8002526:	f000 fcff 	bl	8002f28 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800252a:	6923      	ldr	r3, [r4, #16]
 800252c:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 8002530:	d006      	beq.n	8002540 <HAL_TIM_Base_Init+0x60>
 8002532:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002536:	d003      	beq.n	8002540 <HAL_TIM_Base_Init+0x60>
 8002538:	21db      	movs	r1, #219	; 0xdb
 800253a:	4812      	ldr	r0, [pc, #72]	; (8002584 <HAL_TIM_Base_Init+0xa4>)
 800253c:	f000 fcf4 	bl	8002f28 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8002540:	69a3      	ldr	r3, [r4, #24]
 8002542:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8002546:	d003      	beq.n	8002550 <HAL_TIM_Base_Init+0x70>
 8002548:	21dc      	movs	r1, #220	; 0xdc
 800254a:	480e      	ldr	r0, [pc, #56]	; (8002584 <HAL_TIM_Base_Init+0xa4>)
 800254c:	f000 fcec 	bl	8002f28 <assert_failed>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002550:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8002554:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002558:	b923      	cbnz	r3, 8002564 <HAL_TIM_Base_Init+0x84>
    htim->Lock = HAL_UNLOCKED;
 800255a:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800255e:	4620      	mov	r0, r4
 8002560:	f000 fd10 	bl	8002f84 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002564:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002566:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8002568:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800256c:	1d21      	adds	r1, r4, #4
 800256e:	f7ff ff7f 	bl	8002470 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002572:	2301      	movs	r3, #1
  return HAL_OK;
 8002574:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8002576:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800257a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800257c:	2001      	movs	r0, #1
}
 800257e:	bd10      	pop	{r4, pc}
 8002580:	40012c00 	.word	0x40012c00
 8002584:	0800542c 	.word	0x0800542c

08002588 <HAL_TIM_OnePulse_Init>:
{
 8002588:	b538      	push	{r3, r4, r5, lr}
 800258a:	460d      	mov	r5, r1
  if(htim == NULL)
 800258c:	4604      	mov	r4, r0
 800258e:	2800      	cmp	r0, #0
 8002590:	d05d      	beq.n	800264e <HAL_TIM_OnePulse_Init+0xc6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8002592:	6803      	ldr	r3, [r0, #0]
 8002594:	4a2f      	ldr	r2, [pc, #188]	; (8002654 <HAL_TIM_OnePulse_Init+0xcc>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d00f      	beq.n	80025ba <HAL_TIM_OnePulse_Init+0x32>
 800259a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800259e:	d00c      	beq.n	80025ba <HAL_TIM_OnePulse_Init+0x32>
 80025a0:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d008      	beq.n	80025ba <HAL_TIM_OnePulse_Init+0x32>
 80025a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d004      	beq.n	80025ba <HAL_TIM_OnePulse_Init+0x32>
 80025b0:	f240 71cc 	movw	r1, #1996	; 0x7cc
 80025b4:	4828      	ldr	r0, [pc, #160]	; (8002658 <HAL_TIM_OnePulse_Init+0xd0>)
 80025b6:	f000 fcb7 	bl	8002f28 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80025ba:	68a3      	ldr	r3, [r4, #8]
 80025bc:	f033 0210 	bics.w	r2, r3, #16
 80025c0:	d00a      	beq.n	80025d8 <HAL_TIM_OnePulse_Init+0x50>
 80025c2:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80025c6:	2a20      	cmp	r2, #32
 80025c8:	d006      	beq.n	80025d8 <HAL_TIM_OnePulse_Init+0x50>
 80025ca:	2b40      	cmp	r3, #64	; 0x40
 80025cc:	d004      	beq.n	80025d8 <HAL_TIM_OnePulse_Init+0x50>
 80025ce:	f240 71cd 	movw	r1, #1997	; 0x7cd
 80025d2:	4821      	ldr	r0, [pc, #132]	; (8002658 <HAL_TIM_OnePulse_Init+0xd0>)
 80025d4:	f000 fca8 	bl	8002f28 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80025d8:	6923      	ldr	r3, [r4, #16]
 80025da:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 80025de:	d007      	beq.n	80025f0 <HAL_TIM_OnePulse_Init+0x68>
 80025e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025e4:	d004      	beq.n	80025f0 <HAL_TIM_OnePulse_Init+0x68>
 80025e6:	f240 71ce 	movw	r1, #1998	; 0x7ce
 80025ea:	481b      	ldr	r0, [pc, #108]	; (8002658 <HAL_TIM_OnePulse_Init+0xd0>)
 80025ec:	f000 fc9c 	bl	8002f28 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80025f0:	69a3      	ldr	r3, [r4, #24]
 80025f2:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 80025f6:	d004      	beq.n	8002602 <HAL_TIM_OnePulse_Init+0x7a>
 80025f8:	f240 71cf 	movw	r1, #1999	; 0x7cf
 80025fc:	4816      	ldr	r0, [pc, #88]	; (8002658 <HAL_TIM_OnePulse_Init+0xd0>)
 80025fe:	f000 fc93 	bl	8002f28 <assert_failed>
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
 8002602:	f035 0308 	bics.w	r3, r5, #8
 8002606:	d004      	beq.n	8002612 <HAL_TIM_OnePulse_Init+0x8a>
 8002608:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800260c:	4812      	ldr	r0, [pc, #72]	; (8002658 <HAL_TIM_OnePulse_Init+0xd0>)
 800260e:	f000 fc8b 	bl	8002f28 <assert_failed>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002612:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8002616:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800261a:	b923      	cbnz	r3, 8002626 <HAL_TIM_OnePulse_Init+0x9e>
    htim->Lock = HAL_UNLOCKED;
 800261c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_OnePulse_MspInit(htim);
 8002620:	4620      	mov	r0, r4
 8002622:	f7ff fc0f 	bl	8001e44 <HAL_TIM_OnePulse_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002626:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002628:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 800262a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800262e:	1d21      	adds	r1, r4, #4
 8002630:	f7ff ff1e 	bl	8002470 <TIM_Base_SetConfig>
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8002634:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
 8002636:	2000      	movs	r0, #0
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	f022 0208 	bic.w	r2, r2, #8
 800263e:	601a      	str	r2, [r3, #0]
  htim->Instance->CR1 |= OnePulseMode;
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	4315      	orrs	r5, r2
 8002644:	601d      	str	r5, [r3, #0]
  htim->State= HAL_TIM_STATE_READY;
 8002646:	2301      	movs	r3, #1
 8002648:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800264c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800264e:	2001      	movs	r0, #1
}
 8002650:	bd38      	pop	{r3, r4, r5, pc}
 8002652:	bf00      	nop
 8002654:	40012c00 	.word	0x40012c00
 8002658:	0800542c 	.word	0x0800542c

0800265c <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 800265c:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800265e:	4a24      	ldr	r2, [pc, #144]	; (80026f0 <HAL_TIMEx_MasterConfigSynchronization+0x94>)
 8002660:	6803      	ldr	r3, [r0, #0]
{
 8002662:	4604      	mov	r4, r0
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8002664:	4293      	cmp	r3, r2
{
 8002666:	460d      	mov	r5, r1
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8002668:	d00f      	beq.n	800268a <HAL_TIMEx_MasterConfigSynchronization+0x2e>
 800266a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800266e:	d00c      	beq.n	800268a <HAL_TIMEx_MasterConfigSynchronization+0x2e>
 8002670:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002674:	4293      	cmp	r3, r2
 8002676:	d008      	beq.n	800268a <HAL_TIMEx_MasterConfigSynchronization+0x2e>
 8002678:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800267c:	4293      	cmp	r3, r2
 800267e:	d004      	beq.n	800268a <HAL_TIMEx_MasterConfigSynchronization+0x2e>
 8002680:	f44f 61c7 	mov.w	r1, #1592	; 0x638
 8002684:	481b      	ldr	r0, [pc, #108]	; (80026f4 <HAL_TIMEx_MasterConfigSynchronization+0x98>)
 8002686:	f000 fc4f 	bl	8002f28 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800268a:	682b      	ldr	r3, [r5, #0]
 800268c:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 8002690:	d006      	beq.n	80026a0 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8002692:	2b40      	cmp	r3, #64	; 0x40
 8002694:	d004      	beq.n	80026a0 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8002696:	f240 6139 	movw	r1, #1593	; 0x639
 800269a:	4816      	ldr	r0, [pc, #88]	; (80026f4 <HAL_TIMEx_MasterConfigSynchronization+0x98>)
 800269c:	f000 fc44 	bl	8002f28 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 80026a0:	686b      	ldr	r3, [r5, #4]
 80026a2:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 80026a6:	d004      	beq.n	80026b2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80026a8:	f240 613a 	movw	r1, #1594	; 0x63a
 80026ac:	4811      	ldr	r0, [pc, #68]	; (80026f4 <HAL_TIMEx_MasterConfigSynchronization+0x98>)
 80026ae:	f000 fc3b 	bl	8002f28 <assert_failed>

  __HAL_LOCK(htim);
 80026b2:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80026b6:	2002      	movs	r0, #2
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d018      	beq.n	80026ee <HAL_TIMEx_MasterConfigSynchronization+0x92>

  htim->State = HAL_TIM_STATE_BUSY;

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80026bc:	6823      	ldr	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80026be:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80026c2:	685a      	ldr	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80026c4:	6829      	ldr	r1, [r5, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80026c6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80026ca:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80026cc:	685a      	ldr	r2, [r3, #4]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;

  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80026ce:	2000      	movs	r0, #0
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80026d0:	430a      	orrs	r2, r1
 80026d2:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80026d4:	689a      	ldr	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80026d6:	6869      	ldr	r1, [r5, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80026d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026dc:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80026de:	689a      	ldr	r2, [r3, #8]
 80026e0:	430a      	orrs	r2, r1
 80026e2:	609a      	str	r2, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 80026e4:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80026e6:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 80026ea:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  return HAL_OK;
}
 80026ee:	bd38      	pop	{r3, r4, r5, pc}
 80026f0:	40012c00 	.word	0x40012c00
 80026f4:	08005464 	.word	0x08005464

080026f8 <HAL_TIMEx_CommutationCallback>:
 80026f8:	4770      	bx	lr

080026fa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80026fa:	4770      	bx	lr

080026fc <UART_SetConfig>:
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
  uint32_t tmpreg = 0x00U;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80026fc:	6842      	ldr	r2, [r0, #4]
 80026fe:	4b65      	ldr	r3, [pc, #404]	; (8002894 <UART_SetConfig+0x198>)
{
 8002700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8002704:	429a      	cmp	r2, r3
{
 8002706:	4681      	mov	r9, r0
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8002708:	d904      	bls.n	8002714 <UART_SetConfig+0x18>
 800270a:	f640 11a7 	movw	r1, #2471	; 0x9a7
 800270e:	4862      	ldr	r0, [pc, #392]	; (8002898 <UART_SetConfig+0x19c>)
 8002710:	f000 fc0a 	bl	8002f28 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8002714:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8002718:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 800271c:	d004      	beq.n	8002728 <UART_SetConfig+0x2c>
 800271e:	f640 11a8 	movw	r1, #2472	; 0x9a8
 8002722:	485d      	ldr	r0, [pc, #372]	; (8002898 <UART_SetConfig+0x19c>)
 8002724:	f000 fc00 	bl	8002f28 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8002728:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800272c:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 8002730:	d007      	beq.n	8002742 <UART_SetConfig+0x46>
 8002732:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002736:	d004      	beq.n	8002742 <UART_SetConfig+0x46>
 8002738:	f640 11a9 	movw	r1, #2473	; 0x9a9
 800273c:	4856      	ldr	r0, [pc, #344]	; (8002898 <UART_SetConfig+0x19c>)
 800273e:	f000 fbf3 	bl	8002f28 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8002742:	f64f 72f3 	movw	r2, #65523	; 0xfff3
 8002746:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800274a:	4213      	tst	r3, r2
 800274c:	d100      	bne.n	8002750 <UART_SetConfig+0x54>
 800274e:	b923      	cbnz	r3, 800275a <UART_SetConfig+0x5e>
 8002750:	f640 11aa 	movw	r1, #2474	; 0x9aa
 8002754:	4850      	ldr	r0, [pc, #320]	; (8002898 <UART_SetConfig+0x19c>)
 8002756:	f000 fbe7 	bl	8002f28 <assert_failed>

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800275a:	f8d9 5000 	ldr.w	r5, [r9]
 800275e:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8002762:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002764:	f8d9 1010 	ldr.w	r1, [r9, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002768:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800276c:	4313      	orrs	r3, r2
 800276e:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002770:	f8d9 3008 	ldr.w	r3, [r9, #8]
  MODIFY_REG(huart->Instance->CR1, 
 8002774:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002776:	430b      	orrs	r3, r1
 8002778:	f8d9 1014 	ldr.w	r1, [r9, #20]
  MODIFY_REG(huart->Instance->CR1, 
 800277c:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8002780:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002784:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8002786:	4313      	orrs	r3, r2
 8002788:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800278a:	696b      	ldr	r3, [r5, #20]
 800278c:	f8d9 2018 	ldr.w	r2, [r9, #24]
 8002790:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002794:	4313      	orrs	r3, r2
 8002796:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002798:	4b40      	ldr	r3, [pc, #256]	; (800289c <UART_SetConfig+0x1a0>)
 800279a:	2419      	movs	r4, #25
 800279c:	429d      	cmp	r5, r3
 800279e:	d146      	bne.n	800282e <UART_SetConfig+0x132>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80027a0:	f7ff f934 	bl	8001a0c <HAL_RCC_GetPCLK2Freq>
 80027a4:	fb04 f300 	mul.w	r3, r4, r0
 80027a8:	f8d9 6004 	ldr.w	r6, [r9, #4]
 80027ac:	f04f 0864 	mov.w	r8, #100	; 0x64
 80027b0:	00b6      	lsls	r6, r6, #2
 80027b2:	fbb3 f3f6 	udiv	r3, r3, r6
 80027b6:	fbb3 f3f8 	udiv	r3, r3, r8
 80027ba:	011e      	lsls	r6, r3, #4
 80027bc:	f7ff f926 	bl	8001a0c <HAL_RCC_GetPCLK2Freq>
 80027c0:	4360      	muls	r0, r4
 80027c2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	fbb0 f7f3 	udiv	r7, r0, r3
 80027cc:	f7ff f91e 	bl	8001a0c <HAL_RCC_GetPCLK2Freq>
 80027d0:	4360      	muls	r0, r4
 80027d2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80027dc:	fbb3 f3f8 	udiv	r3, r3, r8
 80027e0:	fb08 7313 	mls	r3, r8, r3, r7
 80027e4:	011b      	lsls	r3, r3, #4
 80027e6:	3332      	adds	r3, #50	; 0x32
 80027e8:	fbb3 f3f8 	udiv	r3, r3, r8
 80027ec:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 80027f0:	f7ff f90c 	bl	8001a0c <HAL_RCC_GetPCLK2Freq>
 80027f4:	4360      	muls	r0, r4
 80027f6:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80027fa:	0092      	lsls	r2, r2, #2
 80027fc:	fbb0 faf2 	udiv	sl, r0, r2
 8002800:	f7ff f904 	bl	8001a0c <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002804:	4360      	muls	r0, r4
 8002806:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002810:	fbb3 f3f8 	udiv	r3, r3, r8
 8002814:	fb08 a313 	mls	r3, r8, r3, sl
 8002818:	011b      	lsls	r3, r3, #4
 800281a:	3332      	adds	r3, #50	; 0x32
 800281c:	fbb3 f3f8 	udiv	r3, r3, r8
 8002820:	f003 030f 	and.w	r3, r3, #15
 8002824:	433b      	orrs	r3, r7
 8002826:	4433      	add	r3, r6
 8002828:	60ab      	str	r3, [r5, #8]
 800282a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800282e:	f7ff f8dd 	bl	80019ec <HAL_RCC_GetPCLK1Freq>
 8002832:	fb04 f300 	mul.w	r3, r4, r0
 8002836:	f8d9 6004 	ldr.w	r6, [r9, #4]
 800283a:	f04f 0864 	mov.w	r8, #100	; 0x64
 800283e:	00b6      	lsls	r6, r6, #2
 8002840:	fbb3 f3f6 	udiv	r3, r3, r6
 8002844:	fbb3 f3f8 	udiv	r3, r3, r8
 8002848:	011e      	lsls	r6, r3, #4
 800284a:	f7ff f8cf 	bl	80019ec <HAL_RCC_GetPCLK1Freq>
 800284e:	4360      	muls	r0, r4
 8002850:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	fbb0 f7f3 	udiv	r7, r0, r3
 800285a:	f7ff f8c7 	bl	80019ec <HAL_RCC_GetPCLK1Freq>
 800285e:	4360      	muls	r0, r4
 8002860:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	fbb0 f3f3 	udiv	r3, r0, r3
 800286a:	fbb3 f3f8 	udiv	r3, r3, r8
 800286e:	fb08 7313 	mls	r3, r8, r3, r7
 8002872:	011b      	lsls	r3, r3, #4
 8002874:	3332      	adds	r3, #50	; 0x32
 8002876:	fbb3 f3f8 	udiv	r3, r3, r8
 800287a:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 800287e:	f7ff f8b5 	bl	80019ec <HAL_RCC_GetPCLK1Freq>
 8002882:	4360      	muls	r0, r4
 8002884:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8002888:	0092      	lsls	r2, r2, #2
 800288a:	fbb0 faf2 	udiv	sl, r0, r2
 800288e:	f7ff f8ad 	bl	80019ec <HAL_RCC_GetPCLK1Freq>
 8002892:	e7b7      	b.n	8002804 <UART_SetConfig+0x108>
 8002894:	0044aa20 	.word	0x0044aa20
 8002898:	0800549f 	.word	0x0800549f
 800289c:	40013800 	.word	0x40013800

080028a0 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 80028a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028a2:	4604      	mov	r4, r0
 80028a4:	460e      	mov	r6, r1
 80028a6:	4617      	mov	r7, r2
 80028a8:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80028aa:	6821      	ldr	r1, [r4, #0]
 80028ac:	680b      	ldr	r3, [r1, #0]
 80028ae:	ea36 0303 	bics.w	r3, r6, r3
 80028b2:	d101      	bne.n	80028b8 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 80028b4:	2000      	movs	r0, #0
}
 80028b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 80028b8:	1c6b      	adds	r3, r5, #1
 80028ba:	d0f7      	beq.n	80028ac <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80028bc:	b995      	cbnz	r5, 80028e4 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80028be:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 80028c0:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80028c2:	68da      	ldr	r2, [r3, #12]
 80028c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80028c8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028ca:	695a      	ldr	r2, [r3, #20]
 80028cc:	f022 0201 	bic.w	r2, r2, #1
 80028d0:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80028d2:	2320      	movs	r3, #32
 80028d4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80028d8:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 80028dc:	2300      	movs	r3, #0
 80028de:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 80028e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80028e4:	f7fe fa1c 	bl	8000d20 <HAL_GetTick>
 80028e8:	1bc0      	subs	r0, r0, r7
 80028ea:	4285      	cmp	r5, r0
 80028ec:	d2dd      	bcs.n	80028aa <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 80028ee:	e7e6      	b.n	80028be <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

080028f0 <HAL_UART_Init>:
{
 80028f0:	b510      	push	{r4, lr}
  if(huart == NULL)
 80028f2:	4604      	mov	r4, r0
 80028f4:	2800      	cmp	r0, #0
 80028f6:	d05b      	beq.n	80029b0 <HAL_UART_Init+0xc0>
  if(huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80028f8:	6981      	ldr	r1, [r0, #24]
 80028fa:	6803      	ldr	r3, [r0, #0]
 80028fc:	4a2d      	ldr	r2, [pc, #180]	; (80029b4 <HAL_UART_Init+0xc4>)
 80028fe:	2900      	cmp	r1, #0
 8002900:	d04a      	beq.n	8002998 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8002902:	4293      	cmp	r3, r2
 8002904:	d00c      	beq.n	8002920 <HAL_UART_Init+0x30>
 8002906:	f5a2 4274 	sub.w	r2, r2, #62464	; 0xf400
 800290a:	4293      	cmp	r3, r2
 800290c:	d008      	beq.n	8002920 <HAL_UART_Init+0x30>
 800290e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002912:	4293      	cmp	r3, r2
 8002914:	d004      	beq.n	8002920 <HAL_UART_Init+0x30>
 8002916:	f240 110f 	movw	r1, #271	; 0x10f
 800291a:	4827      	ldr	r0, [pc, #156]	; (80029b8 <HAL_UART_Init+0xc8>)
 800291c:	f000 fb04 	bl	8002f28 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8002920:	69a3      	ldr	r3, [r4, #24]
 8002922:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 8002926:	d004      	beq.n	8002932 <HAL_UART_Init+0x42>
 8002928:	f44f 7188 	mov.w	r1, #272	; 0x110
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800292c:	4822      	ldr	r0, [pc, #136]	; (80029b8 <HAL_UART_Init+0xc8>)
 800292e:	f000 fafb 	bl	8002f28 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8002932:	68a3      	ldr	r3, [r4, #8]
 8002934:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 8002938:	d004      	beq.n	8002944 <HAL_UART_Init+0x54>
 800293a:	f44f 718b 	mov.w	r1, #278	; 0x116
 800293e:	481e      	ldr	r0, [pc, #120]	; (80029b8 <HAL_UART_Init+0xc8>)
 8002940:	f000 faf2 	bl	8002f28 <assert_failed>
  if(huart->gState == HAL_UART_STATE_RESET)
 8002944:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8002948:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800294c:	b923      	cbnz	r3, 8002958 <HAL_UART_Init+0x68>
    huart->Lock = HAL_UNLOCKED;
 800294e:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002952:	4620      	mov	r0, r4
 8002954:	f000 fb98 	bl	8003088 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8002958:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800295a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800295c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002960:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8002962:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8002964:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002968:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800296a:	f7ff fec7 	bl	80026fc <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800296e:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002970:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002972:	691a      	ldr	r2, [r3, #16]
 8002974:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002978:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800297a:	695a      	ldr	r2, [r3, #20]
 800297c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002980:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002982:	68da      	ldr	r2, [r3, #12]
 8002984:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002988:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 800298a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800298c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800298e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8002992:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8002996:	bd10      	pop	{r4, pc}
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8002998:	4293      	cmp	r3, r2
 800299a:	d0ca      	beq.n	8002932 <HAL_UART_Init+0x42>
 800299c:	4a07      	ldr	r2, [pc, #28]	; (80029bc <HAL_UART_Init+0xcc>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d0c7      	beq.n	8002932 <HAL_UART_Init+0x42>
 80029a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d0c3      	beq.n	8002932 <HAL_UART_Init+0x42>
 80029aa:	f44f 718a 	mov.w	r1, #276	; 0x114
 80029ae:	e7bd      	b.n	800292c <HAL_UART_Init+0x3c>
    return HAL_ERROR;
 80029b0:	2001      	movs	r0, #1
}
 80029b2:	bd10      	pop	{r4, pc}
 80029b4:	40013800 	.word	0x40013800
 80029b8:	0800549f 	.word	0x0800549f
 80029bc:	40004400 	.word	0x40004400

080029c0 <HAL_UART_Transmit>:
{
 80029c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029c4:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 80029c6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 80029ca:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_READY)
 80029cc:	2b20      	cmp	r3, #32
{
 80029ce:	460d      	mov	r5, r1
 80029d0:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 80029d2:	d14e      	bne.n	8002a72 <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0U))
 80029d4:	2900      	cmp	r1, #0
 80029d6:	d049      	beq.n	8002a6c <HAL_UART_Transmit+0xac>
 80029d8:	2a00      	cmp	r2, #0
 80029da:	d047      	beq.n	8002a6c <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 80029dc:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d046      	beq.n	8002a72 <HAL_UART_Transmit+0xb2>
 80029e4:	2301      	movs	r3, #1
 80029e6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029ea:	2300      	movs	r3, #0
 80029ec:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029ee:	2321      	movs	r3, #33	; 0x21
 80029f0:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80029f4:	f7fe f994 	bl	8000d20 <HAL_GetTick>
 80029f8:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 80029fa:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 80029fe:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8002a02:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	b96b      	cbnz	r3, 8002a24 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a08:	463b      	mov	r3, r7
 8002a0a:	4632      	mov	r2, r6
 8002a0c:	2140      	movs	r1, #64	; 0x40
 8002a0e:	4620      	mov	r0, r4
 8002a10:	f7ff ff46 	bl	80028a0 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002a14:	b9a8      	cbnz	r0, 8002a42 <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8002a16:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8002a18:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8002a1c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8002a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8002a24:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a26:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8002a28:	3b01      	subs	r3, #1
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002a2e:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a30:	2180      	movs	r1, #128	; 0x80
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002a32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a36:	4620      	mov	r0, r4
 8002a38:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002a3a:	d10e      	bne.n	8002a5a <HAL_UART_Transmit+0x9a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a3c:	f7ff ff30 	bl	80028a0 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002a40:	b110      	cbz	r0, 8002a48 <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 8002a42:	2003      	movs	r0, #3
 8002a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002a48:	882b      	ldrh	r3, [r5, #0]
 8002a4a:	6822      	ldr	r2, [r4, #0]
 8002a4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a50:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8002a52:	6923      	ldr	r3, [r4, #16]
 8002a54:	b943      	cbnz	r3, 8002a68 <HAL_UART_Transmit+0xa8>
          pData +=2U;
 8002a56:	3502      	adds	r5, #2
 8002a58:	e7d3      	b.n	8002a02 <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a5a:	f7ff ff21 	bl	80028a0 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002a5e:	2800      	cmp	r0, #0
 8002a60:	d1ef      	bne.n	8002a42 <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002a62:	6823      	ldr	r3, [r4, #0]
 8002a64:	782a      	ldrb	r2, [r5, #0]
 8002a66:	605a      	str	r2, [r3, #4]
 8002a68:	3501      	adds	r5, #1
 8002a6a:	e7ca      	b.n	8002a02 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8002a6c:	2001      	movs	r0, #1
 8002a6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8002a72:	2002      	movs	r0, #2
}
 8002a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002a78 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a78:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
	if(htim == &htim1)
 8002a7c:	4b36      	ldr	r3, [pc, #216]	; (8002b58 <HAL_TIM_PeriodElapsedCallback+0xe0>)
{
 8002a7e:	b09e      	sub	sp, #120	; 0x78
	if(htim == &htim1)
 8002a80:	4283      	cmp	r3, r0
 8002a82:	d147      	bne.n	8002b14 <HAL_TIM_PeriodElapsedCallback+0x9c>
	{
		uint16_t count_main = __HAL_TIM_GET_COUNTER(&htim2);
 8002a84:	4e35      	ldr	r6, [pc, #212]	; (8002b5c <HAL_TIM_PeriodElapsedCallback+0xe4>)
		uint16_t count_secondary = __HAL_TIM_GET_COUNTER(&htim3);
 8002a86:	4d36      	ldr	r5, [pc, #216]	; (8002b60 <HAL_TIM_PeriodElapsedCallback+0xe8>)
		uint16_t count_main = __HAL_TIM_GET_COUNTER(&htim2);
 8002a88:	6831      	ldr	r1, [r6, #0]
		uint16_t count_secondary = __HAL_TIM_GET_COUNTER(&htim3);
 8002a8a:	682b      	ldr	r3, [r5, #0]
		uint16_t count_main = __HAL_TIM_GET_COUNTER(&htim2);
 8002a8c:	6a4a      	ldr	r2, [r1, #36]	; 0x24
		uint16_t count_secondary = __HAL_TIM_GET_COUNTER(&htim3);
 8002a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		uint16_t arr = __HAL_TIM_GET_AUTORELOAD(&htim2);
 8002a90:	6acc      	ldr	r4, [r1, #44]	; 0x2c
		uint32_t freq = count_main + (count_secondary * arr) + count_secondary;
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	b292      	uxth	r2, r2
 8002a96:	b2a4      	uxth	r4, r4
 8002a98:	fb03 2404 	mla	r4, r3, r4, r2

		///////////////////////// вывод инфы ///////////////////////////////
		char str[96] = {0,};
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	2260      	movs	r2, #96	; 0x60
 8002aa0:	a806      	add	r0, sp, #24
		uint32_t freq = count_main + (count_secondary * arr) + count_secondary;
 8002aa2:	441c      	add	r4, r3
		char str[96] = {0,};
 8002aa4:	f000 fbcc 	bl	8003240 <memset>

		switch(MY_sClockSourceConfig.ClockPrescaler)
 8002aa8:	4b2e      	ldr	r3, [pc, #184]	; (8002b64 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ab0:	d04a      	beq.n	8002b48 <HAL_TIM_PeriodElapsedCallback+0xd0>
 8002ab2:	d832      	bhi.n	8002b1a <HAL_TIM_PeriodElapsedCallback+0xa2>
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d038      	beq.n	8002b2a <HAL_TIM_PeriodElapsedCallback+0xb2>
				snprintf(str, 96, "ClockPrescaler: DIV 8\n");
				HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
			break;
		}

		snprintf(str, 96, "FREQUENCY: %.3f MHz | %.3f KHz | %lu Hz\n-----------------\n", (float)freq / 1000000.0, (float)freq / 1000.0, freq);
 8002ab8:	4620      	mov	r0, r4
 8002aba:	f7fe f897 	bl	8000bec <__aeabi_ui2f>
 8002abe:	f7fd fcb3 	bl	8000428 <__aeabi_f2d>
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	4b28      	ldr	r3, [pc, #160]	; (8002b68 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8002ac6:	4680      	mov	r8, r0
 8002ac8:	4689      	mov	r9, r1
 8002aca:	9404      	str	r4, [sp, #16]
 8002acc:	f7fd fe2a 	bl	8000724 <__aeabi_ddiv>
 8002ad0:	a31f      	add	r3, pc, #124	; (adr r3, 8002b50 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8002ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ad6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002ada:	4640      	mov	r0, r8
 8002adc:	4649      	mov	r1, r9
 8002ade:	f7fd fe21 	bl	8000724 <__aeabi_ddiv>
 8002ae2:	4a22      	ldr	r2, [pc, #136]	; (8002b6c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8002ae4:	e9cd 0100 	strd	r0, r1, [sp]
 8002ae8:	2160      	movs	r1, #96	; 0x60
 8002aea:	a806      	add	r0, sp, #24
 8002aec:	f001 f812 	bl	8003b14 <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 8002af0:	a806      	add	r0, sp, #24
 8002af2:	f7fd fb2d 	bl	8000150 <strlen>
 8002af6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002afa:	b282      	uxth	r2, r0
 8002afc:	a906      	add	r1, sp, #24
 8002afe:	481c      	ldr	r0, [pc, #112]	; (8002b70 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8002b00:	f7ff ff5e 	bl	80029c0 <HAL_UART_Transmit>

		//snprintf(str, 96, "Count_main: %d | Count_secondary: %d\n-----------------\n", count_main, count_secondary);
		//HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);

		//////////////// обнуляем счётчики и рестартуем таймер /////////////////
		__HAL_TIM_SET_COUNTER(&htim2, 0x0000);
 8002b04:	2300      	movs	r3, #0
 8002b06:	6832      	ldr	r2, [r6, #0]
		__HAL_TIM_SET_COUNTER(&htim3, 0x0000);
		HAL_TIM_Base_Start_IT(&htim1);
 8002b08:	4813      	ldr	r0, [pc, #76]	; (8002b58 <HAL_TIM_PeriodElapsedCallback+0xe0>)
		__HAL_TIM_SET_COUNTER(&htim2, 0x0000);
 8002b0a:	6253      	str	r3, [r2, #36]	; 0x24
		__HAL_TIM_SET_COUNTER(&htim3, 0x0000);
 8002b0c:	682a      	ldr	r2, [r5, #0]
 8002b0e:	6253      	str	r3, [r2, #36]	; 0x24
		HAL_TIM_Base_Start_IT(&htim1);
 8002b10:	f7ff f972 	bl	8001df8 <HAL_TIM_Base_Start_IT>
	}
}
 8002b14:	b01e      	add	sp, #120	; 0x78
 8002b16:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
		switch(MY_sClockSourceConfig.ClockPrescaler)
 8002b1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b1e:	d015      	beq.n	8002b4c <HAL_TIM_PeriodElapsedCallback+0xd4>
 8002b20:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002b24:	d1c8      	bne.n	8002ab8 <HAL_TIM_PeriodElapsedCallback+0x40>
				snprintf(str, 96, "ClockPrescaler: DIV 8\n");
 8002b26:	4913      	ldr	r1, [pc, #76]	; (8002b74 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8002b28:	e000      	b.n	8002b2c <HAL_TIM_PeriodElapsedCallback+0xb4>
				snprintf(str, 96, "ClockPrescaler: DIV NOT\n");
 8002b2a:	4913      	ldr	r1, [pc, #76]	; (8002b78 <HAL_TIM_PeriodElapsedCallback+0x100>)
				snprintf(str, 96, "ClockPrescaler: DIV 8\n");
 8002b2c:	a806      	add	r0, sp, #24
 8002b2e:	f001 f825 	bl	8003b7c <strcpy>
				HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 8002b32:	a806      	add	r0, sp, #24
 8002b34:	f7fd fb0c 	bl	8000150 <strlen>
 8002b38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b3c:	b282      	uxth	r2, r0
 8002b3e:	a906      	add	r1, sp, #24
 8002b40:	480b      	ldr	r0, [pc, #44]	; (8002b70 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8002b42:	f7ff ff3d 	bl	80029c0 <HAL_UART_Transmit>
			break;
 8002b46:	e7b7      	b.n	8002ab8 <HAL_TIM_PeriodElapsedCallback+0x40>
				snprintf(str, 96, "ClockPrescaler: DIV 2\n");
 8002b48:	490c      	ldr	r1, [pc, #48]	; (8002b7c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8002b4a:	e7ef      	b.n	8002b2c <HAL_TIM_PeriodElapsedCallback+0xb4>
				snprintf(str, 96, "ClockPrescaler: DIV 4\n");
 8002b4c:	490c      	ldr	r1, [pc, #48]	; (8002b80 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8002b4e:	e7ed      	b.n	8002b2c <HAL_TIM_PeriodElapsedCallback+0xb4>
 8002b50:	00000000 	.word	0x00000000
 8002b54:	412e8480 	.word	0x412e8480
 8002b58:	2000029c 	.word	0x2000029c
 8002b5c:	200002dc 	.word	0x200002dc
 8002b60:	2000021c 	.word	0x2000021c
 8002b64:	200001fc 	.word	0x200001fc
 8002b68:	408f4000 	.word	0x408f4000
 8002b6c:	0800553e 	.word	0x0800553e
 8002b70:	2000025c 	.word	0x2000025c
 8002b74:	08005527 	.word	0x08005527
 8002b78:	080054e0 	.word	0x080054e0
 8002b7c:	080054f9 	.word	0x080054f9
 8002b80:	08005510 	.word	0x08005510

08002b84 <Error_Handler>:
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_UART_Transmit(&huart1, (uint8_t*)"ERROR1\n", strlen("ERROR\n"), 1000);
 8002b84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b88:	2206      	movs	r2, #6
 8002b8a:	4902      	ldr	r1, [pc, #8]	; (8002b94 <Error_Handler+0x10>)
 8002b8c:	4802      	ldr	r0, [pc, #8]	; (8002b98 <Error_Handler+0x14>)
 8002b8e:	f7ff bf17 	b.w	80029c0 <HAL_UART_Transmit>
 8002b92:	bf00      	nop
 8002b94:	080054d8 	.word	0x080054d8
 8002b98:	2000025c 	.word	0x2000025c

08002b9c <SetClockPrescaler>:
{
 8002b9c:	b530      	push	{r4, r5, lr}
	HAL_TIM_Base_Stop(&htim2);
 8002b9e:	4c24      	ldr	r4, [pc, #144]	; (8002c30 <SetClockPrescaler+0x94>)
{
 8002ba0:	b089      	sub	sp, #36	; 0x24
 8002ba2:	4605      	mov	r5, r0
	HAL_TIM_Base_Stop(&htim2);
 8002ba4:	4620      	mov	r0, r4
 8002ba6:	f7ff f8f5 	bl	8001d94 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_DeInit(&htim2);
 8002baa:	4620      	mov	r0, r4
 8002bac:	f7ff f896 	bl	8001cdc <HAL_TIM_Base_DeInit>
	TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002bb0:	2214      	movs	r2, #20
 8002bb2:	2100      	movs	r1, #0
 8002bb4:	a803      	add	r0, sp, #12
 8002bb6:	f000 fb43 	bl	8003240 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bba:	2300      	movs	r3, #0
	htim2.Instance = TIM2;
 8002bbc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
	htim2.Init.Prescaler = 0;
 8002bc0:	e884 000c 	stmia.w	r4, {r2, r3}
	htim2.Init.Period = 65535;
 8002bc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002bc8:	4620      	mov	r0, r4
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bca:	9301      	str	r3, [sp, #4]
 8002bcc:	9302      	str	r3, [sp, #8]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bce:	60a3      	str	r3, [r4, #8]
	htim2.Init.Period = 65535;
 8002bd0:	60e2      	str	r2, [r4, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bd2:	6123      	str	r3, [r4, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bd4:	61a3      	str	r3, [r4, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002bd6:	f7ff fc83 	bl	80024e0 <HAL_TIM_Base_Init>
 8002bda:	b108      	cbz	r0, 8002be0 <SetClockPrescaler+0x44>
	Error_Handler();
 8002bdc:	f7ff ffd2 	bl	8002b84 <Error_Handler>
	MY_sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8002be0:	2400      	movs	r4, #0
 8002be2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	MY_sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8002be6:	4913      	ldr	r1, [pc, #76]	; (8002c34 <SetClockPrescaler+0x98>)
	if (HAL_TIM_ConfigClockSource(&htim2, &MY_sClockSourceConfig) != HAL_OK)
 8002be8:	4811      	ldr	r0, [pc, #68]	; (8002c30 <SetClockPrescaler+0x94>)
	MY_sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8002bea:	e881 0018 	stmia.w	r1, {r3, r4}
	MY_sClockSourceConfig.ClockPrescaler = clok_presc;
 8002bee:	608d      	str	r5, [r1, #8]
	MY_sClockSourceConfig.ClockFilter = 0;
 8002bf0:	60cc      	str	r4, [r1, #12]
	if (HAL_TIM_ConfigClockSource(&htim2, &MY_sClockSourceConfig) != HAL_OK)
 8002bf2:	f7ff f929 	bl	8001e48 <HAL_TIM_ConfigClockSource>
 8002bf6:	b108      	cbz	r0, 8002bfc <SetClockPrescaler+0x60>
	Error_Handler();
 8002bf8:	f7ff ffc4 	bl	8002b84 <Error_Handler>
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 8002bfc:	2305      	movs	r3, #5
	if (HAL_TIM_SlaveConfigSynchronization(&htim2, &sSlaveConfig) != HAL_OK)
 8002bfe:	a903      	add	r1, sp, #12
 8002c00:	480b      	ldr	r0, [pc, #44]	; (8002c30 <SetClockPrescaler+0x94>)
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 8002c02:	9303      	str	r3, [sp, #12]
	sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8002c04:	9404      	str	r4, [sp, #16]
	if (HAL_TIM_SlaveConfigSynchronization(&htim2, &sSlaveConfig) != HAL_OK)
 8002c06:	f7ff fb3f 	bl	8002288 <HAL_TIM_SlaveConfigSynchronization>
 8002c0a:	b108      	cbz	r0, 8002c10 <SetClockPrescaler+0x74>
	Error_Handler();
 8002c0c:	f7ff ffba 	bl	8002b84 <Error_Handler>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002c10:	2320      	movs	r3, #32
 8002c12:	9301      	str	r3, [sp, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c14:	2300      	movs	r3, #0
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002c16:	a901      	add	r1, sp, #4
 8002c18:	4805      	ldr	r0, [pc, #20]	; (8002c30 <SetClockPrescaler+0x94>)
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c1a:	9302      	str	r3, [sp, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002c1c:	f7ff fd1e 	bl	800265c <HAL_TIMEx_MasterConfigSynchronization>
 8002c20:	b108      	cbz	r0, 8002c26 <SetClockPrescaler+0x8a>
	Error_Handler();
 8002c22:	f7ff ffaf 	bl	8002b84 <Error_Handler>
	HAL_TIM_Base_Start(&htim2);
 8002c26:	4802      	ldr	r0, [pc, #8]	; (8002c30 <SetClockPrescaler+0x94>)
 8002c28:	f7ff f88c 	bl	8001d44 <HAL_TIM_Base_Start>
}
 8002c2c:	b009      	add	sp, #36	; 0x24
 8002c2e:	bd30      	pop	{r4, r5, pc}
 8002c30:	200002dc 	.word	0x200002dc
 8002c34:	200001fc 	.word	0x200001fc

08002c38 <SystemClock_Config>:
{
 8002c38:	b510      	push	{r4, lr}
 8002c3a:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c3c:	2228      	movs	r2, #40	; 0x28
 8002c3e:	2100      	movs	r1, #0
 8002c40:	a806      	add	r0, sp, #24
 8002c42:	f000 fafd 	bl	8003240 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c46:	2214      	movs	r2, #20
 8002c48:	2100      	movs	r1, #0
 8002c4a:	a801      	add	r0, sp, #4
 8002c4c:	f000 faf8 	bl	8003240 <memset>
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002c50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002c54:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002c56:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c58:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002c5a:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002c5c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c60:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002c62:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c64:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c66:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002c68:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c6a:	f7fe fb27 	bl	80012bc <HAL_RCC_OscConfig>
 8002c6e:	b108      	cbz	r0, 8002c74 <SystemClock_Config+0x3c>
    Error_Handler();
 8002c70:	f7ff ff88 	bl	8002b84 <Error_Handler>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c74:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002c76:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c7a:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c7c:	2300      	movs	r3, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002c7e:	2102      	movs	r1, #2
 8002c80:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c82:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c84:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002c86:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c88:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002c8a:	f7fe fd9f 	bl	80017cc <HAL_RCC_ClockConfig>
 8002c8e:	b108      	cbz	r0, 8002c94 <SystemClock_Config+0x5c>
    Error_Handler();
 8002c90:	f7ff ff78 	bl	8002b84 <Error_Handler>
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 8002c94:	2200      	movs	r2, #0
 8002c96:	f04f 61c0 	mov.w	r1, #100663296	; 0x6000000
 8002c9a:	4610      	mov	r0, r2
 8002c9c:	f7fe fd10 	bl	80016c0 <HAL_RCC_MCOConfig>
}
 8002ca0:	b010      	add	sp, #64	; 0x40
 8002ca2:	bd10      	pop	{r4, pc}

08002ca4 <main>:
{
 8002ca4:	b500      	push	{lr}
 8002ca6:	b08f      	sub	sp, #60	; 0x3c
  HAL_Init();
 8002ca8:	f7fe f81c 	bl	8000ce4 <HAL_Init>
  SystemClock_Config();
 8002cac:	f7ff ffc4 	bl	8002c38 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cb0:	2210      	movs	r2, #16
 8002cb2:	2100      	movs	r1, #0
 8002cb4:	a809      	add	r0, sp, #36	; 0x24
 8002cb6:	f000 fac3 	bl	8003240 <memset>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cba:	4b8f      	ldr	r3, [pc, #572]	; (8002ef8 <main+0x254>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cbc:	a909      	add	r1, sp, #36	; 0x24
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cbe:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cc0:	488e      	ldr	r0, [pc, #568]	; (8002efc <main+0x258>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cc2:	f042 0220 	orr.w	r2, r2, #32
 8002cc6:	619a      	str	r2, [r3, #24]
 8002cc8:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cca:	2400      	movs	r4, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ccc:	f002 0220 	and.w	r2, r2, #32
 8002cd0:	9200      	str	r2, [sp, #0]
 8002cd2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cd4:	699a      	ldr	r2, [r3, #24]
  huart1.Init.BaudRate = 115200;
 8002cd6:	f44f 35e1 	mov.w	r5, #115200	; 0x1c200
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cda:	f042 0204 	orr.w	r2, r2, #4
 8002cde:	619a      	str	r2, [r3, #24]
 8002ce0:	699a      	ldr	r2, [r3, #24]
 8002ce2:	f002 0204 	and.w	r2, r2, #4
 8002ce6:	9201      	str	r2, [sp, #4]
 8002ce8:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cea:	699a      	ldr	r2, [r3, #24]
 8002cec:	f042 0208 	orr.w	r2, r2, #8
 8002cf0:	619a      	str	r2, [r3, #24]
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	f003 0308 	and.w	r3, r3, #8
 8002cf8:	9302      	str	r3, [sp, #8]
 8002cfa:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002cfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d00:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d02:	2302      	movs	r3, #2
 8002d04:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d06:	2303      	movs	r3, #3
 8002d08:	930c      	str	r3, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d0a:	f7fe f8c3 	bl	8000e94 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = sw_div_Pin;
 8002d0e:	f44f 7300 	mov.w	r3, #512	; 0x200
  HAL_GPIO_Init(sw_div_GPIO_Port, &GPIO_InitStruct);
 8002d12:	487b      	ldr	r0, [pc, #492]	; (8002f00 <main+0x25c>)
 8002d14:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Pin = sw_div_Pin;
 8002d16:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d18:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1a:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(sw_div_GPIO_Port, &GPIO_InitStruct);
 8002d1c:	f7fe f8ba 	bl	8000e94 <HAL_GPIO_Init>
  huart1.Instance = USART1;
 8002d20:	4878      	ldr	r0, [pc, #480]	; (8002f04 <main+0x260>)
  huart1.Init.BaudRate = 115200;
 8002d22:	4b79      	ldr	r3, [pc, #484]	; (8002f08 <main+0x264>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002d24:	6084      	str	r4, [r0, #8]
  huart1.Init.BaudRate = 115200;
 8002d26:	e880 0028 	stmia.w	r0, {r3, r5}
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002d2a:	230c      	movs	r3, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002d2c:	60c4      	str	r4, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002d2e:	6104      	str	r4, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002d30:	6143      	str	r3, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d32:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d34:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002d36:	f7ff fddb 	bl	80028f0 <HAL_UART_Init>
 8002d3a:	b108      	cbz	r0, 8002d40 <main+0x9c>
    Error_Handler();
 8002d3c:	f7ff ff22 	bl	8002b84 <Error_Handler>
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002d40:	2214      	movs	r2, #20
 8002d42:	2100      	movs	r1, #0
 8002d44:	a809      	add	r0, sp, #36	; 0x24
 8002d46:	f000 fa7b 	bl	8003240 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d4a:	2300      	movs	r3, #0
  htim3.Instance = TIM3;
 8002d4c:	486f      	ldr	r0, [pc, #444]	; (8002f0c <main+0x268>)
 8002d4e:	4a70      	ldr	r2, [pc, #448]	; (8002f10 <main+0x26c>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d50:	ad05      	add	r5, sp, #20
  htim3.Init.Prescaler = 0;
 8002d52:	e880 000c 	stmia.w	r0, {r2, r3}
  htim3.Init.Period = 65535;
 8002d56:	f64f 72ff 	movw	r2, #65535	; 0xffff
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d5a:	9305      	str	r3, [sp, #20]
 8002d5c:	606b      	str	r3, [r5, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d5e:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 65535;
 8002d60:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d62:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d64:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002d66:	f7ff fbbb 	bl	80024e0 <HAL_TIM_Base_Init>
 8002d6a:	b108      	cbz	r0, 8002d70 <main+0xcc>
    Error_Handler();
 8002d6c:	f7ff ff0a 	bl	8002b84 <Error_Handler>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8002d70:	2307      	movs	r3, #7
 8002d72:	9309      	str	r3, [sp, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8002d74:	2310      	movs	r3, #16
  if (HAL_TIM_SlaveConfigSynchronization(&htim3, &sSlaveConfig) != HAL_OK)
 8002d76:	a909      	add	r1, sp, #36	; 0x24
 8002d78:	4864      	ldr	r0, [pc, #400]	; (8002f0c <main+0x268>)
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8002d7a:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchronization(&htim3, &sSlaveConfig) != HAL_OK)
 8002d7c:	f7ff fa84 	bl	8002288 <HAL_TIM_SlaveConfigSynchronization>
 8002d80:	b108      	cbz	r0, 8002d86 <main+0xe2>
    Error_Handler();
 8002d82:	f7ff feff 	bl	8002b84 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d86:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002d88:	4629      	mov	r1, r5
 8002d8a:	4860      	ldr	r0, [pc, #384]	; (8002f0c <main+0x268>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d8c:	9305      	str	r3, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d8e:	9306      	str	r3, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002d90:	f7ff fc64 	bl	800265c <HAL_TIMEx_MasterConfigSynchronization>
 8002d94:	b108      	cbz	r0, 8002d9a <main+0xf6>
    Error_Handler();
 8002d96:	f7ff fef5 	bl	8002b84 <Error_Handler>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d9a:	2410      	movs	r4, #16
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	4622      	mov	r2, r4
 8002da0:	a809      	add	r0, sp, #36	; 0x24
 8002da2:	f000 fa4d 	bl	8003240 <memset>
  htim1.Init.Prescaler = 7199;
 8002da6:	f641 421f 	movw	r2, #7199	; 0x1c1f
  htim1.Instance = TIM1;
 8002daa:	485a      	ldr	r0, [pc, #360]	; (8002f14 <main+0x270>)
  htim1.Init.Prescaler = 7199;
 8002dac:	495a      	ldr	r1, [pc, #360]	; (8002f18 <main+0x274>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dae:	2300      	movs	r3, #0
  htim1.Init.Prescaler = 7199;
 8002db0:	e880 0006 	stmia.w	r0, {r1, r2}
  htim1.Init.Period = 9999;
 8002db4:	f242 720f 	movw	r2, #9999	; 0x270f
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002db8:	9305      	str	r3, [sp, #20]
 8002dba:	606b      	str	r3, [r5, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8002dbc:	6084      	str	r4, [r0, #8]
  htim1.Init.Period = 9999;
 8002dbe:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dc0:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8002dc2:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dc4:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002dc6:	f7ff fb8b 	bl	80024e0 <HAL_TIM_Base_Init>
 8002dca:	b108      	cbz	r0, 8002dd0 <main+0x12c>
    Error_Handler();
 8002dcc:	f7ff feda 	bl	8002b84 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002dd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002dd4:	a909      	add	r1, sp, #36	; 0x24
 8002dd6:	484f      	ldr	r0, [pc, #316]	; (8002f14 <main+0x270>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002dd8:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002dda:	f7ff f835 	bl	8001e48 <HAL_TIM_ConfigClockSource>
 8002dde:	b108      	cbz	r0, 8002de4 <main+0x140>
    Error_Handler();
 8002de0:	f7ff fed0 	bl	8002b84 <Error_Handler>
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 8002de4:	2108      	movs	r1, #8
 8002de6:	484b      	ldr	r0, [pc, #300]	; (8002f14 <main+0x270>)
 8002de8:	f7ff fbce 	bl	8002588 <HAL_TIM_OnePulse_Init>
 8002dec:	b108      	cbz	r0, 8002df2 <main+0x14e>
    Error_Handler();
 8002dee:	f7ff fec9 	bl	8002b84 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8002df2:	2310      	movs	r3, #16
 8002df4:	9305      	str	r3, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8002df6:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002df8:	4629      	mov	r1, r5
 8002dfa:	4846      	ldr	r0, [pc, #280]	; (8002f14 <main+0x270>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8002dfc:	9306      	str	r3, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002dfe:	f7ff fc2d 	bl	800265c <HAL_TIMEx_MasterConfigSynchronization>
 8002e02:	b108      	cbz	r0, 8002e08 <main+0x164>
    Error_Handler();
 8002e04:	f7ff febe 	bl	8002b84 <Error_Handler>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e08:	2210      	movs	r2, #16
 8002e0a:	2100      	movs	r1, #0
 8002e0c:	4628      	mov	r0, r5
 8002e0e:	f000 fa17 	bl	8003240 <memset>
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002e12:	2214      	movs	r2, #20
 8002e14:	2100      	movs	r1, #0
 8002e16:	a809      	add	r0, sp, #36	; 0x24
 8002e18:	f000 fa12 	bl	8003240 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e1c:	2400      	movs	r4, #0
  htim2.Instance = TIM2;
 8002e1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002e22:	483e      	ldr	r0, [pc, #248]	; (8002f1c <main+0x278>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e24:	9403      	str	r4, [sp, #12]
  htim2.Init.Prescaler = 0;
 8002e26:	e880 0018 	stmia.w	r0, {r3, r4}
  htim2.Init.Period = 65535;
 8002e2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e2e:	9404      	str	r4, [sp, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e30:	6084      	str	r4, [r0, #8]
  htim2.Init.Period = 65535;
 8002e32:	60c3      	str	r3, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e34:	6104      	str	r4, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e36:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002e38:	f7ff fb52 	bl	80024e0 <HAL_TIM_Base_Init>
 8002e3c:	b108      	cbz	r0, 8002e42 <main+0x19e>
    Error_Handler();
 8002e3e:	f7ff fea1 	bl	8002b84 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8002e42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002e46:	4629      	mov	r1, r5
 8002e48:	4834      	ldr	r0, [pc, #208]	; (8002f1c <main+0x278>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8002e4a:	9305      	str	r3, [sp, #20]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8002e4c:	9406      	str	r4, [sp, #24]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8002e4e:	9407      	str	r4, [sp, #28]
  sClockSourceConfig.ClockFilter = 0;
 8002e50:	9408      	str	r4, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002e52:	f7fe fff9 	bl	8001e48 <HAL_TIM_ConfigClockSource>
 8002e56:	b108      	cbz	r0, 8002e5c <main+0x1b8>
    Error_Handler();
 8002e58:	f7ff fe94 	bl	8002b84 <Error_Handler>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 8002e5c:	2305      	movs	r3, #5
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8002e5e:	2400      	movs	r4, #0
  if (HAL_TIM_SlaveConfigSynchronization(&htim2, &sSlaveConfig) != HAL_OK)
 8002e60:	a909      	add	r1, sp, #36	; 0x24
 8002e62:	482e      	ldr	r0, [pc, #184]	; (8002f1c <main+0x278>)
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 8002e64:	9309      	str	r3, [sp, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8002e66:	940a      	str	r4, [sp, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchronization(&htim2, &sSlaveConfig) != HAL_OK)
 8002e68:	f7ff fa0e 	bl	8002288 <HAL_TIM_SlaveConfigSynchronization>
 8002e6c:	b108      	cbz	r0, 8002e72 <main+0x1ce>
    Error_Handler();
 8002e6e:	f7ff fe89 	bl	8002b84 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002e72:	2320      	movs	r3, #32
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e74:	a903      	add	r1, sp, #12
 8002e76:	4829      	ldr	r0, [pc, #164]	; (8002f1c <main+0x278>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002e78:	9303      	str	r3, [sp, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e7a:	9404      	str	r4, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e7c:	f7ff fbee 	bl	800265c <HAL_TIMEx_MasterConfigSynchronization>
 8002e80:	b108      	cbz	r0, 8002e86 <main+0x1e2>
    Error_Handler();
 8002e82:	f7ff fe7f 	bl	8002b84 <Error_Handler>
  MY_sClockSourceConfig = sClockSourceConfig;
 8002e86:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002e8a:	4c25      	ldr	r4, [pc, #148]	; (8002f20 <main+0x27c>)
	if(HAL_GPIO_ReadPin(sw_div_GPIO_Port, sw_div_Pin) == GPIO_PIN_SET)
 8002e8c:	4e1c      	ldr	r6, [pc, #112]	; (8002f00 <main+0x25c>)
  MY_sClockSourceConfig = sClockSourceConfig;
 8002e8e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  HAL_TIM_Base_Start_IT(&htim1);
 8002e92:	4820      	ldr	r0, [pc, #128]	; (8002f14 <main+0x270>)
 8002e94:	f7fe ffb0 	bl	8001df8 <HAL_TIM_Base_Start_IT>
		div++;
 8002e98:	4c22      	ldr	r4, [pc, #136]	; (8002f24 <main+0x280>)
  HAL_TIM_Base_Start(&htim2);
 8002e9a:	4820      	ldr	r0, [pc, #128]	; (8002f1c <main+0x278>)
 8002e9c:	f7fe ff52 	bl	8001d44 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3);
 8002ea0:	481a      	ldr	r0, [pc, #104]	; (8002f0c <main+0x268>)
 8002ea2:	f7fe ff4f 	bl	8001d44 <HAL_TIM_Base_Start>
 8002ea6:	4625      	mov	r5, r4
	if(HAL_GPIO_ReadPin(sw_div_GPIO_Port, sw_div_Pin) == GPIO_PIN_SET)
 8002ea8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002eac:	4630      	mov	r0, r6
 8002eae:	f7fe f9f3 	bl	8001298 <HAL_GPIO_ReadPin>
 8002eb2:	2801      	cmp	r0, #1
 8002eb4:	d1f8      	bne.n	8002ea8 <main+0x204>
		div++;
 8002eb6:	7823      	ldrb	r3, [r4, #0]
 8002eb8:	3301      	adds	r3, #1
 8002eba:	b2db      	uxtb	r3, r3
		if(div > 4) div = 1;
 8002ebc:	2b04      	cmp	r3, #4
		div++;
 8002ebe:	bf94      	ite	ls
 8002ec0:	7023      	strbls	r3, [r4, #0]
		if(div > 4) div = 1;
 8002ec2:	7020      	strbhi	r0, [r4, #0]
		switch(div)
 8002ec4:	782b      	ldrb	r3, [r5, #0]
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	2b03      	cmp	r3, #3
 8002eca:	d806      	bhi.n	8002eda <main+0x236>
 8002ecc:	e8df f003 	tbb	[pc, r3]
 8002ed0:	100d0a02 	.word	0x100d0a02
				SetClockPrescaler(TIM_CLOCKPRESCALER_DIV1);
 8002ed4:	2000      	movs	r0, #0
				SetClockPrescaler(TIM_CLOCKPRESCALER_DIV8);
 8002ed6:	f7ff fe61 	bl	8002b9c <SetClockPrescaler>
		HAL_Delay(300);
 8002eda:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002ede:	f7fd ff25 	bl	8000d2c <HAL_Delay>
 8002ee2:	e7e1      	b.n	8002ea8 <main+0x204>
				SetClockPrescaler(TIM_CLOCKPRESCALER_DIV2);
 8002ee4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002ee8:	e7f5      	b.n	8002ed6 <main+0x232>
				SetClockPrescaler(TIM_CLOCKPRESCALER_DIV4);
 8002eea:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002eee:	e7f2      	b.n	8002ed6 <main+0x232>
				SetClockPrescaler(TIM_CLOCKPRESCALER_DIV8);
 8002ef0:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 8002ef4:	e7ef      	b.n	8002ed6 <main+0x232>
 8002ef6:	bf00      	nop
 8002ef8:	40021000 	.word	0x40021000
 8002efc:	40010800 	.word	0x40010800
 8002f00:	40010c00 	.word	0x40010c00
 8002f04:	2000025c 	.word	0x2000025c
 8002f08:	40013800 	.word	0x40013800
 8002f0c:	2000021c 	.word	0x2000021c
 8002f10:	40000400 	.word	0x40000400
 8002f14:	2000029c 	.word	0x2000029c
 8002f18:	40012c00 	.word	0x40012c00
 8002f1c:	200002dc 	.word	0x200002dc
 8002f20:	200001fc 	.word	0x200001fc
 8002f24:	20000008 	.word	0x20000008

08002f28 <assert_failed>:
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
  /* USER CODE BEGIN 6 */
	HAL_UART_Transmit(&huart1, (uint8_t*)"ERROR\n", strlen("ERROR\n"), 1000);
 8002f28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f2c:	2206      	movs	r2, #6
 8002f2e:	4902      	ldr	r1, [pc, #8]	; (8002f38 <assert_failed+0x10>)
 8002f30:	4802      	ldr	r0, [pc, #8]	; (8002f3c <assert_failed+0x14>)
 8002f32:	f7ff bd45 	b.w	80029c0 <HAL_UART_Transmit>
 8002f36:	bf00      	nop
 8002f38:	08005579 	.word	0x08005579
 8002f3c:	2000025c 	.word	0x2000025c

08002f40 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002f40:	4b0e      	ldr	r3, [pc, #56]	; (8002f7c <HAL_MspInit+0x3c>)
{
 8002f42:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002f44:	699a      	ldr	r2, [r3, #24]
 8002f46:	f042 0201 	orr.w	r2, r2, #1
 8002f4a:	619a      	str	r2, [r3, #24]
 8002f4c:	699a      	ldr	r2, [r3, #24]
 8002f4e:	f002 0201 	and.w	r2, r2, #1
 8002f52:	9200      	str	r2, [sp, #0]
 8002f54:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f56:	69da      	ldr	r2, [r3, #28]
 8002f58:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002f5c:	61da      	str	r2, [r3, #28]
 8002f5e:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002f60:	4a07      	ldr	r2, [pc, #28]	; (8002f80 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f66:	9301      	str	r3, [sp, #4]
 8002f68:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002f6a:	6853      	ldr	r3, [r2, #4]
 8002f6c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002f70:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f74:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f76:	b002      	add	sp, #8
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	40021000 	.word	0x40021000
 8002f80:	40010000 	.word	0x40010000

08002f84 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f84:	2210      	movs	r2, #16
{
 8002f86:	b510      	push	{r4, lr}
 8002f88:	4604      	mov	r4, r0
 8002f8a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f8c:	eb0d 0002 	add.w	r0, sp, r2
 8002f90:	2100      	movs	r1, #0
 8002f92:	f000 f955 	bl	8003240 <memset>
  if(htim_base->Instance==TIM1)
 8002f96:	6823      	ldr	r3, [r4, #0]
 8002f98:	4a21      	ldr	r2, [pc, #132]	; (8003020 <HAL_TIM_Base_MspInit+0x9c>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d113      	bne.n	8002fc6 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002f9e:	4b21      	ldr	r3, [pc, #132]	; (8003024 <HAL_TIM_Base_MspInit+0xa0>)
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002fa0:	2019      	movs	r0, #25
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002fa2:	699a      	ldr	r2, [r3, #24]
 8002fa4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fa8:	619a      	str	r2, [r3, #24]
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002faa:	2200      	movs	r2, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002fac:	699b      	ldr	r3, [r3, #24]
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002fae:	4611      	mov	r1, r2
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002fb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fb4:	9300      	str	r3, [sp, #0]
 8002fb6:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002fb8:	f7fd fee8 	bl	8000d8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002fbc:	2019      	movs	r0, #25
 8002fbe:	f7fd ff27 	bl	8000e10 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002fc2:	b008      	add	sp, #32
 8002fc4:	bd10      	pop	{r4, pc}
  else if(htim_base->Instance==TIM2)
 8002fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fca:	d11a      	bne.n	8003002 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002fcc:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002fd0:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fd2:	a904      	add	r1, sp, #16
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002fd4:	f042 0201 	orr.w	r2, r2, #1
 8002fd8:	61da      	str	r2, [r3, #28]
 8002fda:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fdc:	4812      	ldr	r0, [pc, #72]	; (8003028 <HAL_TIM_Base_MspInit+0xa4>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002fde:	f002 0201 	and.w	r2, r2, #1
 8002fe2:	9201      	str	r2, [sp, #4]
 8002fe4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fe6:	699a      	ldr	r2, [r3, #24]
 8002fe8:	f042 0204 	orr.w	r2, r2, #4
 8002fec:	619a      	str	r2, [r3, #24]
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	f003 0304 	and.w	r3, r3, #4
 8002ff4:	9302      	str	r3, [sp, #8]
 8002ff6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ffc:	f7fd ff4a 	bl	8000e94 <HAL_GPIO_Init>
 8003000:	e7df      	b.n	8002fc2 <HAL_TIM_Base_MspInit+0x3e>
  else if(htim_base->Instance==TIM3)
 8003002:	4a0a      	ldr	r2, [pc, #40]	; (800302c <HAL_TIM_Base_MspInit+0xa8>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d1dc      	bne.n	8002fc2 <HAL_TIM_Base_MspInit+0x3e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003008:	4b06      	ldr	r3, [pc, #24]	; (8003024 <HAL_TIM_Base_MspInit+0xa0>)
 800300a:	69da      	ldr	r2, [r3, #28]
 800300c:	f042 0202 	orr.w	r2, r2, #2
 8003010:	61da      	str	r2, [r3, #28]
 8003012:	69db      	ldr	r3, [r3, #28]
 8003014:	f003 0302 	and.w	r3, r3, #2
 8003018:	9303      	str	r3, [sp, #12]
 800301a:	9b03      	ldr	r3, [sp, #12]
}
 800301c:	e7d1      	b.n	8002fc2 <HAL_TIM_Base_MspInit+0x3e>
 800301e:	bf00      	nop
 8003020:	40012c00 	.word	0x40012c00
 8003024:	40021000 	.word	0x40021000
 8003028:	40010800 	.word	0x40010800
 800302c:	40000400 	.word	0x40000400

08003030 <HAL_TIM_Base_MspDeInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 8003030:	6803      	ldr	r3, [r0, #0]
 8003032:	4a11      	ldr	r2, [pc, #68]	; (8003078 <HAL_TIM_Base_MspDeInit+0x48>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d108      	bne.n	800304a <HAL_TIM_Base_MspDeInit+0x1a>
  {
  /* USER CODE BEGIN TIM1_MspDeInit 0 */

  /* USER CODE END TIM1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM1_CLK_DISABLE();
 8003038:	f502 4264 	add.w	r2, r2, #58368	; 0xe400
 800303c:	6993      	ldr	r3, [r2, #24]

    /* TIM1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(TIM1_UP_IRQn);
 800303e:	2019      	movs	r0, #25
    __HAL_RCC_TIM1_CLK_DISABLE();
 8003040:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003044:	6193      	str	r3, [r2, #24]
    HAL_NVIC_DisableIRQ(TIM1_UP_IRQn);
 8003046:	f7fd bef9 	b.w	8000e3c <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN TIM1_MspDeInit 1 */

  /* USER CODE END TIM1_MspDeInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 800304a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800304e:	d108      	bne.n	8003062 <HAL_TIM_Base_MspDeInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspDeInit 0 */

  /* USER CODE END TIM2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM2_CLK_DISABLE();
 8003050:	4a0a      	ldr	r2, [pc, #40]	; (800307c <HAL_TIM_Base_MspDeInit+0x4c>)
  
    /**TIM2 GPIO Configuration    
    PA0-WKUP     ------> TIM2_ETR 
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0);
 8003052:	2101      	movs	r1, #1
    __HAL_RCC_TIM2_CLK_DISABLE();
 8003054:	69d3      	ldr	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0);
 8003056:	480a      	ldr	r0, [pc, #40]	; (8003080 <HAL_TIM_Base_MspDeInit+0x50>)
    __HAL_RCC_TIM2_CLK_DISABLE();
 8003058:	f023 0301 	bic.w	r3, r3, #1
 800305c:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0);
 800305e:	f7fe b885 	b.w	800116c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN TIM2_MspDeInit 1 */

  /* USER CODE END TIM2_MspDeInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8003062:	4a08      	ldr	r2, [pc, #32]	; (8003084 <HAL_TIM_Base_MspDeInit+0x54>)
 8003064:	4293      	cmp	r3, r2
  {
  /* USER CODE BEGIN TIM3_MspDeInit 0 */

  /* USER CODE END TIM3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM3_CLK_DISABLE();
 8003066:	bf01      	itttt	eq
 8003068:	f502 3203 	addeq.w	r2, r2, #134144	; 0x20c00
 800306c:	69d3      	ldreq	r3, [r2, #28]
 800306e:	f023 0302 	biceq.w	r3, r3, #2
 8003072:	61d3      	streq	r3, [r2, #28]
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	40012c00 	.word	0x40012c00
 800307c:	40021000 	.word	0x40021000
 8003080:	40010800 	.word	0x40010800
 8003084:	40000400 	.word	0x40000400

08003088 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003088:	b510      	push	{r4, lr}
 800308a:	4604      	mov	r4, r0
 800308c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800308e:	2210      	movs	r2, #16
 8003090:	2100      	movs	r1, #0
 8003092:	a802      	add	r0, sp, #8
 8003094:	f000 f8d4 	bl	8003240 <memset>
  if(huart->Instance==USART1)
 8003098:	6822      	ldr	r2, [r4, #0]
 800309a:	4b17      	ldr	r3, [pc, #92]	; (80030f8 <HAL_UART_MspInit+0x70>)
 800309c:	429a      	cmp	r2, r3
 800309e:	d128      	bne.n	80030f2 <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80030a0:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80030a4:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030a6:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 80030a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030ac:	619a      	str	r2, [r3, #24]
 80030ae:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030b0:	4812      	ldr	r0, [pc, #72]	; (80030fc <HAL_UART_MspInit+0x74>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80030b2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80030b6:	9200      	str	r2, [sp, #0]
 80030b8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030ba:	699a      	ldr	r2, [r3, #24]
 80030bc:	f042 0204 	orr.w	r2, r2, #4
 80030c0:	619a      	str	r2, [r3, #24]
 80030c2:	699b      	ldr	r3, [r3, #24]
 80030c4:	f003 0304 	and.w	r3, r3, #4
 80030c8:	9301      	str	r3, [sp, #4]
 80030ca:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80030cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030d0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030d2:	2302      	movs	r3, #2
 80030d4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80030d6:	2303      	movs	r3, #3
 80030d8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030da:	f7fd fedb 	bl	8000e94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80030de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030e2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030e4:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030e6:	a902      	add	r1, sp, #8
 80030e8:	4804      	ldr	r0, [pc, #16]	; (80030fc <HAL_UART_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030ea:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ec:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030ee:	f7fd fed1 	bl	8000e94 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80030f2:	b006      	add	sp, #24
 80030f4:	bd10      	pop	{r4, pc}
 80030f6:	bf00      	nop
 80030f8:	40013800 	.word	0x40013800
 80030fc:	40010800 	.word	0x40010800

08003100 <NMI_Handler>:
 8003100:	4770      	bx	lr

08003102 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003102:	e7fe      	b.n	8003102 <HardFault_Handler>

08003104 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003104:	e7fe      	b.n	8003104 <MemManage_Handler>

08003106 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003106:	e7fe      	b.n	8003106 <BusFault_Handler>

08003108 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003108:	e7fe      	b.n	8003108 <UsageFault_Handler>

0800310a <SVC_Handler>:
 800310a:	4770      	bx	lr

0800310c <DebugMon_Handler>:
 800310c:	4770      	bx	lr

0800310e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800310e:	4770      	bx	lr

08003110 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003110:	f7fd bdfa 	b.w	8000d08 <HAL_IncTick>

08003114 <TIM1_UP_IRQHandler>:
void TIM1_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003114:	4801      	ldr	r0, [pc, #4]	; (800311c <TIM1_UP_IRQHandler+0x8>)
 8003116:	f7ff b909 	b.w	800232c <HAL_TIM_IRQHandler>
 800311a:	bf00      	nop
 800311c:	2000029c 	.word	0x2000029c

08003120 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8003120:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003122:	4b0a      	ldr	r3, [pc, #40]	; (800314c <_sbrk+0x2c>)
{
 8003124:	4602      	mov	r2, r0
	if (heap_end == 0)
 8003126:	6819      	ldr	r1, [r3, #0]
 8003128:	b909      	cbnz	r1, 800312e <_sbrk+0xe>
		heap_end = &end;
 800312a:	4909      	ldr	r1, [pc, #36]	; (8003150 <_sbrk+0x30>)
 800312c:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 800312e:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8003130:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8003132:	4402      	add	r2, r0
 8003134:	428a      	cmp	r2, r1
 8003136:	d906      	bls.n	8003146 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8003138:	f000 f858 	bl	80031ec <__errno>
 800313c:	230c      	movs	r3, #12
 800313e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8003140:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003144:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8003146:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8003148:	bd08      	pop	{r3, pc}
 800314a:	bf00      	nop
 800314c:	2000020c 	.word	0x2000020c
 8003150:	20000320 	.word	0x20000320

08003154 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003154:	4b0f      	ldr	r3, [pc, #60]	; (8003194 <SystemInit+0x40>)
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	f042 0201 	orr.w	r2, r2, #1
 800315c:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800315e:	6859      	ldr	r1, [r3, #4]
 8003160:	4a0d      	ldr	r2, [pc, #52]	; (8003198 <SystemInit+0x44>)
 8003162:	400a      	ands	r2, r1
 8003164:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800316c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003170:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003178:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800317a:	685a      	ldr	r2, [r3, #4]
 800317c:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8003180:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8003182:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8003186:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003188:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800318c:	4b03      	ldr	r3, [pc, #12]	; (800319c <SystemInit+0x48>)
 800318e:	609a      	str	r2, [r3, #8]
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	40021000 	.word	0x40021000
 8003198:	f8ff0000 	.word	0xf8ff0000
 800319c:	e000ed00 	.word	0xe000ed00

080031a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80031a0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80031a2:	e003      	b.n	80031ac <LoopCopyDataInit>

080031a4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80031a4:	4b0b      	ldr	r3, [pc, #44]	; (80031d4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80031a6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80031a8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80031aa:	3104      	adds	r1, #4

080031ac <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80031ac:	480a      	ldr	r0, [pc, #40]	; (80031d8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80031ae:	4b0b      	ldr	r3, [pc, #44]	; (80031dc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80031b0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80031b2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80031b4:	d3f6      	bcc.n	80031a4 <CopyDataInit>
  ldr r2, =_sbss
 80031b6:	4a0a      	ldr	r2, [pc, #40]	; (80031e0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80031b8:	e002      	b.n	80031c0 <LoopFillZerobss>

080031ba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80031ba:	2300      	movs	r3, #0
  str r3, [r2], #4
 80031bc:	f842 3b04 	str.w	r3, [r2], #4

080031c0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80031c0:	4b08      	ldr	r3, [pc, #32]	; (80031e4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80031c2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80031c4:	d3f9      	bcc.n	80031ba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80031c6:	f7ff ffc5 	bl	8003154 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80031ca:	f000 f815 	bl	80031f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80031ce:	f7ff fd69 	bl	8002ca4 <main>
  bx lr
 80031d2:	4770      	bx	lr
  ldr r3, =_sidata
 80031d4:	08005800 	.word	0x08005800
  ldr r0, =_sdata
 80031d8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80031dc:	200001e0 	.word	0x200001e0
  ldr r2, =_sbss
 80031e0:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 80031e4:	20000320 	.word	0x20000320

080031e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80031e8:	e7fe      	b.n	80031e8 <ADC1_2_IRQHandler>
	...

080031ec <__errno>:
 80031ec:	4b01      	ldr	r3, [pc, #4]	; (80031f4 <__errno+0x8>)
 80031ee:	6818      	ldr	r0, [r3, #0]
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	20000010 	.word	0x20000010

080031f8 <__libc_init_array>:
 80031f8:	b570      	push	{r4, r5, r6, lr}
 80031fa:	2500      	movs	r5, #0
 80031fc:	4e0c      	ldr	r6, [pc, #48]	; (8003230 <__libc_init_array+0x38>)
 80031fe:	4c0d      	ldr	r4, [pc, #52]	; (8003234 <__libc_init_array+0x3c>)
 8003200:	1ba4      	subs	r4, r4, r6
 8003202:	10a4      	asrs	r4, r4, #2
 8003204:	42a5      	cmp	r5, r4
 8003206:	d109      	bne.n	800321c <__libc_init_array+0x24>
 8003208:	f002 f8a4 	bl	8005354 <_init>
 800320c:	2500      	movs	r5, #0
 800320e:	4e0a      	ldr	r6, [pc, #40]	; (8003238 <__libc_init_array+0x40>)
 8003210:	4c0a      	ldr	r4, [pc, #40]	; (800323c <__libc_init_array+0x44>)
 8003212:	1ba4      	subs	r4, r4, r6
 8003214:	10a4      	asrs	r4, r4, #2
 8003216:	42a5      	cmp	r5, r4
 8003218:	d105      	bne.n	8003226 <__libc_init_array+0x2e>
 800321a:	bd70      	pop	{r4, r5, r6, pc}
 800321c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003220:	4798      	blx	r3
 8003222:	3501      	adds	r5, #1
 8003224:	e7ee      	b.n	8003204 <__libc_init_array+0xc>
 8003226:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800322a:	4798      	blx	r3
 800322c:	3501      	adds	r5, #1
 800322e:	e7f2      	b.n	8003216 <__libc_init_array+0x1e>
 8003230:	080057f8 	.word	0x080057f8
 8003234:	080057f8 	.word	0x080057f8
 8003238:	080057f8 	.word	0x080057f8
 800323c:	080057fc 	.word	0x080057fc

08003240 <memset>:
 8003240:	4603      	mov	r3, r0
 8003242:	4402      	add	r2, r0
 8003244:	4293      	cmp	r3, r2
 8003246:	d100      	bne.n	800324a <memset+0xa>
 8003248:	4770      	bx	lr
 800324a:	f803 1b01 	strb.w	r1, [r3], #1
 800324e:	e7f9      	b.n	8003244 <memset+0x4>

08003250 <__cvt>:
 8003250:	2b00      	cmp	r3, #0
 8003252:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003256:	461e      	mov	r6, r3
 8003258:	bfbb      	ittet	lt
 800325a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800325e:	461e      	movlt	r6, r3
 8003260:	2300      	movge	r3, #0
 8003262:	232d      	movlt	r3, #45	; 0x2d
 8003264:	b088      	sub	sp, #32
 8003266:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8003268:	9912      	ldr	r1, [sp, #72]	; 0x48
 800326a:	f027 0720 	bic.w	r7, r7, #32
 800326e:	2f46      	cmp	r7, #70	; 0x46
 8003270:	4614      	mov	r4, r2
 8003272:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003274:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003278:	700b      	strb	r3, [r1, #0]
 800327a:	d004      	beq.n	8003286 <__cvt+0x36>
 800327c:	2f45      	cmp	r7, #69	; 0x45
 800327e:	d100      	bne.n	8003282 <__cvt+0x32>
 8003280:	3501      	adds	r5, #1
 8003282:	2302      	movs	r3, #2
 8003284:	e000      	b.n	8003288 <__cvt+0x38>
 8003286:	2303      	movs	r3, #3
 8003288:	aa07      	add	r2, sp, #28
 800328a:	9204      	str	r2, [sp, #16]
 800328c:	aa06      	add	r2, sp, #24
 800328e:	9203      	str	r2, [sp, #12]
 8003290:	e88d 0428 	stmia.w	sp, {r3, r5, sl}
 8003294:	4622      	mov	r2, r4
 8003296:	4633      	mov	r3, r6
 8003298:	f000 fd06 	bl	8003ca8 <_dtoa_r>
 800329c:	2f47      	cmp	r7, #71	; 0x47
 800329e:	4680      	mov	r8, r0
 80032a0:	d102      	bne.n	80032a8 <__cvt+0x58>
 80032a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80032a4:	07db      	lsls	r3, r3, #31
 80032a6:	d526      	bpl.n	80032f6 <__cvt+0xa6>
 80032a8:	2f46      	cmp	r7, #70	; 0x46
 80032aa:	eb08 0905 	add.w	r9, r8, r5
 80032ae:	d111      	bne.n	80032d4 <__cvt+0x84>
 80032b0:	f898 3000 	ldrb.w	r3, [r8]
 80032b4:	2b30      	cmp	r3, #48	; 0x30
 80032b6:	d10a      	bne.n	80032ce <__cvt+0x7e>
 80032b8:	2200      	movs	r2, #0
 80032ba:	2300      	movs	r3, #0
 80032bc:	4620      	mov	r0, r4
 80032be:	4631      	mov	r1, r6
 80032c0:	f7fd fb6e 	bl	80009a0 <__aeabi_dcmpeq>
 80032c4:	b918      	cbnz	r0, 80032ce <__cvt+0x7e>
 80032c6:	f1c5 0501 	rsb	r5, r5, #1
 80032ca:	f8ca 5000 	str.w	r5, [sl]
 80032ce:	f8da 3000 	ldr.w	r3, [sl]
 80032d2:	4499      	add	r9, r3
 80032d4:	2200      	movs	r2, #0
 80032d6:	2300      	movs	r3, #0
 80032d8:	4620      	mov	r0, r4
 80032da:	4631      	mov	r1, r6
 80032dc:	f7fd fb60 	bl	80009a0 <__aeabi_dcmpeq>
 80032e0:	b938      	cbnz	r0, 80032f2 <__cvt+0xa2>
 80032e2:	2230      	movs	r2, #48	; 0x30
 80032e4:	9b07      	ldr	r3, [sp, #28]
 80032e6:	4599      	cmp	r9, r3
 80032e8:	d905      	bls.n	80032f6 <__cvt+0xa6>
 80032ea:	1c59      	adds	r1, r3, #1
 80032ec:	9107      	str	r1, [sp, #28]
 80032ee:	701a      	strb	r2, [r3, #0]
 80032f0:	e7f8      	b.n	80032e4 <__cvt+0x94>
 80032f2:	f8cd 901c 	str.w	r9, [sp, #28]
 80032f6:	4640      	mov	r0, r8
 80032f8:	9b07      	ldr	r3, [sp, #28]
 80032fa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80032fc:	eba3 0308 	sub.w	r3, r3, r8
 8003300:	6013      	str	r3, [r2, #0]
 8003302:	b008      	add	sp, #32
 8003304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003308 <__exponent>:
 8003308:	4603      	mov	r3, r0
 800330a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800330c:	2900      	cmp	r1, #0
 800330e:	f803 2b02 	strb.w	r2, [r3], #2
 8003312:	bfb6      	itet	lt
 8003314:	222d      	movlt	r2, #45	; 0x2d
 8003316:	222b      	movge	r2, #43	; 0x2b
 8003318:	4249      	neglt	r1, r1
 800331a:	2909      	cmp	r1, #9
 800331c:	7042      	strb	r2, [r0, #1]
 800331e:	dd21      	ble.n	8003364 <__exponent+0x5c>
 8003320:	f10d 0207 	add.w	r2, sp, #7
 8003324:	4617      	mov	r7, r2
 8003326:	260a      	movs	r6, #10
 8003328:	fb91 f5f6 	sdiv	r5, r1, r6
 800332c:	fb06 1115 	mls	r1, r6, r5, r1
 8003330:	2d09      	cmp	r5, #9
 8003332:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8003336:	f802 1c01 	strb.w	r1, [r2, #-1]
 800333a:	f102 34ff 	add.w	r4, r2, #4294967295	; 0xffffffff
 800333e:	4629      	mov	r1, r5
 8003340:	dc09      	bgt.n	8003356 <__exponent+0x4e>
 8003342:	3130      	adds	r1, #48	; 0x30
 8003344:	3a02      	subs	r2, #2
 8003346:	f804 1c01 	strb.w	r1, [r4, #-1]
 800334a:	42ba      	cmp	r2, r7
 800334c:	461c      	mov	r4, r3
 800334e:	d304      	bcc.n	800335a <__exponent+0x52>
 8003350:	1a20      	subs	r0, r4, r0
 8003352:	b003      	add	sp, #12
 8003354:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003356:	4622      	mov	r2, r4
 8003358:	e7e6      	b.n	8003328 <__exponent+0x20>
 800335a:	f812 1b01 	ldrb.w	r1, [r2], #1
 800335e:	f803 1b01 	strb.w	r1, [r3], #1
 8003362:	e7f2      	b.n	800334a <__exponent+0x42>
 8003364:	2230      	movs	r2, #48	; 0x30
 8003366:	461c      	mov	r4, r3
 8003368:	4411      	add	r1, r2
 800336a:	f804 2b02 	strb.w	r2, [r4], #2
 800336e:	7059      	strb	r1, [r3, #1]
 8003370:	e7ee      	b.n	8003350 <__exponent+0x48>
	...

08003374 <_printf_float>:
 8003374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003378:	b091      	sub	sp, #68	; 0x44
 800337a:	460c      	mov	r4, r1
 800337c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800337e:	4693      	mov	fp, r2
 8003380:	461e      	mov	r6, r3
 8003382:	4605      	mov	r5, r0
 8003384:	f001 fa64 	bl	8004850 <_localeconv_r>
 8003388:	6803      	ldr	r3, [r0, #0]
 800338a:	4618      	mov	r0, r3
 800338c:	9309      	str	r3, [sp, #36]	; 0x24
 800338e:	f7fc fedf 	bl	8000150 <strlen>
 8003392:	2300      	movs	r3, #0
 8003394:	930e      	str	r3, [sp, #56]	; 0x38
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	900a      	str	r0, [sp, #40]	; 0x28
 800339a:	3307      	adds	r3, #7
 800339c:	f023 0307 	bic.w	r3, r3, #7
 80033a0:	f103 0208 	add.w	r2, r3, #8
 80033a4:	f894 8018 	ldrb.w	r8, [r4, #24]
 80033a8:	f8d4 a000 	ldr.w	sl, [r4]
 80033ac:	603a      	str	r2, [r7, #0]
 80033ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80033b6:	f8d4 904c 	ldr.w	r9, [r4, #76]	; 0x4c
 80033ba:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 80033bc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80033c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80033c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80033c6:	4ba6      	ldr	r3, [pc, #664]	; (8003660 <_printf_float+0x2ec>)
 80033c8:	4638      	mov	r0, r7
 80033ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80033cc:	f7fd fb1a 	bl	8000a04 <__aeabi_dcmpun>
 80033d0:	2800      	cmp	r0, #0
 80033d2:	f040 81f7 	bne.w	80037c4 <_printf_float+0x450>
 80033d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80033da:	4ba1      	ldr	r3, [pc, #644]	; (8003660 <_printf_float+0x2ec>)
 80033dc:	4638      	mov	r0, r7
 80033de:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80033e0:	f7fd faf2 	bl	80009c8 <__aeabi_dcmple>
 80033e4:	2800      	cmp	r0, #0
 80033e6:	f040 81ed 	bne.w	80037c4 <_printf_float+0x450>
 80033ea:	2200      	movs	r2, #0
 80033ec:	2300      	movs	r3, #0
 80033ee:	4638      	mov	r0, r7
 80033f0:	4649      	mov	r1, r9
 80033f2:	f7fd fadf 	bl	80009b4 <__aeabi_dcmplt>
 80033f6:	b110      	cbz	r0, 80033fe <_printf_float+0x8a>
 80033f8:	232d      	movs	r3, #45	; 0x2d
 80033fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033fe:	4b99      	ldr	r3, [pc, #612]	; (8003664 <_printf_float+0x2f0>)
 8003400:	4f99      	ldr	r7, [pc, #612]	; (8003668 <_printf_float+0x2f4>)
 8003402:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003406:	bf98      	it	ls
 8003408:	461f      	movls	r7, r3
 800340a:	2303      	movs	r3, #3
 800340c:	f04f 0900 	mov.w	r9, #0
 8003410:	6123      	str	r3, [r4, #16]
 8003412:	f02a 0304 	bic.w	r3, sl, #4
 8003416:	6023      	str	r3, [r4, #0]
 8003418:	9600      	str	r6, [sp, #0]
 800341a:	465b      	mov	r3, fp
 800341c:	aa0f      	add	r2, sp, #60	; 0x3c
 800341e:	4621      	mov	r1, r4
 8003420:	4628      	mov	r0, r5
 8003422:	f000 f9df 	bl	80037e4 <_printf_common>
 8003426:	3001      	adds	r0, #1
 8003428:	f040 809a 	bne.w	8003560 <_printf_float+0x1ec>
 800342c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003430:	b011      	add	sp, #68	; 0x44
 8003432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003436:	6862      	ldr	r2, [r4, #4]
 8003438:	a80e      	add	r0, sp, #56	; 0x38
 800343a:	1c53      	adds	r3, r2, #1
 800343c:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
 8003440:	f44a 6380 	orr.w	r3, sl, #1024	; 0x400
 8003444:	d141      	bne.n	80034ca <_printf_float+0x156>
 8003446:	2206      	movs	r2, #6
 8003448:	6062      	str	r2, [r4, #4]
 800344a:	2100      	movs	r1, #0
 800344c:	6023      	str	r3, [r4, #0]
 800344e:	9301      	str	r3, [sp, #4]
 8003450:	6863      	ldr	r3, [r4, #4]
 8003452:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003456:	9005      	str	r0, [sp, #20]
 8003458:	9202      	str	r2, [sp, #8]
 800345a:	9300      	str	r3, [sp, #0]
 800345c:	463a      	mov	r2, r7
 800345e:	464b      	mov	r3, r9
 8003460:	9106      	str	r1, [sp, #24]
 8003462:	f8cd 8010 	str.w	r8, [sp, #16]
 8003466:	f8cd e00c 	str.w	lr, [sp, #12]
 800346a:	4628      	mov	r0, r5
 800346c:	f7ff fef0 	bl	8003250 <__cvt>
 8003470:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8003474:	2b47      	cmp	r3, #71	; 0x47
 8003476:	4607      	mov	r7, r0
 8003478:	d109      	bne.n	800348e <_printf_float+0x11a>
 800347a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800347c:	1cd8      	adds	r0, r3, #3
 800347e:	db02      	blt.n	8003486 <_printf_float+0x112>
 8003480:	6862      	ldr	r2, [r4, #4]
 8003482:	4293      	cmp	r3, r2
 8003484:	dd59      	ble.n	800353a <_printf_float+0x1c6>
 8003486:	f1a8 0802 	sub.w	r8, r8, #2
 800348a:	fa5f f888 	uxtb.w	r8, r8
 800348e:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8003492:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003494:	d836      	bhi.n	8003504 <_printf_float+0x190>
 8003496:	3901      	subs	r1, #1
 8003498:	4642      	mov	r2, r8
 800349a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800349e:	910d      	str	r1, [sp, #52]	; 0x34
 80034a0:	f7ff ff32 	bl	8003308 <__exponent>
 80034a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80034a6:	4681      	mov	r9, r0
 80034a8:	1883      	adds	r3, r0, r2
 80034aa:	2a01      	cmp	r2, #1
 80034ac:	6123      	str	r3, [r4, #16]
 80034ae:	dc02      	bgt.n	80034b6 <_printf_float+0x142>
 80034b0:	6822      	ldr	r2, [r4, #0]
 80034b2:	07d1      	lsls	r1, r2, #31
 80034b4:	d501      	bpl.n	80034ba <_printf_float+0x146>
 80034b6:	3301      	adds	r3, #1
 80034b8:	6123      	str	r3, [r4, #16]
 80034ba:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d0aa      	beq.n	8003418 <_printf_float+0xa4>
 80034c2:	232d      	movs	r3, #45	; 0x2d
 80034c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80034c8:	e7a6      	b.n	8003418 <_printf_float+0xa4>
 80034ca:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80034ce:	d002      	beq.n	80034d6 <_printf_float+0x162>
 80034d0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80034d4:	d1b9      	bne.n	800344a <_printf_float+0xd6>
 80034d6:	b19a      	cbz	r2, 8003500 <_printf_float+0x18c>
 80034d8:	2100      	movs	r1, #0
 80034da:	9106      	str	r1, [sp, #24]
 80034dc:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 80034e0:	e88d 000c 	stmia.w	sp, {r2, r3}
 80034e4:	6023      	str	r3, [r4, #0]
 80034e6:	9005      	str	r0, [sp, #20]
 80034e8:	463a      	mov	r2, r7
 80034ea:	f8cd 8010 	str.w	r8, [sp, #16]
 80034ee:	f8cd e00c 	str.w	lr, [sp, #12]
 80034f2:	9102      	str	r1, [sp, #8]
 80034f4:	464b      	mov	r3, r9
 80034f6:	4628      	mov	r0, r5
 80034f8:	f7ff feaa 	bl	8003250 <__cvt>
 80034fc:	4607      	mov	r7, r0
 80034fe:	e7bc      	b.n	800347a <_printf_float+0x106>
 8003500:	2201      	movs	r2, #1
 8003502:	e7a1      	b.n	8003448 <_printf_float+0xd4>
 8003504:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8003508:	d119      	bne.n	800353e <_printf_float+0x1ca>
 800350a:	2900      	cmp	r1, #0
 800350c:	6863      	ldr	r3, [r4, #4]
 800350e:	dd0c      	ble.n	800352a <_printf_float+0x1b6>
 8003510:	6121      	str	r1, [r4, #16]
 8003512:	b913      	cbnz	r3, 800351a <_printf_float+0x1a6>
 8003514:	6822      	ldr	r2, [r4, #0]
 8003516:	07d2      	lsls	r2, r2, #31
 8003518:	d502      	bpl.n	8003520 <_printf_float+0x1ac>
 800351a:	3301      	adds	r3, #1
 800351c:	440b      	add	r3, r1
 800351e:	6123      	str	r3, [r4, #16]
 8003520:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003522:	f04f 0900 	mov.w	r9, #0
 8003526:	65a3      	str	r3, [r4, #88]	; 0x58
 8003528:	e7c7      	b.n	80034ba <_printf_float+0x146>
 800352a:	b913      	cbnz	r3, 8003532 <_printf_float+0x1be>
 800352c:	6822      	ldr	r2, [r4, #0]
 800352e:	07d0      	lsls	r0, r2, #31
 8003530:	d501      	bpl.n	8003536 <_printf_float+0x1c2>
 8003532:	3302      	adds	r3, #2
 8003534:	e7f3      	b.n	800351e <_printf_float+0x1aa>
 8003536:	2301      	movs	r3, #1
 8003538:	e7f1      	b.n	800351e <_printf_float+0x1aa>
 800353a:	f04f 0867 	mov.w	r8, #103	; 0x67
 800353e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003540:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003542:	4293      	cmp	r3, r2
 8003544:	db05      	blt.n	8003552 <_printf_float+0x1de>
 8003546:	6822      	ldr	r2, [r4, #0]
 8003548:	6123      	str	r3, [r4, #16]
 800354a:	07d1      	lsls	r1, r2, #31
 800354c:	d5e8      	bpl.n	8003520 <_printf_float+0x1ac>
 800354e:	3301      	adds	r3, #1
 8003550:	e7e5      	b.n	800351e <_printf_float+0x1aa>
 8003552:	2b00      	cmp	r3, #0
 8003554:	bfcc      	ite	gt
 8003556:	2301      	movgt	r3, #1
 8003558:	f1c3 0302 	rsble	r3, r3, #2
 800355c:	4413      	add	r3, r2
 800355e:	e7de      	b.n	800351e <_printf_float+0x1aa>
 8003560:	6823      	ldr	r3, [r4, #0]
 8003562:	055a      	lsls	r2, r3, #21
 8003564:	d407      	bmi.n	8003576 <_printf_float+0x202>
 8003566:	6923      	ldr	r3, [r4, #16]
 8003568:	463a      	mov	r2, r7
 800356a:	4659      	mov	r1, fp
 800356c:	4628      	mov	r0, r5
 800356e:	47b0      	blx	r6
 8003570:	3001      	adds	r0, #1
 8003572:	d12a      	bne.n	80035ca <_printf_float+0x256>
 8003574:	e75a      	b.n	800342c <_printf_float+0xb8>
 8003576:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800357a:	f240 80dc 	bls.w	8003736 <_printf_float+0x3c2>
 800357e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003582:	2200      	movs	r2, #0
 8003584:	2300      	movs	r3, #0
 8003586:	f7fd fa0b 	bl	80009a0 <__aeabi_dcmpeq>
 800358a:	2800      	cmp	r0, #0
 800358c:	d039      	beq.n	8003602 <_printf_float+0x28e>
 800358e:	2301      	movs	r3, #1
 8003590:	4a36      	ldr	r2, [pc, #216]	; (800366c <_printf_float+0x2f8>)
 8003592:	4659      	mov	r1, fp
 8003594:	4628      	mov	r0, r5
 8003596:	47b0      	blx	r6
 8003598:	3001      	adds	r0, #1
 800359a:	f43f af47 	beq.w	800342c <_printf_float+0xb8>
 800359e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80035a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80035a2:	429a      	cmp	r2, r3
 80035a4:	db02      	blt.n	80035ac <_printf_float+0x238>
 80035a6:	6823      	ldr	r3, [r4, #0]
 80035a8:	07d8      	lsls	r0, r3, #31
 80035aa:	d50e      	bpl.n	80035ca <_printf_float+0x256>
 80035ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80035ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80035b0:	4659      	mov	r1, fp
 80035b2:	4628      	mov	r0, r5
 80035b4:	47b0      	blx	r6
 80035b6:	3001      	adds	r0, #1
 80035b8:	f43f af38 	beq.w	800342c <_printf_float+0xb8>
 80035bc:	2700      	movs	r7, #0
 80035be:	f104 081a 	add.w	r8, r4, #26
 80035c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80035c4:	3b01      	subs	r3, #1
 80035c6:	429f      	cmp	r7, r3
 80035c8:	db11      	blt.n	80035ee <_printf_float+0x27a>
 80035ca:	6823      	ldr	r3, [r4, #0]
 80035cc:	079f      	lsls	r7, r3, #30
 80035ce:	d508      	bpl.n	80035e2 <_printf_float+0x26e>
 80035d0:	2700      	movs	r7, #0
 80035d2:	f104 0819 	add.w	r8, r4, #25
 80035d6:	68e3      	ldr	r3, [r4, #12]
 80035d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80035da:	1a9b      	subs	r3, r3, r2
 80035dc:	429f      	cmp	r7, r3
 80035de:	f2c0 80e7 	blt.w	80037b0 <_printf_float+0x43c>
 80035e2:	68e0      	ldr	r0, [r4, #12]
 80035e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80035e6:	4298      	cmp	r0, r3
 80035e8:	bfb8      	it	lt
 80035ea:	4618      	movlt	r0, r3
 80035ec:	e720      	b.n	8003430 <_printf_float+0xbc>
 80035ee:	2301      	movs	r3, #1
 80035f0:	4642      	mov	r2, r8
 80035f2:	4659      	mov	r1, fp
 80035f4:	4628      	mov	r0, r5
 80035f6:	47b0      	blx	r6
 80035f8:	3001      	adds	r0, #1
 80035fa:	f43f af17 	beq.w	800342c <_printf_float+0xb8>
 80035fe:	3701      	adds	r7, #1
 8003600:	e7df      	b.n	80035c2 <_printf_float+0x24e>
 8003602:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003604:	2b00      	cmp	r3, #0
 8003606:	dc33      	bgt.n	8003670 <_printf_float+0x2fc>
 8003608:	2301      	movs	r3, #1
 800360a:	4a18      	ldr	r2, [pc, #96]	; (800366c <_printf_float+0x2f8>)
 800360c:	4659      	mov	r1, fp
 800360e:	4628      	mov	r0, r5
 8003610:	47b0      	blx	r6
 8003612:	3001      	adds	r0, #1
 8003614:	f43f af0a 	beq.w	800342c <_printf_float+0xb8>
 8003618:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800361a:	b923      	cbnz	r3, 8003626 <_printf_float+0x2b2>
 800361c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800361e:	b913      	cbnz	r3, 8003626 <_printf_float+0x2b2>
 8003620:	6823      	ldr	r3, [r4, #0]
 8003622:	07d9      	lsls	r1, r3, #31
 8003624:	d5d1      	bpl.n	80035ca <_printf_float+0x256>
 8003626:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003628:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800362a:	4659      	mov	r1, fp
 800362c:	4628      	mov	r0, r5
 800362e:	47b0      	blx	r6
 8003630:	3001      	adds	r0, #1
 8003632:	f43f aefb 	beq.w	800342c <_printf_float+0xb8>
 8003636:	f04f 0800 	mov.w	r8, #0
 800363a:	f104 091a 	add.w	r9, r4, #26
 800363e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003640:	425b      	negs	r3, r3
 8003642:	4598      	cmp	r8, r3
 8003644:	db01      	blt.n	800364a <_printf_float+0x2d6>
 8003646:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003648:	e78e      	b.n	8003568 <_printf_float+0x1f4>
 800364a:	2301      	movs	r3, #1
 800364c:	464a      	mov	r2, r9
 800364e:	4659      	mov	r1, fp
 8003650:	4628      	mov	r0, r5
 8003652:	47b0      	blx	r6
 8003654:	3001      	adds	r0, #1
 8003656:	f43f aee9 	beq.w	800342c <_printf_float+0xb8>
 800365a:	f108 0801 	add.w	r8, r8, #1
 800365e:	e7ee      	b.n	800363e <_printf_float+0x2ca>
 8003660:	7fefffff 	.word	0x7fefffff
 8003664:	08005598 	.word	0x08005598
 8003668:	0800559c 	.word	0x0800559c
 800366c:	080055a8 	.word	0x080055a8
 8003670:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003672:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003674:	429a      	cmp	r2, r3
 8003676:	bfa8      	it	ge
 8003678:	461a      	movge	r2, r3
 800367a:	2a00      	cmp	r2, #0
 800367c:	4690      	mov	r8, r2
 800367e:	dc36      	bgt.n	80036ee <_printf_float+0x37a>
 8003680:	f04f 0a00 	mov.w	sl, #0
 8003684:	f104 031a 	add.w	r3, r4, #26
 8003688:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 800368c:	930b      	str	r3, [sp, #44]	; 0x2c
 800368e:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8003692:	eba9 0308 	sub.w	r3, r9, r8
 8003696:	459a      	cmp	sl, r3
 8003698:	db31      	blt.n	80036fe <_printf_float+0x38a>
 800369a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800369c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800369e:	429a      	cmp	r2, r3
 80036a0:	db38      	blt.n	8003714 <_printf_float+0x3a0>
 80036a2:	6823      	ldr	r3, [r4, #0]
 80036a4:	07da      	lsls	r2, r3, #31
 80036a6:	d435      	bmi.n	8003714 <_printf_float+0x3a0>
 80036a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80036aa:	990d      	ldr	r1, [sp, #52]	; 0x34
 80036ac:	eba3 0209 	sub.w	r2, r3, r9
 80036b0:	eba3 0801 	sub.w	r8, r3, r1
 80036b4:	4590      	cmp	r8, r2
 80036b6:	bfa8      	it	ge
 80036b8:	4690      	movge	r8, r2
 80036ba:	f1b8 0f00 	cmp.w	r8, #0
 80036be:	dc31      	bgt.n	8003724 <_printf_float+0x3b0>
 80036c0:	2700      	movs	r7, #0
 80036c2:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 80036c6:	f104 091a 	add.w	r9, r4, #26
 80036ca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80036cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80036ce:	1a9b      	subs	r3, r3, r2
 80036d0:	eba3 0308 	sub.w	r3, r3, r8
 80036d4:	429f      	cmp	r7, r3
 80036d6:	f6bf af78 	bge.w	80035ca <_printf_float+0x256>
 80036da:	2301      	movs	r3, #1
 80036dc:	464a      	mov	r2, r9
 80036de:	4659      	mov	r1, fp
 80036e0:	4628      	mov	r0, r5
 80036e2:	47b0      	blx	r6
 80036e4:	3001      	adds	r0, #1
 80036e6:	f43f aea1 	beq.w	800342c <_printf_float+0xb8>
 80036ea:	3701      	adds	r7, #1
 80036ec:	e7ed      	b.n	80036ca <_printf_float+0x356>
 80036ee:	4613      	mov	r3, r2
 80036f0:	4659      	mov	r1, fp
 80036f2:	463a      	mov	r2, r7
 80036f4:	4628      	mov	r0, r5
 80036f6:	47b0      	blx	r6
 80036f8:	3001      	adds	r0, #1
 80036fa:	d1c1      	bne.n	8003680 <_printf_float+0x30c>
 80036fc:	e696      	b.n	800342c <_printf_float+0xb8>
 80036fe:	2301      	movs	r3, #1
 8003700:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003702:	4659      	mov	r1, fp
 8003704:	4628      	mov	r0, r5
 8003706:	47b0      	blx	r6
 8003708:	3001      	adds	r0, #1
 800370a:	f43f ae8f 	beq.w	800342c <_printf_float+0xb8>
 800370e:	f10a 0a01 	add.w	sl, sl, #1
 8003712:	e7bc      	b.n	800368e <_printf_float+0x31a>
 8003714:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003716:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003718:	4659      	mov	r1, fp
 800371a:	4628      	mov	r0, r5
 800371c:	47b0      	blx	r6
 800371e:	3001      	adds	r0, #1
 8003720:	d1c2      	bne.n	80036a8 <_printf_float+0x334>
 8003722:	e683      	b.n	800342c <_printf_float+0xb8>
 8003724:	4643      	mov	r3, r8
 8003726:	eb07 0209 	add.w	r2, r7, r9
 800372a:	4659      	mov	r1, fp
 800372c:	4628      	mov	r0, r5
 800372e:	47b0      	blx	r6
 8003730:	3001      	adds	r0, #1
 8003732:	d1c5      	bne.n	80036c0 <_printf_float+0x34c>
 8003734:	e67a      	b.n	800342c <_printf_float+0xb8>
 8003736:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003738:	2a01      	cmp	r2, #1
 800373a:	dc01      	bgt.n	8003740 <_printf_float+0x3cc>
 800373c:	07db      	lsls	r3, r3, #31
 800373e:	d534      	bpl.n	80037aa <_printf_float+0x436>
 8003740:	2301      	movs	r3, #1
 8003742:	463a      	mov	r2, r7
 8003744:	4659      	mov	r1, fp
 8003746:	4628      	mov	r0, r5
 8003748:	47b0      	blx	r6
 800374a:	3001      	adds	r0, #1
 800374c:	f43f ae6e 	beq.w	800342c <_printf_float+0xb8>
 8003750:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003752:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003754:	4659      	mov	r1, fp
 8003756:	4628      	mov	r0, r5
 8003758:	47b0      	blx	r6
 800375a:	3001      	adds	r0, #1
 800375c:	f43f ae66 	beq.w	800342c <_printf_float+0xb8>
 8003760:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003764:	2200      	movs	r2, #0
 8003766:	2300      	movs	r3, #0
 8003768:	f7fd f91a 	bl	80009a0 <__aeabi_dcmpeq>
 800376c:	b150      	cbz	r0, 8003784 <_printf_float+0x410>
 800376e:	2700      	movs	r7, #0
 8003770:	f104 081a 	add.w	r8, r4, #26
 8003774:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003776:	3b01      	subs	r3, #1
 8003778:	429f      	cmp	r7, r3
 800377a:	db0c      	blt.n	8003796 <_printf_float+0x422>
 800377c:	464b      	mov	r3, r9
 800377e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003782:	e6f2      	b.n	800356a <_printf_float+0x1f6>
 8003784:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003786:	1c7a      	adds	r2, r7, #1
 8003788:	3b01      	subs	r3, #1
 800378a:	4659      	mov	r1, fp
 800378c:	4628      	mov	r0, r5
 800378e:	47b0      	blx	r6
 8003790:	3001      	adds	r0, #1
 8003792:	d1f3      	bne.n	800377c <_printf_float+0x408>
 8003794:	e64a      	b.n	800342c <_printf_float+0xb8>
 8003796:	2301      	movs	r3, #1
 8003798:	4642      	mov	r2, r8
 800379a:	4659      	mov	r1, fp
 800379c:	4628      	mov	r0, r5
 800379e:	47b0      	blx	r6
 80037a0:	3001      	adds	r0, #1
 80037a2:	f43f ae43 	beq.w	800342c <_printf_float+0xb8>
 80037a6:	3701      	adds	r7, #1
 80037a8:	e7e4      	b.n	8003774 <_printf_float+0x400>
 80037aa:	2301      	movs	r3, #1
 80037ac:	463a      	mov	r2, r7
 80037ae:	e7ec      	b.n	800378a <_printf_float+0x416>
 80037b0:	2301      	movs	r3, #1
 80037b2:	4642      	mov	r2, r8
 80037b4:	4659      	mov	r1, fp
 80037b6:	4628      	mov	r0, r5
 80037b8:	47b0      	blx	r6
 80037ba:	3001      	adds	r0, #1
 80037bc:	f43f ae36 	beq.w	800342c <_printf_float+0xb8>
 80037c0:	3701      	adds	r7, #1
 80037c2:	e708      	b.n	80035d6 <_printf_float+0x262>
 80037c4:	463a      	mov	r2, r7
 80037c6:	464b      	mov	r3, r9
 80037c8:	4638      	mov	r0, r7
 80037ca:	4649      	mov	r1, r9
 80037cc:	f7fd f91a 	bl	8000a04 <__aeabi_dcmpun>
 80037d0:	2800      	cmp	r0, #0
 80037d2:	f43f ae30 	beq.w	8003436 <_printf_float+0xc2>
 80037d6:	4b01      	ldr	r3, [pc, #4]	; (80037dc <_printf_float+0x468>)
 80037d8:	4f01      	ldr	r7, [pc, #4]	; (80037e0 <_printf_float+0x46c>)
 80037da:	e612      	b.n	8003402 <_printf_float+0x8e>
 80037dc:	080055a0 	.word	0x080055a0
 80037e0:	080055a4 	.word	0x080055a4

080037e4 <_printf_common>:
 80037e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037e8:	4691      	mov	r9, r2
 80037ea:	461f      	mov	r7, r3
 80037ec:	688a      	ldr	r2, [r1, #8]
 80037ee:	690b      	ldr	r3, [r1, #16]
 80037f0:	4606      	mov	r6, r0
 80037f2:	4293      	cmp	r3, r2
 80037f4:	bfb8      	it	lt
 80037f6:	4613      	movlt	r3, r2
 80037f8:	f8c9 3000 	str.w	r3, [r9]
 80037fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003800:	460c      	mov	r4, r1
 8003802:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003806:	b112      	cbz	r2, 800380e <_printf_common+0x2a>
 8003808:	3301      	adds	r3, #1
 800380a:	f8c9 3000 	str.w	r3, [r9]
 800380e:	6823      	ldr	r3, [r4, #0]
 8003810:	0699      	lsls	r1, r3, #26
 8003812:	bf42      	ittt	mi
 8003814:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003818:	3302      	addmi	r3, #2
 800381a:	f8c9 3000 	strmi.w	r3, [r9]
 800381e:	6825      	ldr	r5, [r4, #0]
 8003820:	f015 0506 	ands.w	r5, r5, #6
 8003824:	d107      	bne.n	8003836 <_printf_common+0x52>
 8003826:	f104 0a19 	add.w	sl, r4, #25
 800382a:	68e3      	ldr	r3, [r4, #12]
 800382c:	f8d9 2000 	ldr.w	r2, [r9]
 8003830:	1a9b      	subs	r3, r3, r2
 8003832:	429d      	cmp	r5, r3
 8003834:	db2a      	blt.n	800388c <_printf_common+0xa8>
 8003836:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800383a:	6822      	ldr	r2, [r4, #0]
 800383c:	3300      	adds	r3, #0
 800383e:	bf18      	it	ne
 8003840:	2301      	movne	r3, #1
 8003842:	0692      	lsls	r2, r2, #26
 8003844:	d42f      	bmi.n	80038a6 <_printf_common+0xc2>
 8003846:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800384a:	4639      	mov	r1, r7
 800384c:	4630      	mov	r0, r6
 800384e:	47c0      	blx	r8
 8003850:	3001      	adds	r0, #1
 8003852:	d022      	beq.n	800389a <_printf_common+0xb6>
 8003854:	6823      	ldr	r3, [r4, #0]
 8003856:	68e5      	ldr	r5, [r4, #12]
 8003858:	f003 0306 	and.w	r3, r3, #6
 800385c:	2b04      	cmp	r3, #4
 800385e:	bf18      	it	ne
 8003860:	2500      	movne	r5, #0
 8003862:	f8d9 2000 	ldr.w	r2, [r9]
 8003866:	f04f 0900 	mov.w	r9, #0
 800386a:	bf08      	it	eq
 800386c:	1aad      	subeq	r5, r5, r2
 800386e:	68a3      	ldr	r3, [r4, #8]
 8003870:	6922      	ldr	r2, [r4, #16]
 8003872:	bf08      	it	eq
 8003874:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003878:	4293      	cmp	r3, r2
 800387a:	bfc4      	itt	gt
 800387c:	1a9b      	subgt	r3, r3, r2
 800387e:	18ed      	addgt	r5, r5, r3
 8003880:	341a      	adds	r4, #26
 8003882:	454d      	cmp	r5, r9
 8003884:	d11b      	bne.n	80038be <_printf_common+0xda>
 8003886:	2000      	movs	r0, #0
 8003888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800388c:	2301      	movs	r3, #1
 800388e:	4652      	mov	r2, sl
 8003890:	4639      	mov	r1, r7
 8003892:	4630      	mov	r0, r6
 8003894:	47c0      	blx	r8
 8003896:	3001      	adds	r0, #1
 8003898:	d103      	bne.n	80038a2 <_printf_common+0xbe>
 800389a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800389e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038a2:	3501      	adds	r5, #1
 80038a4:	e7c1      	b.n	800382a <_printf_common+0x46>
 80038a6:	2030      	movs	r0, #48	; 0x30
 80038a8:	18e1      	adds	r1, r4, r3
 80038aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80038ae:	1c5a      	adds	r2, r3, #1
 80038b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80038b4:	4422      	add	r2, r4
 80038b6:	3302      	adds	r3, #2
 80038b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80038bc:	e7c3      	b.n	8003846 <_printf_common+0x62>
 80038be:	2301      	movs	r3, #1
 80038c0:	4622      	mov	r2, r4
 80038c2:	4639      	mov	r1, r7
 80038c4:	4630      	mov	r0, r6
 80038c6:	47c0      	blx	r8
 80038c8:	3001      	adds	r0, #1
 80038ca:	d0e6      	beq.n	800389a <_printf_common+0xb6>
 80038cc:	f109 0901 	add.w	r9, r9, #1
 80038d0:	e7d7      	b.n	8003882 <_printf_common+0x9e>
	...

080038d4 <_printf_i>:
 80038d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80038d8:	4617      	mov	r7, r2
 80038da:	7e0a      	ldrb	r2, [r1, #24]
 80038dc:	b085      	sub	sp, #20
 80038de:	2a6e      	cmp	r2, #110	; 0x6e
 80038e0:	4698      	mov	r8, r3
 80038e2:	4606      	mov	r6, r0
 80038e4:	460c      	mov	r4, r1
 80038e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80038e8:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80038ec:	f000 80bc 	beq.w	8003a68 <_printf_i+0x194>
 80038f0:	d81a      	bhi.n	8003928 <_printf_i+0x54>
 80038f2:	2a63      	cmp	r2, #99	; 0x63
 80038f4:	d02e      	beq.n	8003954 <_printf_i+0x80>
 80038f6:	d80a      	bhi.n	800390e <_printf_i+0x3a>
 80038f8:	2a00      	cmp	r2, #0
 80038fa:	f000 80c8 	beq.w	8003a8e <_printf_i+0x1ba>
 80038fe:	2a58      	cmp	r2, #88	; 0x58
 8003900:	f000 808a 	beq.w	8003a18 <_printf_i+0x144>
 8003904:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003908:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800390c:	e02a      	b.n	8003964 <_printf_i+0x90>
 800390e:	2a64      	cmp	r2, #100	; 0x64
 8003910:	d001      	beq.n	8003916 <_printf_i+0x42>
 8003912:	2a69      	cmp	r2, #105	; 0x69
 8003914:	d1f6      	bne.n	8003904 <_printf_i+0x30>
 8003916:	6821      	ldr	r1, [r4, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800391e:	d023      	beq.n	8003968 <_printf_i+0x94>
 8003920:	1d11      	adds	r1, r2, #4
 8003922:	6019      	str	r1, [r3, #0]
 8003924:	6813      	ldr	r3, [r2, #0]
 8003926:	e027      	b.n	8003978 <_printf_i+0xa4>
 8003928:	2a73      	cmp	r2, #115	; 0x73
 800392a:	f000 80b4 	beq.w	8003a96 <_printf_i+0x1c2>
 800392e:	d808      	bhi.n	8003942 <_printf_i+0x6e>
 8003930:	2a6f      	cmp	r2, #111	; 0x6f
 8003932:	d02a      	beq.n	800398a <_printf_i+0xb6>
 8003934:	2a70      	cmp	r2, #112	; 0x70
 8003936:	d1e5      	bne.n	8003904 <_printf_i+0x30>
 8003938:	680a      	ldr	r2, [r1, #0]
 800393a:	f042 0220 	orr.w	r2, r2, #32
 800393e:	600a      	str	r2, [r1, #0]
 8003940:	e003      	b.n	800394a <_printf_i+0x76>
 8003942:	2a75      	cmp	r2, #117	; 0x75
 8003944:	d021      	beq.n	800398a <_printf_i+0xb6>
 8003946:	2a78      	cmp	r2, #120	; 0x78
 8003948:	d1dc      	bne.n	8003904 <_printf_i+0x30>
 800394a:	2278      	movs	r2, #120	; 0x78
 800394c:	496f      	ldr	r1, [pc, #444]	; (8003b0c <_printf_i+0x238>)
 800394e:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8003952:	e064      	b.n	8003a1e <_printf_i+0x14a>
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800395a:	1d11      	adds	r1, r2, #4
 800395c:	6019      	str	r1, [r3, #0]
 800395e:	6813      	ldr	r3, [r2, #0]
 8003960:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003964:	2301      	movs	r3, #1
 8003966:	e0a3      	b.n	8003ab0 <_printf_i+0x1dc>
 8003968:	f011 0f40 	tst.w	r1, #64	; 0x40
 800396c:	f102 0104 	add.w	r1, r2, #4
 8003970:	6019      	str	r1, [r3, #0]
 8003972:	d0d7      	beq.n	8003924 <_printf_i+0x50>
 8003974:	f9b2 3000 	ldrsh.w	r3, [r2]
 8003978:	2b00      	cmp	r3, #0
 800397a:	da03      	bge.n	8003984 <_printf_i+0xb0>
 800397c:	222d      	movs	r2, #45	; 0x2d
 800397e:	425b      	negs	r3, r3
 8003980:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003984:	4962      	ldr	r1, [pc, #392]	; (8003b10 <_printf_i+0x23c>)
 8003986:	220a      	movs	r2, #10
 8003988:	e017      	b.n	80039ba <_printf_i+0xe6>
 800398a:	6820      	ldr	r0, [r4, #0]
 800398c:	6819      	ldr	r1, [r3, #0]
 800398e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003992:	d003      	beq.n	800399c <_printf_i+0xc8>
 8003994:	1d08      	adds	r0, r1, #4
 8003996:	6018      	str	r0, [r3, #0]
 8003998:	680b      	ldr	r3, [r1, #0]
 800399a:	e006      	b.n	80039aa <_printf_i+0xd6>
 800399c:	f010 0f40 	tst.w	r0, #64	; 0x40
 80039a0:	f101 0004 	add.w	r0, r1, #4
 80039a4:	6018      	str	r0, [r3, #0]
 80039a6:	d0f7      	beq.n	8003998 <_printf_i+0xc4>
 80039a8:	880b      	ldrh	r3, [r1, #0]
 80039aa:	2a6f      	cmp	r2, #111	; 0x6f
 80039ac:	bf14      	ite	ne
 80039ae:	220a      	movne	r2, #10
 80039b0:	2208      	moveq	r2, #8
 80039b2:	4957      	ldr	r1, [pc, #348]	; (8003b10 <_printf_i+0x23c>)
 80039b4:	2000      	movs	r0, #0
 80039b6:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80039ba:	6865      	ldr	r5, [r4, #4]
 80039bc:	2d00      	cmp	r5, #0
 80039be:	60a5      	str	r5, [r4, #8]
 80039c0:	f2c0 809c 	blt.w	8003afc <_printf_i+0x228>
 80039c4:	6820      	ldr	r0, [r4, #0]
 80039c6:	f020 0004 	bic.w	r0, r0, #4
 80039ca:	6020      	str	r0, [r4, #0]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d13f      	bne.n	8003a50 <_printf_i+0x17c>
 80039d0:	2d00      	cmp	r5, #0
 80039d2:	f040 8095 	bne.w	8003b00 <_printf_i+0x22c>
 80039d6:	4675      	mov	r5, lr
 80039d8:	2a08      	cmp	r2, #8
 80039da:	d10b      	bne.n	80039f4 <_printf_i+0x120>
 80039dc:	6823      	ldr	r3, [r4, #0]
 80039de:	07da      	lsls	r2, r3, #31
 80039e0:	d508      	bpl.n	80039f4 <_printf_i+0x120>
 80039e2:	6923      	ldr	r3, [r4, #16]
 80039e4:	6862      	ldr	r2, [r4, #4]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	bfde      	ittt	le
 80039ea:	2330      	movle	r3, #48	; 0x30
 80039ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 80039f0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80039f4:	ebae 0305 	sub.w	r3, lr, r5
 80039f8:	6123      	str	r3, [r4, #16]
 80039fa:	f8cd 8000 	str.w	r8, [sp]
 80039fe:	463b      	mov	r3, r7
 8003a00:	aa03      	add	r2, sp, #12
 8003a02:	4621      	mov	r1, r4
 8003a04:	4630      	mov	r0, r6
 8003a06:	f7ff feed 	bl	80037e4 <_printf_common>
 8003a0a:	3001      	adds	r0, #1
 8003a0c:	d155      	bne.n	8003aba <_printf_i+0x1e6>
 8003a0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a12:	b005      	add	sp, #20
 8003a14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003a18:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8003a1c:	493c      	ldr	r1, [pc, #240]	; (8003b10 <_printf_i+0x23c>)
 8003a1e:	6822      	ldr	r2, [r4, #0]
 8003a20:	6818      	ldr	r0, [r3, #0]
 8003a22:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003a26:	f100 0504 	add.w	r5, r0, #4
 8003a2a:	601d      	str	r5, [r3, #0]
 8003a2c:	d001      	beq.n	8003a32 <_printf_i+0x15e>
 8003a2e:	6803      	ldr	r3, [r0, #0]
 8003a30:	e002      	b.n	8003a38 <_printf_i+0x164>
 8003a32:	0655      	lsls	r5, r2, #25
 8003a34:	d5fb      	bpl.n	8003a2e <_printf_i+0x15a>
 8003a36:	8803      	ldrh	r3, [r0, #0]
 8003a38:	07d0      	lsls	r0, r2, #31
 8003a3a:	bf44      	itt	mi
 8003a3c:	f042 0220 	orrmi.w	r2, r2, #32
 8003a40:	6022      	strmi	r2, [r4, #0]
 8003a42:	b91b      	cbnz	r3, 8003a4c <_printf_i+0x178>
 8003a44:	6822      	ldr	r2, [r4, #0]
 8003a46:	f022 0220 	bic.w	r2, r2, #32
 8003a4a:	6022      	str	r2, [r4, #0]
 8003a4c:	2210      	movs	r2, #16
 8003a4e:	e7b1      	b.n	80039b4 <_printf_i+0xe0>
 8003a50:	4675      	mov	r5, lr
 8003a52:	fbb3 f0f2 	udiv	r0, r3, r2
 8003a56:	fb02 3310 	mls	r3, r2, r0, r3
 8003a5a:	5ccb      	ldrb	r3, [r1, r3]
 8003a5c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003a60:	4603      	mov	r3, r0
 8003a62:	2800      	cmp	r0, #0
 8003a64:	d1f5      	bne.n	8003a52 <_printf_i+0x17e>
 8003a66:	e7b7      	b.n	80039d8 <_printf_i+0x104>
 8003a68:	6808      	ldr	r0, [r1, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003a70:	6949      	ldr	r1, [r1, #20]
 8003a72:	d004      	beq.n	8003a7e <_printf_i+0x1aa>
 8003a74:	1d10      	adds	r0, r2, #4
 8003a76:	6018      	str	r0, [r3, #0]
 8003a78:	6813      	ldr	r3, [r2, #0]
 8003a7a:	6019      	str	r1, [r3, #0]
 8003a7c:	e007      	b.n	8003a8e <_printf_i+0x1ba>
 8003a7e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003a82:	f102 0004 	add.w	r0, r2, #4
 8003a86:	6018      	str	r0, [r3, #0]
 8003a88:	6813      	ldr	r3, [r2, #0]
 8003a8a:	d0f6      	beq.n	8003a7a <_printf_i+0x1a6>
 8003a8c:	8019      	strh	r1, [r3, #0]
 8003a8e:	2300      	movs	r3, #0
 8003a90:	4675      	mov	r5, lr
 8003a92:	6123      	str	r3, [r4, #16]
 8003a94:	e7b1      	b.n	80039fa <_printf_i+0x126>
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	1d11      	adds	r1, r2, #4
 8003a9a:	6019      	str	r1, [r3, #0]
 8003a9c:	6815      	ldr	r5, [r2, #0]
 8003a9e:	2100      	movs	r1, #0
 8003aa0:	6862      	ldr	r2, [r4, #4]
 8003aa2:	4628      	mov	r0, r5
 8003aa4:	f000 feea 	bl	800487c <memchr>
 8003aa8:	b108      	cbz	r0, 8003aae <_printf_i+0x1da>
 8003aaa:	1b40      	subs	r0, r0, r5
 8003aac:	6060      	str	r0, [r4, #4]
 8003aae:	6863      	ldr	r3, [r4, #4]
 8003ab0:	6123      	str	r3, [r4, #16]
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ab8:	e79f      	b.n	80039fa <_printf_i+0x126>
 8003aba:	6923      	ldr	r3, [r4, #16]
 8003abc:	462a      	mov	r2, r5
 8003abe:	4639      	mov	r1, r7
 8003ac0:	4630      	mov	r0, r6
 8003ac2:	47c0      	blx	r8
 8003ac4:	3001      	adds	r0, #1
 8003ac6:	d0a2      	beq.n	8003a0e <_printf_i+0x13a>
 8003ac8:	6823      	ldr	r3, [r4, #0]
 8003aca:	079b      	lsls	r3, r3, #30
 8003acc:	d507      	bpl.n	8003ade <_printf_i+0x20a>
 8003ace:	2500      	movs	r5, #0
 8003ad0:	f104 0919 	add.w	r9, r4, #25
 8003ad4:	68e3      	ldr	r3, [r4, #12]
 8003ad6:	9a03      	ldr	r2, [sp, #12]
 8003ad8:	1a9b      	subs	r3, r3, r2
 8003ada:	429d      	cmp	r5, r3
 8003adc:	db05      	blt.n	8003aea <_printf_i+0x216>
 8003ade:	68e0      	ldr	r0, [r4, #12]
 8003ae0:	9b03      	ldr	r3, [sp, #12]
 8003ae2:	4298      	cmp	r0, r3
 8003ae4:	bfb8      	it	lt
 8003ae6:	4618      	movlt	r0, r3
 8003ae8:	e793      	b.n	8003a12 <_printf_i+0x13e>
 8003aea:	2301      	movs	r3, #1
 8003aec:	464a      	mov	r2, r9
 8003aee:	4639      	mov	r1, r7
 8003af0:	4630      	mov	r0, r6
 8003af2:	47c0      	blx	r8
 8003af4:	3001      	adds	r0, #1
 8003af6:	d08a      	beq.n	8003a0e <_printf_i+0x13a>
 8003af8:	3501      	adds	r5, #1
 8003afa:	e7eb      	b.n	8003ad4 <_printf_i+0x200>
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d1a7      	bne.n	8003a50 <_printf_i+0x17c>
 8003b00:	780b      	ldrb	r3, [r1, #0]
 8003b02:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b06:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003b0a:	e765      	b.n	80039d8 <_printf_i+0x104>
 8003b0c:	080055bb 	.word	0x080055bb
 8003b10:	080055aa 	.word	0x080055aa

08003b14 <sniprintf>:
 8003b14:	b40c      	push	{r2, r3}
 8003b16:	b530      	push	{r4, r5, lr}
 8003b18:	4b17      	ldr	r3, [pc, #92]	; (8003b78 <sniprintf+0x64>)
 8003b1a:	1e0c      	subs	r4, r1, #0
 8003b1c:	b09d      	sub	sp, #116	; 0x74
 8003b1e:	681d      	ldr	r5, [r3, #0]
 8003b20:	da08      	bge.n	8003b34 <sniprintf+0x20>
 8003b22:	238b      	movs	r3, #139	; 0x8b
 8003b24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b28:	602b      	str	r3, [r5, #0]
 8003b2a:	b01d      	add	sp, #116	; 0x74
 8003b2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003b30:	b002      	add	sp, #8
 8003b32:	4770      	bx	lr
 8003b34:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003b38:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003b3c:	bf0c      	ite	eq
 8003b3e:	4623      	moveq	r3, r4
 8003b40:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8003b44:	9304      	str	r3, [sp, #16]
 8003b46:	9307      	str	r3, [sp, #28]
 8003b48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b4c:	9002      	str	r0, [sp, #8]
 8003b4e:	9006      	str	r0, [sp, #24]
 8003b50:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003b54:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003b56:	ab21      	add	r3, sp, #132	; 0x84
 8003b58:	a902      	add	r1, sp, #8
 8003b5a:	4628      	mov	r0, r5
 8003b5c:	9301      	str	r3, [sp, #4]
 8003b5e:	f001 fa8b 	bl	8005078 <_svfiprintf_r>
 8003b62:	1c43      	adds	r3, r0, #1
 8003b64:	bfbc      	itt	lt
 8003b66:	238b      	movlt	r3, #139	; 0x8b
 8003b68:	602b      	strlt	r3, [r5, #0]
 8003b6a:	2c00      	cmp	r4, #0
 8003b6c:	d0dd      	beq.n	8003b2a <sniprintf+0x16>
 8003b6e:	2200      	movs	r2, #0
 8003b70:	9b02      	ldr	r3, [sp, #8]
 8003b72:	701a      	strb	r2, [r3, #0]
 8003b74:	e7d9      	b.n	8003b2a <sniprintf+0x16>
 8003b76:	bf00      	nop
 8003b78:	20000010 	.word	0x20000010

08003b7c <strcpy>:
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003b82:	f803 2b01 	strb.w	r2, [r3], #1
 8003b86:	2a00      	cmp	r2, #0
 8003b88:	d1f9      	bne.n	8003b7e <strcpy+0x2>
 8003b8a:	4770      	bx	lr

08003b8c <quorem>:
 8003b8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b90:	6903      	ldr	r3, [r0, #16]
 8003b92:	690c      	ldr	r4, [r1, #16]
 8003b94:	4680      	mov	r8, r0
 8003b96:	429c      	cmp	r4, r3
 8003b98:	f300 8082 	bgt.w	8003ca0 <quorem+0x114>
 8003b9c:	3c01      	subs	r4, #1
 8003b9e:	f101 0714 	add.w	r7, r1, #20
 8003ba2:	f100 0614 	add.w	r6, r0, #20
 8003ba6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8003baa:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8003bae:	3501      	adds	r5, #1
 8003bb0:	fbb0 f5f5 	udiv	r5, r0, r5
 8003bb4:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8003bb8:	eb06 030e 	add.w	r3, r6, lr
 8003bbc:	eb07 090e 	add.w	r9, r7, lr
 8003bc0:	9301      	str	r3, [sp, #4]
 8003bc2:	b38d      	cbz	r5, 8003c28 <quorem+0x9c>
 8003bc4:	f04f 0a00 	mov.w	sl, #0
 8003bc8:	4638      	mov	r0, r7
 8003bca:	46b4      	mov	ip, r6
 8003bcc:	46d3      	mov	fp, sl
 8003bce:	f850 2b04 	ldr.w	r2, [r0], #4
 8003bd2:	b293      	uxth	r3, r2
 8003bd4:	fb05 a303 	mla	r3, r5, r3, sl
 8003bd8:	0c12      	lsrs	r2, r2, #16
 8003bda:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003bde:	fb05 a202 	mla	r2, r5, r2, sl
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	ebab 0303 	sub.w	r3, fp, r3
 8003be8:	f8bc b000 	ldrh.w	fp, [ip]
 8003bec:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8003bf0:	445b      	add	r3, fp
 8003bf2:	fa1f fb82 	uxth.w	fp, r2
 8003bf6:	f8dc 2000 	ldr.w	r2, [ip]
 8003bfa:	4581      	cmp	r9, r0
 8003bfc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8003c00:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003c0a:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8003c0e:	f84c 3b04 	str.w	r3, [ip], #4
 8003c12:	d2dc      	bcs.n	8003bce <quorem+0x42>
 8003c14:	f856 300e 	ldr.w	r3, [r6, lr]
 8003c18:	b933      	cbnz	r3, 8003c28 <quorem+0x9c>
 8003c1a:	9b01      	ldr	r3, [sp, #4]
 8003c1c:	3b04      	subs	r3, #4
 8003c1e:	429e      	cmp	r6, r3
 8003c20:	461a      	mov	r2, r3
 8003c22:	d331      	bcc.n	8003c88 <quorem+0xfc>
 8003c24:	f8c8 4010 	str.w	r4, [r8, #16]
 8003c28:	4640      	mov	r0, r8
 8003c2a:	f001 f848 	bl	8004cbe <__mcmp>
 8003c2e:	2800      	cmp	r0, #0
 8003c30:	db26      	blt.n	8003c80 <quorem+0xf4>
 8003c32:	4630      	mov	r0, r6
 8003c34:	f04f 0e00 	mov.w	lr, #0
 8003c38:	3501      	adds	r5, #1
 8003c3a:	f857 1b04 	ldr.w	r1, [r7], #4
 8003c3e:	f8d0 c000 	ldr.w	ip, [r0]
 8003c42:	b28b      	uxth	r3, r1
 8003c44:	ebae 0303 	sub.w	r3, lr, r3
 8003c48:	fa1f f28c 	uxth.w	r2, ip
 8003c4c:	4413      	add	r3, r2
 8003c4e:	0c0a      	lsrs	r2, r1, #16
 8003c50:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8003c54:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003c5e:	45b9      	cmp	r9, r7
 8003c60:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8003c64:	f840 3b04 	str.w	r3, [r0], #4
 8003c68:	d2e7      	bcs.n	8003c3a <quorem+0xae>
 8003c6a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8003c6e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8003c72:	b92a      	cbnz	r2, 8003c80 <quorem+0xf4>
 8003c74:	3b04      	subs	r3, #4
 8003c76:	429e      	cmp	r6, r3
 8003c78:	461a      	mov	r2, r3
 8003c7a:	d30b      	bcc.n	8003c94 <quorem+0x108>
 8003c7c:	f8c8 4010 	str.w	r4, [r8, #16]
 8003c80:	4628      	mov	r0, r5
 8003c82:	b003      	add	sp, #12
 8003c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c88:	6812      	ldr	r2, [r2, #0]
 8003c8a:	3b04      	subs	r3, #4
 8003c8c:	2a00      	cmp	r2, #0
 8003c8e:	d1c9      	bne.n	8003c24 <quorem+0x98>
 8003c90:	3c01      	subs	r4, #1
 8003c92:	e7c4      	b.n	8003c1e <quorem+0x92>
 8003c94:	6812      	ldr	r2, [r2, #0]
 8003c96:	3b04      	subs	r3, #4
 8003c98:	2a00      	cmp	r2, #0
 8003c9a:	d1ef      	bne.n	8003c7c <quorem+0xf0>
 8003c9c:	3c01      	subs	r4, #1
 8003c9e:	e7ea      	b.n	8003c76 <quorem+0xea>
 8003ca0:	2000      	movs	r0, #0
 8003ca2:	e7ee      	b.n	8003c82 <quorem+0xf6>
 8003ca4:	0000      	movs	r0, r0
	...

08003ca8 <_dtoa_r>:
 8003ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cac:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003cae:	b095      	sub	sp, #84	; 0x54
 8003cb0:	4604      	mov	r4, r0
 8003cb2:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8003cb4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003cb8:	b93e      	cbnz	r6, 8003cca <_dtoa_r+0x22>
 8003cba:	2010      	movs	r0, #16
 8003cbc:	f000 fdd6 	bl	800486c <malloc>
 8003cc0:	6260      	str	r0, [r4, #36]	; 0x24
 8003cc2:	6046      	str	r6, [r0, #4]
 8003cc4:	6086      	str	r6, [r0, #8]
 8003cc6:	6006      	str	r6, [r0, #0]
 8003cc8:	60c6      	str	r6, [r0, #12]
 8003cca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ccc:	6819      	ldr	r1, [r3, #0]
 8003cce:	b151      	cbz	r1, 8003ce6 <_dtoa_r+0x3e>
 8003cd0:	685a      	ldr	r2, [r3, #4]
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	4093      	lsls	r3, r2
 8003cd6:	604a      	str	r2, [r1, #4]
 8003cd8:	608b      	str	r3, [r1, #8]
 8003cda:	4620      	mov	r0, r4
 8003cdc:	f000 fe1b 	bl	8004916 <_Bfree>
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ce4:	601a      	str	r2, [r3, #0]
 8003ce6:	9b03      	ldr	r3, [sp, #12]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	bfb7      	itett	lt
 8003cec:	2301      	movlt	r3, #1
 8003cee:	2300      	movge	r3, #0
 8003cf0:	602b      	strlt	r3, [r5, #0]
 8003cf2:	9b03      	ldrlt	r3, [sp, #12]
 8003cf4:	bfae      	itee	ge
 8003cf6:	602b      	strge	r3, [r5, #0]
 8003cf8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003cfc:	9303      	strlt	r3, [sp, #12]
 8003cfe:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8003d02:	4bab      	ldr	r3, [pc, #684]	; (8003fb0 <_dtoa_r+0x308>)
 8003d04:	ea33 0309 	bics.w	r3, r3, r9
 8003d08:	d11b      	bne.n	8003d42 <_dtoa_r+0x9a>
 8003d0a:	f242 730f 	movw	r3, #9999	; 0x270f
 8003d0e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003d10:	6013      	str	r3, [r2, #0]
 8003d12:	9b02      	ldr	r3, [sp, #8]
 8003d14:	b923      	cbnz	r3, 8003d20 <_dtoa_r+0x78>
 8003d16:	f3c9 0013 	ubfx	r0, r9, #0, #20
 8003d1a:	2800      	cmp	r0, #0
 8003d1c:	f000 8583 	beq.w	8004826 <_dtoa_r+0xb7e>
 8003d20:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003d22:	b953      	cbnz	r3, 8003d3a <_dtoa_r+0x92>
 8003d24:	4ba3      	ldr	r3, [pc, #652]	; (8003fb4 <_dtoa_r+0x30c>)
 8003d26:	e021      	b.n	8003d6c <_dtoa_r+0xc4>
 8003d28:	4ba3      	ldr	r3, [pc, #652]	; (8003fb8 <_dtoa_r+0x310>)
 8003d2a:	9306      	str	r3, [sp, #24]
 8003d2c:	3308      	adds	r3, #8
 8003d2e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003d30:	6013      	str	r3, [r2, #0]
 8003d32:	9806      	ldr	r0, [sp, #24]
 8003d34:	b015      	add	sp, #84	; 0x54
 8003d36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d3a:	4b9e      	ldr	r3, [pc, #632]	; (8003fb4 <_dtoa_r+0x30c>)
 8003d3c:	9306      	str	r3, [sp, #24]
 8003d3e:	3303      	adds	r3, #3
 8003d40:	e7f5      	b.n	8003d2e <_dtoa_r+0x86>
 8003d42:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003d46:	2200      	movs	r2, #0
 8003d48:	2300      	movs	r3, #0
 8003d4a:	4630      	mov	r0, r6
 8003d4c:	4639      	mov	r1, r7
 8003d4e:	f7fc fe27 	bl	80009a0 <__aeabi_dcmpeq>
 8003d52:	4680      	mov	r8, r0
 8003d54:	b160      	cbz	r0, 8003d70 <_dtoa_r+0xc8>
 8003d56:	2301      	movs	r3, #1
 8003d58:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003d5a:	6013      	str	r3, [r2, #0]
 8003d5c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	f000 855e 	beq.w	8004820 <_dtoa_r+0xb78>
 8003d64:	4b95      	ldr	r3, [pc, #596]	; (8003fbc <_dtoa_r+0x314>)
 8003d66:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003d68:	6013      	str	r3, [r2, #0]
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	9306      	str	r3, [sp, #24]
 8003d6e:	e7e0      	b.n	8003d32 <_dtoa_r+0x8a>
 8003d70:	ab12      	add	r3, sp, #72	; 0x48
 8003d72:	9301      	str	r3, [sp, #4]
 8003d74:	ab13      	add	r3, sp, #76	; 0x4c
 8003d76:	9300      	str	r3, [sp, #0]
 8003d78:	4632      	mov	r2, r6
 8003d7a:	463b      	mov	r3, r7
 8003d7c:	4620      	mov	r0, r4
 8003d7e:	f001 f817 	bl	8004db0 <__d2b>
 8003d82:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8003d86:	4682      	mov	sl, r0
 8003d88:	2d00      	cmp	r5, #0
 8003d8a:	d07d      	beq.n	8003e88 <_dtoa_r+0x1e0>
 8003d8c:	4630      	mov	r0, r6
 8003d8e:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003d92:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8003d96:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8003d9a:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003d9e:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8003da2:	2200      	movs	r2, #0
 8003da4:	4b86      	ldr	r3, [pc, #536]	; (8003fc0 <_dtoa_r+0x318>)
 8003da6:	f7fc f9df 	bl	8000168 <__aeabi_dsub>
 8003daa:	a37b      	add	r3, pc, #492	; (adr r3, 8003f98 <_dtoa_r+0x2f0>)
 8003dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003db0:	f7fc fb8e 	bl	80004d0 <__aeabi_dmul>
 8003db4:	a37a      	add	r3, pc, #488	; (adr r3, 8003fa0 <_dtoa_r+0x2f8>)
 8003db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dba:	f7fc f9d7 	bl	800016c <__adddf3>
 8003dbe:	4606      	mov	r6, r0
 8003dc0:	4628      	mov	r0, r5
 8003dc2:	460f      	mov	r7, r1
 8003dc4:	f7fc fb1e 	bl	8000404 <__aeabi_i2d>
 8003dc8:	a377      	add	r3, pc, #476	; (adr r3, 8003fa8 <_dtoa_r+0x300>)
 8003dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dce:	f7fc fb7f 	bl	80004d0 <__aeabi_dmul>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	4630      	mov	r0, r6
 8003dd8:	4639      	mov	r1, r7
 8003dda:	f7fc f9c7 	bl	800016c <__adddf3>
 8003dde:	4606      	mov	r6, r0
 8003de0:	460f      	mov	r7, r1
 8003de2:	f7fc fe25 	bl	8000a30 <__aeabi_d2iz>
 8003de6:	2200      	movs	r2, #0
 8003de8:	4683      	mov	fp, r0
 8003dea:	2300      	movs	r3, #0
 8003dec:	4630      	mov	r0, r6
 8003dee:	4639      	mov	r1, r7
 8003df0:	f7fc fde0 	bl	80009b4 <__aeabi_dcmplt>
 8003df4:	b158      	cbz	r0, 8003e0e <_dtoa_r+0x166>
 8003df6:	4658      	mov	r0, fp
 8003df8:	f7fc fb04 	bl	8000404 <__aeabi_i2d>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	460b      	mov	r3, r1
 8003e00:	4630      	mov	r0, r6
 8003e02:	4639      	mov	r1, r7
 8003e04:	f7fc fdcc 	bl	80009a0 <__aeabi_dcmpeq>
 8003e08:	b908      	cbnz	r0, 8003e0e <_dtoa_r+0x166>
 8003e0a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8003e0e:	f1bb 0f16 	cmp.w	fp, #22
 8003e12:	d858      	bhi.n	8003ec6 <_dtoa_r+0x21e>
 8003e14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003e18:	496a      	ldr	r1, [pc, #424]	; (8003fc4 <_dtoa_r+0x31c>)
 8003e1a:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8003e1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003e22:	f7fc fde5 	bl	80009f0 <__aeabi_dcmpgt>
 8003e26:	2800      	cmp	r0, #0
 8003e28:	d04f      	beq.n	8003eca <_dtoa_r+0x222>
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8003e30:	930d      	str	r3, [sp, #52]	; 0x34
 8003e32:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003e34:	1b5d      	subs	r5, r3, r5
 8003e36:	1e6b      	subs	r3, r5, #1
 8003e38:	9307      	str	r3, [sp, #28]
 8003e3a:	bf43      	ittte	mi
 8003e3c:	2300      	movmi	r3, #0
 8003e3e:	f1c5 0801 	rsbmi	r8, r5, #1
 8003e42:	9307      	strmi	r3, [sp, #28]
 8003e44:	f04f 0800 	movpl.w	r8, #0
 8003e48:	f1bb 0f00 	cmp.w	fp, #0
 8003e4c:	db3f      	blt.n	8003ece <_dtoa_r+0x226>
 8003e4e:	9b07      	ldr	r3, [sp, #28]
 8003e50:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8003e54:	445b      	add	r3, fp
 8003e56:	9307      	str	r3, [sp, #28]
 8003e58:	2300      	movs	r3, #0
 8003e5a:	9308      	str	r3, [sp, #32]
 8003e5c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003e5e:	2b09      	cmp	r3, #9
 8003e60:	f200 80b4 	bhi.w	8003fcc <_dtoa_r+0x324>
 8003e64:	2b05      	cmp	r3, #5
 8003e66:	bfc4      	itt	gt
 8003e68:	3b04      	subgt	r3, #4
 8003e6a:	931e      	strgt	r3, [sp, #120]	; 0x78
 8003e6c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003e6e:	bfc8      	it	gt
 8003e70:	2600      	movgt	r6, #0
 8003e72:	f1a3 0302 	sub.w	r3, r3, #2
 8003e76:	bfd8      	it	le
 8003e78:	2601      	movle	r6, #1
 8003e7a:	2b03      	cmp	r3, #3
 8003e7c:	f200 80b2 	bhi.w	8003fe4 <_dtoa_r+0x33c>
 8003e80:	e8df f003 	tbb	[pc, r3]
 8003e84:	782d8684 	.word	0x782d8684
 8003e88:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003e8a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8003e8c:	441d      	add	r5, r3
 8003e8e:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8003e92:	2b20      	cmp	r3, #32
 8003e94:	dd11      	ble.n	8003eba <_dtoa_r+0x212>
 8003e96:	9a02      	ldr	r2, [sp, #8]
 8003e98:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8003e9c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8003ea0:	fa22 f000 	lsr.w	r0, r2, r0
 8003ea4:	fa09 f303 	lsl.w	r3, r9, r3
 8003ea8:	4318      	orrs	r0, r3
 8003eaa:	f7fc fa9b 	bl	80003e4 <__aeabi_ui2d>
 8003eae:	2301      	movs	r3, #1
 8003eb0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8003eb4:	3d01      	subs	r5, #1
 8003eb6:	9310      	str	r3, [sp, #64]	; 0x40
 8003eb8:	e773      	b.n	8003da2 <_dtoa_r+0xfa>
 8003eba:	f1c3 0020 	rsb	r0, r3, #32
 8003ebe:	9b02      	ldr	r3, [sp, #8]
 8003ec0:	fa03 f000 	lsl.w	r0, r3, r0
 8003ec4:	e7f1      	b.n	8003eaa <_dtoa_r+0x202>
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e7b2      	b.n	8003e30 <_dtoa_r+0x188>
 8003eca:	900d      	str	r0, [sp, #52]	; 0x34
 8003ecc:	e7b1      	b.n	8003e32 <_dtoa_r+0x18a>
 8003ece:	f1cb 0300 	rsb	r3, fp, #0
 8003ed2:	9308      	str	r3, [sp, #32]
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	eba8 080b 	sub.w	r8, r8, fp
 8003eda:	930c      	str	r3, [sp, #48]	; 0x30
 8003edc:	e7be      	b.n	8003e5c <_dtoa_r+0x1b4>
 8003ede:	2301      	movs	r3, #1
 8003ee0:	9309      	str	r3, [sp, #36]	; 0x24
 8003ee2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f340 8080 	ble.w	8003fea <_dtoa_r+0x342>
 8003eea:	4699      	mov	r9, r3
 8003eec:	9304      	str	r3, [sp, #16]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	2104      	movs	r1, #4
 8003ef2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003ef4:	606a      	str	r2, [r5, #4]
 8003ef6:	f101 0214 	add.w	r2, r1, #20
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d97a      	bls.n	8003ff4 <_dtoa_r+0x34c>
 8003efe:	6869      	ldr	r1, [r5, #4]
 8003f00:	4620      	mov	r0, r4
 8003f02:	f000 fcd4 	bl	80048ae <_Balloc>
 8003f06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003f08:	6028      	str	r0, [r5, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f1b9 0f0e 	cmp.w	r9, #14
 8003f10:	9306      	str	r3, [sp, #24]
 8003f12:	f200 80f0 	bhi.w	80040f6 <_dtoa_r+0x44e>
 8003f16:	2e00      	cmp	r6, #0
 8003f18:	f000 80ed 	beq.w	80040f6 <_dtoa_r+0x44e>
 8003f1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003f20:	f1bb 0f00 	cmp.w	fp, #0
 8003f24:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8003f28:	dd79      	ble.n	800401e <_dtoa_r+0x376>
 8003f2a:	4a26      	ldr	r2, [pc, #152]	; (8003fc4 <_dtoa_r+0x31c>)
 8003f2c:	f00b 030f 	and.w	r3, fp, #15
 8003f30:	ea4f 162b 	mov.w	r6, fp, asr #4
 8003f34:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003f38:	06f0      	lsls	r0, r6, #27
 8003f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f3e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003f42:	d55c      	bpl.n	8003ffe <_dtoa_r+0x356>
 8003f44:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003f48:	4b1f      	ldr	r3, [pc, #124]	; (8003fc8 <_dtoa_r+0x320>)
 8003f4a:	2503      	movs	r5, #3
 8003f4c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003f50:	f7fc fbe8 	bl	8000724 <__aeabi_ddiv>
 8003f54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003f58:	f006 060f 	and.w	r6, r6, #15
 8003f5c:	4f1a      	ldr	r7, [pc, #104]	; (8003fc8 <_dtoa_r+0x320>)
 8003f5e:	2e00      	cmp	r6, #0
 8003f60:	d14f      	bne.n	8004002 <_dtoa_r+0x35a>
 8003f62:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003f66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003f6a:	f7fc fbdb 	bl	8000724 <__aeabi_ddiv>
 8003f6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003f72:	e06e      	b.n	8004052 <_dtoa_r+0x3aa>
 8003f74:	2301      	movs	r3, #1
 8003f76:	9309      	str	r3, [sp, #36]	; 0x24
 8003f78:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003f7a:	445b      	add	r3, fp
 8003f7c:	f103 0901 	add.w	r9, r3, #1
 8003f80:	9304      	str	r3, [sp, #16]
 8003f82:	464b      	mov	r3, r9
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	bfb8      	it	lt
 8003f88:	2301      	movlt	r3, #1
 8003f8a:	e7b0      	b.n	8003eee <_dtoa_r+0x246>
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	e7a7      	b.n	8003ee0 <_dtoa_r+0x238>
 8003f90:	2300      	movs	r3, #0
 8003f92:	e7f0      	b.n	8003f76 <_dtoa_r+0x2ce>
 8003f94:	f3af 8000 	nop.w
 8003f98:	636f4361 	.word	0x636f4361
 8003f9c:	3fd287a7 	.word	0x3fd287a7
 8003fa0:	8b60c8b3 	.word	0x8b60c8b3
 8003fa4:	3fc68a28 	.word	0x3fc68a28
 8003fa8:	509f79fb 	.word	0x509f79fb
 8003fac:	3fd34413 	.word	0x3fd34413
 8003fb0:	7ff00000 	.word	0x7ff00000
 8003fb4:	080055d5 	.word	0x080055d5
 8003fb8:	080055cc 	.word	0x080055cc
 8003fbc:	080055a9 	.word	0x080055a9
 8003fc0:	3ff80000 	.word	0x3ff80000
 8003fc4:	08005608 	.word	0x08005608
 8003fc8:	080055e0 	.word	0x080055e0
 8003fcc:	2601      	movs	r6, #1
 8003fce:	2300      	movs	r3, #0
 8003fd0:	9609      	str	r6, [sp, #36]	; 0x24
 8003fd2:	931e      	str	r3, [sp, #120]	; 0x78
 8003fd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003fd8:	2200      	movs	r2, #0
 8003fda:	9304      	str	r3, [sp, #16]
 8003fdc:	4699      	mov	r9, r3
 8003fde:	2312      	movs	r3, #18
 8003fe0:	921f      	str	r2, [sp, #124]	; 0x7c
 8003fe2:	e784      	b.n	8003eee <_dtoa_r+0x246>
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	9309      	str	r3, [sp, #36]	; 0x24
 8003fe8:	e7f4      	b.n	8003fd4 <_dtoa_r+0x32c>
 8003fea:	2301      	movs	r3, #1
 8003fec:	9304      	str	r3, [sp, #16]
 8003fee:	4699      	mov	r9, r3
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	e7f5      	b.n	8003fe0 <_dtoa_r+0x338>
 8003ff4:	686a      	ldr	r2, [r5, #4]
 8003ff6:	0049      	lsls	r1, r1, #1
 8003ff8:	3201      	adds	r2, #1
 8003ffa:	606a      	str	r2, [r5, #4]
 8003ffc:	e77b      	b.n	8003ef6 <_dtoa_r+0x24e>
 8003ffe:	2502      	movs	r5, #2
 8004000:	e7ac      	b.n	8003f5c <_dtoa_r+0x2b4>
 8004002:	07f1      	lsls	r1, r6, #31
 8004004:	d508      	bpl.n	8004018 <_dtoa_r+0x370>
 8004006:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800400a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800400e:	f7fc fa5f 	bl	80004d0 <__aeabi_dmul>
 8004012:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004016:	3501      	adds	r5, #1
 8004018:	1076      	asrs	r6, r6, #1
 800401a:	3708      	adds	r7, #8
 800401c:	e79f      	b.n	8003f5e <_dtoa_r+0x2b6>
 800401e:	f000 80a5 	beq.w	800416c <_dtoa_r+0x4c4>
 8004022:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004026:	f1cb 0600 	rsb	r6, fp, #0
 800402a:	4ba2      	ldr	r3, [pc, #648]	; (80042b4 <_dtoa_r+0x60c>)
 800402c:	f006 020f 	and.w	r2, r6, #15
 8004030:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004038:	f7fc fa4a 	bl	80004d0 <__aeabi_dmul>
 800403c:	2502      	movs	r5, #2
 800403e:	2300      	movs	r3, #0
 8004040:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004044:	4f9c      	ldr	r7, [pc, #624]	; (80042b8 <_dtoa_r+0x610>)
 8004046:	1136      	asrs	r6, r6, #4
 8004048:	2e00      	cmp	r6, #0
 800404a:	f040 8084 	bne.w	8004156 <_dtoa_r+0x4ae>
 800404e:	2b00      	cmp	r3, #0
 8004050:	d18d      	bne.n	8003f6e <_dtoa_r+0x2c6>
 8004052:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004054:	2b00      	cmp	r3, #0
 8004056:	f000 808b 	beq.w	8004170 <_dtoa_r+0x4c8>
 800405a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800405e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004062:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004066:	2200      	movs	r2, #0
 8004068:	4b94      	ldr	r3, [pc, #592]	; (80042bc <_dtoa_r+0x614>)
 800406a:	f7fc fca3 	bl	80009b4 <__aeabi_dcmplt>
 800406e:	2800      	cmp	r0, #0
 8004070:	d07e      	beq.n	8004170 <_dtoa_r+0x4c8>
 8004072:	f1b9 0f00 	cmp.w	r9, #0
 8004076:	d07b      	beq.n	8004170 <_dtoa_r+0x4c8>
 8004078:	9b04      	ldr	r3, [sp, #16]
 800407a:	2b00      	cmp	r3, #0
 800407c:	dd37      	ble.n	80040ee <_dtoa_r+0x446>
 800407e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004082:	2200      	movs	r2, #0
 8004084:	4b8e      	ldr	r3, [pc, #568]	; (80042c0 <_dtoa_r+0x618>)
 8004086:	f7fc fa23 	bl	80004d0 <__aeabi_dmul>
 800408a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800408e:	9e04      	ldr	r6, [sp, #16]
 8004090:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8004094:	3501      	adds	r5, #1
 8004096:	4628      	mov	r0, r5
 8004098:	f7fc f9b4 	bl	8000404 <__aeabi_i2d>
 800409c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80040a0:	f7fc fa16 	bl	80004d0 <__aeabi_dmul>
 80040a4:	4b87      	ldr	r3, [pc, #540]	; (80042c4 <_dtoa_r+0x61c>)
 80040a6:	2200      	movs	r2, #0
 80040a8:	f7fc f860 	bl	800016c <__adddf3>
 80040ac:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80040b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80040b2:	f1a3 7550 	sub.w	r5, r3, #54525952	; 0x3400000
 80040b6:	950b      	str	r5, [sp, #44]	; 0x2c
 80040b8:	2e00      	cmp	r6, #0
 80040ba:	d15c      	bne.n	8004176 <_dtoa_r+0x4ce>
 80040bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80040c0:	2200      	movs	r2, #0
 80040c2:	4b81      	ldr	r3, [pc, #516]	; (80042c8 <_dtoa_r+0x620>)
 80040c4:	f7fc f850 	bl	8000168 <__aeabi_dsub>
 80040c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80040ca:	462b      	mov	r3, r5
 80040cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80040d0:	f7fc fc8e 	bl	80009f0 <__aeabi_dcmpgt>
 80040d4:	2800      	cmp	r0, #0
 80040d6:	f040 82f7 	bne.w	80046c8 <_dtoa_r+0xa20>
 80040da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80040de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80040e0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80040e4:	f7fc fc66 	bl	80009b4 <__aeabi_dcmplt>
 80040e8:	2800      	cmp	r0, #0
 80040ea:	f040 82eb 	bne.w	80046c4 <_dtoa_r+0xa1c>
 80040ee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80040f2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80040f6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	f2c0 8150 	blt.w	800439e <_dtoa_r+0x6f6>
 80040fe:	f1bb 0f0e 	cmp.w	fp, #14
 8004102:	f300 814c 	bgt.w	800439e <_dtoa_r+0x6f6>
 8004106:	4b6b      	ldr	r3, [pc, #428]	; (80042b4 <_dtoa_r+0x60c>)
 8004108:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800410c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004110:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004114:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004116:	2b00      	cmp	r3, #0
 8004118:	f280 80da 	bge.w	80042d0 <_dtoa_r+0x628>
 800411c:	f1b9 0f00 	cmp.w	r9, #0
 8004120:	f300 80d6 	bgt.w	80042d0 <_dtoa_r+0x628>
 8004124:	f040 82cd 	bne.w	80046c2 <_dtoa_r+0xa1a>
 8004128:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800412c:	2200      	movs	r2, #0
 800412e:	4b66      	ldr	r3, [pc, #408]	; (80042c8 <_dtoa_r+0x620>)
 8004130:	f7fc f9ce 	bl	80004d0 <__aeabi_dmul>
 8004134:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004138:	f7fc fc50 	bl	80009dc <__aeabi_dcmpge>
 800413c:	464e      	mov	r6, r9
 800413e:	464f      	mov	r7, r9
 8004140:	2800      	cmp	r0, #0
 8004142:	f040 82a4 	bne.w	800468e <_dtoa_r+0x9e6>
 8004146:	9b06      	ldr	r3, [sp, #24]
 8004148:	9a06      	ldr	r2, [sp, #24]
 800414a:	1c5d      	adds	r5, r3, #1
 800414c:	2331      	movs	r3, #49	; 0x31
 800414e:	f10b 0b01 	add.w	fp, fp, #1
 8004152:	7013      	strb	r3, [r2, #0]
 8004154:	e29f      	b.n	8004696 <_dtoa_r+0x9ee>
 8004156:	07f2      	lsls	r2, r6, #31
 8004158:	d505      	bpl.n	8004166 <_dtoa_r+0x4be>
 800415a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800415e:	f7fc f9b7 	bl	80004d0 <__aeabi_dmul>
 8004162:	2301      	movs	r3, #1
 8004164:	3501      	adds	r5, #1
 8004166:	1076      	asrs	r6, r6, #1
 8004168:	3708      	adds	r7, #8
 800416a:	e76d      	b.n	8004048 <_dtoa_r+0x3a0>
 800416c:	2502      	movs	r5, #2
 800416e:	e770      	b.n	8004052 <_dtoa_r+0x3aa>
 8004170:	465f      	mov	r7, fp
 8004172:	464e      	mov	r6, r9
 8004174:	e78f      	b.n	8004096 <_dtoa_r+0x3ee>
 8004176:	9a06      	ldr	r2, [sp, #24]
 8004178:	4b4e      	ldr	r3, [pc, #312]	; (80042b4 <_dtoa_r+0x60c>)
 800417a:	4432      	add	r2, r6
 800417c:	9211      	str	r2, [sp, #68]	; 0x44
 800417e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004180:	1e71      	subs	r1, r6, #1
 8004182:	2a00      	cmp	r2, #0
 8004184:	d048      	beq.n	8004218 <_dtoa_r+0x570>
 8004186:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800418a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800418e:	2000      	movs	r0, #0
 8004190:	494e      	ldr	r1, [pc, #312]	; (80042cc <_dtoa_r+0x624>)
 8004192:	f7fc fac7 	bl	8000724 <__aeabi_ddiv>
 8004196:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800419a:	f7fb ffe5 	bl	8000168 <__aeabi_dsub>
 800419e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80041a2:	9d06      	ldr	r5, [sp, #24]
 80041a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80041a8:	f7fc fc42 	bl	8000a30 <__aeabi_d2iz>
 80041ac:	4606      	mov	r6, r0
 80041ae:	f7fc f929 	bl	8000404 <__aeabi_i2d>
 80041b2:	4602      	mov	r2, r0
 80041b4:	460b      	mov	r3, r1
 80041b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80041ba:	f7fb ffd5 	bl	8000168 <__aeabi_dsub>
 80041be:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80041c2:	3630      	adds	r6, #48	; 0x30
 80041c4:	f805 6b01 	strb.w	r6, [r5], #1
 80041c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80041cc:	f7fc fbf2 	bl	80009b4 <__aeabi_dcmplt>
 80041d0:	2800      	cmp	r0, #0
 80041d2:	d164      	bne.n	800429e <_dtoa_r+0x5f6>
 80041d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80041d8:	2000      	movs	r0, #0
 80041da:	4938      	ldr	r1, [pc, #224]	; (80042bc <_dtoa_r+0x614>)
 80041dc:	f7fb ffc4 	bl	8000168 <__aeabi_dsub>
 80041e0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80041e4:	f7fc fbe6 	bl	80009b4 <__aeabi_dcmplt>
 80041e8:	2800      	cmp	r0, #0
 80041ea:	f040 80b9 	bne.w	8004360 <_dtoa_r+0x6b8>
 80041ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80041f0:	429d      	cmp	r5, r3
 80041f2:	f43f af7c 	beq.w	80040ee <_dtoa_r+0x446>
 80041f6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80041fa:	2200      	movs	r2, #0
 80041fc:	4b30      	ldr	r3, [pc, #192]	; (80042c0 <_dtoa_r+0x618>)
 80041fe:	f7fc f967 	bl	80004d0 <__aeabi_dmul>
 8004202:	2200      	movs	r2, #0
 8004204:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004208:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800420c:	4b2c      	ldr	r3, [pc, #176]	; (80042c0 <_dtoa_r+0x618>)
 800420e:	f7fc f95f 	bl	80004d0 <__aeabi_dmul>
 8004212:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004216:	e7c5      	b.n	80041a4 <_dtoa_r+0x4fc>
 8004218:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800421c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004220:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004224:	f7fc f954 	bl	80004d0 <__aeabi_dmul>
 8004228:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800422c:	9d06      	ldr	r5, [sp, #24]
 800422e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004232:	f7fc fbfd 	bl	8000a30 <__aeabi_d2iz>
 8004236:	4606      	mov	r6, r0
 8004238:	f7fc f8e4 	bl	8000404 <__aeabi_i2d>
 800423c:	4602      	mov	r2, r0
 800423e:	460b      	mov	r3, r1
 8004240:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004244:	f7fb ff90 	bl	8000168 <__aeabi_dsub>
 8004248:	3630      	adds	r6, #48	; 0x30
 800424a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800424c:	f805 6b01 	strb.w	r6, [r5], #1
 8004250:	42ab      	cmp	r3, r5
 8004252:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004256:	f04f 0200 	mov.w	r2, #0
 800425a:	d124      	bne.n	80042a6 <_dtoa_r+0x5fe>
 800425c:	4b1b      	ldr	r3, [pc, #108]	; (80042cc <_dtoa_r+0x624>)
 800425e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004262:	f7fb ff83 	bl	800016c <__adddf3>
 8004266:	4602      	mov	r2, r0
 8004268:	460b      	mov	r3, r1
 800426a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800426e:	f7fc fbbf 	bl	80009f0 <__aeabi_dcmpgt>
 8004272:	2800      	cmp	r0, #0
 8004274:	d174      	bne.n	8004360 <_dtoa_r+0x6b8>
 8004276:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800427a:	2000      	movs	r0, #0
 800427c:	4913      	ldr	r1, [pc, #76]	; (80042cc <_dtoa_r+0x624>)
 800427e:	f7fb ff73 	bl	8000168 <__aeabi_dsub>
 8004282:	4602      	mov	r2, r0
 8004284:	460b      	mov	r3, r1
 8004286:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800428a:	f7fc fb93 	bl	80009b4 <__aeabi_dcmplt>
 800428e:	2800      	cmp	r0, #0
 8004290:	f43f af2d 	beq.w	80040ee <_dtoa_r+0x446>
 8004294:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004298:	1e6a      	subs	r2, r5, #1
 800429a:	2b30      	cmp	r3, #48	; 0x30
 800429c:	d001      	beq.n	80042a2 <_dtoa_r+0x5fa>
 800429e:	46bb      	mov	fp, r7
 80042a0:	e04d      	b.n	800433e <_dtoa_r+0x696>
 80042a2:	4615      	mov	r5, r2
 80042a4:	e7f6      	b.n	8004294 <_dtoa_r+0x5ec>
 80042a6:	4b06      	ldr	r3, [pc, #24]	; (80042c0 <_dtoa_r+0x618>)
 80042a8:	f7fc f912 	bl	80004d0 <__aeabi_dmul>
 80042ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80042b0:	e7bd      	b.n	800422e <_dtoa_r+0x586>
 80042b2:	bf00      	nop
 80042b4:	08005608 	.word	0x08005608
 80042b8:	080055e0 	.word	0x080055e0
 80042bc:	3ff00000 	.word	0x3ff00000
 80042c0:	40240000 	.word	0x40240000
 80042c4:	401c0000 	.word	0x401c0000
 80042c8:	40140000 	.word	0x40140000
 80042cc:	3fe00000 	.word	0x3fe00000
 80042d0:	9d06      	ldr	r5, [sp, #24]
 80042d2:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80042d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80042da:	4630      	mov	r0, r6
 80042dc:	4639      	mov	r1, r7
 80042de:	f7fc fa21 	bl	8000724 <__aeabi_ddiv>
 80042e2:	f7fc fba5 	bl	8000a30 <__aeabi_d2iz>
 80042e6:	4680      	mov	r8, r0
 80042e8:	f7fc f88c 	bl	8000404 <__aeabi_i2d>
 80042ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80042f0:	f7fc f8ee 	bl	80004d0 <__aeabi_dmul>
 80042f4:	4602      	mov	r2, r0
 80042f6:	460b      	mov	r3, r1
 80042f8:	4630      	mov	r0, r6
 80042fa:	4639      	mov	r1, r7
 80042fc:	f7fb ff34 	bl	8000168 <__aeabi_dsub>
 8004300:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8004304:	f805 6b01 	strb.w	r6, [r5], #1
 8004308:	9e06      	ldr	r6, [sp, #24]
 800430a:	4602      	mov	r2, r0
 800430c:	1bae      	subs	r6, r5, r6
 800430e:	45b1      	cmp	r9, r6
 8004310:	460b      	mov	r3, r1
 8004312:	d137      	bne.n	8004384 <_dtoa_r+0x6dc>
 8004314:	f7fb ff2a 	bl	800016c <__adddf3>
 8004318:	4606      	mov	r6, r0
 800431a:	460f      	mov	r7, r1
 800431c:	4602      	mov	r2, r0
 800431e:	460b      	mov	r3, r1
 8004320:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004324:	f7fc fb46 	bl	80009b4 <__aeabi_dcmplt>
 8004328:	b9c8      	cbnz	r0, 800435e <_dtoa_r+0x6b6>
 800432a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800432e:	4632      	mov	r2, r6
 8004330:	463b      	mov	r3, r7
 8004332:	f7fc fb35 	bl	80009a0 <__aeabi_dcmpeq>
 8004336:	b110      	cbz	r0, 800433e <_dtoa_r+0x696>
 8004338:	f018 0f01 	tst.w	r8, #1
 800433c:	d10f      	bne.n	800435e <_dtoa_r+0x6b6>
 800433e:	4651      	mov	r1, sl
 8004340:	4620      	mov	r0, r4
 8004342:	f000 fae8 	bl	8004916 <_Bfree>
 8004346:	2300      	movs	r3, #0
 8004348:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800434a:	702b      	strb	r3, [r5, #0]
 800434c:	f10b 0301 	add.w	r3, fp, #1
 8004350:	6013      	str	r3, [r2, #0]
 8004352:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004354:	2b00      	cmp	r3, #0
 8004356:	f43f acec 	beq.w	8003d32 <_dtoa_r+0x8a>
 800435a:	601d      	str	r5, [r3, #0]
 800435c:	e4e9      	b.n	8003d32 <_dtoa_r+0x8a>
 800435e:	465f      	mov	r7, fp
 8004360:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004364:	1e6b      	subs	r3, r5, #1
 8004366:	2a39      	cmp	r2, #57	; 0x39
 8004368:	d106      	bne.n	8004378 <_dtoa_r+0x6d0>
 800436a:	9a06      	ldr	r2, [sp, #24]
 800436c:	429a      	cmp	r2, r3
 800436e:	d107      	bne.n	8004380 <_dtoa_r+0x6d8>
 8004370:	2330      	movs	r3, #48	; 0x30
 8004372:	7013      	strb	r3, [r2, #0]
 8004374:	4613      	mov	r3, r2
 8004376:	3701      	adds	r7, #1
 8004378:	781a      	ldrb	r2, [r3, #0]
 800437a:	3201      	adds	r2, #1
 800437c:	701a      	strb	r2, [r3, #0]
 800437e:	e78e      	b.n	800429e <_dtoa_r+0x5f6>
 8004380:	461d      	mov	r5, r3
 8004382:	e7ed      	b.n	8004360 <_dtoa_r+0x6b8>
 8004384:	2200      	movs	r2, #0
 8004386:	4bb5      	ldr	r3, [pc, #724]	; (800465c <_dtoa_r+0x9b4>)
 8004388:	f7fc f8a2 	bl	80004d0 <__aeabi_dmul>
 800438c:	2200      	movs	r2, #0
 800438e:	2300      	movs	r3, #0
 8004390:	4606      	mov	r6, r0
 8004392:	460f      	mov	r7, r1
 8004394:	f7fc fb04 	bl	80009a0 <__aeabi_dcmpeq>
 8004398:	2800      	cmp	r0, #0
 800439a:	d09c      	beq.n	80042d6 <_dtoa_r+0x62e>
 800439c:	e7cf      	b.n	800433e <_dtoa_r+0x696>
 800439e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80043a0:	2a00      	cmp	r2, #0
 80043a2:	f000 8129 	beq.w	80045f8 <_dtoa_r+0x950>
 80043a6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80043a8:	2a01      	cmp	r2, #1
 80043aa:	f300 810e 	bgt.w	80045ca <_dtoa_r+0x922>
 80043ae:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80043b0:	2a00      	cmp	r2, #0
 80043b2:	f000 8106 	beq.w	80045c2 <_dtoa_r+0x91a>
 80043b6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80043ba:	4645      	mov	r5, r8
 80043bc:	9e08      	ldr	r6, [sp, #32]
 80043be:	9a07      	ldr	r2, [sp, #28]
 80043c0:	2101      	movs	r1, #1
 80043c2:	441a      	add	r2, r3
 80043c4:	4620      	mov	r0, r4
 80043c6:	4498      	add	r8, r3
 80043c8:	9207      	str	r2, [sp, #28]
 80043ca:	f000 fb44 	bl	8004a56 <__i2b>
 80043ce:	4607      	mov	r7, r0
 80043d0:	2d00      	cmp	r5, #0
 80043d2:	dd0b      	ble.n	80043ec <_dtoa_r+0x744>
 80043d4:	9b07      	ldr	r3, [sp, #28]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	dd08      	ble.n	80043ec <_dtoa_r+0x744>
 80043da:	42ab      	cmp	r3, r5
 80043dc:	bfa8      	it	ge
 80043de:	462b      	movge	r3, r5
 80043e0:	9a07      	ldr	r2, [sp, #28]
 80043e2:	eba8 0803 	sub.w	r8, r8, r3
 80043e6:	1aed      	subs	r5, r5, r3
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	9307      	str	r3, [sp, #28]
 80043ec:	9b08      	ldr	r3, [sp, #32]
 80043ee:	b1fb      	cbz	r3, 8004430 <_dtoa_r+0x788>
 80043f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	f000 8104 	beq.w	8004600 <_dtoa_r+0x958>
 80043f8:	2e00      	cmp	r6, #0
 80043fa:	dd11      	ble.n	8004420 <_dtoa_r+0x778>
 80043fc:	4639      	mov	r1, r7
 80043fe:	4632      	mov	r2, r6
 8004400:	4620      	mov	r0, r4
 8004402:	f000 fbbd 	bl	8004b80 <__pow5mult>
 8004406:	4652      	mov	r2, sl
 8004408:	4601      	mov	r1, r0
 800440a:	4607      	mov	r7, r0
 800440c:	4620      	mov	r0, r4
 800440e:	f000 fb2b 	bl	8004a68 <__multiply>
 8004412:	4651      	mov	r1, sl
 8004414:	900a      	str	r0, [sp, #40]	; 0x28
 8004416:	4620      	mov	r0, r4
 8004418:	f000 fa7d 	bl	8004916 <_Bfree>
 800441c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800441e:	469a      	mov	sl, r3
 8004420:	9b08      	ldr	r3, [sp, #32]
 8004422:	1b9a      	subs	r2, r3, r6
 8004424:	d004      	beq.n	8004430 <_dtoa_r+0x788>
 8004426:	4651      	mov	r1, sl
 8004428:	4620      	mov	r0, r4
 800442a:	f000 fba9 	bl	8004b80 <__pow5mult>
 800442e:	4682      	mov	sl, r0
 8004430:	2101      	movs	r1, #1
 8004432:	4620      	mov	r0, r4
 8004434:	f000 fb0f 	bl	8004a56 <__i2b>
 8004438:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800443a:	4606      	mov	r6, r0
 800443c:	2b00      	cmp	r3, #0
 800443e:	f340 80e1 	ble.w	8004604 <_dtoa_r+0x95c>
 8004442:	461a      	mov	r2, r3
 8004444:	4601      	mov	r1, r0
 8004446:	4620      	mov	r0, r4
 8004448:	f000 fb9a 	bl	8004b80 <__pow5mult>
 800444c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800444e:	4606      	mov	r6, r0
 8004450:	2b01      	cmp	r3, #1
 8004452:	f340 80da 	ble.w	800460a <_dtoa_r+0x962>
 8004456:	2300      	movs	r3, #0
 8004458:	9308      	str	r3, [sp, #32]
 800445a:	6933      	ldr	r3, [r6, #16]
 800445c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004460:	6918      	ldr	r0, [r3, #16]
 8004462:	f000 faaa 	bl	80049ba <__hi0bits>
 8004466:	f1c0 0020 	rsb	r0, r0, #32
 800446a:	9b07      	ldr	r3, [sp, #28]
 800446c:	4418      	add	r0, r3
 800446e:	f010 001f 	ands.w	r0, r0, #31
 8004472:	f000 80f0 	beq.w	8004656 <_dtoa_r+0x9ae>
 8004476:	f1c0 0320 	rsb	r3, r0, #32
 800447a:	2b04      	cmp	r3, #4
 800447c:	f340 80e2 	ble.w	8004644 <_dtoa_r+0x99c>
 8004480:	9b07      	ldr	r3, [sp, #28]
 8004482:	f1c0 001c 	rsb	r0, r0, #28
 8004486:	4480      	add	r8, r0
 8004488:	4405      	add	r5, r0
 800448a:	4403      	add	r3, r0
 800448c:	9307      	str	r3, [sp, #28]
 800448e:	f1b8 0f00 	cmp.w	r8, #0
 8004492:	dd05      	ble.n	80044a0 <_dtoa_r+0x7f8>
 8004494:	4651      	mov	r1, sl
 8004496:	4642      	mov	r2, r8
 8004498:	4620      	mov	r0, r4
 800449a:	f000 fbbf 	bl	8004c1c <__lshift>
 800449e:	4682      	mov	sl, r0
 80044a0:	9b07      	ldr	r3, [sp, #28]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	dd05      	ble.n	80044b2 <_dtoa_r+0x80a>
 80044a6:	4631      	mov	r1, r6
 80044a8:	461a      	mov	r2, r3
 80044aa:	4620      	mov	r0, r4
 80044ac:	f000 fbb6 	bl	8004c1c <__lshift>
 80044b0:	4606      	mov	r6, r0
 80044b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	f000 80d3 	beq.w	8004660 <_dtoa_r+0x9b8>
 80044ba:	4631      	mov	r1, r6
 80044bc:	4650      	mov	r0, sl
 80044be:	f000 fbfe 	bl	8004cbe <__mcmp>
 80044c2:	2800      	cmp	r0, #0
 80044c4:	f280 80cc 	bge.w	8004660 <_dtoa_r+0x9b8>
 80044c8:	2300      	movs	r3, #0
 80044ca:	4651      	mov	r1, sl
 80044cc:	220a      	movs	r2, #10
 80044ce:	4620      	mov	r0, r4
 80044d0:	f000 fa38 	bl	8004944 <__multadd>
 80044d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044d6:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80044da:	4682      	mov	sl, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	f000 81a9 	beq.w	8004834 <_dtoa_r+0xb8c>
 80044e2:	2300      	movs	r3, #0
 80044e4:	4639      	mov	r1, r7
 80044e6:	220a      	movs	r2, #10
 80044e8:	4620      	mov	r0, r4
 80044ea:	f000 fa2b 	bl	8004944 <__multadd>
 80044ee:	9b04      	ldr	r3, [sp, #16]
 80044f0:	4607      	mov	r7, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	dc03      	bgt.n	80044fe <_dtoa_r+0x856>
 80044f6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	f300 80b9 	bgt.w	8004670 <_dtoa_r+0x9c8>
 80044fe:	2d00      	cmp	r5, #0
 8004500:	dd05      	ble.n	800450e <_dtoa_r+0x866>
 8004502:	4639      	mov	r1, r7
 8004504:	462a      	mov	r2, r5
 8004506:	4620      	mov	r0, r4
 8004508:	f000 fb88 	bl	8004c1c <__lshift>
 800450c:	4607      	mov	r7, r0
 800450e:	9b08      	ldr	r3, [sp, #32]
 8004510:	2b00      	cmp	r3, #0
 8004512:	f000 8110 	beq.w	8004736 <_dtoa_r+0xa8e>
 8004516:	6879      	ldr	r1, [r7, #4]
 8004518:	4620      	mov	r0, r4
 800451a:	f000 f9c8 	bl	80048ae <_Balloc>
 800451e:	4605      	mov	r5, r0
 8004520:	693a      	ldr	r2, [r7, #16]
 8004522:	f107 010c 	add.w	r1, r7, #12
 8004526:	3202      	adds	r2, #2
 8004528:	0092      	lsls	r2, r2, #2
 800452a:	300c      	adds	r0, #12
 800452c:	f000 f9b4 	bl	8004898 <memcpy>
 8004530:	2201      	movs	r2, #1
 8004532:	4629      	mov	r1, r5
 8004534:	4620      	mov	r0, r4
 8004536:	f000 fb71 	bl	8004c1c <__lshift>
 800453a:	9707      	str	r7, [sp, #28]
 800453c:	4607      	mov	r7, r0
 800453e:	9b02      	ldr	r3, [sp, #8]
 8004540:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8004544:	f003 0301 	and.w	r3, r3, #1
 8004548:	9308      	str	r3, [sp, #32]
 800454a:	4631      	mov	r1, r6
 800454c:	4650      	mov	r0, sl
 800454e:	f7ff fb1d 	bl	8003b8c <quorem>
 8004552:	9907      	ldr	r1, [sp, #28]
 8004554:	4605      	mov	r5, r0
 8004556:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800455a:	4650      	mov	r0, sl
 800455c:	f000 fbaf 	bl	8004cbe <__mcmp>
 8004560:	463a      	mov	r2, r7
 8004562:	9002      	str	r0, [sp, #8]
 8004564:	4631      	mov	r1, r6
 8004566:	4620      	mov	r0, r4
 8004568:	f000 fbc3 	bl	8004cf2 <__mdiff>
 800456c:	68c3      	ldr	r3, [r0, #12]
 800456e:	4602      	mov	r2, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	f040 80e2 	bne.w	800473a <_dtoa_r+0xa92>
 8004576:	4601      	mov	r1, r0
 8004578:	9009      	str	r0, [sp, #36]	; 0x24
 800457a:	4650      	mov	r0, sl
 800457c:	f000 fb9f 	bl	8004cbe <__mcmp>
 8004580:	4603      	mov	r3, r0
 8004582:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004584:	4611      	mov	r1, r2
 8004586:	4620      	mov	r0, r4
 8004588:	9309      	str	r3, [sp, #36]	; 0x24
 800458a:	f000 f9c4 	bl	8004916 <_Bfree>
 800458e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004590:	2b00      	cmp	r3, #0
 8004592:	f040 80d4 	bne.w	800473e <_dtoa_r+0xa96>
 8004596:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004598:	2a00      	cmp	r2, #0
 800459a:	f040 80d0 	bne.w	800473e <_dtoa_r+0xa96>
 800459e:	9a08      	ldr	r2, [sp, #32]
 80045a0:	2a00      	cmp	r2, #0
 80045a2:	f040 80cc 	bne.w	800473e <_dtoa_r+0xa96>
 80045a6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80045aa:	f000 80e8 	beq.w	800477e <_dtoa_r+0xad6>
 80045ae:	9b02      	ldr	r3, [sp, #8]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	dd01      	ble.n	80045b8 <_dtoa_r+0x910>
 80045b4:	f105 0931 	add.w	r9, r5, #49	; 0x31
 80045b8:	f108 0501 	add.w	r5, r8, #1
 80045bc:	f888 9000 	strb.w	r9, [r8]
 80045c0:	e06b      	b.n	800469a <_dtoa_r+0x9f2>
 80045c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80045c4:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80045c8:	e6f7      	b.n	80043ba <_dtoa_r+0x712>
 80045ca:	9b08      	ldr	r3, [sp, #32]
 80045cc:	f109 36ff 	add.w	r6, r9, #4294967295	; 0xffffffff
 80045d0:	42b3      	cmp	r3, r6
 80045d2:	bfb7      	itett	lt
 80045d4:	9b08      	ldrlt	r3, [sp, #32]
 80045d6:	1b9e      	subge	r6, r3, r6
 80045d8:	1af2      	sublt	r2, r6, r3
 80045da:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 80045dc:	bfbf      	itttt	lt
 80045de:	9608      	strlt	r6, [sp, #32]
 80045e0:	189b      	addlt	r3, r3, r2
 80045e2:	930c      	strlt	r3, [sp, #48]	; 0x30
 80045e4:	2600      	movlt	r6, #0
 80045e6:	f1b9 0f00 	cmp.w	r9, #0
 80045ea:	bfb9      	ittee	lt
 80045ec:	eba8 0509 	sublt.w	r5, r8, r9
 80045f0:	2300      	movlt	r3, #0
 80045f2:	4645      	movge	r5, r8
 80045f4:	464b      	movge	r3, r9
 80045f6:	e6e2      	b.n	80043be <_dtoa_r+0x716>
 80045f8:	9e08      	ldr	r6, [sp, #32]
 80045fa:	4645      	mov	r5, r8
 80045fc:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80045fe:	e6e7      	b.n	80043d0 <_dtoa_r+0x728>
 8004600:	9a08      	ldr	r2, [sp, #32]
 8004602:	e710      	b.n	8004426 <_dtoa_r+0x77e>
 8004604:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004606:	2b01      	cmp	r3, #1
 8004608:	dc18      	bgt.n	800463c <_dtoa_r+0x994>
 800460a:	9b02      	ldr	r3, [sp, #8]
 800460c:	b9b3      	cbnz	r3, 800463c <_dtoa_r+0x994>
 800460e:	9b03      	ldr	r3, [sp, #12]
 8004610:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004614:	b9a3      	cbnz	r3, 8004640 <_dtoa_r+0x998>
 8004616:	9b03      	ldr	r3, [sp, #12]
 8004618:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800461c:	0d1b      	lsrs	r3, r3, #20
 800461e:	051b      	lsls	r3, r3, #20
 8004620:	b12b      	cbz	r3, 800462e <_dtoa_r+0x986>
 8004622:	9b07      	ldr	r3, [sp, #28]
 8004624:	f108 0801 	add.w	r8, r8, #1
 8004628:	3301      	adds	r3, #1
 800462a:	9307      	str	r3, [sp, #28]
 800462c:	2301      	movs	r3, #1
 800462e:	9308      	str	r3, [sp, #32]
 8004630:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004632:	2b00      	cmp	r3, #0
 8004634:	f47f af11 	bne.w	800445a <_dtoa_r+0x7b2>
 8004638:	2001      	movs	r0, #1
 800463a:	e716      	b.n	800446a <_dtoa_r+0x7c2>
 800463c:	2300      	movs	r3, #0
 800463e:	e7f6      	b.n	800462e <_dtoa_r+0x986>
 8004640:	9b02      	ldr	r3, [sp, #8]
 8004642:	e7f4      	b.n	800462e <_dtoa_r+0x986>
 8004644:	f43f af23 	beq.w	800448e <_dtoa_r+0x7e6>
 8004648:	9a07      	ldr	r2, [sp, #28]
 800464a:	331c      	adds	r3, #28
 800464c:	441a      	add	r2, r3
 800464e:	4498      	add	r8, r3
 8004650:	441d      	add	r5, r3
 8004652:	4613      	mov	r3, r2
 8004654:	e71a      	b.n	800448c <_dtoa_r+0x7e4>
 8004656:	4603      	mov	r3, r0
 8004658:	e7f6      	b.n	8004648 <_dtoa_r+0x9a0>
 800465a:	bf00      	nop
 800465c:	40240000 	.word	0x40240000
 8004660:	f1b9 0f00 	cmp.w	r9, #0
 8004664:	dc33      	bgt.n	80046ce <_dtoa_r+0xa26>
 8004666:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004668:	2b02      	cmp	r3, #2
 800466a:	dd30      	ble.n	80046ce <_dtoa_r+0xa26>
 800466c:	f8cd 9010 	str.w	r9, [sp, #16]
 8004670:	9b04      	ldr	r3, [sp, #16]
 8004672:	b963      	cbnz	r3, 800468e <_dtoa_r+0x9e6>
 8004674:	4631      	mov	r1, r6
 8004676:	2205      	movs	r2, #5
 8004678:	4620      	mov	r0, r4
 800467a:	f000 f963 	bl	8004944 <__multadd>
 800467e:	4601      	mov	r1, r0
 8004680:	4606      	mov	r6, r0
 8004682:	4650      	mov	r0, sl
 8004684:	f000 fb1b 	bl	8004cbe <__mcmp>
 8004688:	2800      	cmp	r0, #0
 800468a:	f73f ad5c 	bgt.w	8004146 <_dtoa_r+0x49e>
 800468e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004690:	9d06      	ldr	r5, [sp, #24]
 8004692:	ea6f 0b03 	mvn.w	fp, r3
 8004696:	2300      	movs	r3, #0
 8004698:	9307      	str	r3, [sp, #28]
 800469a:	4631      	mov	r1, r6
 800469c:	4620      	mov	r0, r4
 800469e:	f000 f93a 	bl	8004916 <_Bfree>
 80046a2:	2f00      	cmp	r7, #0
 80046a4:	f43f ae4b 	beq.w	800433e <_dtoa_r+0x696>
 80046a8:	9b07      	ldr	r3, [sp, #28]
 80046aa:	b12b      	cbz	r3, 80046b8 <_dtoa_r+0xa10>
 80046ac:	42bb      	cmp	r3, r7
 80046ae:	d003      	beq.n	80046b8 <_dtoa_r+0xa10>
 80046b0:	4619      	mov	r1, r3
 80046b2:	4620      	mov	r0, r4
 80046b4:	f000 f92f 	bl	8004916 <_Bfree>
 80046b8:	4639      	mov	r1, r7
 80046ba:	4620      	mov	r0, r4
 80046bc:	f000 f92b 	bl	8004916 <_Bfree>
 80046c0:	e63d      	b.n	800433e <_dtoa_r+0x696>
 80046c2:	2600      	movs	r6, #0
 80046c4:	4637      	mov	r7, r6
 80046c6:	e7e2      	b.n	800468e <_dtoa_r+0x9e6>
 80046c8:	46bb      	mov	fp, r7
 80046ca:	4637      	mov	r7, r6
 80046cc:	e53b      	b.n	8004146 <_dtoa_r+0x49e>
 80046ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046d0:	f8cd 9010 	str.w	r9, [sp, #16]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	f47f af12 	bne.w	80044fe <_dtoa_r+0x856>
 80046da:	9d06      	ldr	r5, [sp, #24]
 80046dc:	4631      	mov	r1, r6
 80046de:	4650      	mov	r0, sl
 80046e0:	f7ff fa54 	bl	8003b8c <quorem>
 80046e4:	9b06      	ldr	r3, [sp, #24]
 80046e6:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80046ea:	f805 9b01 	strb.w	r9, [r5], #1
 80046ee:	9a04      	ldr	r2, [sp, #16]
 80046f0:	1aeb      	subs	r3, r5, r3
 80046f2:	429a      	cmp	r2, r3
 80046f4:	f300 8081 	bgt.w	80047fa <_dtoa_r+0xb52>
 80046f8:	9b06      	ldr	r3, [sp, #24]
 80046fa:	2a01      	cmp	r2, #1
 80046fc:	bfac      	ite	ge
 80046fe:	189b      	addge	r3, r3, r2
 8004700:	3301      	addlt	r3, #1
 8004702:	4698      	mov	r8, r3
 8004704:	2300      	movs	r3, #0
 8004706:	9307      	str	r3, [sp, #28]
 8004708:	4651      	mov	r1, sl
 800470a:	2201      	movs	r2, #1
 800470c:	4620      	mov	r0, r4
 800470e:	f000 fa85 	bl	8004c1c <__lshift>
 8004712:	4631      	mov	r1, r6
 8004714:	4682      	mov	sl, r0
 8004716:	f000 fad2 	bl	8004cbe <__mcmp>
 800471a:	2800      	cmp	r0, #0
 800471c:	dc34      	bgt.n	8004788 <_dtoa_r+0xae0>
 800471e:	d102      	bne.n	8004726 <_dtoa_r+0xa7e>
 8004720:	f019 0f01 	tst.w	r9, #1
 8004724:	d130      	bne.n	8004788 <_dtoa_r+0xae0>
 8004726:	4645      	mov	r5, r8
 8004728:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800472c:	1e6a      	subs	r2, r5, #1
 800472e:	2b30      	cmp	r3, #48	; 0x30
 8004730:	d1b3      	bne.n	800469a <_dtoa_r+0x9f2>
 8004732:	4615      	mov	r5, r2
 8004734:	e7f8      	b.n	8004728 <_dtoa_r+0xa80>
 8004736:	4638      	mov	r0, r7
 8004738:	e6ff      	b.n	800453a <_dtoa_r+0x892>
 800473a:	2301      	movs	r3, #1
 800473c:	e722      	b.n	8004584 <_dtoa_r+0x8dc>
 800473e:	9a02      	ldr	r2, [sp, #8]
 8004740:	2a00      	cmp	r2, #0
 8004742:	db04      	blt.n	800474e <_dtoa_r+0xaa6>
 8004744:	d128      	bne.n	8004798 <_dtoa_r+0xaf0>
 8004746:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004748:	bb32      	cbnz	r2, 8004798 <_dtoa_r+0xaf0>
 800474a:	9a08      	ldr	r2, [sp, #32]
 800474c:	bb22      	cbnz	r2, 8004798 <_dtoa_r+0xaf0>
 800474e:	2b00      	cmp	r3, #0
 8004750:	f77f af32 	ble.w	80045b8 <_dtoa_r+0x910>
 8004754:	4651      	mov	r1, sl
 8004756:	2201      	movs	r2, #1
 8004758:	4620      	mov	r0, r4
 800475a:	f000 fa5f 	bl	8004c1c <__lshift>
 800475e:	4631      	mov	r1, r6
 8004760:	4682      	mov	sl, r0
 8004762:	f000 faac 	bl	8004cbe <__mcmp>
 8004766:	2800      	cmp	r0, #0
 8004768:	dc05      	bgt.n	8004776 <_dtoa_r+0xace>
 800476a:	f47f af25 	bne.w	80045b8 <_dtoa_r+0x910>
 800476e:	f019 0f01 	tst.w	r9, #1
 8004772:	f43f af21 	beq.w	80045b8 <_dtoa_r+0x910>
 8004776:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800477a:	f47f af1b 	bne.w	80045b4 <_dtoa_r+0x90c>
 800477e:	2339      	movs	r3, #57	; 0x39
 8004780:	f108 0801 	add.w	r8, r8, #1
 8004784:	f808 3c01 	strb.w	r3, [r8, #-1]
 8004788:	4645      	mov	r5, r8
 800478a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800478e:	1e6a      	subs	r2, r5, #1
 8004790:	2b39      	cmp	r3, #57	; 0x39
 8004792:	d03a      	beq.n	800480a <_dtoa_r+0xb62>
 8004794:	3301      	adds	r3, #1
 8004796:	e03f      	b.n	8004818 <_dtoa_r+0xb70>
 8004798:	2b00      	cmp	r3, #0
 800479a:	f108 0501 	add.w	r5, r8, #1
 800479e:	dd05      	ble.n	80047ac <_dtoa_r+0xb04>
 80047a0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80047a4:	d0eb      	beq.n	800477e <_dtoa_r+0xad6>
 80047a6:	f109 0901 	add.w	r9, r9, #1
 80047aa:	e707      	b.n	80045bc <_dtoa_r+0x914>
 80047ac:	9b06      	ldr	r3, [sp, #24]
 80047ae:	9a04      	ldr	r2, [sp, #16]
 80047b0:	1aeb      	subs	r3, r5, r3
 80047b2:	4293      	cmp	r3, r2
 80047b4:	46a8      	mov	r8, r5
 80047b6:	f805 9c01 	strb.w	r9, [r5, #-1]
 80047ba:	d0a5      	beq.n	8004708 <_dtoa_r+0xa60>
 80047bc:	4651      	mov	r1, sl
 80047be:	2300      	movs	r3, #0
 80047c0:	220a      	movs	r2, #10
 80047c2:	4620      	mov	r0, r4
 80047c4:	f000 f8be 	bl	8004944 <__multadd>
 80047c8:	9b07      	ldr	r3, [sp, #28]
 80047ca:	4682      	mov	sl, r0
 80047cc:	42bb      	cmp	r3, r7
 80047ce:	f04f 020a 	mov.w	r2, #10
 80047d2:	f04f 0300 	mov.w	r3, #0
 80047d6:	9907      	ldr	r1, [sp, #28]
 80047d8:	4620      	mov	r0, r4
 80047da:	d104      	bne.n	80047e6 <_dtoa_r+0xb3e>
 80047dc:	f000 f8b2 	bl	8004944 <__multadd>
 80047e0:	9007      	str	r0, [sp, #28]
 80047e2:	4607      	mov	r7, r0
 80047e4:	e6b1      	b.n	800454a <_dtoa_r+0x8a2>
 80047e6:	f000 f8ad 	bl	8004944 <__multadd>
 80047ea:	2300      	movs	r3, #0
 80047ec:	9007      	str	r0, [sp, #28]
 80047ee:	220a      	movs	r2, #10
 80047f0:	4639      	mov	r1, r7
 80047f2:	4620      	mov	r0, r4
 80047f4:	f000 f8a6 	bl	8004944 <__multadd>
 80047f8:	e7f3      	b.n	80047e2 <_dtoa_r+0xb3a>
 80047fa:	4651      	mov	r1, sl
 80047fc:	2300      	movs	r3, #0
 80047fe:	220a      	movs	r2, #10
 8004800:	4620      	mov	r0, r4
 8004802:	f000 f89f 	bl	8004944 <__multadd>
 8004806:	4682      	mov	sl, r0
 8004808:	e768      	b.n	80046dc <_dtoa_r+0xa34>
 800480a:	9b06      	ldr	r3, [sp, #24]
 800480c:	4293      	cmp	r3, r2
 800480e:	d105      	bne.n	800481c <_dtoa_r+0xb74>
 8004810:	2331      	movs	r3, #49	; 0x31
 8004812:	9a06      	ldr	r2, [sp, #24]
 8004814:	f10b 0b01 	add.w	fp, fp, #1
 8004818:	7013      	strb	r3, [r2, #0]
 800481a:	e73e      	b.n	800469a <_dtoa_r+0x9f2>
 800481c:	4615      	mov	r5, r2
 800481e:	e7b4      	b.n	800478a <_dtoa_r+0xae2>
 8004820:	4b09      	ldr	r3, [pc, #36]	; (8004848 <_dtoa_r+0xba0>)
 8004822:	f7ff baa3 	b.w	8003d6c <_dtoa_r+0xc4>
 8004826:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004828:	2b00      	cmp	r3, #0
 800482a:	f47f aa7d 	bne.w	8003d28 <_dtoa_r+0x80>
 800482e:	4b07      	ldr	r3, [pc, #28]	; (800484c <_dtoa_r+0xba4>)
 8004830:	f7ff ba9c 	b.w	8003d6c <_dtoa_r+0xc4>
 8004834:	9b04      	ldr	r3, [sp, #16]
 8004836:	2b00      	cmp	r3, #0
 8004838:	f73f af4f 	bgt.w	80046da <_dtoa_r+0xa32>
 800483c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800483e:	2b02      	cmp	r3, #2
 8004840:	f77f af4b 	ble.w	80046da <_dtoa_r+0xa32>
 8004844:	e714      	b.n	8004670 <_dtoa_r+0x9c8>
 8004846:	bf00      	nop
 8004848:	080055a8 	.word	0x080055a8
 800484c:	080055cc 	.word	0x080055cc

08004850 <_localeconv_r>:
 8004850:	4b04      	ldr	r3, [pc, #16]	; (8004864 <_localeconv_r+0x14>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	6a18      	ldr	r0, [r3, #32]
 8004856:	4b04      	ldr	r3, [pc, #16]	; (8004868 <_localeconv_r+0x18>)
 8004858:	2800      	cmp	r0, #0
 800485a:	bf08      	it	eq
 800485c:	4618      	moveq	r0, r3
 800485e:	30f0      	adds	r0, #240	; 0xf0
 8004860:	4770      	bx	lr
 8004862:	bf00      	nop
 8004864:	20000010 	.word	0x20000010
 8004868:	20000074 	.word	0x20000074

0800486c <malloc>:
 800486c:	4b02      	ldr	r3, [pc, #8]	; (8004878 <malloc+0xc>)
 800486e:	4601      	mov	r1, r0
 8004870:	6818      	ldr	r0, [r3, #0]
 8004872:	f000 bb47 	b.w	8004f04 <_malloc_r>
 8004876:	bf00      	nop
 8004878:	20000010 	.word	0x20000010

0800487c <memchr>:
 800487c:	b510      	push	{r4, lr}
 800487e:	b2c9      	uxtb	r1, r1
 8004880:	4402      	add	r2, r0
 8004882:	4290      	cmp	r0, r2
 8004884:	4603      	mov	r3, r0
 8004886:	d101      	bne.n	800488c <memchr+0x10>
 8004888:	2000      	movs	r0, #0
 800488a:	bd10      	pop	{r4, pc}
 800488c:	781c      	ldrb	r4, [r3, #0]
 800488e:	3001      	adds	r0, #1
 8004890:	428c      	cmp	r4, r1
 8004892:	d1f6      	bne.n	8004882 <memchr+0x6>
 8004894:	4618      	mov	r0, r3
 8004896:	bd10      	pop	{r4, pc}

08004898 <memcpy>:
 8004898:	b510      	push	{r4, lr}
 800489a:	1e43      	subs	r3, r0, #1
 800489c:	440a      	add	r2, r1
 800489e:	4291      	cmp	r1, r2
 80048a0:	d100      	bne.n	80048a4 <memcpy+0xc>
 80048a2:	bd10      	pop	{r4, pc}
 80048a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80048ac:	e7f7      	b.n	800489e <memcpy+0x6>

080048ae <_Balloc>:
 80048ae:	b570      	push	{r4, r5, r6, lr}
 80048b0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80048b2:	4604      	mov	r4, r0
 80048b4:	460e      	mov	r6, r1
 80048b6:	b93d      	cbnz	r5, 80048c8 <_Balloc+0x1a>
 80048b8:	2010      	movs	r0, #16
 80048ba:	f7ff ffd7 	bl	800486c <malloc>
 80048be:	6260      	str	r0, [r4, #36]	; 0x24
 80048c0:	6045      	str	r5, [r0, #4]
 80048c2:	6085      	str	r5, [r0, #8]
 80048c4:	6005      	str	r5, [r0, #0]
 80048c6:	60c5      	str	r5, [r0, #12]
 80048c8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80048ca:	68eb      	ldr	r3, [r5, #12]
 80048cc:	b183      	cbz	r3, 80048f0 <_Balloc+0x42>
 80048ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80048d6:	b9b8      	cbnz	r0, 8004908 <_Balloc+0x5a>
 80048d8:	2101      	movs	r1, #1
 80048da:	fa01 f506 	lsl.w	r5, r1, r6
 80048de:	1d6a      	adds	r2, r5, #5
 80048e0:	0092      	lsls	r2, r2, #2
 80048e2:	4620      	mov	r0, r4
 80048e4:	f000 fab3 	bl	8004e4e <_calloc_r>
 80048e8:	b160      	cbz	r0, 8004904 <_Balloc+0x56>
 80048ea:	6046      	str	r6, [r0, #4]
 80048ec:	6085      	str	r5, [r0, #8]
 80048ee:	e00e      	b.n	800490e <_Balloc+0x60>
 80048f0:	2221      	movs	r2, #33	; 0x21
 80048f2:	2104      	movs	r1, #4
 80048f4:	4620      	mov	r0, r4
 80048f6:	f000 faaa 	bl	8004e4e <_calloc_r>
 80048fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80048fc:	60e8      	str	r0, [r5, #12]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d1e4      	bne.n	80048ce <_Balloc+0x20>
 8004904:	2000      	movs	r0, #0
 8004906:	bd70      	pop	{r4, r5, r6, pc}
 8004908:	6802      	ldr	r2, [r0, #0]
 800490a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800490e:	2300      	movs	r3, #0
 8004910:	6103      	str	r3, [r0, #16]
 8004912:	60c3      	str	r3, [r0, #12]
 8004914:	bd70      	pop	{r4, r5, r6, pc}

08004916 <_Bfree>:
 8004916:	b570      	push	{r4, r5, r6, lr}
 8004918:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800491a:	4606      	mov	r6, r0
 800491c:	460d      	mov	r5, r1
 800491e:	b93c      	cbnz	r4, 8004930 <_Bfree+0x1a>
 8004920:	2010      	movs	r0, #16
 8004922:	f7ff ffa3 	bl	800486c <malloc>
 8004926:	6270      	str	r0, [r6, #36]	; 0x24
 8004928:	6044      	str	r4, [r0, #4]
 800492a:	6084      	str	r4, [r0, #8]
 800492c:	6004      	str	r4, [r0, #0]
 800492e:	60c4      	str	r4, [r0, #12]
 8004930:	b13d      	cbz	r5, 8004942 <_Bfree+0x2c>
 8004932:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004934:	686a      	ldr	r2, [r5, #4]
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800493c:	6029      	str	r1, [r5, #0]
 800493e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8004942:	bd70      	pop	{r4, r5, r6, pc}

08004944 <__multadd>:
 8004944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004948:	461f      	mov	r7, r3
 800494a:	4606      	mov	r6, r0
 800494c:	460c      	mov	r4, r1
 800494e:	2300      	movs	r3, #0
 8004950:	690d      	ldr	r5, [r1, #16]
 8004952:	f101 0e14 	add.w	lr, r1, #20
 8004956:	f8de 0000 	ldr.w	r0, [lr]
 800495a:	3301      	adds	r3, #1
 800495c:	b281      	uxth	r1, r0
 800495e:	fb02 7101 	mla	r1, r2, r1, r7
 8004962:	0c00      	lsrs	r0, r0, #16
 8004964:	0c0f      	lsrs	r7, r1, #16
 8004966:	fb02 7000 	mla	r0, r2, r0, r7
 800496a:	b289      	uxth	r1, r1
 800496c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8004970:	429d      	cmp	r5, r3
 8004972:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8004976:	f84e 1b04 	str.w	r1, [lr], #4
 800497a:	dcec      	bgt.n	8004956 <__multadd+0x12>
 800497c:	b1d7      	cbz	r7, 80049b4 <__multadd+0x70>
 800497e:	68a3      	ldr	r3, [r4, #8]
 8004980:	429d      	cmp	r5, r3
 8004982:	db12      	blt.n	80049aa <__multadd+0x66>
 8004984:	6861      	ldr	r1, [r4, #4]
 8004986:	4630      	mov	r0, r6
 8004988:	3101      	adds	r1, #1
 800498a:	f7ff ff90 	bl	80048ae <_Balloc>
 800498e:	4680      	mov	r8, r0
 8004990:	6922      	ldr	r2, [r4, #16]
 8004992:	f104 010c 	add.w	r1, r4, #12
 8004996:	3202      	adds	r2, #2
 8004998:	0092      	lsls	r2, r2, #2
 800499a:	300c      	adds	r0, #12
 800499c:	f7ff ff7c 	bl	8004898 <memcpy>
 80049a0:	4621      	mov	r1, r4
 80049a2:	4630      	mov	r0, r6
 80049a4:	f7ff ffb7 	bl	8004916 <_Bfree>
 80049a8:	4644      	mov	r4, r8
 80049aa:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80049ae:	3501      	adds	r5, #1
 80049b0:	615f      	str	r7, [r3, #20]
 80049b2:	6125      	str	r5, [r4, #16]
 80049b4:	4620      	mov	r0, r4
 80049b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080049ba <__hi0bits>:
 80049ba:	0c02      	lsrs	r2, r0, #16
 80049bc:	0412      	lsls	r2, r2, #16
 80049be:	4603      	mov	r3, r0
 80049c0:	b9b2      	cbnz	r2, 80049f0 <__hi0bits+0x36>
 80049c2:	0403      	lsls	r3, r0, #16
 80049c4:	2010      	movs	r0, #16
 80049c6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80049ca:	bf04      	itt	eq
 80049cc:	021b      	lsleq	r3, r3, #8
 80049ce:	3008      	addeq	r0, #8
 80049d0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80049d4:	bf04      	itt	eq
 80049d6:	011b      	lsleq	r3, r3, #4
 80049d8:	3004      	addeq	r0, #4
 80049da:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80049de:	bf04      	itt	eq
 80049e0:	009b      	lsleq	r3, r3, #2
 80049e2:	3002      	addeq	r0, #2
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	db06      	blt.n	80049f6 <__hi0bits+0x3c>
 80049e8:	005b      	lsls	r3, r3, #1
 80049ea:	d503      	bpl.n	80049f4 <__hi0bits+0x3a>
 80049ec:	3001      	adds	r0, #1
 80049ee:	4770      	bx	lr
 80049f0:	2000      	movs	r0, #0
 80049f2:	e7e8      	b.n	80049c6 <__hi0bits+0xc>
 80049f4:	2020      	movs	r0, #32
 80049f6:	4770      	bx	lr

080049f8 <__lo0bits>:
 80049f8:	6803      	ldr	r3, [r0, #0]
 80049fa:	4601      	mov	r1, r0
 80049fc:	f013 0207 	ands.w	r2, r3, #7
 8004a00:	d00b      	beq.n	8004a1a <__lo0bits+0x22>
 8004a02:	07da      	lsls	r2, r3, #31
 8004a04:	d423      	bmi.n	8004a4e <__lo0bits+0x56>
 8004a06:	0798      	lsls	r0, r3, #30
 8004a08:	bf49      	itett	mi
 8004a0a:	085b      	lsrmi	r3, r3, #1
 8004a0c:	089b      	lsrpl	r3, r3, #2
 8004a0e:	2001      	movmi	r0, #1
 8004a10:	600b      	strmi	r3, [r1, #0]
 8004a12:	bf5c      	itt	pl
 8004a14:	600b      	strpl	r3, [r1, #0]
 8004a16:	2002      	movpl	r0, #2
 8004a18:	4770      	bx	lr
 8004a1a:	b298      	uxth	r0, r3
 8004a1c:	b9a8      	cbnz	r0, 8004a4a <__lo0bits+0x52>
 8004a1e:	2010      	movs	r0, #16
 8004a20:	0c1b      	lsrs	r3, r3, #16
 8004a22:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004a26:	bf04      	itt	eq
 8004a28:	0a1b      	lsreq	r3, r3, #8
 8004a2a:	3008      	addeq	r0, #8
 8004a2c:	071a      	lsls	r2, r3, #28
 8004a2e:	bf04      	itt	eq
 8004a30:	091b      	lsreq	r3, r3, #4
 8004a32:	3004      	addeq	r0, #4
 8004a34:	079a      	lsls	r2, r3, #30
 8004a36:	bf04      	itt	eq
 8004a38:	089b      	lsreq	r3, r3, #2
 8004a3a:	3002      	addeq	r0, #2
 8004a3c:	07da      	lsls	r2, r3, #31
 8004a3e:	d402      	bmi.n	8004a46 <__lo0bits+0x4e>
 8004a40:	085b      	lsrs	r3, r3, #1
 8004a42:	d006      	beq.n	8004a52 <__lo0bits+0x5a>
 8004a44:	3001      	adds	r0, #1
 8004a46:	600b      	str	r3, [r1, #0]
 8004a48:	4770      	bx	lr
 8004a4a:	4610      	mov	r0, r2
 8004a4c:	e7e9      	b.n	8004a22 <__lo0bits+0x2a>
 8004a4e:	2000      	movs	r0, #0
 8004a50:	4770      	bx	lr
 8004a52:	2020      	movs	r0, #32
 8004a54:	4770      	bx	lr

08004a56 <__i2b>:
 8004a56:	b510      	push	{r4, lr}
 8004a58:	460c      	mov	r4, r1
 8004a5a:	2101      	movs	r1, #1
 8004a5c:	f7ff ff27 	bl	80048ae <_Balloc>
 8004a60:	2201      	movs	r2, #1
 8004a62:	6144      	str	r4, [r0, #20]
 8004a64:	6102      	str	r2, [r0, #16]
 8004a66:	bd10      	pop	{r4, pc}

08004a68 <__multiply>:
 8004a68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a6c:	4614      	mov	r4, r2
 8004a6e:	690a      	ldr	r2, [r1, #16]
 8004a70:	6923      	ldr	r3, [r4, #16]
 8004a72:	4689      	mov	r9, r1
 8004a74:	429a      	cmp	r2, r3
 8004a76:	bfbe      	ittt	lt
 8004a78:	460b      	movlt	r3, r1
 8004a7a:	46a1      	movlt	r9, r4
 8004a7c:	461c      	movlt	r4, r3
 8004a7e:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8004a82:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8004a86:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8004a8a:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8004a8e:	eb07 060a 	add.w	r6, r7, sl
 8004a92:	429e      	cmp	r6, r3
 8004a94:	bfc8      	it	gt
 8004a96:	3101      	addgt	r1, #1
 8004a98:	f7ff ff09 	bl	80048ae <_Balloc>
 8004a9c:	f100 0514 	add.w	r5, r0, #20
 8004aa0:	462b      	mov	r3, r5
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004aa8:	4543      	cmp	r3, r8
 8004aaa:	d316      	bcc.n	8004ada <__multiply+0x72>
 8004aac:	f104 0214 	add.w	r2, r4, #20
 8004ab0:	f109 0114 	add.w	r1, r9, #20
 8004ab4:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8004ab8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8004abc:	9301      	str	r3, [sp, #4]
 8004abe:	9c01      	ldr	r4, [sp, #4]
 8004ac0:	4613      	mov	r3, r2
 8004ac2:	4294      	cmp	r4, r2
 8004ac4:	d80c      	bhi.n	8004ae0 <__multiply+0x78>
 8004ac6:	2e00      	cmp	r6, #0
 8004ac8:	dd03      	ble.n	8004ad2 <__multiply+0x6a>
 8004aca:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d054      	beq.n	8004b7c <__multiply+0x114>
 8004ad2:	6106      	str	r6, [r0, #16]
 8004ad4:	b003      	add	sp, #12
 8004ad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ada:	f843 2b04 	str.w	r2, [r3], #4
 8004ade:	e7e3      	b.n	8004aa8 <__multiply+0x40>
 8004ae0:	f8b3 a000 	ldrh.w	sl, [r3]
 8004ae4:	3204      	adds	r2, #4
 8004ae6:	f1ba 0f00 	cmp.w	sl, #0
 8004aea:	d020      	beq.n	8004b2e <__multiply+0xc6>
 8004aec:	46ae      	mov	lr, r5
 8004aee:	4689      	mov	r9, r1
 8004af0:	f04f 0c00 	mov.w	ip, #0
 8004af4:	f859 4b04 	ldr.w	r4, [r9], #4
 8004af8:	f8be b000 	ldrh.w	fp, [lr]
 8004afc:	b2a3      	uxth	r3, r4
 8004afe:	fb0a b303 	mla	r3, sl, r3, fp
 8004b02:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8004b06:	f8de 4000 	ldr.w	r4, [lr]
 8004b0a:	4463      	add	r3, ip
 8004b0c:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8004b10:	fb0a c40b 	mla	r4, sl, fp, ip
 8004b14:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004b1e:	454f      	cmp	r7, r9
 8004b20:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8004b24:	f84e 3b04 	str.w	r3, [lr], #4
 8004b28:	d8e4      	bhi.n	8004af4 <__multiply+0x8c>
 8004b2a:	f8ce c000 	str.w	ip, [lr]
 8004b2e:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8004b32:	f1b9 0f00 	cmp.w	r9, #0
 8004b36:	d01f      	beq.n	8004b78 <__multiply+0x110>
 8004b38:	46ae      	mov	lr, r5
 8004b3a:	468c      	mov	ip, r1
 8004b3c:	f04f 0a00 	mov.w	sl, #0
 8004b40:	682b      	ldr	r3, [r5, #0]
 8004b42:	f8bc 4000 	ldrh.w	r4, [ip]
 8004b46:	f8be b002 	ldrh.w	fp, [lr, #2]
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	fb09 b404 	mla	r4, r9, r4, fp
 8004b50:	44a2      	add	sl, r4
 8004b52:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8004b56:	f84e 3b04 	str.w	r3, [lr], #4
 8004b5a:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004b5e:	f8be 4000 	ldrh.w	r4, [lr]
 8004b62:	0c1b      	lsrs	r3, r3, #16
 8004b64:	fb09 4303 	mla	r3, r9, r3, r4
 8004b68:	4567      	cmp	r7, ip
 8004b6a:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8004b6e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004b72:	d8e6      	bhi.n	8004b42 <__multiply+0xda>
 8004b74:	f8ce 3000 	str.w	r3, [lr]
 8004b78:	3504      	adds	r5, #4
 8004b7a:	e7a0      	b.n	8004abe <__multiply+0x56>
 8004b7c:	3e01      	subs	r6, #1
 8004b7e:	e7a2      	b.n	8004ac6 <__multiply+0x5e>

08004b80 <__pow5mult>:
 8004b80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b84:	4615      	mov	r5, r2
 8004b86:	f012 0203 	ands.w	r2, r2, #3
 8004b8a:	4606      	mov	r6, r0
 8004b8c:	460f      	mov	r7, r1
 8004b8e:	d007      	beq.n	8004ba0 <__pow5mult+0x20>
 8004b90:	4c21      	ldr	r4, [pc, #132]	; (8004c18 <__pow5mult+0x98>)
 8004b92:	3a01      	subs	r2, #1
 8004b94:	2300      	movs	r3, #0
 8004b96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004b9a:	f7ff fed3 	bl	8004944 <__multadd>
 8004b9e:	4607      	mov	r7, r0
 8004ba0:	10ad      	asrs	r5, r5, #2
 8004ba2:	d035      	beq.n	8004c10 <__pow5mult+0x90>
 8004ba4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004ba6:	b93c      	cbnz	r4, 8004bb8 <__pow5mult+0x38>
 8004ba8:	2010      	movs	r0, #16
 8004baa:	f7ff fe5f 	bl	800486c <malloc>
 8004bae:	6270      	str	r0, [r6, #36]	; 0x24
 8004bb0:	6044      	str	r4, [r0, #4]
 8004bb2:	6084      	str	r4, [r0, #8]
 8004bb4:	6004      	str	r4, [r0, #0]
 8004bb6:	60c4      	str	r4, [r0, #12]
 8004bb8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004bbc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004bc0:	b94c      	cbnz	r4, 8004bd6 <__pow5mult+0x56>
 8004bc2:	f240 2171 	movw	r1, #625	; 0x271
 8004bc6:	4630      	mov	r0, r6
 8004bc8:	f7ff ff45 	bl	8004a56 <__i2b>
 8004bcc:	2300      	movs	r3, #0
 8004bce:	4604      	mov	r4, r0
 8004bd0:	f8c8 0008 	str.w	r0, [r8, #8]
 8004bd4:	6003      	str	r3, [r0, #0]
 8004bd6:	f04f 0800 	mov.w	r8, #0
 8004bda:	07eb      	lsls	r3, r5, #31
 8004bdc:	d50a      	bpl.n	8004bf4 <__pow5mult+0x74>
 8004bde:	4639      	mov	r1, r7
 8004be0:	4622      	mov	r2, r4
 8004be2:	4630      	mov	r0, r6
 8004be4:	f7ff ff40 	bl	8004a68 <__multiply>
 8004be8:	4681      	mov	r9, r0
 8004bea:	4639      	mov	r1, r7
 8004bec:	4630      	mov	r0, r6
 8004bee:	f7ff fe92 	bl	8004916 <_Bfree>
 8004bf2:	464f      	mov	r7, r9
 8004bf4:	106d      	asrs	r5, r5, #1
 8004bf6:	d00b      	beq.n	8004c10 <__pow5mult+0x90>
 8004bf8:	6820      	ldr	r0, [r4, #0]
 8004bfa:	b938      	cbnz	r0, 8004c0c <__pow5mult+0x8c>
 8004bfc:	4622      	mov	r2, r4
 8004bfe:	4621      	mov	r1, r4
 8004c00:	4630      	mov	r0, r6
 8004c02:	f7ff ff31 	bl	8004a68 <__multiply>
 8004c06:	6020      	str	r0, [r4, #0]
 8004c08:	f8c0 8000 	str.w	r8, [r0]
 8004c0c:	4604      	mov	r4, r0
 8004c0e:	e7e4      	b.n	8004bda <__pow5mult+0x5a>
 8004c10:	4638      	mov	r0, r7
 8004c12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c16:	bf00      	nop
 8004c18:	080056d0 	.word	0x080056d0

08004c1c <__lshift>:
 8004c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c20:	460c      	mov	r4, r1
 8004c22:	4607      	mov	r7, r0
 8004c24:	4616      	mov	r6, r2
 8004c26:	6923      	ldr	r3, [r4, #16]
 8004c28:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004c2c:	eb0a 0903 	add.w	r9, sl, r3
 8004c30:	6849      	ldr	r1, [r1, #4]
 8004c32:	68a3      	ldr	r3, [r4, #8]
 8004c34:	f109 0501 	add.w	r5, r9, #1
 8004c38:	42ab      	cmp	r3, r5
 8004c3a:	db31      	blt.n	8004ca0 <__lshift+0x84>
 8004c3c:	4638      	mov	r0, r7
 8004c3e:	f7ff fe36 	bl	80048ae <_Balloc>
 8004c42:	2200      	movs	r2, #0
 8004c44:	4680      	mov	r8, r0
 8004c46:	4611      	mov	r1, r2
 8004c48:	f100 0314 	add.w	r3, r0, #20
 8004c4c:	4552      	cmp	r2, sl
 8004c4e:	db2a      	blt.n	8004ca6 <__lshift+0x8a>
 8004c50:	6920      	ldr	r0, [r4, #16]
 8004c52:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004c56:	f104 0114 	add.w	r1, r4, #20
 8004c5a:	f016 021f 	ands.w	r2, r6, #31
 8004c5e:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8004c62:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8004c66:	d022      	beq.n	8004cae <__lshift+0x92>
 8004c68:	2000      	movs	r0, #0
 8004c6a:	f1c2 0c20 	rsb	ip, r2, #32
 8004c6e:	680e      	ldr	r6, [r1, #0]
 8004c70:	4096      	lsls	r6, r2
 8004c72:	4330      	orrs	r0, r6
 8004c74:	f843 0b04 	str.w	r0, [r3], #4
 8004c78:	f851 0b04 	ldr.w	r0, [r1], #4
 8004c7c:	458e      	cmp	lr, r1
 8004c7e:	fa20 f00c 	lsr.w	r0, r0, ip
 8004c82:	d8f4      	bhi.n	8004c6e <__lshift+0x52>
 8004c84:	6018      	str	r0, [r3, #0]
 8004c86:	b108      	cbz	r0, 8004c8c <__lshift+0x70>
 8004c88:	f109 0502 	add.w	r5, r9, #2
 8004c8c:	3d01      	subs	r5, #1
 8004c8e:	4638      	mov	r0, r7
 8004c90:	f8c8 5010 	str.w	r5, [r8, #16]
 8004c94:	4621      	mov	r1, r4
 8004c96:	f7ff fe3e 	bl	8004916 <_Bfree>
 8004c9a:	4640      	mov	r0, r8
 8004c9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ca0:	3101      	adds	r1, #1
 8004ca2:	005b      	lsls	r3, r3, #1
 8004ca4:	e7c8      	b.n	8004c38 <__lshift+0x1c>
 8004ca6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004caa:	3201      	adds	r2, #1
 8004cac:	e7ce      	b.n	8004c4c <__lshift+0x30>
 8004cae:	3b04      	subs	r3, #4
 8004cb0:	f851 2b04 	ldr.w	r2, [r1], #4
 8004cb4:	458e      	cmp	lr, r1
 8004cb6:	f843 2f04 	str.w	r2, [r3, #4]!
 8004cba:	d8f9      	bhi.n	8004cb0 <__lshift+0x94>
 8004cbc:	e7e6      	b.n	8004c8c <__lshift+0x70>

08004cbe <__mcmp>:
 8004cbe:	6903      	ldr	r3, [r0, #16]
 8004cc0:	690a      	ldr	r2, [r1, #16]
 8004cc2:	b530      	push	{r4, r5, lr}
 8004cc4:	1a9b      	subs	r3, r3, r2
 8004cc6:	d10c      	bne.n	8004ce2 <__mcmp+0x24>
 8004cc8:	0092      	lsls	r2, r2, #2
 8004cca:	3014      	adds	r0, #20
 8004ccc:	3114      	adds	r1, #20
 8004cce:	1884      	adds	r4, r0, r2
 8004cd0:	4411      	add	r1, r2
 8004cd2:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004cd6:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004cda:	4295      	cmp	r5, r2
 8004cdc:	d003      	beq.n	8004ce6 <__mcmp+0x28>
 8004cde:	d305      	bcc.n	8004cec <__mcmp+0x2e>
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	bd30      	pop	{r4, r5, pc}
 8004ce6:	42a0      	cmp	r0, r4
 8004ce8:	d3f3      	bcc.n	8004cd2 <__mcmp+0x14>
 8004cea:	e7fa      	b.n	8004ce2 <__mcmp+0x24>
 8004cec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004cf0:	e7f7      	b.n	8004ce2 <__mcmp+0x24>

08004cf2 <__mdiff>:
 8004cf2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cf6:	460d      	mov	r5, r1
 8004cf8:	4607      	mov	r7, r0
 8004cfa:	4611      	mov	r1, r2
 8004cfc:	4628      	mov	r0, r5
 8004cfe:	4614      	mov	r4, r2
 8004d00:	f7ff ffdd 	bl	8004cbe <__mcmp>
 8004d04:	1e06      	subs	r6, r0, #0
 8004d06:	d108      	bne.n	8004d1a <__mdiff+0x28>
 8004d08:	4631      	mov	r1, r6
 8004d0a:	4638      	mov	r0, r7
 8004d0c:	f7ff fdcf 	bl	80048ae <_Balloc>
 8004d10:	2301      	movs	r3, #1
 8004d12:	6146      	str	r6, [r0, #20]
 8004d14:	6103      	str	r3, [r0, #16]
 8004d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d1a:	bfa4      	itt	ge
 8004d1c:	4623      	movge	r3, r4
 8004d1e:	462c      	movge	r4, r5
 8004d20:	4638      	mov	r0, r7
 8004d22:	6861      	ldr	r1, [r4, #4]
 8004d24:	bfa6      	itte	ge
 8004d26:	461d      	movge	r5, r3
 8004d28:	2600      	movge	r6, #0
 8004d2a:	2601      	movlt	r6, #1
 8004d2c:	f7ff fdbf 	bl	80048ae <_Balloc>
 8004d30:	f04f 0c00 	mov.w	ip, #0
 8004d34:	60c6      	str	r6, [r0, #12]
 8004d36:	692b      	ldr	r3, [r5, #16]
 8004d38:	6926      	ldr	r6, [r4, #16]
 8004d3a:	f104 0214 	add.w	r2, r4, #20
 8004d3e:	f105 0914 	add.w	r9, r5, #20
 8004d42:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8004d46:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8004d4a:	f100 0114 	add.w	r1, r0, #20
 8004d4e:	f852 ab04 	ldr.w	sl, [r2], #4
 8004d52:	f859 5b04 	ldr.w	r5, [r9], #4
 8004d56:	fa1f f38a 	uxth.w	r3, sl
 8004d5a:	4463      	add	r3, ip
 8004d5c:	b2ac      	uxth	r4, r5
 8004d5e:	1b1b      	subs	r3, r3, r4
 8004d60:	0c2c      	lsrs	r4, r5, #16
 8004d62:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8004d66:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8004d70:	45c8      	cmp	r8, r9
 8004d72:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8004d76:	4696      	mov	lr, r2
 8004d78:	f841 4b04 	str.w	r4, [r1], #4
 8004d7c:	d8e7      	bhi.n	8004d4e <__mdiff+0x5c>
 8004d7e:	45be      	cmp	lr, r7
 8004d80:	d305      	bcc.n	8004d8e <__mdiff+0x9c>
 8004d82:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8004d86:	b18b      	cbz	r3, 8004dac <__mdiff+0xba>
 8004d88:	6106      	str	r6, [r0, #16]
 8004d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d8e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8004d92:	b2a2      	uxth	r2, r4
 8004d94:	4462      	add	r2, ip
 8004d96:	1413      	asrs	r3, r2, #16
 8004d98:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8004d9c:	b292      	uxth	r2, r2
 8004d9e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004da2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8004da6:	f841 2b04 	str.w	r2, [r1], #4
 8004daa:	e7e8      	b.n	8004d7e <__mdiff+0x8c>
 8004dac:	3e01      	subs	r6, #1
 8004dae:	e7e8      	b.n	8004d82 <__mdiff+0x90>

08004db0 <__d2b>:
 8004db0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004db4:	461c      	mov	r4, r3
 8004db6:	2101      	movs	r1, #1
 8004db8:	4690      	mov	r8, r2
 8004dba:	9e08      	ldr	r6, [sp, #32]
 8004dbc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004dbe:	f7ff fd76 	bl	80048ae <_Balloc>
 8004dc2:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8004dc6:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8004dca:	4607      	mov	r7, r0
 8004dcc:	bb34      	cbnz	r4, 8004e1c <__d2b+0x6c>
 8004dce:	9201      	str	r2, [sp, #4]
 8004dd0:	f1b8 0f00 	cmp.w	r8, #0
 8004dd4:	d027      	beq.n	8004e26 <__d2b+0x76>
 8004dd6:	a802      	add	r0, sp, #8
 8004dd8:	f840 8d08 	str.w	r8, [r0, #-8]!
 8004ddc:	f7ff fe0c 	bl	80049f8 <__lo0bits>
 8004de0:	9900      	ldr	r1, [sp, #0]
 8004de2:	b1f0      	cbz	r0, 8004e22 <__d2b+0x72>
 8004de4:	9a01      	ldr	r2, [sp, #4]
 8004de6:	f1c0 0320 	rsb	r3, r0, #32
 8004dea:	fa02 f303 	lsl.w	r3, r2, r3
 8004dee:	430b      	orrs	r3, r1
 8004df0:	40c2      	lsrs	r2, r0
 8004df2:	617b      	str	r3, [r7, #20]
 8004df4:	9201      	str	r2, [sp, #4]
 8004df6:	9b01      	ldr	r3, [sp, #4]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	bf14      	ite	ne
 8004dfc:	2102      	movne	r1, #2
 8004dfe:	2101      	moveq	r1, #1
 8004e00:	61bb      	str	r3, [r7, #24]
 8004e02:	6139      	str	r1, [r7, #16]
 8004e04:	b1c4      	cbz	r4, 8004e38 <__d2b+0x88>
 8004e06:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8004e0a:	4404      	add	r4, r0
 8004e0c:	6034      	str	r4, [r6, #0]
 8004e0e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004e12:	6028      	str	r0, [r5, #0]
 8004e14:	4638      	mov	r0, r7
 8004e16:	b002      	add	sp, #8
 8004e18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e1c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004e20:	e7d5      	b.n	8004dce <__d2b+0x1e>
 8004e22:	6179      	str	r1, [r7, #20]
 8004e24:	e7e7      	b.n	8004df6 <__d2b+0x46>
 8004e26:	a801      	add	r0, sp, #4
 8004e28:	f7ff fde6 	bl	80049f8 <__lo0bits>
 8004e2c:	2101      	movs	r1, #1
 8004e2e:	9b01      	ldr	r3, [sp, #4]
 8004e30:	6139      	str	r1, [r7, #16]
 8004e32:	617b      	str	r3, [r7, #20]
 8004e34:	3020      	adds	r0, #32
 8004e36:	e7e5      	b.n	8004e04 <__d2b+0x54>
 8004e38:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004e3c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8004e40:	6030      	str	r0, [r6, #0]
 8004e42:	6918      	ldr	r0, [r3, #16]
 8004e44:	f7ff fdb9 	bl	80049ba <__hi0bits>
 8004e48:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8004e4c:	e7e1      	b.n	8004e12 <__d2b+0x62>

08004e4e <_calloc_r>:
 8004e4e:	b538      	push	{r3, r4, r5, lr}
 8004e50:	fb02 f401 	mul.w	r4, r2, r1
 8004e54:	4621      	mov	r1, r4
 8004e56:	f000 f855 	bl	8004f04 <_malloc_r>
 8004e5a:	4605      	mov	r5, r0
 8004e5c:	b118      	cbz	r0, 8004e66 <_calloc_r+0x18>
 8004e5e:	4622      	mov	r2, r4
 8004e60:	2100      	movs	r1, #0
 8004e62:	f7fe f9ed 	bl	8003240 <memset>
 8004e66:	4628      	mov	r0, r5
 8004e68:	bd38      	pop	{r3, r4, r5, pc}
	...

08004e6c <_free_r>:
 8004e6c:	b538      	push	{r3, r4, r5, lr}
 8004e6e:	4605      	mov	r5, r0
 8004e70:	2900      	cmp	r1, #0
 8004e72:	d043      	beq.n	8004efc <_free_r+0x90>
 8004e74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e78:	1f0c      	subs	r4, r1, #4
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	bfb8      	it	lt
 8004e7e:	18e4      	addlt	r4, r4, r3
 8004e80:	f000 fa2a 	bl	80052d8 <__malloc_lock>
 8004e84:	4a1e      	ldr	r2, [pc, #120]	; (8004f00 <_free_r+0x94>)
 8004e86:	6813      	ldr	r3, [r2, #0]
 8004e88:	4610      	mov	r0, r2
 8004e8a:	b933      	cbnz	r3, 8004e9a <_free_r+0x2e>
 8004e8c:	6063      	str	r3, [r4, #4]
 8004e8e:	6014      	str	r4, [r2, #0]
 8004e90:	4628      	mov	r0, r5
 8004e92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e96:	f000 ba20 	b.w	80052da <__malloc_unlock>
 8004e9a:	42a3      	cmp	r3, r4
 8004e9c:	d90b      	bls.n	8004eb6 <_free_r+0x4a>
 8004e9e:	6821      	ldr	r1, [r4, #0]
 8004ea0:	1862      	adds	r2, r4, r1
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	bf01      	itttt	eq
 8004ea6:	681a      	ldreq	r2, [r3, #0]
 8004ea8:	685b      	ldreq	r3, [r3, #4]
 8004eaa:	1852      	addeq	r2, r2, r1
 8004eac:	6022      	streq	r2, [r4, #0]
 8004eae:	6063      	str	r3, [r4, #4]
 8004eb0:	6004      	str	r4, [r0, #0]
 8004eb2:	e7ed      	b.n	8004e90 <_free_r+0x24>
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	685a      	ldr	r2, [r3, #4]
 8004eb8:	b10a      	cbz	r2, 8004ebe <_free_r+0x52>
 8004eba:	42a2      	cmp	r2, r4
 8004ebc:	d9fa      	bls.n	8004eb4 <_free_r+0x48>
 8004ebe:	6819      	ldr	r1, [r3, #0]
 8004ec0:	1858      	adds	r0, r3, r1
 8004ec2:	42a0      	cmp	r0, r4
 8004ec4:	d10b      	bne.n	8004ede <_free_r+0x72>
 8004ec6:	6820      	ldr	r0, [r4, #0]
 8004ec8:	4401      	add	r1, r0
 8004eca:	1858      	adds	r0, r3, r1
 8004ecc:	4282      	cmp	r2, r0
 8004ece:	6019      	str	r1, [r3, #0]
 8004ed0:	d1de      	bne.n	8004e90 <_free_r+0x24>
 8004ed2:	6810      	ldr	r0, [r2, #0]
 8004ed4:	6852      	ldr	r2, [r2, #4]
 8004ed6:	4401      	add	r1, r0
 8004ed8:	6019      	str	r1, [r3, #0]
 8004eda:	605a      	str	r2, [r3, #4]
 8004edc:	e7d8      	b.n	8004e90 <_free_r+0x24>
 8004ede:	d902      	bls.n	8004ee6 <_free_r+0x7a>
 8004ee0:	230c      	movs	r3, #12
 8004ee2:	602b      	str	r3, [r5, #0]
 8004ee4:	e7d4      	b.n	8004e90 <_free_r+0x24>
 8004ee6:	6820      	ldr	r0, [r4, #0]
 8004ee8:	1821      	adds	r1, r4, r0
 8004eea:	428a      	cmp	r2, r1
 8004eec:	bf01      	itttt	eq
 8004eee:	6811      	ldreq	r1, [r2, #0]
 8004ef0:	6852      	ldreq	r2, [r2, #4]
 8004ef2:	1809      	addeq	r1, r1, r0
 8004ef4:	6021      	streq	r1, [r4, #0]
 8004ef6:	6062      	str	r2, [r4, #4]
 8004ef8:	605c      	str	r4, [r3, #4]
 8004efa:	e7c9      	b.n	8004e90 <_free_r+0x24>
 8004efc:	bd38      	pop	{r3, r4, r5, pc}
 8004efe:	bf00      	nop
 8004f00:	20000210 	.word	0x20000210

08004f04 <_malloc_r>:
 8004f04:	b570      	push	{r4, r5, r6, lr}
 8004f06:	1ccd      	adds	r5, r1, #3
 8004f08:	f025 0503 	bic.w	r5, r5, #3
 8004f0c:	3508      	adds	r5, #8
 8004f0e:	2d0c      	cmp	r5, #12
 8004f10:	bf38      	it	cc
 8004f12:	250c      	movcc	r5, #12
 8004f14:	2d00      	cmp	r5, #0
 8004f16:	4606      	mov	r6, r0
 8004f18:	db01      	blt.n	8004f1e <_malloc_r+0x1a>
 8004f1a:	42a9      	cmp	r1, r5
 8004f1c:	d903      	bls.n	8004f26 <_malloc_r+0x22>
 8004f1e:	230c      	movs	r3, #12
 8004f20:	6033      	str	r3, [r6, #0]
 8004f22:	2000      	movs	r0, #0
 8004f24:	bd70      	pop	{r4, r5, r6, pc}
 8004f26:	f000 f9d7 	bl	80052d8 <__malloc_lock>
 8004f2a:	4a23      	ldr	r2, [pc, #140]	; (8004fb8 <_malloc_r+0xb4>)
 8004f2c:	6814      	ldr	r4, [r2, #0]
 8004f2e:	4621      	mov	r1, r4
 8004f30:	b991      	cbnz	r1, 8004f58 <_malloc_r+0x54>
 8004f32:	4c22      	ldr	r4, [pc, #136]	; (8004fbc <_malloc_r+0xb8>)
 8004f34:	6823      	ldr	r3, [r4, #0]
 8004f36:	b91b      	cbnz	r3, 8004f40 <_malloc_r+0x3c>
 8004f38:	4630      	mov	r0, r6
 8004f3a:	f000 f991 	bl	8005260 <_sbrk_r>
 8004f3e:	6020      	str	r0, [r4, #0]
 8004f40:	4629      	mov	r1, r5
 8004f42:	4630      	mov	r0, r6
 8004f44:	f000 f98c 	bl	8005260 <_sbrk_r>
 8004f48:	1c43      	adds	r3, r0, #1
 8004f4a:	d126      	bne.n	8004f9a <_malloc_r+0x96>
 8004f4c:	230c      	movs	r3, #12
 8004f4e:	4630      	mov	r0, r6
 8004f50:	6033      	str	r3, [r6, #0]
 8004f52:	f000 f9c2 	bl	80052da <__malloc_unlock>
 8004f56:	e7e4      	b.n	8004f22 <_malloc_r+0x1e>
 8004f58:	680b      	ldr	r3, [r1, #0]
 8004f5a:	1b5b      	subs	r3, r3, r5
 8004f5c:	d41a      	bmi.n	8004f94 <_malloc_r+0x90>
 8004f5e:	2b0b      	cmp	r3, #11
 8004f60:	d90f      	bls.n	8004f82 <_malloc_r+0x7e>
 8004f62:	600b      	str	r3, [r1, #0]
 8004f64:	18cc      	adds	r4, r1, r3
 8004f66:	50cd      	str	r5, [r1, r3]
 8004f68:	4630      	mov	r0, r6
 8004f6a:	f000 f9b6 	bl	80052da <__malloc_unlock>
 8004f6e:	f104 000b 	add.w	r0, r4, #11
 8004f72:	1d23      	adds	r3, r4, #4
 8004f74:	f020 0007 	bic.w	r0, r0, #7
 8004f78:	1ac3      	subs	r3, r0, r3
 8004f7a:	d01b      	beq.n	8004fb4 <_malloc_r+0xb0>
 8004f7c:	425a      	negs	r2, r3
 8004f7e:	50e2      	str	r2, [r4, r3]
 8004f80:	bd70      	pop	{r4, r5, r6, pc}
 8004f82:	428c      	cmp	r4, r1
 8004f84:	bf0b      	itete	eq
 8004f86:	6863      	ldreq	r3, [r4, #4]
 8004f88:	684b      	ldrne	r3, [r1, #4]
 8004f8a:	6013      	streq	r3, [r2, #0]
 8004f8c:	6063      	strne	r3, [r4, #4]
 8004f8e:	bf18      	it	ne
 8004f90:	460c      	movne	r4, r1
 8004f92:	e7e9      	b.n	8004f68 <_malloc_r+0x64>
 8004f94:	460c      	mov	r4, r1
 8004f96:	6849      	ldr	r1, [r1, #4]
 8004f98:	e7ca      	b.n	8004f30 <_malloc_r+0x2c>
 8004f9a:	1cc4      	adds	r4, r0, #3
 8004f9c:	f024 0403 	bic.w	r4, r4, #3
 8004fa0:	42a0      	cmp	r0, r4
 8004fa2:	d005      	beq.n	8004fb0 <_malloc_r+0xac>
 8004fa4:	1a21      	subs	r1, r4, r0
 8004fa6:	4630      	mov	r0, r6
 8004fa8:	f000 f95a 	bl	8005260 <_sbrk_r>
 8004fac:	3001      	adds	r0, #1
 8004fae:	d0cd      	beq.n	8004f4c <_malloc_r+0x48>
 8004fb0:	6025      	str	r5, [r4, #0]
 8004fb2:	e7d9      	b.n	8004f68 <_malloc_r+0x64>
 8004fb4:	bd70      	pop	{r4, r5, r6, pc}
 8004fb6:	bf00      	nop
 8004fb8:	20000210 	.word	0x20000210
 8004fbc:	20000214 	.word	0x20000214

08004fc0 <__ssputs_r>:
 8004fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fc4:	688e      	ldr	r6, [r1, #8]
 8004fc6:	4682      	mov	sl, r0
 8004fc8:	429e      	cmp	r6, r3
 8004fca:	460c      	mov	r4, r1
 8004fcc:	4691      	mov	r9, r2
 8004fce:	4698      	mov	r8, r3
 8004fd0:	d835      	bhi.n	800503e <__ssputs_r+0x7e>
 8004fd2:	898a      	ldrh	r2, [r1, #12]
 8004fd4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004fd8:	d031      	beq.n	800503e <__ssputs_r+0x7e>
 8004fda:	2302      	movs	r3, #2
 8004fdc:	6825      	ldr	r5, [r4, #0]
 8004fde:	6909      	ldr	r1, [r1, #16]
 8004fe0:	1a6f      	subs	r7, r5, r1
 8004fe2:	6965      	ldr	r5, [r4, #20]
 8004fe4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004fe8:	fb95 f5f3 	sdiv	r5, r5, r3
 8004fec:	f108 0301 	add.w	r3, r8, #1
 8004ff0:	443b      	add	r3, r7
 8004ff2:	429d      	cmp	r5, r3
 8004ff4:	bf38      	it	cc
 8004ff6:	461d      	movcc	r5, r3
 8004ff8:	0553      	lsls	r3, r2, #21
 8004ffa:	d531      	bpl.n	8005060 <__ssputs_r+0xa0>
 8004ffc:	4629      	mov	r1, r5
 8004ffe:	f7ff ff81 	bl	8004f04 <_malloc_r>
 8005002:	4606      	mov	r6, r0
 8005004:	b950      	cbnz	r0, 800501c <__ssputs_r+0x5c>
 8005006:	230c      	movs	r3, #12
 8005008:	f8ca 3000 	str.w	r3, [sl]
 800500c:	89a3      	ldrh	r3, [r4, #12]
 800500e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005012:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005016:	81a3      	strh	r3, [r4, #12]
 8005018:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800501c:	463a      	mov	r2, r7
 800501e:	6921      	ldr	r1, [r4, #16]
 8005020:	f7ff fc3a 	bl	8004898 <memcpy>
 8005024:	89a3      	ldrh	r3, [r4, #12]
 8005026:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800502a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800502e:	81a3      	strh	r3, [r4, #12]
 8005030:	6126      	str	r6, [r4, #16]
 8005032:	443e      	add	r6, r7
 8005034:	6026      	str	r6, [r4, #0]
 8005036:	4646      	mov	r6, r8
 8005038:	6165      	str	r5, [r4, #20]
 800503a:	1bed      	subs	r5, r5, r7
 800503c:	60a5      	str	r5, [r4, #8]
 800503e:	4546      	cmp	r6, r8
 8005040:	bf28      	it	cs
 8005042:	4646      	movcs	r6, r8
 8005044:	4649      	mov	r1, r9
 8005046:	4632      	mov	r2, r6
 8005048:	6820      	ldr	r0, [r4, #0]
 800504a:	f000 f92b 	bl	80052a4 <memmove>
 800504e:	68a3      	ldr	r3, [r4, #8]
 8005050:	2000      	movs	r0, #0
 8005052:	1b9b      	subs	r3, r3, r6
 8005054:	60a3      	str	r3, [r4, #8]
 8005056:	6823      	ldr	r3, [r4, #0]
 8005058:	441e      	add	r6, r3
 800505a:	6026      	str	r6, [r4, #0]
 800505c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005060:	462a      	mov	r2, r5
 8005062:	f000 f93b 	bl	80052dc <_realloc_r>
 8005066:	4606      	mov	r6, r0
 8005068:	2800      	cmp	r0, #0
 800506a:	d1e1      	bne.n	8005030 <__ssputs_r+0x70>
 800506c:	6921      	ldr	r1, [r4, #16]
 800506e:	4650      	mov	r0, sl
 8005070:	f7ff fefc 	bl	8004e6c <_free_r>
 8005074:	e7c7      	b.n	8005006 <__ssputs_r+0x46>
	...

08005078 <_svfiprintf_r>:
 8005078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800507c:	b09d      	sub	sp, #116	; 0x74
 800507e:	9303      	str	r3, [sp, #12]
 8005080:	898b      	ldrh	r3, [r1, #12]
 8005082:	4680      	mov	r8, r0
 8005084:	061c      	lsls	r4, r3, #24
 8005086:	460d      	mov	r5, r1
 8005088:	4616      	mov	r6, r2
 800508a:	d50f      	bpl.n	80050ac <_svfiprintf_r+0x34>
 800508c:	690b      	ldr	r3, [r1, #16]
 800508e:	b96b      	cbnz	r3, 80050ac <_svfiprintf_r+0x34>
 8005090:	2140      	movs	r1, #64	; 0x40
 8005092:	f7ff ff37 	bl	8004f04 <_malloc_r>
 8005096:	6028      	str	r0, [r5, #0]
 8005098:	6128      	str	r0, [r5, #16]
 800509a:	b928      	cbnz	r0, 80050a8 <_svfiprintf_r+0x30>
 800509c:	230c      	movs	r3, #12
 800509e:	f8c8 3000 	str.w	r3, [r8]
 80050a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80050a6:	e0c4      	b.n	8005232 <_svfiprintf_r+0x1ba>
 80050a8:	2340      	movs	r3, #64	; 0x40
 80050aa:	616b      	str	r3, [r5, #20]
 80050ac:	2300      	movs	r3, #0
 80050ae:	9309      	str	r3, [sp, #36]	; 0x24
 80050b0:	2320      	movs	r3, #32
 80050b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80050b6:	2330      	movs	r3, #48	; 0x30
 80050b8:	f04f 0b01 	mov.w	fp, #1
 80050bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80050c0:	4637      	mov	r7, r6
 80050c2:	463c      	mov	r4, r7
 80050c4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d13c      	bne.n	8005146 <_svfiprintf_r+0xce>
 80050cc:	ebb7 0a06 	subs.w	sl, r7, r6
 80050d0:	d00b      	beq.n	80050ea <_svfiprintf_r+0x72>
 80050d2:	4653      	mov	r3, sl
 80050d4:	4632      	mov	r2, r6
 80050d6:	4629      	mov	r1, r5
 80050d8:	4640      	mov	r0, r8
 80050da:	f7ff ff71 	bl	8004fc0 <__ssputs_r>
 80050de:	3001      	adds	r0, #1
 80050e0:	f000 80a2 	beq.w	8005228 <_svfiprintf_r+0x1b0>
 80050e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050e6:	4453      	add	r3, sl
 80050e8:	9309      	str	r3, [sp, #36]	; 0x24
 80050ea:	783b      	ldrb	r3, [r7, #0]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	f000 809b 	beq.w	8005228 <_svfiprintf_r+0x1b0>
 80050f2:	2300      	movs	r3, #0
 80050f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80050f8:	9304      	str	r3, [sp, #16]
 80050fa:	9307      	str	r3, [sp, #28]
 80050fc:	9205      	str	r2, [sp, #20]
 80050fe:	9306      	str	r3, [sp, #24]
 8005100:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005104:	931a      	str	r3, [sp, #104]	; 0x68
 8005106:	2205      	movs	r2, #5
 8005108:	7821      	ldrb	r1, [r4, #0]
 800510a:	4850      	ldr	r0, [pc, #320]	; (800524c <_svfiprintf_r+0x1d4>)
 800510c:	f7ff fbb6 	bl	800487c <memchr>
 8005110:	1c67      	adds	r7, r4, #1
 8005112:	9b04      	ldr	r3, [sp, #16]
 8005114:	b9d8      	cbnz	r0, 800514e <_svfiprintf_r+0xd6>
 8005116:	06d9      	lsls	r1, r3, #27
 8005118:	bf44      	itt	mi
 800511a:	2220      	movmi	r2, #32
 800511c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005120:	071a      	lsls	r2, r3, #28
 8005122:	bf44      	itt	mi
 8005124:	222b      	movmi	r2, #43	; 0x2b
 8005126:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800512a:	7822      	ldrb	r2, [r4, #0]
 800512c:	2a2a      	cmp	r2, #42	; 0x2a
 800512e:	d016      	beq.n	800515e <_svfiprintf_r+0xe6>
 8005130:	2100      	movs	r1, #0
 8005132:	200a      	movs	r0, #10
 8005134:	9a07      	ldr	r2, [sp, #28]
 8005136:	4627      	mov	r7, r4
 8005138:	783b      	ldrb	r3, [r7, #0]
 800513a:	3401      	adds	r4, #1
 800513c:	3b30      	subs	r3, #48	; 0x30
 800513e:	2b09      	cmp	r3, #9
 8005140:	d950      	bls.n	80051e4 <_svfiprintf_r+0x16c>
 8005142:	b1c9      	cbz	r1, 8005178 <_svfiprintf_r+0x100>
 8005144:	e011      	b.n	800516a <_svfiprintf_r+0xf2>
 8005146:	2b25      	cmp	r3, #37	; 0x25
 8005148:	d0c0      	beq.n	80050cc <_svfiprintf_r+0x54>
 800514a:	4627      	mov	r7, r4
 800514c:	e7b9      	b.n	80050c2 <_svfiprintf_r+0x4a>
 800514e:	4a3f      	ldr	r2, [pc, #252]	; (800524c <_svfiprintf_r+0x1d4>)
 8005150:	463c      	mov	r4, r7
 8005152:	1a80      	subs	r0, r0, r2
 8005154:	fa0b f000 	lsl.w	r0, fp, r0
 8005158:	4318      	orrs	r0, r3
 800515a:	9004      	str	r0, [sp, #16]
 800515c:	e7d3      	b.n	8005106 <_svfiprintf_r+0x8e>
 800515e:	9a03      	ldr	r2, [sp, #12]
 8005160:	1d11      	adds	r1, r2, #4
 8005162:	6812      	ldr	r2, [r2, #0]
 8005164:	9103      	str	r1, [sp, #12]
 8005166:	2a00      	cmp	r2, #0
 8005168:	db01      	blt.n	800516e <_svfiprintf_r+0xf6>
 800516a:	9207      	str	r2, [sp, #28]
 800516c:	e004      	b.n	8005178 <_svfiprintf_r+0x100>
 800516e:	4252      	negs	r2, r2
 8005170:	f043 0302 	orr.w	r3, r3, #2
 8005174:	9207      	str	r2, [sp, #28]
 8005176:	9304      	str	r3, [sp, #16]
 8005178:	783b      	ldrb	r3, [r7, #0]
 800517a:	2b2e      	cmp	r3, #46	; 0x2e
 800517c:	d10d      	bne.n	800519a <_svfiprintf_r+0x122>
 800517e:	787b      	ldrb	r3, [r7, #1]
 8005180:	1c79      	adds	r1, r7, #1
 8005182:	2b2a      	cmp	r3, #42	; 0x2a
 8005184:	d132      	bne.n	80051ec <_svfiprintf_r+0x174>
 8005186:	9b03      	ldr	r3, [sp, #12]
 8005188:	3702      	adds	r7, #2
 800518a:	1d1a      	adds	r2, r3, #4
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	9203      	str	r2, [sp, #12]
 8005190:	2b00      	cmp	r3, #0
 8005192:	bfb8      	it	lt
 8005194:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005198:	9305      	str	r3, [sp, #20]
 800519a:	4c2d      	ldr	r4, [pc, #180]	; (8005250 <_svfiprintf_r+0x1d8>)
 800519c:	2203      	movs	r2, #3
 800519e:	7839      	ldrb	r1, [r7, #0]
 80051a0:	4620      	mov	r0, r4
 80051a2:	f7ff fb6b 	bl	800487c <memchr>
 80051a6:	b138      	cbz	r0, 80051b8 <_svfiprintf_r+0x140>
 80051a8:	2340      	movs	r3, #64	; 0x40
 80051aa:	1b00      	subs	r0, r0, r4
 80051ac:	fa03 f000 	lsl.w	r0, r3, r0
 80051b0:	9b04      	ldr	r3, [sp, #16]
 80051b2:	3701      	adds	r7, #1
 80051b4:	4303      	orrs	r3, r0
 80051b6:	9304      	str	r3, [sp, #16]
 80051b8:	7839      	ldrb	r1, [r7, #0]
 80051ba:	2206      	movs	r2, #6
 80051bc:	4825      	ldr	r0, [pc, #148]	; (8005254 <_svfiprintf_r+0x1dc>)
 80051be:	1c7e      	adds	r6, r7, #1
 80051c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80051c4:	f7ff fb5a 	bl	800487c <memchr>
 80051c8:	2800      	cmp	r0, #0
 80051ca:	d035      	beq.n	8005238 <_svfiprintf_r+0x1c0>
 80051cc:	4b22      	ldr	r3, [pc, #136]	; (8005258 <_svfiprintf_r+0x1e0>)
 80051ce:	b9fb      	cbnz	r3, 8005210 <_svfiprintf_r+0x198>
 80051d0:	9b03      	ldr	r3, [sp, #12]
 80051d2:	3307      	adds	r3, #7
 80051d4:	f023 0307 	bic.w	r3, r3, #7
 80051d8:	3308      	adds	r3, #8
 80051da:	9303      	str	r3, [sp, #12]
 80051dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051de:	444b      	add	r3, r9
 80051e0:	9309      	str	r3, [sp, #36]	; 0x24
 80051e2:	e76d      	b.n	80050c0 <_svfiprintf_r+0x48>
 80051e4:	fb00 3202 	mla	r2, r0, r2, r3
 80051e8:	2101      	movs	r1, #1
 80051ea:	e7a4      	b.n	8005136 <_svfiprintf_r+0xbe>
 80051ec:	2300      	movs	r3, #0
 80051ee:	240a      	movs	r4, #10
 80051f0:	4618      	mov	r0, r3
 80051f2:	9305      	str	r3, [sp, #20]
 80051f4:	460f      	mov	r7, r1
 80051f6:	783a      	ldrb	r2, [r7, #0]
 80051f8:	3101      	adds	r1, #1
 80051fa:	3a30      	subs	r2, #48	; 0x30
 80051fc:	2a09      	cmp	r2, #9
 80051fe:	d903      	bls.n	8005208 <_svfiprintf_r+0x190>
 8005200:	2b00      	cmp	r3, #0
 8005202:	d0ca      	beq.n	800519a <_svfiprintf_r+0x122>
 8005204:	9005      	str	r0, [sp, #20]
 8005206:	e7c8      	b.n	800519a <_svfiprintf_r+0x122>
 8005208:	fb04 2000 	mla	r0, r4, r0, r2
 800520c:	2301      	movs	r3, #1
 800520e:	e7f1      	b.n	80051f4 <_svfiprintf_r+0x17c>
 8005210:	ab03      	add	r3, sp, #12
 8005212:	9300      	str	r3, [sp, #0]
 8005214:	462a      	mov	r2, r5
 8005216:	4b11      	ldr	r3, [pc, #68]	; (800525c <_svfiprintf_r+0x1e4>)
 8005218:	a904      	add	r1, sp, #16
 800521a:	4640      	mov	r0, r8
 800521c:	f7fe f8aa 	bl	8003374 <_printf_float>
 8005220:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005224:	4681      	mov	r9, r0
 8005226:	d1d9      	bne.n	80051dc <_svfiprintf_r+0x164>
 8005228:	89ab      	ldrh	r3, [r5, #12]
 800522a:	065b      	lsls	r3, r3, #25
 800522c:	f53f af39 	bmi.w	80050a2 <_svfiprintf_r+0x2a>
 8005230:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005232:	b01d      	add	sp, #116	; 0x74
 8005234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005238:	ab03      	add	r3, sp, #12
 800523a:	9300      	str	r3, [sp, #0]
 800523c:	462a      	mov	r2, r5
 800523e:	4b07      	ldr	r3, [pc, #28]	; (800525c <_svfiprintf_r+0x1e4>)
 8005240:	a904      	add	r1, sp, #16
 8005242:	4640      	mov	r0, r8
 8005244:	f7fe fb46 	bl	80038d4 <_printf_i>
 8005248:	e7ea      	b.n	8005220 <_svfiprintf_r+0x1a8>
 800524a:	bf00      	nop
 800524c:	080056dc 	.word	0x080056dc
 8005250:	080056e2 	.word	0x080056e2
 8005254:	080056e6 	.word	0x080056e6
 8005258:	08003375 	.word	0x08003375
 800525c:	08004fc1 	.word	0x08004fc1

08005260 <_sbrk_r>:
 8005260:	b538      	push	{r3, r4, r5, lr}
 8005262:	2300      	movs	r3, #0
 8005264:	4c05      	ldr	r4, [pc, #20]	; (800527c <_sbrk_r+0x1c>)
 8005266:	4605      	mov	r5, r0
 8005268:	4608      	mov	r0, r1
 800526a:	6023      	str	r3, [r4, #0]
 800526c:	f7fd ff58 	bl	8003120 <_sbrk>
 8005270:	1c43      	adds	r3, r0, #1
 8005272:	d102      	bne.n	800527a <_sbrk_r+0x1a>
 8005274:	6823      	ldr	r3, [r4, #0]
 8005276:	b103      	cbz	r3, 800527a <_sbrk_r+0x1a>
 8005278:	602b      	str	r3, [r5, #0]
 800527a:	bd38      	pop	{r3, r4, r5, pc}
 800527c:	2000031c 	.word	0x2000031c

08005280 <__ascii_mbtowc>:
 8005280:	b082      	sub	sp, #8
 8005282:	b901      	cbnz	r1, 8005286 <__ascii_mbtowc+0x6>
 8005284:	a901      	add	r1, sp, #4
 8005286:	b142      	cbz	r2, 800529a <__ascii_mbtowc+0x1a>
 8005288:	b14b      	cbz	r3, 800529e <__ascii_mbtowc+0x1e>
 800528a:	7813      	ldrb	r3, [r2, #0]
 800528c:	600b      	str	r3, [r1, #0]
 800528e:	7812      	ldrb	r2, [r2, #0]
 8005290:	1c10      	adds	r0, r2, #0
 8005292:	bf18      	it	ne
 8005294:	2001      	movne	r0, #1
 8005296:	b002      	add	sp, #8
 8005298:	4770      	bx	lr
 800529a:	4610      	mov	r0, r2
 800529c:	e7fb      	b.n	8005296 <__ascii_mbtowc+0x16>
 800529e:	f06f 0001 	mvn.w	r0, #1
 80052a2:	e7f8      	b.n	8005296 <__ascii_mbtowc+0x16>

080052a4 <memmove>:
 80052a4:	4288      	cmp	r0, r1
 80052a6:	b510      	push	{r4, lr}
 80052a8:	eb01 0302 	add.w	r3, r1, r2
 80052ac:	d803      	bhi.n	80052b6 <memmove+0x12>
 80052ae:	1e42      	subs	r2, r0, #1
 80052b0:	4299      	cmp	r1, r3
 80052b2:	d10c      	bne.n	80052ce <memmove+0x2a>
 80052b4:	bd10      	pop	{r4, pc}
 80052b6:	4298      	cmp	r0, r3
 80052b8:	d2f9      	bcs.n	80052ae <memmove+0xa>
 80052ba:	1881      	adds	r1, r0, r2
 80052bc:	1ad2      	subs	r2, r2, r3
 80052be:	42d3      	cmn	r3, r2
 80052c0:	d100      	bne.n	80052c4 <memmove+0x20>
 80052c2:	bd10      	pop	{r4, pc}
 80052c4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80052c8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80052cc:	e7f7      	b.n	80052be <memmove+0x1a>
 80052ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80052d2:	f802 4f01 	strb.w	r4, [r2, #1]!
 80052d6:	e7eb      	b.n	80052b0 <memmove+0xc>

080052d8 <__malloc_lock>:
 80052d8:	4770      	bx	lr

080052da <__malloc_unlock>:
 80052da:	4770      	bx	lr

080052dc <_realloc_r>:
 80052dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052de:	4607      	mov	r7, r0
 80052e0:	4614      	mov	r4, r2
 80052e2:	460e      	mov	r6, r1
 80052e4:	b921      	cbnz	r1, 80052f0 <_realloc_r+0x14>
 80052e6:	4611      	mov	r1, r2
 80052e8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80052ec:	f7ff be0a 	b.w	8004f04 <_malloc_r>
 80052f0:	b922      	cbnz	r2, 80052fc <_realloc_r+0x20>
 80052f2:	f7ff fdbb 	bl	8004e6c <_free_r>
 80052f6:	4625      	mov	r5, r4
 80052f8:	4628      	mov	r0, r5
 80052fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052fc:	f000 f821 	bl	8005342 <_malloc_usable_size_r>
 8005300:	4284      	cmp	r4, r0
 8005302:	d90f      	bls.n	8005324 <_realloc_r+0x48>
 8005304:	4621      	mov	r1, r4
 8005306:	4638      	mov	r0, r7
 8005308:	f7ff fdfc 	bl	8004f04 <_malloc_r>
 800530c:	4605      	mov	r5, r0
 800530e:	2800      	cmp	r0, #0
 8005310:	d0f2      	beq.n	80052f8 <_realloc_r+0x1c>
 8005312:	4631      	mov	r1, r6
 8005314:	4622      	mov	r2, r4
 8005316:	f7ff fabf 	bl	8004898 <memcpy>
 800531a:	4631      	mov	r1, r6
 800531c:	4638      	mov	r0, r7
 800531e:	f7ff fda5 	bl	8004e6c <_free_r>
 8005322:	e7e9      	b.n	80052f8 <_realloc_r+0x1c>
 8005324:	4635      	mov	r5, r6
 8005326:	e7e7      	b.n	80052f8 <_realloc_r+0x1c>

08005328 <__ascii_wctomb>:
 8005328:	b149      	cbz	r1, 800533e <__ascii_wctomb+0x16>
 800532a:	2aff      	cmp	r2, #255	; 0xff
 800532c:	bf8b      	itete	hi
 800532e:	238a      	movhi	r3, #138	; 0x8a
 8005330:	700a      	strbls	r2, [r1, #0]
 8005332:	6003      	strhi	r3, [r0, #0]
 8005334:	2001      	movls	r0, #1
 8005336:	bf88      	it	hi
 8005338:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800533c:	4770      	bx	lr
 800533e:	4608      	mov	r0, r1
 8005340:	4770      	bx	lr

08005342 <_malloc_usable_size_r>:
 8005342:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8005346:	2800      	cmp	r0, #0
 8005348:	f1a0 0004 	sub.w	r0, r0, #4
 800534c:	bfbc      	itt	lt
 800534e:	580b      	ldrlt	r3, [r1, r0]
 8005350:	18c0      	addlt	r0, r0, r3
 8005352:	4770      	bx	lr

08005354 <_init>:
 8005354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005356:	bf00      	nop
 8005358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800535a:	bc08      	pop	{r3}
 800535c:	469e      	mov	lr, r3
 800535e:	4770      	bx	lr

08005360 <_fini>:
 8005360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005362:	bf00      	nop
 8005364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005366:	bc08      	pop	{r3}
 8005368:	469e      	mov	lr, r3
 800536a:	4770      	bx	lr
