
bmp180.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fb8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d8  080050c8  080050c8  000150c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080054a0  080054a0  000154a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080054a4  080054a4  000154a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001dc  20000000  080054a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000e8  200001dc  08005684  000201dc  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200002c4  08005684  000202c4  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000f6e9  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001ff0  00000000  00000000  0002f8ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000057ab  00000000  00000000  000318de  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000006b8  00000000  00000000  00037090  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000b78  00000000  00000000  00037748  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00004ac8  00000000  00000000  000382c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002992  00000000  00000000  0003cd88  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003f71a  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001eb0  00000000  00000000  0003f798  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	080050b0 	.word	0x080050b0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	080050b0 	.word	0x080050b0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f092 0f00 	teq	r2, #0
 800044a:	bf14      	ite	ne
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	4770      	bxeq	lr
 8000452:	b530      	push	{r4, r5, lr}
 8000454:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000460:	e720      	b.n	80002a4 <__adddf3+0x138>
 8000462:	bf00      	nop

08000464 <__aeabi_ul2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f04f 0500 	mov.w	r5, #0
 8000472:	e00a      	b.n	800048a <__aeabi_l2d+0x16>

08000474 <__aeabi_l2d>:
 8000474:	ea50 0201 	orrs.w	r2, r0, r1
 8000478:	bf08      	it	eq
 800047a:	4770      	bxeq	lr
 800047c:	b530      	push	{r4, r5, lr}
 800047e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000482:	d502      	bpl.n	800048a <__aeabi_l2d+0x16>
 8000484:	4240      	negs	r0, r0
 8000486:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000492:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000496:	f43f aedc 	beq.w	8000252 <__adddf3+0xe6>
 800049a:	f04f 0203 	mov.w	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b2:	f1c2 0320 	rsb	r3, r2, #32
 80004b6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ba:	fa20 f002 	lsr.w	r0, r0, r2
 80004be:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c2:	ea40 000e 	orr.w	r0, r0, lr
 80004c6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ca:	4414      	add	r4, r2
 80004cc:	e6c1      	b.n	8000252 <__adddf3+0xe6>
 80004ce:	bf00      	nop

080004d0 <__aeabi_dmul>:
 80004d0:	b570      	push	{r4, r5, r6, lr}
 80004d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004de:	bf1d      	ittte	ne
 80004e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004e4:	ea94 0f0c 	teqne	r4, ip
 80004e8:	ea95 0f0c 	teqne	r5, ip
 80004ec:	f000 f8de 	bleq	80006ac <__aeabi_dmul+0x1dc>
 80004f0:	442c      	add	r4, r5
 80004f2:	ea81 0603 	eor.w	r6, r1, r3
 80004f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000502:	bf18      	it	ne
 8000504:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000508:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800050c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000510:	d038      	beq.n	8000584 <__aeabi_dmul+0xb4>
 8000512:	fba0 ce02 	umull	ip, lr, r0, r2
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800051e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000522:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000526:	f04f 0600 	mov.w	r6, #0
 800052a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800052e:	f09c 0f00 	teq	ip, #0
 8000532:	bf18      	it	ne
 8000534:	f04e 0e01 	orrne.w	lr, lr, #1
 8000538:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800053c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000540:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000544:	d204      	bcs.n	8000550 <__aeabi_dmul+0x80>
 8000546:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800054a:	416d      	adcs	r5, r5
 800054c:	eb46 0606 	adc.w	r6, r6, r6
 8000550:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000554:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000558:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800055c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000560:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000564:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000568:	bf88      	it	hi
 800056a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800056e:	d81e      	bhi.n	80005ae <__aeabi_dmul+0xde>
 8000570:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000574:	bf08      	it	eq
 8000576:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800057a:	f150 0000 	adcs.w	r0, r0, #0
 800057e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000582:	bd70      	pop	{r4, r5, r6, pc}
 8000584:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000588:	ea46 0101 	orr.w	r1, r6, r1
 800058c:	ea40 0002 	orr.w	r0, r0, r2
 8000590:	ea81 0103 	eor.w	r1, r1, r3
 8000594:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000598:	bfc2      	ittt	gt
 800059a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800059e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005a2:	bd70      	popgt	{r4, r5, r6, pc}
 80005a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a8:	f04f 0e00 	mov.w	lr, #0
 80005ac:	3c01      	subs	r4, #1
 80005ae:	f300 80ab 	bgt.w	8000708 <__aeabi_dmul+0x238>
 80005b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005b6:	bfde      	ittt	le
 80005b8:	2000      	movle	r0, #0
 80005ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005be:	bd70      	pople	{r4, r5, r6, pc}
 80005c0:	f1c4 0400 	rsb	r4, r4, #0
 80005c4:	3c20      	subs	r4, #32
 80005c6:	da35      	bge.n	8000634 <__aeabi_dmul+0x164>
 80005c8:	340c      	adds	r4, #12
 80005ca:	dc1b      	bgt.n	8000604 <__aeabi_dmul+0x134>
 80005cc:	f104 0414 	add.w	r4, r4, #20
 80005d0:	f1c4 0520 	rsb	r5, r4, #32
 80005d4:	fa00 f305 	lsl.w	r3, r0, r5
 80005d8:	fa20 f004 	lsr.w	r0, r0, r4
 80005dc:	fa01 f205 	lsl.w	r2, r1, r5
 80005e0:	ea40 0002 	orr.w	r0, r0, r2
 80005e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f0:	fa21 f604 	lsr.w	r6, r1, r4
 80005f4:	eb42 0106 	adc.w	r1, r2, r6
 80005f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005fc:	bf08      	it	eq
 80005fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f1c4 040c 	rsb	r4, r4, #12
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f304 	lsl.w	r3, r0, r4
 8000610:	fa20 f005 	lsr.w	r0, r0, r5
 8000614:	fa01 f204 	lsl.w	r2, r1, r4
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000620:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000624:	f141 0100 	adc.w	r1, r1, #0
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 0520 	rsb	r5, r4, #32
 8000638:	fa00 f205 	lsl.w	r2, r0, r5
 800063c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000640:	fa20 f304 	lsr.w	r3, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea43 0302 	orr.w	r3, r3, r2
 800064c:	fa21 f004 	lsr.w	r0, r1, r4
 8000650:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000654:	fa21 f204 	lsr.w	r2, r1, r4
 8000658:	ea20 0002 	bic.w	r0, r0, r2
 800065c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f094 0f00 	teq	r4, #0
 8000670:	d10f      	bne.n	8000692 <__aeabi_dmul+0x1c2>
 8000672:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000676:	0040      	lsls	r0, r0, #1
 8000678:	eb41 0101 	adc.w	r1, r1, r1
 800067c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000680:	bf08      	it	eq
 8000682:	3c01      	subeq	r4, #1
 8000684:	d0f7      	beq.n	8000676 <__aeabi_dmul+0x1a6>
 8000686:	ea41 0106 	orr.w	r1, r1, r6
 800068a:	f095 0f00 	teq	r5, #0
 800068e:	bf18      	it	ne
 8000690:	4770      	bxne	lr
 8000692:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000696:	0052      	lsls	r2, r2, #1
 8000698:	eb43 0303 	adc.w	r3, r3, r3
 800069c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a0:	bf08      	it	eq
 80006a2:	3d01      	subeq	r5, #1
 80006a4:	d0f7      	beq.n	8000696 <__aeabi_dmul+0x1c6>
 80006a6:	ea43 0306 	orr.w	r3, r3, r6
 80006aa:	4770      	bx	lr
 80006ac:	ea94 0f0c 	teq	r4, ip
 80006b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006b4:	bf18      	it	ne
 80006b6:	ea95 0f0c 	teqne	r5, ip
 80006ba:	d00c      	beq.n	80006d6 <__aeabi_dmul+0x206>
 80006bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c0:	bf18      	it	ne
 80006c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006c6:	d1d1      	bne.n	800066c <__aeabi_dmul+0x19c>
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	f04f 0000 	mov.w	r0, #0
 80006d4:	bd70      	pop	{r4, r5, r6, pc}
 80006d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006da:	bf06      	itte	eq
 80006dc:	4610      	moveq	r0, r2
 80006de:	4619      	moveq	r1, r3
 80006e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e4:	d019      	beq.n	800071a <__aeabi_dmul+0x24a>
 80006e6:	ea94 0f0c 	teq	r4, ip
 80006ea:	d102      	bne.n	80006f2 <__aeabi_dmul+0x222>
 80006ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f0:	d113      	bne.n	800071a <__aeabi_dmul+0x24a>
 80006f2:	ea95 0f0c 	teq	r5, ip
 80006f6:	d105      	bne.n	8000704 <__aeabi_dmul+0x234>
 80006f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006fc:	bf1c      	itt	ne
 80006fe:	4610      	movne	r0, r2
 8000700:	4619      	movne	r1, r3
 8000702:	d10a      	bne.n	800071a <__aeabi_dmul+0x24a>
 8000704:	ea81 0103 	eor.w	r1, r1, r3
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000710:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000714:	f04f 0000 	mov.w	r0, #0
 8000718:	bd70      	pop	{r4, r5, r6, pc}
 800071a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800071e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000722:	bd70      	pop	{r4, r5, r6, pc}

08000724 <__aeabi_ddiv>:
 8000724:	b570      	push	{r4, r5, r6, lr}
 8000726:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800072a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800072e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000732:	bf1d      	ittte	ne
 8000734:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000738:	ea94 0f0c 	teqne	r4, ip
 800073c:	ea95 0f0c 	teqne	r5, ip
 8000740:	f000 f8a7 	bleq	8000892 <__aeabi_ddiv+0x16e>
 8000744:	eba4 0405 	sub.w	r4, r4, r5
 8000748:	ea81 0e03 	eor.w	lr, r1, r3
 800074c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000750:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000754:	f000 8088 	beq.w	8000868 <__aeabi_ddiv+0x144>
 8000758:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800075c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000760:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000764:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000768:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800076c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000770:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000774:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000778:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800077c:	429d      	cmp	r5, r3
 800077e:	bf08      	it	eq
 8000780:	4296      	cmpeq	r6, r2
 8000782:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000786:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800078a:	d202      	bcs.n	8000792 <__aeabi_ddiv+0x6e>
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	1ab6      	subs	r6, r6, r2
 8000794:	eb65 0503 	sbc.w	r5, r5, r3
 8000798:	085b      	lsrs	r3, r3, #1
 800079a:	ea4f 0232 	mov.w	r2, r2, rrx
 800079e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ae:	bf22      	ittt	cs
 80007b0:	1ab6      	subcs	r6, r6, r2
 80007b2:	4675      	movcs	r5, lr
 80007b4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b8:	085b      	lsrs	r3, r3, #1
 80007ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000800:	ea55 0e06 	orrs.w	lr, r5, r6
 8000804:	d018      	beq.n	8000838 <__aeabi_ddiv+0x114>
 8000806:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800080a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800080e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000812:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000816:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800081a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800081e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000822:	d1c0      	bne.n	80007a6 <__aeabi_ddiv+0x82>
 8000824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000828:	d10b      	bne.n	8000842 <__aeabi_ddiv+0x11e>
 800082a:	ea41 0100 	orr.w	r1, r1, r0
 800082e:	f04f 0000 	mov.w	r0, #0
 8000832:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000836:	e7b6      	b.n	80007a6 <__aeabi_ddiv+0x82>
 8000838:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800083c:	bf04      	itt	eq
 800083e:	4301      	orreq	r1, r0
 8000840:	2000      	moveq	r0, #0
 8000842:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000846:	bf88      	it	hi
 8000848:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800084c:	f63f aeaf 	bhi.w	80005ae <__aeabi_dmul+0xde>
 8000850:	ebb5 0c03 	subs.w	ip, r5, r3
 8000854:	bf04      	itt	eq
 8000856:	ebb6 0c02 	subseq.w	ip, r6, r2
 800085a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800085e:	f150 0000 	adcs.w	r0, r0, #0
 8000862:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000866:	bd70      	pop	{r4, r5, r6, pc}
 8000868:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800086c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000870:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000874:	bfc2      	ittt	gt
 8000876:	ebd4 050c 	rsbsgt	r5, r4, ip
 800087a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800087e:	bd70      	popgt	{r4, r5, r6, pc}
 8000880:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000884:	f04f 0e00 	mov.w	lr, #0
 8000888:	3c01      	subs	r4, #1
 800088a:	e690      	b.n	80005ae <__aeabi_dmul+0xde>
 800088c:	ea45 0e06 	orr.w	lr, r5, r6
 8000890:	e68d      	b.n	80005ae <__aeabi_dmul+0xde>
 8000892:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000896:	ea94 0f0c 	teq	r4, ip
 800089a:	bf08      	it	eq
 800089c:	ea95 0f0c 	teqeq	r5, ip
 80008a0:	f43f af3b 	beq.w	800071a <__aeabi_dmul+0x24a>
 80008a4:	ea94 0f0c 	teq	r4, ip
 80008a8:	d10a      	bne.n	80008c0 <__aeabi_ddiv+0x19c>
 80008aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ae:	f47f af34 	bne.w	800071a <__aeabi_dmul+0x24a>
 80008b2:	ea95 0f0c 	teq	r5, ip
 80008b6:	f47f af25 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ba:	4610      	mov	r0, r2
 80008bc:	4619      	mov	r1, r3
 80008be:	e72c      	b.n	800071a <__aeabi_dmul+0x24a>
 80008c0:	ea95 0f0c 	teq	r5, ip
 80008c4:	d106      	bne.n	80008d4 <__aeabi_ddiv+0x1b0>
 80008c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ca:	f43f aefd 	beq.w	80006c8 <__aeabi_dmul+0x1f8>
 80008ce:	4610      	mov	r0, r2
 80008d0:	4619      	mov	r1, r3
 80008d2:	e722      	b.n	800071a <__aeabi_dmul+0x24a>
 80008d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d8:	bf18      	it	ne
 80008da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008de:	f47f aec5 	bne.w	800066c <__aeabi_dmul+0x19c>
 80008e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008e6:	f47f af0d 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008ee:	f47f aeeb 	bne.w	80006c8 <__aeabi_dmul+0x1f8>
 80008f2:	e712      	b.n	800071a <__aeabi_dmul+0x24a>

080008f4 <__gedf2>:
 80008f4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80008f8:	e006      	b.n	8000908 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__ledf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	e002      	b.n	8000908 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__cmpdf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	f84d cd04 	str.w	ip, [sp, #-4]!
 800090c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000910:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000914:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000918:	bf18      	it	ne
 800091a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800091e:	d01b      	beq.n	8000958 <__cmpdf2+0x54>
 8000920:	b001      	add	sp, #4
 8000922:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000926:	bf0c      	ite	eq
 8000928:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800092c:	ea91 0f03 	teqne	r1, r3
 8000930:	bf02      	ittt	eq
 8000932:	ea90 0f02 	teqeq	r0, r2
 8000936:	2000      	moveq	r0, #0
 8000938:	4770      	bxeq	lr
 800093a:	f110 0f00 	cmn.w	r0, #0
 800093e:	ea91 0f03 	teq	r1, r3
 8000942:	bf58      	it	pl
 8000944:	4299      	cmppl	r1, r3
 8000946:	bf08      	it	eq
 8000948:	4290      	cmpeq	r0, r2
 800094a:	bf2c      	ite	cs
 800094c:	17d8      	asrcs	r0, r3, #31
 800094e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000952:	f040 0001 	orr.w	r0, r0, #1
 8000956:	4770      	bx	lr
 8000958:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	d102      	bne.n	8000968 <__cmpdf2+0x64>
 8000962:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000966:	d107      	bne.n	8000978 <__cmpdf2+0x74>
 8000968:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800096c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000970:	d1d6      	bne.n	8000920 <__cmpdf2+0x1c>
 8000972:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000976:	d0d3      	beq.n	8000920 <__cmpdf2+0x1c>
 8000978:	f85d 0b04 	ldr.w	r0, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop

08000980 <__aeabi_cdrcmple>:
 8000980:	4684      	mov	ip, r0
 8000982:	4610      	mov	r0, r2
 8000984:	4662      	mov	r2, ip
 8000986:	468c      	mov	ip, r1
 8000988:	4619      	mov	r1, r3
 800098a:	4663      	mov	r3, ip
 800098c:	e000      	b.n	8000990 <__aeabi_cdcmpeq>
 800098e:	bf00      	nop

08000990 <__aeabi_cdcmpeq>:
 8000990:	b501      	push	{r0, lr}
 8000992:	f7ff ffb7 	bl	8000904 <__cmpdf2>
 8000996:	2800      	cmp	r0, #0
 8000998:	bf48      	it	mi
 800099a:	f110 0f00 	cmnmi.w	r0, #0
 800099e:	bd01      	pop	{r0, pc}

080009a0 <__aeabi_dcmpeq>:
 80009a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a4:	f7ff fff4 	bl	8000990 <__aeabi_cdcmpeq>
 80009a8:	bf0c      	ite	eq
 80009aa:	2001      	moveq	r0, #1
 80009ac:	2000      	movne	r0, #0
 80009ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b2:	bf00      	nop

080009b4 <__aeabi_dcmplt>:
 80009b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b8:	f7ff ffea 	bl	8000990 <__aeabi_cdcmpeq>
 80009bc:	bf34      	ite	cc
 80009be:	2001      	movcc	r0, #1
 80009c0:	2000      	movcs	r0, #0
 80009c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009c6:	bf00      	nop

080009c8 <__aeabi_dcmple>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff ffe0 	bl	8000990 <__aeabi_cdcmpeq>
 80009d0:	bf94      	ite	ls
 80009d2:	2001      	movls	r0, #1
 80009d4:	2000      	movhi	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmpge>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffce 	bl	8000980 <__aeabi_cdrcmple>
 80009e4:	bf94      	ite	ls
 80009e6:	2001      	movls	r0, #1
 80009e8:	2000      	movhi	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmpgt>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffc4 	bl	8000980 <__aeabi_cdrcmple>
 80009f8:	bf34      	ite	cc
 80009fa:	2001      	movcc	r0, #1
 80009fc:	2000      	movcs	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpun>:
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	d102      	bne.n	8000a14 <__aeabi_dcmpun+0x10>
 8000a0e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a12:	d10a      	bne.n	8000a2a <__aeabi_dcmpun+0x26>
 8000a14:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a1c:	d102      	bne.n	8000a24 <__aeabi_dcmpun+0x20>
 8000a1e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a22:	d102      	bne.n	8000a2a <__aeabi_dcmpun+0x26>
 8000a24:	f04f 0000 	mov.w	r0, #0
 8000a28:	4770      	bx	lr
 8000a2a:	f04f 0001 	mov.w	r0, #1
 8000a2e:	4770      	bx	lr

08000a30 <__aeabi_d2iz>:
 8000a30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a34:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a38:	d215      	bcs.n	8000a66 <__aeabi_d2iz+0x36>
 8000a3a:	d511      	bpl.n	8000a60 <__aeabi_d2iz+0x30>
 8000a3c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a40:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a44:	d912      	bls.n	8000a6c <__aeabi_d2iz+0x3c>
 8000a46:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a52:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a56:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5a:	bf18      	it	ne
 8000a5c:	4240      	negne	r0, r0
 8000a5e:	4770      	bx	lr
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6a:	d105      	bne.n	8000a78 <__aeabi_d2iz+0x48>
 8000a6c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a70:	bf08      	it	eq
 8000a72:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a76:	4770      	bx	lr
 8000a78:	f04f 0000 	mov.w	r0, #0
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop

08000a80 <__aeabi_d2f>:
 8000a80:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a84:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a88:	bf24      	itt	cs
 8000a8a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a8e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a92:	d90d      	bls.n	8000ab0 <__aeabi_d2f+0x30>
 8000a94:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a98:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a9c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aa4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa8:	bf08      	it	eq
 8000aaa:	f020 0001 	biceq.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ab4:	d121      	bne.n	8000afa <__aeabi_d2f+0x7a>
 8000ab6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aba:	bfbc      	itt	lt
 8000abc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac0:	4770      	bxlt	lr
 8000ac2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ac6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aca:	f1c2 0218 	rsb	r2, r2, #24
 8000ace:	f1c2 0c20 	rsb	ip, r2, #32
 8000ad2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ad6:	fa20 f002 	lsr.w	r0, r0, r2
 8000ada:	bf18      	it	ne
 8000adc:	f040 0001 	orrne.w	r0, r0, #1
 8000ae0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000aec:	ea40 000c 	orr.w	r0, r0, ip
 8000af0:	fa23 f302 	lsr.w	r3, r3, r2
 8000af4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af8:	e7cc      	b.n	8000a94 <__aeabi_d2f+0x14>
 8000afa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000afe:	d107      	bne.n	8000b10 <__aeabi_d2f+0x90>
 8000b00:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b04:	bf1e      	ittt	ne
 8000b06:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b0a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b0e:	4770      	bxne	lr
 8000b10:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b14:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b18:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop

08000b20 <__aeabi_frsub>:
 8000b20:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b24:	e002      	b.n	8000b2c <__addsf3>
 8000b26:	bf00      	nop

08000b28 <__aeabi_fsub>:
 8000b28:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b2c <__addsf3>:
 8000b2c:	0042      	lsls	r2, r0, #1
 8000b2e:	bf1f      	itttt	ne
 8000b30:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b34:	ea92 0f03 	teqne	r2, r3
 8000b38:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b3c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b40:	d06a      	beq.n	8000c18 <__addsf3+0xec>
 8000b42:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b46:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b4a:	bfc1      	itttt	gt
 8000b4c:	18d2      	addgt	r2, r2, r3
 8000b4e:	4041      	eorgt	r1, r0
 8000b50:	4048      	eorgt	r0, r1
 8000b52:	4041      	eorgt	r1, r0
 8000b54:	bfb8      	it	lt
 8000b56:	425b      	neglt	r3, r3
 8000b58:	2b19      	cmp	r3, #25
 8000b5a:	bf88      	it	hi
 8000b5c:	4770      	bxhi	lr
 8000b5e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b62:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b66:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b6a:	bf18      	it	ne
 8000b6c:	4240      	negne	r0, r0
 8000b6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b72:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b76:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b7a:	bf18      	it	ne
 8000b7c:	4249      	negne	r1, r1
 8000b7e:	ea92 0f03 	teq	r2, r3
 8000b82:	d03f      	beq.n	8000c04 <__addsf3+0xd8>
 8000b84:	f1a2 0201 	sub.w	r2, r2, #1
 8000b88:	fa41 fc03 	asr.w	ip, r1, r3
 8000b8c:	eb10 000c 	adds.w	r0, r0, ip
 8000b90:	f1c3 0320 	rsb	r3, r3, #32
 8000b94:	fa01 f103 	lsl.w	r1, r1, r3
 8000b98:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b9c:	d502      	bpl.n	8000ba4 <__addsf3+0x78>
 8000b9e:	4249      	negs	r1, r1
 8000ba0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ba4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ba8:	d313      	bcc.n	8000bd2 <__addsf3+0xa6>
 8000baa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bae:	d306      	bcc.n	8000bbe <__addsf3+0x92>
 8000bb0:	0840      	lsrs	r0, r0, #1
 8000bb2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bb6:	f102 0201 	add.w	r2, r2, #1
 8000bba:	2afe      	cmp	r2, #254	; 0xfe
 8000bbc:	d251      	bcs.n	8000c62 <__addsf3+0x136>
 8000bbe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bc2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bc6:	bf08      	it	eq
 8000bc8:	f020 0001 	biceq.w	r0, r0, #1
 8000bcc:	ea40 0003 	orr.w	r0, r0, r3
 8000bd0:	4770      	bx	lr
 8000bd2:	0049      	lsls	r1, r1, #1
 8000bd4:	eb40 0000 	adc.w	r0, r0, r0
 8000bd8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000bdc:	f1a2 0201 	sub.w	r2, r2, #1
 8000be0:	d1ed      	bne.n	8000bbe <__addsf3+0x92>
 8000be2:	fab0 fc80 	clz	ip, r0
 8000be6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bea:	ebb2 020c 	subs.w	r2, r2, ip
 8000bee:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bf2:	bfaa      	itet	ge
 8000bf4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bf8:	4252      	neglt	r2, r2
 8000bfa:	4318      	orrge	r0, r3
 8000bfc:	bfbc      	itt	lt
 8000bfe:	40d0      	lsrlt	r0, r2
 8000c00:	4318      	orrlt	r0, r3
 8000c02:	4770      	bx	lr
 8000c04:	f092 0f00 	teq	r2, #0
 8000c08:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c0c:	bf06      	itte	eq
 8000c0e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c12:	3201      	addeq	r2, #1
 8000c14:	3b01      	subne	r3, #1
 8000c16:	e7b5      	b.n	8000b84 <__addsf3+0x58>
 8000c18:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c1c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c20:	bf18      	it	ne
 8000c22:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c26:	d021      	beq.n	8000c6c <__addsf3+0x140>
 8000c28:	ea92 0f03 	teq	r2, r3
 8000c2c:	d004      	beq.n	8000c38 <__addsf3+0x10c>
 8000c2e:	f092 0f00 	teq	r2, #0
 8000c32:	bf08      	it	eq
 8000c34:	4608      	moveq	r0, r1
 8000c36:	4770      	bx	lr
 8000c38:	ea90 0f01 	teq	r0, r1
 8000c3c:	bf1c      	itt	ne
 8000c3e:	2000      	movne	r0, #0
 8000c40:	4770      	bxne	lr
 8000c42:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c46:	d104      	bne.n	8000c52 <__addsf3+0x126>
 8000c48:	0040      	lsls	r0, r0, #1
 8000c4a:	bf28      	it	cs
 8000c4c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c50:	4770      	bx	lr
 8000c52:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c56:	bf3c      	itt	cc
 8000c58:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c5c:	4770      	bxcc	lr
 8000c5e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c62:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c66:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c6a:	4770      	bx	lr
 8000c6c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c70:	bf16      	itet	ne
 8000c72:	4608      	movne	r0, r1
 8000c74:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c78:	4601      	movne	r1, r0
 8000c7a:	0242      	lsls	r2, r0, #9
 8000c7c:	bf06      	itte	eq
 8000c7e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c82:	ea90 0f01 	teqeq	r0, r1
 8000c86:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c8a:	4770      	bx	lr

08000c8c <__aeabi_ui2f>:
 8000c8c:	f04f 0300 	mov.w	r3, #0
 8000c90:	e004      	b.n	8000c9c <__aeabi_i2f+0x8>
 8000c92:	bf00      	nop

08000c94 <__aeabi_i2f>:
 8000c94:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c98:	bf48      	it	mi
 8000c9a:	4240      	negmi	r0, r0
 8000c9c:	ea5f 0c00 	movs.w	ip, r0
 8000ca0:	bf08      	it	eq
 8000ca2:	4770      	bxeq	lr
 8000ca4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ca8:	4601      	mov	r1, r0
 8000caa:	f04f 0000 	mov.w	r0, #0
 8000cae:	e01c      	b.n	8000cea <__aeabi_l2f+0x2a>

08000cb0 <__aeabi_ul2f>:
 8000cb0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cb4:	bf08      	it	eq
 8000cb6:	4770      	bxeq	lr
 8000cb8:	f04f 0300 	mov.w	r3, #0
 8000cbc:	e00a      	b.n	8000cd4 <__aeabi_l2f+0x14>
 8000cbe:	bf00      	nop

08000cc0 <__aeabi_l2f>:
 8000cc0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc4:	bf08      	it	eq
 8000cc6:	4770      	bxeq	lr
 8000cc8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ccc:	d502      	bpl.n	8000cd4 <__aeabi_l2f+0x14>
 8000cce:	4240      	negs	r0, r0
 8000cd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd4:	ea5f 0c01 	movs.w	ip, r1
 8000cd8:	bf02      	ittt	eq
 8000cda:	4684      	moveq	ip, r0
 8000cdc:	4601      	moveq	r1, r0
 8000cde:	2000      	moveq	r0, #0
 8000ce0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ce4:	bf08      	it	eq
 8000ce6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cea:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cee:	fabc f28c 	clz	r2, ip
 8000cf2:	3a08      	subs	r2, #8
 8000cf4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cf8:	db10      	blt.n	8000d1c <__aeabi_l2f+0x5c>
 8000cfa:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cfe:	4463      	add	r3, ip
 8000d00:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d04:	f1c2 0220 	rsb	r2, r2, #32
 8000d08:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d0c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d10:	eb43 0002 	adc.w	r0, r3, r2
 8000d14:	bf08      	it	eq
 8000d16:	f020 0001 	biceq.w	r0, r0, #1
 8000d1a:	4770      	bx	lr
 8000d1c:	f102 0220 	add.w	r2, r2, #32
 8000d20:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d24:	f1c2 0220 	rsb	r2, r2, #32
 8000d28:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d2c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d30:	eb43 0002 	adc.w	r0, r3, r2
 8000d34:	bf08      	it	eq
 8000d36:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d3a:	4770      	bx	lr

08000d3c <__aeabi_fmul>:
 8000d3c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d40:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d44:	bf1e      	ittt	ne
 8000d46:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d4a:	ea92 0f0c 	teqne	r2, ip
 8000d4e:	ea93 0f0c 	teqne	r3, ip
 8000d52:	d06f      	beq.n	8000e34 <__aeabi_fmul+0xf8>
 8000d54:	441a      	add	r2, r3
 8000d56:	ea80 0c01 	eor.w	ip, r0, r1
 8000d5a:	0240      	lsls	r0, r0, #9
 8000d5c:	bf18      	it	ne
 8000d5e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d62:	d01e      	beq.n	8000da2 <__aeabi_fmul+0x66>
 8000d64:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d68:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d6c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d70:	fba0 3101 	umull	r3, r1, r0, r1
 8000d74:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d78:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d7c:	bf3e      	ittt	cc
 8000d7e:	0049      	lslcc	r1, r1, #1
 8000d80:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d84:	005b      	lslcc	r3, r3, #1
 8000d86:	ea40 0001 	orr.w	r0, r0, r1
 8000d8a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d8e:	2afd      	cmp	r2, #253	; 0xfd
 8000d90:	d81d      	bhi.n	8000dce <__aeabi_fmul+0x92>
 8000d92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d96:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d9a:	bf08      	it	eq
 8000d9c:	f020 0001 	biceq.w	r0, r0, #1
 8000da0:	4770      	bx	lr
 8000da2:	f090 0f00 	teq	r0, #0
 8000da6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000daa:	bf08      	it	eq
 8000dac:	0249      	lsleq	r1, r1, #9
 8000dae:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000db2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000db6:	3a7f      	subs	r2, #127	; 0x7f
 8000db8:	bfc2      	ittt	gt
 8000dba:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dbe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dc2:	4770      	bxgt	lr
 8000dc4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc8:	f04f 0300 	mov.w	r3, #0
 8000dcc:	3a01      	subs	r2, #1
 8000dce:	dc5d      	bgt.n	8000e8c <__aeabi_fmul+0x150>
 8000dd0:	f112 0f19 	cmn.w	r2, #25
 8000dd4:	bfdc      	itt	le
 8000dd6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dda:	4770      	bxle	lr
 8000ddc:	f1c2 0200 	rsb	r2, r2, #0
 8000de0:	0041      	lsls	r1, r0, #1
 8000de2:	fa21 f102 	lsr.w	r1, r1, r2
 8000de6:	f1c2 0220 	rsb	r2, r2, #32
 8000dea:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dee:	ea5f 0031 	movs.w	r0, r1, rrx
 8000df2:	f140 0000 	adc.w	r0, r0, #0
 8000df6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dfa:	bf08      	it	eq
 8000dfc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e00:	4770      	bx	lr
 8000e02:	f092 0f00 	teq	r2, #0
 8000e06:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e0a:	bf02      	ittt	eq
 8000e0c:	0040      	lsleq	r0, r0, #1
 8000e0e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e12:	3a01      	subeq	r2, #1
 8000e14:	d0f9      	beq.n	8000e0a <__aeabi_fmul+0xce>
 8000e16:	ea40 000c 	orr.w	r0, r0, ip
 8000e1a:	f093 0f00 	teq	r3, #0
 8000e1e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e22:	bf02      	ittt	eq
 8000e24:	0049      	lsleq	r1, r1, #1
 8000e26:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e2a:	3b01      	subeq	r3, #1
 8000e2c:	d0f9      	beq.n	8000e22 <__aeabi_fmul+0xe6>
 8000e2e:	ea41 010c 	orr.w	r1, r1, ip
 8000e32:	e78f      	b.n	8000d54 <__aeabi_fmul+0x18>
 8000e34:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e38:	ea92 0f0c 	teq	r2, ip
 8000e3c:	bf18      	it	ne
 8000e3e:	ea93 0f0c 	teqne	r3, ip
 8000e42:	d00a      	beq.n	8000e5a <__aeabi_fmul+0x11e>
 8000e44:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e48:	bf18      	it	ne
 8000e4a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e4e:	d1d8      	bne.n	8000e02 <__aeabi_fmul+0xc6>
 8000e50:	ea80 0001 	eor.w	r0, r0, r1
 8000e54:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e58:	4770      	bx	lr
 8000e5a:	f090 0f00 	teq	r0, #0
 8000e5e:	bf17      	itett	ne
 8000e60:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e64:	4608      	moveq	r0, r1
 8000e66:	f091 0f00 	teqne	r1, #0
 8000e6a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e6e:	d014      	beq.n	8000e9a <__aeabi_fmul+0x15e>
 8000e70:	ea92 0f0c 	teq	r2, ip
 8000e74:	d101      	bne.n	8000e7a <__aeabi_fmul+0x13e>
 8000e76:	0242      	lsls	r2, r0, #9
 8000e78:	d10f      	bne.n	8000e9a <__aeabi_fmul+0x15e>
 8000e7a:	ea93 0f0c 	teq	r3, ip
 8000e7e:	d103      	bne.n	8000e88 <__aeabi_fmul+0x14c>
 8000e80:	024b      	lsls	r3, r1, #9
 8000e82:	bf18      	it	ne
 8000e84:	4608      	movne	r0, r1
 8000e86:	d108      	bne.n	8000e9a <__aeabi_fmul+0x15e>
 8000e88:	ea80 0001 	eor.w	r0, r0, r1
 8000e8c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e98:	4770      	bx	lr
 8000e9a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ea2:	4770      	bx	lr

08000ea4 <__aeabi_fdiv>:
 8000ea4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ea8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eac:	bf1e      	ittt	ne
 8000eae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eb2:	ea92 0f0c 	teqne	r2, ip
 8000eb6:	ea93 0f0c 	teqne	r3, ip
 8000eba:	d069      	beq.n	8000f90 <__aeabi_fdiv+0xec>
 8000ebc:	eba2 0203 	sub.w	r2, r2, r3
 8000ec0:	ea80 0c01 	eor.w	ip, r0, r1
 8000ec4:	0249      	lsls	r1, r1, #9
 8000ec6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000eca:	d037      	beq.n	8000f3c <__aeabi_fdiv+0x98>
 8000ecc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ed4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ed8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000edc:	428b      	cmp	r3, r1
 8000ede:	bf38      	it	cc
 8000ee0:	005b      	lslcc	r3, r3, #1
 8000ee2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ee6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000eea:	428b      	cmp	r3, r1
 8000eec:	bf24      	itt	cs
 8000eee:	1a5b      	subcs	r3, r3, r1
 8000ef0:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ef4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ef8:	bf24      	itt	cs
 8000efa:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000efe:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f02:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f06:	bf24      	itt	cs
 8000f08:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f0c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f10:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f14:	bf24      	itt	cs
 8000f16:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f1a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f1e:	011b      	lsls	r3, r3, #4
 8000f20:	bf18      	it	ne
 8000f22:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f26:	d1e0      	bne.n	8000eea <__aeabi_fdiv+0x46>
 8000f28:	2afd      	cmp	r2, #253	; 0xfd
 8000f2a:	f63f af50 	bhi.w	8000dce <__aeabi_fmul+0x92>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f34:	bf08      	it	eq
 8000f36:	f020 0001 	biceq.w	r0, r0, #1
 8000f3a:	4770      	bx	lr
 8000f3c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f40:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f44:	327f      	adds	r2, #127	; 0x7f
 8000f46:	bfc2      	ittt	gt
 8000f48:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f4c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f50:	4770      	bxgt	lr
 8000f52:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f56:	f04f 0300 	mov.w	r3, #0
 8000f5a:	3a01      	subs	r2, #1
 8000f5c:	e737      	b.n	8000dce <__aeabi_fmul+0x92>
 8000f5e:	f092 0f00 	teq	r2, #0
 8000f62:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f66:	bf02      	ittt	eq
 8000f68:	0040      	lsleq	r0, r0, #1
 8000f6a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f6e:	3a01      	subeq	r2, #1
 8000f70:	d0f9      	beq.n	8000f66 <__aeabi_fdiv+0xc2>
 8000f72:	ea40 000c 	orr.w	r0, r0, ip
 8000f76:	f093 0f00 	teq	r3, #0
 8000f7a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f7e:	bf02      	ittt	eq
 8000f80:	0049      	lsleq	r1, r1, #1
 8000f82:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f86:	3b01      	subeq	r3, #1
 8000f88:	d0f9      	beq.n	8000f7e <__aeabi_fdiv+0xda>
 8000f8a:	ea41 010c 	orr.w	r1, r1, ip
 8000f8e:	e795      	b.n	8000ebc <__aeabi_fdiv+0x18>
 8000f90:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f94:	ea92 0f0c 	teq	r2, ip
 8000f98:	d108      	bne.n	8000fac <__aeabi_fdiv+0x108>
 8000f9a:	0242      	lsls	r2, r0, #9
 8000f9c:	f47f af7d 	bne.w	8000e9a <__aeabi_fmul+0x15e>
 8000fa0:	ea93 0f0c 	teq	r3, ip
 8000fa4:	f47f af70 	bne.w	8000e88 <__aeabi_fmul+0x14c>
 8000fa8:	4608      	mov	r0, r1
 8000faa:	e776      	b.n	8000e9a <__aeabi_fmul+0x15e>
 8000fac:	ea93 0f0c 	teq	r3, ip
 8000fb0:	d104      	bne.n	8000fbc <__aeabi_fdiv+0x118>
 8000fb2:	024b      	lsls	r3, r1, #9
 8000fb4:	f43f af4c 	beq.w	8000e50 <__aeabi_fmul+0x114>
 8000fb8:	4608      	mov	r0, r1
 8000fba:	e76e      	b.n	8000e9a <__aeabi_fmul+0x15e>
 8000fbc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc0:	bf18      	it	ne
 8000fc2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	d1ca      	bne.n	8000f5e <__aeabi_fdiv+0xba>
 8000fc8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fcc:	f47f af5c 	bne.w	8000e88 <__aeabi_fmul+0x14c>
 8000fd0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fd4:	f47f af3c 	bne.w	8000e50 <__aeabi_fmul+0x114>
 8000fd8:	e75f      	b.n	8000e9a <__aeabi_fmul+0x15e>
 8000fda:	bf00      	nop

08000fdc <__aeabi_f2uiz>:
 8000fdc:	0042      	lsls	r2, r0, #1
 8000fde:	d20e      	bcs.n	8000ffe <__aeabi_f2uiz+0x22>
 8000fe0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fe4:	d30b      	bcc.n	8000ffe <__aeabi_f2uiz+0x22>
 8000fe6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fea:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fee:	d409      	bmi.n	8001004 <__aeabi_f2uiz+0x28>
 8000ff0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ff4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ff8:	fa23 f002 	lsr.w	r0, r3, r2
 8000ffc:	4770      	bx	lr
 8000ffe:	f04f 0000 	mov.w	r0, #0
 8001002:	4770      	bx	lr
 8001004:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001008:	d101      	bne.n	800100e <__aeabi_f2uiz+0x32>
 800100a:	0242      	lsls	r2, r0, #9
 800100c:	d102      	bne.n	8001014 <__aeabi_f2uiz+0x38>
 800100e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001012:	4770      	bx	lr
 8001014:	f04f 0000 	mov.w	r0, #0
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop

0800101c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800101c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800101e:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <HAL_InitTick+0x3c>)
{
 8001020:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001022:	7818      	ldrb	r0, [r3, #0]
 8001024:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001028:	fbb3 f3f0 	udiv	r3, r3, r0
 800102c:	4a0b      	ldr	r2, [pc, #44]	; (800105c <HAL_InitTick+0x40>)
 800102e:	6810      	ldr	r0, [r2, #0]
 8001030:	fbb0 f0f3 	udiv	r0, r0, r3
 8001034:	f000 f892 	bl	800115c <HAL_SYSTICK_Config>
 8001038:	4604      	mov	r4, r0
 800103a:	b958      	cbnz	r0, 8001054 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800103c:	2d0f      	cmp	r5, #15
 800103e:	d809      	bhi.n	8001054 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001040:	4602      	mov	r2, r0
 8001042:	4629      	mov	r1, r5
 8001044:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001048:	f000 f854 	bl	80010f4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800104c:	4b04      	ldr	r3, [pc, #16]	; (8001060 <HAL_InitTick+0x44>)
 800104e:	4620      	mov	r0, r4
 8001050:	601d      	str	r5, [r3, #0]
 8001052:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001054:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001056:	bd38      	pop	{r3, r4, r5, pc}
 8001058:	20000000 	.word	0x20000000
 800105c:	20000008 	.word	0x20000008
 8001060:	20000004 	.word	0x20000004

08001064 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001064:	4a07      	ldr	r2, [pc, #28]	; (8001084 <HAL_Init+0x20>)
{
 8001066:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001068:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800106a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800106c:	f043 0310 	orr.w	r3, r3, #16
 8001070:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001072:	f000 f82d 	bl	80010d0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001076:	2000      	movs	r0, #0
 8001078:	f7ff ffd0 	bl	800101c <HAL_InitTick>
  HAL_MspInit();
 800107c:	f001 fe78 	bl	8002d70 <HAL_MspInit>
}
 8001080:	2000      	movs	r0, #0
 8001082:	bd08      	pop	{r3, pc}
 8001084:	40022000 	.word	0x40022000

08001088 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001088:	4a03      	ldr	r2, [pc, #12]	; (8001098 <HAL_IncTick+0x10>)
 800108a:	4b04      	ldr	r3, [pc, #16]	; (800109c <HAL_IncTick+0x14>)
 800108c:	6811      	ldr	r1, [r2, #0]
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	440b      	add	r3, r1
 8001092:	6013      	str	r3, [r2, #0]
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	20000228 	.word	0x20000228
 800109c:	20000000 	.word	0x20000000

080010a0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80010a0:	4b01      	ldr	r3, [pc, #4]	; (80010a8 <HAL_GetTick+0x8>)
 80010a2:	6818      	ldr	r0, [r3, #0]
}
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	20000228 	.word	0x20000228

080010ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010ac:	b538      	push	{r3, r4, r5, lr}
 80010ae:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80010b0:	f7ff fff6 	bl	80010a0 <HAL_GetTick>
 80010b4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010b6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80010b8:	bf1e      	ittt	ne
 80010ba:	4b04      	ldrne	r3, [pc, #16]	; (80010cc <HAL_Delay+0x20>)
 80010bc:	781b      	ldrbne	r3, [r3, #0]
 80010be:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010c0:	f7ff ffee 	bl	80010a0 <HAL_GetTick>
 80010c4:	1b40      	subs	r0, r0, r5
 80010c6:	4284      	cmp	r4, r0
 80010c8:	d8fa      	bhi.n	80010c0 <HAL_Delay+0x14>
  {
  }
}
 80010ca:	bd38      	pop	{r3, r4, r5, pc}
 80010cc:	20000000 	.word	0x20000000

080010d0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d0:	4a07      	ldr	r2, [pc, #28]	; (80010f0 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80010d2:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d4:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80010d6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010da:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80010de:	041b      	lsls	r3, r3, #16
 80010e0:	0c1b      	lsrs	r3, r3, #16
 80010e2:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80010ea:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80010ec:	60d3      	str	r3, [r2, #12]
 80010ee:	4770      	bx	lr
 80010f0:	e000ed00 	.word	0xe000ed00

080010f4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010f4:	4b17      	ldr	r3, [pc, #92]	; (8001154 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010f6:	b530      	push	{r4, r5, lr}
 80010f8:	68dc      	ldr	r4, [r3, #12]
 80010fa:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010fe:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001102:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001104:	2b04      	cmp	r3, #4
 8001106:	bf28      	it	cs
 8001108:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800110a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800110c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001110:	bf98      	it	ls
 8001112:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001114:	fa05 f303 	lsl.w	r3, r5, r3
 8001118:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800111c:	bf88      	it	hi
 800111e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001120:	4019      	ands	r1, r3
 8001122:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001124:	fa05 f404 	lsl.w	r4, r5, r4
 8001128:	3c01      	subs	r4, #1
 800112a:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800112c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800112e:	ea42 0201 	orr.w	r2, r2, r1
 8001132:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001136:	bfaf      	iteee	ge
 8001138:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800113c:	4b06      	ldrlt	r3, [pc, #24]	; (8001158 <HAL_NVIC_SetPriority+0x64>)
 800113e:	f000 000f 	andlt.w	r0, r0, #15
 8001142:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001144:	bfa5      	ittet	ge
 8001146:	b2d2      	uxtbge	r2, r2
 8001148:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800114c:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800114e:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001152:	bd30      	pop	{r4, r5, pc}
 8001154:	e000ed00 	.word	0xe000ed00
 8001158:	e000ed14 	.word	0xe000ed14

0800115c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800115c:	3801      	subs	r0, #1
 800115e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001162:	d20a      	bcs.n	800117a <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001164:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001166:	4b06      	ldr	r3, [pc, #24]	; (8001180 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001168:	4a06      	ldr	r2, [pc, #24]	; (8001184 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800116a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800116c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001170:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001172:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001174:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800117a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	e000e010 	.word	0xe000e010
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001188:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 800118c:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 800118e:	4616      	mov	r6, r2
 8001190:	4b65      	ldr	r3, [pc, #404]	; (8001328 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001192:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8001338 <HAL_GPIO_Init+0x1b0>
 8001196:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 800133c <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 800119a:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800119e:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 80011a0:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011a4:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 80011a8:	45a0      	cmp	r8, r4
 80011aa:	d17f      	bne.n	80012ac <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 80011ac:	684d      	ldr	r5, [r1, #4]
 80011ae:	2d12      	cmp	r5, #18
 80011b0:	f000 80af 	beq.w	8001312 <HAL_GPIO_Init+0x18a>
 80011b4:	f200 8088 	bhi.w	80012c8 <HAL_GPIO_Init+0x140>
 80011b8:	2d02      	cmp	r5, #2
 80011ba:	f000 80a7 	beq.w	800130c <HAL_GPIO_Init+0x184>
 80011be:	d87c      	bhi.n	80012ba <HAL_GPIO_Init+0x132>
 80011c0:	2d00      	cmp	r5, #0
 80011c2:	f000 808e 	beq.w	80012e2 <HAL_GPIO_Init+0x15a>
 80011c6:	2d01      	cmp	r5, #1
 80011c8:	f000 809e 	beq.w	8001308 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011cc:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011d0:	2cff      	cmp	r4, #255	; 0xff
 80011d2:	bf93      	iteet	ls
 80011d4:	4682      	movls	sl, r0
 80011d6:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 80011da:	3d08      	subhi	r5, #8
 80011dc:	f8d0 b000 	ldrls.w	fp, [r0]
 80011e0:	bf92      	itee	ls
 80011e2:	00b5      	lslls	r5, r6, #2
 80011e4:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 80011e8:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011ea:	fa09 f805 	lsl.w	r8, r9, r5
 80011ee:	ea2b 0808 	bic.w	r8, fp, r8
 80011f2:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011f6:	bf88      	it	hi
 80011f8:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011fc:	ea48 0505 	orr.w	r5, r8, r5
 8001200:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001204:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8001208:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 800120c:	d04e      	beq.n	80012ac <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800120e:	4d47      	ldr	r5, [pc, #284]	; (800132c <HAL_GPIO_Init+0x1a4>)
 8001210:	4f46      	ldr	r7, [pc, #280]	; (800132c <HAL_GPIO_Init+0x1a4>)
 8001212:	69ad      	ldr	r5, [r5, #24]
 8001214:	f026 0803 	bic.w	r8, r6, #3
 8001218:	f045 0501 	orr.w	r5, r5, #1
 800121c:	61bd      	str	r5, [r7, #24]
 800121e:	69bd      	ldr	r5, [r7, #24]
 8001220:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8001224:	f005 0501 	and.w	r5, r5, #1
 8001228:	9501      	str	r5, [sp, #4]
 800122a:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800122e:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001232:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001234:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8001238:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800123c:	fa09 f90b 	lsl.w	r9, r9, fp
 8001240:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001244:	4d3a      	ldr	r5, [pc, #232]	; (8001330 <HAL_GPIO_Init+0x1a8>)
 8001246:	42a8      	cmp	r0, r5
 8001248:	d068      	beq.n	800131c <HAL_GPIO_Init+0x194>
 800124a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800124e:	42a8      	cmp	r0, r5
 8001250:	d066      	beq.n	8001320 <HAL_GPIO_Init+0x198>
 8001252:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001256:	42a8      	cmp	r0, r5
 8001258:	d064      	beq.n	8001324 <HAL_GPIO_Init+0x19c>
 800125a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800125e:	42a8      	cmp	r0, r5
 8001260:	bf0c      	ite	eq
 8001262:	2503      	moveq	r5, #3
 8001264:	2504      	movne	r5, #4
 8001266:	fa05 f50b 	lsl.w	r5, r5, fp
 800126a:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 800126e:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001272:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001274:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8001278:	bf14      	ite	ne
 800127a:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800127c:	43a5      	biceq	r5, r4
 800127e:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001280:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001282:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001286:	bf14      	ite	ne
 8001288:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800128a:	43a5      	biceq	r5, r4
 800128c:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800128e:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001290:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001294:	bf14      	ite	ne
 8001296:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001298:	43a5      	biceq	r5, r4
 800129a:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800129c:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800129e:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80012a2:	bf14      	ite	ne
 80012a4:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80012a6:	ea25 0404 	biceq.w	r4, r5, r4
 80012aa:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80012ac:	3601      	adds	r6, #1
 80012ae:	2e10      	cmp	r6, #16
 80012b0:	f47f af73 	bne.w	800119a <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 80012b4:	b003      	add	sp, #12
 80012b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 80012ba:	2d03      	cmp	r5, #3
 80012bc:	d022      	beq.n	8001304 <HAL_GPIO_Init+0x17c>
 80012be:	2d11      	cmp	r5, #17
 80012c0:	d184      	bne.n	80011cc <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012c2:	68ca      	ldr	r2, [r1, #12]
 80012c4:	3204      	adds	r2, #4
          break;
 80012c6:	e781      	b.n	80011cc <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80012c8:	4f1a      	ldr	r7, [pc, #104]	; (8001334 <HAL_GPIO_Init+0x1ac>)
 80012ca:	42bd      	cmp	r5, r7
 80012cc:	d009      	beq.n	80012e2 <HAL_GPIO_Init+0x15a>
 80012ce:	d812      	bhi.n	80012f6 <HAL_GPIO_Init+0x16e>
 80012d0:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8001340 <HAL_GPIO_Init+0x1b8>
 80012d4:	454d      	cmp	r5, r9
 80012d6:	d004      	beq.n	80012e2 <HAL_GPIO_Init+0x15a>
 80012d8:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80012dc:	454d      	cmp	r5, r9
 80012de:	f47f af75 	bne.w	80011cc <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80012e2:	688a      	ldr	r2, [r1, #8]
 80012e4:	b1c2      	cbz	r2, 8001318 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80012e6:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 80012e8:	bf0c      	ite	eq
 80012ea:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 80012ee:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012f2:	2208      	movs	r2, #8
 80012f4:	e76a      	b.n	80011cc <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80012f6:	4575      	cmp	r5, lr
 80012f8:	d0f3      	beq.n	80012e2 <HAL_GPIO_Init+0x15a>
 80012fa:	4565      	cmp	r5, ip
 80012fc:	d0f1      	beq.n	80012e2 <HAL_GPIO_Init+0x15a>
 80012fe:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8001344 <HAL_GPIO_Init+0x1bc>
 8001302:	e7eb      	b.n	80012dc <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001304:	2200      	movs	r2, #0
 8001306:	e761      	b.n	80011cc <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001308:	68ca      	ldr	r2, [r1, #12]
          break;
 800130a:	e75f      	b.n	80011cc <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800130c:	68ca      	ldr	r2, [r1, #12]
 800130e:	3208      	adds	r2, #8
          break;
 8001310:	e75c      	b.n	80011cc <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001312:	68ca      	ldr	r2, [r1, #12]
 8001314:	320c      	adds	r2, #12
          break;
 8001316:	e759      	b.n	80011cc <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001318:	2204      	movs	r2, #4
 800131a:	e757      	b.n	80011cc <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800131c:	2500      	movs	r5, #0
 800131e:	e7a2      	b.n	8001266 <HAL_GPIO_Init+0xde>
 8001320:	2501      	movs	r5, #1
 8001322:	e7a0      	b.n	8001266 <HAL_GPIO_Init+0xde>
 8001324:	2502      	movs	r5, #2
 8001326:	e79e      	b.n	8001266 <HAL_GPIO_Init+0xde>
 8001328:	40010400 	.word	0x40010400
 800132c:	40021000 	.word	0x40021000
 8001330:	40010800 	.word	0x40010800
 8001334:	10210000 	.word	0x10210000
 8001338:	10310000 	.word	0x10310000
 800133c:	10320000 	.word	0x10320000
 8001340:	10110000 	.word	0x10110000
 8001344:	10220000 	.word	0x10220000

08001348 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001348:	6802      	ldr	r2, [r0, #0]
 800134a:	6953      	ldr	r3, [r2, #20]
 800134c:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8001350:	d00d      	beq.n	800136e <I2C_IsAcknowledgeFailed+0x26>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001352:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001356:	6153      	str	r3, [r2, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001358:	2304      	movs	r3, #4
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 800135a:	2220      	movs	r2, #32
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800135c:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 800135e:	2300      	movs	r3, #0
 8001360:	6303      	str	r3, [r0, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001362:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    hi2c->State= HAL_I2C_STATE_READY;
 8001366:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_ERROR;
 800136a:	2001      	movs	r0, #1
 800136c:	4770      	bx	lr
  }
  return HAL_OK;
 800136e:	4618      	mov	r0, r3
}
 8001370:	4770      	bx	lr

08001372 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8001372:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001376:	4604      	mov	r4, r0
 8001378:	4617      	mov	r7, r2
 800137a:	4699      	mov	r9, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800137c:	f3c1 4807 	ubfx	r8, r1, #16, #8
 8001380:	b28e      	uxth	r6, r1
 8001382:	6825      	ldr	r5, [r4, #0]
 8001384:	f1b8 0f01 	cmp.w	r8, #1
 8001388:	bf0c      	ite	eq
 800138a:	696b      	ldreq	r3, [r5, #20]
 800138c:	69ab      	ldrne	r3, [r5, #24]
 800138e:	ea36 0303 	bics.w	r3, r6, r3
 8001392:	bf14      	ite	ne
 8001394:	2001      	movne	r0, #1
 8001396:	2000      	moveq	r0, #0
 8001398:	b908      	cbnz	r0, 800139e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 800139a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800139e:	696b      	ldr	r3, [r5, #20]
 80013a0:	055a      	lsls	r2, r3, #21
 80013a2:	d512      	bpl.n	80013ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x58>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80013a4:	682b      	ldr	r3, [r5, #0]
      hi2c->State= HAL_I2C_STATE_READY;
 80013a6:	2220      	movs	r2, #32
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80013a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013ac:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80013ae:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80013b2:	616b      	str	r3, [r5, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80013b4:	2304      	movs	r3, #4
 80013b6:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 80013b8:	2300      	movs	r3, #0
      return HAL_ERROR;
 80013ba:	2001      	movs	r0, #1
      hi2c->PreviousState = I2C_STATE_NONE;
 80013bc:	6323      	str	r3, [r4, #48]	; 0x30
      __HAL_UNLOCK(hi2c);
 80013be:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->State= HAL_I2C_STATE_READY;
 80013c2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 80013c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 80013ca:	1c7b      	adds	r3, r7, #1
 80013cc:	d0d9      	beq.n	8001382 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80013ce:	b94f      	cbnz	r7, 80013e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
        hi2c->PreviousState = I2C_STATE_NONE;
 80013d0:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 80013d2:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80013d4:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80013d6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 80013da:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 80013de:	2003      	movs	r0, #3
 80013e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80013e4:	f7ff fe5c 	bl	80010a0 <HAL_GetTick>
 80013e8:	eba0 0009 	sub.w	r0, r0, r9
 80013ec:	4287      	cmp	r7, r0
 80013ee:	d2c8      	bcs.n	8001382 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 80013f0:	e7ee      	b.n	80013d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>

080013f2 <I2C_WaitOnFlagUntilTimeout>:
{
 80013f2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80013f6:	4604      	mov	r4, r0
 80013f8:	4690      	mov	r8, r2
 80013fa:	461f      	mov	r7, r3
 80013fc:	9e08      	ldr	r6, [sp, #32]
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 80013fe:	f3c1 4907 	ubfx	r9, r1, #16, #8
 8001402:	b28d      	uxth	r5, r1
 8001404:	6823      	ldr	r3, [r4, #0]
 8001406:	f1b9 0f01 	cmp.w	r9, #1
 800140a:	bf0c      	ite	eq
 800140c:	695b      	ldreq	r3, [r3, #20]
 800140e:	699b      	ldrne	r3, [r3, #24]
 8001410:	ea35 0303 	bics.w	r3, r5, r3
 8001414:	bf0c      	ite	eq
 8001416:	2301      	moveq	r3, #1
 8001418:	2300      	movne	r3, #0
 800141a:	4543      	cmp	r3, r8
 800141c:	d002      	beq.n	8001424 <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 800141e:	2000      	movs	r0, #0
}
 8001420:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001424:	1c7b      	adds	r3, r7, #1
 8001426:	d0ed      	beq.n	8001404 <I2C_WaitOnFlagUntilTimeout+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001428:	b95f      	cbnz	r7, 8001442 <I2C_WaitOnFlagUntilTimeout+0x50>
        hi2c->PreviousState = I2C_STATE_NONE;
 800142a:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 800142c:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 800142e:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001430:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001434:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8001438:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800143a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800143e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001442:	f7ff fe2d 	bl	80010a0 <HAL_GetTick>
 8001446:	1b80      	subs	r0, r0, r6
 8001448:	4287      	cmp	r7, r0
 800144a:	d2db      	bcs.n	8001404 <I2C_WaitOnFlagUntilTimeout+0x12>
 800144c:	e7ed      	b.n	800142a <I2C_WaitOnFlagUntilTimeout+0x38>

0800144e <I2C_WaitOnTXEFlagUntilTimeout>:
{    
 800144e:	b570      	push	{r4, r5, r6, lr}
 8001450:	4604      	mov	r4, r0
 8001452:	460d      	mov	r5, r1
 8001454:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001456:	6823      	ldr	r3, [r4, #0]
 8001458:	695b      	ldr	r3, [r3, #20]
 800145a:	061b      	lsls	r3, r3, #24
 800145c:	d501      	bpl.n	8001462 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;      
 800145e:	2000      	movs	r0, #0
 8001460:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001462:	4620      	mov	r0, r4
 8001464:	f7ff ff70 	bl	8001348 <I2C_IsAcknowledgeFailed>
 8001468:	b9a8      	cbnz	r0, 8001496 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 800146a:	1c6a      	adds	r2, r5, #1
 800146c:	d0f3      	beq.n	8001456 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800146e:	b965      	cbnz	r5, 800148a <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001470:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 8001472:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001474:	f043 0320 	orr.w	r3, r3, #32
 8001478:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 800147a:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 800147c:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 800147e:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001480:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001484:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 8001488:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800148a:	f7ff fe09 	bl	80010a0 <HAL_GetTick>
 800148e:	1b80      	subs	r0, r0, r6
 8001490:	4285      	cmp	r5, r0
 8001492:	d2e0      	bcs.n	8001456 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 8001494:	e7ec      	b.n	8001470 <I2C_WaitOnTXEFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8001496:	2001      	movs	r0, #1
}
 8001498:	bd70      	pop	{r4, r5, r6, pc}
	...

0800149c <I2C_RequestMemoryWrite>:
{
 800149c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80014a0:	4615      	mov	r5, r2
  hi2c->Instance->CR1 |= I2C_CR1_START;
 80014a2:	6802      	ldr	r2, [r0, #0]
{
 80014a4:	4698      	mov	r8, r3
  hi2c->Instance->CR1 |= I2C_CR1_START;
 80014a6:	6813      	ldr	r3, [r2, #0]
{
 80014a8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  hi2c->Instance->CR1 |= I2C_CR1_START;
 80014aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014ae:	6013      	str	r3, [r2, #0]
{
 80014b0:	460f      	mov	r7, r1
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80014b2:	9600      	str	r6, [sp, #0]
 80014b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80014b6:	2200      	movs	r2, #0
 80014b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 80014bc:	4604      	mov	r4, r0
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80014be:	f7ff ff98 	bl	80013f2 <I2C_WaitOnFlagUntilTimeout>
 80014c2:	b968      	cbnz	r0, 80014e0 <I2C_RequestMemoryWrite+0x44>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80014c4:	6823      	ldr	r3, [r4, #0]
 80014c6:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 80014ca:	611f      	str	r7, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80014cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80014ce:	4633      	mov	r3, r6
 80014d0:	491a      	ldr	r1, [pc, #104]	; (800153c <I2C_RequestMemoryWrite+0xa0>)
 80014d2:	4620      	mov	r0, r4
 80014d4:	f7ff ff4d 	bl	8001372 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80014d8:	b130      	cbz	r0, 80014e8 <I2C_RequestMemoryWrite+0x4c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80014da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80014dc:	2b04      	cmp	r3, #4
 80014de:	d018      	beq.n	8001512 <I2C_RequestMemoryWrite+0x76>
      return HAL_TIMEOUT;
 80014e0:	2003      	movs	r0, #3
}
 80014e2:	b004      	add	sp, #16
 80014e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80014e8:	6823      	ldr	r3, [r4, #0]
 80014ea:	9003      	str	r0, [sp, #12]
 80014ec:	695a      	ldr	r2, [r3, #20]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80014ee:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80014f0:	9203      	str	r2, [sp, #12]
 80014f2:	699b      	ldr	r3, [r3, #24]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80014f4:	4632      	mov	r2, r6
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80014f6:	9303      	str	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80014f8:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80014fa:	9b03      	ldr	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80014fc:	f7ff ffa7 	bl	800144e <I2C_WaitOnTXEFlagUntilTimeout>
 8001500:	b148      	cbz	r0, 8001516 <I2C_RequestMemoryWrite+0x7a>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001502:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001504:	2b04      	cmp	r3, #4
 8001506:	d1eb      	bne.n	80014e0 <I2C_RequestMemoryWrite+0x44>
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001508:	6822      	ldr	r2, [r4, #0]
 800150a:	6813      	ldr	r3, [r2, #0]
 800150c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001510:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 8001512:	2001      	movs	r0, #1
 8001514:	e7e5      	b.n	80014e2 <I2C_RequestMemoryWrite+0x46>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001516:	f1b8 0f01 	cmp.w	r8, #1
 800151a:	6823      	ldr	r3, [r4, #0]
 800151c:	d102      	bne.n	8001524 <I2C_RequestMemoryWrite+0x88>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800151e:	b2ed      	uxtb	r5, r5
 8001520:	611d      	str	r5, [r3, #16]
 8001522:	e7de      	b.n	80014e2 <I2C_RequestMemoryWrite+0x46>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001524:	0a2a      	lsrs	r2, r5, #8
 8001526:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001528:	990a      	ldr	r1, [sp, #40]	; 0x28
 800152a:	4632      	mov	r2, r6
 800152c:	4620      	mov	r0, r4
 800152e:	f7ff ff8e 	bl	800144e <I2C_WaitOnTXEFlagUntilTimeout>
 8001532:	2800      	cmp	r0, #0
 8001534:	d1e5      	bne.n	8001502 <I2C_RequestMemoryWrite+0x66>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001536:	6823      	ldr	r3, [r4, #0]
 8001538:	e7f1      	b.n	800151e <I2C_RequestMemoryWrite+0x82>
 800153a:	bf00      	nop
 800153c:	00010002 	.word	0x00010002

08001540 <I2C_WaitOnRXNEFlagUntilTimeout>:
{  
 8001540:	b570      	push	{r4, r5, r6, lr}
 8001542:	4604      	mov	r4, r0
 8001544:	460d      	mov	r5, r1
 8001546:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001548:	6820      	ldr	r0, [r4, #0]
 800154a:	6943      	ldr	r3, [r0, #20]
 800154c:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8001550:	d001      	beq.n	8001556 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8001552:	2000      	movs	r0, #0
}
 8001554:	bd70      	pop	{r4, r5, r6, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001556:	6942      	ldr	r2, [r0, #20]
 8001558:	06d2      	lsls	r2, r2, #27
 800155a:	d50b      	bpl.n	8001574 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800155c:	f06f 0210 	mvn.w	r2, #16
 8001560:	6142      	str	r2, [r0, #20]
      hi2c->State= HAL_I2C_STATE_READY;
 8001562:	2220      	movs	r2, #32
      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001564:	6423      	str	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001566:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->PreviousState = I2C_STATE_NONE;
 800156a:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 800156c:	2001      	movs	r0, #1
      hi2c->State= HAL_I2C_STATE_READY;
 800156e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8001572:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001574:	b95d      	cbnz	r5, 800158e <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001576:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001578:	2003      	movs	r0, #3
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800157a:	f043 0320 	orr.w	r3, r3, #32
 800157e:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8001580:	2320      	movs	r3, #32
 8001582:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      __HAL_UNLOCK(hi2c);
 8001586:	2300      	movs	r3, #0
 8001588:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 800158c:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800158e:	f7ff fd87 	bl	80010a0 <HAL_GetTick>
 8001592:	1b80      	subs	r0, r0, r6
 8001594:	4285      	cmp	r5, r0
 8001596:	d2d7      	bcs.n	8001548 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
 8001598:	e7ed      	b.n	8001576 <I2C_WaitOnRXNEFlagUntilTimeout+0x36>

0800159a <I2C_WaitOnBTFFlagUntilTimeout>:
{  
 800159a:	b570      	push	{r4, r5, r6, lr}
 800159c:	4604      	mov	r4, r0
 800159e:	460d      	mov	r5, r1
 80015a0:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80015a2:	6823      	ldr	r3, [r4, #0]
 80015a4:	695b      	ldr	r3, [r3, #20]
 80015a6:	075b      	lsls	r3, r3, #29
 80015a8:	d501      	bpl.n	80015ae <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 80015aa:	2000      	movs	r0, #0
 80015ac:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80015ae:	4620      	mov	r0, r4
 80015b0:	f7ff feca 	bl	8001348 <I2C_IsAcknowledgeFailed>
 80015b4:	b9a8      	cbnz	r0, 80015e2 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 80015b6:	1c6a      	adds	r2, r5, #1
 80015b8:	d0f3      	beq.n	80015a2 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80015ba:	b965      	cbnz	r5, 80015d6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 80015be:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015c0:	f043 0320 	orr.w	r3, r3, #32
 80015c4:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 80015c6:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 80015c8:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 80015ca:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80015cc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 80015d0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 80015d4:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80015d6:	f7ff fd63 	bl	80010a0 <HAL_GetTick>
 80015da:	1b80      	subs	r0, r0, r6
 80015dc:	4285      	cmp	r5, r0
 80015de:	d2e0      	bcs.n	80015a2 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 80015e0:	e7ec      	b.n	80015bc <I2C_WaitOnBTFFlagUntilTimeout+0x22>
      return HAL_ERROR;
 80015e2:	2001      	movs	r0, #1
}
 80015e4:	bd70      	pop	{r4, r5, r6, pc}
	...

080015e8 <HAL_I2C_Init>:
{
 80015e8:	b538      	push	{r3, r4, r5, lr}
  if(hi2c == NULL)
 80015ea:	4604      	mov	r4, r0
 80015ec:	b908      	cbnz	r0, 80015f2 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 80015ee:	2001      	movs	r0, #1
 80015f0:	bd38      	pop	{r3, r4, r5, pc}
  if(hi2c->State == HAL_I2C_STATE_RESET)
 80015f2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80015f6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80015fa:	b91b      	cbnz	r3, 8001604 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 80015fc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001600:	f001 fbd8 	bl	8002db4 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001604:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8001606:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001608:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800160c:	6813      	ldr	r3, [r2, #0]
 800160e:	f023 0301 	bic.w	r3, r3, #1
 8001612:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001614:	f000 fe82 	bl	800231c <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001618:	6863      	ldr	r3, [r4, #4]
 800161a:	4a2f      	ldr	r2, [pc, #188]	; (80016d8 <HAL_I2C_Init+0xf0>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d830      	bhi.n	8001682 <HAL_I2C_Init+0x9a>
 8001620:	4a2e      	ldr	r2, [pc, #184]	; (80016dc <HAL_I2C_Init+0xf4>)
 8001622:	4290      	cmp	r0, r2
 8001624:	d9e3      	bls.n	80015ee <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8001626:	4a2e      	ldr	r2, [pc, #184]	; (80016e0 <HAL_I2C_Init+0xf8>)
  hi2c->Instance->CR2 = freqrange;
 8001628:	6821      	ldr	r1, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 800162a:	fbb0 f2f2 	udiv	r2, r0, r2
  hi2c->Instance->CR2 = freqrange;
 800162e:	604a      	str	r2, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001630:	3201      	adds	r2, #1
 8001632:	620a      	str	r2, [r1, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001634:	4a28      	ldr	r2, [pc, #160]	; (80016d8 <HAL_I2C_Init+0xf0>)
 8001636:	3801      	subs	r0, #1
 8001638:	4293      	cmp	r3, r2
 800163a:	d832      	bhi.n	80016a2 <HAL_I2C_Init+0xba>
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001642:	1c43      	adds	r3, r0, #1
 8001644:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001648:	2b04      	cmp	r3, #4
 800164a:	bf38      	it	cc
 800164c:	2304      	movcc	r3, #4
 800164e:	61cb      	str	r3, [r1, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001650:	6a22      	ldr	r2, [r4, #32]
 8001652:	69e3      	ldr	r3, [r4, #28]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001654:	2000      	movs	r0, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001656:	4313      	orrs	r3, r2
 8001658:	600b      	str	r3, [r1, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 800165a:	68e2      	ldr	r2, [r4, #12]
 800165c:	6923      	ldr	r3, [r4, #16]
 800165e:	4313      	orrs	r3, r2
 8001660:	608b      	str	r3, [r1, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8001662:	69a2      	ldr	r2, [r4, #24]
 8001664:	6963      	ldr	r3, [r4, #20]
 8001666:	4313      	orrs	r3, r2
 8001668:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 800166a:	680b      	ldr	r3, [r1, #0]
 800166c:	f043 0301 	orr.w	r3, r3, #1
 8001670:	600b      	str	r3, [r1, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8001672:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001674:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001676:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800167a:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800167c:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8001680:	bd38      	pop	{r3, r4, r5, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001682:	4a18      	ldr	r2, [pc, #96]	; (80016e4 <HAL_I2C_Init+0xfc>)
 8001684:	4290      	cmp	r0, r2
 8001686:	d9b2      	bls.n	80015ee <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8001688:	4d15      	ldr	r5, [pc, #84]	; (80016e0 <HAL_I2C_Init+0xf8>)
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800168a:	f44f 7296 	mov.w	r2, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 800168e:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->CR2 = freqrange;
 8001692:	6821      	ldr	r1, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001694:	436a      	muls	r2, r5
  hi2c->Instance->CR2 = freqrange;
 8001696:	604d      	str	r5, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001698:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 800169c:	fbb2 f2f5 	udiv	r2, r2, r5
 80016a0:	e7c6      	b.n	8001630 <HAL_I2C_Init+0x48>
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80016a2:	68a2      	ldr	r2, [r4, #8]
 80016a4:	b952      	cbnz	r2, 80016bc <HAL_I2C_Init+0xd4>
 80016a6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80016aa:	fbb0 f0f3 	udiv	r0, r0, r3
 80016ae:	1c43      	adds	r3, r0, #1
 80016b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016b4:	b16b      	cbz	r3, 80016d2 <HAL_I2C_Init+0xea>
 80016b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016ba:	e7c8      	b.n	800164e <HAL_I2C_Init+0x66>
 80016bc:	2219      	movs	r2, #25
 80016be:	4353      	muls	r3, r2
 80016c0:	fbb0 f0f3 	udiv	r0, r0, r3
 80016c4:	1c43      	adds	r3, r0, #1
 80016c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016ca:	b113      	cbz	r3, 80016d2 <HAL_I2C_Init+0xea>
 80016cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016d0:	e7bd      	b.n	800164e <HAL_I2C_Init+0x66>
 80016d2:	2301      	movs	r3, #1
 80016d4:	e7bb      	b.n	800164e <HAL_I2C_Init+0x66>
 80016d6:	bf00      	nop
 80016d8:	000186a0 	.word	0x000186a0
 80016dc:	001e847f 	.word	0x001e847f
 80016e0:	000f4240 	.word	0x000f4240
 80016e4:	003d08ff 	.word	0x003d08ff

080016e8 <HAL_I2C_Master_Transmit>:
{
 80016e8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80016ec:	4604      	mov	r4, r0
 80016ee:	461f      	mov	r7, r3
 80016f0:	460d      	mov	r5, r1
 80016f2:	4690      	mov	r8, r2
  tickstart = HAL_GetTick();
 80016f4:	f7ff fcd4 	bl	80010a0 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 80016f8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 80016fc:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 80016fe:	2b20      	cmp	r3, #32
 8001700:	d004      	beq.n	800170c <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 8001702:	2502      	movs	r5, #2
}
 8001704:	4628      	mov	r0, r5
 8001706:	b004      	add	sp, #16
 8001708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800170c:	9000      	str	r0, [sp, #0]
 800170e:	2319      	movs	r3, #25
 8001710:	2201      	movs	r2, #1
 8001712:	495d      	ldr	r1, [pc, #372]	; (8001888 <HAL_I2C_Master_Transmit+0x1a0>)
 8001714:	4620      	mov	r0, r4
 8001716:	f7ff fe6c 	bl	80013f2 <I2C_WaitOnFlagUntilTimeout>
 800171a:	2800      	cmp	r0, #0
 800171c:	d1f1      	bne.n	8001702 <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 800171e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001722:	2b01      	cmp	r3, #1
 8001724:	d0ed      	beq.n	8001702 <HAL_I2C_Master_Transmit+0x1a>
 8001726:	2301      	movs	r3, #1
 8001728:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800172c:	6823      	ldr	r3, [r4, #0]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001732:	bf5e      	ittt	pl
 8001734:	681a      	ldrpl	r2, [r3, #0]
 8001736:	f042 0201 	orrpl.w	r2, r2, #1
 800173a:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001742:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001744:	2221      	movs	r2, #33	; 0x21
 8001746:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800174a:	2210      	movs	r2, #16
 800174c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001750:	2200      	movs	r2, #0
 8001752:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001754:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->XferCount   = Size;
 8001758:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800175a:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 800175c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 800175e:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8001762:	8522      	strh	r2, [r4, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001764:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001766:	2a04      	cmp	r2, #4
 8001768:	d004      	beq.n	8001774 <HAL_I2C_Master_Transmit+0x8c>
 800176a:	2a01      	cmp	r2, #1
 800176c:	d002      	beq.n	8001774 <HAL_I2C_Master_Transmit+0x8c>
 800176e:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001772:	d104      	bne.n	800177e <HAL_I2C_Master_Transmit+0x96>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	e002      	b.n	8001784 <HAL_I2C_Master_Transmit+0x9c>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800177e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001780:	2a12      	cmp	r2, #18
 8001782:	d0f7      	beq.n	8001774 <HAL_I2C_Master_Transmit+0x8c>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001784:	9600      	str	r6, [sp, #0]
 8001786:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001788:	2200      	movs	r2, #0
 800178a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800178e:	4620      	mov	r0, r4
 8001790:	f7ff fe2f 	bl	80013f2 <I2C_WaitOnFlagUntilTimeout>
 8001794:	bb28      	cbnz	r0, 80017e2 <HAL_I2C_Master_Transmit+0xfa>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001796:	6923      	ldr	r3, [r4, #16]
 8001798:	6822      	ldr	r2, [r4, #0]
 800179a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800179e:	d112      	bne.n	80017c6 <HAL_I2C_Master_Transmit+0xde>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80017a0:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 80017a4:	6115      	str	r5, [r2, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80017a6:	4633      	mov	r3, r6
 80017a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80017aa:	4938      	ldr	r1, [pc, #224]	; (800188c <HAL_I2C_Master_Transmit+0x1a4>)
 80017ac:	4620      	mov	r0, r4
 80017ae:	f7ff fde0 	bl	8001372 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80017b2:	4605      	mov	r5, r0
 80017b4:	b9a0      	cbnz	r0, 80017e0 <HAL_I2C_Master_Transmit+0xf8>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017b6:	6823      	ldr	r3, [r4, #0]
 80017b8:	9003      	str	r0, [sp, #12]
 80017ba:	695a      	ldr	r2, [r3, #20]
 80017bc:	9203      	str	r2, [sp, #12]
 80017be:	699b      	ldr	r3, [r3, #24]
 80017c0:	9303      	str	r3, [sp, #12]
 80017c2:	9b03      	ldr	r3, [sp, #12]
    while(hi2c->XferSize > 0U)
 80017c4:	e050      	b.n	8001868 <HAL_I2C_Master_Transmit+0x180>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80017c6:	11eb      	asrs	r3, r5, #7
 80017c8:	f003 0306 	and.w	r3, r3, #6
 80017cc:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80017d0:	6113      	str	r3, [r2, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80017d2:	492f      	ldr	r1, [pc, #188]	; (8001890 <HAL_I2C_Master_Transmit+0x1a8>)
 80017d4:	4633      	mov	r3, r6
 80017d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80017d8:	4620      	mov	r0, r4
 80017da:	f7ff fdca 	bl	8001372 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80017de:	b148      	cbz	r0, 80017f4 <HAL_I2C_Master_Transmit+0x10c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80017e4:	2b04      	cmp	r3, #4
 80017e6:	f04f 0300 	mov.w	r3, #0
 80017ea:	d107      	bne.n	80017fc <HAL_I2C_Master_Transmit+0x114>
        __HAL_UNLOCK(hi2c);
 80017ec:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 80017f0:	2501      	movs	r5, #1
 80017f2:	e787      	b.n	8001704 <HAL_I2C_Master_Transmit+0x1c>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80017f4:	6823      	ldr	r3, [r4, #0]
 80017f6:	b2ed      	uxtb	r5, r5
 80017f8:	611d      	str	r5, [r3, #16]
 80017fa:	e7d4      	b.n	80017a6 <HAL_I2C_Master_Transmit+0xbe>
        __HAL_UNLOCK(hi2c);
 80017fc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_TIMEOUT;
 8001800:	2503      	movs	r5, #3
 8001802:	e77f      	b.n	8001704 <HAL_I2C_Master_Transmit+0x1c>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001804:	4632      	mov	r2, r6
 8001806:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001808:	4620      	mov	r0, r4
 800180a:	f7ff fe20 	bl	800144e <I2C_WaitOnTXEFlagUntilTimeout>
 800180e:	b140      	cbz	r0, 8001822 <HAL_I2C_Master_Transmit+0x13a>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001810:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001812:	2b04      	cmp	r3, #4
 8001814:	d1f4      	bne.n	8001800 <HAL_I2C_Master_Transmit+0x118>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001816:	6822      	ldr	r2, [r4, #0]
 8001818:	6813      	ldr	r3, [r2, #0]
 800181a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800181e:	6013      	str	r3, [r2, #0]
 8001820:	e7e6      	b.n	80017f0 <HAL_I2C_Master_Transmit+0x108>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001822:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001824:	6820      	ldr	r0, [r4, #0]
 8001826:	1c4b      	adds	r3, r1, #1
 8001828:	6263      	str	r3, [r4, #36]	; 0x24
 800182a:	780b      	ldrb	r3, [r1, #0]
      hi2c->XferSize--;
 800182c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800182e:	6103      	str	r3, [r0, #16]
      hi2c->XferCount--;
 8001830:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001832:	3b01      	subs	r3, #1
 8001834:	b29b      	uxth	r3, r3
 8001836:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001838:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 800183a:	1e53      	subs	r3, r2, #1
 800183c:	b29b      	uxth	r3, r3
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800183e:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 8001840:	8523      	strh	r3, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001842:	d50a      	bpl.n	800185a <HAL_I2C_Master_Transmit+0x172>
 8001844:	b14b      	cbz	r3, 800185a <HAL_I2C_Master_Transmit+0x172>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001846:	1c8b      	adds	r3, r1, #2
 8001848:	6263      	str	r3, [r4, #36]	; 0x24
 800184a:	784b      	ldrb	r3, [r1, #1]
        hi2c->XferSize--;
 800184c:	3a02      	subs	r2, #2
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800184e:	6103      	str	r3, [r0, #16]
        hi2c->XferCount--;
 8001850:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8001852:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001854:	3b01      	subs	r3, #1
 8001856:	b29b      	uxth	r3, r3
 8001858:	8563      	strh	r3, [r4, #42]	; 0x2a
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800185a:	4632      	mov	r2, r6
 800185c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800185e:	4620      	mov	r0, r4
 8001860:	f7ff fe9b 	bl	800159a <I2C_WaitOnBTFFlagUntilTimeout>
 8001864:	2800      	cmp	r0, #0
 8001866:	d1d3      	bne.n	8001810 <HAL_I2C_Master_Transmit+0x128>
    while(hi2c->XferSize > 0U)
 8001868:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800186a:	2b00      	cmp	r3, #0
 800186c:	d1ca      	bne.n	8001804 <HAL_I2C_Master_Transmit+0x11c>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800186e:	6821      	ldr	r1, [r4, #0]
 8001870:	680a      	ldr	r2, [r1, #0]
 8001872:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001876:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001878:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 800187a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 800187e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001882:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8001886:	e73d      	b.n	8001704 <HAL_I2C_Master_Transmit+0x1c>
 8001888:	00100002 	.word	0x00100002
 800188c:	00010002 	.word	0x00010002
 8001890:	00010008 	.word	0x00010008

08001894 <HAL_I2C_Master_Receive>:
{
 8001894:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001898:	4604      	mov	r4, r0
 800189a:	b089      	sub	sp, #36	; 0x24
 800189c:	4698      	mov	r8, r3
 800189e:	460d      	mov	r5, r1
 80018a0:	4691      	mov	r9, r2
 80018a2:	9f10      	ldr	r7, [sp, #64]	; 0x40
  tickstart = HAL_GetTick();
 80018a4:	f7ff fbfc 	bl	80010a0 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 80018a8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 80018ac:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 80018ae:	2b20      	cmp	r3, #32
 80018b0:	d004      	beq.n	80018bc <HAL_I2C_Master_Receive+0x28>
    return HAL_BUSY;
 80018b2:	2502      	movs	r5, #2
}
 80018b4:	4628      	mov	r0, r5
 80018b6:	b009      	add	sp, #36	; 0x24
 80018b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80018bc:	9000      	str	r0, [sp, #0]
 80018be:	2319      	movs	r3, #25
 80018c0:	2201      	movs	r2, #1
 80018c2:	49a2      	ldr	r1, [pc, #648]	; (8001b4c <HAL_I2C_Master_Receive+0x2b8>)
 80018c4:	4620      	mov	r0, r4
 80018c6:	f7ff fd94 	bl	80013f2 <I2C_WaitOnFlagUntilTimeout>
 80018ca:	2800      	cmp	r0, #0
 80018cc:	d1f1      	bne.n	80018b2 <HAL_I2C_Master_Receive+0x1e>
    __HAL_LOCK(hi2c);
 80018ce:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d0ed      	beq.n	80018b2 <HAL_I2C_Master_Receive+0x1e>
 80018d6:	2301      	movs	r3, #1
 80018d8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80018dc:	6823      	ldr	r3, [r4, #0]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 80018e2:	bf5e      	ittt	pl
 80018e4:	681a      	ldrpl	r2, [r3, #0]
 80018e6:	f042 0201 	orrpl.w	r2, r2, #1
 80018ea:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018f2:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80018f4:	2222      	movs	r2, #34	; 0x22
 80018f6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80018fa:	2210      	movs	r2, #16
 80018fc:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001900:	2200      	movs	r2, #0
 8001902:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001904:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->XferCount   = Size;
 8001908:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800190c:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 800190e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8001910:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8001914:	8522      	strh	r2, [r4, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001916:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001918:	6819      	ldr	r1, [r3, #0]
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800191a:	2a04      	cmp	r2, #4
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800191c:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8001920:	6019      	str	r1, [r3, #0]
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001922:	d004      	beq.n	800192e <HAL_I2C_Master_Receive+0x9a>
 8001924:	2a01      	cmp	r2, #1
 8001926:	d002      	beq.n	800192e <HAL_I2C_Master_Receive+0x9a>
 8001928:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 800192c:	d104      	bne.n	8001938 <HAL_I2C_Master_Receive+0xa4>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	e002      	b.n	800193e <HAL_I2C_Master_Receive+0xaa>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001938:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800193a:	2a11      	cmp	r2, #17
 800193c:	d0f7      	beq.n	800192e <HAL_I2C_Master_Receive+0x9a>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800193e:	9600      	str	r6, [sp, #0]
 8001940:	463b      	mov	r3, r7
 8001942:	2200      	movs	r2, #0
 8001944:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001948:	4620      	mov	r0, r4
 800194a:	f7ff fd52 	bl	80013f2 <I2C_WaitOnFlagUntilTimeout>
 800194e:	2800      	cmp	r0, #0
 8001950:	d14d      	bne.n	80019ee <HAL_I2C_Master_Receive+0x15a>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001952:	6923      	ldr	r3, [r4, #16]
 8001954:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001958:	6823      	ldr	r3, [r4, #0]
 800195a:	d139      	bne.n	80019d0 <HAL_I2C_Master_Receive+0x13c>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800195c:	f045 0501 	orr.w	r5, r5, #1
 8001960:	b2ed      	uxtb	r5, r5
 8001962:	611d      	str	r5, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001964:	4633      	mov	r3, r6
 8001966:	463a      	mov	r2, r7
 8001968:	4979      	ldr	r1, [pc, #484]	; (8001b50 <HAL_I2C_Master_Receive+0x2bc>)
 800196a:	4620      	mov	r0, r4
 800196c:	f7ff fd01 	bl	8001372 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001970:	4605      	mov	r5, r0
 8001972:	2800      	cmp	r0, #0
 8001974:	d13a      	bne.n	80019ec <HAL_I2C_Master_Receive+0x158>
    if(hi2c->XferSize == 0U)
 8001976:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8001978:	6823      	ldr	r3, [r4, #0]
 800197a:	2a00      	cmp	r2, #0
 800197c:	d069      	beq.n	8001a52 <HAL_I2C_Master_Receive+0x1be>
    else if(hi2c->XferSize == 1U)
 800197e:	2a01      	cmp	r2, #1
 8001980:	d17a      	bne.n	8001a78 <HAL_I2C_Master_Receive+0x1e4>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001988:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800198a:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800198c:	6823      	ldr	r3, [r4, #0]
 800198e:	9504      	str	r5, [sp, #16]
 8001990:	695a      	ldr	r2, [r3, #20]
 8001992:	9204      	str	r2, [sp, #16]
 8001994:	699a      	ldr	r2, [r3, #24]
 8001996:	9204      	str	r2, [sp, #16]
 8001998:	9a04      	ldr	r2, [sp, #16]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80019a0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80019a2:	b662      	cpsie	i
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80019a4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8001b58 <HAL_I2C_Master_Receive+0x2c4>
    while(hi2c->XferSize > 0U)
 80019a8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d05b      	beq.n	8001a66 <HAL_I2C_Master_Receive+0x1d2>
      if(hi2c->XferSize <= 3U)
 80019ae:	2b03      	cmp	r3, #3
 80019b0:	f200 80d4 	bhi.w	8001b5c <HAL_I2C_Master_Receive+0x2c8>
        if(hi2c->XferSize == 1U)
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d17b      	bne.n	8001ab0 <HAL_I2C_Master_Receive+0x21c>
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 80019b8:	4632      	mov	r2, r6
 80019ba:	4639      	mov	r1, r7
 80019bc:	4620      	mov	r0, r4
 80019be:	f7ff fdbf 	bl	8001540 <I2C_WaitOnRXNEFlagUntilTimeout>
 80019c2:	2800      	cmp	r0, #0
 80019c4:	f000 8093 	beq.w	8001aee <HAL_I2C_Master_Receive+0x25a>
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 80019c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80019ca:	2b20      	cmp	r3, #32
 80019cc:	d116      	bne.n	80019fc <HAL_I2C_Master_Receive+0x168>
 80019ce:	e03e      	b.n	8001a4e <HAL_I2C_Master_Receive+0x1ba>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80019d0:	ea4f 18e5 	mov.w	r8, r5, asr #7
 80019d4:	f008 0806 	and.w	r8, r8, #6
 80019d8:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 80019dc:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80019de:	495d      	ldr	r1, [pc, #372]	; (8001b54 <HAL_I2C_Master_Receive+0x2c0>)
 80019e0:	4633      	mov	r3, r6
 80019e2:	463a      	mov	r2, r7
 80019e4:	4620      	mov	r0, r4
 80019e6:	f7ff fcc4 	bl	8001372 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80019ea:	b148      	cbz	r0, 8001a00 <HAL_I2C_Master_Receive+0x16c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80019f0:	2b04      	cmp	r3, #4
 80019f2:	f04f 0300 	mov.w	r3, #0
 80019f6:	d128      	bne.n	8001a4a <HAL_I2C_Master_Receive+0x1b6>
        __HAL_UNLOCK(hi2c);
 80019f8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
              return HAL_ERROR;
 80019fc:	2501      	movs	r5, #1
 80019fe:	e759      	b.n	80018b4 <HAL_I2C_Master_Receive+0x20>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001a00:	6823      	ldr	r3, [r4, #0]
 8001a02:	b2ed      	uxtb	r5, r5
 8001a04:	611d      	str	r5, [r3, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001a06:	463a      	mov	r2, r7
 8001a08:	4633      	mov	r3, r6
 8001a0a:	4951      	ldr	r1, [pc, #324]	; (8001b50 <HAL_I2C_Master_Receive+0x2bc>)
 8001a0c:	4620      	mov	r0, r4
 8001a0e:	f7ff fcb0 	bl	8001372 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001a12:	4602      	mov	r2, r0
 8001a14:	2800      	cmp	r0, #0
 8001a16:	d1e9      	bne.n	80019ec <HAL_I2C_Master_Receive+0x158>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a18:	6823      	ldr	r3, [r4, #0]
 8001a1a:	9007      	str	r0, [sp, #28]
 8001a1c:	6959      	ldr	r1, [r3, #20]
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001a1e:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a20:	9107      	str	r1, [sp, #28]
 8001a22:	6999      	ldr	r1, [r3, #24]
 8001a24:	9107      	str	r1, [sp, #28]
 8001a26:	9907      	ldr	r1, [sp, #28]
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8001a28:	6819      	ldr	r1, [r3, #0]
 8001a2a:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001a2e:	6019      	str	r1, [r3, #0]
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001a30:	9600      	str	r6, [sp, #0]
 8001a32:	463b      	mov	r3, r7
 8001a34:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001a38:	f7ff fcdb 	bl	80013f2 <I2C_WaitOnFlagUntilTimeout>
 8001a3c:	2800      	cmp	r0, #0
 8001a3e:	d1d6      	bne.n	80019ee <HAL_I2C_Master_Receive+0x15a>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001a40:	6822      	ldr	r2, [r4, #0]
 8001a42:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 8001a46:	6113      	str	r3, [r2, #16]
 8001a48:	e78c      	b.n	8001964 <HAL_I2C_Master_Receive+0xd0>
        __HAL_UNLOCK(hi2c);
 8001a4a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
              return HAL_TIMEOUT;
 8001a4e:	2503      	movs	r5, #3
 8001a50:	e730      	b.n	80018b4 <HAL_I2C_Master_Receive+0x20>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a52:	9503      	str	r5, [sp, #12]
 8001a54:	695a      	ldr	r2, [r3, #20]
 8001a56:	9203      	str	r2, [sp, #12]
 8001a58:	699a      	ldr	r2, [r3, #24]
 8001a5a:	9203      	str	r2, [sp, #12]
 8001a5c:	9a03      	ldr	r2, [sp, #12]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a64:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001a66:	2320      	movs	r3, #32
 8001a68:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8001a72:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8001a76:	e71d      	b.n	80018b4 <HAL_I2C_Master_Receive+0x20>
    else if(hi2c->XferSize == 2U)
 8001a78:	2a02      	cmp	r2, #2
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8001a7a:	681a      	ldr	r2, [r3, #0]
    else if(hi2c->XferSize == 2U)
 8001a7c:	d10e      	bne.n	8001a9c <HAL_I2C_Master_Receive+0x208>
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8001a7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a82:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001a84:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a86:	6823      	ldr	r3, [r4, #0]
 8001a88:	9505      	str	r5, [sp, #20]
 8001a8a:	695a      	ldr	r2, [r3, #20]
 8001a8c:	9205      	str	r2, [sp, #20]
 8001a8e:	699a      	ldr	r2, [r3, #24]
 8001a90:	9205      	str	r2, [sp, #20]
 8001a92:	9a05      	ldr	r2, [sp, #20]
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a9a:	e781      	b.n	80019a0 <HAL_I2C_Master_Receive+0x10c>
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001a9c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001aa0:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001aa2:	9506      	str	r5, [sp, #24]
 8001aa4:	695a      	ldr	r2, [r3, #20]
 8001aa6:	9206      	str	r2, [sp, #24]
 8001aa8:	699b      	ldr	r3, [r3, #24]
 8001aaa:	9306      	str	r3, [sp, #24]
 8001aac:	9b06      	ldr	r3, [sp, #24]
 8001aae:	e779      	b.n	80019a4 <HAL_I2C_Master_Receive+0x110>
        else if(hi2c->XferSize == 2U)
 8001ab0:	2b02      	cmp	r3, #2
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ab2:	9600      	str	r6, [sp, #0]
 8001ab4:	463b      	mov	r3, r7
 8001ab6:	f04f 0200 	mov.w	r2, #0
 8001aba:	4641      	mov	r1, r8
 8001abc:	4620      	mov	r0, r4
        else if(hi2c->XferSize == 2U)
 8001abe:	d124      	bne.n	8001b0a <HAL_I2C_Master_Receive+0x276>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ac0:	f7ff fc97 	bl	80013f2 <I2C_WaitOnFlagUntilTimeout>
 8001ac4:	2800      	cmp	r0, #0
 8001ac6:	d1c2      	bne.n	8001a4e <HAL_I2C_Master_Receive+0x1ba>
 8001ac8:	b672      	cpsid	i
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001aca:	6823      	ldr	r3, [r4, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ad2:	601a      	str	r2, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001ad4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001ad6:	691b      	ldr	r3, [r3, #16]
 8001ad8:	1c51      	adds	r1, r2, #1
 8001ada:	6261      	str	r1, [r4, #36]	; 0x24
 8001adc:	7013      	strb	r3, [r2, #0]
          hi2c->XferSize--;
 8001ade:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001ae0:	3b01      	subs	r3, #1
 8001ae2:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001ae4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001aec:	b662      	cpsie	i
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001aee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001af0:	1c5a      	adds	r2, r3, #1
 8001af2:	6262      	str	r2, [r4, #36]	; 0x24
 8001af4:	6822      	ldr	r2, [r4, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001af6:	6912      	ldr	r2, [r2, #16]
 8001af8:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001afa:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001afc:	3b01      	subs	r3, #1
 8001afe:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001b00:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001b02:	3b01      	subs	r3, #1
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001b08:	e74e      	b.n	80019a8 <HAL_I2C_Master_Receive+0x114>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b0a:	f7ff fc72 	bl	80013f2 <I2C_WaitOnFlagUntilTimeout>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	2800      	cmp	r0, #0
 8001b12:	d19c      	bne.n	8001a4e <HAL_I2C_Master_Receive+0x1ba>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001b14:	6821      	ldr	r1, [r4, #0]
 8001b16:	680b      	ldr	r3, [r1, #0]
 8001b18:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001b1c:	600b      	str	r3, [r1, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001b1e:	b672      	cpsid	i
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001b20:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b22:	4620      	mov	r0, r4
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001b24:	1c59      	adds	r1, r3, #1
 8001b26:	6261      	str	r1, [r4, #36]	; 0x24
 8001b28:	6821      	ldr	r1, [r4, #0]
 8001b2a:	6909      	ldr	r1, [r1, #16]
 8001b2c:	7019      	strb	r1, [r3, #0]
          hi2c->XferSize--;
 8001b2e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b30:	9600      	str	r6, [sp, #0]
          hi2c->XferSize--;
 8001b32:	3b01      	subs	r3, #1
 8001b34:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001b36:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b38:	4641      	mov	r1, r8
          hi2c->XferCount--;
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	b29b      	uxth	r3, r3
 8001b3e:	8563      	strh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b40:	463b      	mov	r3, r7
 8001b42:	f7ff fc56 	bl	80013f2 <I2C_WaitOnFlagUntilTimeout>
 8001b46:	2800      	cmp	r0, #0
 8001b48:	d0bf      	beq.n	8001aca <HAL_I2C_Master_Receive+0x236>
 8001b4a:	e780      	b.n	8001a4e <HAL_I2C_Master_Receive+0x1ba>
 8001b4c:	00100002 	.word	0x00100002
 8001b50:	00010002 	.word	0x00010002
 8001b54:	00010008 	.word	0x00010008
 8001b58:	00010004 	.word	0x00010004
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8001b5c:	4632      	mov	r2, r6
 8001b5e:	4639      	mov	r1, r7
 8001b60:	4620      	mov	r0, r4
 8001b62:	f7ff fced 	bl	8001540 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b66:	2800      	cmp	r0, #0
 8001b68:	f47f af2e 	bne.w	80019c8 <HAL_I2C_Master_Receive+0x134>
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001b6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001b6e:	1c5a      	adds	r2, r3, #1
 8001b70:	6262      	str	r2, [r4, #36]	; 0x24
 8001b72:	6822      	ldr	r2, [r4, #0]
 8001b74:	6912      	ldr	r2, [r2, #16]
 8001b76:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 8001b78:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001b7a:	6822      	ldr	r2, [r4, #0]
        hi2c->XferSize--;
 8001b7c:	3b01      	subs	r3, #1
 8001b7e:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001b80:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001b82:	3b01      	subs	r3, #1
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	8563      	strh	r3, [r4, #42]	; 0x2a
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001b88:	6953      	ldr	r3, [r2, #20]
 8001b8a:	075b      	lsls	r3, r3, #29
 8001b8c:	f57f af0c 	bpl.w	80019a8 <HAL_I2C_Master_Receive+0x114>
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001b90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001b92:	1c59      	adds	r1, r3, #1
 8001b94:	6261      	str	r1, [r4, #36]	; 0x24
 8001b96:	e7ae      	b.n	8001af6 <HAL_I2C_Master_Receive+0x262>

08001b98 <HAL_I2C_Mem_Write>:
{
 8001b98:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8001b9c:	4604      	mov	r4, r0
 8001b9e:	469a      	mov	sl, r3
 8001ba0:	4688      	mov	r8, r1
 8001ba2:	4691      	mov	r9, r2
 8001ba4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  tickstart = HAL_GetTick();
 8001ba6:	f7ff fa7b 	bl	80010a0 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001baa:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 8001bae:	4605      	mov	r5, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001bb0:	2b20      	cmp	r3, #32
 8001bb2:	d003      	beq.n	8001bbc <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 8001bb4:	2002      	movs	r0, #2
}
 8001bb6:	b002      	add	sp, #8
 8001bb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001bbc:	9000      	str	r0, [sp, #0]
 8001bbe:	2319      	movs	r3, #25
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	493e      	ldr	r1, [pc, #248]	; (8001cbc <HAL_I2C_Mem_Write+0x124>)
 8001bc4:	4620      	mov	r0, r4
 8001bc6:	f7ff fc14 	bl	80013f2 <I2C_WaitOnFlagUntilTimeout>
 8001bca:	2800      	cmp	r0, #0
 8001bcc:	d1f2      	bne.n	8001bb4 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 8001bce:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d0ee      	beq.n	8001bb4 <HAL_I2C_Mem_Write+0x1c>
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001bdc:	6823      	ldr	r3, [r4, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bde:	2700      	movs	r7, #0
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001be0:	681a      	ldr	r2, [r3, #0]
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001be2:	4641      	mov	r1, r8
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001be4:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001be6:	bf58      	it	pl
 8001be8:	681a      	ldrpl	r2, [r3, #0]
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001bea:	4620      	mov	r0, r4
      __HAL_I2C_ENABLE(hi2c);
 8001bec:	bf5c      	itt	pl
 8001bee:	f042 0201 	orrpl.w	r2, r2, #1
 8001bf2:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bfa:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001bfc:	2321      	movs	r3, #33	; 0x21
 8001bfe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001c02:	2340      	movs	r3, #64	; 0x40
 8001c04:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->pBuffPtr    = pData;
 8001c08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c0a:	6427      	str	r7, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8001c0c:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001c0e:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001c12:	9501      	str	r5, [sp, #4]
    hi2c->XferCount   = Size;
 8001c14:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c16:	4b2a      	ldr	r3, [pc, #168]	; (8001cc0 <HAL_I2C_Mem_Write+0x128>)
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001c18:	9600      	str	r6, [sp, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c1a:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001c1c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001c1e:	464a      	mov	r2, r9
    hi2c->XferSize    = hi2c->XferCount;
 8001c20:	8523      	strh	r3, [r4, #40]	; 0x28
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001c22:	4653      	mov	r3, sl
 8001c24:	f7ff fc3a 	bl	800149c <I2C_RequestMemoryWrite>
 8001c28:	2800      	cmp	r0, #0
 8001c2a:	d02a      	beq.n	8001c82 <HAL_I2C_Mem_Write+0xea>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c2c:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001c2e:	f884 703c 	strb.w	r7, [r4, #60]	; 0x3c
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c32:	2b04      	cmp	r3, #4
 8001c34:	d107      	bne.n	8001c46 <HAL_I2C_Mem_Write+0xae>
        return HAL_ERROR;
 8001c36:	2001      	movs	r0, #1
 8001c38:	e7bd      	b.n	8001bb6 <HAL_I2C_Mem_Write+0x1e>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c3a:	f7ff fc08 	bl	800144e <I2C_WaitOnTXEFlagUntilTimeout>
 8001c3e:	b120      	cbz	r0, 8001c4a <HAL_I2C_Mem_Write+0xb2>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c40:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001c42:	2b04      	cmp	r3, #4
 8001c44:	d034      	beq.n	8001cb0 <HAL_I2C_Mem_Write+0x118>
          return HAL_TIMEOUT;
 8001c46:	2003      	movs	r0, #3
 8001c48:	e7b5      	b.n	8001bb6 <HAL_I2C_Mem_Write+0x1e>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001c4a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001c4c:	6827      	ldr	r7, [r4, #0]
 8001c4e:	1c4b      	adds	r3, r1, #1
 8001c50:	6263      	str	r3, [r4, #36]	; 0x24
 8001c52:	780b      	ldrb	r3, [r1, #0]
      hi2c->XferSize--;
 8001c54:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001c56:	613b      	str	r3, [r7, #16]
      hi2c->XferCount--;
 8001c58:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001c5a:	1e50      	subs	r0, r2, #1
      hi2c->XferCount--;
 8001c5c:	3b01      	subs	r3, #1
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001c62:	697b      	ldr	r3, [r7, #20]
      hi2c->XferSize--;
 8001c64:	b280      	uxth	r0, r0
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001c66:	075b      	lsls	r3, r3, #29
      hi2c->XferSize--;
 8001c68:	8520      	strh	r0, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001c6a:	d50a      	bpl.n	8001c82 <HAL_I2C_Mem_Write+0xea>
 8001c6c:	b148      	cbz	r0, 8001c82 <HAL_I2C_Mem_Write+0xea>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001c6e:	1c8b      	adds	r3, r1, #2
 8001c70:	6263      	str	r3, [r4, #36]	; 0x24
 8001c72:	784b      	ldrb	r3, [r1, #1]
        hi2c->XferSize--;
 8001c74:	3a02      	subs	r2, #2
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001c76:	613b      	str	r3, [r7, #16]
        hi2c->XferCount--;
 8001c78:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8001c7a:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001c7c:	3b01      	subs	r3, #1
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	8563      	strh	r3, [r4, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 8001c82:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c84:	462a      	mov	r2, r5
 8001c86:	4631      	mov	r1, r6
 8001c88:	4620      	mov	r0, r4
    while(hi2c->XferSize > 0U)
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d1d5      	bne.n	8001c3a <HAL_I2C_Mem_Write+0xa2>
    if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c8e:	f7ff fc84 	bl	800159a <I2C_WaitOnBTFFlagUntilTimeout>
 8001c92:	2800      	cmp	r0, #0
 8001c94:	d1d4      	bne.n	8001c40 <HAL_I2C_Mem_Write+0xa8>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001c96:	6822      	ldr	r2, [r4, #0]
 8001c98:	6813      	ldr	r3, [r2, #0]
 8001c9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c9e:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001ca0:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 8001ca2:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8001ca6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001caa:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 8001cae:	e782      	b.n	8001bb6 <HAL_I2C_Mem_Write+0x1e>
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001cb0:	6822      	ldr	r2, [r4, #0]
 8001cb2:	6813      	ldr	r3, [r2, #0]
 8001cb4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cb8:	6013      	str	r3, [r2, #0]
 8001cba:	e7bc      	b.n	8001c36 <HAL_I2C_Mem_Write+0x9e>
 8001cbc:	00100002 	.word	0x00100002
 8001cc0:	ffff0000 	.word	0xffff0000

08001cc4 <HAL_I2C_IsDeviceReady>:
{
 8001cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001cc8:	4604      	mov	r4, r0
 8001cca:	b085      	sub	sp, #20
 8001ccc:	4698      	mov	r8, r3
 8001cce:	4689      	mov	r9, r1
 8001cd0:	4692      	mov	sl, r2
  tickstart = HAL_GetTick();
 8001cd2:	f7ff f9e5 	bl	80010a0 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001cd6:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 8001cda:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001cdc:	2b20      	cmp	r3, #32
 8001cde:	d003      	beq.n	8001ce8 <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 8001ce0:	2002      	movs	r0, #2
}
 8001ce2:	b005      	add	sp, #20
 8001ce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ce8:	9000      	str	r0, [sp, #0]
 8001cea:	2319      	movs	r3, #25
 8001cec:	2201      	movs	r2, #1
 8001cee:	494b      	ldr	r1, [pc, #300]	; (8001e1c <HAL_I2C_IsDeviceReady+0x158>)
 8001cf0:	4620      	mov	r0, r4
 8001cf2:	f7ff fb7e 	bl	80013f2 <I2C_WaitOnFlagUntilTimeout>
 8001cf6:	2800      	cmp	r0, #0
 8001cf8:	d1f2      	bne.n	8001ce0 <HAL_I2C_IsDeviceReady+0x1c>
    __HAL_LOCK(hi2c);
 8001cfa:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d0ee      	beq.n	8001ce0 <HAL_I2C_IsDeviceReady+0x1c>
 8001d02:	2301      	movs	r3, #1
 8001d04:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d08:	6823      	ldr	r3, [r4, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d0a:	2500      	movs	r5, #0
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d0c:	681a      	ldr	r2, [r3, #0]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d0e:	f8df b10c 	ldr.w	fp, [pc, #268]	; 8001e1c <HAL_I2C_IsDeviceReady+0x158>
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d12:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001d14:	bf58      	it	pl
 8001d16:	681a      	ldrpl	r2, [r3, #0]
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001d18:	f009 09fe 	and.w	r9, r9, #254	; 0xfe
      __HAL_I2C_ENABLE(hi2c);
 8001d1c:	bf5c      	itt	pl
 8001d1e:	f042 0201 	orrpl.w	r2, r2, #1
 8001d22:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d2a:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d2c:	2324      	movs	r3, #36	; 0x24
 8001d2e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d32:	4b3b      	ldr	r3, [pc, #236]	; (8001e20 <HAL_I2C_IsDeviceReady+0x15c>)
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d34:	6425      	str	r5, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d36:	62e3      	str	r3, [r4, #44]	; 0x2c
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001d38:	6822      	ldr	r2, [r4, #0]
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001d3a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001d3e:	6813      	ldr	r3, [r2, #0]
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001d40:	4620      	mov	r0, r4
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001d42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d46:	6013      	str	r3, [r2, #0]
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001d48:	9600      	str	r6, [sp, #0]
 8001d4a:	4643      	mov	r3, r8
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f7ff fb50 	bl	80013f2 <I2C_WaitOnFlagUntilTimeout>
 8001d52:	b108      	cbz	r0, 8001d58 <HAL_I2C_IsDeviceReady+0x94>
        return HAL_TIMEOUT;
 8001d54:	2003      	movs	r0, #3
 8001d56:	e7c4      	b.n	8001ce2 <HAL_I2C_IsDeviceReady+0x1e>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001d58:	6823      	ldr	r3, [r4, #0]
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001d5a:	27a0      	movs	r7, #160	; 0xa0
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001d5c:	f8c3 9010 	str.w	r9, [r3, #16]
      tickstart = HAL_GetTick();
 8001d60:	f7ff f99e 	bl	80010a0 <HAL_GetTick>
 8001d64:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001d66:	6823      	ldr	r3, [r4, #0]
 8001d68:	6959      	ldr	r1, [r3, #20]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001d6a:	695a      	ldr	r2, [r3, #20]
      tmp3 = hi2c->State;
 8001d6c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001d70:	f3c1 0140 	ubfx	r1, r1, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001d74:	f3c2 2280 	ubfx	r2, r2, #10, #1
      tmp3 = hi2c->State;
 8001d78:	b2db      	uxtb	r3, r3
      while((tmp1 == RESET) && (tmp2 == RESET) && (tmp3 != HAL_I2C_STATE_TIMEOUT))
 8001d7a:	b911      	cbnz	r1, 8001d82 <HAL_I2C_IsDeviceReady+0xbe>
 8001d7c:	b90a      	cbnz	r2, 8001d82 <HAL_I2C_IsDeviceReady+0xbe>
 8001d7e:	2ba0      	cmp	r3, #160	; 0xa0
 8001d80:	d120      	bne.n	8001dc4 <HAL_I2C_IsDeviceReady+0x100>
      hi2c->State = HAL_I2C_STATE_READY;
 8001d82:	2720      	movs	r7, #32
      if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001d84:	6823      	ldr	r3, [r4, #0]
      hi2c->State = HAL_I2C_STATE_READY;
 8001d86:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
      if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001d8a:	695a      	ldr	r2, [r3, #20]
 8001d8c:	f012 0f02 	tst.w	r2, #2
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d96:	601a      	str	r2, [r3, #0]
      if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001d98:	d02a      	beq.n	8001df0 <HAL_I2C_IsDeviceReady+0x12c>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	9203      	str	r2, [sp, #12]
 8001d9e:	695a      	ldr	r2, [r3, #20]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001da0:	491e      	ldr	r1, [pc, #120]	; (8001e1c <HAL_I2C_IsDeviceReady+0x158>)
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001da2:	9203      	str	r2, [sp, #12]
 8001da4:	699b      	ldr	r3, [r3, #24]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001da6:	2201      	movs	r2, #1
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001da8:	9303      	str	r3, [sp, #12]
 8001daa:	9b03      	ldr	r3, [sp, #12]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001dac:	9600      	str	r6, [sp, #0]
 8001dae:	2319      	movs	r3, #25
 8001db0:	4620      	mov	r0, r4
 8001db2:	f7ff fb1e 	bl	80013f2 <I2C_WaitOnFlagUntilTimeout>
 8001db6:	2800      	cmp	r0, #0
 8001db8:	d1cc      	bne.n	8001d54 <HAL_I2C_IsDeviceReady+0x90>
        hi2c->State = HAL_I2C_STATE_READY;
 8001dba:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8001dbe:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
        return HAL_OK;
 8001dc2:	e78e      	b.n	8001ce2 <HAL_I2C_IsDeviceReady+0x1e>
        if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001dc4:	f1b8 0f00 	cmp.w	r8, #0
 8001dc8:	d10c      	bne.n	8001de4 <HAL_I2C_IsDeviceReady+0x120>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001dca:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001dce:	6823      	ldr	r3, [r4, #0]
 8001dd0:	6959      	ldr	r1, [r3, #20]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001dd2:	695a      	ldr	r2, [r3, #20]
        tmp3 = hi2c->State;
 8001dd4:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001dd8:	f3c1 0140 	ubfx	r1, r1, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001ddc:	f3c2 2280 	ubfx	r2, r2, #10, #1
        tmp3 = hi2c->State;
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	e7ca      	b.n	8001d7a <HAL_I2C_IsDeviceReady+0xb6>
        if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001de4:	f7ff f95c 	bl	80010a0 <HAL_GetTick>
 8001de8:	1b80      	subs	r0, r0, r6
 8001dea:	4580      	cmp	r8, r0
 8001dec:	d3ed      	bcc.n	8001dca <HAL_I2C_IsDeviceReady+0x106>
 8001dee:	e7ee      	b.n	8001dce <HAL_I2C_IsDeviceReady+0x10a>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001df0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001df4:	4659      	mov	r1, fp
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001df6:	615a      	str	r2, [r3, #20]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001df8:	4620      	mov	r0, r4
 8001dfa:	9600      	str	r6, [sp, #0]
 8001dfc:	2319      	movs	r3, #25
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f7ff faf7 	bl	80013f2 <I2C_WaitOnFlagUntilTimeout>
 8001e04:	2800      	cmp	r0, #0
 8001e06:	d1a5      	bne.n	8001d54 <HAL_I2C_IsDeviceReady+0x90>
 8001e08:	3501      	adds	r5, #1
    }while(I2C_Trials++ < Trials);
 8001e0a:	45aa      	cmp	sl, r5
 8001e0c:	d894      	bhi.n	8001d38 <HAL_I2C_IsDeviceReady+0x74>
    __HAL_UNLOCK(hi2c);
 8001e0e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8001e12:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
    return HAL_ERROR;
 8001e16:	2001      	movs	r0, #1
 8001e18:	e763      	b.n	8001ce2 <HAL_I2C_IsDeviceReady+0x1e>
 8001e1a:	bf00      	nop
 8001e1c:	00100002 	.word	0x00100002
 8001e20:	ffff0000 	.word	0xffff0000

08001e24 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 8001e24:	6c00      	ldr	r0, [r0, #64]	; 0x40
}
 8001e26:	4770      	bx	lr

08001e28 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e28:	6803      	ldr	r3, [r0, #0]
{
 8001e2a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e2e:	07db      	lsls	r3, r3, #31
{
 8001e30:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e32:	d410      	bmi.n	8001e56 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e34:	682b      	ldr	r3, [r5, #0]
 8001e36:	079f      	lsls	r7, r3, #30
 8001e38:	d45e      	bmi.n	8001ef8 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e3a:	682b      	ldr	r3, [r5, #0]
 8001e3c:	0719      	lsls	r1, r3, #28
 8001e3e:	f100 8095 	bmi.w	8001f6c <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e42:	682b      	ldr	r3, [r5, #0]
 8001e44:	075a      	lsls	r2, r3, #29
 8001e46:	f100 80bf 	bmi.w	8001fc8 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e4a:	69ea      	ldr	r2, [r5, #28]
 8001e4c:	2a00      	cmp	r2, #0
 8001e4e:	f040 812d 	bne.w	80020ac <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001e52:	2000      	movs	r0, #0
 8001e54:	e014      	b.n	8001e80 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001e56:	4c90      	ldr	r4, [pc, #576]	; (8002098 <HAL_RCC_OscConfig+0x270>)
 8001e58:	6863      	ldr	r3, [r4, #4]
 8001e5a:	f003 030c 	and.w	r3, r3, #12
 8001e5e:	2b04      	cmp	r3, #4
 8001e60:	d007      	beq.n	8001e72 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e62:	6863      	ldr	r3, [r4, #4]
 8001e64:	f003 030c 	and.w	r3, r3, #12
 8001e68:	2b08      	cmp	r3, #8
 8001e6a:	d10c      	bne.n	8001e86 <HAL_RCC_OscConfig+0x5e>
 8001e6c:	6863      	ldr	r3, [r4, #4]
 8001e6e:	03de      	lsls	r6, r3, #15
 8001e70:	d509      	bpl.n	8001e86 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e72:	6823      	ldr	r3, [r4, #0]
 8001e74:	039c      	lsls	r4, r3, #14
 8001e76:	d5dd      	bpl.n	8001e34 <HAL_RCC_OscConfig+0xc>
 8001e78:	686b      	ldr	r3, [r5, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d1da      	bne.n	8001e34 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8001e7e:	2001      	movs	r0, #1
}
 8001e80:	b002      	add	sp, #8
 8001e82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e86:	686b      	ldr	r3, [r5, #4]
 8001e88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e8c:	d110      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x88>
 8001e8e:	6823      	ldr	r3, [r4, #0]
 8001e90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e94:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001e96:	f7ff f903 	bl	80010a0 <HAL_GetTick>
 8001e9a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e9c:	6823      	ldr	r3, [r4, #0]
 8001e9e:	0398      	lsls	r0, r3, #14
 8001ea0:	d4c8      	bmi.n	8001e34 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ea2:	f7ff f8fd 	bl	80010a0 <HAL_GetTick>
 8001ea6:	1b80      	subs	r0, r0, r6
 8001ea8:	2864      	cmp	r0, #100	; 0x64
 8001eaa:	d9f7      	bls.n	8001e9c <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8001eac:	2003      	movs	r0, #3
 8001eae:	e7e7      	b.n	8001e80 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eb0:	b99b      	cbnz	r3, 8001eda <HAL_RCC_OscConfig+0xb2>
 8001eb2:	6823      	ldr	r3, [r4, #0]
 8001eb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eb8:	6023      	str	r3, [r4, #0]
 8001eba:	6823      	ldr	r3, [r4, #0]
 8001ebc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ec0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001ec2:	f7ff f8ed 	bl	80010a0 <HAL_GetTick>
 8001ec6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ec8:	6823      	ldr	r3, [r4, #0]
 8001eca:	0399      	lsls	r1, r3, #14
 8001ecc:	d5b2      	bpl.n	8001e34 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ece:	f7ff f8e7 	bl	80010a0 <HAL_GetTick>
 8001ed2:	1b80      	subs	r0, r0, r6
 8001ed4:	2864      	cmp	r0, #100	; 0x64
 8001ed6:	d9f7      	bls.n	8001ec8 <HAL_RCC_OscConfig+0xa0>
 8001ed8:	e7e8      	b.n	8001eac <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eda:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ede:	6823      	ldr	r3, [r4, #0]
 8001ee0:	d103      	bne.n	8001eea <HAL_RCC_OscConfig+0xc2>
 8001ee2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ee6:	6023      	str	r3, [r4, #0]
 8001ee8:	e7d1      	b.n	8001e8e <HAL_RCC_OscConfig+0x66>
 8001eea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eee:	6023      	str	r3, [r4, #0]
 8001ef0:	6823      	ldr	r3, [r4, #0]
 8001ef2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ef6:	e7cd      	b.n	8001e94 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001ef8:	4c67      	ldr	r4, [pc, #412]	; (8002098 <HAL_RCC_OscConfig+0x270>)
 8001efa:	6863      	ldr	r3, [r4, #4]
 8001efc:	f013 0f0c 	tst.w	r3, #12
 8001f00:	d007      	beq.n	8001f12 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f02:	6863      	ldr	r3, [r4, #4]
 8001f04:	f003 030c 	and.w	r3, r3, #12
 8001f08:	2b08      	cmp	r3, #8
 8001f0a:	d110      	bne.n	8001f2e <HAL_RCC_OscConfig+0x106>
 8001f0c:	6863      	ldr	r3, [r4, #4]
 8001f0e:	03da      	lsls	r2, r3, #15
 8001f10:	d40d      	bmi.n	8001f2e <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f12:	6823      	ldr	r3, [r4, #0]
 8001f14:	079b      	lsls	r3, r3, #30
 8001f16:	d502      	bpl.n	8001f1e <HAL_RCC_OscConfig+0xf6>
 8001f18:	692b      	ldr	r3, [r5, #16]
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d1af      	bne.n	8001e7e <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f1e:	6823      	ldr	r3, [r4, #0]
 8001f20:	696a      	ldr	r2, [r5, #20]
 8001f22:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001f26:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001f2a:	6023      	str	r3, [r4, #0]
 8001f2c:	e785      	b.n	8001e3a <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f2e:	692a      	ldr	r2, [r5, #16]
 8001f30:	4b5a      	ldr	r3, [pc, #360]	; (800209c <HAL_RCC_OscConfig+0x274>)
 8001f32:	b16a      	cbz	r2, 8001f50 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8001f34:	2201      	movs	r2, #1
 8001f36:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001f38:	f7ff f8b2 	bl	80010a0 <HAL_GetTick>
 8001f3c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f3e:	6823      	ldr	r3, [r4, #0]
 8001f40:	079f      	lsls	r7, r3, #30
 8001f42:	d4ec      	bmi.n	8001f1e <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f44:	f7ff f8ac 	bl	80010a0 <HAL_GetTick>
 8001f48:	1b80      	subs	r0, r0, r6
 8001f4a:	2802      	cmp	r0, #2
 8001f4c:	d9f7      	bls.n	8001f3e <HAL_RCC_OscConfig+0x116>
 8001f4e:	e7ad      	b.n	8001eac <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8001f50:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001f52:	f7ff f8a5 	bl	80010a0 <HAL_GetTick>
 8001f56:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f58:	6823      	ldr	r3, [r4, #0]
 8001f5a:	0798      	lsls	r0, r3, #30
 8001f5c:	f57f af6d 	bpl.w	8001e3a <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f60:	f7ff f89e 	bl	80010a0 <HAL_GetTick>
 8001f64:	1b80      	subs	r0, r0, r6
 8001f66:	2802      	cmp	r0, #2
 8001f68:	d9f6      	bls.n	8001f58 <HAL_RCC_OscConfig+0x130>
 8001f6a:	e79f      	b.n	8001eac <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f6c:	69aa      	ldr	r2, [r5, #24]
 8001f6e:	4c4a      	ldr	r4, [pc, #296]	; (8002098 <HAL_RCC_OscConfig+0x270>)
 8001f70:	4b4b      	ldr	r3, [pc, #300]	; (80020a0 <HAL_RCC_OscConfig+0x278>)
 8001f72:	b1da      	cbz	r2, 8001fac <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8001f74:	2201      	movs	r2, #1
 8001f76:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001f78:	f7ff f892 	bl	80010a0 <HAL_GetTick>
 8001f7c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f80:	079b      	lsls	r3, r3, #30
 8001f82:	d50d      	bpl.n	8001fa0 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f84:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001f88:	4b46      	ldr	r3, [pc, #280]	; (80020a4 <HAL_RCC_OscConfig+0x27c>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001f90:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8001f92:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001f94:	9b01      	ldr	r3, [sp, #4]
 8001f96:	1e5a      	subs	r2, r3, #1
 8001f98:	9201      	str	r2, [sp, #4]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1f9      	bne.n	8001f92 <HAL_RCC_OscConfig+0x16a>
 8001f9e:	e750      	b.n	8001e42 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fa0:	f7ff f87e 	bl	80010a0 <HAL_GetTick>
 8001fa4:	1b80      	subs	r0, r0, r6
 8001fa6:	2802      	cmp	r0, #2
 8001fa8:	d9e9      	bls.n	8001f7e <HAL_RCC_OscConfig+0x156>
 8001faa:	e77f      	b.n	8001eac <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8001fac:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001fae:	f7ff f877 	bl	80010a0 <HAL_GetTick>
 8001fb2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001fb6:	079f      	lsls	r7, r3, #30
 8001fb8:	f57f af43 	bpl.w	8001e42 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fbc:	f7ff f870 	bl	80010a0 <HAL_GetTick>
 8001fc0:	1b80      	subs	r0, r0, r6
 8001fc2:	2802      	cmp	r0, #2
 8001fc4:	d9f6      	bls.n	8001fb4 <HAL_RCC_OscConfig+0x18c>
 8001fc6:	e771      	b.n	8001eac <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fc8:	4c33      	ldr	r4, [pc, #204]	; (8002098 <HAL_RCC_OscConfig+0x270>)
 8001fca:	69e3      	ldr	r3, [r4, #28]
 8001fcc:	00d8      	lsls	r0, r3, #3
 8001fce:	d424      	bmi.n	800201a <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8001fd0:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fd2:	69e3      	ldr	r3, [r4, #28]
 8001fd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fd8:	61e3      	str	r3, [r4, #28]
 8001fda:	69e3      	ldr	r3, [r4, #28]
 8001fdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe0:	9300      	str	r3, [sp, #0]
 8001fe2:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fe4:	4e30      	ldr	r6, [pc, #192]	; (80020a8 <HAL_RCC_OscConfig+0x280>)
 8001fe6:	6833      	ldr	r3, [r6, #0]
 8001fe8:	05d9      	lsls	r1, r3, #23
 8001fea:	d518      	bpl.n	800201e <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fec:	68eb      	ldr	r3, [r5, #12]
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d126      	bne.n	8002040 <HAL_RCC_OscConfig+0x218>
 8001ff2:	6a23      	ldr	r3, [r4, #32]
 8001ff4:	f043 0301 	orr.w	r3, r3, #1
 8001ff8:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001ffa:	f7ff f851 	bl	80010a0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ffe:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002002:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002004:	6a23      	ldr	r3, [r4, #32]
 8002006:	079b      	lsls	r3, r3, #30
 8002008:	d53f      	bpl.n	800208a <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 800200a:	2f00      	cmp	r7, #0
 800200c:	f43f af1d 	beq.w	8001e4a <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002010:	69e3      	ldr	r3, [r4, #28]
 8002012:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002016:	61e3      	str	r3, [r4, #28]
 8002018:	e717      	b.n	8001e4a <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 800201a:	2700      	movs	r7, #0
 800201c:	e7e2      	b.n	8001fe4 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800201e:	6833      	ldr	r3, [r6, #0]
 8002020:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002024:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002026:	f7ff f83b 	bl	80010a0 <HAL_GetTick>
 800202a:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800202c:	6833      	ldr	r3, [r6, #0]
 800202e:	05da      	lsls	r2, r3, #23
 8002030:	d4dc      	bmi.n	8001fec <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002032:	f7ff f835 	bl	80010a0 <HAL_GetTick>
 8002036:	eba0 0008 	sub.w	r0, r0, r8
 800203a:	2864      	cmp	r0, #100	; 0x64
 800203c:	d9f6      	bls.n	800202c <HAL_RCC_OscConfig+0x204>
 800203e:	e735      	b.n	8001eac <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002040:	b9ab      	cbnz	r3, 800206e <HAL_RCC_OscConfig+0x246>
 8002042:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002044:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002048:	f023 0301 	bic.w	r3, r3, #1
 800204c:	6223      	str	r3, [r4, #32]
 800204e:	6a23      	ldr	r3, [r4, #32]
 8002050:	f023 0304 	bic.w	r3, r3, #4
 8002054:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8002056:	f7ff f823 	bl	80010a0 <HAL_GetTick>
 800205a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800205c:	6a23      	ldr	r3, [r4, #32]
 800205e:	0798      	lsls	r0, r3, #30
 8002060:	d5d3      	bpl.n	800200a <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002062:	f7ff f81d 	bl	80010a0 <HAL_GetTick>
 8002066:	1b80      	subs	r0, r0, r6
 8002068:	4540      	cmp	r0, r8
 800206a:	d9f7      	bls.n	800205c <HAL_RCC_OscConfig+0x234>
 800206c:	e71e      	b.n	8001eac <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800206e:	2b05      	cmp	r3, #5
 8002070:	6a23      	ldr	r3, [r4, #32]
 8002072:	d103      	bne.n	800207c <HAL_RCC_OscConfig+0x254>
 8002074:	f043 0304 	orr.w	r3, r3, #4
 8002078:	6223      	str	r3, [r4, #32]
 800207a:	e7ba      	b.n	8001ff2 <HAL_RCC_OscConfig+0x1ca>
 800207c:	f023 0301 	bic.w	r3, r3, #1
 8002080:	6223      	str	r3, [r4, #32]
 8002082:	6a23      	ldr	r3, [r4, #32]
 8002084:	f023 0304 	bic.w	r3, r3, #4
 8002088:	e7b6      	b.n	8001ff8 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800208a:	f7ff f809 	bl	80010a0 <HAL_GetTick>
 800208e:	eba0 0008 	sub.w	r0, r0, r8
 8002092:	42b0      	cmp	r0, r6
 8002094:	d9b6      	bls.n	8002004 <HAL_RCC_OscConfig+0x1dc>
 8002096:	e709      	b.n	8001eac <HAL_RCC_OscConfig+0x84>
 8002098:	40021000 	.word	0x40021000
 800209c:	42420000 	.word	0x42420000
 80020a0:	42420480 	.word	0x42420480
 80020a4:	20000008 	.word	0x20000008
 80020a8:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020ac:	4c22      	ldr	r4, [pc, #136]	; (8002138 <HAL_RCC_OscConfig+0x310>)
 80020ae:	6863      	ldr	r3, [r4, #4]
 80020b0:	f003 030c 	and.w	r3, r3, #12
 80020b4:	2b08      	cmp	r3, #8
 80020b6:	f43f aee2 	beq.w	8001e7e <HAL_RCC_OscConfig+0x56>
 80020ba:	2300      	movs	r3, #0
 80020bc:	4e1f      	ldr	r6, [pc, #124]	; (800213c <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020be:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80020c0:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020c2:	d12b      	bne.n	800211c <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 80020c4:	f7fe ffec 	bl	80010a0 <HAL_GetTick>
 80020c8:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020ca:	6823      	ldr	r3, [r4, #0]
 80020cc:	0199      	lsls	r1, r3, #6
 80020ce:	d41f      	bmi.n	8002110 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80020d0:	6a2b      	ldr	r3, [r5, #32]
 80020d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020d6:	d105      	bne.n	80020e4 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020d8:	6862      	ldr	r2, [r4, #4]
 80020da:	68a9      	ldr	r1, [r5, #8]
 80020dc:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80020e0:	430a      	orrs	r2, r1
 80020e2:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020e4:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80020e6:	6862      	ldr	r2, [r4, #4]
 80020e8:	430b      	orrs	r3, r1
 80020ea:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80020ee:	4313      	orrs	r3, r2
 80020f0:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80020f2:	2301      	movs	r3, #1
 80020f4:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80020f6:	f7fe ffd3 	bl	80010a0 <HAL_GetTick>
 80020fa:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020fc:	6823      	ldr	r3, [r4, #0]
 80020fe:	019a      	lsls	r2, r3, #6
 8002100:	f53f aea7 	bmi.w	8001e52 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002104:	f7fe ffcc 	bl	80010a0 <HAL_GetTick>
 8002108:	1b40      	subs	r0, r0, r5
 800210a:	2802      	cmp	r0, #2
 800210c:	d9f6      	bls.n	80020fc <HAL_RCC_OscConfig+0x2d4>
 800210e:	e6cd      	b.n	8001eac <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002110:	f7fe ffc6 	bl	80010a0 <HAL_GetTick>
 8002114:	1bc0      	subs	r0, r0, r7
 8002116:	2802      	cmp	r0, #2
 8002118:	d9d7      	bls.n	80020ca <HAL_RCC_OscConfig+0x2a2>
 800211a:	e6c7      	b.n	8001eac <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 800211c:	f7fe ffc0 	bl	80010a0 <HAL_GetTick>
 8002120:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002122:	6823      	ldr	r3, [r4, #0]
 8002124:	019b      	lsls	r3, r3, #6
 8002126:	f57f ae94 	bpl.w	8001e52 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800212a:	f7fe ffb9 	bl	80010a0 <HAL_GetTick>
 800212e:	1b40      	subs	r0, r0, r5
 8002130:	2802      	cmp	r0, #2
 8002132:	d9f6      	bls.n	8002122 <HAL_RCC_OscConfig+0x2fa>
 8002134:	e6ba      	b.n	8001eac <HAL_RCC_OscConfig+0x84>
 8002136:	bf00      	nop
 8002138:	40021000 	.word	0x40021000
 800213c:	42420060 	.word	0x42420060

08002140 <HAL_RCC_GetSysClockFreq>:
{
 8002140:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002142:	4b19      	ldr	r3, [pc, #100]	; (80021a8 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8002144:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002146:	ac02      	add	r4, sp, #8
 8002148:	f103 0510 	add.w	r5, r3, #16
 800214c:	4622      	mov	r2, r4
 800214e:	6818      	ldr	r0, [r3, #0]
 8002150:	6859      	ldr	r1, [r3, #4]
 8002152:	3308      	adds	r3, #8
 8002154:	c203      	stmia	r2!, {r0, r1}
 8002156:	42ab      	cmp	r3, r5
 8002158:	4614      	mov	r4, r2
 800215a:	d1f7      	bne.n	800214c <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800215c:	2301      	movs	r3, #1
 800215e:	f88d 3004 	strb.w	r3, [sp, #4]
 8002162:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8002164:	4911      	ldr	r1, [pc, #68]	; (80021ac <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002166:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 800216a:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800216c:	f003 020c 	and.w	r2, r3, #12
 8002170:	2a08      	cmp	r2, #8
 8002172:	d117      	bne.n	80021a4 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002174:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8002178:	a806      	add	r0, sp, #24
 800217a:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800217c:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800217e:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002182:	d50c      	bpl.n	800219e <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002184:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002186:	480a      	ldr	r0, [pc, #40]	; (80021b0 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002188:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800218c:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800218e:	aa06      	add	r2, sp, #24
 8002190:	4413      	add	r3, r2
 8002192:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002196:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800219a:	b007      	add	sp, #28
 800219c:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800219e:	4805      	ldr	r0, [pc, #20]	; (80021b4 <HAL_RCC_GetSysClockFreq+0x74>)
 80021a0:	4350      	muls	r0, r2
 80021a2:	e7fa      	b.n	800219a <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 80021a4:	4802      	ldr	r0, [pc, #8]	; (80021b0 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 80021a6:	e7f8      	b.n	800219a <HAL_RCC_GetSysClockFreq+0x5a>
 80021a8:	080050c8 	.word	0x080050c8
 80021ac:	40021000 	.word	0x40021000
 80021b0:	007a1200 	.word	0x007a1200
 80021b4:	003d0900 	.word	0x003d0900

080021b8 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80021b8:	4a54      	ldr	r2, [pc, #336]	; (800230c <HAL_RCC_ClockConfig+0x154>)
{
 80021ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80021be:	6813      	ldr	r3, [r2, #0]
{
 80021c0:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80021c2:	f003 0307 	and.w	r3, r3, #7
 80021c6:	428b      	cmp	r3, r1
{
 80021c8:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80021ca:	d32a      	bcc.n	8002222 <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021cc:	6829      	ldr	r1, [r5, #0]
 80021ce:	078c      	lsls	r4, r1, #30
 80021d0:	d434      	bmi.n	800223c <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021d2:	07ca      	lsls	r2, r1, #31
 80021d4:	d447      	bmi.n	8002266 <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80021d6:	4a4d      	ldr	r2, [pc, #308]	; (800230c <HAL_RCC_ClockConfig+0x154>)
 80021d8:	6813      	ldr	r3, [r2, #0]
 80021da:	f003 0307 	and.w	r3, r3, #7
 80021de:	429e      	cmp	r6, r3
 80021e0:	f0c0 8082 	bcc.w	80022e8 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021e4:	682a      	ldr	r2, [r5, #0]
 80021e6:	4c4a      	ldr	r4, [pc, #296]	; (8002310 <HAL_RCC_ClockConfig+0x158>)
 80021e8:	f012 0f04 	tst.w	r2, #4
 80021ec:	f040 8087 	bne.w	80022fe <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021f0:	0713      	lsls	r3, r2, #28
 80021f2:	d506      	bpl.n	8002202 <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021f4:	6863      	ldr	r3, [r4, #4]
 80021f6:	692a      	ldr	r2, [r5, #16]
 80021f8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80021fc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002200:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002202:	f7ff ff9d 	bl	8002140 <HAL_RCC_GetSysClockFreq>
 8002206:	6863      	ldr	r3, [r4, #4]
 8002208:	4a42      	ldr	r2, [pc, #264]	; (8002314 <HAL_RCC_ClockConfig+0x15c>)
 800220a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800220e:	5cd3      	ldrb	r3, [r2, r3]
 8002210:	40d8      	lsrs	r0, r3
 8002212:	4b41      	ldr	r3, [pc, #260]	; (8002318 <HAL_RCC_ClockConfig+0x160>)
 8002214:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002216:	2000      	movs	r0, #0
 8002218:	f7fe ff00 	bl	800101c <HAL_InitTick>
  return HAL_OK;
 800221c:	2000      	movs	r0, #0
}
 800221e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002222:	6813      	ldr	r3, [r2, #0]
 8002224:	f023 0307 	bic.w	r3, r3, #7
 8002228:	430b      	orrs	r3, r1
 800222a:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800222c:	6813      	ldr	r3, [r2, #0]
 800222e:	f003 0307 	and.w	r3, r3, #7
 8002232:	4299      	cmp	r1, r3
 8002234:	d0ca      	beq.n	80021cc <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8002236:	2001      	movs	r0, #1
 8002238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800223c:	4b34      	ldr	r3, [pc, #208]	; (8002310 <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800223e:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002242:	bf1e      	ittt	ne
 8002244:	685a      	ldrne	r2, [r3, #4]
 8002246:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 800224a:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800224c:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800224e:	bf42      	ittt	mi
 8002250:	685a      	ldrmi	r2, [r3, #4]
 8002252:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8002256:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002258:	685a      	ldr	r2, [r3, #4]
 800225a:	68a8      	ldr	r0, [r5, #8]
 800225c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002260:	4302      	orrs	r2, r0
 8002262:	605a      	str	r2, [r3, #4]
 8002264:	e7b5      	b.n	80021d2 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002266:	686a      	ldr	r2, [r5, #4]
 8002268:	4c29      	ldr	r4, [pc, #164]	; (8002310 <HAL_RCC_ClockConfig+0x158>)
 800226a:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800226c:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800226e:	d11c      	bne.n	80022aa <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002270:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002274:	d0df      	beq.n	8002236 <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002276:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002278:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800227c:	f023 0303 	bic.w	r3, r3, #3
 8002280:	4313      	orrs	r3, r2
 8002282:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8002284:	f7fe ff0c 	bl	80010a0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002288:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 800228a:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800228c:	2b01      	cmp	r3, #1
 800228e:	d114      	bne.n	80022ba <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002290:	6863      	ldr	r3, [r4, #4]
 8002292:	f003 030c 	and.w	r3, r3, #12
 8002296:	2b04      	cmp	r3, #4
 8002298:	d09d      	beq.n	80021d6 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800229a:	f7fe ff01 	bl	80010a0 <HAL_GetTick>
 800229e:	1bc0      	subs	r0, r0, r7
 80022a0:	4540      	cmp	r0, r8
 80022a2:	d9f5      	bls.n	8002290 <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 80022a4:	2003      	movs	r0, #3
 80022a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022aa:	2a02      	cmp	r2, #2
 80022ac:	d102      	bne.n	80022b4 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022ae:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80022b2:	e7df      	b.n	8002274 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022b4:	f013 0f02 	tst.w	r3, #2
 80022b8:	e7dc      	b.n	8002274 <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d10f      	bne.n	80022de <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022be:	6863      	ldr	r3, [r4, #4]
 80022c0:	f003 030c 	and.w	r3, r3, #12
 80022c4:	2b08      	cmp	r3, #8
 80022c6:	d086      	beq.n	80021d6 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022c8:	f7fe feea 	bl	80010a0 <HAL_GetTick>
 80022cc:	1bc0      	subs	r0, r0, r7
 80022ce:	4540      	cmp	r0, r8
 80022d0:	d9f5      	bls.n	80022be <HAL_RCC_ClockConfig+0x106>
 80022d2:	e7e7      	b.n	80022a4 <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022d4:	f7fe fee4 	bl	80010a0 <HAL_GetTick>
 80022d8:	1bc0      	subs	r0, r0, r7
 80022da:	4540      	cmp	r0, r8
 80022dc:	d8e2      	bhi.n	80022a4 <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80022de:	6863      	ldr	r3, [r4, #4]
 80022e0:	f013 0f0c 	tst.w	r3, #12
 80022e4:	d1f6      	bne.n	80022d4 <HAL_RCC_ClockConfig+0x11c>
 80022e6:	e776      	b.n	80021d6 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022e8:	6813      	ldr	r3, [r2, #0]
 80022ea:	f023 0307 	bic.w	r3, r3, #7
 80022ee:	4333      	orrs	r3, r6
 80022f0:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80022f2:	6813      	ldr	r3, [r2, #0]
 80022f4:	f003 0307 	and.w	r3, r3, #7
 80022f8:	429e      	cmp	r6, r3
 80022fa:	d19c      	bne.n	8002236 <HAL_RCC_ClockConfig+0x7e>
 80022fc:	e772      	b.n	80021e4 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022fe:	6863      	ldr	r3, [r4, #4]
 8002300:	68e9      	ldr	r1, [r5, #12]
 8002302:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002306:	430b      	orrs	r3, r1
 8002308:	6063      	str	r3, [r4, #4]
 800230a:	e771      	b.n	80021f0 <HAL_RCC_ClockConfig+0x38>
 800230c:	40022000 	.word	0x40022000
 8002310:	40021000 	.word	0x40021000
 8002314:	0800522e 	.word	0x0800522e
 8002318:	20000008 	.word	0x20000008

0800231c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800231c:	4b04      	ldr	r3, [pc, #16]	; (8002330 <HAL_RCC_GetPCLK1Freq+0x14>)
 800231e:	4a05      	ldr	r2, [pc, #20]	; (8002334 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002326:	5cd3      	ldrb	r3, [r2, r3]
 8002328:	4a03      	ldr	r2, [pc, #12]	; (8002338 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800232a:	6810      	ldr	r0, [r2, #0]
}    
 800232c:	40d8      	lsrs	r0, r3
 800232e:	4770      	bx	lr
 8002330:	40021000 	.word	0x40021000
 8002334:	0800523e 	.word	0x0800523e
 8002338:	20000008 	.word	0x20000008

0800233c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800233c:	4b04      	ldr	r3, [pc, #16]	; (8002350 <HAL_RCC_GetPCLK2Freq+0x14>)
 800233e:	4a05      	ldr	r2, [pc, #20]	; (8002354 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002346:	5cd3      	ldrb	r3, [r2, r3]
 8002348:	4a03      	ldr	r2, [pc, #12]	; (8002358 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800234a:	6810      	ldr	r0, [r2, #0]
} 
 800234c:	40d8      	lsrs	r0, r3
 800234e:	4770      	bx	lr
 8002350:	40021000 	.word	0x40021000
 8002354:	0800523e 	.word	0x0800523e
 8002358:	20000008 	.word	0x20000008

0800235c <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800235c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002360:	6805      	ldr	r5, [r0, #0]
 8002362:	68c2      	ldr	r2, [r0, #12]
 8002364:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002366:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002368:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800236c:	4313      	orrs	r3, r2
 800236e:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002370:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 8002372:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002374:	430b      	orrs	r3, r1
 8002376:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8002378:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 800237c:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002380:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8002382:	4313      	orrs	r3, r2
 8002384:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002386:	696b      	ldr	r3, [r5, #20]
 8002388:	6982      	ldr	r2, [r0, #24]
 800238a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800238e:	4313      	orrs	r3, r2
 8002390:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002392:	4b40      	ldr	r3, [pc, #256]	; (8002494 <UART_SetConfig+0x138>)
{
 8002394:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 8002396:	429d      	cmp	r5, r3
 8002398:	f04f 0419 	mov.w	r4, #25
 800239c:	d146      	bne.n	800242c <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800239e:	f7ff ffcd 	bl	800233c <HAL_RCC_GetPCLK2Freq>
 80023a2:	fb04 f300 	mul.w	r3, r4, r0
 80023a6:	f8d9 6004 	ldr.w	r6, [r9, #4]
 80023aa:	f04f 0864 	mov.w	r8, #100	; 0x64
 80023ae:	00b6      	lsls	r6, r6, #2
 80023b0:	fbb3 f3f6 	udiv	r3, r3, r6
 80023b4:	fbb3 f3f8 	udiv	r3, r3, r8
 80023b8:	011e      	lsls	r6, r3, #4
 80023ba:	f7ff ffbf 	bl	800233c <HAL_RCC_GetPCLK2Freq>
 80023be:	4360      	muls	r0, r4
 80023c0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	fbb0 f7f3 	udiv	r7, r0, r3
 80023ca:	f7ff ffb7 	bl	800233c <HAL_RCC_GetPCLK2Freq>
 80023ce:	4360      	muls	r0, r4
 80023d0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80023da:	fbb3 f3f8 	udiv	r3, r3, r8
 80023de:	fb08 7313 	mls	r3, r8, r3, r7
 80023e2:	011b      	lsls	r3, r3, #4
 80023e4:	3332      	adds	r3, #50	; 0x32
 80023e6:	fbb3 f3f8 	udiv	r3, r3, r8
 80023ea:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 80023ee:	f7ff ffa5 	bl	800233c <HAL_RCC_GetPCLK2Freq>
 80023f2:	4360      	muls	r0, r4
 80023f4:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80023f8:	0092      	lsls	r2, r2, #2
 80023fa:	fbb0 faf2 	udiv	sl, r0, r2
 80023fe:	f7ff ff9d 	bl	800233c <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002402:	4360      	muls	r0, r4
 8002404:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	fbb0 f3f3 	udiv	r3, r0, r3
 800240e:	fbb3 f3f8 	udiv	r3, r3, r8
 8002412:	fb08 a313 	mls	r3, r8, r3, sl
 8002416:	011b      	lsls	r3, r3, #4
 8002418:	3332      	adds	r3, #50	; 0x32
 800241a:	fbb3 f3f8 	udiv	r3, r3, r8
 800241e:	f003 030f 	and.w	r3, r3, #15
 8002422:	433b      	orrs	r3, r7
 8002424:	4433      	add	r3, r6
 8002426:	60ab      	str	r3, [r5, #8]
 8002428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800242c:	f7ff ff76 	bl	800231c <HAL_RCC_GetPCLK1Freq>
 8002430:	fb04 f300 	mul.w	r3, r4, r0
 8002434:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8002438:	f04f 0864 	mov.w	r8, #100	; 0x64
 800243c:	00b6      	lsls	r6, r6, #2
 800243e:	fbb3 f3f6 	udiv	r3, r3, r6
 8002442:	fbb3 f3f8 	udiv	r3, r3, r8
 8002446:	011e      	lsls	r6, r3, #4
 8002448:	f7ff ff68 	bl	800231c <HAL_RCC_GetPCLK1Freq>
 800244c:	4360      	muls	r0, r4
 800244e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	fbb0 f7f3 	udiv	r7, r0, r3
 8002458:	f7ff ff60 	bl	800231c <HAL_RCC_GetPCLK1Freq>
 800245c:	4360      	muls	r0, r4
 800245e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	fbb0 f3f3 	udiv	r3, r0, r3
 8002468:	fbb3 f3f8 	udiv	r3, r3, r8
 800246c:	fb08 7313 	mls	r3, r8, r3, r7
 8002470:	011b      	lsls	r3, r3, #4
 8002472:	3332      	adds	r3, #50	; 0x32
 8002474:	fbb3 f3f8 	udiv	r3, r3, r8
 8002478:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 800247c:	f7ff ff4e 	bl	800231c <HAL_RCC_GetPCLK1Freq>
 8002480:	4360      	muls	r0, r4
 8002482:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8002486:	0092      	lsls	r2, r2, #2
 8002488:	fbb0 faf2 	udiv	sl, r0, r2
 800248c:	f7ff ff46 	bl	800231c <HAL_RCC_GetPCLK1Freq>
 8002490:	e7b7      	b.n	8002402 <UART_SetConfig+0xa6>
 8002492:	bf00      	nop
 8002494:	40013800 	.word	0x40013800

08002498 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8002498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800249a:	4604      	mov	r4, r0
 800249c:	460e      	mov	r6, r1
 800249e:	4617      	mov	r7, r2
 80024a0:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80024a2:	6821      	ldr	r1, [r4, #0]
 80024a4:	680b      	ldr	r3, [r1, #0]
 80024a6:	ea36 0303 	bics.w	r3, r6, r3
 80024aa:	d101      	bne.n	80024b0 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 80024ac:	2000      	movs	r0, #0
}
 80024ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 80024b0:	1c6b      	adds	r3, r5, #1
 80024b2:	d0f7      	beq.n	80024a4 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80024b4:	b995      	cbnz	r5, 80024dc <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80024b6:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 80024b8:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80024ba:	68da      	ldr	r2, [r3, #12]
 80024bc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80024c0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024c2:	695a      	ldr	r2, [r3, #20]
 80024c4:	f022 0201 	bic.w	r2, r2, #1
 80024c8:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80024ca:	2320      	movs	r3, #32
 80024cc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80024d0:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 80024d4:	2300      	movs	r3, #0
 80024d6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 80024da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80024dc:	f7fe fde0 	bl	80010a0 <HAL_GetTick>
 80024e0:	1bc0      	subs	r0, r0, r7
 80024e2:	4285      	cmp	r5, r0
 80024e4:	d2dd      	bcs.n	80024a2 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 80024e6:	e7e6      	b.n	80024b6 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

080024e8 <HAL_UART_Init>:
{
 80024e8:	b510      	push	{r4, lr}
  if(huart == NULL)
 80024ea:	4604      	mov	r4, r0
 80024ec:	b340      	cbz	r0, 8002540 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 80024ee:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80024f2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80024f6:	b91b      	cbnz	r3, 8002500 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80024f8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80024fc:	f000 fc8c 	bl	8002e18 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8002500:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8002502:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002504:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002508:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 800250a:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 800250c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002510:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002512:	f7ff ff23 	bl	800235c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002516:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002518:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800251a:	691a      	ldr	r2, [r3, #16]
 800251c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002520:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002522:	695a      	ldr	r2, [r3, #20]
 8002524:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002528:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800252a:	68da      	ldr	r2, [r3, #12]
 800252c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002530:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 8002532:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002534:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8002536:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800253a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800253e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002540:	2001      	movs	r0, #1
}
 8002542:	bd10      	pop	{r4, pc}

08002544 <HAL_UART_Transmit>:
{
 8002544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002548:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 800254a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 800254e:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_READY)
 8002550:	2b20      	cmp	r3, #32
{
 8002552:	460d      	mov	r5, r1
 8002554:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8002556:	d14e      	bne.n	80025f6 <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0U))
 8002558:	2900      	cmp	r1, #0
 800255a:	d049      	beq.n	80025f0 <HAL_UART_Transmit+0xac>
 800255c:	2a00      	cmp	r2, #0
 800255e:	d047      	beq.n	80025f0 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8002560:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002564:	2b01      	cmp	r3, #1
 8002566:	d046      	beq.n	80025f6 <HAL_UART_Transmit+0xb2>
 8002568:	2301      	movs	r3, #1
 800256a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800256e:	2300      	movs	r3, #0
 8002570:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002572:	2321      	movs	r3, #33	; 0x21
 8002574:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8002578:	f7fe fd92 	bl	80010a0 <HAL_GetTick>
 800257c:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 800257e:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8002582:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8002586:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002588:	b29b      	uxth	r3, r3
 800258a:	b96b      	cbnz	r3, 80025a8 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800258c:	463b      	mov	r3, r7
 800258e:	4632      	mov	r2, r6
 8002590:	2140      	movs	r1, #64	; 0x40
 8002592:	4620      	mov	r0, r4
 8002594:	f7ff ff80 	bl	8002498 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002598:	b9a8      	cbnz	r0, 80025c6 <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 800259a:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 800259c:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 80025a0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 80025a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 80025a8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025aa:	4632      	mov	r2, r6
      huart->TxXferCount--;
 80025ac:	3b01      	subs	r3, #1
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80025b2:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025b4:	2180      	movs	r1, #128	; 0x80
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80025b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025ba:	4620      	mov	r0, r4
 80025bc:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80025be:	d10e      	bne.n	80025de <HAL_UART_Transmit+0x9a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025c0:	f7ff ff6a 	bl	8002498 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80025c4:	b110      	cbz	r0, 80025cc <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 80025c6:	2003      	movs	r0, #3
 80025c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80025cc:	882b      	ldrh	r3, [r5, #0]
 80025ce:	6822      	ldr	r2, [r4, #0]
 80025d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025d4:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80025d6:	6923      	ldr	r3, [r4, #16]
 80025d8:	b943      	cbnz	r3, 80025ec <HAL_UART_Transmit+0xa8>
          pData +=2U;
 80025da:	3502      	adds	r5, #2
 80025dc:	e7d3      	b.n	8002586 <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025de:	f7ff ff5b 	bl	8002498 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80025e2:	2800      	cmp	r0, #0
 80025e4:	d1ef      	bne.n	80025c6 <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80025e6:	6823      	ldr	r3, [r4, #0]
 80025e8:	782a      	ldrb	r2, [r5, #0]
 80025ea:	605a      	str	r2, [r3, #4]
 80025ec:	3501      	adds	r5, #1
 80025ee:	e7ca      	b.n	8002586 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 80025f0:	2001      	movs	r0, #1
 80025f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80025f6:	2002      	movs	r0, #2
}
 80025f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080025fc <BMP_readBytes>:
    mc = ((int16_t)buf2[18] << 8) + buf2[19];
    md = ((int16_t)buf2[20] << 8) + buf2[21];
}

void BMP_readBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data, uint16_t timeout)
{
 80025fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002600:	b08d      	sub	sp, #52	; 0x34
 8002602:	f8bd 4050 	ldrh.w	r4, [sp, #80]	; 0x50
	uint32_t status = 0;
    uint16_t tout = timeout > 0 ? timeout : I2CDEV_DEFAULT_READ_TIMEOUT;
    status = HAL_I2C_Master_Transmit(BMP_hi2c, devAddr, &regAddr, 1, tout);
 8002606:	4e1c      	ldr	r6, [pc, #112]	; (8002678 <BMP_readBytes+0x7c>)
    uint16_t tout = timeout > 0 ? timeout : I2CDEV_DEFAULT_READ_TIMEOUT;
 8002608:	2c00      	cmp	r4, #0
 800260a:	bf08      	it	eq
 800260c:	f44f 747a 	moveq.w	r4, #1000	; 0x3e8
{
 8002610:	4691      	mov	r9, r2
 8002612:	aa0c      	add	r2, sp, #48	; 0x30
 8002614:	f802 1d21 	strb.w	r1, [r2, #-33]!
 8002618:	4698      	mov	r8, r3
    status = HAL_I2C_Master_Transmit(BMP_hi2c, devAddr, &regAddr, 1, tout);
 800261a:	4601      	mov	r1, r0
 800261c:	4607      	mov	r7, r0
 800261e:	9400      	str	r4, [sp, #0]
 8002620:	2301      	movs	r3, #1
 8002622:	6830      	ldr	r0, [r6, #0]
 8002624:	f7ff f860 	bl	80016e8 <HAL_I2C_Master_Transmit>

	if(status != HAL_OK)
 8002628:	4605      	mov	r5, r0
 800262a:	b178      	cbz	r0, 800264c <BMP_readBytes+0x50>
	{
		char str[32] = {0,};
 800262c:	2220      	movs	r2, #32
 800262e:	2100      	movs	r1, #0
 8002630:	a804      	add	r0, sp, #16
 8002632:	f000 fca7 	bl	8002f84 <memset>
		snprintf(str, 32, "HAL_I2C_Master_Transmit");
 8002636:	4911      	ldr	r1, [pc, #68]	; (800267c <BMP_readBytes+0x80>)
 8002638:	a804      	add	r0, sp, #16
 800263a:	f001 f941 	bl	80038c0 <strcpy>
		I2C_Error(str, status);
 800263e:	4629      	mov	r1, r5

	if(status != HAL_OK)
	{
		char str[32] = {0,};
		snprintf(str, 32, "HAL_I2C_Master_Receive");
		I2C_Error(str, status);
 8002640:	a804      	add	r0, sp, #16
 8002642:	f000 f9f9 	bl	8002a38 <I2C_Error>
	}
}
 8002646:	b00d      	add	sp, #52	; 0x34
 8002648:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	status = HAL_I2C_Master_Receive(BMP_hi2c, devAddr, data, length, tout);
 800264c:	9400      	str	r4, [sp, #0]
 800264e:	464b      	mov	r3, r9
 8002650:	4642      	mov	r2, r8
 8002652:	4639      	mov	r1, r7
 8002654:	6830      	ldr	r0, [r6, #0]
 8002656:	f7ff f91d 	bl	8001894 <HAL_I2C_Master_Receive>
	if(status != HAL_OK)
 800265a:	4604      	mov	r4, r0
 800265c:	2800      	cmp	r0, #0
 800265e:	d0f2      	beq.n	8002646 <BMP_readBytes+0x4a>
		char str[32] = {0,};
 8002660:	2220      	movs	r2, #32
 8002662:	4629      	mov	r1, r5
 8002664:	a804      	add	r0, sp, #16
 8002666:	f000 fc8d 	bl	8002f84 <memset>
		snprintf(str, 32, "HAL_I2C_Master_Receive");
 800266a:	4905      	ldr	r1, [pc, #20]	; (8002680 <BMP_readBytes+0x84>)
 800266c:	a804      	add	r0, sp, #16
 800266e:	f001 f927 	bl	80038c0 <strcpy>
		I2C_Error(str, status);
 8002672:	4621      	mov	r1, r4
 8002674:	e7e4      	b.n	8002640 <BMP_readBytes+0x44>
 8002676:	bf00      	nop
 8002678:	200001f8 	.word	0x200001f8
 800267c:	080050d8 	.word	0x080050d8
 8002680:	080050f0 	.word	0x080050f0

08002684 <BMP_i2c_init>:
	BMP_hi2c = hi2c;
 8002684:	4b2f      	ldr	r3, [pc, #188]	; (8002744 <BMP_i2c_init+0xc0>)
{
 8002686:	b500      	push	{lr}
	BMP_hi2c = hi2c;
 8002688:	6018      	str	r0, [r3, #0]
    BMP_readBytes(devAddr, BMP_RA_AC1_H, 22, buf2, 1000);
 800268a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
 800268e:	b089      	sub	sp, #36	; 0x24
    BMP_readBytes(devAddr, BMP_RA_AC1_H, 22, buf2, 1000);
 8002690:	9300      	str	r3, [sp, #0]
 8002692:	2216      	movs	r2, #22
 8002694:	ab02      	add	r3, sp, #8
 8002696:	21aa      	movs	r1, #170	; 0xaa
 8002698:	20ee      	movs	r0, #238	; 0xee
 800269a:	f7ff ffaf 	bl	80025fc <BMP_readBytes>
    ac1 = ((int16_t)buf2[0] << 8) + buf2[1];
 800269e:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80026a2:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80026a6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80026aa:	4a27      	ldr	r2, [pc, #156]	; (8002748 <BMP_i2c_init+0xc4>)
 80026ac:	8013      	strh	r3, [r2, #0]
    ac2 = ((int16_t)buf2[2] << 8) + buf2[3];
 80026ae:	f89d 200a 	ldrb.w	r2, [sp, #10]
 80026b2:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80026b6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80026ba:	4a24      	ldr	r2, [pc, #144]	; (800274c <BMP_i2c_init+0xc8>)
 80026bc:	8013      	strh	r3, [r2, #0]
    ac3 = ((int16_t)buf2[4] << 8) + buf2[5];
 80026be:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80026c2:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80026c6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80026ca:	4a21      	ldr	r2, [pc, #132]	; (8002750 <BMP_i2c_init+0xcc>)
 80026cc:	8013      	strh	r3, [r2, #0]
    ac4 = ((uint16_t)buf2[6] << 8) + buf2[7];
 80026ce:	f89d 200e 	ldrb.w	r2, [sp, #14]
 80026d2:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80026d6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80026da:	4a1e      	ldr	r2, [pc, #120]	; (8002754 <BMP_i2c_init+0xd0>)
 80026dc:	8013      	strh	r3, [r2, #0]
    ac5 = ((uint16_t)buf2[8] << 8) + buf2[9];
 80026de:	f89d 2010 	ldrb.w	r2, [sp, #16]
 80026e2:	f89d 3011 	ldrb.w	r3, [sp, #17]
 80026e6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80026ea:	4a1b      	ldr	r2, [pc, #108]	; (8002758 <BMP_i2c_init+0xd4>)
 80026ec:	8013      	strh	r3, [r2, #0]
    ac6 = ((uint16_t)buf2[10] << 8) + buf2[11];
 80026ee:	f89d 2012 	ldrb.w	r2, [sp, #18]
 80026f2:	f89d 3013 	ldrb.w	r3, [sp, #19]
 80026f6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80026fa:	4a18      	ldr	r2, [pc, #96]	; (800275c <BMP_i2c_init+0xd8>)
 80026fc:	8013      	strh	r3, [r2, #0]
    b1 = ((int16_t)buf2[12] << 8) + buf2[13];
 80026fe:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8002702:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8002706:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800270a:	4a15      	ldr	r2, [pc, #84]	; (8002760 <BMP_i2c_init+0xdc>)
 800270c:	8013      	strh	r3, [r2, #0]
    b2 = ((int16_t)buf2[14] << 8) + buf2[15];
 800270e:	f89d 2016 	ldrb.w	r2, [sp, #22]
 8002712:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8002716:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800271a:	4a12      	ldr	r2, [pc, #72]	; (8002764 <BMP_i2c_init+0xe0>)
 800271c:	8013      	strh	r3, [r2, #0]
    mc = ((int16_t)buf2[18] << 8) + buf2[19];
 800271e:	f89d 201a 	ldrb.w	r2, [sp, #26]
 8002722:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8002726:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800272a:	4a0f      	ldr	r2, [pc, #60]	; (8002768 <BMP_i2c_init+0xe4>)
 800272c:	8013      	strh	r3, [r2, #0]
    md = ((int16_t)buf2[20] << 8) + buf2[21];
 800272e:	f89d 201c 	ldrb.w	r2, [sp, #28]
 8002732:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8002736:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800273a:	4a0c      	ldr	r2, [pc, #48]	; (800276c <BMP_i2c_init+0xe8>)
 800273c:	8013      	strh	r3, [r2, #0]
}
 800273e:	b009      	add	sp, #36	; 0x24
 8002740:	f85d fb04 	ldr.w	pc, [sp], #4
 8002744:	200001f8 	.word	0x200001f8
 8002748:	200001fc 	.word	0x200001fc
 800274c:	200001fe 	.word	0x200001fe
 8002750:	20000200 	.word	0x20000200
 8002754:	20000202 	.word	0x20000202
 8002758:	20000204 	.word	0x20000204
 800275c:	20000206 	.word	0x20000206
 8002760:	20000208 	.word	0x20000208
 8002764:	2000020a 	.word	0x2000020a
 8002768:	20000214 	.word	0x20000214
 800276c:	20000216 	.word	0x20000216

08002770 <BMP_setControl>:

void BMP_setControl(uint8_t value)
{
	uint32_t status = HAL_I2C_Mem_Write(BMP_hi2c, devAddr, BMP_RA_CONTROL, I2C_MEMADD_SIZE_8BIT, &value, 1, 1000);
 8002770:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
 8002774:	b510      	push	{r4, lr}
 8002776:	b08e      	sub	sp, #56	; 0x38
 8002778:	aa0e      	add	r2, sp, #56	; 0x38
 800277a:	f802 0d21 	strb.w	r0, [r2, #-33]!
	uint32_t status = HAL_I2C_Mem_Write(BMP_hi2c, devAddr, BMP_RA_CONTROL, I2C_MEMADD_SIZE_8BIT, &value, 1, 1000);
 800277e:	9302      	str	r3, [sp, #8]
 8002780:	2301      	movs	r3, #1
 8002782:	e88d 000c 	stmia.w	sp, {r2, r3}
 8002786:	480e      	ldr	r0, [pc, #56]	; (80027c0 <BMP_setControl+0x50>)
 8002788:	22f4      	movs	r2, #244	; 0xf4
 800278a:	21ee      	movs	r1, #238	; 0xee
 800278c:	6800      	ldr	r0, [r0, #0]
 800278e:	f7ff fa03 	bl	8001b98 <HAL_I2C_Mem_Write>

	if(status == HAL_OK)
 8002792:	4604      	mov	r4, r0
 8002794:	b928      	cbnz	r0, 80027a2 <BMP_setControl+0x32>
	{
		measureMode = value;
 8002796:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800279a:	4b0a      	ldr	r3, [pc, #40]	; (80027c4 <BMP_setControl+0x54>)
 800279c:	701a      	strb	r2, [r3, #0]
	{
		char str[32] = {0,};
		snprintf(str, 32, "HAL_I2C_Mem_Write");
		I2C_Error(str, status);
	}
}
 800279e:	b00e      	add	sp, #56	; 0x38
 80027a0:	bd10      	pop	{r4, pc}
		char str[32] = {0,};
 80027a2:	2220      	movs	r2, #32
 80027a4:	2100      	movs	r1, #0
 80027a6:	a806      	add	r0, sp, #24
 80027a8:	f000 fbec 	bl	8002f84 <memset>
		snprintf(str, 32, "HAL_I2C_Mem_Write");
 80027ac:	4906      	ldr	r1, [pc, #24]	; (80027c8 <BMP_setControl+0x58>)
 80027ae:	a806      	add	r0, sp, #24
 80027b0:	f001 f886 	bl	80038c0 <strcpy>
		I2C_Error(str, status);
 80027b4:	4621      	mov	r1, r4
 80027b6:	a806      	add	r0, sp, #24
 80027b8:	f000 f93e 	bl	8002a38 <I2C_Error>
}
 80027bc:	e7ef      	b.n	800279e <BMP_setControl+0x2e>
 80027be:	bf00      	nop
 80027c0:	200001f8 	.word	0x200001f8
 80027c4:	20000218 	.word	0x20000218
 80027c8:	08005107 	.word	0x08005107

080027cc <BMP_getMeasurement2>:

uint16_t BMP_getMeasurement2()
{
	BMP_readBytes(devAddr, BMP_RA_MSB, 2, buffer, 1000);
 80027cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
 80027d0:	b513      	push	{r0, r1, r4, lr}
	BMP_readBytes(devAddr, BMP_RA_MSB, 2, buffer, 1000);
 80027d2:	4c07      	ldr	r4, [pc, #28]	; (80027f0 <BMP_getMeasurement2+0x24>)
 80027d4:	9300      	str	r3, [sp, #0]
 80027d6:	2202      	movs	r2, #2
 80027d8:	4623      	mov	r3, r4
 80027da:	21f6      	movs	r1, #246	; 0xf6
 80027dc:	20ee      	movs	r0, #238	; 0xee
 80027de:	f7ff ff0d 	bl	80025fc <BMP_readBytes>
    return ((uint16_t) buffer[0] << 8) + buffer[1];
 80027e2:	7823      	ldrb	r3, [r4, #0]
 80027e4:	7860      	ldrb	r0, [r4, #1]
 80027e6:	eb00 2003 	add.w	r0, r0, r3, lsl #8
}
 80027ea:	b280      	uxth	r0, r0
 80027ec:	b002      	add	sp, #8
 80027ee:	bd10      	pop	{r4, pc}
 80027f0:	20000210 	.word	0x20000210

080027f4 <BMP_getMeasurement3>:

uint32_t BMP_getMeasurement3()
{
	BMP_readBytes(devAddr, BMP_RA_MSB, 3, buffer, 1000);
 80027f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
 80027f8:	b513      	push	{r0, r1, r4, lr}
	BMP_readBytes(devAddr, BMP_RA_MSB, 3, buffer, 1000);
 80027fa:	4c08      	ldr	r4, [pc, #32]	; (800281c <BMP_getMeasurement3+0x28>)
 80027fc:	9300      	str	r3, [sp, #0]
 80027fe:	2203      	movs	r2, #3
 8002800:	4623      	mov	r3, r4
 8002802:	21f6      	movs	r1, #246	; 0xf6
 8002804:	20ee      	movs	r0, #238	; 0xee
 8002806:	f7ff fef9 	bl	80025fc <BMP_readBytes>
    return ((uint32_t)buffer[0] << 16) + ((uint16_t)buffer[1] << 8) + buffer[2];
 800280a:	7820      	ldrb	r0, [r4, #0]
 800280c:	78a3      	ldrb	r3, [r4, #2]
 800280e:	eb03 4300 	add.w	r3, r3, r0, lsl #16
 8002812:	7860      	ldrb	r0, [r4, #1]
}
 8002814:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 8002818:	b002      	add	sp, #8
 800281a:	bd10      	pop	{r4, pc}
 800281c:	20000210 	.word	0x20000210

08002820 <BMP_getMeasureDelayMilliseconds>:

uint8_t BMP_getMeasureDelayMilliseconds(uint8_t mode)
{
    if (mode == 0) mode = measureMode;
    if (measureMode == 0x2E) return 5;
 8002820:	4b0a      	ldr	r3, [pc, #40]	; (800284c <BMP_getMeasureDelayMilliseconds+0x2c>)
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	2b2e      	cmp	r3, #46	; 0x2e
 8002826:	d00a      	beq.n	800283e <BMP_getMeasureDelayMilliseconds+0x1e>
    else if (measureMode == 0x34) return 5;
 8002828:	2b34      	cmp	r3, #52	; 0x34
 800282a:	d008      	beq.n	800283e <BMP_getMeasureDelayMilliseconds+0x1e>
    else if (measureMode == 0x74) return 8;
 800282c:	2b74      	cmp	r3, #116	; 0x74
 800282e:	d008      	beq.n	8002842 <BMP_getMeasureDelayMilliseconds+0x22>
    else if (measureMode == 0xB4) return 14;
 8002830:	2bb4      	cmp	r3, #180	; 0xb4
 8002832:	d008      	beq.n	8002846 <BMP_getMeasureDelayMilliseconds+0x26>
    else if (measureMode == 0xF4) return 26;
 8002834:	2bf4      	cmp	r3, #244	; 0xf4
    return 0;
 8002836:	bf0c      	ite	eq
 8002838:	201a      	moveq	r0, #26
 800283a:	2000      	movne	r0, #0
 800283c:	4770      	bx	lr
    if (measureMode == 0x2E) return 5;
 800283e:	2005      	movs	r0, #5
 8002840:	4770      	bx	lr
    else if (measureMode == 0x74) return 8;
 8002842:	2008      	movs	r0, #8
 8002844:	4770      	bx	lr
    else if (measureMode == 0xB4) return 14;
 8002846:	200e      	movs	r0, #14
}
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	20000218 	.word	0x20000218

08002850 <BMP_getRawTemperature>:

uint16_t BMP_getRawTemperature()
{
    if (measureMode == 0x2E) return BMP_getMeasurement2();
 8002850:	4b03      	ldr	r3, [pc, #12]	; (8002860 <BMP_getRawTemperature+0x10>)
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	2b2e      	cmp	r3, #46	; 0x2e
 8002856:	d101      	bne.n	800285c <BMP_getRawTemperature+0xc>
 8002858:	f7ff bfb8 	b.w	80027cc <BMP_getMeasurement2>
    return 0;
}
 800285c:	2000      	movs	r0, #0
 800285e:	4770      	bx	lr
 8002860:	20000218 	.word	0x20000218

08002864 <BMP_getTemperatureC>:

float BMP_getTemperatureC()
{
 8002864:	b508      	push	{r3, lr}
    int32_t ut = BMP_getRawTemperature();
 8002866:	f7ff fff3 	bl	8002850 <BMP_getRawTemperature>
    int32_t x1 = ((ut - (int32_t)ac6) * (int32_t)ac5) >> 15;
 800286a:	4b0e      	ldr	r3, [pc, #56]	; (80028a4 <BMP_getTemperatureC+0x40>)
    int32_t x2 = ((int32_t)mc << 11) / (x1 + md);
 800286c:	4a0e      	ldr	r2, [pc, #56]	; (80028a8 <BMP_getTemperatureC+0x44>)
    int32_t x1 = ((ut - (int32_t)ac6) * (int32_t)ac5) >> 15;
 800286e:	881b      	ldrh	r3, [r3, #0]
 8002870:	1ac0      	subs	r0, r0, r3
 8002872:	4b0e      	ldr	r3, [pc, #56]	; (80028ac <BMP_getTemperatureC+0x48>)
 8002874:	881b      	ldrh	r3, [r3, #0]
 8002876:	4358      	muls	r0, r3
 8002878:	13c3      	asrs	r3, r0, #15
    int32_t x2 = ((int32_t)mc << 11) / (x1 + md);
 800287a:	f9b2 0000 	ldrsh.w	r0, [r2]
 800287e:	4a0c      	ldr	r2, [pc, #48]	; (80028b0 <BMP_getTemperatureC+0x4c>)
 8002880:	02c0      	lsls	r0, r0, #11
 8002882:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002886:	441a      	add	r2, r3
 8002888:	fb90 f0f2 	sdiv	r0, r0, r2
    b5 = x1 + x2;
 800288c:	4418      	add	r0, r3
 800288e:	4b09      	ldr	r3, [pc, #36]	; (80028b4 <BMP_getTemperatureC+0x50>)
 8002890:	6018      	str	r0, [r3, #0]
    return (float)((b5 + 8) >> 4) / 10.0f;
 8002892:	3008      	adds	r0, #8
 8002894:	1100      	asrs	r0, r0, #4
 8002896:	f7fe f9fd 	bl	8000c94 <__aeabi_i2f>
 800289a:	4907      	ldr	r1, [pc, #28]	; (80028b8 <BMP_getTemperatureC+0x54>)
 800289c:	f7fe fb02 	bl	8000ea4 <__aeabi_fdiv>
}
 80028a0:	bd08      	pop	{r3, pc}
 80028a2:	bf00      	nop
 80028a4:	20000206 	.word	0x20000206
 80028a8:	20000214 	.word	0x20000214
 80028ac:	20000204 	.word	0x20000204
 80028b0:	20000216 	.word	0x20000216
 80028b4:	2000020c 	.word	0x2000020c
 80028b8:	41200000 	.word	0x41200000

080028bc <BMP_getRawPressure>:


uint32_t BMP_getRawPressure()
{
 80028bc:	b510      	push	{r4, lr}
    if (measureMode & 0x34) return BMP_getMeasurement3() >> (8 - ((measureMode & 0xC0) >> 6));
 80028be:	4c06      	ldr	r4, [pc, #24]	; (80028d8 <BMP_getRawPressure+0x1c>)
 80028c0:	7820      	ldrb	r0, [r4, #0]
 80028c2:	f010 0034 	ands.w	r0, r0, #52	; 0x34
 80028c6:	d006      	beq.n	80028d6 <BMP_getRawPressure+0x1a>
 80028c8:	f7ff ff94 	bl	80027f4 <BMP_getMeasurement3>
 80028cc:	7823      	ldrb	r3, [r4, #0]
 80028ce:	099b      	lsrs	r3, r3, #6
 80028d0:	f1c3 0308 	rsb	r3, r3, #8
 80028d4:	40d8      	lsrs	r0, r3
    return 0;
}
 80028d6:	bd10      	pop	{r4, pc}
 80028d8:	20000218 	.word	0x20000218

080028dc <BMP_getPressure>:

float BMP_getPressure()
{
 80028dc:	b538      	push	{r3, r4, r5, lr}
    uint32_t up = BMP_getRawPressure();
 80028de:	f7ff ffed 	bl	80028bc <BMP_getRawPressure>
    uint8_t oss = (measureMode & 0xC0) >> 6;
 80028e2:	4a27      	ldr	r2, [pc, #156]	; (8002980 <BMP_getPressure+0xa4>)
    int32_t p;
    int32_t b6 = b5 - 4000;
 80028e4:	4b27      	ldr	r3, [pc, #156]	; (8002984 <BMP_getPressure+0xa8>)
    uint8_t oss = (measureMode & 0xC0) >> 6;
 80028e6:	7811      	ldrb	r1, [r2, #0]
    int32_t b6 = b5 - 4000;
 80028e8:	681b      	ldr	r3, [r3, #0]
    int32_t x1 = ((int32_t)b2 * ((b6 * b6) >> 12)) >> 11;
    int32_t x2 = ((int32_t)ac2 * b6) >> 11;
    int32_t x3 = x1 + x2;
    int32_t b3 = ((((int32_t)ac1 * 4 + x3) << oss) + 2) >> 2;
    x1 = ((int32_t)ac3 * b6) >> 13;
 80028ea:	4a27      	ldr	r2, [pc, #156]	; (8002988 <BMP_getPressure+0xac>)
    int32_t b6 = b5 - 4000;
 80028ec:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
    x1 = ((int32_t)ac3 * b6) >> 13;
 80028f0:	f9b2 2000 	ldrsh.w	r2, [r2]
    int32_t x1 = ((int32_t)b2 * ((b6 * b6) >> 12)) >> 11;
 80028f4:	fb03 f403 	mul.w	r4, r3, r3
    x1 = ((int32_t)ac3 * b6) >> 13;
 80028f8:	fb03 f502 	mul.w	r5, r3, r2
    x2 = ((int32_t)b1 * ((b6 * b6) >> 12)) >> 16;
 80028fc:	4a23      	ldr	r2, [pc, #140]	; (800298c <BMP_getPressure+0xb0>)
    int32_t x1 = ((int32_t)b2 * ((b6 * b6) >> 12)) >> 11;
 80028fe:	1324      	asrs	r4, r4, #12
    x2 = ((int32_t)b1 * ((b6 * b6) >> 12)) >> 16;
 8002900:	f9b2 2000 	ldrsh.w	r2, [r2]
    int32_t b3 = ((((int32_t)ac1 * 4 + x3) << oss) + 2) >> 2;
 8002904:	0989      	lsrs	r1, r1, #6
    x2 = ((int32_t)b1 * ((b6 * b6) >> 12)) >> 16;
 8002906:	4362      	muls	r2, r4
 8002908:	1412      	asrs	r2, r2, #16
    x3 = ((x1 + x2) + 2) >> 2;
 800290a:	eb02 3265 	add.w	r2, r2, r5, asr #13
    uint32_t b4 = ((uint32_t)ac4 * (uint32_t)(x3 + 32768)) >> 15;
 800290e:	4d20      	ldr	r5, [pc, #128]	; (8002990 <BMP_getPressure+0xb4>)
    x3 = ((x1 + x2) + 2) >> 2;
 8002910:	3202      	adds	r2, #2
    uint32_t b4 = ((uint32_t)ac4 * (uint32_t)(x3 + 32768)) >> 15;
 8002912:	882d      	ldrh	r5, [r5, #0]
    x3 = ((x1 + x2) + 2) >> 2;
 8002914:	1092      	asrs	r2, r2, #2
    uint32_t b4 = ((uint32_t)ac4 * (uint32_t)(x3 + 32768)) >> 15;
 8002916:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800291a:	436a      	muls	r2, r5
    int32_t x1 = ((int32_t)b2 * ((b6 * b6) >> 12)) >> 11;
 800291c:	4d1d      	ldr	r5, [pc, #116]	; (8002994 <BMP_getPressure+0xb8>)
    uint32_t b4 = ((uint32_t)ac4 * (uint32_t)(x3 + 32768)) >> 15;
 800291e:	0bd2      	lsrs	r2, r2, #15
    int32_t x1 = ((int32_t)b2 * ((b6 * b6) >> 12)) >> 11;
 8002920:	f9b5 5000 	ldrsh.w	r5, [r5]
 8002924:	436c      	muls	r4, r5
    int32_t x2 = ((int32_t)ac2 * b6) >> 11;
 8002926:	4d1c      	ldr	r5, [pc, #112]	; (8002998 <BMP_getPressure+0xbc>)
 8002928:	f9b5 5000 	ldrsh.w	r5, [r5]
 800292c:	436b      	muls	r3, r5
 800292e:	12db      	asrs	r3, r3, #11
    int32_t x3 = x1 + x2;
 8002930:	eb03 23e4 	add.w	r3, r3, r4, asr #11
    int32_t b3 = ((((int32_t)ac1 * 4 + x3) << oss) + 2) >> 2;
 8002934:	4c19      	ldr	r4, [pc, #100]	; (800299c <BMP_getPressure+0xc0>)
 8002936:	f9b4 4000 	ldrsh.w	r4, [r4]
 800293a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800293e:	408b      	lsls	r3, r1
 8002940:	3302      	adds	r3, #2
    uint32_t b7 = ((uint32_t)up - b3) * (uint32_t)(50000UL >> oss);
 8002942:	eba0 00a3 	sub.w	r0, r0, r3, asr #2
 8002946:	f24c 3350 	movw	r3, #50000	; 0xc350
 800294a:	40cb      	lsrs	r3, r1

    if (b7 < 0x80000000)
 800294c:	4358      	muls	r0, r3
    {
        p = (b7 << 1) / b4;
    }
    else
    {
        p = (b7 / b4) << 1;
 800294e:	bf4d      	iteet	mi
 8002950:	fbb0 f0f2 	udivmi	r0, r0, r2
        p = (b7 << 1) / b4;
 8002954:	0040      	lslpl	r0, r0, #1
 8002956:	fbb0 f0f2 	udivpl	r0, r0, r2
        p = (b7 / b4) << 1;
 800295a:	0040      	lslmi	r0, r0, #1
    }
    x1 = (p >> 8) * (p >> 8);
 800295c:	1203      	asrs	r3, r0, #8
 800295e:	fb03 f203 	mul.w	r2, r3, r3
    x1 = (x1 * 3038) >> 16;
 8002962:	f640 33de 	movw	r3, #3038	; 0xbde
 8002966:	4353      	muls	r3, r2
    x2 = (-7357 * p) >> 16;
 8002968:	4a0d      	ldr	r2, [pc, #52]	; (80029a0 <BMP_getPressure+0xc4>)
    x1 = (x1 * 3038) >> 16;
 800296a:	141b      	asrs	r3, r3, #16
    x2 = (-7357 * p) >> 16;
 800296c:	4342      	muls	r2, r0
    return p + ((x1 + x2 + (int32_t)3791) >> 4);
 800296e:	eb03 4322 	add.w	r3, r3, r2, asr #16
 8002972:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 8002976:	eb00 1023 	add.w	r0, r0, r3, asr #4
 800297a:	f7fe f98b 	bl	8000c94 <__aeabi_i2f>
}
 800297e:	bd38      	pop	{r3, r4, r5, pc}
 8002980:	20000218 	.word	0x20000218
 8002984:	2000020c 	.word	0x2000020c
 8002988:	20000200 	.word	0x20000200
 800298c:	20000208 	.word	0x20000208
 8002990:	20000202 	.word	0x20000202
 8002994:	2000020a 	.word	0x2000020a
 8002998:	200001fe 	.word	0x200001fe
 800299c:	200001fc 	.word	0x200001fc
 80029a0:	ffffe343 	.word	0xffffe343

080029a4 <I2C_Scan>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void I2C_Scan(I2C_HandleTypeDef *hi2c)
{
 80029a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029a6:	b097      	sub	sp, #92	; 0x5c
 80029a8:	4605      	mov	r5, r0
    char info[] = "Scanning I2C bus...\n";
 80029aa:	466a      	mov	r2, sp
 80029ac:	466e      	mov	r6, sp
 80029ae:	4b1f      	ldr	r3, [pc, #124]	; (8002a2c <I2C_Scan+0x88>)
 80029b0:	f103 0710 	add.w	r7, r3, #16
 80029b4:	4614      	mov	r4, r2
 80029b6:	6818      	ldr	r0, [r3, #0]
 80029b8:	6859      	ldr	r1, [r3, #4]
 80029ba:	3308      	adds	r3, #8
 80029bc:	c403      	stmia	r4!, {r0, r1}
 80029be:	42bb      	cmp	r3, r7
 80029c0:	4622      	mov	r2, r4
 80029c2:	d1f7      	bne.n	80029b4 <I2C_Scan+0x10>
 80029c4:	6818      	ldr	r0, [r3, #0]
 80029c6:	791b      	ldrb	r3, [r3, #4]
 80029c8:	6020      	str	r0, [r4, #0]
 80029ca:	7123      	strb	r3, [r4, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)info, strlen(info), 1000);
 80029cc:	4630      	mov	r0, r6
 80029ce:	f7fd fbbf 	bl	8000150 <strlen>
 80029d2:	4631      	mov	r1, r6
 80029d4:	b282      	uxth	r2, r0
 80029d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029da:	4815      	ldr	r0, [pc, #84]	; (8002a30 <I2C_Scan+0x8c>)
 80029dc:	f7ff fdb2 	bl	8002544 <HAL_UART_Transmit>
 80029e0:	2400      	movs	r4, #0
    for(uint16_t i = 0; i < 128; i++)
    {
        if(HAL_I2C_IsDeviceReady(hi2c, i << 1, 1, 100) == HAL_OK)
        {
        	char msg[64] = {0,};
            snprintf(msg, 64, "Device: 0x%02X\n", i);
 80029e2:	4e14      	ldr	r6, [pc, #80]	; (8002a34 <I2C_Scan+0x90>)
            HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 1000);
 80029e4:	4f12      	ldr	r7, [pc, #72]	; (8002a30 <I2C_Scan+0x8c>)
        if(HAL_I2C_IsDeviceReady(hi2c, i << 1, 1, 100) == HAL_OK)
 80029e6:	0061      	lsls	r1, r4, #1
 80029e8:	b289      	uxth	r1, r1
 80029ea:	2364      	movs	r3, #100	; 0x64
 80029ec:	2201      	movs	r2, #1
 80029ee:	4628      	mov	r0, r5
 80029f0:	f7ff f968 	bl	8001cc4 <HAL_I2C_IsDeviceReady>
 80029f4:	4601      	mov	r1, r0
 80029f6:	b998      	cbnz	r0, 8002a20 <I2C_Scan+0x7c>
        	char msg[64] = {0,};
 80029f8:	2240      	movs	r2, #64	; 0x40
 80029fa:	a806      	add	r0, sp, #24
 80029fc:	f000 fac2 	bl	8002f84 <memset>
            snprintf(msg, 64, "Device: 0x%02X\n", i);
 8002a00:	4623      	mov	r3, r4
 8002a02:	4632      	mov	r2, r6
 8002a04:	2140      	movs	r1, #64	; 0x40
 8002a06:	a806      	add	r0, sp, #24
 8002a08:	f000 ff26 	bl	8003858 <sniprintf>
            HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 1000);
 8002a0c:	a806      	add	r0, sp, #24
 8002a0e:	f7fd fb9f 	bl	8000150 <strlen>
 8002a12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a16:	b282      	uxth	r2, r0
 8002a18:	a906      	add	r1, sp, #24
 8002a1a:	4638      	mov	r0, r7
 8002a1c:	f7ff fd92 	bl	8002544 <HAL_UART_Transmit>
 8002a20:	3401      	adds	r4, #1
    for(uint16_t i = 0; i < 128; i++)
 8002a22:	2c80      	cmp	r4, #128	; 0x80
 8002a24:	d1df      	bne.n	80029e6 <I2C_Scan+0x42>
        }
    }
}
 8002a26:	b017      	add	sp, #92	; 0x5c
 8002a28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	080051e5 	.word	0x080051e5
 8002a30:	20000280 	.word	0x20000280
 8002a34:	080051d5 	.word	0x080051d5

08002a38 <I2C_Error>:

void I2C_Error(char *er, uint32_t status) // ошибки i2c
{
 8002a38:	b530      	push	{r4, r5, lr}
 8002a3a:	460d      	mov	r5, r1
 8002a3c:	b091      	sub	sp, #68	; 0x44
 8002a3e:	4604      	mov	r4, r0
	char str[64] = {0,};
 8002a40:	2240      	movs	r2, #64	; 0x40
 8002a42:	2100      	movs	r1, #0
 8002a44:	4668      	mov	r0, sp
 8002a46:	f000 fa9d 	bl	8002f84 <memset>

	switch(status)
 8002a4a:	2d02      	cmp	r5, #2
 8002a4c:	d01f      	beq.n	8002a8e <I2C_Error+0x56>
 8002a4e:	2d03      	cmp	r5, #3
 8002a50:	d020      	beq.n	8002a94 <I2C_Error+0x5c>
 8002a52:	2d01      	cmp	r5, #1
 8002a54:	d10f      	bne.n	8002a76 <I2C_Error+0x3e>
	{
		case HAL_ERROR:
			snprintf(str, 64, "%s - HAL_ERROR\n", er);
 8002a56:	4623      	mov	r3, r4
 8002a58:	4a48      	ldr	r2, [pc, #288]	; (8002b7c <I2C_Error+0x144>)
			snprintf(str, 64, "%s - HAL_BUSY\n", er);
			HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
		break;

		case HAL_TIMEOUT:
			snprintf(str, 64, "%s - HAL_TIMEOUT\n", er);
 8002a5a:	2140      	movs	r1, #64	; 0x40
 8002a5c:	4668      	mov	r0, sp
 8002a5e:	f000 fefb 	bl	8003858 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 8002a62:	4668      	mov	r0, sp
 8002a64:	f7fd fb74 	bl	8000150 <strlen>
 8002a68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a6c:	b282      	uxth	r2, r0
 8002a6e:	4669      	mov	r1, sp
 8002a70:	4843      	ldr	r0, [pc, #268]	; (8002b80 <I2C_Error+0x148>)
 8002a72:	f7ff fd67 	bl	8002544 <HAL_UART_Transmit>

		default:
		break;
	}

	uint32_t err = HAL_I2C_GetError(&hi2c1);
 8002a76:	4843      	ldr	r0, [pc, #268]	; (8002b84 <I2C_Error+0x14c>)
 8002a78:	f7ff f9d4 	bl	8001e24 <HAL_I2C_GetError>

	switch(err)
 8002a7c:	2804      	cmp	r0, #4
 8002a7e:	d040      	beq.n	8002b02 <I2C_Error+0xca>
 8002a80:	d80b      	bhi.n	8002a9a <I2C_Error+0x62>
 8002a82:	2801      	cmp	r0, #1
 8002a84:	d01f      	beq.n	8002ac6 <I2C_Error+0x8e>
 8002a86:	d30f      	bcc.n	8002aa8 <I2C_Error+0x70>
 8002a88:	2802      	cmp	r0, #2
 8002a8a:	d02b      	beq.n	8002ae4 <I2C_Error+0xac>
 8002a8c:	e7fe      	b.n	8002a8c <I2C_Error+0x54>
			snprintf(str, 64, "%s - HAL_BUSY\n", er);
 8002a8e:	4623      	mov	r3, r4
 8002a90:	4a3d      	ldr	r2, [pc, #244]	; (8002b88 <I2C_Error+0x150>)
 8002a92:	e7e2      	b.n	8002a5a <I2C_Error+0x22>
			snprintf(str, 64, "%s - HAL_TIMEOUT\n", er);
 8002a94:	4623      	mov	r3, r4
 8002a96:	4a3d      	ldr	r2, [pc, #244]	; (8002b8c <I2C_Error+0x154>)
 8002a98:	e7df      	b.n	8002a5a <I2C_Error+0x22>
	switch(err)
 8002a9a:	2810      	cmp	r0, #16
 8002a9c:	d04f      	beq.n	8002b3e <I2C_Error+0x106>
 8002a9e:	2820      	cmp	r0, #32
 8002aa0:	d05c      	beq.n	8002b5c <I2C_Error+0x124>
 8002aa2:	2808      	cmp	r0, #8
 8002aa4:	d03c      	beq.n	8002b20 <I2C_Error+0xe8>
 8002aa6:	e7f1      	b.n	8002a8c <I2C_Error+0x54>
	{
		case HAL_I2C_ERROR_NONE:
			snprintf(str, 64, "HAL_I2C_ERROR_NONE\n");
 8002aa8:	4939      	ldr	r1, [pc, #228]	; (8002b90 <I2C_Error+0x158>)
 8002aaa:	4668      	mov	r0, sp
 8002aac:	f000 ff08 	bl	80038c0 <strcpy>
			HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 8002ab0:	4668      	mov	r0, sp
 8002ab2:	f7fd fb4d 	bl	8000150 <strlen>
 8002ab6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002aba:	b282      	uxth	r2, r0
 8002abc:	4669      	mov	r1, sp
 8002abe:	4830      	ldr	r0, [pc, #192]	; (8002b80 <I2C_Error+0x148>)
 8002ac0:	f7ff fd40 	bl	8002544 <HAL_UART_Transmit>
		break;
 8002ac4:	e7e2      	b.n	8002a8c <I2C_Error+0x54>

		case HAL_I2C_ERROR_BERR:
			snprintf(str, 64, "HAL_I2C_ERROR_BERR\n");
 8002ac6:	4933      	ldr	r1, [pc, #204]	; (8002b94 <I2C_Error+0x15c>)
 8002ac8:	4668      	mov	r0, sp
 8002aca:	f000 fef9 	bl	80038c0 <strcpy>
			HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 8002ace:	4668      	mov	r0, sp
 8002ad0:	f7fd fb3e 	bl	8000150 <strlen>
 8002ad4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ad8:	b282      	uxth	r2, r0
 8002ada:	4669      	mov	r1, sp
 8002adc:	4828      	ldr	r0, [pc, #160]	; (8002b80 <I2C_Error+0x148>)
 8002ade:	f7ff fd31 	bl	8002544 <HAL_UART_Transmit>
		break;
 8002ae2:	e7d3      	b.n	8002a8c <I2C_Error+0x54>

		case HAL_I2C_ERROR_ARLO:
			snprintf(str, 64, "HAL_I2C_ERROR_ARLO\n");
 8002ae4:	492c      	ldr	r1, [pc, #176]	; (8002b98 <I2C_Error+0x160>)
 8002ae6:	4668      	mov	r0, sp
 8002ae8:	f000 feea 	bl	80038c0 <strcpy>
			HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 8002aec:	4668      	mov	r0, sp
 8002aee:	f7fd fb2f 	bl	8000150 <strlen>
 8002af2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002af6:	b282      	uxth	r2, r0
 8002af8:	4669      	mov	r1, sp
 8002afa:	4821      	ldr	r0, [pc, #132]	; (8002b80 <I2C_Error+0x148>)
 8002afc:	f7ff fd22 	bl	8002544 <HAL_UART_Transmit>
		break;
 8002b00:	e7c4      	b.n	8002a8c <I2C_Error+0x54>

		case HAL_I2C_ERROR_AF:
			snprintf(str, 64, "HAL_I2C_ERROR_AF\n");
 8002b02:	4926      	ldr	r1, [pc, #152]	; (8002b9c <I2C_Error+0x164>)
 8002b04:	4668      	mov	r0, sp
 8002b06:	f000 fedb 	bl	80038c0 <strcpy>
			HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 8002b0a:	4668      	mov	r0, sp
 8002b0c:	f7fd fb20 	bl	8000150 <strlen>
 8002b10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b14:	b282      	uxth	r2, r0
 8002b16:	4669      	mov	r1, sp
 8002b18:	4819      	ldr	r0, [pc, #100]	; (8002b80 <I2C_Error+0x148>)
 8002b1a:	f7ff fd13 	bl	8002544 <HAL_UART_Transmit>
		break;
 8002b1e:	e7b5      	b.n	8002a8c <I2C_Error+0x54>

		case HAL_I2C_ERROR_OVR:
			snprintf(str, 64, "HAL_I2C_ERROR_OVR\n");
 8002b20:	491f      	ldr	r1, [pc, #124]	; (8002ba0 <I2C_Error+0x168>)
 8002b22:	4668      	mov	r0, sp
 8002b24:	f000 fecc 	bl	80038c0 <strcpy>
			HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 8002b28:	4668      	mov	r0, sp
 8002b2a:	f7fd fb11 	bl	8000150 <strlen>
 8002b2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b32:	b282      	uxth	r2, r0
 8002b34:	4669      	mov	r1, sp
 8002b36:	4812      	ldr	r0, [pc, #72]	; (8002b80 <I2C_Error+0x148>)
 8002b38:	f7ff fd04 	bl	8002544 <HAL_UART_Transmit>
		break;
 8002b3c:	e7a6      	b.n	8002a8c <I2C_Error+0x54>

		case HAL_I2C_ERROR_DMA:
			snprintf(str, 64, "HAL_I2C_ERROR_DMA\n");
 8002b3e:	4919      	ldr	r1, [pc, #100]	; (8002ba4 <I2C_Error+0x16c>)
 8002b40:	4668      	mov	r0, sp
 8002b42:	f000 febd 	bl	80038c0 <strcpy>
			HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 8002b46:	4668      	mov	r0, sp
 8002b48:	f7fd fb02 	bl	8000150 <strlen>
 8002b4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b50:	b282      	uxth	r2, r0
 8002b52:	4669      	mov	r1, sp
 8002b54:	480a      	ldr	r0, [pc, #40]	; (8002b80 <I2C_Error+0x148>)
 8002b56:	f7ff fcf5 	bl	8002544 <HAL_UART_Transmit>
		break;
 8002b5a:	e797      	b.n	8002a8c <I2C_Error+0x54>

		case HAL_I2C_ERROR_TIMEOUT:
			snprintf(str, 64, "HAL_I2C_ERROR_TIMEOUT\n");
 8002b5c:	4912      	ldr	r1, [pc, #72]	; (8002ba8 <I2C_Error+0x170>)
 8002b5e:	4668      	mov	r0, sp
 8002b60:	f000 feae 	bl	80038c0 <strcpy>
			HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 8002b64:	4668      	mov	r0, sp
 8002b66:	f7fd faf3 	bl	8000150 <strlen>
 8002b6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b6e:	b282      	uxth	r2, r0
 8002b70:	4669      	mov	r1, sp
 8002b72:	4803      	ldr	r0, [pc, #12]	; (8002b80 <I2C_Error+0x148>)
 8002b74:	f7ff fce6 	bl	8002544 <HAL_UART_Transmit>
		break;
 8002b78:	e788      	b.n	8002a8c <I2C_Error+0x54>
 8002b7a:	bf00      	nop
 8002b7c:	08005119 	.word	0x08005119
 8002b80:	20000280 	.word	0x20000280
 8002b84:	2000022c 	.word	0x2000022c
 8002b88:	08005129 	.word	0x08005129
 8002b8c:	08005138 	.word	0x08005138
 8002b90:	0800514a 	.word	0x0800514a
 8002b94:	0800515e 	.word	0x0800515e
 8002b98:	08005172 	.word	0x08005172
 8002b9c:	08005186 	.word	0x08005186
 8002ba0:	08005198 	.word	0x08005198
 8002ba4:	080051ab 	.word	0x080051ab
 8002ba8:	080051be 	.word	0x080051be

08002bac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002bac:	b510      	push	{r4, lr}
 8002bae:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002bb0:	2228      	movs	r2, #40	; 0x28
 8002bb2:	2100      	movs	r1, #0
 8002bb4:	a806      	add	r0, sp, #24
 8002bb6:	f000 f9e5 	bl	8002f84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002bba:	2100      	movs	r1, #0
 8002bbc:	2214      	movs	r2, #20
 8002bbe:	a801      	add	r0, sp, #4
 8002bc0:	f000 f9e0 	bl	8002f84 <memset>

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002bc4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002bc8:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002bca:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002bcc:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002bce:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002bd0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002bd4:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002bd6:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002bd8:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002bda:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002bdc:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002bde:	f7ff f923 	bl	8001e28 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002be2:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002be4:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002be8:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002bea:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002bec:	4621      	mov	r1, r4
 8002bee:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002bf0:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002bf2:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002bf4:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002bf6:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002bf8:	f7ff fade 	bl	80021b8 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8002bfc:	b010      	add	sp, #64	; 0x40
 8002bfe:	bd10      	pop	{r4, pc}

08002c00 <main>:
{
 8002c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c04:	b098      	sub	sp, #96	; 0x60
  HAL_Init();
 8002c06:	f7fe fa2d 	bl	8001064 <HAL_Init>
  SystemClock_Config();
 8002c0a:	f7ff ffcf 	bl	8002bac <SystemClock_Config>
  */
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c0e:	4b50      	ldr	r3, [pc, #320]	; (8002d50 <main+0x150>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c10:	2600      	movs	r6, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c12:	699a      	ldr	r2, [r3, #24]
  huart1.Instance = USART1;
 8002c14:	4c4f      	ldr	r4, [pc, #316]	; (8002d54 <main+0x154>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c16:	f042 0220 	orr.w	r2, r2, #32
 8002c1a:	619a      	str	r2, [r3, #24]
 8002c1c:	699a      	ldr	r2, [r3, #24]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c1e:	4620      	mov	r0, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c20:	f002 0220 	and.w	r2, r2, #32
 8002c24:	9205      	str	r2, [sp, #20]
 8002c26:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c28:	699a      	ldr	r2, [r3, #24]
  hi2c1.Instance = I2C1;
 8002c2a:	4d4b      	ldr	r5, [pc, #300]	; (8002d58 <main+0x158>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c2c:	f042 0204 	orr.w	r2, r2, #4
 8002c30:	619a      	str	r2, [r3, #24]
 8002c32:	699a      	ldr	r2, [r3, #24]
 8002c34:	f002 0204 	and.w	r2, r2, #4
 8002c38:	9206      	str	r2, [sp, #24]
 8002c3a:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c3c:	699a      	ldr	r2, [r3, #24]
 8002c3e:	f042 0208 	orr.w	r2, r2, #8
 8002c42:	619a      	str	r2, [r3, #24]
 8002c44:	699b      	ldr	r3, [r3, #24]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c46:	4a45      	ldr	r2, [pc, #276]	; (8002d5c <main+0x15c>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c48:	f003 0308 	and.w	r3, r3, #8
 8002c4c:	9307      	str	r3, [sp, #28]
 8002c4e:	9b07      	ldr	r3, [sp, #28]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c50:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002c54:	e884 004c 	stmia.w	r4, {r2, r3, r6}
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c58:	230c      	movs	r3, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002c5a:	60e6      	str	r6, [r4, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002c5c:	6126      	str	r6, [r4, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c5e:	6163      	str	r3, [r4, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c60:	61a6      	str	r6, [r4, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c62:	61e6      	str	r6, [r4, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c64:	f7ff fc40 	bl	80024e8 <HAL_UART_Init>
  hi2c1.Init.ClockSpeed = 100000;
 8002c68:	493d      	ldr	r1, [pc, #244]	; (8002d60 <main+0x160>)
 8002c6a:	4b3e      	ldr	r3, [pc, #248]	; (8002d64 <main+0x164>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002c6c:	4628      	mov	r0, r5
  hi2c1.Init.ClockSpeed = 100000;
 8002c6e:	e885 000a 	stmia.w	r5, {r1, r3}
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c72:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002c76:	60ae      	str	r6, [r5, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c78:	612b      	str	r3, [r5, #16]
  hi2c1.Init.OwnAddress1 = 0;
 8002c7a:	60ee      	str	r6, [r5, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c7c:	616e      	str	r6, [r5, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002c7e:	61ae      	str	r6, [r5, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002c80:	61ee      	str	r6, [r5, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002c82:	622e      	str	r6, [r5, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002c84:	f7fe fcb0 	bl	80015e8 <HAL_I2C_Init>
	  float p = BMP_getPressure() * 0.00750062;
 8002c88:	a72f      	add	r7, pc, #188	; (adr r7, 8002d48 <main+0x148>)
 8002c8a:	e9d7 6700 	ldrd	r6, r7, [r7]
  I2C_Scan(&hi2c1); // НОМЕР I2C
 8002c8e:	4628      	mov	r0, r5
 8002c90:	f7ff fe88 	bl	80029a4 <I2C_Scan>
  BMP_i2c_init(&hi2c1); // НОМЕР I2C
 8002c94:	4628      	mov	r0, r5
 8002c96:	f7ff fcf5 	bl	8002684 <BMP_i2c_init>
	  char trans_str[64] = {0,};
 8002c9a:	2240      	movs	r2, #64	; 0x40
 8002c9c:	2100      	movs	r1, #0
 8002c9e:	a808      	add	r0, sp, #32
 8002ca0:	f000 f970 	bl	8002f84 <memset>
	  BMP_setControl(BMP_MODE_TEMPERATURE);
 8002ca4:	202e      	movs	r0, #46	; 0x2e
 8002ca6:	f7ff fd63 	bl	8002770 <BMP_setControl>
	  HAL_Delay(BMP_getMeasureDelayMilliseconds(BMP_MODE_TEMPERATURE));
 8002caa:	202e      	movs	r0, #46	; 0x2e
 8002cac:	f7ff fdb8 	bl	8002820 <BMP_getMeasureDelayMilliseconds>
 8002cb0:	f7fe f9fc 	bl	80010ac <HAL_Delay>
	  float t = BMP_getTemperatureC();
 8002cb4:	f7ff fdd6 	bl	8002864 <BMP_getTemperatureC>
 8002cb8:	4605      	mov	r5, r0
	  BMP_setControl(BMP_MODE_PRESSURE_3);
 8002cba:	20f4      	movs	r0, #244	; 0xf4
 8002cbc:	f7ff fd58 	bl	8002770 <BMP_setControl>
	  HAL_Delay(BMP_getMeasureDelayMilliseconds(BMP_MODE_PRESSURE_3));
 8002cc0:	20f4      	movs	r0, #244	; 0xf4
 8002cc2:	f7ff fdad 	bl	8002820 <BMP_getMeasureDelayMilliseconds>
 8002cc6:	f7fe f9f1 	bl	80010ac <HAL_Delay>
	  float p = BMP_getPressure() * 0.00750062;
 8002cca:	f7ff fe07 	bl	80028dc <BMP_getPressure>
 8002cce:	f7fd fbab 	bl	8000428 <__aeabi_f2d>
 8002cd2:	463b      	mov	r3, r7
 8002cd4:	4632      	mov	r2, r6
 8002cd6:	f7fd fbfb 	bl	80004d0 <__aeabi_dmul>
 8002cda:	f7fd fed1 	bl	8000a80 <__aeabi_d2f>
 8002cde:	4680      	mov	r8, r0
	  snprintf(trans_str, 64, "Temp: %.1f  Pressure: %.2f\n", t , p);
 8002ce0:	f7fd fba2 	bl	8000428 <__aeabi_f2d>
 8002ce4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002ce8:	4628      	mov	r0, r5
 8002cea:	f7fd fb9d 	bl	8000428 <__aeabi_f2d>
 8002cee:	4a1e      	ldr	r2, [pc, #120]	; (8002d68 <main+0x168>)
 8002cf0:	e9cd 0100 	strd	r0, r1, [sp]
 8002cf4:	2140      	movs	r1, #64	; 0x40
 8002cf6:	a808      	add	r0, sp, #32
 8002cf8:	f000 fdae 	bl	8003858 <sniprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*)trans_str, strlen(trans_str), 1000);
 8002cfc:	a808      	add	r0, sp, #32
 8002cfe:	f7fd fa27 	bl	8000150 <strlen>
 8002d02:	a908      	add	r1, sp, #32
 8002d04:	b282      	uxth	r2, r0
 8002d06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d0a:	4620      	mov	r0, r4
 8002d0c:	f7ff fc1a 	bl	8002544 <HAL_UART_Transmit>
	  uint32_t t_dec = t;
 8002d10:	4628      	mov	r0, r5
 8002d12:	f7fe f963 	bl	8000fdc <__aeabi_f2uiz>
 8002d16:	4605      	mov	r5, r0
	  uint32_t p_dec = p;
 8002d18:	4640      	mov	r0, r8
 8002d1a:	f7fe f95f 	bl	8000fdc <__aeabi_f2uiz>
	  snprintf(trans_str, 64, "t_dec: %lu  p_dec: %lu\n", t_dec , p_dec);
 8002d1e:	462b      	mov	r3, r5
 8002d20:	9000      	str	r0, [sp, #0]
 8002d22:	4a12      	ldr	r2, [pc, #72]	; (8002d6c <main+0x16c>)
 8002d24:	2140      	movs	r1, #64	; 0x40
 8002d26:	a808      	add	r0, sp, #32
 8002d28:	f000 fd96 	bl	8003858 <sniprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*)trans_str, strlen(trans_str), 1000);
 8002d2c:	a808      	add	r0, sp, #32
 8002d2e:	f7fd fa0f 	bl	8000150 <strlen>
 8002d32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d36:	b282      	uxth	r2, r0
 8002d38:	a908      	add	r1, sp, #32
 8002d3a:	4620      	mov	r0, r4
 8002d3c:	f7ff fc02 	bl	8002544 <HAL_UART_Transmit>
	  HAL_Delay(200);
 8002d40:	20c8      	movs	r0, #200	; 0xc8
 8002d42:	f7fe f9b3 	bl	80010ac <HAL_Delay>
 8002d46:	e7a8      	b.n	8002c9a <main+0x9a>
 8002d48:	599877b1 	.word	0x599877b1
 8002d4c:	3f7eb8f8 	.word	0x3f7eb8f8
 8002d50:	40021000 	.word	0x40021000
 8002d54:	20000280 	.word	0x20000280
 8002d58:	2000022c 	.word	0x2000022c
 8002d5c:	40013800 	.word	0x40013800
 8002d60:	40005400 	.word	0x40005400
 8002d64:	000186a0 	.word	0x000186a0
 8002d68:	080051fa 	.word	0x080051fa
 8002d6c:	08005216 	.word	0x08005216

08002d70 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002d70:	4b0e      	ldr	r3, [pc, #56]	; (8002dac <HAL_MspInit+0x3c>)
{
 8002d72:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002d74:	699a      	ldr	r2, [r3, #24]
 8002d76:	f042 0201 	orr.w	r2, r2, #1
 8002d7a:	619a      	str	r2, [r3, #24]
 8002d7c:	699a      	ldr	r2, [r3, #24]
 8002d7e:	f002 0201 	and.w	r2, r2, #1
 8002d82:	9200      	str	r2, [sp, #0]
 8002d84:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d86:	69da      	ldr	r2, [r3, #28]
 8002d88:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002d8c:	61da      	str	r2, [r3, #28]
 8002d8e:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002d90:	4a07      	ldr	r2, [pc, #28]	; (8002db0 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d96:	9301      	str	r3, [sp, #4]
 8002d98:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002d9a:	6853      	ldr	r3, [r2, #4]
 8002d9c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002da0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002da4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002da6:	b002      	add	sp, #8
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	40021000 	.word	0x40021000
 8002db0:	40010000 	.word	0x40010000

08002db4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002db4:	b510      	push	{r4, lr}
 8002db6:	4604      	mov	r4, r0
 8002db8:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dba:	2210      	movs	r2, #16
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	a802      	add	r0, sp, #8
 8002dc0:	f000 f8e0 	bl	8002f84 <memset>
  if(hi2c->Instance==I2C1)
 8002dc4:	6822      	ldr	r2, [r4, #0]
 8002dc6:	4b11      	ldr	r3, [pc, #68]	; (8002e0c <HAL_I2C_MspInit+0x58>)
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d11c      	bne.n	8002e06 <HAL_I2C_MspInit+0x52>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dcc:	4c10      	ldr	r4, [pc, #64]	; (8002e10 <HAL_I2C_MspInit+0x5c>)
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dce:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dd0:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dd2:	4810      	ldr	r0, [pc, #64]	; (8002e14 <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dd4:	f043 0308 	orr.w	r3, r3, #8
 8002dd8:	61a3      	str	r3, [r4, #24]
 8002dda:	69a3      	ldr	r3, [r4, #24]
 8002ddc:	f003 0308 	and.w	r3, r3, #8
 8002de0:	9300      	str	r3, [sp, #0]
 8002de2:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002de4:	23c0      	movs	r3, #192	; 0xc0
 8002de6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002de8:	2312      	movs	r3, #18
 8002dea:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002dec:	2303      	movs	r3, #3
 8002dee:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002df0:	f7fe f9ca 	bl	8001188 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002df4:	69e3      	ldr	r3, [r4, #28]
 8002df6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002dfa:	61e3      	str	r3, [r4, #28]
 8002dfc:	69e3      	ldr	r3, [r4, #28]
 8002dfe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e02:	9301      	str	r3, [sp, #4]
 8002e04:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002e06:	b006      	add	sp, #24
 8002e08:	bd10      	pop	{r4, pc}
 8002e0a:	bf00      	nop
 8002e0c:	40005400 	.word	0x40005400
 8002e10:	40021000 	.word	0x40021000
 8002e14:	40010c00 	.word	0x40010c00

08002e18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e18:	b510      	push	{r4, lr}
 8002e1a:	4604      	mov	r4, r0
 8002e1c:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e1e:	2210      	movs	r2, #16
 8002e20:	2100      	movs	r1, #0
 8002e22:	a802      	add	r0, sp, #8
 8002e24:	f000 f8ae 	bl	8002f84 <memset>
  if(huart->Instance==USART1)
 8002e28:	6822      	ldr	r2, [r4, #0]
 8002e2a:	4b17      	ldr	r3, [pc, #92]	; (8002e88 <HAL_UART_MspInit+0x70>)
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d128      	bne.n	8002e82 <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e30:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8002e34:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e36:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e38:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e3c:	619a      	str	r2, [r3, #24]
 8002e3e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e40:	4812      	ldr	r0, [pc, #72]	; (8002e8c <HAL_UART_MspInit+0x74>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e42:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002e46:	9200      	str	r2, [sp, #0]
 8002e48:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e4a:	699a      	ldr	r2, [r3, #24]
 8002e4c:	f042 0204 	orr.w	r2, r2, #4
 8002e50:	619a      	str	r2, [r3, #24]
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	f003 0304 	and.w	r3, r3, #4
 8002e58:	9301      	str	r3, [sp, #4]
 8002e5a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002e5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e60:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e62:	2302      	movs	r3, #2
 8002e64:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e66:	2303      	movs	r3, #3
 8002e68:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e6a:	f7fe f98d 	bl	8001188 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002e6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e72:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e74:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e76:	a902      	add	r1, sp, #8
 8002e78:	4804      	ldr	r0, [pc, #16]	; (8002e8c <HAL_UART_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e7a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e7c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e7e:	f7fe f983 	bl	8001188 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002e82:	b006      	add	sp, #24
 8002e84:	bd10      	pop	{r4, pc}
 8002e86:	bf00      	nop
 8002e88:	40013800 	.word	0x40013800
 8002e8c:	40010800 	.word	0x40010800

08002e90 <NMI_Handler>:
 8002e90:	4770      	bx	lr

08002e92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e92:	e7fe      	b.n	8002e92 <HardFault_Handler>

08002e94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e94:	e7fe      	b.n	8002e94 <MemManage_Handler>

08002e96 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e96:	e7fe      	b.n	8002e96 <BusFault_Handler>

08002e98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e98:	e7fe      	b.n	8002e98 <UsageFault_Handler>

08002e9a <SVC_Handler>:
 8002e9a:	4770      	bx	lr

08002e9c <DebugMon_Handler>:
 8002e9c:	4770      	bx	lr

08002e9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e9e:	4770      	bx	lr

08002ea0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ea0:	f7fe b8f2 	b.w	8001088 <HAL_IncTick>

08002ea4 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002ea4:	4b0f      	ldr	r3, [pc, #60]	; (8002ee4 <SystemInit+0x40>)
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	f042 0201 	orr.w	r2, r2, #1
 8002eac:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002eae:	6859      	ldr	r1, [r3, #4]
 8002eb0:	4a0d      	ldr	r2, [pc, #52]	; (8002ee8 <SystemInit+0x44>)
 8002eb2:	400a      	ands	r2, r1
 8002eb4:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002ebc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002ec0:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002ec8:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002eca:	685a      	ldr	r2, [r3, #4]
 8002ecc:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002ed0:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002ed2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002ed6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002ed8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002edc:	4b03      	ldr	r3, [pc, #12]	; (8002eec <SystemInit+0x48>)
 8002ede:	609a      	str	r2, [r3, #8]
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	40021000 	.word	0x40021000
 8002ee8:	f8ff0000 	.word	0xf8ff0000
 8002eec:	e000ed00 	.word	0xe000ed00

08002ef0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002ef0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002ef2:	e003      	b.n	8002efc <LoopCopyDataInit>

08002ef4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002ef4:	4b0b      	ldr	r3, [pc, #44]	; (8002f24 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002ef6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002ef8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002efa:	3104      	adds	r1, #4

08002efc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002efc:	480a      	ldr	r0, [pc, #40]	; (8002f28 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002efe:	4b0b      	ldr	r3, [pc, #44]	; (8002f2c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002f00:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002f02:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002f04:	d3f6      	bcc.n	8002ef4 <CopyDataInit>
  ldr r2, =_sbss
 8002f06:	4a0a      	ldr	r2, [pc, #40]	; (8002f30 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002f08:	e002      	b.n	8002f10 <LoopFillZerobss>

08002f0a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002f0a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002f0c:	f842 3b04 	str.w	r3, [r2], #4

08002f10 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002f10:	4b08      	ldr	r3, [pc, #32]	; (8002f34 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002f12:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002f14:	d3f9      	bcc.n	8002f0a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002f16:	f7ff ffc5 	bl	8002ea4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f1a:	f000 f80f 	bl	8002f3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002f1e:	f7ff fe6f 	bl	8002c00 <main>
  bx lr
 8002f22:	4770      	bx	lr
  ldr r3, =_sidata
 8002f24:	080054a8 	.word	0x080054a8
  ldr r0, =_sdata
 8002f28:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002f2c:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 8002f30:	200001dc 	.word	0x200001dc
  ldr r3, = _ebss
 8002f34:	200002c4 	.word	0x200002c4

08002f38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002f38:	e7fe      	b.n	8002f38 <ADC1_2_IRQHandler>
	...

08002f3c <__libc_init_array>:
 8002f3c:	b570      	push	{r4, r5, r6, lr}
 8002f3e:	2500      	movs	r5, #0
 8002f40:	4e0c      	ldr	r6, [pc, #48]	; (8002f74 <__libc_init_array+0x38>)
 8002f42:	4c0d      	ldr	r4, [pc, #52]	; (8002f78 <__libc_init_array+0x3c>)
 8002f44:	1ba4      	subs	r4, r4, r6
 8002f46:	10a4      	asrs	r4, r4, #2
 8002f48:	42a5      	cmp	r5, r4
 8002f4a:	d109      	bne.n	8002f60 <__libc_init_array+0x24>
 8002f4c:	f002 f8b0 	bl	80050b0 <_init>
 8002f50:	2500      	movs	r5, #0
 8002f52:	4e0a      	ldr	r6, [pc, #40]	; (8002f7c <__libc_init_array+0x40>)
 8002f54:	4c0a      	ldr	r4, [pc, #40]	; (8002f80 <__libc_init_array+0x44>)
 8002f56:	1ba4      	subs	r4, r4, r6
 8002f58:	10a4      	asrs	r4, r4, #2
 8002f5a:	42a5      	cmp	r5, r4
 8002f5c:	d105      	bne.n	8002f6a <__libc_init_array+0x2e>
 8002f5e:	bd70      	pop	{r4, r5, r6, pc}
 8002f60:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f64:	4798      	blx	r3
 8002f66:	3501      	adds	r5, #1
 8002f68:	e7ee      	b.n	8002f48 <__libc_init_array+0xc>
 8002f6a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f6e:	4798      	blx	r3
 8002f70:	3501      	adds	r5, #1
 8002f72:	e7f2      	b.n	8002f5a <__libc_init_array+0x1e>
 8002f74:	080054a0 	.word	0x080054a0
 8002f78:	080054a0 	.word	0x080054a0
 8002f7c:	080054a0 	.word	0x080054a0
 8002f80:	080054a4 	.word	0x080054a4

08002f84 <memset>:
 8002f84:	4603      	mov	r3, r0
 8002f86:	4402      	add	r2, r0
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d100      	bne.n	8002f8e <memset+0xa>
 8002f8c:	4770      	bx	lr
 8002f8e:	f803 1b01 	strb.w	r1, [r3], #1
 8002f92:	e7f9      	b.n	8002f88 <memset+0x4>

08002f94 <__cvt>:
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f9a:	461e      	mov	r6, r3
 8002f9c:	bfbb      	ittet	lt
 8002f9e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8002fa2:	461e      	movlt	r6, r3
 8002fa4:	2300      	movge	r3, #0
 8002fa6:	232d      	movlt	r3, #45	; 0x2d
 8002fa8:	b088      	sub	sp, #32
 8002faa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8002fac:	9912      	ldr	r1, [sp, #72]	; 0x48
 8002fae:	f027 0720 	bic.w	r7, r7, #32
 8002fb2:	2f46      	cmp	r7, #70	; 0x46
 8002fb4:	4614      	mov	r4, r2
 8002fb6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8002fb8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8002fbc:	700b      	strb	r3, [r1, #0]
 8002fbe:	d004      	beq.n	8002fca <__cvt+0x36>
 8002fc0:	2f45      	cmp	r7, #69	; 0x45
 8002fc2:	d100      	bne.n	8002fc6 <__cvt+0x32>
 8002fc4:	3501      	adds	r5, #1
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	e000      	b.n	8002fcc <__cvt+0x38>
 8002fca:	2303      	movs	r3, #3
 8002fcc:	aa07      	add	r2, sp, #28
 8002fce:	9204      	str	r2, [sp, #16]
 8002fd0:	aa06      	add	r2, sp, #24
 8002fd2:	9203      	str	r2, [sp, #12]
 8002fd4:	e88d 0428 	stmia.w	sp, {r3, r5, sl}
 8002fd8:	4622      	mov	r2, r4
 8002fda:	4633      	mov	r3, r6
 8002fdc:	f000 fd04 	bl	80039e8 <_dtoa_r>
 8002fe0:	2f47      	cmp	r7, #71	; 0x47
 8002fe2:	4680      	mov	r8, r0
 8002fe4:	d102      	bne.n	8002fec <__cvt+0x58>
 8002fe6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002fe8:	07db      	lsls	r3, r3, #31
 8002fea:	d526      	bpl.n	800303a <__cvt+0xa6>
 8002fec:	2f46      	cmp	r7, #70	; 0x46
 8002fee:	eb08 0905 	add.w	r9, r8, r5
 8002ff2:	d111      	bne.n	8003018 <__cvt+0x84>
 8002ff4:	f898 3000 	ldrb.w	r3, [r8]
 8002ff8:	2b30      	cmp	r3, #48	; 0x30
 8002ffa:	d10a      	bne.n	8003012 <__cvt+0x7e>
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	2300      	movs	r3, #0
 8003000:	4620      	mov	r0, r4
 8003002:	4631      	mov	r1, r6
 8003004:	f7fd fccc 	bl	80009a0 <__aeabi_dcmpeq>
 8003008:	b918      	cbnz	r0, 8003012 <__cvt+0x7e>
 800300a:	f1c5 0501 	rsb	r5, r5, #1
 800300e:	f8ca 5000 	str.w	r5, [sl]
 8003012:	f8da 3000 	ldr.w	r3, [sl]
 8003016:	4499      	add	r9, r3
 8003018:	2200      	movs	r2, #0
 800301a:	2300      	movs	r3, #0
 800301c:	4620      	mov	r0, r4
 800301e:	4631      	mov	r1, r6
 8003020:	f7fd fcbe 	bl	80009a0 <__aeabi_dcmpeq>
 8003024:	b938      	cbnz	r0, 8003036 <__cvt+0xa2>
 8003026:	2230      	movs	r2, #48	; 0x30
 8003028:	9b07      	ldr	r3, [sp, #28]
 800302a:	4599      	cmp	r9, r3
 800302c:	d905      	bls.n	800303a <__cvt+0xa6>
 800302e:	1c59      	adds	r1, r3, #1
 8003030:	9107      	str	r1, [sp, #28]
 8003032:	701a      	strb	r2, [r3, #0]
 8003034:	e7f8      	b.n	8003028 <__cvt+0x94>
 8003036:	f8cd 901c 	str.w	r9, [sp, #28]
 800303a:	4640      	mov	r0, r8
 800303c:	9b07      	ldr	r3, [sp, #28]
 800303e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003040:	eba3 0308 	sub.w	r3, r3, r8
 8003044:	6013      	str	r3, [r2, #0]
 8003046:	b008      	add	sp, #32
 8003048:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800304c <__exponent>:
 800304c:	4603      	mov	r3, r0
 800304e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003050:	2900      	cmp	r1, #0
 8003052:	f803 2b02 	strb.w	r2, [r3], #2
 8003056:	bfb6      	itet	lt
 8003058:	222d      	movlt	r2, #45	; 0x2d
 800305a:	222b      	movge	r2, #43	; 0x2b
 800305c:	4249      	neglt	r1, r1
 800305e:	2909      	cmp	r1, #9
 8003060:	7042      	strb	r2, [r0, #1]
 8003062:	dd21      	ble.n	80030a8 <__exponent+0x5c>
 8003064:	f10d 0207 	add.w	r2, sp, #7
 8003068:	4617      	mov	r7, r2
 800306a:	260a      	movs	r6, #10
 800306c:	fb91 f5f6 	sdiv	r5, r1, r6
 8003070:	fb06 1115 	mls	r1, r6, r5, r1
 8003074:	2d09      	cmp	r5, #9
 8003076:	f101 0130 	add.w	r1, r1, #48	; 0x30
 800307a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800307e:	f102 34ff 	add.w	r4, r2, #4294967295	; 0xffffffff
 8003082:	4629      	mov	r1, r5
 8003084:	dc09      	bgt.n	800309a <__exponent+0x4e>
 8003086:	3130      	adds	r1, #48	; 0x30
 8003088:	3a02      	subs	r2, #2
 800308a:	f804 1c01 	strb.w	r1, [r4, #-1]
 800308e:	42ba      	cmp	r2, r7
 8003090:	461c      	mov	r4, r3
 8003092:	d304      	bcc.n	800309e <__exponent+0x52>
 8003094:	1a20      	subs	r0, r4, r0
 8003096:	b003      	add	sp, #12
 8003098:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800309a:	4622      	mov	r2, r4
 800309c:	e7e6      	b.n	800306c <__exponent+0x20>
 800309e:	f812 1b01 	ldrb.w	r1, [r2], #1
 80030a2:	f803 1b01 	strb.w	r1, [r3], #1
 80030a6:	e7f2      	b.n	800308e <__exponent+0x42>
 80030a8:	2230      	movs	r2, #48	; 0x30
 80030aa:	461c      	mov	r4, r3
 80030ac:	4411      	add	r1, r2
 80030ae:	f804 2b02 	strb.w	r2, [r4], #2
 80030b2:	7059      	strb	r1, [r3, #1]
 80030b4:	e7ee      	b.n	8003094 <__exponent+0x48>
	...

080030b8 <_printf_float>:
 80030b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030bc:	b091      	sub	sp, #68	; 0x44
 80030be:	460c      	mov	r4, r1
 80030c0:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80030c2:	4693      	mov	fp, r2
 80030c4:	461e      	mov	r6, r3
 80030c6:	4605      	mov	r5, r0
 80030c8:	f001 fa62 	bl	8004590 <_localeconv_r>
 80030cc:	6803      	ldr	r3, [r0, #0]
 80030ce:	4618      	mov	r0, r3
 80030d0:	9309      	str	r3, [sp, #36]	; 0x24
 80030d2:	f7fd f83d 	bl	8000150 <strlen>
 80030d6:	2300      	movs	r3, #0
 80030d8:	930e      	str	r3, [sp, #56]	; 0x38
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	900a      	str	r0, [sp, #40]	; 0x28
 80030de:	3307      	adds	r3, #7
 80030e0:	f023 0307 	bic.w	r3, r3, #7
 80030e4:	f103 0208 	add.w	r2, r3, #8
 80030e8:	f894 8018 	ldrb.w	r8, [r4, #24]
 80030ec:	f8d4 a000 	ldr.w	sl, [r4]
 80030f0:	603a      	str	r2, [r7, #0]
 80030f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80030fa:	f8d4 904c 	ldr.w	r9, [r4, #76]	; 0x4c
 80030fe:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 8003100:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003104:	930b      	str	r3, [sp, #44]	; 0x2c
 8003106:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800310a:	4ba6      	ldr	r3, [pc, #664]	; (80033a4 <_printf_float+0x2ec>)
 800310c:	4638      	mov	r0, r7
 800310e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003110:	f7fd fc78 	bl	8000a04 <__aeabi_dcmpun>
 8003114:	2800      	cmp	r0, #0
 8003116:	f040 81f7 	bne.w	8003508 <_printf_float+0x450>
 800311a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800311e:	4ba1      	ldr	r3, [pc, #644]	; (80033a4 <_printf_float+0x2ec>)
 8003120:	4638      	mov	r0, r7
 8003122:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003124:	f7fd fc50 	bl	80009c8 <__aeabi_dcmple>
 8003128:	2800      	cmp	r0, #0
 800312a:	f040 81ed 	bne.w	8003508 <_printf_float+0x450>
 800312e:	2200      	movs	r2, #0
 8003130:	2300      	movs	r3, #0
 8003132:	4638      	mov	r0, r7
 8003134:	4649      	mov	r1, r9
 8003136:	f7fd fc3d 	bl	80009b4 <__aeabi_dcmplt>
 800313a:	b110      	cbz	r0, 8003142 <_printf_float+0x8a>
 800313c:	232d      	movs	r3, #45	; 0x2d
 800313e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003142:	4b99      	ldr	r3, [pc, #612]	; (80033a8 <_printf_float+0x2f0>)
 8003144:	4f99      	ldr	r7, [pc, #612]	; (80033ac <_printf_float+0x2f4>)
 8003146:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800314a:	bf98      	it	ls
 800314c:	461f      	movls	r7, r3
 800314e:	2303      	movs	r3, #3
 8003150:	f04f 0900 	mov.w	r9, #0
 8003154:	6123      	str	r3, [r4, #16]
 8003156:	f02a 0304 	bic.w	r3, sl, #4
 800315a:	6023      	str	r3, [r4, #0]
 800315c:	9600      	str	r6, [sp, #0]
 800315e:	465b      	mov	r3, fp
 8003160:	aa0f      	add	r2, sp, #60	; 0x3c
 8003162:	4621      	mov	r1, r4
 8003164:	4628      	mov	r0, r5
 8003166:	f000 f9df 	bl	8003528 <_printf_common>
 800316a:	3001      	adds	r0, #1
 800316c:	f040 809a 	bne.w	80032a4 <_printf_float+0x1ec>
 8003170:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003174:	b011      	add	sp, #68	; 0x44
 8003176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800317a:	6862      	ldr	r2, [r4, #4]
 800317c:	a80e      	add	r0, sp, #56	; 0x38
 800317e:	1c53      	adds	r3, r2, #1
 8003180:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
 8003184:	f44a 6380 	orr.w	r3, sl, #1024	; 0x400
 8003188:	d141      	bne.n	800320e <_printf_float+0x156>
 800318a:	2206      	movs	r2, #6
 800318c:	6062      	str	r2, [r4, #4]
 800318e:	2100      	movs	r1, #0
 8003190:	6023      	str	r3, [r4, #0]
 8003192:	9301      	str	r3, [sp, #4]
 8003194:	6863      	ldr	r3, [r4, #4]
 8003196:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800319a:	9005      	str	r0, [sp, #20]
 800319c:	9202      	str	r2, [sp, #8]
 800319e:	9300      	str	r3, [sp, #0]
 80031a0:	463a      	mov	r2, r7
 80031a2:	464b      	mov	r3, r9
 80031a4:	9106      	str	r1, [sp, #24]
 80031a6:	f8cd 8010 	str.w	r8, [sp, #16]
 80031aa:	f8cd e00c 	str.w	lr, [sp, #12]
 80031ae:	4628      	mov	r0, r5
 80031b0:	f7ff fef0 	bl	8002f94 <__cvt>
 80031b4:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 80031b8:	2b47      	cmp	r3, #71	; 0x47
 80031ba:	4607      	mov	r7, r0
 80031bc:	d109      	bne.n	80031d2 <_printf_float+0x11a>
 80031be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80031c0:	1cd8      	adds	r0, r3, #3
 80031c2:	db02      	blt.n	80031ca <_printf_float+0x112>
 80031c4:	6862      	ldr	r2, [r4, #4]
 80031c6:	4293      	cmp	r3, r2
 80031c8:	dd59      	ble.n	800327e <_printf_float+0x1c6>
 80031ca:	f1a8 0802 	sub.w	r8, r8, #2
 80031ce:	fa5f f888 	uxtb.w	r8, r8
 80031d2:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80031d6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80031d8:	d836      	bhi.n	8003248 <_printf_float+0x190>
 80031da:	3901      	subs	r1, #1
 80031dc:	4642      	mov	r2, r8
 80031de:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80031e2:	910d      	str	r1, [sp, #52]	; 0x34
 80031e4:	f7ff ff32 	bl	800304c <__exponent>
 80031e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80031ea:	4681      	mov	r9, r0
 80031ec:	1883      	adds	r3, r0, r2
 80031ee:	2a01      	cmp	r2, #1
 80031f0:	6123      	str	r3, [r4, #16]
 80031f2:	dc02      	bgt.n	80031fa <_printf_float+0x142>
 80031f4:	6822      	ldr	r2, [r4, #0]
 80031f6:	07d1      	lsls	r1, r2, #31
 80031f8:	d501      	bpl.n	80031fe <_printf_float+0x146>
 80031fa:	3301      	adds	r3, #1
 80031fc:	6123      	str	r3, [r4, #16]
 80031fe:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003202:	2b00      	cmp	r3, #0
 8003204:	d0aa      	beq.n	800315c <_printf_float+0xa4>
 8003206:	232d      	movs	r3, #45	; 0x2d
 8003208:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800320c:	e7a6      	b.n	800315c <_printf_float+0xa4>
 800320e:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8003212:	d002      	beq.n	800321a <_printf_float+0x162>
 8003214:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003218:	d1b9      	bne.n	800318e <_printf_float+0xd6>
 800321a:	b19a      	cbz	r2, 8003244 <_printf_float+0x18c>
 800321c:	2100      	movs	r1, #0
 800321e:	9106      	str	r1, [sp, #24]
 8003220:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8003224:	e88d 000c 	stmia.w	sp, {r2, r3}
 8003228:	6023      	str	r3, [r4, #0]
 800322a:	9005      	str	r0, [sp, #20]
 800322c:	463a      	mov	r2, r7
 800322e:	f8cd 8010 	str.w	r8, [sp, #16]
 8003232:	f8cd e00c 	str.w	lr, [sp, #12]
 8003236:	9102      	str	r1, [sp, #8]
 8003238:	464b      	mov	r3, r9
 800323a:	4628      	mov	r0, r5
 800323c:	f7ff feaa 	bl	8002f94 <__cvt>
 8003240:	4607      	mov	r7, r0
 8003242:	e7bc      	b.n	80031be <_printf_float+0x106>
 8003244:	2201      	movs	r2, #1
 8003246:	e7a1      	b.n	800318c <_printf_float+0xd4>
 8003248:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 800324c:	d119      	bne.n	8003282 <_printf_float+0x1ca>
 800324e:	2900      	cmp	r1, #0
 8003250:	6863      	ldr	r3, [r4, #4]
 8003252:	dd0c      	ble.n	800326e <_printf_float+0x1b6>
 8003254:	6121      	str	r1, [r4, #16]
 8003256:	b913      	cbnz	r3, 800325e <_printf_float+0x1a6>
 8003258:	6822      	ldr	r2, [r4, #0]
 800325a:	07d2      	lsls	r2, r2, #31
 800325c:	d502      	bpl.n	8003264 <_printf_float+0x1ac>
 800325e:	3301      	adds	r3, #1
 8003260:	440b      	add	r3, r1
 8003262:	6123      	str	r3, [r4, #16]
 8003264:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003266:	f04f 0900 	mov.w	r9, #0
 800326a:	65a3      	str	r3, [r4, #88]	; 0x58
 800326c:	e7c7      	b.n	80031fe <_printf_float+0x146>
 800326e:	b913      	cbnz	r3, 8003276 <_printf_float+0x1be>
 8003270:	6822      	ldr	r2, [r4, #0]
 8003272:	07d0      	lsls	r0, r2, #31
 8003274:	d501      	bpl.n	800327a <_printf_float+0x1c2>
 8003276:	3302      	adds	r3, #2
 8003278:	e7f3      	b.n	8003262 <_printf_float+0x1aa>
 800327a:	2301      	movs	r3, #1
 800327c:	e7f1      	b.n	8003262 <_printf_float+0x1aa>
 800327e:	f04f 0867 	mov.w	r8, #103	; 0x67
 8003282:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003284:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003286:	4293      	cmp	r3, r2
 8003288:	db05      	blt.n	8003296 <_printf_float+0x1de>
 800328a:	6822      	ldr	r2, [r4, #0]
 800328c:	6123      	str	r3, [r4, #16]
 800328e:	07d1      	lsls	r1, r2, #31
 8003290:	d5e8      	bpl.n	8003264 <_printf_float+0x1ac>
 8003292:	3301      	adds	r3, #1
 8003294:	e7e5      	b.n	8003262 <_printf_float+0x1aa>
 8003296:	2b00      	cmp	r3, #0
 8003298:	bfcc      	ite	gt
 800329a:	2301      	movgt	r3, #1
 800329c:	f1c3 0302 	rsble	r3, r3, #2
 80032a0:	4413      	add	r3, r2
 80032a2:	e7de      	b.n	8003262 <_printf_float+0x1aa>
 80032a4:	6823      	ldr	r3, [r4, #0]
 80032a6:	055a      	lsls	r2, r3, #21
 80032a8:	d407      	bmi.n	80032ba <_printf_float+0x202>
 80032aa:	6923      	ldr	r3, [r4, #16]
 80032ac:	463a      	mov	r2, r7
 80032ae:	4659      	mov	r1, fp
 80032b0:	4628      	mov	r0, r5
 80032b2:	47b0      	blx	r6
 80032b4:	3001      	adds	r0, #1
 80032b6:	d12a      	bne.n	800330e <_printf_float+0x256>
 80032b8:	e75a      	b.n	8003170 <_printf_float+0xb8>
 80032ba:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80032be:	f240 80dc 	bls.w	800347a <_printf_float+0x3c2>
 80032c2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80032c6:	2200      	movs	r2, #0
 80032c8:	2300      	movs	r3, #0
 80032ca:	f7fd fb69 	bl	80009a0 <__aeabi_dcmpeq>
 80032ce:	2800      	cmp	r0, #0
 80032d0:	d039      	beq.n	8003346 <_printf_float+0x28e>
 80032d2:	2301      	movs	r3, #1
 80032d4:	4a36      	ldr	r2, [pc, #216]	; (80033b0 <_printf_float+0x2f8>)
 80032d6:	4659      	mov	r1, fp
 80032d8:	4628      	mov	r0, r5
 80032da:	47b0      	blx	r6
 80032dc:	3001      	adds	r0, #1
 80032de:	f43f af47 	beq.w	8003170 <_printf_float+0xb8>
 80032e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80032e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80032e6:	429a      	cmp	r2, r3
 80032e8:	db02      	blt.n	80032f0 <_printf_float+0x238>
 80032ea:	6823      	ldr	r3, [r4, #0]
 80032ec:	07d8      	lsls	r0, r3, #31
 80032ee:	d50e      	bpl.n	800330e <_printf_float+0x256>
 80032f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80032f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80032f4:	4659      	mov	r1, fp
 80032f6:	4628      	mov	r0, r5
 80032f8:	47b0      	blx	r6
 80032fa:	3001      	adds	r0, #1
 80032fc:	f43f af38 	beq.w	8003170 <_printf_float+0xb8>
 8003300:	2700      	movs	r7, #0
 8003302:	f104 081a 	add.w	r8, r4, #26
 8003306:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003308:	3b01      	subs	r3, #1
 800330a:	429f      	cmp	r7, r3
 800330c:	db11      	blt.n	8003332 <_printf_float+0x27a>
 800330e:	6823      	ldr	r3, [r4, #0]
 8003310:	079f      	lsls	r7, r3, #30
 8003312:	d508      	bpl.n	8003326 <_printf_float+0x26e>
 8003314:	2700      	movs	r7, #0
 8003316:	f104 0819 	add.w	r8, r4, #25
 800331a:	68e3      	ldr	r3, [r4, #12]
 800331c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800331e:	1a9b      	subs	r3, r3, r2
 8003320:	429f      	cmp	r7, r3
 8003322:	f2c0 80e7 	blt.w	80034f4 <_printf_float+0x43c>
 8003326:	68e0      	ldr	r0, [r4, #12]
 8003328:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800332a:	4298      	cmp	r0, r3
 800332c:	bfb8      	it	lt
 800332e:	4618      	movlt	r0, r3
 8003330:	e720      	b.n	8003174 <_printf_float+0xbc>
 8003332:	2301      	movs	r3, #1
 8003334:	4642      	mov	r2, r8
 8003336:	4659      	mov	r1, fp
 8003338:	4628      	mov	r0, r5
 800333a:	47b0      	blx	r6
 800333c:	3001      	adds	r0, #1
 800333e:	f43f af17 	beq.w	8003170 <_printf_float+0xb8>
 8003342:	3701      	adds	r7, #1
 8003344:	e7df      	b.n	8003306 <_printf_float+0x24e>
 8003346:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003348:	2b00      	cmp	r3, #0
 800334a:	dc33      	bgt.n	80033b4 <_printf_float+0x2fc>
 800334c:	2301      	movs	r3, #1
 800334e:	4a18      	ldr	r2, [pc, #96]	; (80033b0 <_printf_float+0x2f8>)
 8003350:	4659      	mov	r1, fp
 8003352:	4628      	mov	r0, r5
 8003354:	47b0      	blx	r6
 8003356:	3001      	adds	r0, #1
 8003358:	f43f af0a 	beq.w	8003170 <_printf_float+0xb8>
 800335c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800335e:	b923      	cbnz	r3, 800336a <_printf_float+0x2b2>
 8003360:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003362:	b913      	cbnz	r3, 800336a <_printf_float+0x2b2>
 8003364:	6823      	ldr	r3, [r4, #0]
 8003366:	07d9      	lsls	r1, r3, #31
 8003368:	d5d1      	bpl.n	800330e <_printf_float+0x256>
 800336a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800336c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800336e:	4659      	mov	r1, fp
 8003370:	4628      	mov	r0, r5
 8003372:	47b0      	blx	r6
 8003374:	3001      	adds	r0, #1
 8003376:	f43f aefb 	beq.w	8003170 <_printf_float+0xb8>
 800337a:	f04f 0800 	mov.w	r8, #0
 800337e:	f104 091a 	add.w	r9, r4, #26
 8003382:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003384:	425b      	negs	r3, r3
 8003386:	4598      	cmp	r8, r3
 8003388:	db01      	blt.n	800338e <_printf_float+0x2d6>
 800338a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800338c:	e78e      	b.n	80032ac <_printf_float+0x1f4>
 800338e:	2301      	movs	r3, #1
 8003390:	464a      	mov	r2, r9
 8003392:	4659      	mov	r1, fp
 8003394:	4628      	mov	r0, r5
 8003396:	47b0      	blx	r6
 8003398:	3001      	adds	r0, #1
 800339a:	f43f aee9 	beq.w	8003170 <_printf_float+0xb8>
 800339e:	f108 0801 	add.w	r8, r8, #1
 80033a2:	e7ee      	b.n	8003382 <_printf_float+0x2ca>
 80033a4:	7fefffff 	.word	0x7fefffff
 80033a8:	08005246 	.word	0x08005246
 80033ac:	0800524a 	.word	0x0800524a
 80033b0:	08005256 	.word	0x08005256
 80033b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80033b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80033b8:	429a      	cmp	r2, r3
 80033ba:	bfa8      	it	ge
 80033bc:	461a      	movge	r2, r3
 80033be:	2a00      	cmp	r2, #0
 80033c0:	4690      	mov	r8, r2
 80033c2:	dc36      	bgt.n	8003432 <_printf_float+0x37a>
 80033c4:	f04f 0a00 	mov.w	sl, #0
 80033c8:	f104 031a 	add.w	r3, r4, #26
 80033cc:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 80033d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80033d2:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80033d6:	eba9 0308 	sub.w	r3, r9, r8
 80033da:	459a      	cmp	sl, r3
 80033dc:	db31      	blt.n	8003442 <_printf_float+0x38a>
 80033de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80033e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80033e2:	429a      	cmp	r2, r3
 80033e4:	db38      	blt.n	8003458 <_printf_float+0x3a0>
 80033e6:	6823      	ldr	r3, [r4, #0]
 80033e8:	07da      	lsls	r2, r3, #31
 80033ea:	d435      	bmi.n	8003458 <_printf_float+0x3a0>
 80033ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80033ee:	990d      	ldr	r1, [sp, #52]	; 0x34
 80033f0:	eba3 0209 	sub.w	r2, r3, r9
 80033f4:	eba3 0801 	sub.w	r8, r3, r1
 80033f8:	4590      	cmp	r8, r2
 80033fa:	bfa8      	it	ge
 80033fc:	4690      	movge	r8, r2
 80033fe:	f1b8 0f00 	cmp.w	r8, #0
 8003402:	dc31      	bgt.n	8003468 <_printf_float+0x3b0>
 8003404:	2700      	movs	r7, #0
 8003406:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 800340a:	f104 091a 	add.w	r9, r4, #26
 800340e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003410:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003412:	1a9b      	subs	r3, r3, r2
 8003414:	eba3 0308 	sub.w	r3, r3, r8
 8003418:	429f      	cmp	r7, r3
 800341a:	f6bf af78 	bge.w	800330e <_printf_float+0x256>
 800341e:	2301      	movs	r3, #1
 8003420:	464a      	mov	r2, r9
 8003422:	4659      	mov	r1, fp
 8003424:	4628      	mov	r0, r5
 8003426:	47b0      	blx	r6
 8003428:	3001      	adds	r0, #1
 800342a:	f43f aea1 	beq.w	8003170 <_printf_float+0xb8>
 800342e:	3701      	adds	r7, #1
 8003430:	e7ed      	b.n	800340e <_printf_float+0x356>
 8003432:	4613      	mov	r3, r2
 8003434:	4659      	mov	r1, fp
 8003436:	463a      	mov	r2, r7
 8003438:	4628      	mov	r0, r5
 800343a:	47b0      	blx	r6
 800343c:	3001      	adds	r0, #1
 800343e:	d1c1      	bne.n	80033c4 <_printf_float+0x30c>
 8003440:	e696      	b.n	8003170 <_printf_float+0xb8>
 8003442:	2301      	movs	r3, #1
 8003444:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003446:	4659      	mov	r1, fp
 8003448:	4628      	mov	r0, r5
 800344a:	47b0      	blx	r6
 800344c:	3001      	adds	r0, #1
 800344e:	f43f ae8f 	beq.w	8003170 <_printf_float+0xb8>
 8003452:	f10a 0a01 	add.w	sl, sl, #1
 8003456:	e7bc      	b.n	80033d2 <_printf_float+0x31a>
 8003458:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800345a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800345c:	4659      	mov	r1, fp
 800345e:	4628      	mov	r0, r5
 8003460:	47b0      	blx	r6
 8003462:	3001      	adds	r0, #1
 8003464:	d1c2      	bne.n	80033ec <_printf_float+0x334>
 8003466:	e683      	b.n	8003170 <_printf_float+0xb8>
 8003468:	4643      	mov	r3, r8
 800346a:	eb07 0209 	add.w	r2, r7, r9
 800346e:	4659      	mov	r1, fp
 8003470:	4628      	mov	r0, r5
 8003472:	47b0      	blx	r6
 8003474:	3001      	adds	r0, #1
 8003476:	d1c5      	bne.n	8003404 <_printf_float+0x34c>
 8003478:	e67a      	b.n	8003170 <_printf_float+0xb8>
 800347a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800347c:	2a01      	cmp	r2, #1
 800347e:	dc01      	bgt.n	8003484 <_printf_float+0x3cc>
 8003480:	07db      	lsls	r3, r3, #31
 8003482:	d534      	bpl.n	80034ee <_printf_float+0x436>
 8003484:	2301      	movs	r3, #1
 8003486:	463a      	mov	r2, r7
 8003488:	4659      	mov	r1, fp
 800348a:	4628      	mov	r0, r5
 800348c:	47b0      	blx	r6
 800348e:	3001      	adds	r0, #1
 8003490:	f43f ae6e 	beq.w	8003170 <_printf_float+0xb8>
 8003494:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003496:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003498:	4659      	mov	r1, fp
 800349a:	4628      	mov	r0, r5
 800349c:	47b0      	blx	r6
 800349e:	3001      	adds	r0, #1
 80034a0:	f43f ae66 	beq.w	8003170 <_printf_float+0xb8>
 80034a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80034a8:	2200      	movs	r2, #0
 80034aa:	2300      	movs	r3, #0
 80034ac:	f7fd fa78 	bl	80009a0 <__aeabi_dcmpeq>
 80034b0:	b150      	cbz	r0, 80034c8 <_printf_float+0x410>
 80034b2:	2700      	movs	r7, #0
 80034b4:	f104 081a 	add.w	r8, r4, #26
 80034b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80034ba:	3b01      	subs	r3, #1
 80034bc:	429f      	cmp	r7, r3
 80034be:	db0c      	blt.n	80034da <_printf_float+0x422>
 80034c0:	464b      	mov	r3, r9
 80034c2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80034c6:	e6f2      	b.n	80032ae <_printf_float+0x1f6>
 80034c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80034ca:	1c7a      	adds	r2, r7, #1
 80034cc:	3b01      	subs	r3, #1
 80034ce:	4659      	mov	r1, fp
 80034d0:	4628      	mov	r0, r5
 80034d2:	47b0      	blx	r6
 80034d4:	3001      	adds	r0, #1
 80034d6:	d1f3      	bne.n	80034c0 <_printf_float+0x408>
 80034d8:	e64a      	b.n	8003170 <_printf_float+0xb8>
 80034da:	2301      	movs	r3, #1
 80034dc:	4642      	mov	r2, r8
 80034de:	4659      	mov	r1, fp
 80034e0:	4628      	mov	r0, r5
 80034e2:	47b0      	blx	r6
 80034e4:	3001      	adds	r0, #1
 80034e6:	f43f ae43 	beq.w	8003170 <_printf_float+0xb8>
 80034ea:	3701      	adds	r7, #1
 80034ec:	e7e4      	b.n	80034b8 <_printf_float+0x400>
 80034ee:	2301      	movs	r3, #1
 80034f0:	463a      	mov	r2, r7
 80034f2:	e7ec      	b.n	80034ce <_printf_float+0x416>
 80034f4:	2301      	movs	r3, #1
 80034f6:	4642      	mov	r2, r8
 80034f8:	4659      	mov	r1, fp
 80034fa:	4628      	mov	r0, r5
 80034fc:	47b0      	blx	r6
 80034fe:	3001      	adds	r0, #1
 8003500:	f43f ae36 	beq.w	8003170 <_printf_float+0xb8>
 8003504:	3701      	adds	r7, #1
 8003506:	e708      	b.n	800331a <_printf_float+0x262>
 8003508:	463a      	mov	r2, r7
 800350a:	464b      	mov	r3, r9
 800350c:	4638      	mov	r0, r7
 800350e:	4649      	mov	r1, r9
 8003510:	f7fd fa78 	bl	8000a04 <__aeabi_dcmpun>
 8003514:	2800      	cmp	r0, #0
 8003516:	f43f ae30 	beq.w	800317a <_printf_float+0xc2>
 800351a:	4b01      	ldr	r3, [pc, #4]	; (8003520 <_printf_float+0x468>)
 800351c:	4f01      	ldr	r7, [pc, #4]	; (8003524 <_printf_float+0x46c>)
 800351e:	e612      	b.n	8003146 <_printf_float+0x8e>
 8003520:	0800524e 	.word	0x0800524e
 8003524:	08005252 	.word	0x08005252

08003528 <_printf_common>:
 8003528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800352c:	4691      	mov	r9, r2
 800352e:	461f      	mov	r7, r3
 8003530:	688a      	ldr	r2, [r1, #8]
 8003532:	690b      	ldr	r3, [r1, #16]
 8003534:	4606      	mov	r6, r0
 8003536:	4293      	cmp	r3, r2
 8003538:	bfb8      	it	lt
 800353a:	4613      	movlt	r3, r2
 800353c:	f8c9 3000 	str.w	r3, [r9]
 8003540:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003544:	460c      	mov	r4, r1
 8003546:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800354a:	b112      	cbz	r2, 8003552 <_printf_common+0x2a>
 800354c:	3301      	adds	r3, #1
 800354e:	f8c9 3000 	str.w	r3, [r9]
 8003552:	6823      	ldr	r3, [r4, #0]
 8003554:	0699      	lsls	r1, r3, #26
 8003556:	bf42      	ittt	mi
 8003558:	f8d9 3000 	ldrmi.w	r3, [r9]
 800355c:	3302      	addmi	r3, #2
 800355e:	f8c9 3000 	strmi.w	r3, [r9]
 8003562:	6825      	ldr	r5, [r4, #0]
 8003564:	f015 0506 	ands.w	r5, r5, #6
 8003568:	d107      	bne.n	800357a <_printf_common+0x52>
 800356a:	f104 0a19 	add.w	sl, r4, #25
 800356e:	68e3      	ldr	r3, [r4, #12]
 8003570:	f8d9 2000 	ldr.w	r2, [r9]
 8003574:	1a9b      	subs	r3, r3, r2
 8003576:	429d      	cmp	r5, r3
 8003578:	db2a      	blt.n	80035d0 <_printf_common+0xa8>
 800357a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800357e:	6822      	ldr	r2, [r4, #0]
 8003580:	3300      	adds	r3, #0
 8003582:	bf18      	it	ne
 8003584:	2301      	movne	r3, #1
 8003586:	0692      	lsls	r2, r2, #26
 8003588:	d42f      	bmi.n	80035ea <_printf_common+0xc2>
 800358a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800358e:	4639      	mov	r1, r7
 8003590:	4630      	mov	r0, r6
 8003592:	47c0      	blx	r8
 8003594:	3001      	adds	r0, #1
 8003596:	d022      	beq.n	80035de <_printf_common+0xb6>
 8003598:	6823      	ldr	r3, [r4, #0]
 800359a:	68e5      	ldr	r5, [r4, #12]
 800359c:	f003 0306 	and.w	r3, r3, #6
 80035a0:	2b04      	cmp	r3, #4
 80035a2:	bf18      	it	ne
 80035a4:	2500      	movne	r5, #0
 80035a6:	f8d9 2000 	ldr.w	r2, [r9]
 80035aa:	f04f 0900 	mov.w	r9, #0
 80035ae:	bf08      	it	eq
 80035b0:	1aad      	subeq	r5, r5, r2
 80035b2:	68a3      	ldr	r3, [r4, #8]
 80035b4:	6922      	ldr	r2, [r4, #16]
 80035b6:	bf08      	it	eq
 80035b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035bc:	4293      	cmp	r3, r2
 80035be:	bfc4      	itt	gt
 80035c0:	1a9b      	subgt	r3, r3, r2
 80035c2:	18ed      	addgt	r5, r5, r3
 80035c4:	341a      	adds	r4, #26
 80035c6:	454d      	cmp	r5, r9
 80035c8:	d11b      	bne.n	8003602 <_printf_common+0xda>
 80035ca:	2000      	movs	r0, #0
 80035cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035d0:	2301      	movs	r3, #1
 80035d2:	4652      	mov	r2, sl
 80035d4:	4639      	mov	r1, r7
 80035d6:	4630      	mov	r0, r6
 80035d8:	47c0      	blx	r8
 80035da:	3001      	adds	r0, #1
 80035dc:	d103      	bne.n	80035e6 <_printf_common+0xbe>
 80035de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80035e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035e6:	3501      	adds	r5, #1
 80035e8:	e7c1      	b.n	800356e <_printf_common+0x46>
 80035ea:	2030      	movs	r0, #48	; 0x30
 80035ec:	18e1      	adds	r1, r4, r3
 80035ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80035f2:	1c5a      	adds	r2, r3, #1
 80035f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80035f8:	4422      	add	r2, r4
 80035fa:	3302      	adds	r3, #2
 80035fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003600:	e7c3      	b.n	800358a <_printf_common+0x62>
 8003602:	2301      	movs	r3, #1
 8003604:	4622      	mov	r2, r4
 8003606:	4639      	mov	r1, r7
 8003608:	4630      	mov	r0, r6
 800360a:	47c0      	blx	r8
 800360c:	3001      	adds	r0, #1
 800360e:	d0e6      	beq.n	80035de <_printf_common+0xb6>
 8003610:	f109 0901 	add.w	r9, r9, #1
 8003614:	e7d7      	b.n	80035c6 <_printf_common+0x9e>
	...

08003618 <_printf_i>:
 8003618:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800361c:	4617      	mov	r7, r2
 800361e:	7e0a      	ldrb	r2, [r1, #24]
 8003620:	b085      	sub	sp, #20
 8003622:	2a6e      	cmp	r2, #110	; 0x6e
 8003624:	4698      	mov	r8, r3
 8003626:	4606      	mov	r6, r0
 8003628:	460c      	mov	r4, r1
 800362a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800362c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8003630:	f000 80bc 	beq.w	80037ac <_printf_i+0x194>
 8003634:	d81a      	bhi.n	800366c <_printf_i+0x54>
 8003636:	2a63      	cmp	r2, #99	; 0x63
 8003638:	d02e      	beq.n	8003698 <_printf_i+0x80>
 800363a:	d80a      	bhi.n	8003652 <_printf_i+0x3a>
 800363c:	2a00      	cmp	r2, #0
 800363e:	f000 80c8 	beq.w	80037d2 <_printf_i+0x1ba>
 8003642:	2a58      	cmp	r2, #88	; 0x58
 8003644:	f000 808a 	beq.w	800375c <_printf_i+0x144>
 8003648:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800364c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8003650:	e02a      	b.n	80036a8 <_printf_i+0x90>
 8003652:	2a64      	cmp	r2, #100	; 0x64
 8003654:	d001      	beq.n	800365a <_printf_i+0x42>
 8003656:	2a69      	cmp	r2, #105	; 0x69
 8003658:	d1f6      	bne.n	8003648 <_printf_i+0x30>
 800365a:	6821      	ldr	r1, [r4, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003662:	d023      	beq.n	80036ac <_printf_i+0x94>
 8003664:	1d11      	adds	r1, r2, #4
 8003666:	6019      	str	r1, [r3, #0]
 8003668:	6813      	ldr	r3, [r2, #0]
 800366a:	e027      	b.n	80036bc <_printf_i+0xa4>
 800366c:	2a73      	cmp	r2, #115	; 0x73
 800366e:	f000 80b4 	beq.w	80037da <_printf_i+0x1c2>
 8003672:	d808      	bhi.n	8003686 <_printf_i+0x6e>
 8003674:	2a6f      	cmp	r2, #111	; 0x6f
 8003676:	d02a      	beq.n	80036ce <_printf_i+0xb6>
 8003678:	2a70      	cmp	r2, #112	; 0x70
 800367a:	d1e5      	bne.n	8003648 <_printf_i+0x30>
 800367c:	680a      	ldr	r2, [r1, #0]
 800367e:	f042 0220 	orr.w	r2, r2, #32
 8003682:	600a      	str	r2, [r1, #0]
 8003684:	e003      	b.n	800368e <_printf_i+0x76>
 8003686:	2a75      	cmp	r2, #117	; 0x75
 8003688:	d021      	beq.n	80036ce <_printf_i+0xb6>
 800368a:	2a78      	cmp	r2, #120	; 0x78
 800368c:	d1dc      	bne.n	8003648 <_printf_i+0x30>
 800368e:	2278      	movs	r2, #120	; 0x78
 8003690:	496f      	ldr	r1, [pc, #444]	; (8003850 <_printf_i+0x238>)
 8003692:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8003696:	e064      	b.n	8003762 <_printf_i+0x14a>
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800369e:	1d11      	adds	r1, r2, #4
 80036a0:	6019      	str	r1, [r3, #0]
 80036a2:	6813      	ldr	r3, [r2, #0]
 80036a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80036a8:	2301      	movs	r3, #1
 80036aa:	e0a3      	b.n	80037f4 <_printf_i+0x1dc>
 80036ac:	f011 0f40 	tst.w	r1, #64	; 0x40
 80036b0:	f102 0104 	add.w	r1, r2, #4
 80036b4:	6019      	str	r1, [r3, #0]
 80036b6:	d0d7      	beq.n	8003668 <_printf_i+0x50>
 80036b8:	f9b2 3000 	ldrsh.w	r3, [r2]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	da03      	bge.n	80036c8 <_printf_i+0xb0>
 80036c0:	222d      	movs	r2, #45	; 0x2d
 80036c2:	425b      	negs	r3, r3
 80036c4:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80036c8:	4962      	ldr	r1, [pc, #392]	; (8003854 <_printf_i+0x23c>)
 80036ca:	220a      	movs	r2, #10
 80036cc:	e017      	b.n	80036fe <_printf_i+0xe6>
 80036ce:	6820      	ldr	r0, [r4, #0]
 80036d0:	6819      	ldr	r1, [r3, #0]
 80036d2:	f010 0f80 	tst.w	r0, #128	; 0x80
 80036d6:	d003      	beq.n	80036e0 <_printf_i+0xc8>
 80036d8:	1d08      	adds	r0, r1, #4
 80036da:	6018      	str	r0, [r3, #0]
 80036dc:	680b      	ldr	r3, [r1, #0]
 80036de:	e006      	b.n	80036ee <_printf_i+0xd6>
 80036e0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80036e4:	f101 0004 	add.w	r0, r1, #4
 80036e8:	6018      	str	r0, [r3, #0]
 80036ea:	d0f7      	beq.n	80036dc <_printf_i+0xc4>
 80036ec:	880b      	ldrh	r3, [r1, #0]
 80036ee:	2a6f      	cmp	r2, #111	; 0x6f
 80036f0:	bf14      	ite	ne
 80036f2:	220a      	movne	r2, #10
 80036f4:	2208      	moveq	r2, #8
 80036f6:	4957      	ldr	r1, [pc, #348]	; (8003854 <_printf_i+0x23c>)
 80036f8:	2000      	movs	r0, #0
 80036fa:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80036fe:	6865      	ldr	r5, [r4, #4]
 8003700:	2d00      	cmp	r5, #0
 8003702:	60a5      	str	r5, [r4, #8]
 8003704:	f2c0 809c 	blt.w	8003840 <_printf_i+0x228>
 8003708:	6820      	ldr	r0, [r4, #0]
 800370a:	f020 0004 	bic.w	r0, r0, #4
 800370e:	6020      	str	r0, [r4, #0]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d13f      	bne.n	8003794 <_printf_i+0x17c>
 8003714:	2d00      	cmp	r5, #0
 8003716:	f040 8095 	bne.w	8003844 <_printf_i+0x22c>
 800371a:	4675      	mov	r5, lr
 800371c:	2a08      	cmp	r2, #8
 800371e:	d10b      	bne.n	8003738 <_printf_i+0x120>
 8003720:	6823      	ldr	r3, [r4, #0]
 8003722:	07da      	lsls	r2, r3, #31
 8003724:	d508      	bpl.n	8003738 <_printf_i+0x120>
 8003726:	6923      	ldr	r3, [r4, #16]
 8003728:	6862      	ldr	r2, [r4, #4]
 800372a:	429a      	cmp	r2, r3
 800372c:	bfde      	ittt	le
 800372e:	2330      	movle	r3, #48	; 0x30
 8003730:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003734:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003738:	ebae 0305 	sub.w	r3, lr, r5
 800373c:	6123      	str	r3, [r4, #16]
 800373e:	f8cd 8000 	str.w	r8, [sp]
 8003742:	463b      	mov	r3, r7
 8003744:	aa03      	add	r2, sp, #12
 8003746:	4621      	mov	r1, r4
 8003748:	4630      	mov	r0, r6
 800374a:	f7ff feed 	bl	8003528 <_printf_common>
 800374e:	3001      	adds	r0, #1
 8003750:	d155      	bne.n	80037fe <_printf_i+0x1e6>
 8003752:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003756:	b005      	add	sp, #20
 8003758:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800375c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8003760:	493c      	ldr	r1, [pc, #240]	; (8003854 <_printf_i+0x23c>)
 8003762:	6822      	ldr	r2, [r4, #0]
 8003764:	6818      	ldr	r0, [r3, #0]
 8003766:	f012 0f80 	tst.w	r2, #128	; 0x80
 800376a:	f100 0504 	add.w	r5, r0, #4
 800376e:	601d      	str	r5, [r3, #0]
 8003770:	d001      	beq.n	8003776 <_printf_i+0x15e>
 8003772:	6803      	ldr	r3, [r0, #0]
 8003774:	e002      	b.n	800377c <_printf_i+0x164>
 8003776:	0655      	lsls	r5, r2, #25
 8003778:	d5fb      	bpl.n	8003772 <_printf_i+0x15a>
 800377a:	8803      	ldrh	r3, [r0, #0]
 800377c:	07d0      	lsls	r0, r2, #31
 800377e:	bf44      	itt	mi
 8003780:	f042 0220 	orrmi.w	r2, r2, #32
 8003784:	6022      	strmi	r2, [r4, #0]
 8003786:	b91b      	cbnz	r3, 8003790 <_printf_i+0x178>
 8003788:	6822      	ldr	r2, [r4, #0]
 800378a:	f022 0220 	bic.w	r2, r2, #32
 800378e:	6022      	str	r2, [r4, #0]
 8003790:	2210      	movs	r2, #16
 8003792:	e7b1      	b.n	80036f8 <_printf_i+0xe0>
 8003794:	4675      	mov	r5, lr
 8003796:	fbb3 f0f2 	udiv	r0, r3, r2
 800379a:	fb02 3310 	mls	r3, r2, r0, r3
 800379e:	5ccb      	ldrb	r3, [r1, r3]
 80037a0:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80037a4:	4603      	mov	r3, r0
 80037a6:	2800      	cmp	r0, #0
 80037a8:	d1f5      	bne.n	8003796 <_printf_i+0x17e>
 80037aa:	e7b7      	b.n	800371c <_printf_i+0x104>
 80037ac:	6808      	ldr	r0, [r1, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	f010 0f80 	tst.w	r0, #128	; 0x80
 80037b4:	6949      	ldr	r1, [r1, #20]
 80037b6:	d004      	beq.n	80037c2 <_printf_i+0x1aa>
 80037b8:	1d10      	adds	r0, r2, #4
 80037ba:	6018      	str	r0, [r3, #0]
 80037bc:	6813      	ldr	r3, [r2, #0]
 80037be:	6019      	str	r1, [r3, #0]
 80037c0:	e007      	b.n	80037d2 <_printf_i+0x1ba>
 80037c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80037c6:	f102 0004 	add.w	r0, r2, #4
 80037ca:	6018      	str	r0, [r3, #0]
 80037cc:	6813      	ldr	r3, [r2, #0]
 80037ce:	d0f6      	beq.n	80037be <_printf_i+0x1a6>
 80037d0:	8019      	strh	r1, [r3, #0]
 80037d2:	2300      	movs	r3, #0
 80037d4:	4675      	mov	r5, lr
 80037d6:	6123      	str	r3, [r4, #16]
 80037d8:	e7b1      	b.n	800373e <_printf_i+0x126>
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	1d11      	adds	r1, r2, #4
 80037de:	6019      	str	r1, [r3, #0]
 80037e0:	6815      	ldr	r5, [r2, #0]
 80037e2:	2100      	movs	r1, #0
 80037e4:	6862      	ldr	r2, [r4, #4]
 80037e6:	4628      	mov	r0, r5
 80037e8:	f000 fee8 	bl	80045bc <memchr>
 80037ec:	b108      	cbz	r0, 80037f2 <_printf_i+0x1da>
 80037ee:	1b40      	subs	r0, r0, r5
 80037f0:	6060      	str	r0, [r4, #4]
 80037f2:	6863      	ldr	r3, [r4, #4]
 80037f4:	6123      	str	r3, [r4, #16]
 80037f6:	2300      	movs	r3, #0
 80037f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037fc:	e79f      	b.n	800373e <_printf_i+0x126>
 80037fe:	6923      	ldr	r3, [r4, #16]
 8003800:	462a      	mov	r2, r5
 8003802:	4639      	mov	r1, r7
 8003804:	4630      	mov	r0, r6
 8003806:	47c0      	blx	r8
 8003808:	3001      	adds	r0, #1
 800380a:	d0a2      	beq.n	8003752 <_printf_i+0x13a>
 800380c:	6823      	ldr	r3, [r4, #0]
 800380e:	079b      	lsls	r3, r3, #30
 8003810:	d507      	bpl.n	8003822 <_printf_i+0x20a>
 8003812:	2500      	movs	r5, #0
 8003814:	f104 0919 	add.w	r9, r4, #25
 8003818:	68e3      	ldr	r3, [r4, #12]
 800381a:	9a03      	ldr	r2, [sp, #12]
 800381c:	1a9b      	subs	r3, r3, r2
 800381e:	429d      	cmp	r5, r3
 8003820:	db05      	blt.n	800382e <_printf_i+0x216>
 8003822:	68e0      	ldr	r0, [r4, #12]
 8003824:	9b03      	ldr	r3, [sp, #12]
 8003826:	4298      	cmp	r0, r3
 8003828:	bfb8      	it	lt
 800382a:	4618      	movlt	r0, r3
 800382c:	e793      	b.n	8003756 <_printf_i+0x13e>
 800382e:	2301      	movs	r3, #1
 8003830:	464a      	mov	r2, r9
 8003832:	4639      	mov	r1, r7
 8003834:	4630      	mov	r0, r6
 8003836:	47c0      	blx	r8
 8003838:	3001      	adds	r0, #1
 800383a:	d08a      	beq.n	8003752 <_printf_i+0x13a>
 800383c:	3501      	adds	r5, #1
 800383e:	e7eb      	b.n	8003818 <_printf_i+0x200>
 8003840:	2b00      	cmp	r3, #0
 8003842:	d1a7      	bne.n	8003794 <_printf_i+0x17c>
 8003844:	780b      	ldrb	r3, [r1, #0]
 8003846:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800384a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800384e:	e765      	b.n	800371c <_printf_i+0x104>
 8003850:	08005269 	.word	0x08005269
 8003854:	08005258 	.word	0x08005258

08003858 <sniprintf>:
 8003858:	b40c      	push	{r2, r3}
 800385a:	b530      	push	{r4, r5, lr}
 800385c:	4b17      	ldr	r3, [pc, #92]	; (80038bc <sniprintf+0x64>)
 800385e:	1e0c      	subs	r4, r1, #0
 8003860:	b09d      	sub	sp, #116	; 0x74
 8003862:	681d      	ldr	r5, [r3, #0]
 8003864:	da08      	bge.n	8003878 <sniprintf+0x20>
 8003866:	238b      	movs	r3, #139	; 0x8b
 8003868:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800386c:	602b      	str	r3, [r5, #0]
 800386e:	b01d      	add	sp, #116	; 0x74
 8003870:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003874:	b002      	add	sp, #8
 8003876:	4770      	bx	lr
 8003878:	f44f 7302 	mov.w	r3, #520	; 0x208
 800387c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003880:	bf0c      	ite	eq
 8003882:	4623      	moveq	r3, r4
 8003884:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8003888:	9304      	str	r3, [sp, #16]
 800388a:	9307      	str	r3, [sp, #28]
 800388c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003890:	9002      	str	r0, [sp, #8]
 8003892:	9006      	str	r0, [sp, #24]
 8003894:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003898:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800389a:	ab21      	add	r3, sp, #132	; 0x84
 800389c:	a902      	add	r1, sp, #8
 800389e:	4628      	mov	r0, r5
 80038a0:	9301      	str	r3, [sp, #4]
 80038a2:	f001 fa89 	bl	8004db8 <_svfiprintf_r>
 80038a6:	1c43      	adds	r3, r0, #1
 80038a8:	bfbc      	itt	lt
 80038aa:	238b      	movlt	r3, #139	; 0x8b
 80038ac:	602b      	strlt	r3, [r5, #0]
 80038ae:	2c00      	cmp	r4, #0
 80038b0:	d0dd      	beq.n	800386e <sniprintf+0x16>
 80038b2:	2200      	movs	r2, #0
 80038b4:	9b02      	ldr	r3, [sp, #8]
 80038b6:	701a      	strb	r2, [r3, #0]
 80038b8:	e7d9      	b.n	800386e <sniprintf+0x16>
 80038ba:	bf00      	nop
 80038bc:	2000000c 	.word	0x2000000c

080038c0 <strcpy>:
 80038c0:	4603      	mov	r3, r0
 80038c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80038c6:	f803 2b01 	strb.w	r2, [r3], #1
 80038ca:	2a00      	cmp	r2, #0
 80038cc:	d1f9      	bne.n	80038c2 <strcpy+0x2>
 80038ce:	4770      	bx	lr

080038d0 <quorem>:
 80038d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038d4:	6903      	ldr	r3, [r0, #16]
 80038d6:	690c      	ldr	r4, [r1, #16]
 80038d8:	4680      	mov	r8, r0
 80038da:	429c      	cmp	r4, r3
 80038dc:	f300 8082 	bgt.w	80039e4 <quorem+0x114>
 80038e0:	3c01      	subs	r4, #1
 80038e2:	f101 0714 	add.w	r7, r1, #20
 80038e6:	f100 0614 	add.w	r6, r0, #20
 80038ea:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80038ee:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80038f2:	3501      	adds	r5, #1
 80038f4:	fbb0 f5f5 	udiv	r5, r0, r5
 80038f8:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 80038fc:	eb06 030e 	add.w	r3, r6, lr
 8003900:	eb07 090e 	add.w	r9, r7, lr
 8003904:	9301      	str	r3, [sp, #4]
 8003906:	b38d      	cbz	r5, 800396c <quorem+0x9c>
 8003908:	f04f 0a00 	mov.w	sl, #0
 800390c:	4638      	mov	r0, r7
 800390e:	46b4      	mov	ip, r6
 8003910:	46d3      	mov	fp, sl
 8003912:	f850 2b04 	ldr.w	r2, [r0], #4
 8003916:	b293      	uxth	r3, r2
 8003918:	fb05 a303 	mla	r3, r5, r3, sl
 800391c:	0c12      	lsrs	r2, r2, #16
 800391e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003922:	fb05 a202 	mla	r2, r5, r2, sl
 8003926:	b29b      	uxth	r3, r3
 8003928:	ebab 0303 	sub.w	r3, fp, r3
 800392c:	f8bc b000 	ldrh.w	fp, [ip]
 8003930:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8003934:	445b      	add	r3, fp
 8003936:	fa1f fb82 	uxth.w	fp, r2
 800393a:	f8dc 2000 	ldr.w	r2, [ip]
 800393e:	4581      	cmp	r9, r0
 8003940:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8003944:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003948:	b29b      	uxth	r3, r3
 800394a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800394e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8003952:	f84c 3b04 	str.w	r3, [ip], #4
 8003956:	d2dc      	bcs.n	8003912 <quorem+0x42>
 8003958:	f856 300e 	ldr.w	r3, [r6, lr]
 800395c:	b933      	cbnz	r3, 800396c <quorem+0x9c>
 800395e:	9b01      	ldr	r3, [sp, #4]
 8003960:	3b04      	subs	r3, #4
 8003962:	429e      	cmp	r6, r3
 8003964:	461a      	mov	r2, r3
 8003966:	d331      	bcc.n	80039cc <quorem+0xfc>
 8003968:	f8c8 4010 	str.w	r4, [r8, #16]
 800396c:	4640      	mov	r0, r8
 800396e:	f001 f846 	bl	80049fe <__mcmp>
 8003972:	2800      	cmp	r0, #0
 8003974:	db26      	blt.n	80039c4 <quorem+0xf4>
 8003976:	4630      	mov	r0, r6
 8003978:	f04f 0e00 	mov.w	lr, #0
 800397c:	3501      	adds	r5, #1
 800397e:	f857 1b04 	ldr.w	r1, [r7], #4
 8003982:	f8d0 c000 	ldr.w	ip, [r0]
 8003986:	b28b      	uxth	r3, r1
 8003988:	ebae 0303 	sub.w	r3, lr, r3
 800398c:	fa1f f28c 	uxth.w	r2, ip
 8003990:	4413      	add	r3, r2
 8003992:	0c0a      	lsrs	r2, r1, #16
 8003994:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8003998:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800399c:	b29b      	uxth	r3, r3
 800399e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80039a2:	45b9      	cmp	r9, r7
 80039a4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80039a8:	f840 3b04 	str.w	r3, [r0], #4
 80039ac:	d2e7      	bcs.n	800397e <quorem+0xae>
 80039ae:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80039b2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80039b6:	b92a      	cbnz	r2, 80039c4 <quorem+0xf4>
 80039b8:	3b04      	subs	r3, #4
 80039ba:	429e      	cmp	r6, r3
 80039bc:	461a      	mov	r2, r3
 80039be:	d30b      	bcc.n	80039d8 <quorem+0x108>
 80039c0:	f8c8 4010 	str.w	r4, [r8, #16]
 80039c4:	4628      	mov	r0, r5
 80039c6:	b003      	add	sp, #12
 80039c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039cc:	6812      	ldr	r2, [r2, #0]
 80039ce:	3b04      	subs	r3, #4
 80039d0:	2a00      	cmp	r2, #0
 80039d2:	d1c9      	bne.n	8003968 <quorem+0x98>
 80039d4:	3c01      	subs	r4, #1
 80039d6:	e7c4      	b.n	8003962 <quorem+0x92>
 80039d8:	6812      	ldr	r2, [r2, #0]
 80039da:	3b04      	subs	r3, #4
 80039dc:	2a00      	cmp	r2, #0
 80039de:	d1ef      	bne.n	80039c0 <quorem+0xf0>
 80039e0:	3c01      	subs	r4, #1
 80039e2:	e7ea      	b.n	80039ba <quorem+0xea>
 80039e4:	2000      	movs	r0, #0
 80039e6:	e7ee      	b.n	80039c6 <quorem+0xf6>

080039e8 <_dtoa_r>:
 80039e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039ec:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80039ee:	b095      	sub	sp, #84	; 0x54
 80039f0:	4604      	mov	r4, r0
 80039f2:	9d21      	ldr	r5, [sp, #132]	; 0x84
 80039f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80039f8:	b93e      	cbnz	r6, 8003a0a <_dtoa_r+0x22>
 80039fa:	2010      	movs	r0, #16
 80039fc:	f000 fdd6 	bl	80045ac <malloc>
 8003a00:	6260      	str	r0, [r4, #36]	; 0x24
 8003a02:	6046      	str	r6, [r0, #4]
 8003a04:	6086      	str	r6, [r0, #8]
 8003a06:	6006      	str	r6, [r0, #0]
 8003a08:	60c6      	str	r6, [r0, #12]
 8003a0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003a0c:	6819      	ldr	r1, [r3, #0]
 8003a0e:	b151      	cbz	r1, 8003a26 <_dtoa_r+0x3e>
 8003a10:	685a      	ldr	r2, [r3, #4]
 8003a12:	2301      	movs	r3, #1
 8003a14:	4093      	lsls	r3, r2
 8003a16:	604a      	str	r2, [r1, #4]
 8003a18:	608b      	str	r3, [r1, #8]
 8003a1a:	4620      	mov	r0, r4
 8003a1c:	f000 fe1b 	bl	8004656 <_Bfree>
 8003a20:	2200      	movs	r2, #0
 8003a22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003a24:	601a      	str	r2, [r3, #0]
 8003a26:	9b03      	ldr	r3, [sp, #12]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	bfb7      	itett	lt
 8003a2c:	2301      	movlt	r3, #1
 8003a2e:	2300      	movge	r3, #0
 8003a30:	602b      	strlt	r3, [r5, #0]
 8003a32:	9b03      	ldrlt	r3, [sp, #12]
 8003a34:	bfae      	itee	ge
 8003a36:	602b      	strge	r3, [r5, #0]
 8003a38:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003a3c:	9303      	strlt	r3, [sp, #12]
 8003a3e:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8003a42:	4bab      	ldr	r3, [pc, #684]	; (8003cf0 <_dtoa_r+0x308>)
 8003a44:	ea33 0309 	bics.w	r3, r3, r9
 8003a48:	d11b      	bne.n	8003a82 <_dtoa_r+0x9a>
 8003a4a:	f242 730f 	movw	r3, #9999	; 0x270f
 8003a4e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003a50:	6013      	str	r3, [r2, #0]
 8003a52:	9b02      	ldr	r3, [sp, #8]
 8003a54:	b923      	cbnz	r3, 8003a60 <_dtoa_r+0x78>
 8003a56:	f3c9 0013 	ubfx	r0, r9, #0, #20
 8003a5a:	2800      	cmp	r0, #0
 8003a5c:	f000 8583 	beq.w	8004566 <_dtoa_r+0xb7e>
 8003a60:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003a62:	b953      	cbnz	r3, 8003a7a <_dtoa_r+0x92>
 8003a64:	4ba3      	ldr	r3, [pc, #652]	; (8003cf4 <_dtoa_r+0x30c>)
 8003a66:	e021      	b.n	8003aac <_dtoa_r+0xc4>
 8003a68:	4ba3      	ldr	r3, [pc, #652]	; (8003cf8 <_dtoa_r+0x310>)
 8003a6a:	9306      	str	r3, [sp, #24]
 8003a6c:	3308      	adds	r3, #8
 8003a6e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003a70:	6013      	str	r3, [r2, #0]
 8003a72:	9806      	ldr	r0, [sp, #24]
 8003a74:	b015      	add	sp, #84	; 0x54
 8003a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a7a:	4b9e      	ldr	r3, [pc, #632]	; (8003cf4 <_dtoa_r+0x30c>)
 8003a7c:	9306      	str	r3, [sp, #24]
 8003a7e:	3303      	adds	r3, #3
 8003a80:	e7f5      	b.n	8003a6e <_dtoa_r+0x86>
 8003a82:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003a86:	2200      	movs	r2, #0
 8003a88:	2300      	movs	r3, #0
 8003a8a:	4630      	mov	r0, r6
 8003a8c:	4639      	mov	r1, r7
 8003a8e:	f7fc ff87 	bl	80009a0 <__aeabi_dcmpeq>
 8003a92:	4680      	mov	r8, r0
 8003a94:	b160      	cbz	r0, 8003ab0 <_dtoa_r+0xc8>
 8003a96:	2301      	movs	r3, #1
 8003a98:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003a9a:	6013      	str	r3, [r2, #0]
 8003a9c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	f000 855e 	beq.w	8004560 <_dtoa_r+0xb78>
 8003aa4:	4b95      	ldr	r3, [pc, #596]	; (8003cfc <_dtoa_r+0x314>)
 8003aa6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003aa8:	6013      	str	r3, [r2, #0]
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	9306      	str	r3, [sp, #24]
 8003aae:	e7e0      	b.n	8003a72 <_dtoa_r+0x8a>
 8003ab0:	ab12      	add	r3, sp, #72	; 0x48
 8003ab2:	9301      	str	r3, [sp, #4]
 8003ab4:	ab13      	add	r3, sp, #76	; 0x4c
 8003ab6:	9300      	str	r3, [sp, #0]
 8003ab8:	4632      	mov	r2, r6
 8003aba:	463b      	mov	r3, r7
 8003abc:	4620      	mov	r0, r4
 8003abe:	f001 f817 	bl	8004af0 <__d2b>
 8003ac2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8003ac6:	4682      	mov	sl, r0
 8003ac8:	2d00      	cmp	r5, #0
 8003aca:	d07d      	beq.n	8003bc8 <_dtoa_r+0x1e0>
 8003acc:	4630      	mov	r0, r6
 8003ace:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003ad2:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8003ad6:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8003ada:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003ade:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	4b86      	ldr	r3, [pc, #536]	; (8003d00 <_dtoa_r+0x318>)
 8003ae6:	f7fc fb3f 	bl	8000168 <__aeabi_dsub>
 8003aea:	a37b      	add	r3, pc, #492	; (adr r3, 8003cd8 <_dtoa_r+0x2f0>)
 8003aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af0:	f7fc fcee 	bl	80004d0 <__aeabi_dmul>
 8003af4:	a37a      	add	r3, pc, #488	; (adr r3, 8003ce0 <_dtoa_r+0x2f8>)
 8003af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003afa:	f7fc fb37 	bl	800016c <__adddf3>
 8003afe:	4606      	mov	r6, r0
 8003b00:	4628      	mov	r0, r5
 8003b02:	460f      	mov	r7, r1
 8003b04:	f7fc fc7e 	bl	8000404 <__aeabi_i2d>
 8003b08:	a377      	add	r3, pc, #476	; (adr r3, 8003ce8 <_dtoa_r+0x300>)
 8003b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b0e:	f7fc fcdf 	bl	80004d0 <__aeabi_dmul>
 8003b12:	4602      	mov	r2, r0
 8003b14:	460b      	mov	r3, r1
 8003b16:	4630      	mov	r0, r6
 8003b18:	4639      	mov	r1, r7
 8003b1a:	f7fc fb27 	bl	800016c <__adddf3>
 8003b1e:	4606      	mov	r6, r0
 8003b20:	460f      	mov	r7, r1
 8003b22:	f7fc ff85 	bl	8000a30 <__aeabi_d2iz>
 8003b26:	2200      	movs	r2, #0
 8003b28:	4683      	mov	fp, r0
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	4630      	mov	r0, r6
 8003b2e:	4639      	mov	r1, r7
 8003b30:	f7fc ff40 	bl	80009b4 <__aeabi_dcmplt>
 8003b34:	b158      	cbz	r0, 8003b4e <_dtoa_r+0x166>
 8003b36:	4658      	mov	r0, fp
 8003b38:	f7fc fc64 	bl	8000404 <__aeabi_i2d>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	460b      	mov	r3, r1
 8003b40:	4630      	mov	r0, r6
 8003b42:	4639      	mov	r1, r7
 8003b44:	f7fc ff2c 	bl	80009a0 <__aeabi_dcmpeq>
 8003b48:	b908      	cbnz	r0, 8003b4e <_dtoa_r+0x166>
 8003b4a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8003b4e:	f1bb 0f16 	cmp.w	fp, #22
 8003b52:	d858      	bhi.n	8003c06 <_dtoa_r+0x21e>
 8003b54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003b58:	496a      	ldr	r1, [pc, #424]	; (8003d04 <_dtoa_r+0x31c>)
 8003b5a:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8003b5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003b62:	f7fc ff45 	bl	80009f0 <__aeabi_dcmpgt>
 8003b66:	2800      	cmp	r0, #0
 8003b68:	d04f      	beq.n	8003c0a <_dtoa_r+0x222>
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8003b70:	930d      	str	r3, [sp, #52]	; 0x34
 8003b72:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003b74:	1b5d      	subs	r5, r3, r5
 8003b76:	1e6b      	subs	r3, r5, #1
 8003b78:	9307      	str	r3, [sp, #28]
 8003b7a:	bf43      	ittte	mi
 8003b7c:	2300      	movmi	r3, #0
 8003b7e:	f1c5 0801 	rsbmi	r8, r5, #1
 8003b82:	9307      	strmi	r3, [sp, #28]
 8003b84:	f04f 0800 	movpl.w	r8, #0
 8003b88:	f1bb 0f00 	cmp.w	fp, #0
 8003b8c:	db3f      	blt.n	8003c0e <_dtoa_r+0x226>
 8003b8e:	9b07      	ldr	r3, [sp, #28]
 8003b90:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8003b94:	445b      	add	r3, fp
 8003b96:	9307      	str	r3, [sp, #28]
 8003b98:	2300      	movs	r3, #0
 8003b9a:	9308      	str	r3, [sp, #32]
 8003b9c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003b9e:	2b09      	cmp	r3, #9
 8003ba0:	f200 80b4 	bhi.w	8003d0c <_dtoa_r+0x324>
 8003ba4:	2b05      	cmp	r3, #5
 8003ba6:	bfc4      	itt	gt
 8003ba8:	3b04      	subgt	r3, #4
 8003baa:	931e      	strgt	r3, [sp, #120]	; 0x78
 8003bac:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003bae:	bfc8      	it	gt
 8003bb0:	2600      	movgt	r6, #0
 8003bb2:	f1a3 0302 	sub.w	r3, r3, #2
 8003bb6:	bfd8      	it	le
 8003bb8:	2601      	movle	r6, #1
 8003bba:	2b03      	cmp	r3, #3
 8003bbc:	f200 80b2 	bhi.w	8003d24 <_dtoa_r+0x33c>
 8003bc0:	e8df f003 	tbb	[pc, r3]
 8003bc4:	782d8684 	.word	0x782d8684
 8003bc8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003bca:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8003bcc:	441d      	add	r5, r3
 8003bce:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8003bd2:	2b20      	cmp	r3, #32
 8003bd4:	dd11      	ble.n	8003bfa <_dtoa_r+0x212>
 8003bd6:	9a02      	ldr	r2, [sp, #8]
 8003bd8:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8003bdc:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8003be0:	fa22 f000 	lsr.w	r0, r2, r0
 8003be4:	fa09 f303 	lsl.w	r3, r9, r3
 8003be8:	4318      	orrs	r0, r3
 8003bea:	f7fc fbfb 	bl	80003e4 <__aeabi_ui2d>
 8003bee:	2301      	movs	r3, #1
 8003bf0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8003bf4:	3d01      	subs	r5, #1
 8003bf6:	9310      	str	r3, [sp, #64]	; 0x40
 8003bf8:	e773      	b.n	8003ae2 <_dtoa_r+0xfa>
 8003bfa:	f1c3 0020 	rsb	r0, r3, #32
 8003bfe:	9b02      	ldr	r3, [sp, #8]
 8003c00:	fa03 f000 	lsl.w	r0, r3, r0
 8003c04:	e7f1      	b.n	8003bea <_dtoa_r+0x202>
 8003c06:	2301      	movs	r3, #1
 8003c08:	e7b2      	b.n	8003b70 <_dtoa_r+0x188>
 8003c0a:	900d      	str	r0, [sp, #52]	; 0x34
 8003c0c:	e7b1      	b.n	8003b72 <_dtoa_r+0x18a>
 8003c0e:	f1cb 0300 	rsb	r3, fp, #0
 8003c12:	9308      	str	r3, [sp, #32]
 8003c14:	2300      	movs	r3, #0
 8003c16:	eba8 080b 	sub.w	r8, r8, fp
 8003c1a:	930c      	str	r3, [sp, #48]	; 0x30
 8003c1c:	e7be      	b.n	8003b9c <_dtoa_r+0x1b4>
 8003c1e:	2301      	movs	r3, #1
 8003c20:	9309      	str	r3, [sp, #36]	; 0x24
 8003c22:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	f340 8080 	ble.w	8003d2a <_dtoa_r+0x342>
 8003c2a:	4699      	mov	r9, r3
 8003c2c:	9304      	str	r3, [sp, #16]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	2104      	movs	r1, #4
 8003c32:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003c34:	606a      	str	r2, [r5, #4]
 8003c36:	f101 0214 	add.w	r2, r1, #20
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d97a      	bls.n	8003d34 <_dtoa_r+0x34c>
 8003c3e:	6869      	ldr	r1, [r5, #4]
 8003c40:	4620      	mov	r0, r4
 8003c42:	f000 fcd4 	bl	80045ee <_Balloc>
 8003c46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003c48:	6028      	str	r0, [r5, #0]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f1b9 0f0e 	cmp.w	r9, #14
 8003c50:	9306      	str	r3, [sp, #24]
 8003c52:	f200 80f0 	bhi.w	8003e36 <_dtoa_r+0x44e>
 8003c56:	2e00      	cmp	r6, #0
 8003c58:	f000 80ed 	beq.w	8003e36 <_dtoa_r+0x44e>
 8003c5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003c60:	f1bb 0f00 	cmp.w	fp, #0
 8003c64:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8003c68:	dd79      	ble.n	8003d5e <_dtoa_r+0x376>
 8003c6a:	4a26      	ldr	r2, [pc, #152]	; (8003d04 <_dtoa_r+0x31c>)
 8003c6c:	f00b 030f 	and.w	r3, fp, #15
 8003c70:	ea4f 162b 	mov.w	r6, fp, asr #4
 8003c74:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003c78:	06f0      	lsls	r0, r6, #27
 8003c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c7e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003c82:	d55c      	bpl.n	8003d3e <_dtoa_r+0x356>
 8003c84:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003c88:	4b1f      	ldr	r3, [pc, #124]	; (8003d08 <_dtoa_r+0x320>)
 8003c8a:	2503      	movs	r5, #3
 8003c8c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003c90:	f7fc fd48 	bl	8000724 <__aeabi_ddiv>
 8003c94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003c98:	f006 060f 	and.w	r6, r6, #15
 8003c9c:	4f1a      	ldr	r7, [pc, #104]	; (8003d08 <_dtoa_r+0x320>)
 8003c9e:	2e00      	cmp	r6, #0
 8003ca0:	d14f      	bne.n	8003d42 <_dtoa_r+0x35a>
 8003ca2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003ca6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003caa:	f7fc fd3b 	bl	8000724 <__aeabi_ddiv>
 8003cae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003cb2:	e06e      	b.n	8003d92 <_dtoa_r+0x3aa>
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	9309      	str	r3, [sp, #36]	; 0x24
 8003cb8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003cba:	445b      	add	r3, fp
 8003cbc:	f103 0901 	add.w	r9, r3, #1
 8003cc0:	9304      	str	r3, [sp, #16]
 8003cc2:	464b      	mov	r3, r9
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	bfb8      	it	lt
 8003cc8:	2301      	movlt	r3, #1
 8003cca:	e7b0      	b.n	8003c2e <_dtoa_r+0x246>
 8003ccc:	2300      	movs	r3, #0
 8003cce:	e7a7      	b.n	8003c20 <_dtoa_r+0x238>
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	e7f0      	b.n	8003cb6 <_dtoa_r+0x2ce>
 8003cd4:	f3af 8000 	nop.w
 8003cd8:	636f4361 	.word	0x636f4361
 8003cdc:	3fd287a7 	.word	0x3fd287a7
 8003ce0:	8b60c8b3 	.word	0x8b60c8b3
 8003ce4:	3fc68a28 	.word	0x3fc68a28
 8003ce8:	509f79fb 	.word	0x509f79fb
 8003cec:	3fd34413 	.word	0x3fd34413
 8003cf0:	7ff00000 	.word	0x7ff00000
 8003cf4:	08005283 	.word	0x08005283
 8003cf8:	0800527a 	.word	0x0800527a
 8003cfc:	08005257 	.word	0x08005257
 8003d00:	3ff80000 	.word	0x3ff80000
 8003d04:	080052b0 	.word	0x080052b0
 8003d08:	08005288 	.word	0x08005288
 8003d0c:	2601      	movs	r6, #1
 8003d0e:	2300      	movs	r3, #0
 8003d10:	9609      	str	r6, [sp, #36]	; 0x24
 8003d12:	931e      	str	r3, [sp, #120]	; 0x78
 8003d14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d18:	2200      	movs	r2, #0
 8003d1a:	9304      	str	r3, [sp, #16]
 8003d1c:	4699      	mov	r9, r3
 8003d1e:	2312      	movs	r3, #18
 8003d20:	921f      	str	r2, [sp, #124]	; 0x7c
 8003d22:	e784      	b.n	8003c2e <_dtoa_r+0x246>
 8003d24:	2301      	movs	r3, #1
 8003d26:	9309      	str	r3, [sp, #36]	; 0x24
 8003d28:	e7f4      	b.n	8003d14 <_dtoa_r+0x32c>
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	9304      	str	r3, [sp, #16]
 8003d2e:	4699      	mov	r9, r3
 8003d30:	461a      	mov	r2, r3
 8003d32:	e7f5      	b.n	8003d20 <_dtoa_r+0x338>
 8003d34:	686a      	ldr	r2, [r5, #4]
 8003d36:	0049      	lsls	r1, r1, #1
 8003d38:	3201      	adds	r2, #1
 8003d3a:	606a      	str	r2, [r5, #4]
 8003d3c:	e77b      	b.n	8003c36 <_dtoa_r+0x24e>
 8003d3e:	2502      	movs	r5, #2
 8003d40:	e7ac      	b.n	8003c9c <_dtoa_r+0x2b4>
 8003d42:	07f1      	lsls	r1, r6, #31
 8003d44:	d508      	bpl.n	8003d58 <_dtoa_r+0x370>
 8003d46:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003d4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d4e:	f7fc fbbf 	bl	80004d0 <__aeabi_dmul>
 8003d52:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003d56:	3501      	adds	r5, #1
 8003d58:	1076      	asrs	r6, r6, #1
 8003d5a:	3708      	adds	r7, #8
 8003d5c:	e79f      	b.n	8003c9e <_dtoa_r+0x2b6>
 8003d5e:	f000 80a5 	beq.w	8003eac <_dtoa_r+0x4c4>
 8003d62:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003d66:	f1cb 0600 	rsb	r6, fp, #0
 8003d6a:	4ba2      	ldr	r3, [pc, #648]	; (8003ff4 <_dtoa_r+0x60c>)
 8003d6c:	f006 020f 	and.w	r2, r6, #15
 8003d70:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d78:	f7fc fbaa 	bl	80004d0 <__aeabi_dmul>
 8003d7c:	2502      	movs	r5, #2
 8003d7e:	2300      	movs	r3, #0
 8003d80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003d84:	4f9c      	ldr	r7, [pc, #624]	; (8003ff8 <_dtoa_r+0x610>)
 8003d86:	1136      	asrs	r6, r6, #4
 8003d88:	2e00      	cmp	r6, #0
 8003d8a:	f040 8084 	bne.w	8003e96 <_dtoa_r+0x4ae>
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d18d      	bne.n	8003cae <_dtoa_r+0x2c6>
 8003d92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	f000 808b 	beq.w	8003eb0 <_dtoa_r+0x4c8>
 8003d9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003d9e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003da2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003da6:	2200      	movs	r2, #0
 8003da8:	4b94      	ldr	r3, [pc, #592]	; (8003ffc <_dtoa_r+0x614>)
 8003daa:	f7fc fe03 	bl	80009b4 <__aeabi_dcmplt>
 8003dae:	2800      	cmp	r0, #0
 8003db0:	d07e      	beq.n	8003eb0 <_dtoa_r+0x4c8>
 8003db2:	f1b9 0f00 	cmp.w	r9, #0
 8003db6:	d07b      	beq.n	8003eb0 <_dtoa_r+0x4c8>
 8003db8:	9b04      	ldr	r3, [sp, #16]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	dd37      	ble.n	8003e2e <_dtoa_r+0x446>
 8003dbe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	4b8e      	ldr	r3, [pc, #568]	; (8004000 <_dtoa_r+0x618>)
 8003dc6:	f7fc fb83 	bl	80004d0 <__aeabi_dmul>
 8003dca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003dce:	9e04      	ldr	r6, [sp, #16]
 8003dd0:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8003dd4:	3501      	adds	r5, #1
 8003dd6:	4628      	mov	r0, r5
 8003dd8:	f7fc fb14 	bl	8000404 <__aeabi_i2d>
 8003ddc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003de0:	f7fc fb76 	bl	80004d0 <__aeabi_dmul>
 8003de4:	4b87      	ldr	r3, [pc, #540]	; (8004004 <_dtoa_r+0x61c>)
 8003de6:	2200      	movs	r2, #0
 8003de8:	f7fc f9c0 	bl	800016c <__adddf3>
 8003dec:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003df0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003df2:	f1a3 7550 	sub.w	r5, r3, #54525952	; 0x3400000
 8003df6:	950b      	str	r5, [sp, #44]	; 0x2c
 8003df8:	2e00      	cmp	r6, #0
 8003dfa:	d15c      	bne.n	8003eb6 <_dtoa_r+0x4ce>
 8003dfc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003e00:	2200      	movs	r2, #0
 8003e02:	4b81      	ldr	r3, [pc, #516]	; (8004008 <_dtoa_r+0x620>)
 8003e04:	f7fc f9b0 	bl	8000168 <__aeabi_dsub>
 8003e08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003e0a:	462b      	mov	r3, r5
 8003e0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003e10:	f7fc fdee 	bl	80009f0 <__aeabi_dcmpgt>
 8003e14:	2800      	cmp	r0, #0
 8003e16:	f040 82f7 	bne.w	8004408 <_dtoa_r+0xa20>
 8003e1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003e1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003e20:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8003e24:	f7fc fdc6 	bl	80009b4 <__aeabi_dcmplt>
 8003e28:	2800      	cmp	r0, #0
 8003e2a:	f040 82eb 	bne.w	8004404 <_dtoa_r+0xa1c>
 8003e2e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8003e32:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003e36:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	f2c0 8150 	blt.w	80040de <_dtoa_r+0x6f6>
 8003e3e:	f1bb 0f0e 	cmp.w	fp, #14
 8003e42:	f300 814c 	bgt.w	80040de <_dtoa_r+0x6f6>
 8003e46:	4b6b      	ldr	r3, [pc, #428]	; (8003ff4 <_dtoa_r+0x60c>)
 8003e48:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e50:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003e54:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	f280 80da 	bge.w	8004010 <_dtoa_r+0x628>
 8003e5c:	f1b9 0f00 	cmp.w	r9, #0
 8003e60:	f300 80d6 	bgt.w	8004010 <_dtoa_r+0x628>
 8003e64:	f040 82cd 	bne.w	8004402 <_dtoa_r+0xa1a>
 8003e68:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	4b66      	ldr	r3, [pc, #408]	; (8004008 <_dtoa_r+0x620>)
 8003e70:	f7fc fb2e 	bl	80004d0 <__aeabi_dmul>
 8003e74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003e78:	f7fc fdb0 	bl	80009dc <__aeabi_dcmpge>
 8003e7c:	464e      	mov	r6, r9
 8003e7e:	464f      	mov	r7, r9
 8003e80:	2800      	cmp	r0, #0
 8003e82:	f040 82a4 	bne.w	80043ce <_dtoa_r+0x9e6>
 8003e86:	9b06      	ldr	r3, [sp, #24]
 8003e88:	9a06      	ldr	r2, [sp, #24]
 8003e8a:	1c5d      	adds	r5, r3, #1
 8003e8c:	2331      	movs	r3, #49	; 0x31
 8003e8e:	f10b 0b01 	add.w	fp, fp, #1
 8003e92:	7013      	strb	r3, [r2, #0]
 8003e94:	e29f      	b.n	80043d6 <_dtoa_r+0x9ee>
 8003e96:	07f2      	lsls	r2, r6, #31
 8003e98:	d505      	bpl.n	8003ea6 <_dtoa_r+0x4be>
 8003e9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e9e:	f7fc fb17 	bl	80004d0 <__aeabi_dmul>
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	3501      	adds	r5, #1
 8003ea6:	1076      	asrs	r6, r6, #1
 8003ea8:	3708      	adds	r7, #8
 8003eaa:	e76d      	b.n	8003d88 <_dtoa_r+0x3a0>
 8003eac:	2502      	movs	r5, #2
 8003eae:	e770      	b.n	8003d92 <_dtoa_r+0x3aa>
 8003eb0:	465f      	mov	r7, fp
 8003eb2:	464e      	mov	r6, r9
 8003eb4:	e78f      	b.n	8003dd6 <_dtoa_r+0x3ee>
 8003eb6:	9a06      	ldr	r2, [sp, #24]
 8003eb8:	4b4e      	ldr	r3, [pc, #312]	; (8003ff4 <_dtoa_r+0x60c>)
 8003eba:	4432      	add	r2, r6
 8003ebc:	9211      	str	r2, [sp, #68]	; 0x44
 8003ebe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ec0:	1e71      	subs	r1, r6, #1
 8003ec2:	2a00      	cmp	r2, #0
 8003ec4:	d048      	beq.n	8003f58 <_dtoa_r+0x570>
 8003ec6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8003eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ece:	2000      	movs	r0, #0
 8003ed0:	494e      	ldr	r1, [pc, #312]	; (800400c <_dtoa_r+0x624>)
 8003ed2:	f7fc fc27 	bl	8000724 <__aeabi_ddiv>
 8003ed6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003eda:	f7fc f945 	bl	8000168 <__aeabi_dsub>
 8003ede:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003ee2:	9d06      	ldr	r5, [sp, #24]
 8003ee4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003ee8:	f7fc fda2 	bl	8000a30 <__aeabi_d2iz>
 8003eec:	4606      	mov	r6, r0
 8003eee:	f7fc fa89 	bl	8000404 <__aeabi_i2d>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	460b      	mov	r3, r1
 8003ef6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003efa:	f7fc f935 	bl	8000168 <__aeabi_dsub>
 8003efe:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003f02:	3630      	adds	r6, #48	; 0x30
 8003f04:	f805 6b01 	strb.w	r6, [r5], #1
 8003f08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003f0c:	f7fc fd52 	bl	80009b4 <__aeabi_dcmplt>
 8003f10:	2800      	cmp	r0, #0
 8003f12:	d164      	bne.n	8003fde <_dtoa_r+0x5f6>
 8003f14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003f18:	2000      	movs	r0, #0
 8003f1a:	4938      	ldr	r1, [pc, #224]	; (8003ffc <_dtoa_r+0x614>)
 8003f1c:	f7fc f924 	bl	8000168 <__aeabi_dsub>
 8003f20:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003f24:	f7fc fd46 	bl	80009b4 <__aeabi_dcmplt>
 8003f28:	2800      	cmp	r0, #0
 8003f2a:	f040 80b9 	bne.w	80040a0 <_dtoa_r+0x6b8>
 8003f2e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003f30:	429d      	cmp	r5, r3
 8003f32:	f43f af7c 	beq.w	8003e2e <_dtoa_r+0x446>
 8003f36:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	4b30      	ldr	r3, [pc, #192]	; (8004000 <_dtoa_r+0x618>)
 8003f3e:	f7fc fac7 	bl	80004d0 <__aeabi_dmul>
 8003f42:	2200      	movs	r2, #0
 8003f44:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003f48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003f4c:	4b2c      	ldr	r3, [pc, #176]	; (8004000 <_dtoa_r+0x618>)
 8003f4e:	f7fc fabf 	bl	80004d0 <__aeabi_dmul>
 8003f52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003f56:	e7c5      	b.n	8003ee4 <_dtoa_r+0x4fc>
 8003f58:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8003f5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003f60:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003f64:	f7fc fab4 	bl	80004d0 <__aeabi_dmul>
 8003f68:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003f6c:	9d06      	ldr	r5, [sp, #24]
 8003f6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003f72:	f7fc fd5d 	bl	8000a30 <__aeabi_d2iz>
 8003f76:	4606      	mov	r6, r0
 8003f78:	f7fc fa44 	bl	8000404 <__aeabi_i2d>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	460b      	mov	r3, r1
 8003f80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003f84:	f7fc f8f0 	bl	8000168 <__aeabi_dsub>
 8003f88:	3630      	adds	r6, #48	; 0x30
 8003f8a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003f8c:	f805 6b01 	strb.w	r6, [r5], #1
 8003f90:	42ab      	cmp	r3, r5
 8003f92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003f96:	f04f 0200 	mov.w	r2, #0
 8003f9a:	d124      	bne.n	8003fe6 <_dtoa_r+0x5fe>
 8003f9c:	4b1b      	ldr	r3, [pc, #108]	; (800400c <_dtoa_r+0x624>)
 8003f9e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003fa2:	f7fc f8e3 	bl	800016c <__adddf3>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	460b      	mov	r3, r1
 8003faa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003fae:	f7fc fd1f 	bl	80009f0 <__aeabi_dcmpgt>
 8003fb2:	2800      	cmp	r0, #0
 8003fb4:	d174      	bne.n	80040a0 <_dtoa_r+0x6b8>
 8003fb6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003fba:	2000      	movs	r0, #0
 8003fbc:	4913      	ldr	r1, [pc, #76]	; (800400c <_dtoa_r+0x624>)
 8003fbe:	f7fc f8d3 	bl	8000168 <__aeabi_dsub>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003fca:	f7fc fcf3 	bl	80009b4 <__aeabi_dcmplt>
 8003fce:	2800      	cmp	r0, #0
 8003fd0:	f43f af2d 	beq.w	8003e2e <_dtoa_r+0x446>
 8003fd4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003fd8:	1e6a      	subs	r2, r5, #1
 8003fda:	2b30      	cmp	r3, #48	; 0x30
 8003fdc:	d001      	beq.n	8003fe2 <_dtoa_r+0x5fa>
 8003fde:	46bb      	mov	fp, r7
 8003fe0:	e04d      	b.n	800407e <_dtoa_r+0x696>
 8003fe2:	4615      	mov	r5, r2
 8003fe4:	e7f6      	b.n	8003fd4 <_dtoa_r+0x5ec>
 8003fe6:	4b06      	ldr	r3, [pc, #24]	; (8004000 <_dtoa_r+0x618>)
 8003fe8:	f7fc fa72 	bl	80004d0 <__aeabi_dmul>
 8003fec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003ff0:	e7bd      	b.n	8003f6e <_dtoa_r+0x586>
 8003ff2:	bf00      	nop
 8003ff4:	080052b0 	.word	0x080052b0
 8003ff8:	08005288 	.word	0x08005288
 8003ffc:	3ff00000 	.word	0x3ff00000
 8004000:	40240000 	.word	0x40240000
 8004004:	401c0000 	.word	0x401c0000
 8004008:	40140000 	.word	0x40140000
 800400c:	3fe00000 	.word	0x3fe00000
 8004010:	9d06      	ldr	r5, [sp, #24]
 8004012:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004016:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800401a:	4630      	mov	r0, r6
 800401c:	4639      	mov	r1, r7
 800401e:	f7fc fb81 	bl	8000724 <__aeabi_ddiv>
 8004022:	f7fc fd05 	bl	8000a30 <__aeabi_d2iz>
 8004026:	4680      	mov	r8, r0
 8004028:	f7fc f9ec 	bl	8000404 <__aeabi_i2d>
 800402c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004030:	f7fc fa4e 	bl	80004d0 <__aeabi_dmul>
 8004034:	4602      	mov	r2, r0
 8004036:	460b      	mov	r3, r1
 8004038:	4630      	mov	r0, r6
 800403a:	4639      	mov	r1, r7
 800403c:	f7fc f894 	bl	8000168 <__aeabi_dsub>
 8004040:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8004044:	f805 6b01 	strb.w	r6, [r5], #1
 8004048:	9e06      	ldr	r6, [sp, #24]
 800404a:	4602      	mov	r2, r0
 800404c:	1bae      	subs	r6, r5, r6
 800404e:	45b1      	cmp	r9, r6
 8004050:	460b      	mov	r3, r1
 8004052:	d137      	bne.n	80040c4 <_dtoa_r+0x6dc>
 8004054:	f7fc f88a 	bl	800016c <__adddf3>
 8004058:	4606      	mov	r6, r0
 800405a:	460f      	mov	r7, r1
 800405c:	4602      	mov	r2, r0
 800405e:	460b      	mov	r3, r1
 8004060:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004064:	f7fc fca6 	bl	80009b4 <__aeabi_dcmplt>
 8004068:	b9c8      	cbnz	r0, 800409e <_dtoa_r+0x6b6>
 800406a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800406e:	4632      	mov	r2, r6
 8004070:	463b      	mov	r3, r7
 8004072:	f7fc fc95 	bl	80009a0 <__aeabi_dcmpeq>
 8004076:	b110      	cbz	r0, 800407e <_dtoa_r+0x696>
 8004078:	f018 0f01 	tst.w	r8, #1
 800407c:	d10f      	bne.n	800409e <_dtoa_r+0x6b6>
 800407e:	4651      	mov	r1, sl
 8004080:	4620      	mov	r0, r4
 8004082:	f000 fae8 	bl	8004656 <_Bfree>
 8004086:	2300      	movs	r3, #0
 8004088:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800408a:	702b      	strb	r3, [r5, #0]
 800408c:	f10b 0301 	add.w	r3, fp, #1
 8004090:	6013      	str	r3, [r2, #0]
 8004092:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004094:	2b00      	cmp	r3, #0
 8004096:	f43f acec 	beq.w	8003a72 <_dtoa_r+0x8a>
 800409a:	601d      	str	r5, [r3, #0]
 800409c:	e4e9      	b.n	8003a72 <_dtoa_r+0x8a>
 800409e:	465f      	mov	r7, fp
 80040a0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80040a4:	1e6b      	subs	r3, r5, #1
 80040a6:	2a39      	cmp	r2, #57	; 0x39
 80040a8:	d106      	bne.n	80040b8 <_dtoa_r+0x6d0>
 80040aa:	9a06      	ldr	r2, [sp, #24]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d107      	bne.n	80040c0 <_dtoa_r+0x6d8>
 80040b0:	2330      	movs	r3, #48	; 0x30
 80040b2:	7013      	strb	r3, [r2, #0]
 80040b4:	4613      	mov	r3, r2
 80040b6:	3701      	adds	r7, #1
 80040b8:	781a      	ldrb	r2, [r3, #0]
 80040ba:	3201      	adds	r2, #1
 80040bc:	701a      	strb	r2, [r3, #0]
 80040be:	e78e      	b.n	8003fde <_dtoa_r+0x5f6>
 80040c0:	461d      	mov	r5, r3
 80040c2:	e7ed      	b.n	80040a0 <_dtoa_r+0x6b8>
 80040c4:	2200      	movs	r2, #0
 80040c6:	4bb5      	ldr	r3, [pc, #724]	; (800439c <_dtoa_r+0x9b4>)
 80040c8:	f7fc fa02 	bl	80004d0 <__aeabi_dmul>
 80040cc:	2200      	movs	r2, #0
 80040ce:	2300      	movs	r3, #0
 80040d0:	4606      	mov	r6, r0
 80040d2:	460f      	mov	r7, r1
 80040d4:	f7fc fc64 	bl	80009a0 <__aeabi_dcmpeq>
 80040d8:	2800      	cmp	r0, #0
 80040da:	d09c      	beq.n	8004016 <_dtoa_r+0x62e>
 80040dc:	e7cf      	b.n	800407e <_dtoa_r+0x696>
 80040de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80040e0:	2a00      	cmp	r2, #0
 80040e2:	f000 8129 	beq.w	8004338 <_dtoa_r+0x950>
 80040e6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80040e8:	2a01      	cmp	r2, #1
 80040ea:	f300 810e 	bgt.w	800430a <_dtoa_r+0x922>
 80040ee:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80040f0:	2a00      	cmp	r2, #0
 80040f2:	f000 8106 	beq.w	8004302 <_dtoa_r+0x91a>
 80040f6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80040fa:	4645      	mov	r5, r8
 80040fc:	9e08      	ldr	r6, [sp, #32]
 80040fe:	9a07      	ldr	r2, [sp, #28]
 8004100:	2101      	movs	r1, #1
 8004102:	441a      	add	r2, r3
 8004104:	4620      	mov	r0, r4
 8004106:	4498      	add	r8, r3
 8004108:	9207      	str	r2, [sp, #28]
 800410a:	f000 fb44 	bl	8004796 <__i2b>
 800410e:	4607      	mov	r7, r0
 8004110:	2d00      	cmp	r5, #0
 8004112:	dd0b      	ble.n	800412c <_dtoa_r+0x744>
 8004114:	9b07      	ldr	r3, [sp, #28]
 8004116:	2b00      	cmp	r3, #0
 8004118:	dd08      	ble.n	800412c <_dtoa_r+0x744>
 800411a:	42ab      	cmp	r3, r5
 800411c:	bfa8      	it	ge
 800411e:	462b      	movge	r3, r5
 8004120:	9a07      	ldr	r2, [sp, #28]
 8004122:	eba8 0803 	sub.w	r8, r8, r3
 8004126:	1aed      	subs	r5, r5, r3
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	9307      	str	r3, [sp, #28]
 800412c:	9b08      	ldr	r3, [sp, #32]
 800412e:	b1fb      	cbz	r3, 8004170 <_dtoa_r+0x788>
 8004130:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004132:	2b00      	cmp	r3, #0
 8004134:	f000 8104 	beq.w	8004340 <_dtoa_r+0x958>
 8004138:	2e00      	cmp	r6, #0
 800413a:	dd11      	ble.n	8004160 <_dtoa_r+0x778>
 800413c:	4639      	mov	r1, r7
 800413e:	4632      	mov	r2, r6
 8004140:	4620      	mov	r0, r4
 8004142:	f000 fbbd 	bl	80048c0 <__pow5mult>
 8004146:	4652      	mov	r2, sl
 8004148:	4601      	mov	r1, r0
 800414a:	4607      	mov	r7, r0
 800414c:	4620      	mov	r0, r4
 800414e:	f000 fb2b 	bl	80047a8 <__multiply>
 8004152:	4651      	mov	r1, sl
 8004154:	900a      	str	r0, [sp, #40]	; 0x28
 8004156:	4620      	mov	r0, r4
 8004158:	f000 fa7d 	bl	8004656 <_Bfree>
 800415c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800415e:	469a      	mov	sl, r3
 8004160:	9b08      	ldr	r3, [sp, #32]
 8004162:	1b9a      	subs	r2, r3, r6
 8004164:	d004      	beq.n	8004170 <_dtoa_r+0x788>
 8004166:	4651      	mov	r1, sl
 8004168:	4620      	mov	r0, r4
 800416a:	f000 fba9 	bl	80048c0 <__pow5mult>
 800416e:	4682      	mov	sl, r0
 8004170:	2101      	movs	r1, #1
 8004172:	4620      	mov	r0, r4
 8004174:	f000 fb0f 	bl	8004796 <__i2b>
 8004178:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800417a:	4606      	mov	r6, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	f340 80e1 	ble.w	8004344 <_dtoa_r+0x95c>
 8004182:	461a      	mov	r2, r3
 8004184:	4601      	mov	r1, r0
 8004186:	4620      	mov	r0, r4
 8004188:	f000 fb9a 	bl	80048c0 <__pow5mult>
 800418c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800418e:	4606      	mov	r6, r0
 8004190:	2b01      	cmp	r3, #1
 8004192:	f340 80da 	ble.w	800434a <_dtoa_r+0x962>
 8004196:	2300      	movs	r3, #0
 8004198:	9308      	str	r3, [sp, #32]
 800419a:	6933      	ldr	r3, [r6, #16]
 800419c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80041a0:	6918      	ldr	r0, [r3, #16]
 80041a2:	f000 faaa 	bl	80046fa <__hi0bits>
 80041a6:	f1c0 0020 	rsb	r0, r0, #32
 80041aa:	9b07      	ldr	r3, [sp, #28]
 80041ac:	4418      	add	r0, r3
 80041ae:	f010 001f 	ands.w	r0, r0, #31
 80041b2:	f000 80f0 	beq.w	8004396 <_dtoa_r+0x9ae>
 80041b6:	f1c0 0320 	rsb	r3, r0, #32
 80041ba:	2b04      	cmp	r3, #4
 80041bc:	f340 80e2 	ble.w	8004384 <_dtoa_r+0x99c>
 80041c0:	9b07      	ldr	r3, [sp, #28]
 80041c2:	f1c0 001c 	rsb	r0, r0, #28
 80041c6:	4480      	add	r8, r0
 80041c8:	4405      	add	r5, r0
 80041ca:	4403      	add	r3, r0
 80041cc:	9307      	str	r3, [sp, #28]
 80041ce:	f1b8 0f00 	cmp.w	r8, #0
 80041d2:	dd05      	ble.n	80041e0 <_dtoa_r+0x7f8>
 80041d4:	4651      	mov	r1, sl
 80041d6:	4642      	mov	r2, r8
 80041d8:	4620      	mov	r0, r4
 80041da:	f000 fbbf 	bl	800495c <__lshift>
 80041de:	4682      	mov	sl, r0
 80041e0:	9b07      	ldr	r3, [sp, #28]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	dd05      	ble.n	80041f2 <_dtoa_r+0x80a>
 80041e6:	4631      	mov	r1, r6
 80041e8:	461a      	mov	r2, r3
 80041ea:	4620      	mov	r0, r4
 80041ec:	f000 fbb6 	bl	800495c <__lshift>
 80041f0:	4606      	mov	r6, r0
 80041f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	f000 80d3 	beq.w	80043a0 <_dtoa_r+0x9b8>
 80041fa:	4631      	mov	r1, r6
 80041fc:	4650      	mov	r0, sl
 80041fe:	f000 fbfe 	bl	80049fe <__mcmp>
 8004202:	2800      	cmp	r0, #0
 8004204:	f280 80cc 	bge.w	80043a0 <_dtoa_r+0x9b8>
 8004208:	2300      	movs	r3, #0
 800420a:	4651      	mov	r1, sl
 800420c:	220a      	movs	r2, #10
 800420e:	4620      	mov	r0, r4
 8004210:	f000 fa38 	bl	8004684 <__multadd>
 8004214:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004216:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800421a:	4682      	mov	sl, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	f000 81a9 	beq.w	8004574 <_dtoa_r+0xb8c>
 8004222:	2300      	movs	r3, #0
 8004224:	4639      	mov	r1, r7
 8004226:	220a      	movs	r2, #10
 8004228:	4620      	mov	r0, r4
 800422a:	f000 fa2b 	bl	8004684 <__multadd>
 800422e:	9b04      	ldr	r3, [sp, #16]
 8004230:	4607      	mov	r7, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	dc03      	bgt.n	800423e <_dtoa_r+0x856>
 8004236:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004238:	2b02      	cmp	r3, #2
 800423a:	f300 80b9 	bgt.w	80043b0 <_dtoa_r+0x9c8>
 800423e:	2d00      	cmp	r5, #0
 8004240:	dd05      	ble.n	800424e <_dtoa_r+0x866>
 8004242:	4639      	mov	r1, r7
 8004244:	462a      	mov	r2, r5
 8004246:	4620      	mov	r0, r4
 8004248:	f000 fb88 	bl	800495c <__lshift>
 800424c:	4607      	mov	r7, r0
 800424e:	9b08      	ldr	r3, [sp, #32]
 8004250:	2b00      	cmp	r3, #0
 8004252:	f000 8110 	beq.w	8004476 <_dtoa_r+0xa8e>
 8004256:	6879      	ldr	r1, [r7, #4]
 8004258:	4620      	mov	r0, r4
 800425a:	f000 f9c8 	bl	80045ee <_Balloc>
 800425e:	4605      	mov	r5, r0
 8004260:	693a      	ldr	r2, [r7, #16]
 8004262:	f107 010c 	add.w	r1, r7, #12
 8004266:	3202      	adds	r2, #2
 8004268:	0092      	lsls	r2, r2, #2
 800426a:	300c      	adds	r0, #12
 800426c:	f000 f9b4 	bl	80045d8 <memcpy>
 8004270:	2201      	movs	r2, #1
 8004272:	4629      	mov	r1, r5
 8004274:	4620      	mov	r0, r4
 8004276:	f000 fb71 	bl	800495c <__lshift>
 800427a:	9707      	str	r7, [sp, #28]
 800427c:	4607      	mov	r7, r0
 800427e:	9b02      	ldr	r3, [sp, #8]
 8004280:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8004284:	f003 0301 	and.w	r3, r3, #1
 8004288:	9308      	str	r3, [sp, #32]
 800428a:	4631      	mov	r1, r6
 800428c:	4650      	mov	r0, sl
 800428e:	f7ff fb1f 	bl	80038d0 <quorem>
 8004292:	9907      	ldr	r1, [sp, #28]
 8004294:	4605      	mov	r5, r0
 8004296:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800429a:	4650      	mov	r0, sl
 800429c:	f000 fbaf 	bl	80049fe <__mcmp>
 80042a0:	463a      	mov	r2, r7
 80042a2:	9002      	str	r0, [sp, #8]
 80042a4:	4631      	mov	r1, r6
 80042a6:	4620      	mov	r0, r4
 80042a8:	f000 fbc3 	bl	8004a32 <__mdiff>
 80042ac:	68c3      	ldr	r3, [r0, #12]
 80042ae:	4602      	mov	r2, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	f040 80e2 	bne.w	800447a <_dtoa_r+0xa92>
 80042b6:	4601      	mov	r1, r0
 80042b8:	9009      	str	r0, [sp, #36]	; 0x24
 80042ba:	4650      	mov	r0, sl
 80042bc:	f000 fb9f 	bl	80049fe <__mcmp>
 80042c0:	4603      	mov	r3, r0
 80042c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80042c4:	4611      	mov	r1, r2
 80042c6:	4620      	mov	r0, r4
 80042c8:	9309      	str	r3, [sp, #36]	; 0x24
 80042ca:	f000 f9c4 	bl	8004656 <_Bfree>
 80042ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	f040 80d4 	bne.w	800447e <_dtoa_r+0xa96>
 80042d6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80042d8:	2a00      	cmp	r2, #0
 80042da:	f040 80d0 	bne.w	800447e <_dtoa_r+0xa96>
 80042de:	9a08      	ldr	r2, [sp, #32]
 80042e0:	2a00      	cmp	r2, #0
 80042e2:	f040 80cc 	bne.w	800447e <_dtoa_r+0xa96>
 80042e6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80042ea:	f000 80e8 	beq.w	80044be <_dtoa_r+0xad6>
 80042ee:	9b02      	ldr	r3, [sp, #8]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	dd01      	ble.n	80042f8 <_dtoa_r+0x910>
 80042f4:	f105 0931 	add.w	r9, r5, #49	; 0x31
 80042f8:	f108 0501 	add.w	r5, r8, #1
 80042fc:	f888 9000 	strb.w	r9, [r8]
 8004300:	e06b      	b.n	80043da <_dtoa_r+0x9f2>
 8004302:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004304:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004308:	e6f7      	b.n	80040fa <_dtoa_r+0x712>
 800430a:	9b08      	ldr	r3, [sp, #32]
 800430c:	f109 36ff 	add.w	r6, r9, #4294967295	; 0xffffffff
 8004310:	42b3      	cmp	r3, r6
 8004312:	bfb7      	itett	lt
 8004314:	9b08      	ldrlt	r3, [sp, #32]
 8004316:	1b9e      	subge	r6, r3, r6
 8004318:	1af2      	sublt	r2, r6, r3
 800431a:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800431c:	bfbf      	itttt	lt
 800431e:	9608      	strlt	r6, [sp, #32]
 8004320:	189b      	addlt	r3, r3, r2
 8004322:	930c      	strlt	r3, [sp, #48]	; 0x30
 8004324:	2600      	movlt	r6, #0
 8004326:	f1b9 0f00 	cmp.w	r9, #0
 800432a:	bfb9      	ittee	lt
 800432c:	eba8 0509 	sublt.w	r5, r8, r9
 8004330:	2300      	movlt	r3, #0
 8004332:	4645      	movge	r5, r8
 8004334:	464b      	movge	r3, r9
 8004336:	e6e2      	b.n	80040fe <_dtoa_r+0x716>
 8004338:	9e08      	ldr	r6, [sp, #32]
 800433a:	4645      	mov	r5, r8
 800433c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800433e:	e6e7      	b.n	8004110 <_dtoa_r+0x728>
 8004340:	9a08      	ldr	r2, [sp, #32]
 8004342:	e710      	b.n	8004166 <_dtoa_r+0x77e>
 8004344:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004346:	2b01      	cmp	r3, #1
 8004348:	dc18      	bgt.n	800437c <_dtoa_r+0x994>
 800434a:	9b02      	ldr	r3, [sp, #8]
 800434c:	b9b3      	cbnz	r3, 800437c <_dtoa_r+0x994>
 800434e:	9b03      	ldr	r3, [sp, #12]
 8004350:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004354:	b9a3      	cbnz	r3, 8004380 <_dtoa_r+0x998>
 8004356:	9b03      	ldr	r3, [sp, #12]
 8004358:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800435c:	0d1b      	lsrs	r3, r3, #20
 800435e:	051b      	lsls	r3, r3, #20
 8004360:	b12b      	cbz	r3, 800436e <_dtoa_r+0x986>
 8004362:	9b07      	ldr	r3, [sp, #28]
 8004364:	f108 0801 	add.w	r8, r8, #1
 8004368:	3301      	adds	r3, #1
 800436a:	9307      	str	r3, [sp, #28]
 800436c:	2301      	movs	r3, #1
 800436e:	9308      	str	r3, [sp, #32]
 8004370:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004372:	2b00      	cmp	r3, #0
 8004374:	f47f af11 	bne.w	800419a <_dtoa_r+0x7b2>
 8004378:	2001      	movs	r0, #1
 800437a:	e716      	b.n	80041aa <_dtoa_r+0x7c2>
 800437c:	2300      	movs	r3, #0
 800437e:	e7f6      	b.n	800436e <_dtoa_r+0x986>
 8004380:	9b02      	ldr	r3, [sp, #8]
 8004382:	e7f4      	b.n	800436e <_dtoa_r+0x986>
 8004384:	f43f af23 	beq.w	80041ce <_dtoa_r+0x7e6>
 8004388:	9a07      	ldr	r2, [sp, #28]
 800438a:	331c      	adds	r3, #28
 800438c:	441a      	add	r2, r3
 800438e:	4498      	add	r8, r3
 8004390:	441d      	add	r5, r3
 8004392:	4613      	mov	r3, r2
 8004394:	e71a      	b.n	80041cc <_dtoa_r+0x7e4>
 8004396:	4603      	mov	r3, r0
 8004398:	e7f6      	b.n	8004388 <_dtoa_r+0x9a0>
 800439a:	bf00      	nop
 800439c:	40240000 	.word	0x40240000
 80043a0:	f1b9 0f00 	cmp.w	r9, #0
 80043a4:	dc33      	bgt.n	800440e <_dtoa_r+0xa26>
 80043a6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	dd30      	ble.n	800440e <_dtoa_r+0xa26>
 80043ac:	f8cd 9010 	str.w	r9, [sp, #16]
 80043b0:	9b04      	ldr	r3, [sp, #16]
 80043b2:	b963      	cbnz	r3, 80043ce <_dtoa_r+0x9e6>
 80043b4:	4631      	mov	r1, r6
 80043b6:	2205      	movs	r2, #5
 80043b8:	4620      	mov	r0, r4
 80043ba:	f000 f963 	bl	8004684 <__multadd>
 80043be:	4601      	mov	r1, r0
 80043c0:	4606      	mov	r6, r0
 80043c2:	4650      	mov	r0, sl
 80043c4:	f000 fb1b 	bl	80049fe <__mcmp>
 80043c8:	2800      	cmp	r0, #0
 80043ca:	f73f ad5c 	bgt.w	8003e86 <_dtoa_r+0x49e>
 80043ce:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80043d0:	9d06      	ldr	r5, [sp, #24]
 80043d2:	ea6f 0b03 	mvn.w	fp, r3
 80043d6:	2300      	movs	r3, #0
 80043d8:	9307      	str	r3, [sp, #28]
 80043da:	4631      	mov	r1, r6
 80043dc:	4620      	mov	r0, r4
 80043de:	f000 f93a 	bl	8004656 <_Bfree>
 80043e2:	2f00      	cmp	r7, #0
 80043e4:	f43f ae4b 	beq.w	800407e <_dtoa_r+0x696>
 80043e8:	9b07      	ldr	r3, [sp, #28]
 80043ea:	b12b      	cbz	r3, 80043f8 <_dtoa_r+0xa10>
 80043ec:	42bb      	cmp	r3, r7
 80043ee:	d003      	beq.n	80043f8 <_dtoa_r+0xa10>
 80043f0:	4619      	mov	r1, r3
 80043f2:	4620      	mov	r0, r4
 80043f4:	f000 f92f 	bl	8004656 <_Bfree>
 80043f8:	4639      	mov	r1, r7
 80043fa:	4620      	mov	r0, r4
 80043fc:	f000 f92b 	bl	8004656 <_Bfree>
 8004400:	e63d      	b.n	800407e <_dtoa_r+0x696>
 8004402:	2600      	movs	r6, #0
 8004404:	4637      	mov	r7, r6
 8004406:	e7e2      	b.n	80043ce <_dtoa_r+0x9e6>
 8004408:	46bb      	mov	fp, r7
 800440a:	4637      	mov	r7, r6
 800440c:	e53b      	b.n	8003e86 <_dtoa_r+0x49e>
 800440e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004410:	f8cd 9010 	str.w	r9, [sp, #16]
 8004414:	2b00      	cmp	r3, #0
 8004416:	f47f af12 	bne.w	800423e <_dtoa_r+0x856>
 800441a:	9d06      	ldr	r5, [sp, #24]
 800441c:	4631      	mov	r1, r6
 800441e:	4650      	mov	r0, sl
 8004420:	f7ff fa56 	bl	80038d0 <quorem>
 8004424:	9b06      	ldr	r3, [sp, #24]
 8004426:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800442a:	f805 9b01 	strb.w	r9, [r5], #1
 800442e:	9a04      	ldr	r2, [sp, #16]
 8004430:	1aeb      	subs	r3, r5, r3
 8004432:	429a      	cmp	r2, r3
 8004434:	f300 8081 	bgt.w	800453a <_dtoa_r+0xb52>
 8004438:	9b06      	ldr	r3, [sp, #24]
 800443a:	2a01      	cmp	r2, #1
 800443c:	bfac      	ite	ge
 800443e:	189b      	addge	r3, r3, r2
 8004440:	3301      	addlt	r3, #1
 8004442:	4698      	mov	r8, r3
 8004444:	2300      	movs	r3, #0
 8004446:	9307      	str	r3, [sp, #28]
 8004448:	4651      	mov	r1, sl
 800444a:	2201      	movs	r2, #1
 800444c:	4620      	mov	r0, r4
 800444e:	f000 fa85 	bl	800495c <__lshift>
 8004452:	4631      	mov	r1, r6
 8004454:	4682      	mov	sl, r0
 8004456:	f000 fad2 	bl	80049fe <__mcmp>
 800445a:	2800      	cmp	r0, #0
 800445c:	dc34      	bgt.n	80044c8 <_dtoa_r+0xae0>
 800445e:	d102      	bne.n	8004466 <_dtoa_r+0xa7e>
 8004460:	f019 0f01 	tst.w	r9, #1
 8004464:	d130      	bne.n	80044c8 <_dtoa_r+0xae0>
 8004466:	4645      	mov	r5, r8
 8004468:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800446c:	1e6a      	subs	r2, r5, #1
 800446e:	2b30      	cmp	r3, #48	; 0x30
 8004470:	d1b3      	bne.n	80043da <_dtoa_r+0x9f2>
 8004472:	4615      	mov	r5, r2
 8004474:	e7f8      	b.n	8004468 <_dtoa_r+0xa80>
 8004476:	4638      	mov	r0, r7
 8004478:	e6ff      	b.n	800427a <_dtoa_r+0x892>
 800447a:	2301      	movs	r3, #1
 800447c:	e722      	b.n	80042c4 <_dtoa_r+0x8dc>
 800447e:	9a02      	ldr	r2, [sp, #8]
 8004480:	2a00      	cmp	r2, #0
 8004482:	db04      	blt.n	800448e <_dtoa_r+0xaa6>
 8004484:	d128      	bne.n	80044d8 <_dtoa_r+0xaf0>
 8004486:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004488:	bb32      	cbnz	r2, 80044d8 <_dtoa_r+0xaf0>
 800448a:	9a08      	ldr	r2, [sp, #32]
 800448c:	bb22      	cbnz	r2, 80044d8 <_dtoa_r+0xaf0>
 800448e:	2b00      	cmp	r3, #0
 8004490:	f77f af32 	ble.w	80042f8 <_dtoa_r+0x910>
 8004494:	4651      	mov	r1, sl
 8004496:	2201      	movs	r2, #1
 8004498:	4620      	mov	r0, r4
 800449a:	f000 fa5f 	bl	800495c <__lshift>
 800449e:	4631      	mov	r1, r6
 80044a0:	4682      	mov	sl, r0
 80044a2:	f000 faac 	bl	80049fe <__mcmp>
 80044a6:	2800      	cmp	r0, #0
 80044a8:	dc05      	bgt.n	80044b6 <_dtoa_r+0xace>
 80044aa:	f47f af25 	bne.w	80042f8 <_dtoa_r+0x910>
 80044ae:	f019 0f01 	tst.w	r9, #1
 80044b2:	f43f af21 	beq.w	80042f8 <_dtoa_r+0x910>
 80044b6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80044ba:	f47f af1b 	bne.w	80042f4 <_dtoa_r+0x90c>
 80044be:	2339      	movs	r3, #57	; 0x39
 80044c0:	f108 0801 	add.w	r8, r8, #1
 80044c4:	f808 3c01 	strb.w	r3, [r8, #-1]
 80044c8:	4645      	mov	r5, r8
 80044ca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80044ce:	1e6a      	subs	r2, r5, #1
 80044d0:	2b39      	cmp	r3, #57	; 0x39
 80044d2:	d03a      	beq.n	800454a <_dtoa_r+0xb62>
 80044d4:	3301      	adds	r3, #1
 80044d6:	e03f      	b.n	8004558 <_dtoa_r+0xb70>
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f108 0501 	add.w	r5, r8, #1
 80044de:	dd05      	ble.n	80044ec <_dtoa_r+0xb04>
 80044e0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80044e4:	d0eb      	beq.n	80044be <_dtoa_r+0xad6>
 80044e6:	f109 0901 	add.w	r9, r9, #1
 80044ea:	e707      	b.n	80042fc <_dtoa_r+0x914>
 80044ec:	9b06      	ldr	r3, [sp, #24]
 80044ee:	9a04      	ldr	r2, [sp, #16]
 80044f0:	1aeb      	subs	r3, r5, r3
 80044f2:	4293      	cmp	r3, r2
 80044f4:	46a8      	mov	r8, r5
 80044f6:	f805 9c01 	strb.w	r9, [r5, #-1]
 80044fa:	d0a5      	beq.n	8004448 <_dtoa_r+0xa60>
 80044fc:	4651      	mov	r1, sl
 80044fe:	2300      	movs	r3, #0
 8004500:	220a      	movs	r2, #10
 8004502:	4620      	mov	r0, r4
 8004504:	f000 f8be 	bl	8004684 <__multadd>
 8004508:	9b07      	ldr	r3, [sp, #28]
 800450a:	4682      	mov	sl, r0
 800450c:	42bb      	cmp	r3, r7
 800450e:	f04f 020a 	mov.w	r2, #10
 8004512:	f04f 0300 	mov.w	r3, #0
 8004516:	9907      	ldr	r1, [sp, #28]
 8004518:	4620      	mov	r0, r4
 800451a:	d104      	bne.n	8004526 <_dtoa_r+0xb3e>
 800451c:	f000 f8b2 	bl	8004684 <__multadd>
 8004520:	9007      	str	r0, [sp, #28]
 8004522:	4607      	mov	r7, r0
 8004524:	e6b1      	b.n	800428a <_dtoa_r+0x8a2>
 8004526:	f000 f8ad 	bl	8004684 <__multadd>
 800452a:	2300      	movs	r3, #0
 800452c:	9007      	str	r0, [sp, #28]
 800452e:	220a      	movs	r2, #10
 8004530:	4639      	mov	r1, r7
 8004532:	4620      	mov	r0, r4
 8004534:	f000 f8a6 	bl	8004684 <__multadd>
 8004538:	e7f3      	b.n	8004522 <_dtoa_r+0xb3a>
 800453a:	4651      	mov	r1, sl
 800453c:	2300      	movs	r3, #0
 800453e:	220a      	movs	r2, #10
 8004540:	4620      	mov	r0, r4
 8004542:	f000 f89f 	bl	8004684 <__multadd>
 8004546:	4682      	mov	sl, r0
 8004548:	e768      	b.n	800441c <_dtoa_r+0xa34>
 800454a:	9b06      	ldr	r3, [sp, #24]
 800454c:	4293      	cmp	r3, r2
 800454e:	d105      	bne.n	800455c <_dtoa_r+0xb74>
 8004550:	2331      	movs	r3, #49	; 0x31
 8004552:	9a06      	ldr	r2, [sp, #24]
 8004554:	f10b 0b01 	add.w	fp, fp, #1
 8004558:	7013      	strb	r3, [r2, #0]
 800455a:	e73e      	b.n	80043da <_dtoa_r+0x9f2>
 800455c:	4615      	mov	r5, r2
 800455e:	e7b4      	b.n	80044ca <_dtoa_r+0xae2>
 8004560:	4b09      	ldr	r3, [pc, #36]	; (8004588 <_dtoa_r+0xba0>)
 8004562:	f7ff baa3 	b.w	8003aac <_dtoa_r+0xc4>
 8004566:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004568:	2b00      	cmp	r3, #0
 800456a:	f47f aa7d 	bne.w	8003a68 <_dtoa_r+0x80>
 800456e:	4b07      	ldr	r3, [pc, #28]	; (800458c <_dtoa_r+0xba4>)
 8004570:	f7ff ba9c 	b.w	8003aac <_dtoa_r+0xc4>
 8004574:	9b04      	ldr	r3, [sp, #16]
 8004576:	2b00      	cmp	r3, #0
 8004578:	f73f af4f 	bgt.w	800441a <_dtoa_r+0xa32>
 800457c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800457e:	2b02      	cmp	r3, #2
 8004580:	f77f af4b 	ble.w	800441a <_dtoa_r+0xa32>
 8004584:	e714      	b.n	80043b0 <_dtoa_r+0x9c8>
 8004586:	bf00      	nop
 8004588:	08005256 	.word	0x08005256
 800458c:	0800527a 	.word	0x0800527a

08004590 <_localeconv_r>:
 8004590:	4b04      	ldr	r3, [pc, #16]	; (80045a4 <_localeconv_r+0x14>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	6a18      	ldr	r0, [r3, #32]
 8004596:	4b04      	ldr	r3, [pc, #16]	; (80045a8 <_localeconv_r+0x18>)
 8004598:	2800      	cmp	r0, #0
 800459a:	bf08      	it	eq
 800459c:	4618      	moveq	r0, r3
 800459e:	30f0      	adds	r0, #240	; 0xf0
 80045a0:	4770      	bx	lr
 80045a2:	bf00      	nop
 80045a4:	2000000c 	.word	0x2000000c
 80045a8:	20000070 	.word	0x20000070

080045ac <malloc>:
 80045ac:	4b02      	ldr	r3, [pc, #8]	; (80045b8 <malloc+0xc>)
 80045ae:	4601      	mov	r1, r0
 80045b0:	6818      	ldr	r0, [r3, #0]
 80045b2:	f000 bb47 	b.w	8004c44 <_malloc_r>
 80045b6:	bf00      	nop
 80045b8:	2000000c 	.word	0x2000000c

080045bc <memchr>:
 80045bc:	b510      	push	{r4, lr}
 80045be:	b2c9      	uxtb	r1, r1
 80045c0:	4402      	add	r2, r0
 80045c2:	4290      	cmp	r0, r2
 80045c4:	4603      	mov	r3, r0
 80045c6:	d101      	bne.n	80045cc <memchr+0x10>
 80045c8:	2000      	movs	r0, #0
 80045ca:	bd10      	pop	{r4, pc}
 80045cc:	781c      	ldrb	r4, [r3, #0]
 80045ce:	3001      	adds	r0, #1
 80045d0:	428c      	cmp	r4, r1
 80045d2:	d1f6      	bne.n	80045c2 <memchr+0x6>
 80045d4:	4618      	mov	r0, r3
 80045d6:	bd10      	pop	{r4, pc}

080045d8 <memcpy>:
 80045d8:	b510      	push	{r4, lr}
 80045da:	1e43      	subs	r3, r0, #1
 80045dc:	440a      	add	r2, r1
 80045de:	4291      	cmp	r1, r2
 80045e0:	d100      	bne.n	80045e4 <memcpy+0xc>
 80045e2:	bd10      	pop	{r4, pc}
 80045e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80045e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80045ec:	e7f7      	b.n	80045de <memcpy+0x6>

080045ee <_Balloc>:
 80045ee:	b570      	push	{r4, r5, r6, lr}
 80045f0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80045f2:	4604      	mov	r4, r0
 80045f4:	460e      	mov	r6, r1
 80045f6:	b93d      	cbnz	r5, 8004608 <_Balloc+0x1a>
 80045f8:	2010      	movs	r0, #16
 80045fa:	f7ff ffd7 	bl	80045ac <malloc>
 80045fe:	6260      	str	r0, [r4, #36]	; 0x24
 8004600:	6045      	str	r5, [r0, #4]
 8004602:	6085      	str	r5, [r0, #8]
 8004604:	6005      	str	r5, [r0, #0]
 8004606:	60c5      	str	r5, [r0, #12]
 8004608:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800460a:	68eb      	ldr	r3, [r5, #12]
 800460c:	b183      	cbz	r3, 8004630 <_Balloc+0x42>
 800460e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004616:	b9b8      	cbnz	r0, 8004648 <_Balloc+0x5a>
 8004618:	2101      	movs	r1, #1
 800461a:	fa01 f506 	lsl.w	r5, r1, r6
 800461e:	1d6a      	adds	r2, r5, #5
 8004620:	0092      	lsls	r2, r2, #2
 8004622:	4620      	mov	r0, r4
 8004624:	f000 fab3 	bl	8004b8e <_calloc_r>
 8004628:	b160      	cbz	r0, 8004644 <_Balloc+0x56>
 800462a:	6046      	str	r6, [r0, #4]
 800462c:	6085      	str	r5, [r0, #8]
 800462e:	e00e      	b.n	800464e <_Balloc+0x60>
 8004630:	2221      	movs	r2, #33	; 0x21
 8004632:	2104      	movs	r1, #4
 8004634:	4620      	mov	r0, r4
 8004636:	f000 faaa 	bl	8004b8e <_calloc_r>
 800463a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800463c:	60e8      	str	r0, [r5, #12]
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d1e4      	bne.n	800460e <_Balloc+0x20>
 8004644:	2000      	movs	r0, #0
 8004646:	bd70      	pop	{r4, r5, r6, pc}
 8004648:	6802      	ldr	r2, [r0, #0]
 800464a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800464e:	2300      	movs	r3, #0
 8004650:	6103      	str	r3, [r0, #16]
 8004652:	60c3      	str	r3, [r0, #12]
 8004654:	bd70      	pop	{r4, r5, r6, pc}

08004656 <_Bfree>:
 8004656:	b570      	push	{r4, r5, r6, lr}
 8004658:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800465a:	4606      	mov	r6, r0
 800465c:	460d      	mov	r5, r1
 800465e:	b93c      	cbnz	r4, 8004670 <_Bfree+0x1a>
 8004660:	2010      	movs	r0, #16
 8004662:	f7ff ffa3 	bl	80045ac <malloc>
 8004666:	6270      	str	r0, [r6, #36]	; 0x24
 8004668:	6044      	str	r4, [r0, #4]
 800466a:	6084      	str	r4, [r0, #8]
 800466c:	6004      	str	r4, [r0, #0]
 800466e:	60c4      	str	r4, [r0, #12]
 8004670:	b13d      	cbz	r5, 8004682 <_Bfree+0x2c>
 8004672:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004674:	686a      	ldr	r2, [r5, #4]
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800467c:	6029      	str	r1, [r5, #0]
 800467e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8004682:	bd70      	pop	{r4, r5, r6, pc}

08004684 <__multadd>:
 8004684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004688:	461f      	mov	r7, r3
 800468a:	4606      	mov	r6, r0
 800468c:	460c      	mov	r4, r1
 800468e:	2300      	movs	r3, #0
 8004690:	690d      	ldr	r5, [r1, #16]
 8004692:	f101 0e14 	add.w	lr, r1, #20
 8004696:	f8de 0000 	ldr.w	r0, [lr]
 800469a:	3301      	adds	r3, #1
 800469c:	b281      	uxth	r1, r0
 800469e:	fb02 7101 	mla	r1, r2, r1, r7
 80046a2:	0c00      	lsrs	r0, r0, #16
 80046a4:	0c0f      	lsrs	r7, r1, #16
 80046a6:	fb02 7000 	mla	r0, r2, r0, r7
 80046aa:	b289      	uxth	r1, r1
 80046ac:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80046b0:	429d      	cmp	r5, r3
 80046b2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80046b6:	f84e 1b04 	str.w	r1, [lr], #4
 80046ba:	dcec      	bgt.n	8004696 <__multadd+0x12>
 80046bc:	b1d7      	cbz	r7, 80046f4 <__multadd+0x70>
 80046be:	68a3      	ldr	r3, [r4, #8]
 80046c0:	429d      	cmp	r5, r3
 80046c2:	db12      	blt.n	80046ea <__multadd+0x66>
 80046c4:	6861      	ldr	r1, [r4, #4]
 80046c6:	4630      	mov	r0, r6
 80046c8:	3101      	adds	r1, #1
 80046ca:	f7ff ff90 	bl	80045ee <_Balloc>
 80046ce:	4680      	mov	r8, r0
 80046d0:	6922      	ldr	r2, [r4, #16]
 80046d2:	f104 010c 	add.w	r1, r4, #12
 80046d6:	3202      	adds	r2, #2
 80046d8:	0092      	lsls	r2, r2, #2
 80046da:	300c      	adds	r0, #12
 80046dc:	f7ff ff7c 	bl	80045d8 <memcpy>
 80046e0:	4621      	mov	r1, r4
 80046e2:	4630      	mov	r0, r6
 80046e4:	f7ff ffb7 	bl	8004656 <_Bfree>
 80046e8:	4644      	mov	r4, r8
 80046ea:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80046ee:	3501      	adds	r5, #1
 80046f0:	615f      	str	r7, [r3, #20]
 80046f2:	6125      	str	r5, [r4, #16]
 80046f4:	4620      	mov	r0, r4
 80046f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080046fa <__hi0bits>:
 80046fa:	0c02      	lsrs	r2, r0, #16
 80046fc:	0412      	lsls	r2, r2, #16
 80046fe:	4603      	mov	r3, r0
 8004700:	b9b2      	cbnz	r2, 8004730 <__hi0bits+0x36>
 8004702:	0403      	lsls	r3, r0, #16
 8004704:	2010      	movs	r0, #16
 8004706:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800470a:	bf04      	itt	eq
 800470c:	021b      	lsleq	r3, r3, #8
 800470e:	3008      	addeq	r0, #8
 8004710:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004714:	bf04      	itt	eq
 8004716:	011b      	lsleq	r3, r3, #4
 8004718:	3004      	addeq	r0, #4
 800471a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800471e:	bf04      	itt	eq
 8004720:	009b      	lsleq	r3, r3, #2
 8004722:	3002      	addeq	r0, #2
 8004724:	2b00      	cmp	r3, #0
 8004726:	db06      	blt.n	8004736 <__hi0bits+0x3c>
 8004728:	005b      	lsls	r3, r3, #1
 800472a:	d503      	bpl.n	8004734 <__hi0bits+0x3a>
 800472c:	3001      	adds	r0, #1
 800472e:	4770      	bx	lr
 8004730:	2000      	movs	r0, #0
 8004732:	e7e8      	b.n	8004706 <__hi0bits+0xc>
 8004734:	2020      	movs	r0, #32
 8004736:	4770      	bx	lr

08004738 <__lo0bits>:
 8004738:	6803      	ldr	r3, [r0, #0]
 800473a:	4601      	mov	r1, r0
 800473c:	f013 0207 	ands.w	r2, r3, #7
 8004740:	d00b      	beq.n	800475a <__lo0bits+0x22>
 8004742:	07da      	lsls	r2, r3, #31
 8004744:	d423      	bmi.n	800478e <__lo0bits+0x56>
 8004746:	0798      	lsls	r0, r3, #30
 8004748:	bf49      	itett	mi
 800474a:	085b      	lsrmi	r3, r3, #1
 800474c:	089b      	lsrpl	r3, r3, #2
 800474e:	2001      	movmi	r0, #1
 8004750:	600b      	strmi	r3, [r1, #0]
 8004752:	bf5c      	itt	pl
 8004754:	600b      	strpl	r3, [r1, #0]
 8004756:	2002      	movpl	r0, #2
 8004758:	4770      	bx	lr
 800475a:	b298      	uxth	r0, r3
 800475c:	b9a8      	cbnz	r0, 800478a <__lo0bits+0x52>
 800475e:	2010      	movs	r0, #16
 8004760:	0c1b      	lsrs	r3, r3, #16
 8004762:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004766:	bf04      	itt	eq
 8004768:	0a1b      	lsreq	r3, r3, #8
 800476a:	3008      	addeq	r0, #8
 800476c:	071a      	lsls	r2, r3, #28
 800476e:	bf04      	itt	eq
 8004770:	091b      	lsreq	r3, r3, #4
 8004772:	3004      	addeq	r0, #4
 8004774:	079a      	lsls	r2, r3, #30
 8004776:	bf04      	itt	eq
 8004778:	089b      	lsreq	r3, r3, #2
 800477a:	3002      	addeq	r0, #2
 800477c:	07da      	lsls	r2, r3, #31
 800477e:	d402      	bmi.n	8004786 <__lo0bits+0x4e>
 8004780:	085b      	lsrs	r3, r3, #1
 8004782:	d006      	beq.n	8004792 <__lo0bits+0x5a>
 8004784:	3001      	adds	r0, #1
 8004786:	600b      	str	r3, [r1, #0]
 8004788:	4770      	bx	lr
 800478a:	4610      	mov	r0, r2
 800478c:	e7e9      	b.n	8004762 <__lo0bits+0x2a>
 800478e:	2000      	movs	r0, #0
 8004790:	4770      	bx	lr
 8004792:	2020      	movs	r0, #32
 8004794:	4770      	bx	lr

08004796 <__i2b>:
 8004796:	b510      	push	{r4, lr}
 8004798:	460c      	mov	r4, r1
 800479a:	2101      	movs	r1, #1
 800479c:	f7ff ff27 	bl	80045ee <_Balloc>
 80047a0:	2201      	movs	r2, #1
 80047a2:	6144      	str	r4, [r0, #20]
 80047a4:	6102      	str	r2, [r0, #16]
 80047a6:	bd10      	pop	{r4, pc}

080047a8 <__multiply>:
 80047a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047ac:	4614      	mov	r4, r2
 80047ae:	690a      	ldr	r2, [r1, #16]
 80047b0:	6923      	ldr	r3, [r4, #16]
 80047b2:	4689      	mov	r9, r1
 80047b4:	429a      	cmp	r2, r3
 80047b6:	bfbe      	ittt	lt
 80047b8:	460b      	movlt	r3, r1
 80047ba:	46a1      	movlt	r9, r4
 80047bc:	461c      	movlt	r4, r3
 80047be:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80047c2:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80047c6:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80047ca:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80047ce:	eb07 060a 	add.w	r6, r7, sl
 80047d2:	429e      	cmp	r6, r3
 80047d4:	bfc8      	it	gt
 80047d6:	3101      	addgt	r1, #1
 80047d8:	f7ff ff09 	bl	80045ee <_Balloc>
 80047dc:	f100 0514 	add.w	r5, r0, #20
 80047e0:	462b      	mov	r3, r5
 80047e2:	2200      	movs	r2, #0
 80047e4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80047e8:	4543      	cmp	r3, r8
 80047ea:	d316      	bcc.n	800481a <__multiply+0x72>
 80047ec:	f104 0214 	add.w	r2, r4, #20
 80047f0:	f109 0114 	add.w	r1, r9, #20
 80047f4:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 80047f8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80047fc:	9301      	str	r3, [sp, #4]
 80047fe:	9c01      	ldr	r4, [sp, #4]
 8004800:	4613      	mov	r3, r2
 8004802:	4294      	cmp	r4, r2
 8004804:	d80c      	bhi.n	8004820 <__multiply+0x78>
 8004806:	2e00      	cmp	r6, #0
 8004808:	dd03      	ble.n	8004812 <__multiply+0x6a>
 800480a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800480e:	2b00      	cmp	r3, #0
 8004810:	d054      	beq.n	80048bc <__multiply+0x114>
 8004812:	6106      	str	r6, [r0, #16]
 8004814:	b003      	add	sp, #12
 8004816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800481a:	f843 2b04 	str.w	r2, [r3], #4
 800481e:	e7e3      	b.n	80047e8 <__multiply+0x40>
 8004820:	f8b3 a000 	ldrh.w	sl, [r3]
 8004824:	3204      	adds	r2, #4
 8004826:	f1ba 0f00 	cmp.w	sl, #0
 800482a:	d020      	beq.n	800486e <__multiply+0xc6>
 800482c:	46ae      	mov	lr, r5
 800482e:	4689      	mov	r9, r1
 8004830:	f04f 0c00 	mov.w	ip, #0
 8004834:	f859 4b04 	ldr.w	r4, [r9], #4
 8004838:	f8be b000 	ldrh.w	fp, [lr]
 800483c:	b2a3      	uxth	r3, r4
 800483e:	fb0a b303 	mla	r3, sl, r3, fp
 8004842:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8004846:	f8de 4000 	ldr.w	r4, [lr]
 800484a:	4463      	add	r3, ip
 800484c:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8004850:	fb0a c40b 	mla	r4, sl, fp, ip
 8004854:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8004858:	b29b      	uxth	r3, r3
 800485a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800485e:	454f      	cmp	r7, r9
 8004860:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8004864:	f84e 3b04 	str.w	r3, [lr], #4
 8004868:	d8e4      	bhi.n	8004834 <__multiply+0x8c>
 800486a:	f8ce c000 	str.w	ip, [lr]
 800486e:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8004872:	f1b9 0f00 	cmp.w	r9, #0
 8004876:	d01f      	beq.n	80048b8 <__multiply+0x110>
 8004878:	46ae      	mov	lr, r5
 800487a:	468c      	mov	ip, r1
 800487c:	f04f 0a00 	mov.w	sl, #0
 8004880:	682b      	ldr	r3, [r5, #0]
 8004882:	f8bc 4000 	ldrh.w	r4, [ip]
 8004886:	f8be b002 	ldrh.w	fp, [lr, #2]
 800488a:	b29b      	uxth	r3, r3
 800488c:	fb09 b404 	mla	r4, r9, r4, fp
 8004890:	44a2      	add	sl, r4
 8004892:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8004896:	f84e 3b04 	str.w	r3, [lr], #4
 800489a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800489e:	f8be 4000 	ldrh.w	r4, [lr]
 80048a2:	0c1b      	lsrs	r3, r3, #16
 80048a4:	fb09 4303 	mla	r3, r9, r3, r4
 80048a8:	4567      	cmp	r7, ip
 80048aa:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 80048ae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80048b2:	d8e6      	bhi.n	8004882 <__multiply+0xda>
 80048b4:	f8ce 3000 	str.w	r3, [lr]
 80048b8:	3504      	adds	r5, #4
 80048ba:	e7a0      	b.n	80047fe <__multiply+0x56>
 80048bc:	3e01      	subs	r6, #1
 80048be:	e7a2      	b.n	8004806 <__multiply+0x5e>

080048c0 <__pow5mult>:
 80048c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048c4:	4615      	mov	r5, r2
 80048c6:	f012 0203 	ands.w	r2, r2, #3
 80048ca:	4606      	mov	r6, r0
 80048cc:	460f      	mov	r7, r1
 80048ce:	d007      	beq.n	80048e0 <__pow5mult+0x20>
 80048d0:	4c21      	ldr	r4, [pc, #132]	; (8004958 <__pow5mult+0x98>)
 80048d2:	3a01      	subs	r2, #1
 80048d4:	2300      	movs	r3, #0
 80048d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80048da:	f7ff fed3 	bl	8004684 <__multadd>
 80048de:	4607      	mov	r7, r0
 80048e0:	10ad      	asrs	r5, r5, #2
 80048e2:	d035      	beq.n	8004950 <__pow5mult+0x90>
 80048e4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80048e6:	b93c      	cbnz	r4, 80048f8 <__pow5mult+0x38>
 80048e8:	2010      	movs	r0, #16
 80048ea:	f7ff fe5f 	bl	80045ac <malloc>
 80048ee:	6270      	str	r0, [r6, #36]	; 0x24
 80048f0:	6044      	str	r4, [r0, #4]
 80048f2:	6084      	str	r4, [r0, #8]
 80048f4:	6004      	str	r4, [r0, #0]
 80048f6:	60c4      	str	r4, [r0, #12]
 80048f8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80048fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004900:	b94c      	cbnz	r4, 8004916 <__pow5mult+0x56>
 8004902:	f240 2171 	movw	r1, #625	; 0x271
 8004906:	4630      	mov	r0, r6
 8004908:	f7ff ff45 	bl	8004796 <__i2b>
 800490c:	2300      	movs	r3, #0
 800490e:	4604      	mov	r4, r0
 8004910:	f8c8 0008 	str.w	r0, [r8, #8]
 8004914:	6003      	str	r3, [r0, #0]
 8004916:	f04f 0800 	mov.w	r8, #0
 800491a:	07eb      	lsls	r3, r5, #31
 800491c:	d50a      	bpl.n	8004934 <__pow5mult+0x74>
 800491e:	4639      	mov	r1, r7
 8004920:	4622      	mov	r2, r4
 8004922:	4630      	mov	r0, r6
 8004924:	f7ff ff40 	bl	80047a8 <__multiply>
 8004928:	4681      	mov	r9, r0
 800492a:	4639      	mov	r1, r7
 800492c:	4630      	mov	r0, r6
 800492e:	f7ff fe92 	bl	8004656 <_Bfree>
 8004932:	464f      	mov	r7, r9
 8004934:	106d      	asrs	r5, r5, #1
 8004936:	d00b      	beq.n	8004950 <__pow5mult+0x90>
 8004938:	6820      	ldr	r0, [r4, #0]
 800493a:	b938      	cbnz	r0, 800494c <__pow5mult+0x8c>
 800493c:	4622      	mov	r2, r4
 800493e:	4621      	mov	r1, r4
 8004940:	4630      	mov	r0, r6
 8004942:	f7ff ff31 	bl	80047a8 <__multiply>
 8004946:	6020      	str	r0, [r4, #0]
 8004948:	f8c0 8000 	str.w	r8, [r0]
 800494c:	4604      	mov	r4, r0
 800494e:	e7e4      	b.n	800491a <__pow5mult+0x5a>
 8004950:	4638      	mov	r0, r7
 8004952:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004956:	bf00      	nop
 8004958:	08005378 	.word	0x08005378

0800495c <__lshift>:
 800495c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004960:	460c      	mov	r4, r1
 8004962:	4607      	mov	r7, r0
 8004964:	4616      	mov	r6, r2
 8004966:	6923      	ldr	r3, [r4, #16]
 8004968:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800496c:	eb0a 0903 	add.w	r9, sl, r3
 8004970:	6849      	ldr	r1, [r1, #4]
 8004972:	68a3      	ldr	r3, [r4, #8]
 8004974:	f109 0501 	add.w	r5, r9, #1
 8004978:	42ab      	cmp	r3, r5
 800497a:	db31      	blt.n	80049e0 <__lshift+0x84>
 800497c:	4638      	mov	r0, r7
 800497e:	f7ff fe36 	bl	80045ee <_Balloc>
 8004982:	2200      	movs	r2, #0
 8004984:	4680      	mov	r8, r0
 8004986:	4611      	mov	r1, r2
 8004988:	f100 0314 	add.w	r3, r0, #20
 800498c:	4552      	cmp	r2, sl
 800498e:	db2a      	blt.n	80049e6 <__lshift+0x8a>
 8004990:	6920      	ldr	r0, [r4, #16]
 8004992:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004996:	f104 0114 	add.w	r1, r4, #20
 800499a:	f016 021f 	ands.w	r2, r6, #31
 800499e:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80049a2:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 80049a6:	d022      	beq.n	80049ee <__lshift+0x92>
 80049a8:	2000      	movs	r0, #0
 80049aa:	f1c2 0c20 	rsb	ip, r2, #32
 80049ae:	680e      	ldr	r6, [r1, #0]
 80049b0:	4096      	lsls	r6, r2
 80049b2:	4330      	orrs	r0, r6
 80049b4:	f843 0b04 	str.w	r0, [r3], #4
 80049b8:	f851 0b04 	ldr.w	r0, [r1], #4
 80049bc:	458e      	cmp	lr, r1
 80049be:	fa20 f00c 	lsr.w	r0, r0, ip
 80049c2:	d8f4      	bhi.n	80049ae <__lshift+0x52>
 80049c4:	6018      	str	r0, [r3, #0]
 80049c6:	b108      	cbz	r0, 80049cc <__lshift+0x70>
 80049c8:	f109 0502 	add.w	r5, r9, #2
 80049cc:	3d01      	subs	r5, #1
 80049ce:	4638      	mov	r0, r7
 80049d0:	f8c8 5010 	str.w	r5, [r8, #16]
 80049d4:	4621      	mov	r1, r4
 80049d6:	f7ff fe3e 	bl	8004656 <_Bfree>
 80049da:	4640      	mov	r0, r8
 80049dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049e0:	3101      	adds	r1, #1
 80049e2:	005b      	lsls	r3, r3, #1
 80049e4:	e7c8      	b.n	8004978 <__lshift+0x1c>
 80049e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80049ea:	3201      	adds	r2, #1
 80049ec:	e7ce      	b.n	800498c <__lshift+0x30>
 80049ee:	3b04      	subs	r3, #4
 80049f0:	f851 2b04 	ldr.w	r2, [r1], #4
 80049f4:	458e      	cmp	lr, r1
 80049f6:	f843 2f04 	str.w	r2, [r3, #4]!
 80049fa:	d8f9      	bhi.n	80049f0 <__lshift+0x94>
 80049fc:	e7e6      	b.n	80049cc <__lshift+0x70>

080049fe <__mcmp>:
 80049fe:	6903      	ldr	r3, [r0, #16]
 8004a00:	690a      	ldr	r2, [r1, #16]
 8004a02:	b530      	push	{r4, r5, lr}
 8004a04:	1a9b      	subs	r3, r3, r2
 8004a06:	d10c      	bne.n	8004a22 <__mcmp+0x24>
 8004a08:	0092      	lsls	r2, r2, #2
 8004a0a:	3014      	adds	r0, #20
 8004a0c:	3114      	adds	r1, #20
 8004a0e:	1884      	adds	r4, r0, r2
 8004a10:	4411      	add	r1, r2
 8004a12:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004a16:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004a1a:	4295      	cmp	r5, r2
 8004a1c:	d003      	beq.n	8004a26 <__mcmp+0x28>
 8004a1e:	d305      	bcc.n	8004a2c <__mcmp+0x2e>
 8004a20:	2301      	movs	r3, #1
 8004a22:	4618      	mov	r0, r3
 8004a24:	bd30      	pop	{r4, r5, pc}
 8004a26:	42a0      	cmp	r0, r4
 8004a28:	d3f3      	bcc.n	8004a12 <__mcmp+0x14>
 8004a2a:	e7fa      	b.n	8004a22 <__mcmp+0x24>
 8004a2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004a30:	e7f7      	b.n	8004a22 <__mcmp+0x24>

08004a32 <__mdiff>:
 8004a32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a36:	460d      	mov	r5, r1
 8004a38:	4607      	mov	r7, r0
 8004a3a:	4611      	mov	r1, r2
 8004a3c:	4628      	mov	r0, r5
 8004a3e:	4614      	mov	r4, r2
 8004a40:	f7ff ffdd 	bl	80049fe <__mcmp>
 8004a44:	1e06      	subs	r6, r0, #0
 8004a46:	d108      	bne.n	8004a5a <__mdiff+0x28>
 8004a48:	4631      	mov	r1, r6
 8004a4a:	4638      	mov	r0, r7
 8004a4c:	f7ff fdcf 	bl	80045ee <_Balloc>
 8004a50:	2301      	movs	r3, #1
 8004a52:	6146      	str	r6, [r0, #20]
 8004a54:	6103      	str	r3, [r0, #16]
 8004a56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a5a:	bfa4      	itt	ge
 8004a5c:	4623      	movge	r3, r4
 8004a5e:	462c      	movge	r4, r5
 8004a60:	4638      	mov	r0, r7
 8004a62:	6861      	ldr	r1, [r4, #4]
 8004a64:	bfa6      	itte	ge
 8004a66:	461d      	movge	r5, r3
 8004a68:	2600      	movge	r6, #0
 8004a6a:	2601      	movlt	r6, #1
 8004a6c:	f7ff fdbf 	bl	80045ee <_Balloc>
 8004a70:	f04f 0c00 	mov.w	ip, #0
 8004a74:	60c6      	str	r6, [r0, #12]
 8004a76:	692b      	ldr	r3, [r5, #16]
 8004a78:	6926      	ldr	r6, [r4, #16]
 8004a7a:	f104 0214 	add.w	r2, r4, #20
 8004a7e:	f105 0914 	add.w	r9, r5, #20
 8004a82:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8004a86:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8004a8a:	f100 0114 	add.w	r1, r0, #20
 8004a8e:	f852 ab04 	ldr.w	sl, [r2], #4
 8004a92:	f859 5b04 	ldr.w	r5, [r9], #4
 8004a96:	fa1f f38a 	uxth.w	r3, sl
 8004a9a:	4463      	add	r3, ip
 8004a9c:	b2ac      	uxth	r4, r5
 8004a9e:	1b1b      	subs	r3, r3, r4
 8004aa0:	0c2c      	lsrs	r4, r5, #16
 8004aa2:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8004aa6:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8004ab0:	45c8      	cmp	r8, r9
 8004ab2:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8004ab6:	4696      	mov	lr, r2
 8004ab8:	f841 4b04 	str.w	r4, [r1], #4
 8004abc:	d8e7      	bhi.n	8004a8e <__mdiff+0x5c>
 8004abe:	45be      	cmp	lr, r7
 8004ac0:	d305      	bcc.n	8004ace <__mdiff+0x9c>
 8004ac2:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8004ac6:	b18b      	cbz	r3, 8004aec <__mdiff+0xba>
 8004ac8:	6106      	str	r6, [r0, #16]
 8004aca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ace:	f85e 4b04 	ldr.w	r4, [lr], #4
 8004ad2:	b2a2      	uxth	r2, r4
 8004ad4:	4462      	add	r2, ip
 8004ad6:	1413      	asrs	r3, r2, #16
 8004ad8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8004adc:	b292      	uxth	r2, r2
 8004ade:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004ae2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8004ae6:	f841 2b04 	str.w	r2, [r1], #4
 8004aea:	e7e8      	b.n	8004abe <__mdiff+0x8c>
 8004aec:	3e01      	subs	r6, #1
 8004aee:	e7e8      	b.n	8004ac2 <__mdiff+0x90>

08004af0 <__d2b>:
 8004af0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004af4:	461c      	mov	r4, r3
 8004af6:	2101      	movs	r1, #1
 8004af8:	4690      	mov	r8, r2
 8004afa:	9e08      	ldr	r6, [sp, #32]
 8004afc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004afe:	f7ff fd76 	bl	80045ee <_Balloc>
 8004b02:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8004b06:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8004b0a:	4607      	mov	r7, r0
 8004b0c:	bb34      	cbnz	r4, 8004b5c <__d2b+0x6c>
 8004b0e:	9201      	str	r2, [sp, #4]
 8004b10:	f1b8 0f00 	cmp.w	r8, #0
 8004b14:	d027      	beq.n	8004b66 <__d2b+0x76>
 8004b16:	a802      	add	r0, sp, #8
 8004b18:	f840 8d08 	str.w	r8, [r0, #-8]!
 8004b1c:	f7ff fe0c 	bl	8004738 <__lo0bits>
 8004b20:	9900      	ldr	r1, [sp, #0]
 8004b22:	b1f0      	cbz	r0, 8004b62 <__d2b+0x72>
 8004b24:	9a01      	ldr	r2, [sp, #4]
 8004b26:	f1c0 0320 	rsb	r3, r0, #32
 8004b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b2e:	430b      	orrs	r3, r1
 8004b30:	40c2      	lsrs	r2, r0
 8004b32:	617b      	str	r3, [r7, #20]
 8004b34:	9201      	str	r2, [sp, #4]
 8004b36:	9b01      	ldr	r3, [sp, #4]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	bf14      	ite	ne
 8004b3c:	2102      	movne	r1, #2
 8004b3e:	2101      	moveq	r1, #1
 8004b40:	61bb      	str	r3, [r7, #24]
 8004b42:	6139      	str	r1, [r7, #16]
 8004b44:	b1c4      	cbz	r4, 8004b78 <__d2b+0x88>
 8004b46:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8004b4a:	4404      	add	r4, r0
 8004b4c:	6034      	str	r4, [r6, #0]
 8004b4e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004b52:	6028      	str	r0, [r5, #0]
 8004b54:	4638      	mov	r0, r7
 8004b56:	b002      	add	sp, #8
 8004b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b5c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004b60:	e7d5      	b.n	8004b0e <__d2b+0x1e>
 8004b62:	6179      	str	r1, [r7, #20]
 8004b64:	e7e7      	b.n	8004b36 <__d2b+0x46>
 8004b66:	a801      	add	r0, sp, #4
 8004b68:	f7ff fde6 	bl	8004738 <__lo0bits>
 8004b6c:	2101      	movs	r1, #1
 8004b6e:	9b01      	ldr	r3, [sp, #4]
 8004b70:	6139      	str	r1, [r7, #16]
 8004b72:	617b      	str	r3, [r7, #20]
 8004b74:	3020      	adds	r0, #32
 8004b76:	e7e5      	b.n	8004b44 <__d2b+0x54>
 8004b78:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004b7c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8004b80:	6030      	str	r0, [r6, #0]
 8004b82:	6918      	ldr	r0, [r3, #16]
 8004b84:	f7ff fdb9 	bl	80046fa <__hi0bits>
 8004b88:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8004b8c:	e7e1      	b.n	8004b52 <__d2b+0x62>

08004b8e <_calloc_r>:
 8004b8e:	b538      	push	{r3, r4, r5, lr}
 8004b90:	fb02 f401 	mul.w	r4, r2, r1
 8004b94:	4621      	mov	r1, r4
 8004b96:	f000 f855 	bl	8004c44 <_malloc_r>
 8004b9a:	4605      	mov	r5, r0
 8004b9c:	b118      	cbz	r0, 8004ba6 <_calloc_r+0x18>
 8004b9e:	4622      	mov	r2, r4
 8004ba0:	2100      	movs	r1, #0
 8004ba2:	f7fe f9ef 	bl	8002f84 <memset>
 8004ba6:	4628      	mov	r0, r5
 8004ba8:	bd38      	pop	{r3, r4, r5, pc}
	...

08004bac <_free_r>:
 8004bac:	b538      	push	{r3, r4, r5, lr}
 8004bae:	4605      	mov	r5, r0
 8004bb0:	2900      	cmp	r1, #0
 8004bb2:	d043      	beq.n	8004c3c <_free_r+0x90>
 8004bb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bb8:	1f0c      	subs	r4, r1, #4
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	bfb8      	it	lt
 8004bbe:	18e4      	addlt	r4, r4, r3
 8004bc0:	f000 fa2a 	bl	8005018 <__malloc_lock>
 8004bc4:	4a1e      	ldr	r2, [pc, #120]	; (8004c40 <_free_r+0x94>)
 8004bc6:	6813      	ldr	r3, [r2, #0]
 8004bc8:	4610      	mov	r0, r2
 8004bca:	b933      	cbnz	r3, 8004bda <_free_r+0x2e>
 8004bcc:	6063      	str	r3, [r4, #4]
 8004bce:	6014      	str	r4, [r2, #0]
 8004bd0:	4628      	mov	r0, r5
 8004bd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004bd6:	f000 ba20 	b.w	800501a <__malloc_unlock>
 8004bda:	42a3      	cmp	r3, r4
 8004bdc:	d90b      	bls.n	8004bf6 <_free_r+0x4a>
 8004bde:	6821      	ldr	r1, [r4, #0]
 8004be0:	1862      	adds	r2, r4, r1
 8004be2:	4293      	cmp	r3, r2
 8004be4:	bf01      	itttt	eq
 8004be6:	681a      	ldreq	r2, [r3, #0]
 8004be8:	685b      	ldreq	r3, [r3, #4]
 8004bea:	1852      	addeq	r2, r2, r1
 8004bec:	6022      	streq	r2, [r4, #0]
 8004bee:	6063      	str	r3, [r4, #4]
 8004bf0:	6004      	str	r4, [r0, #0]
 8004bf2:	e7ed      	b.n	8004bd0 <_free_r+0x24>
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	685a      	ldr	r2, [r3, #4]
 8004bf8:	b10a      	cbz	r2, 8004bfe <_free_r+0x52>
 8004bfa:	42a2      	cmp	r2, r4
 8004bfc:	d9fa      	bls.n	8004bf4 <_free_r+0x48>
 8004bfe:	6819      	ldr	r1, [r3, #0]
 8004c00:	1858      	adds	r0, r3, r1
 8004c02:	42a0      	cmp	r0, r4
 8004c04:	d10b      	bne.n	8004c1e <_free_r+0x72>
 8004c06:	6820      	ldr	r0, [r4, #0]
 8004c08:	4401      	add	r1, r0
 8004c0a:	1858      	adds	r0, r3, r1
 8004c0c:	4282      	cmp	r2, r0
 8004c0e:	6019      	str	r1, [r3, #0]
 8004c10:	d1de      	bne.n	8004bd0 <_free_r+0x24>
 8004c12:	6810      	ldr	r0, [r2, #0]
 8004c14:	6852      	ldr	r2, [r2, #4]
 8004c16:	4401      	add	r1, r0
 8004c18:	6019      	str	r1, [r3, #0]
 8004c1a:	605a      	str	r2, [r3, #4]
 8004c1c:	e7d8      	b.n	8004bd0 <_free_r+0x24>
 8004c1e:	d902      	bls.n	8004c26 <_free_r+0x7a>
 8004c20:	230c      	movs	r3, #12
 8004c22:	602b      	str	r3, [r5, #0]
 8004c24:	e7d4      	b.n	8004bd0 <_free_r+0x24>
 8004c26:	6820      	ldr	r0, [r4, #0]
 8004c28:	1821      	adds	r1, r4, r0
 8004c2a:	428a      	cmp	r2, r1
 8004c2c:	bf01      	itttt	eq
 8004c2e:	6811      	ldreq	r1, [r2, #0]
 8004c30:	6852      	ldreq	r2, [r2, #4]
 8004c32:	1809      	addeq	r1, r1, r0
 8004c34:	6021      	streq	r1, [r4, #0]
 8004c36:	6062      	str	r2, [r4, #4]
 8004c38:	605c      	str	r4, [r3, #4]
 8004c3a:	e7c9      	b.n	8004bd0 <_free_r+0x24>
 8004c3c:	bd38      	pop	{r3, r4, r5, pc}
 8004c3e:	bf00      	nop
 8004c40:	2000021c 	.word	0x2000021c

08004c44 <_malloc_r>:
 8004c44:	b570      	push	{r4, r5, r6, lr}
 8004c46:	1ccd      	adds	r5, r1, #3
 8004c48:	f025 0503 	bic.w	r5, r5, #3
 8004c4c:	3508      	adds	r5, #8
 8004c4e:	2d0c      	cmp	r5, #12
 8004c50:	bf38      	it	cc
 8004c52:	250c      	movcc	r5, #12
 8004c54:	2d00      	cmp	r5, #0
 8004c56:	4606      	mov	r6, r0
 8004c58:	db01      	blt.n	8004c5e <_malloc_r+0x1a>
 8004c5a:	42a9      	cmp	r1, r5
 8004c5c:	d903      	bls.n	8004c66 <_malloc_r+0x22>
 8004c5e:	230c      	movs	r3, #12
 8004c60:	6033      	str	r3, [r6, #0]
 8004c62:	2000      	movs	r0, #0
 8004c64:	bd70      	pop	{r4, r5, r6, pc}
 8004c66:	f000 f9d7 	bl	8005018 <__malloc_lock>
 8004c6a:	4a23      	ldr	r2, [pc, #140]	; (8004cf8 <_malloc_r+0xb4>)
 8004c6c:	6814      	ldr	r4, [r2, #0]
 8004c6e:	4621      	mov	r1, r4
 8004c70:	b991      	cbnz	r1, 8004c98 <_malloc_r+0x54>
 8004c72:	4c22      	ldr	r4, [pc, #136]	; (8004cfc <_malloc_r+0xb8>)
 8004c74:	6823      	ldr	r3, [r4, #0]
 8004c76:	b91b      	cbnz	r3, 8004c80 <_malloc_r+0x3c>
 8004c78:	4630      	mov	r0, r6
 8004c7a:	f000 f991 	bl	8004fa0 <_sbrk_r>
 8004c7e:	6020      	str	r0, [r4, #0]
 8004c80:	4629      	mov	r1, r5
 8004c82:	4630      	mov	r0, r6
 8004c84:	f000 f98c 	bl	8004fa0 <_sbrk_r>
 8004c88:	1c43      	adds	r3, r0, #1
 8004c8a:	d126      	bne.n	8004cda <_malloc_r+0x96>
 8004c8c:	230c      	movs	r3, #12
 8004c8e:	4630      	mov	r0, r6
 8004c90:	6033      	str	r3, [r6, #0]
 8004c92:	f000 f9c2 	bl	800501a <__malloc_unlock>
 8004c96:	e7e4      	b.n	8004c62 <_malloc_r+0x1e>
 8004c98:	680b      	ldr	r3, [r1, #0]
 8004c9a:	1b5b      	subs	r3, r3, r5
 8004c9c:	d41a      	bmi.n	8004cd4 <_malloc_r+0x90>
 8004c9e:	2b0b      	cmp	r3, #11
 8004ca0:	d90f      	bls.n	8004cc2 <_malloc_r+0x7e>
 8004ca2:	600b      	str	r3, [r1, #0]
 8004ca4:	18cc      	adds	r4, r1, r3
 8004ca6:	50cd      	str	r5, [r1, r3]
 8004ca8:	4630      	mov	r0, r6
 8004caa:	f000 f9b6 	bl	800501a <__malloc_unlock>
 8004cae:	f104 000b 	add.w	r0, r4, #11
 8004cb2:	1d23      	adds	r3, r4, #4
 8004cb4:	f020 0007 	bic.w	r0, r0, #7
 8004cb8:	1ac3      	subs	r3, r0, r3
 8004cba:	d01b      	beq.n	8004cf4 <_malloc_r+0xb0>
 8004cbc:	425a      	negs	r2, r3
 8004cbe:	50e2      	str	r2, [r4, r3]
 8004cc0:	bd70      	pop	{r4, r5, r6, pc}
 8004cc2:	428c      	cmp	r4, r1
 8004cc4:	bf0b      	itete	eq
 8004cc6:	6863      	ldreq	r3, [r4, #4]
 8004cc8:	684b      	ldrne	r3, [r1, #4]
 8004cca:	6013      	streq	r3, [r2, #0]
 8004ccc:	6063      	strne	r3, [r4, #4]
 8004cce:	bf18      	it	ne
 8004cd0:	460c      	movne	r4, r1
 8004cd2:	e7e9      	b.n	8004ca8 <_malloc_r+0x64>
 8004cd4:	460c      	mov	r4, r1
 8004cd6:	6849      	ldr	r1, [r1, #4]
 8004cd8:	e7ca      	b.n	8004c70 <_malloc_r+0x2c>
 8004cda:	1cc4      	adds	r4, r0, #3
 8004cdc:	f024 0403 	bic.w	r4, r4, #3
 8004ce0:	42a0      	cmp	r0, r4
 8004ce2:	d005      	beq.n	8004cf0 <_malloc_r+0xac>
 8004ce4:	1a21      	subs	r1, r4, r0
 8004ce6:	4630      	mov	r0, r6
 8004ce8:	f000 f95a 	bl	8004fa0 <_sbrk_r>
 8004cec:	3001      	adds	r0, #1
 8004cee:	d0cd      	beq.n	8004c8c <_malloc_r+0x48>
 8004cf0:	6025      	str	r5, [r4, #0]
 8004cf2:	e7d9      	b.n	8004ca8 <_malloc_r+0x64>
 8004cf4:	bd70      	pop	{r4, r5, r6, pc}
 8004cf6:	bf00      	nop
 8004cf8:	2000021c 	.word	0x2000021c
 8004cfc:	20000220 	.word	0x20000220

08004d00 <__ssputs_r>:
 8004d00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d04:	688e      	ldr	r6, [r1, #8]
 8004d06:	4682      	mov	sl, r0
 8004d08:	429e      	cmp	r6, r3
 8004d0a:	460c      	mov	r4, r1
 8004d0c:	4691      	mov	r9, r2
 8004d0e:	4698      	mov	r8, r3
 8004d10:	d835      	bhi.n	8004d7e <__ssputs_r+0x7e>
 8004d12:	898a      	ldrh	r2, [r1, #12]
 8004d14:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004d18:	d031      	beq.n	8004d7e <__ssputs_r+0x7e>
 8004d1a:	2302      	movs	r3, #2
 8004d1c:	6825      	ldr	r5, [r4, #0]
 8004d1e:	6909      	ldr	r1, [r1, #16]
 8004d20:	1a6f      	subs	r7, r5, r1
 8004d22:	6965      	ldr	r5, [r4, #20]
 8004d24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004d28:	fb95 f5f3 	sdiv	r5, r5, r3
 8004d2c:	f108 0301 	add.w	r3, r8, #1
 8004d30:	443b      	add	r3, r7
 8004d32:	429d      	cmp	r5, r3
 8004d34:	bf38      	it	cc
 8004d36:	461d      	movcc	r5, r3
 8004d38:	0553      	lsls	r3, r2, #21
 8004d3a:	d531      	bpl.n	8004da0 <__ssputs_r+0xa0>
 8004d3c:	4629      	mov	r1, r5
 8004d3e:	f7ff ff81 	bl	8004c44 <_malloc_r>
 8004d42:	4606      	mov	r6, r0
 8004d44:	b950      	cbnz	r0, 8004d5c <__ssputs_r+0x5c>
 8004d46:	230c      	movs	r3, #12
 8004d48:	f8ca 3000 	str.w	r3, [sl]
 8004d4c:	89a3      	ldrh	r3, [r4, #12]
 8004d4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d56:	81a3      	strh	r3, [r4, #12]
 8004d58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d5c:	463a      	mov	r2, r7
 8004d5e:	6921      	ldr	r1, [r4, #16]
 8004d60:	f7ff fc3a 	bl	80045d8 <memcpy>
 8004d64:	89a3      	ldrh	r3, [r4, #12]
 8004d66:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004d6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d6e:	81a3      	strh	r3, [r4, #12]
 8004d70:	6126      	str	r6, [r4, #16]
 8004d72:	443e      	add	r6, r7
 8004d74:	6026      	str	r6, [r4, #0]
 8004d76:	4646      	mov	r6, r8
 8004d78:	6165      	str	r5, [r4, #20]
 8004d7a:	1bed      	subs	r5, r5, r7
 8004d7c:	60a5      	str	r5, [r4, #8]
 8004d7e:	4546      	cmp	r6, r8
 8004d80:	bf28      	it	cs
 8004d82:	4646      	movcs	r6, r8
 8004d84:	4649      	mov	r1, r9
 8004d86:	4632      	mov	r2, r6
 8004d88:	6820      	ldr	r0, [r4, #0]
 8004d8a:	f000 f92b 	bl	8004fe4 <memmove>
 8004d8e:	68a3      	ldr	r3, [r4, #8]
 8004d90:	2000      	movs	r0, #0
 8004d92:	1b9b      	subs	r3, r3, r6
 8004d94:	60a3      	str	r3, [r4, #8]
 8004d96:	6823      	ldr	r3, [r4, #0]
 8004d98:	441e      	add	r6, r3
 8004d9a:	6026      	str	r6, [r4, #0]
 8004d9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004da0:	462a      	mov	r2, r5
 8004da2:	f000 f93b 	bl	800501c <_realloc_r>
 8004da6:	4606      	mov	r6, r0
 8004da8:	2800      	cmp	r0, #0
 8004daa:	d1e1      	bne.n	8004d70 <__ssputs_r+0x70>
 8004dac:	6921      	ldr	r1, [r4, #16]
 8004dae:	4650      	mov	r0, sl
 8004db0:	f7ff fefc 	bl	8004bac <_free_r>
 8004db4:	e7c7      	b.n	8004d46 <__ssputs_r+0x46>
	...

08004db8 <_svfiprintf_r>:
 8004db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dbc:	b09d      	sub	sp, #116	; 0x74
 8004dbe:	9303      	str	r3, [sp, #12]
 8004dc0:	898b      	ldrh	r3, [r1, #12]
 8004dc2:	4680      	mov	r8, r0
 8004dc4:	061c      	lsls	r4, r3, #24
 8004dc6:	460d      	mov	r5, r1
 8004dc8:	4616      	mov	r6, r2
 8004dca:	d50f      	bpl.n	8004dec <_svfiprintf_r+0x34>
 8004dcc:	690b      	ldr	r3, [r1, #16]
 8004dce:	b96b      	cbnz	r3, 8004dec <_svfiprintf_r+0x34>
 8004dd0:	2140      	movs	r1, #64	; 0x40
 8004dd2:	f7ff ff37 	bl	8004c44 <_malloc_r>
 8004dd6:	6028      	str	r0, [r5, #0]
 8004dd8:	6128      	str	r0, [r5, #16]
 8004dda:	b928      	cbnz	r0, 8004de8 <_svfiprintf_r+0x30>
 8004ddc:	230c      	movs	r3, #12
 8004dde:	f8c8 3000 	str.w	r3, [r8]
 8004de2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004de6:	e0c4      	b.n	8004f72 <_svfiprintf_r+0x1ba>
 8004de8:	2340      	movs	r3, #64	; 0x40
 8004dea:	616b      	str	r3, [r5, #20]
 8004dec:	2300      	movs	r3, #0
 8004dee:	9309      	str	r3, [sp, #36]	; 0x24
 8004df0:	2320      	movs	r3, #32
 8004df2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004df6:	2330      	movs	r3, #48	; 0x30
 8004df8:	f04f 0b01 	mov.w	fp, #1
 8004dfc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004e00:	4637      	mov	r7, r6
 8004e02:	463c      	mov	r4, r7
 8004e04:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d13c      	bne.n	8004e86 <_svfiprintf_r+0xce>
 8004e0c:	ebb7 0a06 	subs.w	sl, r7, r6
 8004e10:	d00b      	beq.n	8004e2a <_svfiprintf_r+0x72>
 8004e12:	4653      	mov	r3, sl
 8004e14:	4632      	mov	r2, r6
 8004e16:	4629      	mov	r1, r5
 8004e18:	4640      	mov	r0, r8
 8004e1a:	f7ff ff71 	bl	8004d00 <__ssputs_r>
 8004e1e:	3001      	adds	r0, #1
 8004e20:	f000 80a2 	beq.w	8004f68 <_svfiprintf_r+0x1b0>
 8004e24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e26:	4453      	add	r3, sl
 8004e28:	9309      	str	r3, [sp, #36]	; 0x24
 8004e2a:	783b      	ldrb	r3, [r7, #0]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	f000 809b 	beq.w	8004f68 <_svfiprintf_r+0x1b0>
 8004e32:	2300      	movs	r3, #0
 8004e34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e38:	9304      	str	r3, [sp, #16]
 8004e3a:	9307      	str	r3, [sp, #28]
 8004e3c:	9205      	str	r2, [sp, #20]
 8004e3e:	9306      	str	r3, [sp, #24]
 8004e40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004e44:	931a      	str	r3, [sp, #104]	; 0x68
 8004e46:	2205      	movs	r2, #5
 8004e48:	7821      	ldrb	r1, [r4, #0]
 8004e4a:	4850      	ldr	r0, [pc, #320]	; (8004f8c <_svfiprintf_r+0x1d4>)
 8004e4c:	f7ff fbb6 	bl	80045bc <memchr>
 8004e50:	1c67      	adds	r7, r4, #1
 8004e52:	9b04      	ldr	r3, [sp, #16]
 8004e54:	b9d8      	cbnz	r0, 8004e8e <_svfiprintf_r+0xd6>
 8004e56:	06d9      	lsls	r1, r3, #27
 8004e58:	bf44      	itt	mi
 8004e5a:	2220      	movmi	r2, #32
 8004e5c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004e60:	071a      	lsls	r2, r3, #28
 8004e62:	bf44      	itt	mi
 8004e64:	222b      	movmi	r2, #43	; 0x2b
 8004e66:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004e6a:	7822      	ldrb	r2, [r4, #0]
 8004e6c:	2a2a      	cmp	r2, #42	; 0x2a
 8004e6e:	d016      	beq.n	8004e9e <_svfiprintf_r+0xe6>
 8004e70:	2100      	movs	r1, #0
 8004e72:	200a      	movs	r0, #10
 8004e74:	9a07      	ldr	r2, [sp, #28]
 8004e76:	4627      	mov	r7, r4
 8004e78:	783b      	ldrb	r3, [r7, #0]
 8004e7a:	3401      	adds	r4, #1
 8004e7c:	3b30      	subs	r3, #48	; 0x30
 8004e7e:	2b09      	cmp	r3, #9
 8004e80:	d950      	bls.n	8004f24 <_svfiprintf_r+0x16c>
 8004e82:	b1c9      	cbz	r1, 8004eb8 <_svfiprintf_r+0x100>
 8004e84:	e011      	b.n	8004eaa <_svfiprintf_r+0xf2>
 8004e86:	2b25      	cmp	r3, #37	; 0x25
 8004e88:	d0c0      	beq.n	8004e0c <_svfiprintf_r+0x54>
 8004e8a:	4627      	mov	r7, r4
 8004e8c:	e7b9      	b.n	8004e02 <_svfiprintf_r+0x4a>
 8004e8e:	4a3f      	ldr	r2, [pc, #252]	; (8004f8c <_svfiprintf_r+0x1d4>)
 8004e90:	463c      	mov	r4, r7
 8004e92:	1a80      	subs	r0, r0, r2
 8004e94:	fa0b f000 	lsl.w	r0, fp, r0
 8004e98:	4318      	orrs	r0, r3
 8004e9a:	9004      	str	r0, [sp, #16]
 8004e9c:	e7d3      	b.n	8004e46 <_svfiprintf_r+0x8e>
 8004e9e:	9a03      	ldr	r2, [sp, #12]
 8004ea0:	1d11      	adds	r1, r2, #4
 8004ea2:	6812      	ldr	r2, [r2, #0]
 8004ea4:	9103      	str	r1, [sp, #12]
 8004ea6:	2a00      	cmp	r2, #0
 8004ea8:	db01      	blt.n	8004eae <_svfiprintf_r+0xf6>
 8004eaa:	9207      	str	r2, [sp, #28]
 8004eac:	e004      	b.n	8004eb8 <_svfiprintf_r+0x100>
 8004eae:	4252      	negs	r2, r2
 8004eb0:	f043 0302 	orr.w	r3, r3, #2
 8004eb4:	9207      	str	r2, [sp, #28]
 8004eb6:	9304      	str	r3, [sp, #16]
 8004eb8:	783b      	ldrb	r3, [r7, #0]
 8004eba:	2b2e      	cmp	r3, #46	; 0x2e
 8004ebc:	d10d      	bne.n	8004eda <_svfiprintf_r+0x122>
 8004ebe:	787b      	ldrb	r3, [r7, #1]
 8004ec0:	1c79      	adds	r1, r7, #1
 8004ec2:	2b2a      	cmp	r3, #42	; 0x2a
 8004ec4:	d132      	bne.n	8004f2c <_svfiprintf_r+0x174>
 8004ec6:	9b03      	ldr	r3, [sp, #12]
 8004ec8:	3702      	adds	r7, #2
 8004eca:	1d1a      	adds	r2, r3, #4
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	9203      	str	r2, [sp, #12]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	bfb8      	it	lt
 8004ed4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004ed8:	9305      	str	r3, [sp, #20]
 8004eda:	4c2d      	ldr	r4, [pc, #180]	; (8004f90 <_svfiprintf_r+0x1d8>)
 8004edc:	2203      	movs	r2, #3
 8004ede:	7839      	ldrb	r1, [r7, #0]
 8004ee0:	4620      	mov	r0, r4
 8004ee2:	f7ff fb6b 	bl	80045bc <memchr>
 8004ee6:	b138      	cbz	r0, 8004ef8 <_svfiprintf_r+0x140>
 8004ee8:	2340      	movs	r3, #64	; 0x40
 8004eea:	1b00      	subs	r0, r0, r4
 8004eec:	fa03 f000 	lsl.w	r0, r3, r0
 8004ef0:	9b04      	ldr	r3, [sp, #16]
 8004ef2:	3701      	adds	r7, #1
 8004ef4:	4303      	orrs	r3, r0
 8004ef6:	9304      	str	r3, [sp, #16]
 8004ef8:	7839      	ldrb	r1, [r7, #0]
 8004efa:	2206      	movs	r2, #6
 8004efc:	4825      	ldr	r0, [pc, #148]	; (8004f94 <_svfiprintf_r+0x1dc>)
 8004efe:	1c7e      	adds	r6, r7, #1
 8004f00:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004f04:	f7ff fb5a 	bl	80045bc <memchr>
 8004f08:	2800      	cmp	r0, #0
 8004f0a:	d035      	beq.n	8004f78 <_svfiprintf_r+0x1c0>
 8004f0c:	4b22      	ldr	r3, [pc, #136]	; (8004f98 <_svfiprintf_r+0x1e0>)
 8004f0e:	b9fb      	cbnz	r3, 8004f50 <_svfiprintf_r+0x198>
 8004f10:	9b03      	ldr	r3, [sp, #12]
 8004f12:	3307      	adds	r3, #7
 8004f14:	f023 0307 	bic.w	r3, r3, #7
 8004f18:	3308      	adds	r3, #8
 8004f1a:	9303      	str	r3, [sp, #12]
 8004f1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f1e:	444b      	add	r3, r9
 8004f20:	9309      	str	r3, [sp, #36]	; 0x24
 8004f22:	e76d      	b.n	8004e00 <_svfiprintf_r+0x48>
 8004f24:	fb00 3202 	mla	r2, r0, r2, r3
 8004f28:	2101      	movs	r1, #1
 8004f2a:	e7a4      	b.n	8004e76 <_svfiprintf_r+0xbe>
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	240a      	movs	r4, #10
 8004f30:	4618      	mov	r0, r3
 8004f32:	9305      	str	r3, [sp, #20]
 8004f34:	460f      	mov	r7, r1
 8004f36:	783a      	ldrb	r2, [r7, #0]
 8004f38:	3101      	adds	r1, #1
 8004f3a:	3a30      	subs	r2, #48	; 0x30
 8004f3c:	2a09      	cmp	r2, #9
 8004f3e:	d903      	bls.n	8004f48 <_svfiprintf_r+0x190>
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d0ca      	beq.n	8004eda <_svfiprintf_r+0x122>
 8004f44:	9005      	str	r0, [sp, #20]
 8004f46:	e7c8      	b.n	8004eda <_svfiprintf_r+0x122>
 8004f48:	fb04 2000 	mla	r0, r4, r0, r2
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e7f1      	b.n	8004f34 <_svfiprintf_r+0x17c>
 8004f50:	ab03      	add	r3, sp, #12
 8004f52:	9300      	str	r3, [sp, #0]
 8004f54:	462a      	mov	r2, r5
 8004f56:	4b11      	ldr	r3, [pc, #68]	; (8004f9c <_svfiprintf_r+0x1e4>)
 8004f58:	a904      	add	r1, sp, #16
 8004f5a:	4640      	mov	r0, r8
 8004f5c:	f7fe f8ac 	bl	80030b8 <_printf_float>
 8004f60:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8004f64:	4681      	mov	r9, r0
 8004f66:	d1d9      	bne.n	8004f1c <_svfiprintf_r+0x164>
 8004f68:	89ab      	ldrh	r3, [r5, #12]
 8004f6a:	065b      	lsls	r3, r3, #25
 8004f6c:	f53f af39 	bmi.w	8004de2 <_svfiprintf_r+0x2a>
 8004f70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004f72:	b01d      	add	sp, #116	; 0x74
 8004f74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f78:	ab03      	add	r3, sp, #12
 8004f7a:	9300      	str	r3, [sp, #0]
 8004f7c:	462a      	mov	r2, r5
 8004f7e:	4b07      	ldr	r3, [pc, #28]	; (8004f9c <_svfiprintf_r+0x1e4>)
 8004f80:	a904      	add	r1, sp, #16
 8004f82:	4640      	mov	r0, r8
 8004f84:	f7fe fb48 	bl	8003618 <_printf_i>
 8004f88:	e7ea      	b.n	8004f60 <_svfiprintf_r+0x1a8>
 8004f8a:	bf00      	nop
 8004f8c:	08005384 	.word	0x08005384
 8004f90:	0800538a 	.word	0x0800538a
 8004f94:	0800538e 	.word	0x0800538e
 8004f98:	080030b9 	.word	0x080030b9
 8004f9c:	08004d01 	.word	0x08004d01

08004fa0 <_sbrk_r>:
 8004fa0:	b538      	push	{r3, r4, r5, lr}
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	4c05      	ldr	r4, [pc, #20]	; (8004fbc <_sbrk_r+0x1c>)
 8004fa6:	4605      	mov	r5, r0
 8004fa8:	4608      	mov	r0, r1
 8004faa:	6023      	str	r3, [r4, #0]
 8004fac:	f000 f872 	bl	8005094 <_sbrk>
 8004fb0:	1c43      	adds	r3, r0, #1
 8004fb2:	d102      	bne.n	8004fba <_sbrk_r+0x1a>
 8004fb4:	6823      	ldr	r3, [r4, #0]
 8004fb6:	b103      	cbz	r3, 8004fba <_sbrk_r+0x1a>
 8004fb8:	602b      	str	r3, [r5, #0]
 8004fba:	bd38      	pop	{r3, r4, r5, pc}
 8004fbc:	200002c0 	.word	0x200002c0

08004fc0 <__ascii_mbtowc>:
 8004fc0:	b082      	sub	sp, #8
 8004fc2:	b901      	cbnz	r1, 8004fc6 <__ascii_mbtowc+0x6>
 8004fc4:	a901      	add	r1, sp, #4
 8004fc6:	b142      	cbz	r2, 8004fda <__ascii_mbtowc+0x1a>
 8004fc8:	b14b      	cbz	r3, 8004fde <__ascii_mbtowc+0x1e>
 8004fca:	7813      	ldrb	r3, [r2, #0]
 8004fcc:	600b      	str	r3, [r1, #0]
 8004fce:	7812      	ldrb	r2, [r2, #0]
 8004fd0:	1c10      	adds	r0, r2, #0
 8004fd2:	bf18      	it	ne
 8004fd4:	2001      	movne	r0, #1
 8004fd6:	b002      	add	sp, #8
 8004fd8:	4770      	bx	lr
 8004fda:	4610      	mov	r0, r2
 8004fdc:	e7fb      	b.n	8004fd6 <__ascii_mbtowc+0x16>
 8004fde:	f06f 0001 	mvn.w	r0, #1
 8004fe2:	e7f8      	b.n	8004fd6 <__ascii_mbtowc+0x16>

08004fe4 <memmove>:
 8004fe4:	4288      	cmp	r0, r1
 8004fe6:	b510      	push	{r4, lr}
 8004fe8:	eb01 0302 	add.w	r3, r1, r2
 8004fec:	d803      	bhi.n	8004ff6 <memmove+0x12>
 8004fee:	1e42      	subs	r2, r0, #1
 8004ff0:	4299      	cmp	r1, r3
 8004ff2:	d10c      	bne.n	800500e <memmove+0x2a>
 8004ff4:	bd10      	pop	{r4, pc}
 8004ff6:	4298      	cmp	r0, r3
 8004ff8:	d2f9      	bcs.n	8004fee <memmove+0xa>
 8004ffa:	1881      	adds	r1, r0, r2
 8004ffc:	1ad2      	subs	r2, r2, r3
 8004ffe:	42d3      	cmn	r3, r2
 8005000:	d100      	bne.n	8005004 <memmove+0x20>
 8005002:	bd10      	pop	{r4, pc}
 8005004:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005008:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800500c:	e7f7      	b.n	8004ffe <memmove+0x1a>
 800500e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005012:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005016:	e7eb      	b.n	8004ff0 <memmove+0xc>

08005018 <__malloc_lock>:
 8005018:	4770      	bx	lr

0800501a <__malloc_unlock>:
 800501a:	4770      	bx	lr

0800501c <_realloc_r>:
 800501c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800501e:	4607      	mov	r7, r0
 8005020:	4614      	mov	r4, r2
 8005022:	460e      	mov	r6, r1
 8005024:	b921      	cbnz	r1, 8005030 <_realloc_r+0x14>
 8005026:	4611      	mov	r1, r2
 8005028:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800502c:	f7ff be0a 	b.w	8004c44 <_malloc_r>
 8005030:	b922      	cbnz	r2, 800503c <_realloc_r+0x20>
 8005032:	f7ff fdbb 	bl	8004bac <_free_r>
 8005036:	4625      	mov	r5, r4
 8005038:	4628      	mov	r0, r5
 800503a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800503c:	f000 f821 	bl	8005082 <_malloc_usable_size_r>
 8005040:	4284      	cmp	r4, r0
 8005042:	d90f      	bls.n	8005064 <_realloc_r+0x48>
 8005044:	4621      	mov	r1, r4
 8005046:	4638      	mov	r0, r7
 8005048:	f7ff fdfc 	bl	8004c44 <_malloc_r>
 800504c:	4605      	mov	r5, r0
 800504e:	2800      	cmp	r0, #0
 8005050:	d0f2      	beq.n	8005038 <_realloc_r+0x1c>
 8005052:	4631      	mov	r1, r6
 8005054:	4622      	mov	r2, r4
 8005056:	f7ff fabf 	bl	80045d8 <memcpy>
 800505a:	4631      	mov	r1, r6
 800505c:	4638      	mov	r0, r7
 800505e:	f7ff fda5 	bl	8004bac <_free_r>
 8005062:	e7e9      	b.n	8005038 <_realloc_r+0x1c>
 8005064:	4635      	mov	r5, r6
 8005066:	e7e7      	b.n	8005038 <_realloc_r+0x1c>

08005068 <__ascii_wctomb>:
 8005068:	b149      	cbz	r1, 800507e <__ascii_wctomb+0x16>
 800506a:	2aff      	cmp	r2, #255	; 0xff
 800506c:	bf8b      	itete	hi
 800506e:	238a      	movhi	r3, #138	; 0x8a
 8005070:	700a      	strbls	r2, [r1, #0]
 8005072:	6003      	strhi	r3, [r0, #0]
 8005074:	2001      	movls	r0, #1
 8005076:	bf88      	it	hi
 8005078:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800507c:	4770      	bx	lr
 800507e:	4608      	mov	r0, r1
 8005080:	4770      	bx	lr

08005082 <_malloc_usable_size_r>:
 8005082:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8005086:	2800      	cmp	r0, #0
 8005088:	f1a0 0004 	sub.w	r0, r0, #4
 800508c:	bfbc      	itt	lt
 800508e:	580b      	ldrlt	r3, [r1, r0]
 8005090:	18c0      	addlt	r0, r0, r3
 8005092:	4770      	bx	lr

08005094 <_sbrk>:
 8005094:	4b04      	ldr	r3, [pc, #16]	; (80050a8 <_sbrk+0x14>)
 8005096:	4602      	mov	r2, r0
 8005098:	6819      	ldr	r1, [r3, #0]
 800509a:	b909      	cbnz	r1, 80050a0 <_sbrk+0xc>
 800509c:	4903      	ldr	r1, [pc, #12]	; (80050ac <_sbrk+0x18>)
 800509e:	6019      	str	r1, [r3, #0]
 80050a0:	6818      	ldr	r0, [r3, #0]
 80050a2:	4402      	add	r2, r0
 80050a4:	601a      	str	r2, [r3, #0]
 80050a6:	4770      	bx	lr
 80050a8:	20000224 	.word	0x20000224
 80050ac:	200002c4 	.word	0x200002c4

080050b0 <_init>:
 80050b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050b2:	bf00      	nop
 80050b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050b6:	bc08      	pop	{r3}
 80050b8:	469e      	mov	lr, r3
 80050ba:	4770      	bx	lr

080050bc <_fini>:
 80050bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050be:	bf00      	nop
 80050c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050c2:	bc08      	pop	{r3}
 80050c4:	469e      	mov	lr, r3
 80050c6:	4770      	bx	lr
