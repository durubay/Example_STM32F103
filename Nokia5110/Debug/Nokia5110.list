
Nokia5110.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002688  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b4  08002794  08002794  00012794  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002a48  08002a48  00012a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002a4c  08002a4c  00012a4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000000  08002a50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000254  20000070  08002ac0  00020070  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200002c4  08002ac0  000202c4  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000a508  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001c09  00000000  00000000  0002a5a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c16  00000000  00000000  0002c1aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000498  00000000  00000000  0002ddc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000670  00000000  00000000  0002e258  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00002846  00000000  00000000  0002e8c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000018f0  00000000  00000000  0003110e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000329fe  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000fbc  00000000  00000000  00032a7c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	0800277c 	.word	0x0800277c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	0800277c 	.word	0x0800277c

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028a:	f1a4 0401 	sub.w	r4, r4, #1
 800028e:	d1e9      	bne.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f092 0f00 	teq	r2, #0
 8000436:	bf14      	ite	ne
 8000438:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000444:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000448:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800044c:	e720      	b.n	8000290 <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_ul2d>:
 8000450:	ea50 0201 	orrs.w	r2, r0, r1
 8000454:	bf08      	it	eq
 8000456:	4770      	bxeq	lr
 8000458:	b530      	push	{r4, r5, lr}
 800045a:	f04f 0500 	mov.w	r5, #0
 800045e:	e00a      	b.n	8000476 <__aeabi_l2d+0x16>

08000460 <__aeabi_l2d>:
 8000460:	ea50 0201 	orrs.w	r2, r0, r1
 8000464:	bf08      	it	eq
 8000466:	4770      	bxeq	lr
 8000468:	b530      	push	{r4, r5, lr}
 800046a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800046e:	d502      	bpl.n	8000476 <__aeabi_l2d+0x16>
 8000470:	4240      	negs	r0, r0
 8000472:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000476:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800047e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000482:	f43f aedc 	beq.w	800023e <__adddf3+0xe6>
 8000486:	f04f 0203 	mov.w	r2, #3
 800048a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800048e:	bf18      	it	ne
 8000490:	3203      	addne	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800049e:	f1c2 0320 	rsb	r3, r2, #32
 80004a2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004a6:	fa20 f002 	lsr.w	r0, r0, r2
 80004aa:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ae:	ea40 000e 	orr.w	r0, r0, lr
 80004b2:	fa21 f102 	lsr.w	r1, r1, r2
 80004b6:	4414      	add	r4, r2
 80004b8:	e6c1      	b.n	800023e <__adddf3+0xe6>
 80004ba:	bf00      	nop

080004bc <__aeabi_dmul>:
 80004bc:	b570      	push	{r4, r5, r6, lr}
 80004be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004ca:	bf1d      	ittte	ne
 80004cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d0:	ea94 0f0c 	teqne	r4, ip
 80004d4:	ea95 0f0c 	teqne	r5, ip
 80004d8:	f000 f8de 	bleq	8000698 <__aeabi_dmul+0x1dc>
 80004dc:	442c      	add	r4, r5
 80004de:	ea81 0603 	eor.w	r6, r1, r3
 80004e2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004e6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004ea:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004ee:	bf18      	it	ne
 80004f0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80004f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80004fc:	d038      	beq.n	8000570 <__aeabi_dmul+0xb4>
 80004fe:	fba0 ce02 	umull	ip, lr, r0, r2
 8000502:	f04f 0500 	mov.w	r5, #0
 8000506:	fbe1 e502 	umlal	lr, r5, r1, r2
 800050a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800050e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000512:	f04f 0600 	mov.w	r6, #0
 8000516:	fbe1 5603 	umlal	r5, r6, r1, r3
 800051a:	f09c 0f00 	teq	ip, #0
 800051e:	bf18      	it	ne
 8000520:	f04e 0e01 	orrne.w	lr, lr, #1
 8000524:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000528:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800052c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000530:	d204      	bcs.n	800053c <__aeabi_dmul+0x80>
 8000532:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000536:	416d      	adcs	r5, r5
 8000538:	eb46 0606 	adc.w	r6, r6, r6
 800053c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000540:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000544:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000548:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800054c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000550:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000554:	bf88      	it	hi
 8000556:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800055a:	d81e      	bhi.n	800059a <__aeabi_dmul+0xde>
 800055c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000560:	bf08      	it	eq
 8000562:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000566:	f150 0000 	adcs.w	r0, r0, #0
 800056a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800056e:	bd70      	pop	{r4, r5, r6, pc}
 8000570:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000574:	ea46 0101 	orr.w	r1, r6, r1
 8000578:	ea40 0002 	orr.w	r0, r0, r2
 800057c:	ea81 0103 	eor.w	r1, r1, r3
 8000580:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000584:	bfc2      	ittt	gt
 8000586:	ebd4 050c 	rsbsgt	r5, r4, ip
 800058a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800058e:	bd70      	popgt	{r4, r5, r6, pc}
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f04f 0e00 	mov.w	lr, #0
 8000598:	3c01      	subs	r4, #1
 800059a:	f300 80ab 	bgt.w	80006f4 <__aeabi_dmul+0x238>
 800059e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005a2:	bfde      	ittt	le
 80005a4:	2000      	movle	r0, #0
 80005a6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005aa:	bd70      	pople	{r4, r5, r6, pc}
 80005ac:	f1c4 0400 	rsb	r4, r4, #0
 80005b0:	3c20      	subs	r4, #32
 80005b2:	da35      	bge.n	8000620 <__aeabi_dmul+0x164>
 80005b4:	340c      	adds	r4, #12
 80005b6:	dc1b      	bgt.n	80005f0 <__aeabi_dmul+0x134>
 80005b8:	f104 0414 	add.w	r4, r4, #20
 80005bc:	f1c4 0520 	rsb	r5, r4, #32
 80005c0:	fa00 f305 	lsl.w	r3, r0, r5
 80005c4:	fa20 f004 	lsr.w	r0, r0, r4
 80005c8:	fa01 f205 	lsl.w	r2, r1, r5
 80005cc:	ea40 0002 	orr.w	r0, r0, r2
 80005d0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005dc:	fa21 f604 	lsr.w	r6, r1, r4
 80005e0:	eb42 0106 	adc.w	r1, r2, r6
 80005e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005e8:	bf08      	it	eq
 80005ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005ee:	bd70      	pop	{r4, r5, r6, pc}
 80005f0:	f1c4 040c 	rsb	r4, r4, #12
 80005f4:	f1c4 0520 	rsb	r5, r4, #32
 80005f8:	fa00 f304 	lsl.w	r3, r0, r4
 80005fc:	fa20 f005 	lsr.w	r0, r0, r5
 8000600:	fa01 f204 	lsl.w	r2, r1, r4
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800060c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000610:	f141 0100 	adc.w	r1, r1, #0
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 0520 	rsb	r5, r4, #32
 8000624:	fa00 f205 	lsl.w	r2, r0, r5
 8000628:	ea4e 0e02 	orr.w	lr, lr, r2
 800062c:	fa20 f304 	lsr.w	r3, r0, r4
 8000630:	fa01 f205 	lsl.w	r2, r1, r5
 8000634:	ea43 0302 	orr.w	r3, r3, r2
 8000638:	fa21 f004 	lsr.w	r0, r1, r4
 800063c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000640:	fa21 f204 	lsr.w	r2, r1, r4
 8000644:	ea20 0002 	bic.w	r0, r0, r2
 8000648:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800064c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000650:	bf08      	it	eq
 8000652:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000656:	bd70      	pop	{r4, r5, r6, pc}
 8000658:	f094 0f00 	teq	r4, #0
 800065c:	d10f      	bne.n	800067e <__aeabi_dmul+0x1c2>
 800065e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000662:	0040      	lsls	r0, r0, #1
 8000664:	eb41 0101 	adc.w	r1, r1, r1
 8000668:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800066c:	bf08      	it	eq
 800066e:	3c01      	subeq	r4, #1
 8000670:	d0f7      	beq.n	8000662 <__aeabi_dmul+0x1a6>
 8000672:	ea41 0106 	orr.w	r1, r1, r6
 8000676:	f095 0f00 	teq	r5, #0
 800067a:	bf18      	it	ne
 800067c:	4770      	bxne	lr
 800067e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000682:	0052      	lsls	r2, r2, #1
 8000684:	eb43 0303 	adc.w	r3, r3, r3
 8000688:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800068c:	bf08      	it	eq
 800068e:	3d01      	subeq	r5, #1
 8000690:	d0f7      	beq.n	8000682 <__aeabi_dmul+0x1c6>
 8000692:	ea43 0306 	orr.w	r3, r3, r6
 8000696:	4770      	bx	lr
 8000698:	ea94 0f0c 	teq	r4, ip
 800069c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a0:	bf18      	it	ne
 80006a2:	ea95 0f0c 	teqne	r5, ip
 80006a6:	d00c      	beq.n	80006c2 <__aeabi_dmul+0x206>
 80006a8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ac:	bf18      	it	ne
 80006ae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006b2:	d1d1      	bne.n	8000658 <__aeabi_dmul+0x19c>
 80006b4:	ea81 0103 	eor.w	r1, r1, r3
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	f04f 0000 	mov.w	r0, #0
 80006c0:	bd70      	pop	{r4, r5, r6, pc}
 80006c2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c6:	bf06      	itte	eq
 80006c8:	4610      	moveq	r0, r2
 80006ca:	4619      	moveq	r1, r3
 80006cc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d0:	d019      	beq.n	8000706 <__aeabi_dmul+0x24a>
 80006d2:	ea94 0f0c 	teq	r4, ip
 80006d6:	d102      	bne.n	80006de <__aeabi_dmul+0x222>
 80006d8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006dc:	d113      	bne.n	8000706 <__aeabi_dmul+0x24a>
 80006de:	ea95 0f0c 	teq	r5, ip
 80006e2:	d105      	bne.n	80006f0 <__aeabi_dmul+0x234>
 80006e4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006e8:	bf1c      	itt	ne
 80006ea:	4610      	movne	r0, r2
 80006ec:	4619      	movne	r1, r3
 80006ee:	d10a      	bne.n	8000706 <__aeabi_dmul+0x24a>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80006fc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000700:	f04f 0000 	mov.w	r0, #0
 8000704:	bd70      	pop	{r4, r5, r6, pc}
 8000706:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800070a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800070e:	bd70      	pop	{r4, r5, r6, pc}

08000710 <__aeabi_ddiv>:
 8000710:	b570      	push	{r4, r5, r6, lr}
 8000712:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000716:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800071a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800071e:	bf1d      	ittte	ne
 8000720:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000724:	ea94 0f0c 	teqne	r4, ip
 8000728:	ea95 0f0c 	teqne	r5, ip
 800072c:	f000 f8a7 	bleq	800087e <__aeabi_ddiv+0x16e>
 8000730:	eba4 0405 	sub.w	r4, r4, r5
 8000734:	ea81 0e03 	eor.w	lr, r1, r3
 8000738:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800073c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000740:	f000 8088 	beq.w	8000854 <__aeabi_ddiv+0x144>
 8000744:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000748:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800074c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000750:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000754:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000758:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800075c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000760:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000764:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000768:	429d      	cmp	r5, r3
 800076a:	bf08      	it	eq
 800076c:	4296      	cmpeq	r6, r2
 800076e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000772:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000776:	d202      	bcs.n	800077e <__aeabi_ddiv+0x6e>
 8000778:	085b      	lsrs	r3, r3, #1
 800077a:	ea4f 0232 	mov.w	r2, r2, rrx
 800077e:	1ab6      	subs	r6, r6, r2
 8000780:	eb65 0503 	sbc.w	r5, r5, r3
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800078e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000792:	ebb6 0e02 	subs.w	lr, r6, r2
 8000796:	eb75 0e03 	sbcs.w	lr, r5, r3
 800079a:	bf22      	ittt	cs
 800079c:	1ab6      	subcs	r6, r6, r2
 800079e:	4675      	movcs	r5, lr
 80007a0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b2:	bf22      	ittt	cs
 80007b4:	1ab6      	subcs	r6, r6, r2
 80007b6:	4675      	movcs	r5, lr
 80007b8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007ec:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f0:	d018      	beq.n	8000824 <__aeabi_ddiv+0x114>
 80007f2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007f6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80007fa:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80007fe:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000802:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000806:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800080a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800080e:	d1c0      	bne.n	8000792 <__aeabi_ddiv+0x82>
 8000810:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000814:	d10b      	bne.n	800082e <__aeabi_ddiv+0x11e>
 8000816:	ea41 0100 	orr.w	r1, r1, r0
 800081a:	f04f 0000 	mov.w	r0, #0
 800081e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000822:	e7b6      	b.n	8000792 <__aeabi_ddiv+0x82>
 8000824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000828:	bf04      	itt	eq
 800082a:	4301      	orreq	r1, r0
 800082c:	2000      	moveq	r0, #0
 800082e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000832:	bf88      	it	hi
 8000834:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000838:	f63f aeaf 	bhi.w	800059a <__aeabi_dmul+0xde>
 800083c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000840:	bf04      	itt	eq
 8000842:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000846:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800084a:	f150 0000 	adcs.w	r0, r0, #0
 800084e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000852:	bd70      	pop	{r4, r5, r6, pc}
 8000854:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000858:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800085c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000860:	bfc2      	ittt	gt
 8000862:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000866:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800086a:	bd70      	popgt	{r4, r5, r6, pc}
 800086c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000870:	f04f 0e00 	mov.w	lr, #0
 8000874:	3c01      	subs	r4, #1
 8000876:	e690      	b.n	800059a <__aeabi_dmul+0xde>
 8000878:	ea45 0e06 	orr.w	lr, r5, r6
 800087c:	e68d      	b.n	800059a <__aeabi_dmul+0xde>
 800087e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000882:	ea94 0f0c 	teq	r4, ip
 8000886:	bf08      	it	eq
 8000888:	ea95 0f0c 	teqeq	r5, ip
 800088c:	f43f af3b 	beq.w	8000706 <__aeabi_dmul+0x24a>
 8000890:	ea94 0f0c 	teq	r4, ip
 8000894:	d10a      	bne.n	80008ac <__aeabi_ddiv+0x19c>
 8000896:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800089a:	f47f af34 	bne.w	8000706 <__aeabi_dmul+0x24a>
 800089e:	ea95 0f0c 	teq	r5, ip
 80008a2:	f47f af25 	bne.w	80006f0 <__aeabi_dmul+0x234>
 80008a6:	4610      	mov	r0, r2
 80008a8:	4619      	mov	r1, r3
 80008aa:	e72c      	b.n	8000706 <__aeabi_dmul+0x24a>
 80008ac:	ea95 0f0c 	teq	r5, ip
 80008b0:	d106      	bne.n	80008c0 <__aeabi_ddiv+0x1b0>
 80008b2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b6:	f43f aefd 	beq.w	80006b4 <__aeabi_dmul+0x1f8>
 80008ba:	4610      	mov	r0, r2
 80008bc:	4619      	mov	r1, r3
 80008be:	e722      	b.n	8000706 <__aeabi_dmul+0x24a>
 80008c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c4:	bf18      	it	ne
 80008c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ca:	f47f aec5 	bne.w	8000658 <__aeabi_dmul+0x19c>
 80008ce:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008d2:	f47f af0d 	bne.w	80006f0 <__aeabi_dmul+0x234>
 80008d6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008da:	f47f aeeb 	bne.w	80006b4 <__aeabi_dmul+0x1f8>
 80008de:	e712      	b.n	8000706 <__aeabi_dmul+0x24a>

080008e0 <__aeabi_d2iz>:
 80008e0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008e4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008e8:	d215      	bcs.n	8000916 <__aeabi_d2iz+0x36>
 80008ea:	d511      	bpl.n	8000910 <__aeabi_d2iz+0x30>
 80008ec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008f0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008f4:	d912      	bls.n	800091c <__aeabi_d2iz+0x3c>
 80008f6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008fe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000902:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000906:	fa23 f002 	lsr.w	r0, r3, r2
 800090a:	bf18      	it	ne
 800090c:	4240      	negne	r0, r0
 800090e:	4770      	bx	lr
 8000910:	f04f 0000 	mov.w	r0, #0
 8000914:	4770      	bx	lr
 8000916:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091a:	d105      	bne.n	8000928 <__aeabi_d2iz+0x48>
 800091c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000920:	bf08      	it	eq
 8000922:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000926:	4770      	bx	lr
 8000928:	f04f 0000 	mov.w	r0, #0
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop

08000930 <__aeabi_frsub>:
 8000930:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000934:	e002      	b.n	800093c <__addsf3>
 8000936:	bf00      	nop

08000938 <__aeabi_fsub>:
 8000938:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800093c <__addsf3>:
 800093c:	0042      	lsls	r2, r0, #1
 800093e:	bf1f      	itttt	ne
 8000940:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000944:	ea92 0f03 	teqne	r2, r3
 8000948:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800094c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000950:	d06a      	beq.n	8000a28 <__addsf3+0xec>
 8000952:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000956:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800095a:	bfc1      	itttt	gt
 800095c:	18d2      	addgt	r2, r2, r3
 800095e:	4041      	eorgt	r1, r0
 8000960:	4048      	eorgt	r0, r1
 8000962:	4041      	eorgt	r1, r0
 8000964:	bfb8      	it	lt
 8000966:	425b      	neglt	r3, r3
 8000968:	2b19      	cmp	r3, #25
 800096a:	bf88      	it	hi
 800096c:	4770      	bxhi	lr
 800096e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000972:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000976:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800097a:	bf18      	it	ne
 800097c:	4240      	negne	r0, r0
 800097e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000982:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000986:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800098a:	bf18      	it	ne
 800098c:	4249      	negne	r1, r1
 800098e:	ea92 0f03 	teq	r2, r3
 8000992:	d03f      	beq.n	8000a14 <__addsf3+0xd8>
 8000994:	f1a2 0201 	sub.w	r2, r2, #1
 8000998:	fa41 fc03 	asr.w	ip, r1, r3
 800099c:	eb10 000c 	adds.w	r0, r0, ip
 80009a0:	f1c3 0320 	rsb	r3, r3, #32
 80009a4:	fa01 f103 	lsl.w	r1, r1, r3
 80009a8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80009ac:	d502      	bpl.n	80009b4 <__addsf3+0x78>
 80009ae:	4249      	negs	r1, r1
 80009b0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009b4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80009b8:	d313      	bcc.n	80009e2 <__addsf3+0xa6>
 80009ba:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009be:	d306      	bcc.n	80009ce <__addsf3+0x92>
 80009c0:	0840      	lsrs	r0, r0, #1
 80009c2:	ea4f 0131 	mov.w	r1, r1, rrx
 80009c6:	f102 0201 	add.w	r2, r2, #1
 80009ca:	2afe      	cmp	r2, #254	; 0xfe
 80009cc:	d251      	bcs.n	8000a72 <__addsf3+0x136>
 80009ce:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80009d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009d6:	bf08      	it	eq
 80009d8:	f020 0001 	biceq.w	r0, r0, #1
 80009dc:	ea40 0003 	orr.w	r0, r0, r3
 80009e0:	4770      	bx	lr
 80009e2:	0049      	lsls	r1, r1, #1
 80009e4:	eb40 0000 	adc.w	r0, r0, r0
 80009e8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80009ec:	f1a2 0201 	sub.w	r2, r2, #1
 80009f0:	d1ed      	bne.n	80009ce <__addsf3+0x92>
 80009f2:	fab0 fc80 	clz	ip, r0
 80009f6:	f1ac 0c08 	sub.w	ip, ip, #8
 80009fa:	ebb2 020c 	subs.w	r2, r2, ip
 80009fe:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a02:	bfaa      	itet	ge
 8000a04:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a08:	4252      	neglt	r2, r2
 8000a0a:	4318      	orrge	r0, r3
 8000a0c:	bfbc      	itt	lt
 8000a0e:	40d0      	lsrlt	r0, r2
 8000a10:	4318      	orrlt	r0, r3
 8000a12:	4770      	bx	lr
 8000a14:	f092 0f00 	teq	r2, #0
 8000a18:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a1c:	bf06      	itte	eq
 8000a1e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a22:	3201      	addeq	r2, #1
 8000a24:	3b01      	subne	r3, #1
 8000a26:	e7b5      	b.n	8000994 <__addsf3+0x58>
 8000a28:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a2c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a36:	d021      	beq.n	8000a7c <__addsf3+0x140>
 8000a38:	ea92 0f03 	teq	r2, r3
 8000a3c:	d004      	beq.n	8000a48 <__addsf3+0x10c>
 8000a3e:	f092 0f00 	teq	r2, #0
 8000a42:	bf08      	it	eq
 8000a44:	4608      	moveq	r0, r1
 8000a46:	4770      	bx	lr
 8000a48:	ea90 0f01 	teq	r0, r1
 8000a4c:	bf1c      	itt	ne
 8000a4e:	2000      	movne	r0, #0
 8000a50:	4770      	bxne	lr
 8000a52:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000a56:	d104      	bne.n	8000a62 <__addsf3+0x126>
 8000a58:	0040      	lsls	r0, r0, #1
 8000a5a:	bf28      	it	cs
 8000a5c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000a60:	4770      	bx	lr
 8000a62:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000a66:	bf3c      	itt	cc
 8000a68:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000a6c:	4770      	bxcc	lr
 8000a6e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a72:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000a76:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a7a:	4770      	bx	lr
 8000a7c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a80:	bf16      	itet	ne
 8000a82:	4608      	movne	r0, r1
 8000a84:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000a88:	4601      	movne	r1, r0
 8000a8a:	0242      	lsls	r2, r0, #9
 8000a8c:	bf06      	itte	eq
 8000a8e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000a92:	ea90 0f01 	teqeq	r0, r1
 8000a96:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000a9a:	4770      	bx	lr

08000a9c <__aeabi_ui2f>:
 8000a9c:	f04f 0300 	mov.w	r3, #0
 8000aa0:	e004      	b.n	8000aac <__aeabi_i2f+0x8>
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_i2f>:
 8000aa4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000aa8:	bf48      	it	mi
 8000aaa:	4240      	negmi	r0, r0
 8000aac:	ea5f 0c00 	movs.w	ip, r0
 8000ab0:	bf08      	it	eq
 8000ab2:	4770      	bxeq	lr
 8000ab4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ab8:	4601      	mov	r1, r0
 8000aba:	f04f 0000 	mov.w	r0, #0
 8000abe:	e01c      	b.n	8000afa <__aeabi_l2f+0x2a>

08000ac0 <__aeabi_ul2f>:
 8000ac0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ac4:	bf08      	it	eq
 8000ac6:	4770      	bxeq	lr
 8000ac8:	f04f 0300 	mov.w	r3, #0
 8000acc:	e00a      	b.n	8000ae4 <__aeabi_l2f+0x14>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_l2f>:
 8000ad0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ad4:	bf08      	it	eq
 8000ad6:	4770      	bxeq	lr
 8000ad8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000adc:	d502      	bpl.n	8000ae4 <__aeabi_l2f+0x14>
 8000ade:	4240      	negs	r0, r0
 8000ae0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ae4:	ea5f 0c01 	movs.w	ip, r1
 8000ae8:	bf02      	ittt	eq
 8000aea:	4684      	moveq	ip, r0
 8000aec:	4601      	moveq	r1, r0
 8000aee:	2000      	moveq	r0, #0
 8000af0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000af4:	bf08      	it	eq
 8000af6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000afa:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000afe:	fabc f28c 	clz	r2, ip
 8000b02:	3a08      	subs	r2, #8
 8000b04:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b08:	db10      	blt.n	8000b2c <__aeabi_l2f+0x5c>
 8000b0a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b0e:	4463      	add	r3, ip
 8000b10:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b14:	f1c2 0220 	rsb	r2, r2, #32
 8000b18:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b1c:	fa20 f202 	lsr.w	r2, r0, r2
 8000b20:	eb43 0002 	adc.w	r0, r3, r2
 8000b24:	bf08      	it	eq
 8000b26:	f020 0001 	biceq.w	r0, r0, #1
 8000b2a:	4770      	bx	lr
 8000b2c:	f102 0220 	add.w	r2, r2, #32
 8000b30:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b34:	f1c2 0220 	rsb	r2, r2, #32
 8000b38:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b3c:	fa21 f202 	lsr.w	r2, r1, r2
 8000b40:	eb43 0002 	adc.w	r0, r3, r2
 8000b44:	bf08      	it	eq
 8000b46:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b4a:	4770      	bx	lr

08000b4c <__aeabi_fmul>:
 8000b4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b54:	bf1e      	ittt	ne
 8000b56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b5a:	ea92 0f0c 	teqne	r2, ip
 8000b5e:	ea93 0f0c 	teqne	r3, ip
 8000b62:	d06f      	beq.n	8000c44 <__aeabi_fmul+0xf8>
 8000b64:	441a      	add	r2, r3
 8000b66:	ea80 0c01 	eor.w	ip, r0, r1
 8000b6a:	0240      	lsls	r0, r0, #9
 8000b6c:	bf18      	it	ne
 8000b6e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b72:	d01e      	beq.n	8000bb2 <__aeabi_fmul+0x66>
 8000b74:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000b78:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000b7c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000b80:	fba0 3101 	umull	r3, r1, r0, r1
 8000b84:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000b88:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000b8c:	bf3e      	ittt	cc
 8000b8e:	0049      	lslcc	r1, r1, #1
 8000b90:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000b94:	005b      	lslcc	r3, r3, #1
 8000b96:	ea40 0001 	orr.w	r0, r0, r1
 8000b9a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000b9e:	2afd      	cmp	r2, #253	; 0xfd
 8000ba0:	d81d      	bhi.n	8000bde <__aeabi_fmul+0x92>
 8000ba2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000ba6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000baa:	bf08      	it	eq
 8000bac:	f020 0001 	biceq.w	r0, r0, #1
 8000bb0:	4770      	bx	lr
 8000bb2:	f090 0f00 	teq	r0, #0
 8000bb6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000bba:	bf08      	it	eq
 8000bbc:	0249      	lsleq	r1, r1, #9
 8000bbe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000bc2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000bc6:	3a7f      	subs	r2, #127	; 0x7f
 8000bc8:	bfc2      	ittt	gt
 8000bca:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000bce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bd2:	4770      	bxgt	lr
 8000bd4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd8:	f04f 0300 	mov.w	r3, #0
 8000bdc:	3a01      	subs	r2, #1
 8000bde:	dc5d      	bgt.n	8000c9c <__aeabi_fmul+0x150>
 8000be0:	f112 0f19 	cmn.w	r2, #25
 8000be4:	bfdc      	itt	le
 8000be6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000bea:	4770      	bxle	lr
 8000bec:	f1c2 0200 	rsb	r2, r2, #0
 8000bf0:	0041      	lsls	r1, r0, #1
 8000bf2:	fa21 f102 	lsr.w	r1, r1, r2
 8000bf6:	f1c2 0220 	rsb	r2, r2, #32
 8000bfa:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bfe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c02:	f140 0000 	adc.w	r0, r0, #0
 8000c06:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c0a:	bf08      	it	eq
 8000c0c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c10:	4770      	bx	lr
 8000c12:	f092 0f00 	teq	r2, #0
 8000c16:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c1a:	bf02      	ittt	eq
 8000c1c:	0040      	lsleq	r0, r0, #1
 8000c1e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c22:	3a01      	subeq	r2, #1
 8000c24:	d0f9      	beq.n	8000c1a <__aeabi_fmul+0xce>
 8000c26:	ea40 000c 	orr.w	r0, r0, ip
 8000c2a:	f093 0f00 	teq	r3, #0
 8000c2e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c32:	bf02      	ittt	eq
 8000c34:	0049      	lsleq	r1, r1, #1
 8000c36:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c3a:	3b01      	subeq	r3, #1
 8000c3c:	d0f9      	beq.n	8000c32 <__aeabi_fmul+0xe6>
 8000c3e:	ea41 010c 	orr.w	r1, r1, ip
 8000c42:	e78f      	b.n	8000b64 <__aeabi_fmul+0x18>
 8000c44:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c48:	ea92 0f0c 	teq	r2, ip
 8000c4c:	bf18      	it	ne
 8000c4e:	ea93 0f0c 	teqne	r3, ip
 8000c52:	d00a      	beq.n	8000c6a <__aeabi_fmul+0x11e>
 8000c54:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c58:	bf18      	it	ne
 8000c5a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c5e:	d1d8      	bne.n	8000c12 <__aeabi_fmul+0xc6>
 8000c60:	ea80 0001 	eor.w	r0, r0, r1
 8000c64:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c68:	4770      	bx	lr
 8000c6a:	f090 0f00 	teq	r0, #0
 8000c6e:	bf17      	itett	ne
 8000c70:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000c74:	4608      	moveq	r0, r1
 8000c76:	f091 0f00 	teqne	r1, #0
 8000c7a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000c7e:	d014      	beq.n	8000caa <__aeabi_fmul+0x15e>
 8000c80:	ea92 0f0c 	teq	r2, ip
 8000c84:	d101      	bne.n	8000c8a <__aeabi_fmul+0x13e>
 8000c86:	0242      	lsls	r2, r0, #9
 8000c88:	d10f      	bne.n	8000caa <__aeabi_fmul+0x15e>
 8000c8a:	ea93 0f0c 	teq	r3, ip
 8000c8e:	d103      	bne.n	8000c98 <__aeabi_fmul+0x14c>
 8000c90:	024b      	lsls	r3, r1, #9
 8000c92:	bf18      	it	ne
 8000c94:	4608      	movne	r0, r1
 8000c96:	d108      	bne.n	8000caa <__aeabi_fmul+0x15e>
 8000c98:	ea80 0001 	eor.w	r0, r0, r1
 8000c9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ca0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca8:	4770      	bx	lr
 8000caa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cae:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000cb2:	4770      	bx	lr

08000cb4 <__aeabi_fdiv>:
 8000cb4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cb8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cc2:	ea92 0f0c 	teqne	r2, ip
 8000cc6:	ea93 0f0c 	teqne	r3, ip
 8000cca:	d069      	beq.n	8000da0 <__aeabi_fdiv+0xec>
 8000ccc:	eba2 0203 	sub.w	r2, r2, r3
 8000cd0:	ea80 0c01 	eor.w	ip, r0, r1
 8000cd4:	0249      	lsls	r1, r1, #9
 8000cd6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000cda:	d037      	beq.n	8000d4c <__aeabi_fdiv+0x98>
 8000cdc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ce0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ce4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ce8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cec:	428b      	cmp	r3, r1
 8000cee:	bf38      	it	cc
 8000cf0:	005b      	lslcc	r3, r3, #1
 8000cf2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000cf6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000cfa:	428b      	cmp	r3, r1
 8000cfc:	bf24      	itt	cs
 8000cfe:	1a5b      	subcs	r3, r3, r1
 8000d00:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d04:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d08:	bf24      	itt	cs
 8000d0a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d0e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d12:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d16:	bf24      	itt	cs
 8000d18:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d20:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d24:	bf24      	itt	cs
 8000d26:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d2a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d2e:	011b      	lsls	r3, r3, #4
 8000d30:	bf18      	it	ne
 8000d32:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d36:	d1e0      	bne.n	8000cfa <__aeabi_fdiv+0x46>
 8000d38:	2afd      	cmp	r2, #253	; 0xfd
 8000d3a:	f63f af50 	bhi.w	8000bde <__aeabi_fmul+0x92>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d44:	bf08      	it	eq
 8000d46:	f020 0001 	biceq.w	r0, r0, #1
 8000d4a:	4770      	bx	lr
 8000d4c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d50:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d54:	327f      	adds	r2, #127	; 0x7f
 8000d56:	bfc2      	ittt	gt
 8000d58:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d5c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d60:	4770      	bxgt	lr
 8000d62:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d66:	f04f 0300 	mov.w	r3, #0
 8000d6a:	3a01      	subs	r2, #1
 8000d6c:	e737      	b.n	8000bde <__aeabi_fmul+0x92>
 8000d6e:	f092 0f00 	teq	r2, #0
 8000d72:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d76:	bf02      	ittt	eq
 8000d78:	0040      	lsleq	r0, r0, #1
 8000d7a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7e:	3a01      	subeq	r2, #1
 8000d80:	d0f9      	beq.n	8000d76 <__aeabi_fdiv+0xc2>
 8000d82:	ea40 000c 	orr.w	r0, r0, ip
 8000d86:	f093 0f00 	teq	r3, #0
 8000d8a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8e:	bf02      	ittt	eq
 8000d90:	0049      	lsleq	r1, r1, #1
 8000d92:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d96:	3b01      	subeq	r3, #1
 8000d98:	d0f9      	beq.n	8000d8e <__aeabi_fdiv+0xda>
 8000d9a:	ea41 010c 	orr.w	r1, r1, ip
 8000d9e:	e795      	b.n	8000ccc <__aeabi_fdiv+0x18>
 8000da0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da4:	ea92 0f0c 	teq	r2, ip
 8000da8:	d108      	bne.n	8000dbc <__aeabi_fdiv+0x108>
 8000daa:	0242      	lsls	r2, r0, #9
 8000dac:	f47f af7d 	bne.w	8000caa <__aeabi_fmul+0x15e>
 8000db0:	ea93 0f0c 	teq	r3, ip
 8000db4:	f47f af70 	bne.w	8000c98 <__aeabi_fmul+0x14c>
 8000db8:	4608      	mov	r0, r1
 8000dba:	e776      	b.n	8000caa <__aeabi_fmul+0x15e>
 8000dbc:	ea93 0f0c 	teq	r3, ip
 8000dc0:	d104      	bne.n	8000dcc <__aeabi_fdiv+0x118>
 8000dc2:	024b      	lsls	r3, r1, #9
 8000dc4:	f43f af4c 	beq.w	8000c60 <__aeabi_fmul+0x114>
 8000dc8:	4608      	mov	r0, r1
 8000dca:	e76e      	b.n	8000caa <__aeabi_fmul+0x15e>
 8000dcc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dd0:	bf18      	it	ne
 8000dd2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dd6:	d1ca      	bne.n	8000d6e <__aeabi_fdiv+0xba>
 8000dd8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ddc:	f47f af5c 	bne.w	8000c98 <__aeabi_fmul+0x14c>
 8000de0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000de4:	f47f af3c 	bne.w	8000c60 <__aeabi_fmul+0x114>
 8000de8:	e75f      	b.n	8000caa <__aeabi_fmul+0x15e>
 8000dea:	bf00      	nop

08000dec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dec:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dee:	4b0e      	ldr	r3, [pc, #56]	; (8000e28 <HAL_InitTick+0x3c>)
{
 8000df0:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000df2:	7818      	ldrb	r0, [r3, #0]
 8000df4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000df8:	fbb3 f3f0 	udiv	r3, r3, r0
 8000dfc:	4a0b      	ldr	r2, [pc, #44]	; (8000e2c <HAL_InitTick+0x40>)
 8000dfe:	6810      	ldr	r0, [r2, #0]
 8000e00:	fbb0 f0f3 	udiv	r0, r0, r3
 8000e04:	f000 f892 	bl	8000f2c <HAL_SYSTICK_Config>
 8000e08:	4604      	mov	r4, r0
 8000e0a:	b958      	cbnz	r0, 8000e24 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e0c:	2d0f      	cmp	r5, #15
 8000e0e:	d809      	bhi.n	8000e24 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e10:	4602      	mov	r2, r0
 8000e12:	4629      	mov	r1, r5
 8000e14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e18:	f000 f854 	bl	8000ec4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e1c:	4b04      	ldr	r3, [pc, #16]	; (8000e30 <HAL_InitTick+0x44>)
 8000e1e:	4620      	mov	r0, r4
 8000e20:	601d      	str	r5, [r3, #0]
 8000e22:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000e24:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000e26:	bd38      	pop	{r3, r4, r5, pc}
 8000e28:	20000000 	.word	0x20000000
 8000e2c:	20000008 	.word	0x20000008
 8000e30:	20000004 	.word	0x20000004

08000e34 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e34:	4a07      	ldr	r2, [pc, #28]	; (8000e54 <HAL_Init+0x20>)
{
 8000e36:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e38:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e3a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e3c:	f043 0310 	orr.w	r3, r3, #16
 8000e40:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e42:	f000 f82d 	bl	8000ea0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e46:	2000      	movs	r0, #0
 8000e48:	f7ff ffd0 	bl	8000dec <HAL_InitTick>
  HAL_MspInit();
 8000e4c:	f000 ff96 	bl	8001d7c <HAL_MspInit>
}
 8000e50:	2000      	movs	r0, #0
 8000e52:	bd08      	pop	{r3, pc}
 8000e54:	40022000 	.word	0x40022000

08000e58 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000e58:	4a03      	ldr	r2, [pc, #12]	; (8000e68 <HAL_IncTick+0x10>)
 8000e5a:	4b04      	ldr	r3, [pc, #16]	; (8000e6c <HAL_IncTick+0x14>)
 8000e5c:	6811      	ldr	r1, [r2, #0]
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	440b      	add	r3, r1
 8000e62:	6013      	str	r3, [r2, #0]
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	20000098 	.word	0x20000098
 8000e6c:	20000000 	.word	0x20000000

08000e70 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000e70:	4b01      	ldr	r3, [pc, #4]	; (8000e78 <HAL_GetTick+0x8>)
 8000e72:	6818      	ldr	r0, [r3, #0]
}
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	20000098 	.word	0x20000098

08000e7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e7c:	b538      	push	{r3, r4, r5, lr}
 8000e7e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000e80:	f7ff fff6 	bl	8000e70 <HAL_GetTick>
 8000e84:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e86:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000e88:	bf1e      	ittt	ne
 8000e8a:	4b04      	ldrne	r3, [pc, #16]	; (8000e9c <HAL_Delay+0x20>)
 8000e8c:	781b      	ldrbne	r3, [r3, #0]
 8000e8e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e90:	f7ff ffee 	bl	8000e70 <HAL_GetTick>
 8000e94:	1b40      	subs	r0, r0, r5
 8000e96:	4284      	cmp	r4, r0
 8000e98:	d8fa      	bhi.n	8000e90 <HAL_Delay+0x14>
  {
  }
}
 8000e9a:	bd38      	pop	{r3, r4, r5, pc}
 8000e9c:	20000000 	.word	0x20000000

08000ea0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ea0:	4a07      	ldr	r2, [pc, #28]	; (8000ec0 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000ea2:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ea4:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000ea6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eaa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000eae:	041b      	lsls	r3, r3, #16
 8000eb0:	0c1b      	lsrs	r3, r3, #16
 8000eb2:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000eb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000eba:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000ebc:	60d3      	str	r3, [r2, #12]
 8000ebe:	4770      	bx	lr
 8000ec0:	e000ed00 	.word	0xe000ed00

08000ec4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ec4:	4b17      	ldr	r3, [pc, #92]	; (8000f24 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ec6:	b530      	push	{r4, r5, lr}
 8000ec8:	68dc      	ldr	r4, [r3, #12]
 8000eca:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ece:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ed2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ed4:	2b04      	cmp	r3, #4
 8000ed6:	bf28      	it	cs
 8000ed8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eda:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000edc:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ee0:	bf98      	it	ls
 8000ee2:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee4:	fa05 f303 	lsl.w	r3, r5, r3
 8000ee8:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eec:	bf88      	it	hi
 8000eee:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef0:	4019      	ands	r1, r3
 8000ef2:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ef4:	fa05 f404 	lsl.w	r4, r5, r4
 8000ef8:	3c01      	subs	r4, #1
 8000efa:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000efc:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000efe:	ea42 0201 	orr.w	r2, r2, r1
 8000f02:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f06:	bfaf      	iteee	ge
 8000f08:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f0c:	4b06      	ldrlt	r3, [pc, #24]	; (8000f28 <HAL_NVIC_SetPriority+0x64>)
 8000f0e:	f000 000f 	andlt.w	r0, r0, #15
 8000f12:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f14:	bfa5      	ittet	ge
 8000f16:	b2d2      	uxtbge	r2, r2
 8000f18:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f1c:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f1e:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000f22:	bd30      	pop	{r4, r5, pc}
 8000f24:	e000ed00 	.word	0xe000ed00
 8000f28:	e000ed14 	.word	0xe000ed14

08000f2c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f2c:	3801      	subs	r0, #1
 8000f2e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000f32:	d20a      	bcs.n	8000f4a <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f34:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f36:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f38:	4a06      	ldr	r2, [pc, #24]	; (8000f54 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f3a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f3c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f40:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f42:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f44:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000f4a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	e000e010 	.word	0xe000e010
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8000f5c:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000f5e:	4616      	mov	r6, r2
 8000f60:	4b65      	ldr	r3, [pc, #404]	; (80010f8 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f62:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8001108 <HAL_GPIO_Init+0x1b0>
 8000f66:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 800110c <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 8000f6a:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f6e:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8000f70:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f74:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8000f78:	45a0      	cmp	r8, r4
 8000f7a:	d17f      	bne.n	800107c <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8000f7c:	684d      	ldr	r5, [r1, #4]
 8000f7e:	2d12      	cmp	r5, #18
 8000f80:	f000 80af 	beq.w	80010e2 <HAL_GPIO_Init+0x18a>
 8000f84:	f200 8088 	bhi.w	8001098 <HAL_GPIO_Init+0x140>
 8000f88:	2d02      	cmp	r5, #2
 8000f8a:	f000 80a7 	beq.w	80010dc <HAL_GPIO_Init+0x184>
 8000f8e:	d87c      	bhi.n	800108a <HAL_GPIO_Init+0x132>
 8000f90:	2d00      	cmp	r5, #0
 8000f92:	f000 808e 	beq.w	80010b2 <HAL_GPIO_Init+0x15a>
 8000f96:	2d01      	cmp	r5, #1
 8000f98:	f000 809e 	beq.w	80010d8 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f9c:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000fa0:	2cff      	cmp	r4, #255	; 0xff
 8000fa2:	bf93      	iteet	ls
 8000fa4:	4682      	movls	sl, r0
 8000fa6:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000faa:	3d08      	subhi	r5, #8
 8000fac:	f8d0 b000 	ldrls.w	fp, [r0]
 8000fb0:	bf92      	itee	ls
 8000fb2:	00b5      	lslls	r5, r6, #2
 8000fb4:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000fb8:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000fba:	fa09 f805 	lsl.w	r8, r9, r5
 8000fbe:	ea2b 0808 	bic.w	r8, fp, r8
 8000fc2:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000fc6:	bf88      	it	hi
 8000fc8:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000fcc:	ea48 0505 	orr.w	r5, r8, r5
 8000fd0:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fd4:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000fd8:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000fdc:	d04e      	beq.n	800107c <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000fde:	4d47      	ldr	r5, [pc, #284]	; (80010fc <HAL_GPIO_Init+0x1a4>)
 8000fe0:	4f46      	ldr	r7, [pc, #280]	; (80010fc <HAL_GPIO_Init+0x1a4>)
 8000fe2:	69ad      	ldr	r5, [r5, #24]
 8000fe4:	f026 0803 	bic.w	r8, r6, #3
 8000fe8:	f045 0501 	orr.w	r5, r5, #1
 8000fec:	61bd      	str	r5, [r7, #24]
 8000fee:	69bd      	ldr	r5, [r7, #24]
 8000ff0:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000ff4:	f005 0501 	and.w	r5, r5, #1
 8000ff8:	9501      	str	r5, [sp, #4]
 8000ffa:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000ffe:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001002:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001004:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8001008:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800100c:	fa09 f90b 	lsl.w	r9, r9, fp
 8001010:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001014:	4d3a      	ldr	r5, [pc, #232]	; (8001100 <HAL_GPIO_Init+0x1a8>)
 8001016:	42a8      	cmp	r0, r5
 8001018:	d068      	beq.n	80010ec <HAL_GPIO_Init+0x194>
 800101a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800101e:	42a8      	cmp	r0, r5
 8001020:	d066      	beq.n	80010f0 <HAL_GPIO_Init+0x198>
 8001022:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001026:	42a8      	cmp	r0, r5
 8001028:	d064      	beq.n	80010f4 <HAL_GPIO_Init+0x19c>
 800102a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800102e:	42a8      	cmp	r0, r5
 8001030:	bf0c      	ite	eq
 8001032:	2503      	moveq	r5, #3
 8001034:	2504      	movne	r5, #4
 8001036:	fa05 f50b 	lsl.w	r5, r5, fp
 800103a:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 800103e:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001042:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001044:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8001048:	bf14      	ite	ne
 800104a:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800104c:	43a5      	biceq	r5, r4
 800104e:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001050:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001052:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001056:	bf14      	ite	ne
 8001058:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800105a:	43a5      	biceq	r5, r4
 800105c:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800105e:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001060:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001064:	bf14      	ite	ne
 8001066:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001068:	43a5      	biceq	r5, r4
 800106a:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800106c:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800106e:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8001072:	bf14      	ite	ne
 8001074:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001076:	ea25 0404 	biceq.w	r4, r5, r4
 800107a:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 800107c:	3601      	adds	r6, #1
 800107e:	2e10      	cmp	r6, #16
 8001080:	f47f af73 	bne.w	8000f6a <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8001084:	b003      	add	sp, #12
 8001086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 800108a:	2d03      	cmp	r5, #3
 800108c:	d022      	beq.n	80010d4 <HAL_GPIO_Init+0x17c>
 800108e:	2d11      	cmp	r5, #17
 8001090:	d184      	bne.n	8000f9c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001092:	68ca      	ldr	r2, [r1, #12]
 8001094:	3204      	adds	r2, #4
          break;
 8001096:	e781      	b.n	8000f9c <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8001098:	4f1a      	ldr	r7, [pc, #104]	; (8001104 <HAL_GPIO_Init+0x1ac>)
 800109a:	42bd      	cmp	r5, r7
 800109c:	d009      	beq.n	80010b2 <HAL_GPIO_Init+0x15a>
 800109e:	d812      	bhi.n	80010c6 <HAL_GPIO_Init+0x16e>
 80010a0:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8001110 <HAL_GPIO_Init+0x1b8>
 80010a4:	454d      	cmp	r5, r9
 80010a6:	d004      	beq.n	80010b2 <HAL_GPIO_Init+0x15a>
 80010a8:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80010ac:	454d      	cmp	r5, r9
 80010ae:	f47f af75 	bne.w	8000f9c <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80010b2:	688a      	ldr	r2, [r1, #8]
 80010b4:	b1c2      	cbz	r2, 80010e8 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80010b6:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 80010b8:	bf0c      	ite	eq
 80010ba:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 80010be:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010c2:	2208      	movs	r2, #8
 80010c4:	e76a      	b.n	8000f9c <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80010c6:	4575      	cmp	r5, lr
 80010c8:	d0f3      	beq.n	80010b2 <HAL_GPIO_Init+0x15a>
 80010ca:	4565      	cmp	r5, ip
 80010cc:	d0f1      	beq.n	80010b2 <HAL_GPIO_Init+0x15a>
 80010ce:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8001114 <HAL_GPIO_Init+0x1bc>
 80010d2:	e7eb      	b.n	80010ac <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80010d4:	2200      	movs	r2, #0
 80010d6:	e761      	b.n	8000f9c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80010d8:	68ca      	ldr	r2, [r1, #12]
          break;
 80010da:	e75f      	b.n	8000f9c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80010dc:	68ca      	ldr	r2, [r1, #12]
 80010de:	3208      	adds	r2, #8
          break;
 80010e0:	e75c      	b.n	8000f9c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80010e2:	68ca      	ldr	r2, [r1, #12]
 80010e4:	320c      	adds	r2, #12
          break;
 80010e6:	e759      	b.n	8000f9c <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80010e8:	2204      	movs	r2, #4
 80010ea:	e757      	b.n	8000f9c <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010ec:	2500      	movs	r5, #0
 80010ee:	e7a2      	b.n	8001036 <HAL_GPIO_Init+0xde>
 80010f0:	2501      	movs	r5, #1
 80010f2:	e7a0      	b.n	8001036 <HAL_GPIO_Init+0xde>
 80010f4:	2502      	movs	r5, #2
 80010f6:	e79e      	b.n	8001036 <HAL_GPIO_Init+0xde>
 80010f8:	40010400 	.word	0x40010400
 80010fc:	40021000 	.word	0x40021000
 8001100:	40010800 	.word	0x40010800
 8001104:	10210000 	.word	0x10210000
 8001108:	10310000 	.word	0x10310000
 800110c:	10320000 	.word	0x10320000
 8001110:	10110000 	.word	0x10110000
 8001114:	10220000 	.word	0x10220000

08001118 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001118:	b10a      	cbz	r2, 800111e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800111a:	6101      	str	r1, [r0, #16]
 800111c:	4770      	bx	lr
 800111e:	0409      	lsls	r1, r1, #16
 8001120:	e7fb      	b.n	800111a <HAL_GPIO_WritePin+0x2>
	...

08001124 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001124:	6803      	ldr	r3, [r0, #0]
{
 8001126:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800112a:	07db      	lsls	r3, r3, #31
{
 800112c:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800112e:	d410      	bmi.n	8001152 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001130:	682b      	ldr	r3, [r5, #0]
 8001132:	079f      	lsls	r7, r3, #30
 8001134:	d45e      	bmi.n	80011f4 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001136:	682b      	ldr	r3, [r5, #0]
 8001138:	0719      	lsls	r1, r3, #28
 800113a:	f100 8095 	bmi.w	8001268 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800113e:	682b      	ldr	r3, [r5, #0]
 8001140:	075a      	lsls	r2, r3, #29
 8001142:	f100 80bf 	bmi.w	80012c4 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001146:	69ea      	ldr	r2, [r5, #28]
 8001148:	2a00      	cmp	r2, #0
 800114a:	f040 812d 	bne.w	80013a8 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 800114e:	2000      	movs	r0, #0
 8001150:	e014      	b.n	800117c <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001152:	4c90      	ldr	r4, [pc, #576]	; (8001394 <HAL_RCC_OscConfig+0x270>)
 8001154:	6863      	ldr	r3, [r4, #4]
 8001156:	f003 030c 	and.w	r3, r3, #12
 800115a:	2b04      	cmp	r3, #4
 800115c:	d007      	beq.n	800116e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800115e:	6863      	ldr	r3, [r4, #4]
 8001160:	f003 030c 	and.w	r3, r3, #12
 8001164:	2b08      	cmp	r3, #8
 8001166:	d10c      	bne.n	8001182 <HAL_RCC_OscConfig+0x5e>
 8001168:	6863      	ldr	r3, [r4, #4]
 800116a:	03de      	lsls	r6, r3, #15
 800116c:	d509      	bpl.n	8001182 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800116e:	6823      	ldr	r3, [r4, #0]
 8001170:	039c      	lsls	r4, r3, #14
 8001172:	d5dd      	bpl.n	8001130 <HAL_RCC_OscConfig+0xc>
 8001174:	686b      	ldr	r3, [r5, #4]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d1da      	bne.n	8001130 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800117a:	2001      	movs	r0, #1
}
 800117c:	b002      	add	sp, #8
 800117e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001182:	686b      	ldr	r3, [r5, #4]
 8001184:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001188:	d110      	bne.n	80011ac <HAL_RCC_OscConfig+0x88>
 800118a:	6823      	ldr	r3, [r4, #0]
 800118c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001190:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001192:	f7ff fe6d 	bl	8000e70 <HAL_GetTick>
 8001196:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001198:	6823      	ldr	r3, [r4, #0]
 800119a:	0398      	lsls	r0, r3, #14
 800119c:	d4c8      	bmi.n	8001130 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800119e:	f7ff fe67 	bl	8000e70 <HAL_GetTick>
 80011a2:	1b80      	subs	r0, r0, r6
 80011a4:	2864      	cmp	r0, #100	; 0x64
 80011a6:	d9f7      	bls.n	8001198 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 80011a8:	2003      	movs	r0, #3
 80011aa:	e7e7      	b.n	800117c <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011ac:	b99b      	cbnz	r3, 80011d6 <HAL_RCC_OscConfig+0xb2>
 80011ae:	6823      	ldr	r3, [r4, #0]
 80011b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011b4:	6023      	str	r3, [r4, #0]
 80011b6:	6823      	ldr	r3, [r4, #0]
 80011b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011bc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80011be:	f7ff fe57 	bl	8000e70 <HAL_GetTick>
 80011c2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011c4:	6823      	ldr	r3, [r4, #0]
 80011c6:	0399      	lsls	r1, r3, #14
 80011c8:	d5b2      	bpl.n	8001130 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011ca:	f7ff fe51 	bl	8000e70 <HAL_GetTick>
 80011ce:	1b80      	subs	r0, r0, r6
 80011d0:	2864      	cmp	r0, #100	; 0x64
 80011d2:	d9f7      	bls.n	80011c4 <HAL_RCC_OscConfig+0xa0>
 80011d4:	e7e8      	b.n	80011a8 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011da:	6823      	ldr	r3, [r4, #0]
 80011dc:	d103      	bne.n	80011e6 <HAL_RCC_OscConfig+0xc2>
 80011de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011e2:	6023      	str	r3, [r4, #0]
 80011e4:	e7d1      	b.n	800118a <HAL_RCC_OscConfig+0x66>
 80011e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011ea:	6023      	str	r3, [r4, #0]
 80011ec:	6823      	ldr	r3, [r4, #0]
 80011ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011f2:	e7cd      	b.n	8001190 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80011f4:	4c67      	ldr	r4, [pc, #412]	; (8001394 <HAL_RCC_OscConfig+0x270>)
 80011f6:	6863      	ldr	r3, [r4, #4]
 80011f8:	f013 0f0c 	tst.w	r3, #12
 80011fc:	d007      	beq.n	800120e <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80011fe:	6863      	ldr	r3, [r4, #4]
 8001200:	f003 030c 	and.w	r3, r3, #12
 8001204:	2b08      	cmp	r3, #8
 8001206:	d110      	bne.n	800122a <HAL_RCC_OscConfig+0x106>
 8001208:	6863      	ldr	r3, [r4, #4]
 800120a:	03da      	lsls	r2, r3, #15
 800120c:	d40d      	bmi.n	800122a <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800120e:	6823      	ldr	r3, [r4, #0]
 8001210:	079b      	lsls	r3, r3, #30
 8001212:	d502      	bpl.n	800121a <HAL_RCC_OscConfig+0xf6>
 8001214:	692b      	ldr	r3, [r5, #16]
 8001216:	2b01      	cmp	r3, #1
 8001218:	d1af      	bne.n	800117a <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800121a:	6823      	ldr	r3, [r4, #0]
 800121c:	696a      	ldr	r2, [r5, #20]
 800121e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001222:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001226:	6023      	str	r3, [r4, #0]
 8001228:	e785      	b.n	8001136 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800122a:	692a      	ldr	r2, [r5, #16]
 800122c:	4b5a      	ldr	r3, [pc, #360]	; (8001398 <HAL_RCC_OscConfig+0x274>)
 800122e:	b16a      	cbz	r2, 800124c <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8001230:	2201      	movs	r2, #1
 8001232:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001234:	f7ff fe1c 	bl	8000e70 <HAL_GetTick>
 8001238:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800123a:	6823      	ldr	r3, [r4, #0]
 800123c:	079f      	lsls	r7, r3, #30
 800123e:	d4ec      	bmi.n	800121a <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001240:	f7ff fe16 	bl	8000e70 <HAL_GetTick>
 8001244:	1b80      	subs	r0, r0, r6
 8001246:	2802      	cmp	r0, #2
 8001248:	d9f7      	bls.n	800123a <HAL_RCC_OscConfig+0x116>
 800124a:	e7ad      	b.n	80011a8 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 800124c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800124e:	f7ff fe0f 	bl	8000e70 <HAL_GetTick>
 8001252:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001254:	6823      	ldr	r3, [r4, #0]
 8001256:	0798      	lsls	r0, r3, #30
 8001258:	f57f af6d 	bpl.w	8001136 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800125c:	f7ff fe08 	bl	8000e70 <HAL_GetTick>
 8001260:	1b80      	subs	r0, r0, r6
 8001262:	2802      	cmp	r0, #2
 8001264:	d9f6      	bls.n	8001254 <HAL_RCC_OscConfig+0x130>
 8001266:	e79f      	b.n	80011a8 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001268:	69aa      	ldr	r2, [r5, #24]
 800126a:	4c4a      	ldr	r4, [pc, #296]	; (8001394 <HAL_RCC_OscConfig+0x270>)
 800126c:	4b4b      	ldr	r3, [pc, #300]	; (800139c <HAL_RCC_OscConfig+0x278>)
 800126e:	b1da      	cbz	r2, 80012a8 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8001270:	2201      	movs	r2, #1
 8001272:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001274:	f7ff fdfc 	bl	8000e70 <HAL_GetTick>
 8001278:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800127a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800127c:	079b      	lsls	r3, r3, #30
 800127e:	d50d      	bpl.n	800129c <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001280:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001284:	4b46      	ldr	r3, [pc, #280]	; (80013a0 <HAL_RCC_OscConfig+0x27c>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	fbb3 f3f2 	udiv	r3, r3, r2
 800128c:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 800128e:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001290:	9b01      	ldr	r3, [sp, #4]
 8001292:	1e5a      	subs	r2, r3, #1
 8001294:	9201      	str	r2, [sp, #4]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d1f9      	bne.n	800128e <HAL_RCC_OscConfig+0x16a>
 800129a:	e750      	b.n	800113e <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800129c:	f7ff fde8 	bl	8000e70 <HAL_GetTick>
 80012a0:	1b80      	subs	r0, r0, r6
 80012a2:	2802      	cmp	r0, #2
 80012a4:	d9e9      	bls.n	800127a <HAL_RCC_OscConfig+0x156>
 80012a6:	e77f      	b.n	80011a8 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 80012a8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80012aa:	f7ff fde1 	bl	8000e70 <HAL_GetTick>
 80012ae:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80012b2:	079f      	lsls	r7, r3, #30
 80012b4:	f57f af43 	bpl.w	800113e <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012b8:	f7ff fdda 	bl	8000e70 <HAL_GetTick>
 80012bc:	1b80      	subs	r0, r0, r6
 80012be:	2802      	cmp	r0, #2
 80012c0:	d9f6      	bls.n	80012b0 <HAL_RCC_OscConfig+0x18c>
 80012c2:	e771      	b.n	80011a8 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012c4:	4c33      	ldr	r4, [pc, #204]	; (8001394 <HAL_RCC_OscConfig+0x270>)
 80012c6:	69e3      	ldr	r3, [r4, #28]
 80012c8:	00d8      	lsls	r0, r3, #3
 80012ca:	d424      	bmi.n	8001316 <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 80012cc:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80012ce:	69e3      	ldr	r3, [r4, #28]
 80012d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012d4:	61e3      	str	r3, [r4, #28]
 80012d6:	69e3      	ldr	r3, [r4, #28]
 80012d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012dc:	9300      	str	r3, [sp, #0]
 80012de:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012e0:	4e30      	ldr	r6, [pc, #192]	; (80013a4 <HAL_RCC_OscConfig+0x280>)
 80012e2:	6833      	ldr	r3, [r6, #0]
 80012e4:	05d9      	lsls	r1, r3, #23
 80012e6:	d518      	bpl.n	800131a <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012e8:	68eb      	ldr	r3, [r5, #12]
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d126      	bne.n	800133c <HAL_RCC_OscConfig+0x218>
 80012ee:	6a23      	ldr	r3, [r4, #32]
 80012f0:	f043 0301 	orr.w	r3, r3, #1
 80012f4:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80012f6:	f7ff fdbb 	bl	8000e70 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012fa:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80012fe:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001300:	6a23      	ldr	r3, [r4, #32]
 8001302:	079b      	lsls	r3, r3, #30
 8001304:	d53f      	bpl.n	8001386 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8001306:	2f00      	cmp	r7, #0
 8001308:	f43f af1d 	beq.w	8001146 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 800130c:	69e3      	ldr	r3, [r4, #28]
 800130e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001312:	61e3      	str	r3, [r4, #28]
 8001314:	e717      	b.n	8001146 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8001316:	2700      	movs	r7, #0
 8001318:	e7e2      	b.n	80012e0 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800131a:	6833      	ldr	r3, [r6, #0]
 800131c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001320:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001322:	f7ff fda5 	bl	8000e70 <HAL_GetTick>
 8001326:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001328:	6833      	ldr	r3, [r6, #0]
 800132a:	05da      	lsls	r2, r3, #23
 800132c:	d4dc      	bmi.n	80012e8 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800132e:	f7ff fd9f 	bl	8000e70 <HAL_GetTick>
 8001332:	eba0 0008 	sub.w	r0, r0, r8
 8001336:	2864      	cmp	r0, #100	; 0x64
 8001338:	d9f6      	bls.n	8001328 <HAL_RCC_OscConfig+0x204>
 800133a:	e735      	b.n	80011a8 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800133c:	b9ab      	cbnz	r3, 800136a <HAL_RCC_OscConfig+0x246>
 800133e:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001340:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001344:	f023 0301 	bic.w	r3, r3, #1
 8001348:	6223      	str	r3, [r4, #32]
 800134a:	6a23      	ldr	r3, [r4, #32]
 800134c:	f023 0304 	bic.w	r3, r3, #4
 8001350:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001352:	f7ff fd8d 	bl	8000e70 <HAL_GetTick>
 8001356:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001358:	6a23      	ldr	r3, [r4, #32]
 800135a:	0798      	lsls	r0, r3, #30
 800135c:	d5d3      	bpl.n	8001306 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800135e:	f7ff fd87 	bl	8000e70 <HAL_GetTick>
 8001362:	1b80      	subs	r0, r0, r6
 8001364:	4540      	cmp	r0, r8
 8001366:	d9f7      	bls.n	8001358 <HAL_RCC_OscConfig+0x234>
 8001368:	e71e      	b.n	80011a8 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800136a:	2b05      	cmp	r3, #5
 800136c:	6a23      	ldr	r3, [r4, #32]
 800136e:	d103      	bne.n	8001378 <HAL_RCC_OscConfig+0x254>
 8001370:	f043 0304 	orr.w	r3, r3, #4
 8001374:	6223      	str	r3, [r4, #32]
 8001376:	e7ba      	b.n	80012ee <HAL_RCC_OscConfig+0x1ca>
 8001378:	f023 0301 	bic.w	r3, r3, #1
 800137c:	6223      	str	r3, [r4, #32]
 800137e:	6a23      	ldr	r3, [r4, #32]
 8001380:	f023 0304 	bic.w	r3, r3, #4
 8001384:	e7b6      	b.n	80012f4 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001386:	f7ff fd73 	bl	8000e70 <HAL_GetTick>
 800138a:	eba0 0008 	sub.w	r0, r0, r8
 800138e:	42b0      	cmp	r0, r6
 8001390:	d9b6      	bls.n	8001300 <HAL_RCC_OscConfig+0x1dc>
 8001392:	e709      	b.n	80011a8 <HAL_RCC_OscConfig+0x84>
 8001394:	40021000 	.word	0x40021000
 8001398:	42420000 	.word	0x42420000
 800139c:	42420480 	.word	0x42420480
 80013a0:	20000008 	.word	0x20000008
 80013a4:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013a8:	4c22      	ldr	r4, [pc, #136]	; (8001434 <HAL_RCC_OscConfig+0x310>)
 80013aa:	6863      	ldr	r3, [r4, #4]
 80013ac:	f003 030c 	and.w	r3, r3, #12
 80013b0:	2b08      	cmp	r3, #8
 80013b2:	f43f aee2 	beq.w	800117a <HAL_RCC_OscConfig+0x56>
 80013b6:	2300      	movs	r3, #0
 80013b8:	4e1f      	ldr	r6, [pc, #124]	; (8001438 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013ba:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80013bc:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013be:	d12b      	bne.n	8001418 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 80013c0:	f7ff fd56 	bl	8000e70 <HAL_GetTick>
 80013c4:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013c6:	6823      	ldr	r3, [r4, #0]
 80013c8:	0199      	lsls	r1, r3, #6
 80013ca:	d41f      	bmi.n	800140c <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80013cc:	6a2b      	ldr	r3, [r5, #32]
 80013ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013d2:	d105      	bne.n	80013e0 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80013d4:	6862      	ldr	r2, [r4, #4]
 80013d6:	68a9      	ldr	r1, [r5, #8]
 80013d8:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80013dc:	430a      	orrs	r2, r1
 80013de:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013e0:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80013e2:	6862      	ldr	r2, [r4, #4]
 80013e4:	430b      	orrs	r3, r1
 80013e6:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80013ea:	4313      	orrs	r3, r2
 80013ec:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80013ee:	2301      	movs	r3, #1
 80013f0:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80013f2:	f7ff fd3d 	bl	8000e70 <HAL_GetTick>
 80013f6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013f8:	6823      	ldr	r3, [r4, #0]
 80013fa:	019a      	lsls	r2, r3, #6
 80013fc:	f53f aea7 	bmi.w	800114e <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001400:	f7ff fd36 	bl	8000e70 <HAL_GetTick>
 8001404:	1b40      	subs	r0, r0, r5
 8001406:	2802      	cmp	r0, #2
 8001408:	d9f6      	bls.n	80013f8 <HAL_RCC_OscConfig+0x2d4>
 800140a:	e6cd      	b.n	80011a8 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800140c:	f7ff fd30 	bl	8000e70 <HAL_GetTick>
 8001410:	1bc0      	subs	r0, r0, r7
 8001412:	2802      	cmp	r0, #2
 8001414:	d9d7      	bls.n	80013c6 <HAL_RCC_OscConfig+0x2a2>
 8001416:	e6c7      	b.n	80011a8 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8001418:	f7ff fd2a 	bl	8000e70 <HAL_GetTick>
 800141c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800141e:	6823      	ldr	r3, [r4, #0]
 8001420:	019b      	lsls	r3, r3, #6
 8001422:	f57f ae94 	bpl.w	800114e <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001426:	f7ff fd23 	bl	8000e70 <HAL_GetTick>
 800142a:	1b40      	subs	r0, r0, r5
 800142c:	2802      	cmp	r0, #2
 800142e:	d9f6      	bls.n	800141e <HAL_RCC_OscConfig+0x2fa>
 8001430:	e6ba      	b.n	80011a8 <HAL_RCC_OscConfig+0x84>
 8001432:	bf00      	nop
 8001434:	40021000 	.word	0x40021000
 8001438:	42420060 	.word	0x42420060

0800143c <HAL_RCC_GetSysClockFreq>:
{
 800143c:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800143e:	4b19      	ldr	r3, [pc, #100]	; (80014a4 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8001440:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001442:	ac02      	add	r4, sp, #8
 8001444:	f103 0510 	add.w	r5, r3, #16
 8001448:	4622      	mov	r2, r4
 800144a:	6818      	ldr	r0, [r3, #0]
 800144c:	6859      	ldr	r1, [r3, #4]
 800144e:	3308      	adds	r3, #8
 8001450:	c203      	stmia	r2!, {r0, r1}
 8001452:	42ab      	cmp	r3, r5
 8001454:	4614      	mov	r4, r2
 8001456:	d1f7      	bne.n	8001448 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001458:	2301      	movs	r3, #1
 800145a:	f88d 3004 	strb.w	r3, [sp, #4]
 800145e:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8001460:	4911      	ldr	r1, [pc, #68]	; (80014a8 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001462:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8001466:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001468:	f003 020c 	and.w	r2, r3, #12
 800146c:	2a08      	cmp	r2, #8
 800146e:	d117      	bne.n	80014a0 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001470:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001474:	a806      	add	r0, sp, #24
 8001476:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001478:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800147a:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800147e:	d50c      	bpl.n	800149a <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001480:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001482:	480a      	ldr	r0, [pc, #40]	; (80014ac <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001484:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001488:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800148a:	aa06      	add	r2, sp, #24
 800148c:	4413      	add	r3, r2
 800148e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001492:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001496:	b007      	add	sp, #28
 8001498:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800149a:	4805      	ldr	r0, [pc, #20]	; (80014b0 <HAL_RCC_GetSysClockFreq+0x74>)
 800149c:	4350      	muls	r0, r2
 800149e:	e7fa      	b.n	8001496 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 80014a0:	4802      	ldr	r0, [pc, #8]	; (80014ac <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 80014a2:	e7f8      	b.n	8001496 <HAL_RCC_GetSysClockFreq+0x5a>
 80014a4:	08002794 	.word	0x08002794
 80014a8:	40021000 	.word	0x40021000
 80014ac:	007a1200 	.word	0x007a1200
 80014b0:	003d0900 	.word	0x003d0900

080014b4 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80014b4:	4a54      	ldr	r2, [pc, #336]	; (8001608 <HAL_RCC_ClockConfig+0x154>)
{
 80014b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80014ba:	6813      	ldr	r3, [r2, #0]
{
 80014bc:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80014be:	f003 0307 	and.w	r3, r3, #7
 80014c2:	428b      	cmp	r3, r1
{
 80014c4:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80014c6:	d32a      	bcc.n	800151e <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014c8:	6829      	ldr	r1, [r5, #0]
 80014ca:	078c      	lsls	r4, r1, #30
 80014cc:	d434      	bmi.n	8001538 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014ce:	07ca      	lsls	r2, r1, #31
 80014d0:	d447      	bmi.n	8001562 <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80014d2:	4a4d      	ldr	r2, [pc, #308]	; (8001608 <HAL_RCC_ClockConfig+0x154>)
 80014d4:	6813      	ldr	r3, [r2, #0]
 80014d6:	f003 0307 	and.w	r3, r3, #7
 80014da:	429e      	cmp	r6, r3
 80014dc:	f0c0 8082 	bcc.w	80015e4 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014e0:	682a      	ldr	r2, [r5, #0]
 80014e2:	4c4a      	ldr	r4, [pc, #296]	; (800160c <HAL_RCC_ClockConfig+0x158>)
 80014e4:	f012 0f04 	tst.w	r2, #4
 80014e8:	f040 8087 	bne.w	80015fa <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014ec:	0713      	lsls	r3, r2, #28
 80014ee:	d506      	bpl.n	80014fe <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80014f0:	6863      	ldr	r3, [r4, #4]
 80014f2:	692a      	ldr	r2, [r5, #16]
 80014f4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80014f8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80014fc:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80014fe:	f7ff ff9d 	bl	800143c <HAL_RCC_GetSysClockFreq>
 8001502:	6863      	ldr	r3, [r4, #4]
 8001504:	4a42      	ldr	r2, [pc, #264]	; (8001610 <HAL_RCC_ClockConfig+0x15c>)
 8001506:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800150a:	5cd3      	ldrb	r3, [r2, r3]
 800150c:	40d8      	lsrs	r0, r3
 800150e:	4b41      	ldr	r3, [pc, #260]	; (8001614 <HAL_RCC_ClockConfig+0x160>)
 8001510:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001512:	2000      	movs	r0, #0
 8001514:	f7ff fc6a 	bl	8000dec <HAL_InitTick>
  return HAL_OK;
 8001518:	2000      	movs	r0, #0
}
 800151a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800151e:	6813      	ldr	r3, [r2, #0]
 8001520:	f023 0307 	bic.w	r3, r3, #7
 8001524:	430b      	orrs	r3, r1
 8001526:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001528:	6813      	ldr	r3, [r2, #0]
 800152a:	f003 0307 	and.w	r3, r3, #7
 800152e:	4299      	cmp	r1, r3
 8001530:	d0ca      	beq.n	80014c8 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8001532:	2001      	movs	r0, #1
 8001534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001538:	4b34      	ldr	r3, [pc, #208]	; (800160c <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800153a:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800153e:	bf1e      	ittt	ne
 8001540:	685a      	ldrne	r2, [r3, #4]
 8001542:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8001546:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001548:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800154a:	bf42      	ittt	mi
 800154c:	685a      	ldrmi	r2, [r3, #4]
 800154e:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8001552:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001554:	685a      	ldr	r2, [r3, #4]
 8001556:	68a8      	ldr	r0, [r5, #8]
 8001558:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800155c:	4302      	orrs	r2, r0
 800155e:	605a      	str	r2, [r3, #4]
 8001560:	e7b5      	b.n	80014ce <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001562:	686a      	ldr	r2, [r5, #4]
 8001564:	4c29      	ldr	r4, [pc, #164]	; (800160c <HAL_RCC_ClockConfig+0x158>)
 8001566:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001568:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800156a:	d11c      	bne.n	80015a6 <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800156c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001570:	d0df      	beq.n	8001532 <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001572:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001574:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001578:	f023 0303 	bic.w	r3, r3, #3
 800157c:	4313      	orrs	r3, r2
 800157e:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8001580:	f7ff fc76 	bl	8000e70 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001584:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8001586:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001588:	2b01      	cmp	r3, #1
 800158a:	d114      	bne.n	80015b6 <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800158c:	6863      	ldr	r3, [r4, #4]
 800158e:	f003 030c 	and.w	r3, r3, #12
 8001592:	2b04      	cmp	r3, #4
 8001594:	d09d      	beq.n	80014d2 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001596:	f7ff fc6b 	bl	8000e70 <HAL_GetTick>
 800159a:	1bc0      	subs	r0, r0, r7
 800159c:	4540      	cmp	r0, r8
 800159e:	d9f5      	bls.n	800158c <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 80015a0:	2003      	movs	r0, #3
 80015a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015a6:	2a02      	cmp	r2, #2
 80015a8:	d102      	bne.n	80015b0 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015aa:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80015ae:	e7df      	b.n	8001570 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015b0:	f013 0f02 	tst.w	r3, #2
 80015b4:	e7dc      	b.n	8001570 <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d10f      	bne.n	80015da <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015ba:	6863      	ldr	r3, [r4, #4]
 80015bc:	f003 030c 	and.w	r3, r3, #12
 80015c0:	2b08      	cmp	r3, #8
 80015c2:	d086      	beq.n	80014d2 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015c4:	f7ff fc54 	bl	8000e70 <HAL_GetTick>
 80015c8:	1bc0      	subs	r0, r0, r7
 80015ca:	4540      	cmp	r0, r8
 80015cc:	d9f5      	bls.n	80015ba <HAL_RCC_ClockConfig+0x106>
 80015ce:	e7e7      	b.n	80015a0 <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015d0:	f7ff fc4e 	bl	8000e70 <HAL_GetTick>
 80015d4:	1bc0      	subs	r0, r0, r7
 80015d6:	4540      	cmp	r0, r8
 80015d8:	d8e2      	bhi.n	80015a0 <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80015da:	6863      	ldr	r3, [r4, #4]
 80015dc:	f013 0f0c 	tst.w	r3, #12
 80015e0:	d1f6      	bne.n	80015d0 <HAL_RCC_ClockConfig+0x11c>
 80015e2:	e776      	b.n	80014d2 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015e4:	6813      	ldr	r3, [r2, #0]
 80015e6:	f023 0307 	bic.w	r3, r3, #7
 80015ea:	4333      	orrs	r3, r6
 80015ec:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80015ee:	6813      	ldr	r3, [r2, #0]
 80015f0:	f003 0307 	and.w	r3, r3, #7
 80015f4:	429e      	cmp	r6, r3
 80015f6:	d19c      	bne.n	8001532 <HAL_RCC_ClockConfig+0x7e>
 80015f8:	e772      	b.n	80014e0 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015fa:	6863      	ldr	r3, [r4, #4]
 80015fc:	68e9      	ldr	r1, [r5, #12]
 80015fe:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001602:	430b      	orrs	r3, r1
 8001604:	6063      	str	r3, [r4, #4]
 8001606:	e771      	b.n	80014ec <HAL_RCC_ClockConfig+0x38>
 8001608:	40022000 	.word	0x40022000
 800160c:	40021000 	.word	0x40021000
 8001610:	08002a02 	.word	0x08002a02
 8001614:	20000008 	.word	0x20000008

08001618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001618:	b510      	push	{r4, lr}
 800161a:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800161c:	2228      	movs	r2, #40	; 0x28
 800161e:	2100      	movs	r1, #0
 8001620:	a806      	add	r0, sp, #24
 8001622:	f000 fc67 	bl	8001ef4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001626:	2100      	movs	r1, #0
 8001628:	2214      	movs	r2, #20
 800162a:	a801      	add	r0, sp, #4
 800162c:	f000 fc62 	bl	8001ef4 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001630:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001634:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001636:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001638:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800163a:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800163c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001640:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001642:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001644:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001646:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001648:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800164a:	f7ff fd6b 	bl	8001124 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800164e:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001650:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001654:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001656:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001658:	4621      	mov	r1, r4
 800165a:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800165c:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800165e:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001660:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001662:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001664:	f7ff ff26 	bl	80014b4 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8001668:	b010      	add	sp, #64	; 0x40
 800166a:	bd10      	pop	{r4, pc}

0800166c <main>:
{
 800166c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001670:	b086      	sub	sp, #24
  HAL_Init();
 8001672:	f7ff fbdf 	bl	8000e34 <HAL_Init>
  SystemClock_Config();
 8001676:	f7ff ffcf 	bl	8001618 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167a:	2210      	movs	r2, #16
 800167c:	2100      	movs	r1, #0
 800167e:	a802      	add	r0, sp, #8
 8001680:	f000 fc38 	bl	8001ef4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001684:	4bb0      	ldr	r3, [pc, #704]	; (8001948 <main+0x2dc>)
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CLK_Pin|DIN_Pin|DC_Pin|CE_Pin 
 8001686:	21f8      	movs	r1, #248	; 0xf8
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001688:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, CLK_Pin|DIN_Pin|DC_Pin|CE_Pin 
 800168a:	48b0      	ldr	r0, [pc, #704]	; (800194c <main+0x2e0>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800168c:	f042 0220 	orr.w	r2, r2, #32
 8001690:	619a      	str	r2, [r3, #24]
 8001692:	699a      	ldr	r2, [r3, #24]
  /*Configure GPIO pins : CLK_Pin DIN_Pin DC_Pin CE_Pin 
                           RST_Pin */
  GPIO_InitStruct.Pin = CLK_Pin|DIN_Pin|DC_Pin|CE_Pin 
                          |RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001694:	2500      	movs	r5, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001696:	f002 0220 	and.w	r2, r2, #32
 800169a:	9200      	str	r2, [sp, #0]
 800169c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800169e:	699a      	ldr	r2, [r3, #24]
	  LCD_print("Hello", 0, 0);
 80016a0:	46a8      	mov	r8, r5
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a2:	f042 0204 	orr.w	r2, r2, #4
 80016a6:	619a      	str	r2, [r3, #24]
 80016a8:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, CLK_Pin|DIN_Pin|DC_Pin|CE_Pin 
 80016aa:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ac:	f003 0304 	and.w	r3, r3, #4
 80016b0:	9301      	str	r3, [sp, #4]
 80016b2:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_WritePin(GPIOA, CLK_Pin|DIN_Pin|DC_Pin|CE_Pin 
 80016b4:	f7ff fd30 	bl	8001118 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = CLK_Pin|DIN_Pin|DC_Pin|CE_Pin 
 80016b8:	23f8      	movs	r3, #248	; 0xf8
 80016ba:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016bc:	2301      	movs	r3, #1
 80016be:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016c0:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c2:	a902      	add	r1, sp, #8
 80016c4:	48a1      	ldr	r0, [pc, #644]	; (800194c <main+0x2e0>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016c6:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c8:	9504      	str	r5, [sp, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ca:	f7ff fc45 	bl	8000f58 <HAL_GPIO_Init>
  LCD_setRST(GPIOA, RST_Pin);
 80016ce:	2180      	movs	r1, #128	; 0x80
 80016d0:	489e      	ldr	r0, [pc, #632]	; (800194c <main+0x2e0>)
 80016d2:	f000 f945 	bl	8001960 <LCD_setRST>
  LCD_setCE(GPIOA, CE_Pin);
 80016d6:	2140      	movs	r1, #64	; 0x40
 80016d8:	489c      	ldr	r0, [pc, #624]	; (800194c <main+0x2e0>)
 80016da:	f000 f947 	bl	800196c <LCD_setCE>
  LCD_setDC(GPIOA, DC_Pin);
 80016de:	2120      	movs	r1, #32
 80016e0:	489a      	ldr	r0, [pc, #616]	; (800194c <main+0x2e0>)
 80016e2:	f000 f949 	bl	8001978 <LCD_setDC>
  LCD_setDIN(GPIOA, DIN_Pin);
 80016e6:	2110      	movs	r1, #16
 80016e8:	4898      	ldr	r0, [pc, #608]	; (800194c <main+0x2e0>)
 80016ea:	f000 f94b 	bl	8001984 <LCD_setDIN>
  LCD_setCLK(GPIOA, CLK_Pin);
 80016ee:	2108      	movs	r1, #8
 80016f0:	4896      	ldr	r0, [pc, #600]	; (800194c <main+0x2e0>)
 80016f2:	f000 f94d 	bl	8001990 <LCD_setCLK>
  LCD_init();
 80016f6:	f000 f9d3 	bl	8001aa0 <LCD_init>
	  LCD_print("Hello", 0, 0);
 80016fa:	4e95      	ldr	r6, [pc, #596]	; (8001950 <main+0x2e4>)
	  LCD_print("World", 0, 0);
 80016fc:	4f95      	ldr	r7, [pc, #596]	; (8001954 <main+0x2e8>)
	  LCD_clrScr(); // очистить экран
 80016fe:	f000 f9bf 	bl	8001a80 <LCD_clrScr>
	  LCD_print("Hello", 0, 0);
 8001702:	2200      	movs	r2, #0
 8001704:	4630      	mov	r0, r6
 8001706:	4611      	mov	r1, r2
 8001708:	f000 fa00 	bl	8001b0c <LCD_print>
	  HAL_Delay(200);
 800170c:	20c8      	movs	r0, #200	; 0xc8
 800170e:	f7ff fbb5 	bl	8000e7c <HAL_Delay>
	  LCD_print("Hello", 6, 1);
 8001712:	2201      	movs	r2, #1
 8001714:	2106      	movs	r1, #6
 8001716:	4630      	mov	r0, r6
 8001718:	f000 f9f8 	bl	8001b0c <LCD_print>
	  HAL_Delay(200);
 800171c:	20c8      	movs	r0, #200	; 0xc8
 800171e:	f7ff fbad 	bl	8000e7c <HAL_Delay>
	  LCD_print("Hello", 12, 2);
 8001722:	2202      	movs	r2, #2
 8001724:	210c      	movs	r1, #12
 8001726:	4630      	mov	r0, r6
 8001728:	f000 f9f0 	bl	8001b0c <LCD_print>
	  HAL_Delay(200);
 800172c:	20c8      	movs	r0, #200	; 0xc8
 800172e:	f7ff fba5 	bl	8000e7c <HAL_Delay>
	  LCD_print("Hello", 18, 3);
 8001732:	2203      	movs	r2, #3
 8001734:	2112      	movs	r1, #18
 8001736:	4630      	mov	r0, r6
 8001738:	f000 f9e8 	bl	8001b0c <LCD_print>
	  HAL_Delay(200);
 800173c:	20c8      	movs	r0, #200	; 0xc8
 800173e:	f7ff fb9d 	bl	8000e7c <HAL_Delay>
	  LCD_print("Hello", 24, 4);
 8001742:	2204      	movs	r2, #4
 8001744:	2118      	movs	r1, #24
 8001746:	4630      	mov	r0, r6
 8001748:	f000 f9e0 	bl	8001b0c <LCD_print>
	  HAL_Delay(200);
 800174c:	20c8      	movs	r0, #200	; 0xc8
 800174e:	f7ff fb95 	bl	8000e7c <HAL_Delay>
	  LCD_print("Hello", 30, 5);
 8001752:	2205      	movs	r2, #5
 8001754:	211e      	movs	r1, #30
 8001756:	4630      	mov	r0, r6
 8001758:	f000 f9d8 	bl	8001b0c <LCD_print>
	  HAL_Delay(200);
 800175c:	20c8      	movs	r0, #200	; 0xc8
 800175e:	f7ff fb8d 	bl	8000e7c <HAL_Delay>
	  LCD_print("World", 0, 0);
 8001762:	2200      	movs	r2, #0
 8001764:	4638      	mov	r0, r7
 8001766:	4611      	mov	r1, r2
 8001768:	f000 f9d0 	bl	8001b0c <LCD_print>
	  HAL_Delay(200);
 800176c:	20c8      	movs	r0, #200	; 0xc8
 800176e:	f7ff fb85 	bl	8000e7c <HAL_Delay>
	  LCD_print("World", 6, 1);
 8001772:	2201      	movs	r2, #1
 8001774:	2106      	movs	r1, #6
 8001776:	4638      	mov	r0, r7
 8001778:	f000 f9c8 	bl	8001b0c <LCD_print>
	  HAL_Delay(200);
 800177c:	20c8      	movs	r0, #200	; 0xc8
 800177e:	f7ff fb7d 	bl	8000e7c <HAL_Delay>
	  LCD_print("World", 12, 2);
 8001782:	2202      	movs	r2, #2
 8001784:	210c      	movs	r1, #12
 8001786:	4638      	mov	r0, r7
 8001788:	f000 f9c0 	bl	8001b0c <LCD_print>
	  HAL_Delay(200);
 800178c:	20c8      	movs	r0, #200	; 0xc8
 800178e:	f7ff fb75 	bl	8000e7c <HAL_Delay>
	  LCD_print("World", 18, 3);
 8001792:	2203      	movs	r2, #3
 8001794:	2112      	movs	r1, #18
 8001796:	4638      	mov	r0, r7
 8001798:	f000 f9b8 	bl	8001b0c <LCD_print>
	  HAL_Delay(200);
 800179c:	20c8      	movs	r0, #200	; 0xc8
 800179e:	f7ff fb6d 	bl	8000e7c <HAL_Delay>
	  LCD_print("World", 24, 4);
 80017a2:	2204      	movs	r2, #4
 80017a4:	2118      	movs	r1, #24
 80017a6:	4638      	mov	r0, r7
 80017a8:	f000 f9b0 	bl	8001b0c <LCD_print>
	  HAL_Delay(200);
 80017ac:	20c8      	movs	r0, #200	; 0xc8
 80017ae:	f7ff fb65 	bl	8000e7c <HAL_Delay>
	  LCD_print("World", 30, 5);
 80017b2:	2205      	movs	r2, #5
 80017b4:	211e      	movs	r1, #30
 80017b6:	4638      	mov	r0, r7
 80017b8:	f000 f9a8 	bl	8001b0c <LCD_print>
	  HAL_Delay(500);
 80017bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017c0:	f7ff fb5c 	bl	8000e7c <HAL_Delay>
	  snprintf(msg, 6, "%d", i++);
 80017c4:	b2ab      	uxth	r3, r5
 80017c6:	4a64      	ldr	r2, [pc, #400]	; (8001958 <main+0x2ec>)
 80017c8:	2106      	movs	r1, #6
 80017ca:	a802      	add	r0, sp, #8
	  char msg[6] = {0,};
 80017cc:	f8cd 8008 	str.w	r8, [sp, #8]
 80017d0:	f8ad 800c 	strh.w	r8, [sp, #12]
	  snprintf(msg, 6, "%d", i++);
 80017d4:	f000 fb96 	bl	8001f04 <sniprintf>
	  LCD_print(msg, 50, 0);
 80017d8:	2200      	movs	r2, #0
 80017da:	2132      	movs	r1, #50	; 0x32
 80017dc:	a802      	add	r0, sp, #8
 80017de:	f000 f995 	bl	8001b0c <LCD_print>
	  HAL_Delay(1000);
 80017e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017e6:	f7ff fb49 	bl	8000e7c <HAL_Delay>
	  LCD_clrScr(); // очистить экран
 80017ea:	2400      	movs	r4, #0
 80017ec:	f000 f948 	bl	8001a80 <LCD_clrScr>
		  LCD_print("istarik.ru stD", 0, i);
 80017f0:	f8df 9168 	ldr.w	r9, [pc, #360]	; 800195c <main+0x2f0>
 80017f4:	b2e2      	uxtb	r2, r4
 80017f6:	2100      	movs	r1, #0
 80017f8:	4648      	mov	r0, r9
 80017fa:	3401      	adds	r4, #1
 80017fc:	f000 f986 	bl	8001b0c <LCD_print>
	  for(uint8_t i = 0; i < 6; i++)
 8001800:	2c06      	cmp	r4, #6
 8001802:	d1f7      	bne.n	80017f4 <main+0x188>
	  HAL_Delay(1000);
 8001804:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001808:	f7ff fb38 	bl	8000e7c <HAL_Delay>
	  LCD_clrScr(); // очистить экран
 800180c:	f000 f938 	bl	8001a80 <LCD_clrScr>
	  LCD_drawHLine(20, 24, 44); // горизонтальная линия: слева, от верха, длина линии
 8001810:	222c      	movs	r2, #44	; 0x2c
 8001812:	2118      	movs	r1, #24
 8001814:	2014      	movs	r0, #20
 8001816:	f000 f9bd 	bl	8001b94 <LCD_drawHLine>
	  LCD_refreshScr();
 800181a:	f000 f985 	bl	8001b28 <LCD_refreshScr>
	  HAL_Delay(1000);
 800181e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001822:	f7ff fb2b 	bl	8000e7c <HAL_Delay>
	  LCD_drawVLine(42, 4, 40); // вертикальная линия: слева, от верха, длина линии
 8001826:	2228      	movs	r2, #40	; 0x28
 8001828:	2104      	movs	r1, #4
 800182a:	202a      	movs	r0, #42	; 0x2a
 800182c:	f000 f9ce 	bl	8001bcc <LCD_drawVLine>
	  LCD_refreshScr();
 8001830:	f000 f97a 	bl	8001b28 <LCD_refreshScr>
	  HAL_Delay(1000);
 8001834:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001838:	f7ff fb20 	bl	8000e7c <HAL_Delay>
	  LCD_drawLine(10, 10, 74, 38); // произвольная линия: начало - слева, от верха | конец - слева, от верха
 800183c:	210a      	movs	r1, #10
 800183e:	2326      	movs	r3, #38	; 0x26
 8001840:	4608      	mov	r0, r1
 8001842:	224a      	movs	r2, #74	; 0x4a
 8001844:	f000 f9d6 	bl	8001bf4 <LCD_drawLine>
	  LCD_refreshScr();
 8001848:	f000 f96e 	bl	8001b28 <LCD_refreshScr>
	  HAL_Delay(1000);
 800184c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001850:	f7ff fb14 	bl	8000e7c <HAL_Delay>
	  LCD_drawLine(10, 38, 74, 10); // произвольная линия: начало - слева, от верха | конец - слева, от верха
 8001854:	230a      	movs	r3, #10
 8001856:	224a      	movs	r2, #74	; 0x4a
 8001858:	4618      	mov	r0, r3
 800185a:	2126      	movs	r1, #38	; 0x26
 800185c:	f000 f9ca 	bl	8001bf4 <LCD_drawLine>
	  LCD_refreshScr();
 8001860:	f000 f962 	bl	8001b28 <LCD_refreshScr>
	  HAL_Delay(1000);
 8001864:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001868:	f7ff fb08 	bl	8000e7c <HAL_Delay>
	  for(uint8_t i = 20; i < 64; i++)
 800186c:	2414      	movs	r4, #20
	  LCD_clrScr(); // очистить экран
 800186e:	f000 f907 	bl	8001a80 <LCD_clrScr>
		  LCD_setPixel(i, 24, true); // рисует один пиксель
 8001872:	4620      	mov	r0, r4
 8001874:	2201      	movs	r2, #1
 8001876:	2118      	movs	r1, #24
	  for(uint8_t i = 20; i < 64; i++)
 8001878:	3401      	adds	r4, #1
		  LCD_setPixel(i, 24, true); // рисует один пиксель
 800187a:	f000 f96d 	bl	8001b58 <LCD_setPixel>
	  for(uint8_t i = 20; i < 64; i++)
 800187e:	b2e4      	uxtb	r4, r4
		  LCD_refreshScr();
 8001880:	f000 f952 	bl	8001b28 <LCD_refreshScr>
		  HAL_Delay(50);
 8001884:	2032      	movs	r0, #50	; 0x32
 8001886:	f7ff faf9 	bl	8000e7c <HAL_Delay>
	  for(uint8_t i = 20; i < 64; i++)
 800188a:	2c40      	cmp	r4, #64	; 0x40
 800188c:	d1f1      	bne.n	8001872 <main+0x206>
	  HAL_Delay(500);
 800188e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001892:	f7ff faf3 	bl	8000e7c <HAL_Delay>
	  for(uint8_t i = 20; i < 64; i++)
 8001896:	2414      	movs	r4, #20
		  LCD_setPixel(i, 24, false); // стирает один пиксель
 8001898:	4620      	mov	r0, r4
 800189a:	2200      	movs	r2, #0
 800189c:	2118      	movs	r1, #24
	  for(uint8_t i = 20; i < 64; i++)
 800189e:	3401      	adds	r4, #1
		  LCD_setPixel(i, 24, false); // стирает один пиксель
 80018a0:	f000 f95a 	bl	8001b58 <LCD_setPixel>
	  for(uint8_t i = 20; i < 64; i++)
 80018a4:	b2e4      	uxtb	r4, r4
		  LCD_refreshScr();
 80018a6:	f000 f93f 	bl	8001b28 <LCD_refreshScr>
		  HAL_Delay(50);
 80018aa:	2032      	movs	r0, #50	; 0x32
 80018ac:	f7ff fae6 	bl	8000e7c <HAL_Delay>
	  for(uint8_t i = 20; i < 64; i++)
 80018b0:	2c40      	cmp	r4, #64	; 0x40
 80018b2:	d1f1      	bne.n	8001898 <main+0x22c>
	  HAL_Delay(500);
 80018b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018b8:	f7ff fae0 	bl	8000e7c <HAL_Delay>
	  for(uint8_t i = 20; i < 64; i++)
 80018bc:	2414      	movs	r4, #20
		  LCD_setPixel(i, 24, true); // рисует один пиксель
 80018be:	4620      	mov	r0, r4
 80018c0:	2201      	movs	r2, #1
 80018c2:	2118      	movs	r1, #24
		  LCD_setPixel(i + 1, 24, true);
 80018c4:	f104 0901 	add.w	r9, r4, #1
		  LCD_setPixel(i, 24, true); // рисует один пиксель
 80018c8:	f000 f946 	bl	8001b58 <LCD_setPixel>
		  LCD_setPixel(i + 1, 24, true);
 80018cc:	fa5f f989 	uxtb.w	r9, r9
		  LCD_setPixel(i, 25, true);
 80018d0:	4620      	mov	r0, r4
 80018d2:	2201      	movs	r2, #1
 80018d4:	2119      	movs	r1, #25
 80018d6:	f000 f93f 	bl	8001b58 <LCD_setPixel>
		  LCD_setPixel(i + 1, 24, true);
 80018da:	2201      	movs	r2, #1
 80018dc:	2118      	movs	r1, #24
 80018de:	4648      	mov	r0, r9
 80018e0:	f000 f93a 	bl	8001b58 <LCD_setPixel>
		  LCD_setPixel(i - 1, 24, false); // стирает один пиксель
 80018e4:	f104 3aff 	add.w	sl, r4, #4294967295	; 0xffffffff
		  LCD_setPixel(i + 1, 25, true);
 80018e8:	2201      	movs	r2, #1
 80018ea:	2119      	movs	r1, #25
 80018ec:	4648      	mov	r0, r9
 80018ee:	f000 f933 	bl	8001b58 <LCD_setPixel>
		  LCD_setPixel(i - 1, 24, false); // стирает один пиксель
 80018f2:	fa5f fa8a 	uxtb.w	sl, sl
		  LCD_refreshScr();
 80018f6:	f000 f917 	bl	8001b28 <LCD_refreshScr>
		  HAL_Delay(100);
 80018fa:	2064      	movs	r0, #100	; 0x64
 80018fc:	f7ff fabe 	bl	8000e7c <HAL_Delay>
		  LCD_setPixel(i - 2, 24, false);
 8001900:	3c02      	subs	r4, #2
		  LCD_setPixel(i - 1, 24, false); // стирает один пиксель
 8001902:	2200      	movs	r2, #0
 8001904:	2118      	movs	r1, #24
 8001906:	4650      	mov	r0, sl
 8001908:	f000 f926 	bl	8001b58 <LCD_setPixel>
		  LCD_setPixel(i - 2, 24, false);
 800190c:	b2e4      	uxtb	r4, r4
		  LCD_setPixel(i - 1, 25, false);
 800190e:	2200      	movs	r2, #0
 8001910:	2119      	movs	r1, #25
 8001912:	4650      	mov	r0, sl
 8001914:	f000 f920 	bl	8001b58 <LCD_setPixel>
		  LCD_setPixel(i - 2, 24, false);
 8001918:	4620      	mov	r0, r4
 800191a:	2200      	movs	r2, #0
 800191c:	2118      	movs	r1, #24
 800191e:	f000 f91b 	bl	8001b58 <LCD_setPixel>
		  LCD_setPixel(i - 2, 25, false);
 8001922:	4620      	mov	r0, r4
 8001924:	464c      	mov	r4, r9
 8001926:	2200      	movs	r2, #0
 8001928:	2119      	movs	r1, #25
 800192a:	f000 f915 	bl	8001b58 <LCD_setPixel>
		  LCD_refreshScr();
 800192e:	f000 f8fb 	bl	8001b28 <LCD_refreshScr>
		  HAL_Delay(50);
 8001932:	2032      	movs	r0, #50	; 0x32
 8001934:	f7ff faa2 	bl	8000e7c <HAL_Delay>
	  for(uint8_t i = 20; i < 64; i++)
 8001938:	2c40      	cmp	r4, #64	; 0x40
 800193a:	d1c0      	bne.n	80018be <main+0x252>
	  HAL_Delay(100);
 800193c:	2064      	movs	r0, #100	; 0x64
 800193e:	f7ff fa9d 	bl	8000e7c <HAL_Delay>
 8001942:	3501      	adds	r5, #1
  {
 8001944:	e6db      	b.n	80016fe <main+0x92>
 8001946:	bf00      	nop
 8001948:	40021000 	.word	0x40021000
 800194c:	40010800 	.word	0x40010800
 8001950:	080027a4 	.word	0x080027a4
 8001954:	080027aa 	.word	0x080027aa
 8001958:	080027b0 	.word	0x080027b0
 800195c:	080027b3 	.word	0x080027b3

08001960 <LCD_setRST>:
 * @param PORT: port of the pin used
 * @param PIN: pin of the pin used
 */
void LCD_setRST(GPIO_TypeDef* PORT, uint16_t PIN)
{
	lcd_gpio.RSTPORT = PORT;
 8001960:	4b01      	ldr	r3, [pc, #4]	; (8001968 <LCD_setRST+0x8>)
 8001962:	6018      	str	r0, [r3, #0]
	lcd_gpio.RSTPIN = PIN;
 8001964:	8099      	strh	r1, [r3, #4]
 8001966:	4770      	bx	lr
 8001968:	2000009c 	.word	0x2000009c

0800196c <LCD_setCE>:
}

void LCD_setCE(GPIO_TypeDef* PORT, uint16_t PIN)
{
	lcd_gpio.CEPORT = PORT;
 800196c:	4b01      	ldr	r3, [pc, #4]	; (8001974 <LCD_setCE+0x8>)
 800196e:	6098      	str	r0, [r3, #8]
	lcd_gpio.CEPIN = PIN;
 8001970:	8199      	strh	r1, [r3, #12]
 8001972:	4770      	bx	lr
 8001974:	2000009c 	.word	0x2000009c

08001978 <LCD_setDC>:
}

void LCD_setDC(GPIO_TypeDef* PORT, uint16_t PIN)
{
	lcd_gpio.DCPORT = PORT;
 8001978:	4b01      	ldr	r3, [pc, #4]	; (8001980 <LCD_setDC+0x8>)
 800197a:	6118      	str	r0, [r3, #16]
	lcd_gpio.DCPIN = PIN;
 800197c:	8299      	strh	r1, [r3, #20]
 800197e:	4770      	bx	lr
 8001980:	2000009c 	.word	0x2000009c

08001984 <LCD_setDIN>:
}
void LCD_setDIN(GPIO_TypeDef* PORT, uint16_t PIN)
{
	lcd_gpio.DINPORT = PORT;
 8001984:	4b01      	ldr	r3, [pc, #4]	; (800198c <LCD_setDIN+0x8>)
 8001986:	6198      	str	r0, [r3, #24]
	lcd_gpio.DINPIN = PIN;
 8001988:	8399      	strh	r1, [r3, #28]
 800198a:	4770      	bx	lr
 800198c:	2000009c 	.word	0x2000009c

08001990 <LCD_setCLK>:
}

void LCD_setCLK(GPIO_TypeDef* PORT, uint16_t PIN)
{
	lcd_gpio.CLKPORT = PORT;
 8001990:	4b01      	ldr	r3, [pc, #4]	; (8001998 <LCD_setCLK+0x8>)
 8001992:	6218      	str	r0, [r3, #32]
	lcd_gpio.CLKPIN = PIN;
 8001994:	8499      	strh	r1, [r3, #36]	; 0x24
 8001996:	4770      	bx	lr
 8001998:	2000009c 	.word	0x2000009c

0800199c <LCD_send>:
/*
 * @brief Send information to the LCD using configured GPIOs
 * @param val: value to be sent
 */
void LCD_send(uint8_t val)
{
 800199c:	b570      	push	{r4, r5, r6, lr}
 800199e:	4606      	mov	r6, r0
 80019a0:	2507      	movs	r5, #7
  uint8_t i;

  for(i = 0; i < 8; i++)
  {
    HAL_GPIO_WritePin(lcd_gpio.DINPORT, lcd_gpio.DINPIN, !!(val & (1 << (7 - i))));
 80019a2:	4c0b      	ldr	r4, [pc, #44]	; (80019d0 <LCD_send+0x34>)
 80019a4:	fa46 f205 	asr.w	r2, r6, r5
 80019a8:	f002 0201 	and.w	r2, r2, #1
 80019ac:	8ba1      	ldrh	r1, [r4, #28]
 80019ae:	69a0      	ldr	r0, [r4, #24]
 80019b0:	f7ff fbb2 	bl	8001118 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CLKPORT, lcd_gpio.CLKPIN, GPIO_PIN_SET);
 80019b4:	2201      	movs	r2, #1
 80019b6:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 80019b8:	6a20      	ldr	r0, [r4, #32]
 80019ba:	f7ff fbad 	bl	8001118 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CLKPORT, lcd_gpio.CLKPIN, GPIO_PIN_RESET);
 80019be:	2200      	movs	r2, #0
 80019c0:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 80019c2:	6a20      	ldr	r0, [r4, #32]
 80019c4:	f7ff fba8 	bl	8001118 <HAL_GPIO_WritePin>
  for(i = 0; i < 8; i++)
 80019c8:	f115 35ff 	adds.w	r5, r5, #4294967295	; 0xffffffff
 80019cc:	d2ea      	bcs.n	80019a4 <LCD_send+0x8>
  }
}
 80019ce:	bd70      	pop	{r4, r5, r6, pc}
 80019d0:	2000009c 	.word	0x2000009c

080019d4 <LCD_write.part.0>:
/*
 * @brief Writes some data into the LCD
 * @param data: data to be written
 * @param mode: command or data
 */
void LCD_write(uint8_t data, uint8_t mode)
 80019d4:	b538      	push	{r3, r4, r5, lr}
 80019d6:	4605      	mov	r5, r0
{
  if(mode == LCD_COMMAND)
  {
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_RESET);
 80019d8:	4c0a      	ldr	r4, [pc, #40]	; (8001a04 <LCD_write.part.0+0x30>)
 80019da:	2200      	movs	r2, #0
 80019dc:	8aa1      	ldrh	r1, [r4, #20]
 80019de:	6920      	ldr	r0, [r4, #16]
 80019e0:	f7ff fb9a 	bl	8001118 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
 80019e4:	89a1      	ldrh	r1, [r4, #12]
 80019e6:	2200      	movs	r2, #0
 80019e8:	68a0      	ldr	r0, [r4, #8]
 80019ea:	f7ff fb95 	bl	8001118 <HAL_GPIO_WritePin>
    LCD_send(data);
 80019ee:	4628      	mov	r0, r5
 80019f0:	f7ff ffd4 	bl	800199c <LCD_send>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
 80019f4:	89a1      	ldrh	r1, [r4, #12]
 80019f6:	68a0      	ldr	r0, [r4, #8]
 80019f8:	2201      	movs	r2, #1
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_SET);
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
    LCD_send(data);
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
  }
}
 80019fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
 80019fe:	f7ff bb8b 	b.w	8001118 <HAL_GPIO_WritePin>
 8001a02:	bf00      	nop
 8001a04:	2000009c 	.word	0x2000009c

08001a08 <LCD_write>:
{
 8001a08:	b538      	push	{r3, r4, r5, lr}
 8001a0a:	4605      	mov	r5, r0
  if(mode == LCD_COMMAND)
 8001a0c:	b919      	cbnz	r1, 8001a16 <LCD_write+0xe>
}
 8001a0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001a12:	f7ff bfdf 	b.w	80019d4 <LCD_write.part.0>
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_SET);
 8001a16:	4c0a      	ldr	r4, [pc, #40]	; (8001a40 <LCD_write+0x38>)
 8001a18:	2201      	movs	r2, #1
 8001a1a:	8aa1      	ldrh	r1, [r4, #20]
 8001a1c:	6920      	ldr	r0, [r4, #16]
 8001a1e:	f7ff fb7b 	bl	8001118 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
 8001a22:	89a1      	ldrh	r1, [r4, #12]
 8001a24:	2200      	movs	r2, #0
 8001a26:	68a0      	ldr	r0, [r4, #8]
 8001a28:	f7ff fb76 	bl	8001118 <HAL_GPIO_WritePin>
    LCD_send(data);
 8001a2c:	4628      	mov	r0, r5
 8001a2e:	f7ff ffb5 	bl	800199c <LCD_send>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
 8001a32:	89a1      	ldrh	r1, [r4, #12]
 8001a34:	68a0      	ldr	r0, [r4, #8]
 8001a36:	2201      	movs	r2, #1
}
 8001a38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
 8001a3c:	f7ff bb6c 	b.w	8001118 <HAL_GPIO_WritePin>
 8001a40:	2000009c 	.word	0x2000009c

08001a44 <LCD_putChar>:
/*
 * @brief Puts one char on the current position of LCD's cursor
 * @param c: char to be printed
 */
void LCD_putChar(char c)
{
 8001a44:	2306      	movs	r3, #6
 8001a46:	4358      	muls	r0, r3
 8001a48:	b570      	push	{r4, r5, r6, lr}
 8001a4a:	4d0b      	ldr	r5, [pc, #44]	; (8001a78 <LCD_putChar+0x34>)
 8001a4c:	f1a0 04c0 	sub.w	r4, r0, #192	; 0xc0
  for(int i = 0; i < 6; i++)
  {
    if(lcd.inverttext != true)
 8001a50:	4e0a      	ldr	r6, [pc, #40]	; (8001a7c <LCD_putChar+0x38>)
 8001a52:	38ba      	subs	r0, #186	; 0xba
 8001a54:	442c      	add	r4, r5
 8001a56:	4405      	add	r5, r0
 8001a58:	f896 31f8 	ldrb.w	r3, [r6, #504]	; 0x1f8
 8001a5c:	b93b      	cbnz	r3, 8001a6e <LCD_putChar+0x2a>
      LCD_write(ASCII[c - 0x20][i], LCD_DATA);
 8001a5e:	2101      	movs	r1, #1
 8001a60:	7820      	ldrb	r0, [r4, #0]
 8001a62:	3401      	adds	r4, #1
    else
      LCD_write(~(ASCII[c - 0x20][i]), LCD_DATA);
 8001a64:	f7ff ffd0 	bl	8001a08 <LCD_write>
  for(int i = 0; i < 6; i++)
 8001a68:	42ac      	cmp	r4, r5
 8001a6a:	d1f5      	bne.n	8001a58 <LCD_putChar+0x14>
  }
}
 8001a6c:	bd70      	pop	{r4, r5, r6, pc}
      LCD_write(~(ASCII[c - 0x20][i]), LCD_DATA);
 8001a6e:	7820      	ldrb	r0, [r4, #0]
 8001a70:	2101      	movs	r1, #1
 8001a72:	43c0      	mvns	r0, r0
 8001a74:	b2c0      	uxtb	r0, r0
 8001a76:	e7f4      	b.n	8001a62 <LCD_putChar+0x1e>
 8001a78:	080027c2 	.word	0x080027c2
 8001a7c:	200000c4 	.word	0x200000c4

08001a80 <LCD_clrScr>:

/*
 * @brief Clear the screen
 */
void LCD_clrScr()
{
 8001a80:	b570      	push	{r4, r5, r6, lr}
  for(int i = 0; i < 504; i++)
 8001a82:	2400      	movs	r4, #0
  {
    LCD_write(0x00, LCD_DATA);
 8001a84:	4626      	mov	r6, r4
    lcd.buffer[i] = 0;
 8001a86:	4d05      	ldr	r5, [pc, #20]	; (8001a9c <LCD_clrScr+0x1c>)
    LCD_write(0x00, LCD_DATA);
 8001a88:	2101      	movs	r1, #1
 8001a8a:	2000      	movs	r0, #0
 8001a8c:	f7ff ffbc 	bl	8001a08 <LCD_write>
    lcd.buffer[i] = 0;
 8001a90:	5566      	strb	r6, [r4, r5]
  for(int i = 0; i < 504; i++)
 8001a92:	3401      	adds	r4, #1
 8001a94:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8001a98:	d1f6      	bne.n	8001a88 <LCD_clrScr+0x8>
  }
}
 8001a9a:	bd70      	pop	{r4, r5, r6, pc}
 8001a9c:	200000c4 	.word	0x200000c4

08001aa0 <LCD_init>:
{
 8001aa0:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(lcd_gpio.RSTPORT, lcd_gpio.RSTPIN, GPIO_PIN_RESET);
 8001aa2:	4c12      	ldr	r4, [pc, #72]	; (8001aec <LCD_init+0x4c>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	88a1      	ldrh	r1, [r4, #4]
 8001aa8:	6820      	ldr	r0, [r4, #0]
 8001aaa:	f7ff fb35 	bl	8001118 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(lcd_gpio.RSTPORT, lcd_gpio.RSTPIN, GPIO_PIN_SET);
 8001aae:	2201      	movs	r2, #1
 8001ab0:	88a1      	ldrh	r1, [r4, #4]
 8001ab2:	6820      	ldr	r0, [r4, #0]
 8001ab4:	f7ff fb30 	bl	8001118 <HAL_GPIO_WritePin>
 8001ab8:	2021      	movs	r0, #33	; 0x21
 8001aba:	f7ff ff8b 	bl	80019d4 <LCD_write.part.0>
 8001abe:	20b8      	movs	r0, #184	; 0xb8
 8001ac0:	f7ff ff88 	bl	80019d4 <LCD_write.part.0>
 8001ac4:	2004      	movs	r0, #4
 8001ac6:	f7ff ff85 	bl	80019d4 <LCD_write.part.0>
 8001aca:	2014      	movs	r0, #20
 8001acc:	f7ff ff82 	bl	80019d4 <LCD_write.part.0>
 8001ad0:	2020      	movs	r0, #32
 8001ad2:	f7ff ff7f 	bl	80019d4 <LCD_write.part.0>
 8001ad6:	200c      	movs	r0, #12
 8001ad8:	f7ff ff7c 	bl	80019d4 <LCD_write.part.0>
  LCD_clrScr();
 8001adc:	f7ff ffd0 	bl	8001a80 <LCD_clrScr>
  lcd.inverttext = false;
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	4b03      	ldr	r3, [pc, #12]	; (8001af0 <LCD_init+0x50>)
 8001ae4:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
 8001ae8:	bd10      	pop	{r4, pc}
 8001aea:	bf00      	nop
 8001aec:	2000009c 	.word	0x2000009c
 8001af0:	200000c4 	.word	0x200000c4

08001af4 <LCD_goXY>:
 * @brief Set LCD's cursor to position X,Y
 * @param x: position on the x-axis (column)
 * @param y: position on the y-axis (line)
 */
void LCD_goXY(uint8_t x, uint8_t y)
{
 8001af4:	b510      	push	{r4, lr}
 8001af6:	460c      	mov	r4, r1
 8001af8:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8001afc:	f7ff ff6a 	bl	80019d4 <LCD_write.part.0>
 8001b00:	f044 0040 	orr.w	r0, r4, #64	; 0x40
  LCD_write(0x80 | x, LCD_COMMAND); //Column.
  LCD_write(0x40 | y, LCD_COMMAND); //Row.
}
 8001b04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001b08:	f7ff bf64 	b.w	80019d4 <LCD_write.part.0>

08001b0c <LCD_print>:
{
 8001b0c:	b510      	push	{r4, lr}
 8001b0e:	4604      	mov	r4, r0
 8001b10:	4608      	mov	r0, r1
  LCD_goXY(x, y);
 8001b12:	4611      	mov	r1, r2
 8001b14:	f7ff ffee 	bl	8001af4 <LCD_goXY>
 8001b18:	3c01      	subs	r4, #1
  while(*str)
 8001b1a:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8001b1e:	b900      	cbnz	r0, 8001b22 <LCD_print+0x16>
}
 8001b20:	bd10      	pop	{r4, pc}
    LCD_putChar(*str++);
 8001b22:	f7ff ff8f 	bl	8001a44 <LCD_putChar>
 8001b26:	e7f8      	b.n	8001b1a <LCD_print+0xe>

08001b28 <LCD_refreshScr>:

/*
 * @brief Updates the entire screen according to lcd.buffer
 */
void LCD_refreshScr()
{
 8001b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LCD_goXY(LCD_SETXADDR, LCD_SETYADDR);
 8001b2a:	2140      	movs	r1, #64	; 0x40
 8001b2c:	2080      	movs	r0, #128	; 0x80
 8001b2e:	f7ff ffe1 	bl	8001af4 <LCD_goXY>
 8001b32:	2400      	movs	r4, #0

  for(int i = 0; i < 6; i++)
  {
    for(int j = 0; j < LCD_WIDTH; j++)
    {
      LCD_write(lcd.buffer[(i * LCD_WIDTH) + j], LCD_DATA);
 8001b34:	4f07      	ldr	r7, [pc, #28]	; (8001b54 <LCD_refreshScr+0x2c>)
{
 8001b36:	2500      	movs	r5, #0
      LCD_write(lcd.buffer[(i * LCD_WIDTH) + j], LCD_DATA);
 8001b38:	19e6      	adds	r6, r4, r7
 8001b3a:	5d70      	ldrb	r0, [r6, r5]
 8001b3c:	2101      	movs	r1, #1
    for(int j = 0; j < LCD_WIDTH; j++)
 8001b3e:	3501      	adds	r5, #1
      LCD_write(lcd.buffer[(i * LCD_WIDTH) + j], LCD_DATA);
 8001b40:	f7ff ff62 	bl	8001a08 <LCD_write>
    for(int j = 0; j < LCD_WIDTH; j++)
 8001b44:	2d54      	cmp	r5, #84	; 0x54
 8001b46:	d1f8      	bne.n	8001b3a <LCD_refreshScr+0x12>
 8001b48:	3454      	adds	r4, #84	; 0x54
  for(int i = 0; i < 6; i++)
 8001b4a:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8001b4e:	d1f2      	bne.n	8001b36 <LCD_refreshScr+0xe>
 8001b50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b52:	bf00      	nop
 8001b54:	200000c4 	.word	0x200000c4

08001b58 <LCD_setPixel>:

/*
 * @brief Sets a pixel on the screen
 */
void LCD_setPixel(uint8_t x, uint8_t y, bool pixel)
{
 8001b58:	2853      	cmp	r0, #83	; 0x53
 8001b5a:	bf28      	it	cs
 8001b5c:	2053      	movcs	r0, #83	; 0x53
 8001b5e:	292f      	cmp	r1, #47	; 0x2f
 8001b60:	bf28      	it	cs
 8001b62:	212f      	movcs	r1, #47	; 0x2f
 8001b64:	b530      	push	{r4, r5, lr}
 8001b66:	2554      	movs	r5, #84	; 0x54
 8001b68:	08cb      	lsrs	r3, r1, #3
 8001b6a:	4c09      	ldr	r4, [pc, #36]	; (8001b90 <LCD_setPixel+0x38>)
 8001b6c:	f001 0107 	and.w	r1, r1, #7
  if(y >= LCD_HEIGHT)
    y = LCD_HEIGHT - 1;
    
  if(pixel != false)
  {
    lcd.buffer[x + (y / 8) * LCD_WIDTH] |= 1 << (y % 8);
 8001b70:	fb05 0303 	mla	r3, r5, r3, r0
  if(pixel != false)
 8001b74:	b132      	cbz	r2, 8001b84 <LCD_setPixel+0x2c>
    lcd.buffer[x + (y / 8) * LCD_WIDTH] |= 1 << (y % 8);
 8001b76:	2201      	movs	r2, #1
 8001b78:	fa02 f101 	lsl.w	r1, r2, r1
 8001b7c:	5ce2      	ldrb	r2, [r4, r3]
 8001b7e:	4311      	orrs	r1, r2
  }
  else
  {
    lcd.buffer[x + (y / 8) * LCD_WIDTH] &= ~(1 << (y % 8));
 8001b80:	54e1      	strb	r1, [r4, r3]
 8001b82:	bd30      	pop	{r4, r5, pc}
 8001b84:	2201      	movs	r2, #1
 8001b86:	408a      	lsls	r2, r1
 8001b88:	5ce1      	ldrb	r1, [r4, r3]
 8001b8a:	ea21 0102 	bic.w	r1, r1, r2
 8001b8e:	e7f7      	b.n	8001b80 <LCD_setPixel+0x28>
 8001b90:	200000c4 	.word	0x200000c4

08001b94 <LCD_drawHLine>:
 */
void LCD_drawHLine(int x, int y, int l)
{
  int by, bi;

  if ((x>=0) && (x<LCD_WIDTH) && (y>=0) && (y<LCD_HEIGHT))
 8001b94:	2853      	cmp	r0, #83	; 0x53
{
 8001b96:	b510      	push	{r4, lr}
  if ((x>=0) && (x<LCD_WIDTH) && (y>=0) && (y<LCD_HEIGHT))
 8001b98:	d810      	bhi.n	8001bbc <LCD_drawHLine+0x28>
 8001b9a:	292f      	cmp	r1, #47	; 0x2f
 8001b9c:	d80e      	bhi.n	8001bbc <LCD_drawHLine+0x28>
  {
    for (int cx=0; cx<l; cx++)
    {
      by=((y/8)*84)+x;
 8001b9e:	2454      	movs	r4, #84	; 0x54
 8001ba0:	10cb      	asrs	r3, r1, #3
 8001ba2:	fb04 0003 	mla	r0, r4, r3, r0
      bi=y % 8;
 8001ba6:	f001 0307 	and.w	r3, r1, #7
      lcd.buffer[by+cx] |= (1<<bi);
 8001baa:	2101      	movs	r1, #1
 8001bac:	4099      	lsls	r1, r3
 8001bae:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <LCD_drawHLine+0x34>)
 8001bb0:	b249      	sxtb	r1, r1
 8001bb2:	4418      	add	r0, r3
    for (int cx=0; cx<l; cx++)
 8001bb4:	4604      	mov	r4, r0
 8001bb6:	1b03      	subs	r3, r0, r4
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	dc00      	bgt.n	8001bbe <LCD_drawHLine+0x2a>
 8001bbc:	bd10      	pop	{r4, pc}
      lcd.buffer[by+cx] |= (1<<bi);
 8001bbe:	7803      	ldrb	r3, [r0, #0]
 8001bc0:	430b      	orrs	r3, r1
 8001bc2:	f800 3b01 	strb.w	r3, [r0], #1
 8001bc6:	e7f6      	b.n	8001bb6 <LCD_drawHLine+0x22>
 8001bc8:	200000c4 	.word	0x200000c4

08001bcc <LCD_drawVLine>:
 * @param l: length of the line
 */
void LCD_drawVLine(int x, int y, int l)
{

  if ((x>=0) && (x<84) && (y>=0) && (y<48))
 8001bcc:	2853      	cmp	r0, #83	; 0x53
{
 8001bce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bd0:	460e      	mov	r6, r1
 8001bd2:	4617      	mov	r7, r2
  if ((x>=0) && (x<84) && (y>=0) && (y<48))
 8001bd4:	d805      	bhi.n	8001be2 <LCD_drawVLine+0x16>
 8001bd6:	292f      	cmp	r1, #47	; 0x2f
 8001bd8:	d803      	bhi.n	8001be2 <LCD_drawVLine+0x16>
 8001bda:	2400      	movs	r4, #0
  {
    for (int cy=0; cy<= l; cy++)
    {
      LCD_setPixel(x, y+cy, true);
 8001bdc:	b2c5      	uxtb	r5, r0
    for (int cy=0; cy<= l; cy++)
 8001bde:	42bc      	cmp	r4, r7
 8001be0:	dd00      	ble.n	8001be4 <LCD_drawVLine+0x18>
 8001be2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      LCD_setPixel(x, y+cy, true);
 8001be4:	1931      	adds	r1, r6, r4
 8001be6:	2201      	movs	r2, #1
 8001be8:	b2c9      	uxtb	r1, r1
 8001bea:	4628      	mov	r0, r5
 8001bec:	f7ff ffb4 	bl	8001b58 <LCD_setPixel>
    for (int cy=0; cy<= l; cy++)
 8001bf0:	3401      	adds	r4, #1
 8001bf2:	e7f4      	b.n	8001bde <LCD_drawVLine+0x12>

08001bf4 <LCD_drawLine>:
 * @param y1: starting point on the y-axis
 * @param x2: ending point on the x-axis
 * @param y2: ending point on the y-axis
 */
void LCD_drawLine(int x1, int y1, int x2, int y2)
{
 8001bf4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001bf8:	461d      	mov	r5, r3
  int tmp;
  double delta, tx, ty;
  
  if (((x2-x1)<0))
 8001bfa:	1a13      	subs	r3, r2, r0
 8001bfc:	2b00      	cmp	r3, #0
{
 8001bfe:	4682      	mov	sl, r0
 8001c00:	460c      	mov	r4, r1
 8001c02:	4693      	mov	fp, r2
  if (((x2-x1)<0))
 8001c04:	da03      	bge.n	8001c0e <LCD_drawLine+0x1a>
  {
    tmp=x1;
    x1=x2;
    x2=tmp;
    tmp=y1;
    y1=y2;
 8001c06:	462c      	mov	r4, r5
    x1=x2;
 8001c08:	4692      	mov	sl, r2
    y2=tmp;
 8001c0a:	460d      	mov	r5, r1
    x2=tmp;
 8001c0c:	4683      	mov	fp, r0
  }

  if (((y2-y1)<0))
 8001c0e:	1b2b      	subs	r3, r5, r4
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	da05      	bge.n	8001c20 <LCD_drawLine+0x2c>
 8001c14:	4623      	mov	r3, r4
  {
    tmp=x1;
    x1=x2;
    x2=tmp;
    tmp=y1;
    y1=y2;
 8001c16:	462c      	mov	r4, r5
    y2=tmp;
 8001c18:	461d      	mov	r5, r3
  if (((y2-y1)<0))
 8001c1a:	4653      	mov	r3, sl
    x1=x2;
 8001c1c:	46da      	mov	sl, fp
    x2=tmp;
 8001c1e:	469b      	mov	fp, r3
  }
  
  if (y1==y2)
 8001c20:	42ac      	cmp	r4, r5
 8001c22:	d10c      	bne.n	8001c3e <LCD_drawLine+0x4a>
  {
    if (x1>x2)
 8001c24:	45da      	cmp	sl, fp
 8001c26:	bfc2      	ittt	gt
 8001c28:	4653      	movgt	r3, sl
 8001c2a:	46da      	movgt	sl, fp
 8001c2c:	469b      	movgt	fp, r3
      tmp=x1;
      x1=x2;
      x2=tmp;
    }

    LCD_drawHLine(x1, y1, x2-x1);
 8001c2e:	ebab 020a 	sub.w	r2, fp, sl
      tmp=y1;
      y1=y2;
      y2=tmp;
    }

    LCD_drawHLine(x1, y1, y2-y1);
 8001c32:	4621      	mov	r1, r4
 8001c34:	4650      	mov	r0, sl
            LCD_setPixel((int) (tx+0.5), i, true);
            tx=tx+delta;
          }
        }
  }
}
 8001c36:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    LCD_drawHLine(x1, y1, y2-y1);
 8001c3a:	f7ff bfab 	b.w	8001b94 <LCD_drawHLine>
  else if (x1==x2)
 8001c3e:	45da      	cmp	sl, fp
 8001c40:	d106      	bne.n	8001c50 <LCD_drawLine+0x5c>
    if (y1>y2)
 8001c42:	42ac      	cmp	r4, r5
 8001c44:	bfc2      	ittt	gt
 8001c46:	4623      	movgt	r3, r4
 8001c48:	462c      	movgt	r4, r5
 8001c4a:	461d      	movgt	r5, r3
    LCD_drawHLine(x1, y1, y2-y1);
 8001c4c:	1b2a      	subs	r2, r5, r4
 8001c4e:	e7f0      	b.n	8001c32 <LCD_drawLine+0x3e>
  else if (abs(x2-x1)>abs(y2-y1))
 8001c50:	ebab 080a 	sub.w	r8, fp, sl
 8001c54:	eba5 0904 	sub.w	r9, r5, r4
 8001c58:	ea88 72e8 	eor.w	r2, r8, r8, asr #31
 8001c5c:	ea89 73e9 	eor.w	r3, r9, r9, asr #31
 8001c60:	eba2 72e8 	sub.w	r2, r2, r8, asr #31
 8001c64:	eba3 73e9 	sub.w	r3, r3, r9, asr #31
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	dd52      	ble.n	8001d12 <LCD_drawLine+0x11e>
    delta=((double)(y2-y1)/(double)(x2-x1));
 8001c6c:	4648      	mov	r0, r9
 8001c6e:	f7fe fbbf 	bl	80003f0 <__aeabi_i2d>
 8001c72:	4606      	mov	r6, r0
 8001c74:	4640      	mov	r0, r8
 8001c76:	460f      	mov	r7, r1
 8001c78:	f7fe fbba 	bl	80003f0 <__aeabi_i2d>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	460b      	mov	r3, r1
 8001c80:	4630      	mov	r0, r6
 8001c82:	4639      	mov	r1, r7
 8001c84:	f7fe fd44 	bl	8000710 <__aeabi_ddiv>
 8001c88:	4606      	mov	r6, r0
    ty=(double) y1;
 8001c8a:	4620      	mov	r0, r4
    delta=((double)(y2-y1)/(double)(x2-x1));
 8001c8c:	460f      	mov	r7, r1
    ty=(double) y1;
 8001c8e:	f7fe fbaf 	bl	80003f0 <__aeabi_i2d>
    if (x1>x2)
 8001c92:	45da      	cmp	sl, fp
    ty=(double) y1;
 8001c94:	4604      	mov	r4, r0
 8001c96:	460d      	mov	r5, r1
        LCD_setPixel(i, (int) (ty+0.5), true);
 8001c98:	f04f 0800 	mov.w	r8, #0
 8001c9c:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 8001d78 <LCD_drawLine+0x184>
    if (x1>x2)
 8001ca0:	dd1b      	ble.n	8001cda <LCD_drawLine+0xe6>
        LCD_setPixel(i, (int) (ty+0.5), true);
 8001ca2:	464b      	mov	r3, r9
 8001ca4:	4642      	mov	r2, r8
 8001ca6:	4620      	mov	r0, r4
 8001ca8:	4629      	mov	r1, r5
 8001caa:	f7fe fa55 	bl	8000158 <__adddf3>
 8001cae:	f7fe fe17 	bl	80008e0 <__aeabi_d2iz>
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	b2c1      	uxtb	r1, r0
 8001cb6:	fa5f f08a 	uxtb.w	r0, sl
 8001cba:	f7ff ff4d 	bl	8001b58 <LCD_setPixel>
            ty=ty-delta;
 8001cbe:	4620      	mov	r0, r4
 8001cc0:	4629      	mov	r1, r5
 8001cc2:	4632      	mov	r2, r6
 8001cc4:	463b      	mov	r3, r7
 8001cc6:	f7fe fa45 	bl	8000154 <__aeabi_dsub>
      for (int i=x1; i>=x2; i--)
 8001cca:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8001cce:	45d3      	cmp	fp, sl
            ty=ty-delta;
 8001cd0:	4604      	mov	r4, r0
 8001cd2:	460d      	mov	r5, r1
      for (int i=x1; i>=x2; i--)
 8001cd4:	dde5      	ble.n	8001ca2 <LCD_drawLine+0xae>
 8001cd6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        LCD_setPixel(i, (int) (ty+0.5), true);
 8001cda:	464b      	mov	r3, r9
 8001cdc:	4642      	mov	r2, r8
 8001cde:	4620      	mov	r0, r4
 8001ce0:	4629      	mov	r1, r5
 8001ce2:	f7fe fa39 	bl	8000158 <__adddf3>
 8001ce6:	f7fe fdfb 	bl	80008e0 <__aeabi_d2iz>
 8001cea:	2201      	movs	r2, #1
 8001cec:	b2c1      	uxtb	r1, r0
 8001cee:	fa5f f08a 	uxtb.w	r0, sl
 8001cf2:	f7ff ff31 	bl	8001b58 <LCD_setPixel>
        ty=ty+delta;
 8001cf6:	4620      	mov	r0, r4
 8001cf8:	4629      	mov	r1, r5
 8001cfa:	4632      	mov	r2, r6
 8001cfc:	463b      	mov	r3, r7
 8001cfe:	f7fe fa2b 	bl	8000158 <__adddf3>
      for (int i=x1; i<=x2; i++)
 8001d02:	f10a 0a01 	add.w	sl, sl, #1
 8001d06:	45d3      	cmp	fp, sl
        ty=ty+delta;
 8001d08:	4604      	mov	r4, r0
 8001d0a:	460d      	mov	r5, r1
      for (int i=x1; i<=x2; i++)
 8001d0c:	dae5      	bge.n	8001cda <LCD_drawLine+0xe6>
 8001d0e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (y1>y2)
 8001d12:	42ac      	cmp	r4, r5
 8001d14:	dc2d      	bgt.n	8001d72 <LCD_drawLine+0x17e>
    tx=(float) (x1);
 8001d16:	4650      	mov	r0, sl
 8001d18:	f7fe fec4 	bl	8000aa4 <__aeabi_i2f>
 8001d1c:	f7fe fb7a 	bl	8000414 <__aeabi_f2d>
 8001d20:	4606      	mov	r6, r0
 8001d22:	460f      	mov	r7, r1
            LCD_setPixel((int) (tx+0.5), i, true);
 8001d24:	4b14      	ldr	r3, [pc, #80]	; (8001d78 <LCD_drawLine+0x184>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	4630      	mov	r0, r6
 8001d2a:	4639      	mov	r1, r7
 8001d2c:	f7fe fa14 	bl	8000158 <__adddf3>
 8001d30:	f7fe fdd6 	bl	80008e0 <__aeabi_d2iz>
 8001d34:	fa5f fa84 	uxtb.w	sl, r4
 8001d38:	2201      	movs	r2, #1
 8001d3a:	4651      	mov	r1, sl
 8001d3c:	b2c0      	uxtb	r0, r0
 8001d3e:	f7ff ff0b 	bl	8001b58 <LCD_setPixel>
    delta=((float) (x2-x1)/(float) (y2-y1));
 8001d42:	4640      	mov	r0, r8
 8001d44:	f7fe feae 	bl	8000aa4 <__aeabi_i2f>
 8001d48:	4682      	mov	sl, r0
 8001d4a:	4648      	mov	r0, r9
 8001d4c:	f7fe feaa 	bl	8000aa4 <__aeabi_i2f>
 8001d50:	4601      	mov	r1, r0
 8001d52:	4650      	mov	r0, sl
 8001d54:	f7fe ffae 	bl	8000cb4 <__aeabi_fdiv>
 8001d58:	f7fe fb5c 	bl	8000414 <__aeabi_f2d>
            tx=tx+delta;
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	460b      	mov	r3, r1
 8001d60:	4630      	mov	r0, r6
 8001d62:	4639      	mov	r1, r7
 8001d64:	f7fe f9f8 	bl	8000158 <__adddf3>
          for (int i=y1; i<y2+1; i++)
 8001d68:	3401      	adds	r4, #1
 8001d6a:	42a5      	cmp	r5, r4
            tx=tx+delta;
 8001d6c:	4606      	mov	r6, r0
 8001d6e:	460f      	mov	r7, r1
          for (int i=y1; i<y2+1; i++)
 8001d70:	dad8      	bge.n	8001d24 <LCD_drawLine+0x130>
 8001d72:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d76:	bf00      	nop
 8001d78:	3fe00000 	.word	0x3fe00000

08001d7c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d7c:	4b0e      	ldr	r3, [pc, #56]	; (8001db8 <HAL_MspInit+0x3c>)
{
 8001d7e:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d80:	699a      	ldr	r2, [r3, #24]
 8001d82:	f042 0201 	orr.w	r2, r2, #1
 8001d86:	619a      	str	r2, [r3, #24]
 8001d88:	699a      	ldr	r2, [r3, #24]
 8001d8a:	f002 0201 	and.w	r2, r2, #1
 8001d8e:	9200      	str	r2, [sp, #0]
 8001d90:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d92:	69da      	ldr	r2, [r3, #28]
 8001d94:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001d98:	61da      	str	r2, [r3, #28]
 8001d9a:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d9c:	4a07      	ldr	r2, [pc, #28]	; (8001dbc <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da2:	9301      	str	r3, [sp, #4]
 8001da4:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001da6:	6853      	ldr	r3, [r2, #4]
 8001da8:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001dac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001db0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001db2:	b002      	add	sp, #8
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	40010000 	.word	0x40010000

08001dc0 <NMI_Handler>:
 8001dc0:	4770      	bx	lr

08001dc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dc2:	e7fe      	b.n	8001dc2 <HardFault_Handler>

08001dc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dc4:	e7fe      	b.n	8001dc4 <MemManage_Handler>

08001dc6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dc6:	e7fe      	b.n	8001dc6 <BusFault_Handler>

08001dc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dc8:	e7fe      	b.n	8001dc8 <UsageFault_Handler>

08001dca <SVC_Handler>:
 8001dca:	4770      	bx	lr

08001dcc <DebugMon_Handler>:
 8001dcc:	4770      	bx	lr

08001dce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dce:	4770      	bx	lr

08001dd0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dd0:	f7ff b842 	b.w	8000e58 <HAL_IncTick>

08001dd4 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8001dd4:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001dd6:	4b0a      	ldr	r3, [pc, #40]	; (8001e00 <_sbrk+0x2c>)
{
 8001dd8:	4602      	mov	r2, r0
	if (heap_end == 0)
 8001dda:	6819      	ldr	r1, [r3, #0]
 8001ddc:	b909      	cbnz	r1, 8001de2 <_sbrk+0xe>
		heap_end = &end;
 8001dde:	4909      	ldr	r1, [pc, #36]	; (8001e04 <_sbrk+0x30>)
 8001de0:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8001de2:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8001de4:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8001de6:	4402      	add	r2, r0
 8001de8:	428a      	cmp	r2, r1
 8001dea:	d906      	bls.n	8001dfa <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001dec:	f000 f858 	bl	8001ea0 <__errno>
 8001df0:	230c      	movs	r3, #12
 8001df2:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8001df4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001df8:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8001dfa:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8001dfc:	bd08      	pop	{r3, pc}
 8001dfe:	bf00      	nop
 8001e00:	2000008c 	.word	0x2000008c
 8001e04:	200002c4 	.word	0x200002c4

08001e08 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001e08:	4b0f      	ldr	r3, [pc, #60]	; (8001e48 <SystemInit+0x40>)
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	f042 0201 	orr.w	r2, r2, #1
 8001e10:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001e12:	6859      	ldr	r1, [r3, #4]
 8001e14:	4a0d      	ldr	r2, [pc, #52]	; (8001e4c <SystemInit+0x44>)
 8001e16:	400a      	ands	r2, r1
 8001e18:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001e20:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001e24:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001e2c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001e2e:	685a      	ldr	r2, [r3, #4]
 8001e30:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001e34:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001e36:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001e3a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001e3c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e40:	4b03      	ldr	r3, [pc, #12]	; (8001e50 <SystemInit+0x48>)
 8001e42:	609a      	str	r2, [r3, #8]
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	f8ff0000 	.word	0xf8ff0000
 8001e50:	e000ed00 	.word	0xe000ed00

08001e54 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001e54:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001e56:	e003      	b.n	8001e60 <LoopCopyDataInit>

08001e58 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001e58:	4b0b      	ldr	r3, [pc, #44]	; (8001e88 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001e5a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001e5c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001e5e:	3104      	adds	r1, #4

08001e60 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001e60:	480a      	ldr	r0, [pc, #40]	; (8001e8c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001e62:	4b0b      	ldr	r3, [pc, #44]	; (8001e90 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001e64:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001e66:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001e68:	d3f6      	bcc.n	8001e58 <CopyDataInit>
  ldr r2, =_sbss
 8001e6a:	4a0a      	ldr	r2, [pc, #40]	; (8001e94 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001e6c:	e002      	b.n	8001e74 <LoopFillZerobss>

08001e6e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001e6e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001e70:	f842 3b04 	str.w	r3, [r2], #4

08001e74 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001e74:	4b08      	ldr	r3, [pc, #32]	; (8001e98 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001e76:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001e78:	d3f9      	bcc.n	8001e6e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001e7a:	f7ff ffc5 	bl	8001e08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e7e:	f000 f815 	bl	8001eac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e82:	f7ff fbf3 	bl	800166c <main>
  bx lr
 8001e86:	4770      	bx	lr
  ldr r3, =_sidata
 8001e88:	08002a50 	.word	0x08002a50
  ldr r0, =_sdata
 8001e8c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001e90:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8001e94:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8001e98:	200002c4 	.word	0x200002c4

08001e9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e9c:	e7fe      	b.n	8001e9c <ADC1_2_IRQHandler>
	...

08001ea0 <__errno>:
 8001ea0:	4b01      	ldr	r3, [pc, #4]	; (8001ea8 <__errno+0x8>)
 8001ea2:	6818      	ldr	r0, [r3, #0]
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	2000000c 	.word	0x2000000c

08001eac <__libc_init_array>:
 8001eac:	b570      	push	{r4, r5, r6, lr}
 8001eae:	2500      	movs	r5, #0
 8001eb0:	4e0c      	ldr	r6, [pc, #48]	; (8001ee4 <__libc_init_array+0x38>)
 8001eb2:	4c0d      	ldr	r4, [pc, #52]	; (8001ee8 <__libc_init_array+0x3c>)
 8001eb4:	1ba4      	subs	r4, r4, r6
 8001eb6:	10a4      	asrs	r4, r4, #2
 8001eb8:	42a5      	cmp	r5, r4
 8001eba:	d109      	bne.n	8001ed0 <__libc_init_array+0x24>
 8001ebc:	f000 fc5e 	bl	800277c <_init>
 8001ec0:	2500      	movs	r5, #0
 8001ec2:	4e0a      	ldr	r6, [pc, #40]	; (8001eec <__libc_init_array+0x40>)
 8001ec4:	4c0a      	ldr	r4, [pc, #40]	; (8001ef0 <__libc_init_array+0x44>)
 8001ec6:	1ba4      	subs	r4, r4, r6
 8001ec8:	10a4      	asrs	r4, r4, #2
 8001eca:	42a5      	cmp	r5, r4
 8001ecc:	d105      	bne.n	8001eda <__libc_init_array+0x2e>
 8001ece:	bd70      	pop	{r4, r5, r6, pc}
 8001ed0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001ed4:	4798      	blx	r3
 8001ed6:	3501      	adds	r5, #1
 8001ed8:	e7ee      	b.n	8001eb8 <__libc_init_array+0xc>
 8001eda:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001ede:	4798      	blx	r3
 8001ee0:	3501      	adds	r5, #1
 8001ee2:	e7f2      	b.n	8001eca <__libc_init_array+0x1e>
 8001ee4:	08002a48 	.word	0x08002a48
 8001ee8:	08002a48 	.word	0x08002a48
 8001eec:	08002a48 	.word	0x08002a48
 8001ef0:	08002a4c 	.word	0x08002a4c

08001ef4 <memset>:
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	4402      	add	r2, r0
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d100      	bne.n	8001efe <memset+0xa>
 8001efc:	4770      	bx	lr
 8001efe:	f803 1b01 	strb.w	r1, [r3], #1
 8001f02:	e7f9      	b.n	8001ef8 <memset+0x4>

08001f04 <sniprintf>:
 8001f04:	b40c      	push	{r2, r3}
 8001f06:	b530      	push	{r4, r5, lr}
 8001f08:	4b17      	ldr	r3, [pc, #92]	; (8001f68 <sniprintf+0x64>)
 8001f0a:	1e0c      	subs	r4, r1, #0
 8001f0c:	b09d      	sub	sp, #116	; 0x74
 8001f0e:	681d      	ldr	r5, [r3, #0]
 8001f10:	da08      	bge.n	8001f24 <sniprintf+0x20>
 8001f12:	238b      	movs	r3, #139	; 0x8b
 8001f14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f18:	602b      	str	r3, [r5, #0]
 8001f1a:	b01d      	add	sp, #116	; 0x74
 8001f1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001f20:	b002      	add	sp, #8
 8001f22:	4770      	bx	lr
 8001f24:	f44f 7302 	mov.w	r3, #520	; 0x208
 8001f28:	f8ad 3014 	strh.w	r3, [sp, #20]
 8001f2c:	bf0c      	ite	eq
 8001f2e:	4623      	moveq	r3, r4
 8001f30:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8001f34:	9304      	str	r3, [sp, #16]
 8001f36:	9307      	str	r3, [sp, #28]
 8001f38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f3c:	9002      	str	r0, [sp, #8]
 8001f3e:	9006      	str	r0, [sp, #24]
 8001f40:	f8ad 3016 	strh.w	r3, [sp, #22]
 8001f44:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8001f46:	ab21      	add	r3, sp, #132	; 0x84
 8001f48:	a902      	add	r1, sp, #8
 8001f4a:	4628      	mov	r0, r5
 8001f4c:	9301      	str	r3, [sp, #4]
 8001f4e:	f000 f869 	bl	8002024 <_svfiprintf_r>
 8001f52:	1c43      	adds	r3, r0, #1
 8001f54:	bfbc      	itt	lt
 8001f56:	238b      	movlt	r3, #139	; 0x8b
 8001f58:	602b      	strlt	r3, [r5, #0]
 8001f5a:	2c00      	cmp	r4, #0
 8001f5c:	d0dd      	beq.n	8001f1a <sniprintf+0x16>
 8001f5e:	2200      	movs	r2, #0
 8001f60:	9b02      	ldr	r3, [sp, #8]
 8001f62:	701a      	strb	r2, [r3, #0]
 8001f64:	e7d9      	b.n	8001f1a <sniprintf+0x16>
 8001f66:	bf00      	nop
 8001f68:	2000000c 	.word	0x2000000c

08001f6c <__ssputs_r>:
 8001f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f70:	688e      	ldr	r6, [r1, #8]
 8001f72:	4682      	mov	sl, r0
 8001f74:	429e      	cmp	r6, r3
 8001f76:	460c      	mov	r4, r1
 8001f78:	4691      	mov	r9, r2
 8001f7a:	4698      	mov	r8, r3
 8001f7c:	d835      	bhi.n	8001fea <__ssputs_r+0x7e>
 8001f7e:	898a      	ldrh	r2, [r1, #12]
 8001f80:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001f84:	d031      	beq.n	8001fea <__ssputs_r+0x7e>
 8001f86:	2302      	movs	r3, #2
 8001f88:	6825      	ldr	r5, [r4, #0]
 8001f8a:	6909      	ldr	r1, [r1, #16]
 8001f8c:	1a6f      	subs	r7, r5, r1
 8001f8e:	6965      	ldr	r5, [r4, #20]
 8001f90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001f94:	fb95 f5f3 	sdiv	r5, r5, r3
 8001f98:	f108 0301 	add.w	r3, r8, #1
 8001f9c:	443b      	add	r3, r7
 8001f9e:	429d      	cmp	r5, r3
 8001fa0:	bf38      	it	cc
 8001fa2:	461d      	movcc	r5, r3
 8001fa4:	0553      	lsls	r3, r2, #21
 8001fa6:	d531      	bpl.n	800200c <__ssputs_r+0xa0>
 8001fa8:	4629      	mov	r1, r5
 8001faa:	f000 fb47 	bl	800263c <_malloc_r>
 8001fae:	4606      	mov	r6, r0
 8001fb0:	b950      	cbnz	r0, 8001fc8 <__ssputs_r+0x5c>
 8001fb2:	230c      	movs	r3, #12
 8001fb4:	f8ca 3000 	str.w	r3, [sl]
 8001fb8:	89a3      	ldrh	r3, [r4, #12]
 8001fba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001fbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fc2:	81a3      	strh	r3, [r4, #12]
 8001fc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001fc8:	463a      	mov	r2, r7
 8001fca:	6921      	ldr	r1, [r4, #16]
 8001fcc:	f000 fac4 	bl	8002558 <memcpy>
 8001fd0:	89a3      	ldrh	r3, [r4, #12]
 8001fd2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001fd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fda:	81a3      	strh	r3, [r4, #12]
 8001fdc:	6126      	str	r6, [r4, #16]
 8001fde:	443e      	add	r6, r7
 8001fe0:	6026      	str	r6, [r4, #0]
 8001fe2:	4646      	mov	r6, r8
 8001fe4:	6165      	str	r5, [r4, #20]
 8001fe6:	1bed      	subs	r5, r5, r7
 8001fe8:	60a5      	str	r5, [r4, #8]
 8001fea:	4546      	cmp	r6, r8
 8001fec:	bf28      	it	cs
 8001fee:	4646      	movcs	r6, r8
 8001ff0:	4649      	mov	r1, r9
 8001ff2:	4632      	mov	r2, r6
 8001ff4:	6820      	ldr	r0, [r4, #0]
 8001ff6:	f000 faba 	bl	800256e <memmove>
 8001ffa:	68a3      	ldr	r3, [r4, #8]
 8001ffc:	2000      	movs	r0, #0
 8001ffe:	1b9b      	subs	r3, r3, r6
 8002000:	60a3      	str	r3, [r4, #8]
 8002002:	6823      	ldr	r3, [r4, #0]
 8002004:	441e      	add	r6, r3
 8002006:	6026      	str	r6, [r4, #0]
 8002008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800200c:	462a      	mov	r2, r5
 800200e:	f000 fb73 	bl	80026f8 <_realloc_r>
 8002012:	4606      	mov	r6, r0
 8002014:	2800      	cmp	r0, #0
 8002016:	d1e1      	bne.n	8001fdc <__ssputs_r+0x70>
 8002018:	6921      	ldr	r1, [r4, #16]
 800201a:	4650      	mov	r0, sl
 800201c:	f000 fac2 	bl	80025a4 <_free_r>
 8002020:	e7c7      	b.n	8001fb2 <__ssputs_r+0x46>
	...

08002024 <_svfiprintf_r>:
 8002024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002028:	b09d      	sub	sp, #116	; 0x74
 800202a:	9303      	str	r3, [sp, #12]
 800202c:	898b      	ldrh	r3, [r1, #12]
 800202e:	4680      	mov	r8, r0
 8002030:	061c      	lsls	r4, r3, #24
 8002032:	460d      	mov	r5, r1
 8002034:	4616      	mov	r6, r2
 8002036:	d50f      	bpl.n	8002058 <_svfiprintf_r+0x34>
 8002038:	690b      	ldr	r3, [r1, #16]
 800203a:	b96b      	cbnz	r3, 8002058 <_svfiprintf_r+0x34>
 800203c:	2140      	movs	r1, #64	; 0x40
 800203e:	f000 fafd 	bl	800263c <_malloc_r>
 8002042:	6028      	str	r0, [r5, #0]
 8002044:	6128      	str	r0, [r5, #16]
 8002046:	b928      	cbnz	r0, 8002054 <_svfiprintf_r+0x30>
 8002048:	230c      	movs	r3, #12
 800204a:	f8c8 3000 	str.w	r3, [r8]
 800204e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002052:	e0c4      	b.n	80021de <_svfiprintf_r+0x1ba>
 8002054:	2340      	movs	r3, #64	; 0x40
 8002056:	616b      	str	r3, [r5, #20]
 8002058:	2300      	movs	r3, #0
 800205a:	9309      	str	r3, [sp, #36]	; 0x24
 800205c:	2320      	movs	r3, #32
 800205e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002062:	2330      	movs	r3, #48	; 0x30
 8002064:	f04f 0b01 	mov.w	fp, #1
 8002068:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800206c:	4637      	mov	r7, r6
 800206e:	463c      	mov	r4, r7
 8002070:	f814 3b01 	ldrb.w	r3, [r4], #1
 8002074:	2b00      	cmp	r3, #0
 8002076:	d13c      	bne.n	80020f2 <_svfiprintf_r+0xce>
 8002078:	ebb7 0a06 	subs.w	sl, r7, r6
 800207c:	d00b      	beq.n	8002096 <_svfiprintf_r+0x72>
 800207e:	4653      	mov	r3, sl
 8002080:	4632      	mov	r2, r6
 8002082:	4629      	mov	r1, r5
 8002084:	4640      	mov	r0, r8
 8002086:	f7ff ff71 	bl	8001f6c <__ssputs_r>
 800208a:	3001      	adds	r0, #1
 800208c:	f000 80a2 	beq.w	80021d4 <_svfiprintf_r+0x1b0>
 8002090:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002092:	4453      	add	r3, sl
 8002094:	9309      	str	r3, [sp, #36]	; 0x24
 8002096:	783b      	ldrb	r3, [r7, #0]
 8002098:	2b00      	cmp	r3, #0
 800209a:	f000 809b 	beq.w	80021d4 <_svfiprintf_r+0x1b0>
 800209e:	2300      	movs	r3, #0
 80020a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80020a4:	9304      	str	r3, [sp, #16]
 80020a6:	9307      	str	r3, [sp, #28]
 80020a8:	9205      	str	r2, [sp, #20]
 80020aa:	9306      	str	r3, [sp, #24]
 80020ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80020b0:	931a      	str	r3, [sp, #104]	; 0x68
 80020b2:	2205      	movs	r2, #5
 80020b4:	7821      	ldrb	r1, [r4, #0]
 80020b6:	4850      	ldr	r0, [pc, #320]	; (80021f8 <_svfiprintf_r+0x1d4>)
 80020b8:	f000 fa40 	bl	800253c <memchr>
 80020bc:	1c67      	adds	r7, r4, #1
 80020be:	9b04      	ldr	r3, [sp, #16]
 80020c0:	b9d8      	cbnz	r0, 80020fa <_svfiprintf_r+0xd6>
 80020c2:	06d9      	lsls	r1, r3, #27
 80020c4:	bf44      	itt	mi
 80020c6:	2220      	movmi	r2, #32
 80020c8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80020cc:	071a      	lsls	r2, r3, #28
 80020ce:	bf44      	itt	mi
 80020d0:	222b      	movmi	r2, #43	; 0x2b
 80020d2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80020d6:	7822      	ldrb	r2, [r4, #0]
 80020d8:	2a2a      	cmp	r2, #42	; 0x2a
 80020da:	d016      	beq.n	800210a <_svfiprintf_r+0xe6>
 80020dc:	2100      	movs	r1, #0
 80020de:	200a      	movs	r0, #10
 80020e0:	9a07      	ldr	r2, [sp, #28]
 80020e2:	4627      	mov	r7, r4
 80020e4:	783b      	ldrb	r3, [r7, #0]
 80020e6:	3401      	adds	r4, #1
 80020e8:	3b30      	subs	r3, #48	; 0x30
 80020ea:	2b09      	cmp	r3, #9
 80020ec:	d950      	bls.n	8002190 <_svfiprintf_r+0x16c>
 80020ee:	b1c9      	cbz	r1, 8002124 <_svfiprintf_r+0x100>
 80020f0:	e011      	b.n	8002116 <_svfiprintf_r+0xf2>
 80020f2:	2b25      	cmp	r3, #37	; 0x25
 80020f4:	d0c0      	beq.n	8002078 <_svfiprintf_r+0x54>
 80020f6:	4627      	mov	r7, r4
 80020f8:	e7b9      	b.n	800206e <_svfiprintf_r+0x4a>
 80020fa:	4a3f      	ldr	r2, [pc, #252]	; (80021f8 <_svfiprintf_r+0x1d4>)
 80020fc:	463c      	mov	r4, r7
 80020fe:	1a80      	subs	r0, r0, r2
 8002100:	fa0b f000 	lsl.w	r0, fp, r0
 8002104:	4318      	orrs	r0, r3
 8002106:	9004      	str	r0, [sp, #16]
 8002108:	e7d3      	b.n	80020b2 <_svfiprintf_r+0x8e>
 800210a:	9a03      	ldr	r2, [sp, #12]
 800210c:	1d11      	adds	r1, r2, #4
 800210e:	6812      	ldr	r2, [r2, #0]
 8002110:	9103      	str	r1, [sp, #12]
 8002112:	2a00      	cmp	r2, #0
 8002114:	db01      	blt.n	800211a <_svfiprintf_r+0xf6>
 8002116:	9207      	str	r2, [sp, #28]
 8002118:	e004      	b.n	8002124 <_svfiprintf_r+0x100>
 800211a:	4252      	negs	r2, r2
 800211c:	f043 0302 	orr.w	r3, r3, #2
 8002120:	9207      	str	r2, [sp, #28]
 8002122:	9304      	str	r3, [sp, #16]
 8002124:	783b      	ldrb	r3, [r7, #0]
 8002126:	2b2e      	cmp	r3, #46	; 0x2e
 8002128:	d10d      	bne.n	8002146 <_svfiprintf_r+0x122>
 800212a:	787b      	ldrb	r3, [r7, #1]
 800212c:	1c79      	adds	r1, r7, #1
 800212e:	2b2a      	cmp	r3, #42	; 0x2a
 8002130:	d132      	bne.n	8002198 <_svfiprintf_r+0x174>
 8002132:	9b03      	ldr	r3, [sp, #12]
 8002134:	3702      	adds	r7, #2
 8002136:	1d1a      	adds	r2, r3, #4
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	9203      	str	r2, [sp, #12]
 800213c:	2b00      	cmp	r3, #0
 800213e:	bfb8      	it	lt
 8002140:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002144:	9305      	str	r3, [sp, #20]
 8002146:	4c2d      	ldr	r4, [pc, #180]	; (80021fc <_svfiprintf_r+0x1d8>)
 8002148:	2203      	movs	r2, #3
 800214a:	7839      	ldrb	r1, [r7, #0]
 800214c:	4620      	mov	r0, r4
 800214e:	f000 f9f5 	bl	800253c <memchr>
 8002152:	b138      	cbz	r0, 8002164 <_svfiprintf_r+0x140>
 8002154:	2340      	movs	r3, #64	; 0x40
 8002156:	1b00      	subs	r0, r0, r4
 8002158:	fa03 f000 	lsl.w	r0, r3, r0
 800215c:	9b04      	ldr	r3, [sp, #16]
 800215e:	3701      	adds	r7, #1
 8002160:	4303      	orrs	r3, r0
 8002162:	9304      	str	r3, [sp, #16]
 8002164:	7839      	ldrb	r1, [r7, #0]
 8002166:	2206      	movs	r2, #6
 8002168:	4825      	ldr	r0, [pc, #148]	; (8002200 <_svfiprintf_r+0x1dc>)
 800216a:	1c7e      	adds	r6, r7, #1
 800216c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002170:	f000 f9e4 	bl	800253c <memchr>
 8002174:	2800      	cmp	r0, #0
 8002176:	d035      	beq.n	80021e4 <_svfiprintf_r+0x1c0>
 8002178:	4b22      	ldr	r3, [pc, #136]	; (8002204 <_svfiprintf_r+0x1e0>)
 800217a:	b9fb      	cbnz	r3, 80021bc <_svfiprintf_r+0x198>
 800217c:	9b03      	ldr	r3, [sp, #12]
 800217e:	3307      	adds	r3, #7
 8002180:	f023 0307 	bic.w	r3, r3, #7
 8002184:	3308      	adds	r3, #8
 8002186:	9303      	str	r3, [sp, #12]
 8002188:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800218a:	444b      	add	r3, r9
 800218c:	9309      	str	r3, [sp, #36]	; 0x24
 800218e:	e76d      	b.n	800206c <_svfiprintf_r+0x48>
 8002190:	fb00 3202 	mla	r2, r0, r2, r3
 8002194:	2101      	movs	r1, #1
 8002196:	e7a4      	b.n	80020e2 <_svfiprintf_r+0xbe>
 8002198:	2300      	movs	r3, #0
 800219a:	240a      	movs	r4, #10
 800219c:	4618      	mov	r0, r3
 800219e:	9305      	str	r3, [sp, #20]
 80021a0:	460f      	mov	r7, r1
 80021a2:	783a      	ldrb	r2, [r7, #0]
 80021a4:	3101      	adds	r1, #1
 80021a6:	3a30      	subs	r2, #48	; 0x30
 80021a8:	2a09      	cmp	r2, #9
 80021aa:	d903      	bls.n	80021b4 <_svfiprintf_r+0x190>
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d0ca      	beq.n	8002146 <_svfiprintf_r+0x122>
 80021b0:	9005      	str	r0, [sp, #20]
 80021b2:	e7c8      	b.n	8002146 <_svfiprintf_r+0x122>
 80021b4:	fb04 2000 	mla	r0, r4, r0, r2
 80021b8:	2301      	movs	r3, #1
 80021ba:	e7f1      	b.n	80021a0 <_svfiprintf_r+0x17c>
 80021bc:	ab03      	add	r3, sp, #12
 80021be:	9300      	str	r3, [sp, #0]
 80021c0:	462a      	mov	r2, r5
 80021c2:	4b11      	ldr	r3, [pc, #68]	; (8002208 <_svfiprintf_r+0x1e4>)
 80021c4:	a904      	add	r1, sp, #16
 80021c6:	4640      	mov	r0, r8
 80021c8:	f3af 8000 	nop.w
 80021cc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80021d0:	4681      	mov	r9, r0
 80021d2:	d1d9      	bne.n	8002188 <_svfiprintf_r+0x164>
 80021d4:	89ab      	ldrh	r3, [r5, #12]
 80021d6:	065b      	lsls	r3, r3, #25
 80021d8:	f53f af39 	bmi.w	800204e <_svfiprintf_r+0x2a>
 80021dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80021de:	b01d      	add	sp, #116	; 0x74
 80021e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021e4:	ab03      	add	r3, sp, #12
 80021e6:	9300      	str	r3, [sp, #0]
 80021e8:	462a      	mov	r2, r5
 80021ea:	4b07      	ldr	r3, [pc, #28]	; (8002208 <_svfiprintf_r+0x1e4>)
 80021ec:	a904      	add	r1, sp, #16
 80021ee:	4640      	mov	r0, r8
 80021f0:	f000 f884 	bl	80022fc <_printf_i>
 80021f4:	e7ea      	b.n	80021cc <_svfiprintf_r+0x1a8>
 80021f6:	bf00      	nop
 80021f8:	08002a12 	.word	0x08002a12
 80021fc:	08002a18 	.word	0x08002a18
 8002200:	08002a1c 	.word	0x08002a1c
 8002204:	00000000 	.word	0x00000000
 8002208:	08001f6d 	.word	0x08001f6d

0800220c <_printf_common>:
 800220c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002210:	4691      	mov	r9, r2
 8002212:	461f      	mov	r7, r3
 8002214:	688a      	ldr	r2, [r1, #8]
 8002216:	690b      	ldr	r3, [r1, #16]
 8002218:	4606      	mov	r6, r0
 800221a:	4293      	cmp	r3, r2
 800221c:	bfb8      	it	lt
 800221e:	4613      	movlt	r3, r2
 8002220:	f8c9 3000 	str.w	r3, [r9]
 8002224:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002228:	460c      	mov	r4, r1
 800222a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800222e:	b112      	cbz	r2, 8002236 <_printf_common+0x2a>
 8002230:	3301      	adds	r3, #1
 8002232:	f8c9 3000 	str.w	r3, [r9]
 8002236:	6823      	ldr	r3, [r4, #0]
 8002238:	0699      	lsls	r1, r3, #26
 800223a:	bf42      	ittt	mi
 800223c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002240:	3302      	addmi	r3, #2
 8002242:	f8c9 3000 	strmi.w	r3, [r9]
 8002246:	6825      	ldr	r5, [r4, #0]
 8002248:	f015 0506 	ands.w	r5, r5, #6
 800224c:	d107      	bne.n	800225e <_printf_common+0x52>
 800224e:	f104 0a19 	add.w	sl, r4, #25
 8002252:	68e3      	ldr	r3, [r4, #12]
 8002254:	f8d9 2000 	ldr.w	r2, [r9]
 8002258:	1a9b      	subs	r3, r3, r2
 800225a:	429d      	cmp	r5, r3
 800225c:	db2a      	blt.n	80022b4 <_printf_common+0xa8>
 800225e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002262:	6822      	ldr	r2, [r4, #0]
 8002264:	3300      	adds	r3, #0
 8002266:	bf18      	it	ne
 8002268:	2301      	movne	r3, #1
 800226a:	0692      	lsls	r2, r2, #26
 800226c:	d42f      	bmi.n	80022ce <_printf_common+0xc2>
 800226e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002272:	4639      	mov	r1, r7
 8002274:	4630      	mov	r0, r6
 8002276:	47c0      	blx	r8
 8002278:	3001      	adds	r0, #1
 800227a:	d022      	beq.n	80022c2 <_printf_common+0xb6>
 800227c:	6823      	ldr	r3, [r4, #0]
 800227e:	68e5      	ldr	r5, [r4, #12]
 8002280:	f003 0306 	and.w	r3, r3, #6
 8002284:	2b04      	cmp	r3, #4
 8002286:	bf18      	it	ne
 8002288:	2500      	movne	r5, #0
 800228a:	f8d9 2000 	ldr.w	r2, [r9]
 800228e:	f04f 0900 	mov.w	r9, #0
 8002292:	bf08      	it	eq
 8002294:	1aad      	subeq	r5, r5, r2
 8002296:	68a3      	ldr	r3, [r4, #8]
 8002298:	6922      	ldr	r2, [r4, #16]
 800229a:	bf08      	it	eq
 800229c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80022a0:	4293      	cmp	r3, r2
 80022a2:	bfc4      	itt	gt
 80022a4:	1a9b      	subgt	r3, r3, r2
 80022a6:	18ed      	addgt	r5, r5, r3
 80022a8:	341a      	adds	r4, #26
 80022aa:	454d      	cmp	r5, r9
 80022ac:	d11b      	bne.n	80022e6 <_printf_common+0xda>
 80022ae:	2000      	movs	r0, #0
 80022b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80022b4:	2301      	movs	r3, #1
 80022b6:	4652      	mov	r2, sl
 80022b8:	4639      	mov	r1, r7
 80022ba:	4630      	mov	r0, r6
 80022bc:	47c0      	blx	r8
 80022be:	3001      	adds	r0, #1
 80022c0:	d103      	bne.n	80022ca <_printf_common+0xbe>
 80022c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80022ca:	3501      	adds	r5, #1
 80022cc:	e7c1      	b.n	8002252 <_printf_common+0x46>
 80022ce:	2030      	movs	r0, #48	; 0x30
 80022d0:	18e1      	adds	r1, r4, r3
 80022d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80022d6:	1c5a      	adds	r2, r3, #1
 80022d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80022dc:	4422      	add	r2, r4
 80022de:	3302      	adds	r3, #2
 80022e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80022e4:	e7c3      	b.n	800226e <_printf_common+0x62>
 80022e6:	2301      	movs	r3, #1
 80022e8:	4622      	mov	r2, r4
 80022ea:	4639      	mov	r1, r7
 80022ec:	4630      	mov	r0, r6
 80022ee:	47c0      	blx	r8
 80022f0:	3001      	adds	r0, #1
 80022f2:	d0e6      	beq.n	80022c2 <_printf_common+0xb6>
 80022f4:	f109 0901 	add.w	r9, r9, #1
 80022f8:	e7d7      	b.n	80022aa <_printf_common+0x9e>
	...

080022fc <_printf_i>:
 80022fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002300:	4617      	mov	r7, r2
 8002302:	7e0a      	ldrb	r2, [r1, #24]
 8002304:	b085      	sub	sp, #20
 8002306:	2a6e      	cmp	r2, #110	; 0x6e
 8002308:	4698      	mov	r8, r3
 800230a:	4606      	mov	r6, r0
 800230c:	460c      	mov	r4, r1
 800230e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002310:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8002314:	f000 80bc 	beq.w	8002490 <_printf_i+0x194>
 8002318:	d81a      	bhi.n	8002350 <_printf_i+0x54>
 800231a:	2a63      	cmp	r2, #99	; 0x63
 800231c:	d02e      	beq.n	800237c <_printf_i+0x80>
 800231e:	d80a      	bhi.n	8002336 <_printf_i+0x3a>
 8002320:	2a00      	cmp	r2, #0
 8002322:	f000 80c8 	beq.w	80024b6 <_printf_i+0x1ba>
 8002326:	2a58      	cmp	r2, #88	; 0x58
 8002328:	f000 808a 	beq.w	8002440 <_printf_i+0x144>
 800232c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002330:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8002334:	e02a      	b.n	800238c <_printf_i+0x90>
 8002336:	2a64      	cmp	r2, #100	; 0x64
 8002338:	d001      	beq.n	800233e <_printf_i+0x42>
 800233a:	2a69      	cmp	r2, #105	; 0x69
 800233c:	d1f6      	bne.n	800232c <_printf_i+0x30>
 800233e:	6821      	ldr	r1, [r4, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002346:	d023      	beq.n	8002390 <_printf_i+0x94>
 8002348:	1d11      	adds	r1, r2, #4
 800234a:	6019      	str	r1, [r3, #0]
 800234c:	6813      	ldr	r3, [r2, #0]
 800234e:	e027      	b.n	80023a0 <_printf_i+0xa4>
 8002350:	2a73      	cmp	r2, #115	; 0x73
 8002352:	f000 80b4 	beq.w	80024be <_printf_i+0x1c2>
 8002356:	d808      	bhi.n	800236a <_printf_i+0x6e>
 8002358:	2a6f      	cmp	r2, #111	; 0x6f
 800235a:	d02a      	beq.n	80023b2 <_printf_i+0xb6>
 800235c:	2a70      	cmp	r2, #112	; 0x70
 800235e:	d1e5      	bne.n	800232c <_printf_i+0x30>
 8002360:	680a      	ldr	r2, [r1, #0]
 8002362:	f042 0220 	orr.w	r2, r2, #32
 8002366:	600a      	str	r2, [r1, #0]
 8002368:	e003      	b.n	8002372 <_printf_i+0x76>
 800236a:	2a75      	cmp	r2, #117	; 0x75
 800236c:	d021      	beq.n	80023b2 <_printf_i+0xb6>
 800236e:	2a78      	cmp	r2, #120	; 0x78
 8002370:	d1dc      	bne.n	800232c <_printf_i+0x30>
 8002372:	2278      	movs	r2, #120	; 0x78
 8002374:	496f      	ldr	r1, [pc, #444]	; (8002534 <_printf_i+0x238>)
 8002376:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800237a:	e064      	b.n	8002446 <_printf_i+0x14a>
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8002382:	1d11      	adds	r1, r2, #4
 8002384:	6019      	str	r1, [r3, #0]
 8002386:	6813      	ldr	r3, [r2, #0]
 8002388:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800238c:	2301      	movs	r3, #1
 800238e:	e0a3      	b.n	80024d8 <_printf_i+0x1dc>
 8002390:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002394:	f102 0104 	add.w	r1, r2, #4
 8002398:	6019      	str	r1, [r3, #0]
 800239a:	d0d7      	beq.n	800234c <_printf_i+0x50>
 800239c:	f9b2 3000 	ldrsh.w	r3, [r2]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	da03      	bge.n	80023ac <_printf_i+0xb0>
 80023a4:	222d      	movs	r2, #45	; 0x2d
 80023a6:	425b      	negs	r3, r3
 80023a8:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80023ac:	4962      	ldr	r1, [pc, #392]	; (8002538 <_printf_i+0x23c>)
 80023ae:	220a      	movs	r2, #10
 80023b0:	e017      	b.n	80023e2 <_printf_i+0xe6>
 80023b2:	6820      	ldr	r0, [r4, #0]
 80023b4:	6819      	ldr	r1, [r3, #0]
 80023b6:	f010 0f80 	tst.w	r0, #128	; 0x80
 80023ba:	d003      	beq.n	80023c4 <_printf_i+0xc8>
 80023bc:	1d08      	adds	r0, r1, #4
 80023be:	6018      	str	r0, [r3, #0]
 80023c0:	680b      	ldr	r3, [r1, #0]
 80023c2:	e006      	b.n	80023d2 <_printf_i+0xd6>
 80023c4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80023c8:	f101 0004 	add.w	r0, r1, #4
 80023cc:	6018      	str	r0, [r3, #0]
 80023ce:	d0f7      	beq.n	80023c0 <_printf_i+0xc4>
 80023d0:	880b      	ldrh	r3, [r1, #0]
 80023d2:	2a6f      	cmp	r2, #111	; 0x6f
 80023d4:	bf14      	ite	ne
 80023d6:	220a      	movne	r2, #10
 80023d8:	2208      	moveq	r2, #8
 80023da:	4957      	ldr	r1, [pc, #348]	; (8002538 <_printf_i+0x23c>)
 80023dc:	2000      	movs	r0, #0
 80023de:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80023e2:	6865      	ldr	r5, [r4, #4]
 80023e4:	2d00      	cmp	r5, #0
 80023e6:	60a5      	str	r5, [r4, #8]
 80023e8:	f2c0 809c 	blt.w	8002524 <_printf_i+0x228>
 80023ec:	6820      	ldr	r0, [r4, #0]
 80023ee:	f020 0004 	bic.w	r0, r0, #4
 80023f2:	6020      	str	r0, [r4, #0]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d13f      	bne.n	8002478 <_printf_i+0x17c>
 80023f8:	2d00      	cmp	r5, #0
 80023fa:	f040 8095 	bne.w	8002528 <_printf_i+0x22c>
 80023fe:	4675      	mov	r5, lr
 8002400:	2a08      	cmp	r2, #8
 8002402:	d10b      	bne.n	800241c <_printf_i+0x120>
 8002404:	6823      	ldr	r3, [r4, #0]
 8002406:	07da      	lsls	r2, r3, #31
 8002408:	d508      	bpl.n	800241c <_printf_i+0x120>
 800240a:	6923      	ldr	r3, [r4, #16]
 800240c:	6862      	ldr	r2, [r4, #4]
 800240e:	429a      	cmp	r2, r3
 8002410:	bfde      	ittt	le
 8002412:	2330      	movle	r3, #48	; 0x30
 8002414:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002418:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800241c:	ebae 0305 	sub.w	r3, lr, r5
 8002420:	6123      	str	r3, [r4, #16]
 8002422:	f8cd 8000 	str.w	r8, [sp]
 8002426:	463b      	mov	r3, r7
 8002428:	aa03      	add	r2, sp, #12
 800242a:	4621      	mov	r1, r4
 800242c:	4630      	mov	r0, r6
 800242e:	f7ff feed 	bl	800220c <_printf_common>
 8002432:	3001      	adds	r0, #1
 8002434:	d155      	bne.n	80024e2 <_printf_i+0x1e6>
 8002436:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800243a:	b005      	add	sp, #20
 800243c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002440:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8002444:	493c      	ldr	r1, [pc, #240]	; (8002538 <_printf_i+0x23c>)
 8002446:	6822      	ldr	r2, [r4, #0]
 8002448:	6818      	ldr	r0, [r3, #0]
 800244a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800244e:	f100 0504 	add.w	r5, r0, #4
 8002452:	601d      	str	r5, [r3, #0]
 8002454:	d001      	beq.n	800245a <_printf_i+0x15e>
 8002456:	6803      	ldr	r3, [r0, #0]
 8002458:	e002      	b.n	8002460 <_printf_i+0x164>
 800245a:	0655      	lsls	r5, r2, #25
 800245c:	d5fb      	bpl.n	8002456 <_printf_i+0x15a>
 800245e:	8803      	ldrh	r3, [r0, #0]
 8002460:	07d0      	lsls	r0, r2, #31
 8002462:	bf44      	itt	mi
 8002464:	f042 0220 	orrmi.w	r2, r2, #32
 8002468:	6022      	strmi	r2, [r4, #0]
 800246a:	b91b      	cbnz	r3, 8002474 <_printf_i+0x178>
 800246c:	6822      	ldr	r2, [r4, #0]
 800246e:	f022 0220 	bic.w	r2, r2, #32
 8002472:	6022      	str	r2, [r4, #0]
 8002474:	2210      	movs	r2, #16
 8002476:	e7b1      	b.n	80023dc <_printf_i+0xe0>
 8002478:	4675      	mov	r5, lr
 800247a:	fbb3 f0f2 	udiv	r0, r3, r2
 800247e:	fb02 3310 	mls	r3, r2, r0, r3
 8002482:	5ccb      	ldrb	r3, [r1, r3]
 8002484:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002488:	4603      	mov	r3, r0
 800248a:	2800      	cmp	r0, #0
 800248c:	d1f5      	bne.n	800247a <_printf_i+0x17e>
 800248e:	e7b7      	b.n	8002400 <_printf_i+0x104>
 8002490:	6808      	ldr	r0, [r1, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002498:	6949      	ldr	r1, [r1, #20]
 800249a:	d004      	beq.n	80024a6 <_printf_i+0x1aa>
 800249c:	1d10      	adds	r0, r2, #4
 800249e:	6018      	str	r0, [r3, #0]
 80024a0:	6813      	ldr	r3, [r2, #0]
 80024a2:	6019      	str	r1, [r3, #0]
 80024a4:	e007      	b.n	80024b6 <_printf_i+0x1ba>
 80024a6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80024aa:	f102 0004 	add.w	r0, r2, #4
 80024ae:	6018      	str	r0, [r3, #0]
 80024b0:	6813      	ldr	r3, [r2, #0]
 80024b2:	d0f6      	beq.n	80024a2 <_printf_i+0x1a6>
 80024b4:	8019      	strh	r1, [r3, #0]
 80024b6:	2300      	movs	r3, #0
 80024b8:	4675      	mov	r5, lr
 80024ba:	6123      	str	r3, [r4, #16]
 80024bc:	e7b1      	b.n	8002422 <_printf_i+0x126>
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	1d11      	adds	r1, r2, #4
 80024c2:	6019      	str	r1, [r3, #0]
 80024c4:	6815      	ldr	r5, [r2, #0]
 80024c6:	2100      	movs	r1, #0
 80024c8:	6862      	ldr	r2, [r4, #4]
 80024ca:	4628      	mov	r0, r5
 80024cc:	f000 f836 	bl	800253c <memchr>
 80024d0:	b108      	cbz	r0, 80024d6 <_printf_i+0x1da>
 80024d2:	1b40      	subs	r0, r0, r5
 80024d4:	6060      	str	r0, [r4, #4]
 80024d6:	6863      	ldr	r3, [r4, #4]
 80024d8:	6123      	str	r3, [r4, #16]
 80024da:	2300      	movs	r3, #0
 80024dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80024e0:	e79f      	b.n	8002422 <_printf_i+0x126>
 80024e2:	6923      	ldr	r3, [r4, #16]
 80024e4:	462a      	mov	r2, r5
 80024e6:	4639      	mov	r1, r7
 80024e8:	4630      	mov	r0, r6
 80024ea:	47c0      	blx	r8
 80024ec:	3001      	adds	r0, #1
 80024ee:	d0a2      	beq.n	8002436 <_printf_i+0x13a>
 80024f0:	6823      	ldr	r3, [r4, #0]
 80024f2:	079b      	lsls	r3, r3, #30
 80024f4:	d507      	bpl.n	8002506 <_printf_i+0x20a>
 80024f6:	2500      	movs	r5, #0
 80024f8:	f104 0919 	add.w	r9, r4, #25
 80024fc:	68e3      	ldr	r3, [r4, #12]
 80024fe:	9a03      	ldr	r2, [sp, #12]
 8002500:	1a9b      	subs	r3, r3, r2
 8002502:	429d      	cmp	r5, r3
 8002504:	db05      	blt.n	8002512 <_printf_i+0x216>
 8002506:	68e0      	ldr	r0, [r4, #12]
 8002508:	9b03      	ldr	r3, [sp, #12]
 800250a:	4298      	cmp	r0, r3
 800250c:	bfb8      	it	lt
 800250e:	4618      	movlt	r0, r3
 8002510:	e793      	b.n	800243a <_printf_i+0x13e>
 8002512:	2301      	movs	r3, #1
 8002514:	464a      	mov	r2, r9
 8002516:	4639      	mov	r1, r7
 8002518:	4630      	mov	r0, r6
 800251a:	47c0      	blx	r8
 800251c:	3001      	adds	r0, #1
 800251e:	d08a      	beq.n	8002436 <_printf_i+0x13a>
 8002520:	3501      	adds	r5, #1
 8002522:	e7eb      	b.n	80024fc <_printf_i+0x200>
 8002524:	2b00      	cmp	r3, #0
 8002526:	d1a7      	bne.n	8002478 <_printf_i+0x17c>
 8002528:	780b      	ldrb	r3, [r1, #0]
 800252a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800252e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002532:	e765      	b.n	8002400 <_printf_i+0x104>
 8002534:	08002a34 	.word	0x08002a34
 8002538:	08002a23 	.word	0x08002a23

0800253c <memchr>:
 800253c:	b510      	push	{r4, lr}
 800253e:	b2c9      	uxtb	r1, r1
 8002540:	4402      	add	r2, r0
 8002542:	4290      	cmp	r0, r2
 8002544:	4603      	mov	r3, r0
 8002546:	d101      	bne.n	800254c <memchr+0x10>
 8002548:	2000      	movs	r0, #0
 800254a:	bd10      	pop	{r4, pc}
 800254c:	781c      	ldrb	r4, [r3, #0]
 800254e:	3001      	adds	r0, #1
 8002550:	428c      	cmp	r4, r1
 8002552:	d1f6      	bne.n	8002542 <memchr+0x6>
 8002554:	4618      	mov	r0, r3
 8002556:	bd10      	pop	{r4, pc}

08002558 <memcpy>:
 8002558:	b510      	push	{r4, lr}
 800255a:	1e43      	subs	r3, r0, #1
 800255c:	440a      	add	r2, r1
 800255e:	4291      	cmp	r1, r2
 8002560:	d100      	bne.n	8002564 <memcpy+0xc>
 8002562:	bd10      	pop	{r4, pc}
 8002564:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002568:	f803 4f01 	strb.w	r4, [r3, #1]!
 800256c:	e7f7      	b.n	800255e <memcpy+0x6>

0800256e <memmove>:
 800256e:	4288      	cmp	r0, r1
 8002570:	b510      	push	{r4, lr}
 8002572:	eb01 0302 	add.w	r3, r1, r2
 8002576:	d803      	bhi.n	8002580 <memmove+0x12>
 8002578:	1e42      	subs	r2, r0, #1
 800257a:	4299      	cmp	r1, r3
 800257c:	d10c      	bne.n	8002598 <memmove+0x2a>
 800257e:	bd10      	pop	{r4, pc}
 8002580:	4298      	cmp	r0, r3
 8002582:	d2f9      	bcs.n	8002578 <memmove+0xa>
 8002584:	1881      	adds	r1, r0, r2
 8002586:	1ad2      	subs	r2, r2, r3
 8002588:	42d3      	cmn	r3, r2
 800258a:	d100      	bne.n	800258e <memmove+0x20>
 800258c:	bd10      	pop	{r4, pc}
 800258e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002592:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002596:	e7f7      	b.n	8002588 <memmove+0x1a>
 8002598:	f811 4b01 	ldrb.w	r4, [r1], #1
 800259c:	f802 4f01 	strb.w	r4, [r2, #1]!
 80025a0:	e7eb      	b.n	800257a <memmove+0xc>
	...

080025a4 <_free_r>:
 80025a4:	b538      	push	{r3, r4, r5, lr}
 80025a6:	4605      	mov	r5, r0
 80025a8:	2900      	cmp	r1, #0
 80025aa:	d043      	beq.n	8002634 <_free_r+0x90>
 80025ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80025b0:	1f0c      	subs	r4, r1, #4
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	bfb8      	it	lt
 80025b6:	18e4      	addlt	r4, r4, r3
 80025b8:	f000 f8d4 	bl	8002764 <__malloc_lock>
 80025bc:	4a1e      	ldr	r2, [pc, #120]	; (8002638 <_free_r+0x94>)
 80025be:	6813      	ldr	r3, [r2, #0]
 80025c0:	4610      	mov	r0, r2
 80025c2:	b933      	cbnz	r3, 80025d2 <_free_r+0x2e>
 80025c4:	6063      	str	r3, [r4, #4]
 80025c6:	6014      	str	r4, [r2, #0]
 80025c8:	4628      	mov	r0, r5
 80025ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80025ce:	f000 b8ca 	b.w	8002766 <__malloc_unlock>
 80025d2:	42a3      	cmp	r3, r4
 80025d4:	d90b      	bls.n	80025ee <_free_r+0x4a>
 80025d6:	6821      	ldr	r1, [r4, #0]
 80025d8:	1862      	adds	r2, r4, r1
 80025da:	4293      	cmp	r3, r2
 80025dc:	bf01      	itttt	eq
 80025de:	681a      	ldreq	r2, [r3, #0]
 80025e0:	685b      	ldreq	r3, [r3, #4]
 80025e2:	1852      	addeq	r2, r2, r1
 80025e4:	6022      	streq	r2, [r4, #0]
 80025e6:	6063      	str	r3, [r4, #4]
 80025e8:	6004      	str	r4, [r0, #0]
 80025ea:	e7ed      	b.n	80025c8 <_free_r+0x24>
 80025ec:	4613      	mov	r3, r2
 80025ee:	685a      	ldr	r2, [r3, #4]
 80025f0:	b10a      	cbz	r2, 80025f6 <_free_r+0x52>
 80025f2:	42a2      	cmp	r2, r4
 80025f4:	d9fa      	bls.n	80025ec <_free_r+0x48>
 80025f6:	6819      	ldr	r1, [r3, #0]
 80025f8:	1858      	adds	r0, r3, r1
 80025fa:	42a0      	cmp	r0, r4
 80025fc:	d10b      	bne.n	8002616 <_free_r+0x72>
 80025fe:	6820      	ldr	r0, [r4, #0]
 8002600:	4401      	add	r1, r0
 8002602:	1858      	adds	r0, r3, r1
 8002604:	4282      	cmp	r2, r0
 8002606:	6019      	str	r1, [r3, #0]
 8002608:	d1de      	bne.n	80025c8 <_free_r+0x24>
 800260a:	6810      	ldr	r0, [r2, #0]
 800260c:	6852      	ldr	r2, [r2, #4]
 800260e:	4401      	add	r1, r0
 8002610:	6019      	str	r1, [r3, #0]
 8002612:	605a      	str	r2, [r3, #4]
 8002614:	e7d8      	b.n	80025c8 <_free_r+0x24>
 8002616:	d902      	bls.n	800261e <_free_r+0x7a>
 8002618:	230c      	movs	r3, #12
 800261a:	602b      	str	r3, [r5, #0]
 800261c:	e7d4      	b.n	80025c8 <_free_r+0x24>
 800261e:	6820      	ldr	r0, [r4, #0]
 8002620:	1821      	adds	r1, r4, r0
 8002622:	428a      	cmp	r2, r1
 8002624:	bf01      	itttt	eq
 8002626:	6811      	ldreq	r1, [r2, #0]
 8002628:	6852      	ldreq	r2, [r2, #4]
 800262a:	1809      	addeq	r1, r1, r0
 800262c:	6021      	streq	r1, [r4, #0]
 800262e:	6062      	str	r2, [r4, #4]
 8002630:	605c      	str	r4, [r3, #4]
 8002632:	e7c9      	b.n	80025c8 <_free_r+0x24>
 8002634:	bd38      	pop	{r3, r4, r5, pc}
 8002636:	bf00      	nop
 8002638:	20000090 	.word	0x20000090

0800263c <_malloc_r>:
 800263c:	b570      	push	{r4, r5, r6, lr}
 800263e:	1ccd      	adds	r5, r1, #3
 8002640:	f025 0503 	bic.w	r5, r5, #3
 8002644:	3508      	adds	r5, #8
 8002646:	2d0c      	cmp	r5, #12
 8002648:	bf38      	it	cc
 800264a:	250c      	movcc	r5, #12
 800264c:	2d00      	cmp	r5, #0
 800264e:	4606      	mov	r6, r0
 8002650:	db01      	blt.n	8002656 <_malloc_r+0x1a>
 8002652:	42a9      	cmp	r1, r5
 8002654:	d903      	bls.n	800265e <_malloc_r+0x22>
 8002656:	230c      	movs	r3, #12
 8002658:	6033      	str	r3, [r6, #0]
 800265a:	2000      	movs	r0, #0
 800265c:	bd70      	pop	{r4, r5, r6, pc}
 800265e:	f000 f881 	bl	8002764 <__malloc_lock>
 8002662:	4a23      	ldr	r2, [pc, #140]	; (80026f0 <_malloc_r+0xb4>)
 8002664:	6814      	ldr	r4, [r2, #0]
 8002666:	4621      	mov	r1, r4
 8002668:	b991      	cbnz	r1, 8002690 <_malloc_r+0x54>
 800266a:	4c22      	ldr	r4, [pc, #136]	; (80026f4 <_malloc_r+0xb8>)
 800266c:	6823      	ldr	r3, [r4, #0]
 800266e:	b91b      	cbnz	r3, 8002678 <_malloc_r+0x3c>
 8002670:	4630      	mov	r0, r6
 8002672:	f000 f867 	bl	8002744 <_sbrk_r>
 8002676:	6020      	str	r0, [r4, #0]
 8002678:	4629      	mov	r1, r5
 800267a:	4630      	mov	r0, r6
 800267c:	f000 f862 	bl	8002744 <_sbrk_r>
 8002680:	1c43      	adds	r3, r0, #1
 8002682:	d126      	bne.n	80026d2 <_malloc_r+0x96>
 8002684:	230c      	movs	r3, #12
 8002686:	4630      	mov	r0, r6
 8002688:	6033      	str	r3, [r6, #0]
 800268a:	f000 f86c 	bl	8002766 <__malloc_unlock>
 800268e:	e7e4      	b.n	800265a <_malloc_r+0x1e>
 8002690:	680b      	ldr	r3, [r1, #0]
 8002692:	1b5b      	subs	r3, r3, r5
 8002694:	d41a      	bmi.n	80026cc <_malloc_r+0x90>
 8002696:	2b0b      	cmp	r3, #11
 8002698:	d90f      	bls.n	80026ba <_malloc_r+0x7e>
 800269a:	600b      	str	r3, [r1, #0]
 800269c:	18cc      	adds	r4, r1, r3
 800269e:	50cd      	str	r5, [r1, r3]
 80026a0:	4630      	mov	r0, r6
 80026a2:	f000 f860 	bl	8002766 <__malloc_unlock>
 80026a6:	f104 000b 	add.w	r0, r4, #11
 80026aa:	1d23      	adds	r3, r4, #4
 80026ac:	f020 0007 	bic.w	r0, r0, #7
 80026b0:	1ac3      	subs	r3, r0, r3
 80026b2:	d01b      	beq.n	80026ec <_malloc_r+0xb0>
 80026b4:	425a      	negs	r2, r3
 80026b6:	50e2      	str	r2, [r4, r3]
 80026b8:	bd70      	pop	{r4, r5, r6, pc}
 80026ba:	428c      	cmp	r4, r1
 80026bc:	bf0b      	itete	eq
 80026be:	6863      	ldreq	r3, [r4, #4]
 80026c0:	684b      	ldrne	r3, [r1, #4]
 80026c2:	6013      	streq	r3, [r2, #0]
 80026c4:	6063      	strne	r3, [r4, #4]
 80026c6:	bf18      	it	ne
 80026c8:	460c      	movne	r4, r1
 80026ca:	e7e9      	b.n	80026a0 <_malloc_r+0x64>
 80026cc:	460c      	mov	r4, r1
 80026ce:	6849      	ldr	r1, [r1, #4]
 80026d0:	e7ca      	b.n	8002668 <_malloc_r+0x2c>
 80026d2:	1cc4      	adds	r4, r0, #3
 80026d4:	f024 0403 	bic.w	r4, r4, #3
 80026d8:	42a0      	cmp	r0, r4
 80026da:	d005      	beq.n	80026e8 <_malloc_r+0xac>
 80026dc:	1a21      	subs	r1, r4, r0
 80026de:	4630      	mov	r0, r6
 80026e0:	f000 f830 	bl	8002744 <_sbrk_r>
 80026e4:	3001      	adds	r0, #1
 80026e6:	d0cd      	beq.n	8002684 <_malloc_r+0x48>
 80026e8:	6025      	str	r5, [r4, #0]
 80026ea:	e7d9      	b.n	80026a0 <_malloc_r+0x64>
 80026ec:	bd70      	pop	{r4, r5, r6, pc}
 80026ee:	bf00      	nop
 80026f0:	20000090 	.word	0x20000090
 80026f4:	20000094 	.word	0x20000094

080026f8 <_realloc_r>:
 80026f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026fa:	4607      	mov	r7, r0
 80026fc:	4614      	mov	r4, r2
 80026fe:	460e      	mov	r6, r1
 8002700:	b921      	cbnz	r1, 800270c <_realloc_r+0x14>
 8002702:	4611      	mov	r1, r2
 8002704:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002708:	f7ff bf98 	b.w	800263c <_malloc_r>
 800270c:	b922      	cbnz	r2, 8002718 <_realloc_r+0x20>
 800270e:	f7ff ff49 	bl	80025a4 <_free_r>
 8002712:	4625      	mov	r5, r4
 8002714:	4628      	mov	r0, r5
 8002716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002718:	f000 f826 	bl	8002768 <_malloc_usable_size_r>
 800271c:	4284      	cmp	r4, r0
 800271e:	d90f      	bls.n	8002740 <_realloc_r+0x48>
 8002720:	4621      	mov	r1, r4
 8002722:	4638      	mov	r0, r7
 8002724:	f7ff ff8a 	bl	800263c <_malloc_r>
 8002728:	4605      	mov	r5, r0
 800272a:	2800      	cmp	r0, #0
 800272c:	d0f2      	beq.n	8002714 <_realloc_r+0x1c>
 800272e:	4631      	mov	r1, r6
 8002730:	4622      	mov	r2, r4
 8002732:	f7ff ff11 	bl	8002558 <memcpy>
 8002736:	4631      	mov	r1, r6
 8002738:	4638      	mov	r0, r7
 800273a:	f7ff ff33 	bl	80025a4 <_free_r>
 800273e:	e7e9      	b.n	8002714 <_realloc_r+0x1c>
 8002740:	4635      	mov	r5, r6
 8002742:	e7e7      	b.n	8002714 <_realloc_r+0x1c>

08002744 <_sbrk_r>:
 8002744:	b538      	push	{r3, r4, r5, lr}
 8002746:	2300      	movs	r3, #0
 8002748:	4c05      	ldr	r4, [pc, #20]	; (8002760 <_sbrk_r+0x1c>)
 800274a:	4605      	mov	r5, r0
 800274c:	4608      	mov	r0, r1
 800274e:	6023      	str	r3, [r4, #0]
 8002750:	f7ff fb40 	bl	8001dd4 <_sbrk>
 8002754:	1c43      	adds	r3, r0, #1
 8002756:	d102      	bne.n	800275e <_sbrk_r+0x1a>
 8002758:	6823      	ldr	r3, [r4, #0]
 800275a:	b103      	cbz	r3, 800275e <_sbrk_r+0x1a>
 800275c:	602b      	str	r3, [r5, #0]
 800275e:	bd38      	pop	{r3, r4, r5, pc}
 8002760:	200002c0 	.word	0x200002c0

08002764 <__malloc_lock>:
 8002764:	4770      	bx	lr

08002766 <__malloc_unlock>:
 8002766:	4770      	bx	lr

08002768 <_malloc_usable_size_r>:
 8002768:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800276c:	2800      	cmp	r0, #0
 800276e:	f1a0 0004 	sub.w	r0, r0, #4
 8002772:	bfbc      	itt	lt
 8002774:	580b      	ldrlt	r3, [r1, r0]
 8002776:	18c0      	addlt	r0, r0, r3
 8002778:	4770      	bx	lr
	...

0800277c <_init>:
 800277c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800277e:	bf00      	nop
 8002780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002782:	bc08      	pop	{r3}
 8002784:	469e      	mov	lr, r3
 8002786:	4770      	bx	lr

08002788 <_fini>:
 8002788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800278a:	bf00      	nop
 800278c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800278e:	bc08      	pop	{r3}
 8002790:	469e      	mov	lr, r3
 8002792:	4770      	bx	lr
