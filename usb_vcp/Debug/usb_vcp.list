
usb_vcp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034f0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  080035fc  080035fc  000135fc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080036ac  080036ac  000136ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080036b0  080036b0  000136b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001e0  20000000  080036b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000012e8  200001e0  08003894  000201e0  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200014c8  08003894  000214c8  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001a60d  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003d6d  00000000  00000000  0003a816  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006056  00000000  00000000  0003e583  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000af8  00000000  00000000  000445e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000e38  00000000  00000000  000450d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000670c  00000000  00000000  00045f10  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000037a8  00000000  00000000  0004c61c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004fdc4  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001ed4  00000000  00000000  0004fe40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e0 	.word	0x200001e0
 8000128:	00000000 	.word	0x00000000
 800012c:	080035e4 	.word	0x080035e4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001e4 	.word	0x200001e4
 8000148:	080035e4 	.word	0x080035e4

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800015c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800015e:	4b0e      	ldr	r3, [pc, #56]	; (8000198 <HAL_InitTick+0x3c>)
{
 8000160:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000162:	7818      	ldrb	r0, [r3, #0]
 8000164:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000168:	fbb3 f3f0 	udiv	r3, r3, r0
 800016c:	4a0b      	ldr	r2, [pc, #44]	; (800019c <HAL_InitTick+0x40>)
 800016e:	6810      	ldr	r0, [r2, #0]
 8000170:	fbb0 f0f3 	udiv	r0, r0, r3
 8000174:	f000 f89e 	bl	80002b4 <HAL_SYSTICK_Config>
 8000178:	4604      	mov	r4, r0
 800017a:	b958      	cbnz	r0, 8000194 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800017c:	2d0f      	cmp	r5, #15
 800017e:	d809      	bhi.n	8000194 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000180:	4602      	mov	r2, r0
 8000182:	4629      	mov	r1, r5
 8000184:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000188:	f000 f854 	bl	8000234 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <HAL_InitTick+0x44>)
 800018e:	4620      	mov	r0, r4
 8000190:	601d      	str	r5, [r3, #0]
 8000192:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000194:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000196:	bd38      	pop	{r3, r4, r5, pc}
 8000198:	20000000 	.word	0x20000000
 800019c:	20000118 	.word	0x20000118
 80001a0:	20000004 	.word	0x20000004

080001a4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001a4:	4a07      	ldr	r2, [pc, #28]	; (80001c4 <HAL_Init+0x20>)
{
 80001a6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001a8:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001aa:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001ac:	f043 0310 	orr.w	r3, r3, #16
 80001b0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001b2:	f000 f82d 	bl	8000210 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001b6:	2000      	movs	r0, #0
 80001b8:	f7ff ffd0 	bl	800015c <HAL_InitTick>
  HAL_MspInit();
 80001bc:	f002 fac4 	bl	8002748 <HAL_MspInit>
}
 80001c0:	2000      	movs	r0, #0
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	40022000 	.word	0x40022000

080001c8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001c8:	4a03      	ldr	r2, [pc, #12]	; (80001d8 <HAL_IncTick+0x10>)
 80001ca:	4b04      	ldr	r3, [pc, #16]	; (80001dc <HAL_IncTick+0x14>)
 80001cc:	6811      	ldr	r1, [r2, #0]
 80001ce:	781b      	ldrb	r3, [r3, #0]
 80001d0:	440b      	add	r3, r1
 80001d2:	6013      	str	r3, [r2, #0]
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	2000042c 	.word	0x2000042c
 80001dc:	20000000 	.word	0x20000000

080001e0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001e0:	4b01      	ldr	r3, [pc, #4]	; (80001e8 <HAL_GetTick+0x8>)
 80001e2:	6818      	ldr	r0, [r3, #0]
}
 80001e4:	4770      	bx	lr
 80001e6:	bf00      	nop
 80001e8:	2000042c 	.word	0x2000042c

080001ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80001ec:	b538      	push	{r3, r4, r5, lr}
 80001ee:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80001f0:	f7ff fff6 	bl	80001e0 <HAL_GetTick>
 80001f4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001f6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80001f8:	bf1e      	ittt	ne
 80001fa:	4b04      	ldrne	r3, [pc, #16]	; (800020c <HAL_Delay+0x20>)
 80001fc:	781b      	ldrbne	r3, [r3, #0]
 80001fe:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000200:	f7ff ffee 	bl	80001e0 <HAL_GetTick>
 8000204:	1b40      	subs	r0, r0, r5
 8000206:	4284      	cmp	r4, r0
 8000208:	d8fa      	bhi.n	8000200 <HAL_Delay+0x14>
  {
  }
}
 800020a:	bd38      	pop	{r3, r4, r5, pc}
 800020c:	20000000 	.word	0x20000000

08000210 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000210:	4a07      	ldr	r2, [pc, #28]	; (8000230 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000212:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000214:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000216:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800021a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800021e:	041b      	lsls	r3, r3, #16
 8000220:	0c1b      	lsrs	r3, r3, #16
 8000222:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000226:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800022a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800022c:	60d3      	str	r3, [r2, #12]
 800022e:	4770      	bx	lr
 8000230:	e000ed00 	.word	0xe000ed00

08000234 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000234:	4b17      	ldr	r3, [pc, #92]	; (8000294 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000236:	b530      	push	{r4, r5, lr}
 8000238:	68dc      	ldr	r4, [r3, #12]
 800023a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800023e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000242:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000244:	2b04      	cmp	r3, #4
 8000246:	bf28      	it	cs
 8000248:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800024a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800024c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000250:	bf98      	it	ls
 8000252:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000254:	fa05 f303 	lsl.w	r3, r5, r3
 8000258:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800025c:	bf88      	it	hi
 800025e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000260:	4019      	ands	r1, r3
 8000262:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000264:	fa05 f404 	lsl.w	r4, r5, r4
 8000268:	3c01      	subs	r4, #1
 800026a:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800026c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800026e:	ea42 0201 	orr.w	r2, r2, r1
 8000272:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000276:	bfaf      	iteee	ge
 8000278:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027c:	4b06      	ldrlt	r3, [pc, #24]	; (8000298 <HAL_NVIC_SetPriority+0x64>)
 800027e:	f000 000f 	andlt.w	r0, r0, #15
 8000282:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000284:	bfa5      	ittet	ge
 8000286:	b2d2      	uxtbge	r2, r2
 8000288:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800028c:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800028e:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000292:	bd30      	pop	{r4, r5, pc}
 8000294:	e000ed00 	.word	0xe000ed00
 8000298:	e000ed14 	.word	0xe000ed14

0800029c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800029c:	2301      	movs	r3, #1
 800029e:	0942      	lsrs	r2, r0, #5
 80002a0:	f000 001f 	and.w	r0, r0, #31
 80002a4:	fa03 f000 	lsl.w	r0, r3, r0
 80002a8:	4b01      	ldr	r3, [pc, #4]	; (80002b0 <HAL_NVIC_EnableIRQ+0x14>)
 80002aa:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80002ae:	4770      	bx	lr
 80002b0:	e000e100 	.word	0xe000e100

080002b4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002b4:	3801      	subs	r0, #1
 80002b6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002ba:	d20a      	bcs.n	80002d2 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002bc:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002be:	4b06      	ldr	r3, [pc, #24]	; (80002d8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c0:	4a06      	ldr	r2, [pc, #24]	; (80002dc <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002c2:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002c8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002ca:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002cc:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002ce:	601a      	str	r2, [r3, #0]
 80002d0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002d2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	e000e010 	.word	0xe000e010
 80002dc:	e000ed00 	.word	0xe000ed00

080002e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80002e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80002e4:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80002e6:	4616      	mov	r6, r2
 80002e8:	4b65      	ldr	r3, [pc, #404]	; (8000480 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80002ea:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8000490 <HAL_GPIO_Init+0x1b0>
 80002ee:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8000494 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 80002f2:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002f6:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 80002f8:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002fc:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8000300:	45a0      	cmp	r8, r4
 8000302:	d17f      	bne.n	8000404 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8000304:	684d      	ldr	r5, [r1, #4]
 8000306:	2d12      	cmp	r5, #18
 8000308:	f000 80af 	beq.w	800046a <HAL_GPIO_Init+0x18a>
 800030c:	f200 8088 	bhi.w	8000420 <HAL_GPIO_Init+0x140>
 8000310:	2d02      	cmp	r5, #2
 8000312:	f000 80a7 	beq.w	8000464 <HAL_GPIO_Init+0x184>
 8000316:	d87c      	bhi.n	8000412 <HAL_GPIO_Init+0x132>
 8000318:	2d00      	cmp	r5, #0
 800031a:	f000 808e 	beq.w	800043a <HAL_GPIO_Init+0x15a>
 800031e:	2d01      	cmp	r5, #1
 8000320:	f000 809e 	beq.w	8000460 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000324:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000328:	2cff      	cmp	r4, #255	; 0xff
 800032a:	bf93      	iteet	ls
 800032c:	4682      	movls	sl, r0
 800032e:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000332:	3d08      	subhi	r5, #8
 8000334:	f8d0 b000 	ldrls.w	fp, [r0]
 8000338:	bf92      	itee	ls
 800033a:	00b5      	lslls	r5, r6, #2
 800033c:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000340:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000342:	fa09 f805 	lsl.w	r8, r9, r5
 8000346:	ea2b 0808 	bic.w	r8, fp, r8
 800034a:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800034e:	bf88      	it	hi
 8000350:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000354:	ea48 0505 	orr.w	r5, r8, r5
 8000358:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800035c:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000360:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000364:	d04e      	beq.n	8000404 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000366:	4d47      	ldr	r5, [pc, #284]	; (8000484 <HAL_GPIO_Init+0x1a4>)
 8000368:	4f46      	ldr	r7, [pc, #280]	; (8000484 <HAL_GPIO_Init+0x1a4>)
 800036a:	69ad      	ldr	r5, [r5, #24]
 800036c:	f026 0803 	bic.w	r8, r6, #3
 8000370:	f045 0501 	orr.w	r5, r5, #1
 8000374:	61bd      	str	r5, [r7, #24]
 8000376:	69bd      	ldr	r5, [r7, #24]
 8000378:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 800037c:	f005 0501 	and.w	r5, r5, #1
 8000380:	9501      	str	r5, [sp, #4]
 8000382:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000386:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800038a:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800038c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8000390:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000394:	fa09 f90b 	lsl.w	r9, r9, fp
 8000398:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800039c:	4d3a      	ldr	r5, [pc, #232]	; (8000488 <HAL_GPIO_Init+0x1a8>)
 800039e:	42a8      	cmp	r0, r5
 80003a0:	d068      	beq.n	8000474 <HAL_GPIO_Init+0x194>
 80003a2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003a6:	42a8      	cmp	r0, r5
 80003a8:	d066      	beq.n	8000478 <HAL_GPIO_Init+0x198>
 80003aa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003ae:	42a8      	cmp	r0, r5
 80003b0:	d064      	beq.n	800047c <HAL_GPIO_Init+0x19c>
 80003b2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003b6:	42a8      	cmp	r0, r5
 80003b8:	bf0c      	ite	eq
 80003ba:	2503      	moveq	r5, #3
 80003bc:	2504      	movne	r5, #4
 80003be:	fa05 f50b 	lsl.w	r5, r5, fp
 80003c2:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 80003c6:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80003ca:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80003cc:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80003d0:	bf14      	ite	ne
 80003d2:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80003d4:	43a5      	biceq	r5, r4
 80003d6:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80003d8:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80003da:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80003de:	bf14      	ite	ne
 80003e0:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80003e2:	43a5      	biceq	r5, r4
 80003e4:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80003e6:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80003e8:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80003ec:	bf14      	ite	ne
 80003ee:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80003f0:	43a5      	biceq	r5, r4
 80003f2:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80003f4:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80003f6:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80003fa:	bf14      	ite	ne
 80003fc:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80003fe:	ea25 0404 	biceq.w	r4, r5, r4
 8000402:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000404:	3601      	adds	r6, #1
 8000406:	2e10      	cmp	r6, #16
 8000408:	f47f af73 	bne.w	80002f2 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 800040c:	b003      	add	sp, #12
 800040e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8000412:	2d03      	cmp	r5, #3
 8000414:	d022      	beq.n	800045c <HAL_GPIO_Init+0x17c>
 8000416:	2d11      	cmp	r5, #17
 8000418:	d184      	bne.n	8000324 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800041a:	68ca      	ldr	r2, [r1, #12]
 800041c:	3204      	adds	r2, #4
          break;
 800041e:	e781      	b.n	8000324 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000420:	4f1a      	ldr	r7, [pc, #104]	; (800048c <HAL_GPIO_Init+0x1ac>)
 8000422:	42bd      	cmp	r5, r7
 8000424:	d009      	beq.n	800043a <HAL_GPIO_Init+0x15a>
 8000426:	d812      	bhi.n	800044e <HAL_GPIO_Init+0x16e>
 8000428:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8000498 <HAL_GPIO_Init+0x1b8>
 800042c:	454d      	cmp	r5, r9
 800042e:	d004      	beq.n	800043a <HAL_GPIO_Init+0x15a>
 8000430:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000434:	454d      	cmp	r5, r9
 8000436:	f47f af75 	bne.w	8000324 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800043a:	688a      	ldr	r2, [r1, #8]
 800043c:	b1c2      	cbz	r2, 8000470 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800043e:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000440:	bf0c      	ite	eq
 8000442:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000446:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800044a:	2208      	movs	r2, #8
 800044c:	e76a      	b.n	8000324 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 800044e:	4575      	cmp	r5, lr
 8000450:	d0f3      	beq.n	800043a <HAL_GPIO_Init+0x15a>
 8000452:	4565      	cmp	r5, ip
 8000454:	d0f1      	beq.n	800043a <HAL_GPIO_Init+0x15a>
 8000456:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800049c <HAL_GPIO_Init+0x1bc>
 800045a:	e7eb      	b.n	8000434 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800045c:	2200      	movs	r2, #0
 800045e:	e761      	b.n	8000324 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000460:	68ca      	ldr	r2, [r1, #12]
          break;
 8000462:	e75f      	b.n	8000324 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000464:	68ca      	ldr	r2, [r1, #12]
 8000466:	3208      	adds	r2, #8
          break;
 8000468:	e75c      	b.n	8000324 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800046a:	68ca      	ldr	r2, [r1, #12]
 800046c:	320c      	adds	r2, #12
          break;
 800046e:	e759      	b.n	8000324 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000470:	2204      	movs	r2, #4
 8000472:	e757      	b.n	8000324 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000474:	2500      	movs	r5, #0
 8000476:	e7a2      	b.n	80003be <HAL_GPIO_Init+0xde>
 8000478:	2501      	movs	r5, #1
 800047a:	e7a0      	b.n	80003be <HAL_GPIO_Init+0xde>
 800047c:	2502      	movs	r5, #2
 800047e:	e79e      	b.n	80003be <HAL_GPIO_Init+0xde>
 8000480:	40010400 	.word	0x40010400
 8000484:	40021000 	.word	0x40021000
 8000488:	40010800 	.word	0x40010800
 800048c:	10210000 	.word	0x10210000
 8000490:	10310000 	.word	0x10310000
 8000494:	10320000 	.word	0x10320000
 8000498:	10110000 	.word	0x10110000
 800049c:	10220000 	.word	0x10220000

080004a0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80004a0:	b10a      	cbz	r2, 80004a6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80004a2:	6101      	str	r1, [r0, #16]
 80004a4:	4770      	bx	lr
 80004a6:	0409      	lsls	r1, r1, #16
 80004a8:	e7fb      	b.n	80004a2 <HAL_GPIO_WritePin+0x2>

080004aa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80004aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t index = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 80004ae:	4604      	mov	r4, r0
{
 80004b0:	b086      	sub	sp, #24
  if(hpcd == NULL)
 80004b2:	2800      	cmp	r0, #0
 80004b4:	d060      	beq.n	8000578 <HAL_PCD_Init+0xce>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 80004b6:	f890 3429 	ldrb.w	r3, [r0, #1065]	; 0x429
 80004ba:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80004be:	b91b      	cbnz	r3, 80004c8 <HAL_PCD_Init+0x1e>
  {  
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80004c0:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80004c4:	f002 fa56 	bl	8002974 <HAL_PCD_MspInit>
  }
  
  hpcd->State = HAL_PCD_STATE_BUSY;
  
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80004c8:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 80004ca:	2303      	movs	r3, #3

  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 80004cc:	466e      	mov	r6, sp
  __HAL_PCD_DISABLE(hpcd);
 80004ce:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 80004d2:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
  __HAL_PCD_DISABLE(hpcd);
 80004d6:	f001 f843 	bl	8001560 <USB_DisableGlobalInt>
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 80004da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004dc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80004de:	682b      	ldr	r3, [r5, #0]
 80004e0:	f104 0804 	add.w	r8, r4, #4
 80004e4:	6033      	str	r3, [r6, #0]
 80004e6:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 80004ea:	6820      	ldr	r0, [r4, #0]
 80004ec:	f001 f828 	bl	8001540 <USB_CoreInit>
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 80004f0:	2100      	movs	r1, #0
 80004f2:	6820      	ldr	r0, [r4, #0]
 80004f4:	f001 f83e 	bl	8001574 <USB_SetCurrentMode>
 
  /* Init endpoints structures */
  for (index = 0U; index < 15U ; index++)
 80004f8:	2100      	movs	r1, #0
 80004fa:	4623      	mov	r3, r4
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 80004fc:	4622      	mov	r2, r4
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1U;
 80004fe:	2601      	movs	r6, #1
    hpcd->IN_ep[index].num = index;
    hpcd->IN_ep[index].tx_fifo_num = index;
    /* Control until ep is actvated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 8000500:	4608      	mov	r0, r1
 8000502:	f104 0510 	add.w	r5, r4, #16
    hpcd->IN_ep[index].num = index;
 8000506:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
    hpcd->IN_ep[index].tx_fifo_num = index;
 800050a:	8691      	strh	r1, [r2, #52]	; 0x34
  for (index = 0U; index < 15U ; index++)
 800050c:	3101      	adds	r1, #1
 800050e:	290f      	cmp	r1, #15
    hpcd->IN_ep[index].is_in = 1U;
 8000510:	f882 6029 	strb.w	r6, [r2, #41]	; 0x29
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 8000514:	f882 002b 	strb.w	r0, [r2, #43]	; 0x2b
    hpcd->IN_ep[index].maxpacket =  0U;
 8000518:	6390      	str	r0, [r2, #56]	; 0x38
    hpcd->IN_ep[index].xfer_buff = 0U;
 800051a:	63d0      	str	r0, [r2, #60]	; 0x3c
    hpcd->IN_ep[index].xfer_len = 0U;
 800051c:	6410      	str	r0, [r2, #64]	; 0x40
 800051e:	f102 0220 	add.w	r2, r2, #32
  for (index = 0U; index < 15U ; index++)
 8000522:	d1f0      	bne.n	8000506 <HAL_PCD_Init+0x5c>
 8000524:	2200      	movs	r2, #0
  }
 
  for (index = 0U; index < 15U ; index++)
  {
    hpcd->OUT_ep[index].is_in = 0U;
 8000526:	4617      	mov	r7, r2
    hpcd->OUT_ep[index].num = index;
 8000528:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
    hpcd->IN_ep[index].tx_fifo_num = index;
 800052c:	869a      	strh	r2, [r3, #52]	; 0x34
  for (index = 0U; index < 15U ; index++)
 800052e:	3201      	adds	r2, #1
 8000530:	2a0f      	cmp	r2, #15
    hpcd->OUT_ep[index].is_in = 0U;
 8000532:	f883 7229 	strb.w	r7, [r3, #553]	; 0x229
    /* Control until ep is activated */
    hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
 8000536:	f883 722b 	strb.w	r7, [r3, #555]	; 0x22b
    hpcd->OUT_ep[index].maxpacket = 0U;
 800053a:	f8c3 7238 	str.w	r7, [r3, #568]	; 0x238
    hpcd->OUT_ep[index].xfer_buff = 0U;
 800053e:	f8c3 723c 	str.w	r7, [r3, #572]	; 0x23c
    hpcd->OUT_ep[index].xfer_len = 0U;
 8000542:	f8c3 7240 	str.w	r7, [r3, #576]	; 0x240
 8000546:	f103 0320 	add.w	r3, r3, #32
  for (index = 0U; index < 15U ; index++)
 800054a:	d1ed      	bne.n	8000528 <HAL_PCD_Init+0x7e>
  }
  
  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
 800054c:	466e      	mov	r6, sp
 800054e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000550:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000552:	682b      	ldr	r3, [r5, #0]
 8000554:	6033      	str	r3, [r6, #0]
 8000556:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 800055a:	6820      	ldr	r0, [r4, #0]
 800055c:	f001 f80c 	bl	8001578 <USB_DevInit>
  
  hpcd->USB_Address = 0U;
  hpcd->State= HAL_PCD_STATE_READY;
 8000560:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 8000562:	f884 7024 	strb.w	r7, [r4, #36]	; 0x24
  
  USB_DevDisconnect (hpcd->Instance);  
 8000566:	6820      	ldr	r0, [r4, #0]
  hpcd->State= HAL_PCD_STATE_READY;
 8000568:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
  USB_DevDisconnect (hpcd->Instance);  
 800056c:	f001 fadc 	bl	8001b28 <USB_DevDisconnect>
  return HAL_OK;
 8000570:	2000      	movs	r0, #0
}
 8000572:	b006      	add	sp, #24
 8000574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8000578:	2001      	movs	r0, #1
 800057a:	e7fa      	b.n	8000572 <HAL_PCD_Init+0xc8>

0800057c <HAL_PCD_Start>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 800057c:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{
 8000580:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8000582:	2b01      	cmp	r3, #1
{
 8000584:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000586:	d00e      	beq.n	80005a6 <HAL_PCD_Start+0x2a>
 8000588:	2101      	movs	r1, #1
 800058a:	f880 1428 	strb.w	r1, [r0, #1064]	; 0x428
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 800058e:	f002 fb1c 	bl	8002bca <HAL_PCDEx_SetConnectionState>
  USB_DevConnect (hpcd->Instance);
 8000592:	6820      	ldr	r0, [r4, #0]
 8000594:	f001 fac6 	bl	8001b24 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000598:	6820      	ldr	r0, [r4, #0]
 800059a:	f000 ffd8 	bl	800154e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800059e:	2000      	movs	r0, #0
 80005a0:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 80005a4:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80005a6:	2002      	movs	r0, #2
}
 80005a8:	bd10      	pop	{r4, pc}

080005aa <HAL_PCD_SetAddress>:
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 80005aa:	f890 2428 	ldrb.w	r2, [r0, #1064]	; 0x428
{
 80005ae:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 80005b0:	2a01      	cmp	r2, #1
{
 80005b2:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80005b4:	d00b      	beq.n	80005ce <HAL_PCD_SetAddress+0x24>
 80005b6:	2201      	movs	r2, #1
 80005b8:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428
  hpcd->USB_Address = address;
 80005bc:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  USB_SetDevAddress(hpcd->Instance, address);
 80005c0:	6800      	ldr	r0, [r0, #0]
 80005c2:	f001 faa9 	bl	8001b18 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80005c6:	2000      	movs	r0, #0
 80005c8:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
 80005cc:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80005ce:	2002      	movs	r0, #2
  return HAL_OK;
}
 80005d0:	bd10      	pop	{r4, pc}

080005d2 <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80005d2:	b538      	push	{r3, r4, r5, lr}
 80005d4:	4604      	mov	r4, r0
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80U) == 0x80U)
 80005d6:	b248      	sxtb	r0, r1
 80005d8:	2800      	cmp	r0, #0
 80005da:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80005de:	bfb5      	itete	lt
 80005e0:	eb04 1145 	addlt.w	r1, r4, r5, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 80005e4:	eb04 1141 	addge.w	r1, r4, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80005e8:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 80005ea:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  }
  ep->num   = ep_addr & 0x7FU;
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 80005ee:	0fc0      	lsrs	r0, r0, #31
  ep->num   = ep_addr & 0x7FU;
 80005f0:	700d      	strb	r5, [r1, #0]
  ep->is_in = (0x80U & ep_addr) != 0U;
 80005f2:	7048      	strb	r0, [r1, #1]
  ep->maxpacket = ep_mps;
  ep->type = ep_type;
 80005f4:	70cb      	strb	r3, [r1, #3]
    
  __HAL_LOCK(hpcd);
 80005f6:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
  ep->maxpacket = ep_mps;
 80005fa:	610a      	str	r2, [r1, #16]
  __HAL_LOCK(hpcd);
 80005fc:	2b01      	cmp	r3, #1
 80005fe:	d009      	beq.n	8000614 <HAL_PCD_EP_Open+0x42>
 8000600:	2301      	movs	r3, #1
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8000602:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8000604:	f884 3428 	strb.w	r3, [r4, #1064]	; 0x428
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8000608:	f000 ffd2 	bl	80015b0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800060c:	2000      	movs	r0, #0
 800060e:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return ret;
 8000612:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8000614:	2002      	movs	r0, #2
}
 8000616:	bd38      	pop	{r3, r4, r5, pc}

08000618 <HAL_PCD_EP_Close>:
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80U) == 0x80U)
 8000618:	b24b      	sxtb	r3, r1
 800061a:	2b00      	cmp	r3, #0
 800061c:	f001 027f 	and.w	r2, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000620:	bfb5      	itete	lt
 8000622:	eb00 1142 	addlt.w	r1, r0, r2, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000626:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 800062a:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 800062c:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  }
  ep->num   = ep_addr & 0x7FU;
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8000630:	0fdb      	lsrs	r3, r3, #31
{  
 8000632:	b510      	push	{r4, lr}
  ep->num   = ep_addr & 0x7FU;
 8000634:	700a      	strb	r2, [r1, #0]
  ep->is_in = (0x80U & ep_addr) != 0U;
 8000636:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd);
 8000638:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{  
 800063c:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800063e:	2b01      	cmp	r3, #1
 8000640:	d009      	beq.n	8000656 <HAL_PCD_EP_Close+0x3e>
 8000642:	2301      	movs	r3, #1
 8000644:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8000648:	6800      	ldr	r0, [r0, #0]
 800064a:	f001 f923 	bl	8001894 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800064e:	2000      	movs	r0, #0
 8000650:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 8000654:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000656:	2002      	movs	r0, #2
}
 8000658:	bd10      	pop	{r4, pc}

0800065a <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800065a:	b570      	push	{r4, r5, r6, lr}
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
  ep->xfer_len = len;
  ep->xfer_count = 0U;
 800065c:	2600      	movs	r6, #0
 800065e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8000662:	014d      	lsls	r5, r1, #5
  ep->xfer_buff = pBuf;  
 8000664:	1944      	adds	r4, r0, r5
  ep->is_in = 0U;
  ep->num = ep_addr & 0x7FU;
 8000666:	f884 1228 	strb.w	r1, [r4, #552]	; 0x228
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 800066a:	f505 710a 	add.w	r1, r5, #552	; 0x228
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 800066e:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;  
 8000670:	f8c4 223c 	str.w	r2, [r4, #572]	; 0x23c
  ep->xfer_len = len;
 8000674:	f8c4 3240 	str.w	r3, [r4, #576]	; 0x240
  ep->xfer_count = 0U;
 8000678:	f8c4 6244 	str.w	r6, [r4, #580]	; 0x244
  ep->is_in = 0U;
 800067c:	f884 6229 	strb.w	r6, [r4, #553]	; 0x229
    USB_EPStartXfer(hpcd->Instance , ep);
 8000680:	6800      	ldr	r0, [r0, #0]
 8000682:	f001 fa6b 	bl	8001b5c <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8000686:	4630      	mov	r0, r6
 8000688:	bd70      	pop	{r4, r5, r6, pc}

0800068a <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr: endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & 0xF].xfer_count;
 800068a:	f001 010f 	and.w	r1, r1, #15
 800068e:	eb00 1141 	add.w	r1, r0, r1, lsl #5
}
 8000692:	f8b1 0244 	ldrh.w	r0, [r1, #580]	; 0x244
 8000696:	4770      	bx	lr

08000698 <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000698:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800069c:	b570      	push	{r4, r5, r6, lr}
 800069e:	014d      	lsls	r5, r1, #5
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 80006a0:	1944      	adds	r4, r0, r5
  ep->xfer_len = len;
 80006a2:	6423      	str	r3, [r4, #64]	; 0x40
  ep->xfer_count = 0U;
 80006a4:	2600      	movs	r6, #0
  ep->is_in = 1U;
 80006a6:	2301      	movs	r3, #1
  ep->num = ep_addr & 0x7FU;
 80006a8:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80006ac:	f105 0128 	add.w	r1, r5, #40	; 0x28
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 80006b0:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;  
 80006b2:	63e2      	str	r2, [r4, #60]	; 0x3c
  ep->xfer_count = 0U;
 80006b4:	6466      	str	r6, [r4, #68]	; 0x44
  ep->is_in = 1U;
 80006b6:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    USB_EPStartXfer(hpcd->Instance , ep);
 80006ba:	6800      	ldr	r0, [r0, #0]
 80006bc:	f001 fa4e 	bl	8001b5c <USB_EPStartXfer>
  }

  return HAL_OK;
}
 80006c0:	4630      	mov	r0, r6
 80006c2:	bd70      	pop	{r4, r5, r6, pc}

080006c4 <HAL_PCD_IRQHandler>:
{ 
 80006c4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80006c8:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 80006ca:	6800      	ldr	r0, [r0, #0]
 80006cc:	f001 fa2e 	bl	8001b2c <USB_ReadInterrupts>
 80006d0:	0400      	lsls	r0, r0, #16
 80006d2:	f100 8098 	bmi.w	8000806 <HAL_PCD_IRQHandler+0x142>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 80006d6:	6820      	ldr	r0, [r4, #0]
 80006d8:	f001 fa28 	bl	8001b2c <USB_ReadInterrupts>
 80006dc:	0541      	lsls	r1, r0, #21
 80006de:	d50f      	bpl.n	8000700 <HAL_PCD_IRQHandler+0x3c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80006e0:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 80006e2:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80006e4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80006e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80006ec:	041b      	lsls	r3, r3, #16
 80006ee:	0c1b      	lsrs	r3, r3, #16
 80006f0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 80006f4:	f002 f975 	bl	80029e2 <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0U);
 80006f8:	2100      	movs	r1, #0
 80006fa:	4620      	mov	r0, r4
 80006fc:	f7ff ff55 	bl	80005aa <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 8000700:	6820      	ldr	r0, [r4, #0]
 8000702:	f001 fa13 	bl	8001b2c <USB_ReadInterrupts>
 8000706:	0447      	lsls	r7, r0, #17
 8000708:	d508      	bpl.n	800071c <HAL_PCD_IRQHandler+0x58>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 800070a:	6822      	ldr	r2, [r4, #0]
 800070c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000710:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000714:	041b      	lsls	r3, r3, #16
 8000716:	0c1b      	lsrs	r3, r3, #16
 8000718:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 800071c:	6820      	ldr	r0, [r4, #0]
 800071e:	f001 fa05 	bl	8001b2c <USB_ReadInterrupts>
 8000722:	0486      	lsls	r6, r0, #18
 8000724:	d508      	bpl.n	8000738 <HAL_PCD_IRQHandler+0x74>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 8000726:	6822      	ldr	r2, [r4, #0]
 8000728:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800072c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000730:	041b      	lsls	r3, r3, #16
 8000732:	0c1b      	lsrs	r3, r3, #16
 8000734:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 8000738:	6820      	ldr	r0, [r4, #0]
 800073a:	f001 f9f7 	bl	8001b2c <USB_ReadInterrupts>
 800073e:	04c5      	lsls	r5, r0, #19
 8000740:	d51c      	bpl.n	800077c <HAL_PCD_IRQHandler+0xb8>
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 8000742:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 8000744:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 8000746:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800074a:	f023 0304 	bic.w	r3, r3, #4
 800074e:	041b      	lsls	r3, r3, #16
 8000750:	0c1b      	lsrs	r3, r3, #16
 8000752:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_FSUSP);
 8000756:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800075a:	f023 0308 	bic.w	r3, r3, #8
 800075e:	041b      	lsls	r3, r3, #16
 8000760:	0c1b      	lsrs	r3, r3, #16
 8000762:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8000766:	f002 f95f 	bl	8002a28 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 800076a:	6822      	ldr	r2, [r4, #0]
 800076c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000770:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000774:	041b      	lsls	r3, r3, #16
 8000776:	0c1b      	lsrs	r3, r3, #16
 8000778:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 800077c:	6820      	ldr	r0, [r4, #0]
 800077e:	f001 f9d5 	bl	8001b2c <USB_ReadInterrupts>
 8000782:	0500      	lsls	r0, r0, #20
 8000784:	d51d      	bpl.n	80007c2 <HAL_PCD_IRQHandler+0xfe>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8000786:	6820      	ldr	r0, [r4, #0]
 8000788:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 800078c:	b29b      	uxth	r3, r3
 800078e:	f043 0308 	orr.w	r3, r3, #8
 8000792:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 8000796:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 800079a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800079e:	041b      	lsls	r3, r3, #16
 80007a0:	0c1b      	lsrs	r3, r3, #16
 80007a2:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 80007a6:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80007aa:	b29b      	uxth	r3, r3
 80007ac:	f043 0304 	orr.w	r3, r3, #4
 80007b0:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0U)
 80007b4:	f001 f9ba 	bl	8001b2c <USB_ReadInterrupts>
 80007b8:	04c1      	lsls	r1, r0, #19
 80007ba:	d402      	bmi.n	80007c2 <HAL_PCD_IRQHandler+0xfe>
      HAL_PCD_SuspendCallback(hpcd);
 80007bc:	4620      	mov	r0, r4
 80007be:	f002 f923 	bl	8002a08 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 80007c2:	6820      	ldr	r0, [r4, #0]
 80007c4:	f001 f9b2 	bl	8001b2c <USB_ReadInterrupts>
 80007c8:	0582      	lsls	r2, r0, #22
 80007ca:	d50b      	bpl.n	80007e4 <HAL_PCD_IRQHandler+0x120>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 80007cc:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 80007ce:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 80007d0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80007d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80007d8:	041b      	lsls	r3, r3, #16
 80007da:	0c1b      	lsrs	r3, r3, #16
 80007dc:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 80007e0:	f002 f8fb 	bl	80029da <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 80007e4:	6820      	ldr	r0, [r4, #0]
 80007e6:	f001 f9a1 	bl	8001b2c <USB_ReadInterrupts>
 80007ea:	05c3      	lsls	r3, r0, #23
 80007ec:	d508      	bpl.n	8000800 <HAL_PCD_IRQHandler+0x13c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 80007ee:	6822      	ldr	r2, [r4, #0]
 80007f0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80007f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80007f8:	041b      	lsls	r3, r3, #16
 80007fa:	0c1b      	lsrs	r3, r3, #16
 80007fc:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 8000800:	b002      	add	sp, #8
 8000802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
  PCD_EPTypeDef *ep = NULL;
  uint16_t count = 0;
  uint8_t epindex = 0;
  __IO uint16_t wIstr = 0;  
 8000806:	2300      	movs	r3, #0
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000808:	4fc8      	ldr	r7, [pc, #800]	; (8000b2c <HAL_PCD_IRQHandler+0x468>)
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800080a:	f8df 8324 	ldr.w	r8, [pc, #804]	; 8000b30 <HAL_PCD_IRQHandler+0x46c>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800080e:	f8df 9324 	ldr.w	r9, [pc, #804]	; 8000b34 <HAL_PCD_IRQHandler+0x470>
  __IO uint16_t wIstr = 0;  
 8000812:	f8ad 3004 	strh.w	r3, [sp, #4]
  __IO uint16_t wEPVal = 0;
 8000816:	f8ad 3006 	strh.w	r3, [sp, #6]
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 800081a:	6820      	ldr	r0, [r4, #0]
 800081c:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8000820:	b29b      	uxth	r3, r3
 8000822:	f8ad 3004 	strh.w	r3, [sp, #4]
 8000826:	041b      	lsls	r3, r3, #16
 8000828:	f57f af55 	bpl.w	80006d6 <HAL_PCD_IRQHandler+0x12>
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800082c:	f8bd 5004 	ldrh.w	r5, [sp, #4]
    if (epindex == 0)
 8000830:	f015 050f 	ands.w	r5, r5, #15
 8000834:	f040 80ab 	bne.w	800098e <HAL_PCD_IRQHandler+0x2ca>
      if ((wIstr & USB_ISTR_DIR) == 0)
 8000838:	f8bd 1004 	ldrh.w	r1, [sp, #4]
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800083c:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0)
 800083e:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000842:	b29b      	uxth	r3, r3
      if ((wIstr & USB_ISTR_DIR) == 0)
 8000844:	d126      	bne.n	8000894 <HAL_PCD_IRQHandler+0x1d0>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000846:	403b      	ands	r3, r7
 8000848:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800084a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800084e:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8000852:	b29b      	uxth	r3, r3
 8000854:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000858:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800085c:	f8d0 3404 	ldr.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 8000860:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000862:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000866:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8000868:	4413      	add	r3, r2
 800086a:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800086c:	4620      	mov	r0, r4
 800086e:	f002 f8ad 	bl	80029cc <HAL_PCD_DataInStageCallback>
        if((hpcd->USB_Address > 0U)&& ( ep->xfer_len == 0U))
 8000872:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000876:	2b00      	cmp	r3, #0
 8000878:	d0cf      	beq.n	800081a <HAL_PCD_IRQHandler+0x156>
 800087a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800087c:	2a00      	cmp	r2, #0
 800087e:	d1cc      	bne.n	800081a <HAL_PCD_IRQHandler+0x156>
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 8000880:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000884:	6821      	ldr	r1, [r4, #0]
 8000886:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800088a:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800088e:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 8000892:	e7c2      	b.n	800081a <HAL_PCD_IRQHandler+0x156>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8000894:	f8ad 3006 	strh.w	r3, [sp, #6]
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8000898:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800089c:	051a      	lsls	r2, r3, #20
 800089e:	d51f      	bpl.n	80008e0 <HAL_PCD_IRQHandler+0x21c>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80008a0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80008a4:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 80008a8:	b29b      	uxth	r3, r3
 80008aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80008ae:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80008b2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 80008b6:	f8b4 222c 	ldrh.w	r2, [r4, #556]	; 0x22c
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80008ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80008be:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 80008c2:	f204 412c 	addw	r1, r4, #1068	; 0x42c
 80008c6:	f001 fa49 	bl	8001d5c <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 80008ca:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 80008cc:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 80008ce:	8813      	ldrh	r3, [r2, #0]
 80008d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80008d4:	051b      	lsls	r3, r3, #20
 80008d6:	0d1b      	lsrs	r3, r3, #20
 80008d8:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 80008da:	f002 f869 	bl	80029b0 <HAL_PCD_SetupStageCallback>
 80008de:	e79c      	b.n	800081a <HAL_PCD_IRQHandler+0x156>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80008e0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80008e4:	041b      	lsls	r3, r3, #16
 80008e6:	d598      	bpl.n	800081a <HAL_PCD_IRQHandler+0x156>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80008e8:	8803      	ldrh	r3, [r0, #0]
 80008ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80008ee:	051b      	lsls	r3, r3, #20
 80008f0:	0d1b      	lsrs	r3, r3, #20
 80008f2:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80008f4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80008f8:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 80008fc:	b29b      	uxth	r3, r3
 80008fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000902:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000906:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800090a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800090e:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
          if (ep->xfer_count != 0U)
 8000912:	b163      	cbz	r3, 800092e <HAL_PCD_IRQHandler+0x26a>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8000914:	f8b4 222c 	ldrh.w	r2, [r4, #556]	; 0x22c
 8000918:	f8d4 123c 	ldr.w	r1, [r4, #572]	; 0x23c
 800091c:	f001 fa1e 	bl	8001d5c <USB_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 8000920:	f8d4 323c 	ldr.w	r3, [r4, #572]	; 0x23c
 8000924:	f8d4 2244 	ldr.w	r2, [r4, #580]	; 0x244
 8000928:	4413      	add	r3, r2
 800092a:	f8c4 323c 	str.w	r3, [r4, #572]	; 0x23c
           HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800092e:	2100      	movs	r1, #0
 8000930:	4620      	mov	r0, r4
 8000932:	f002 f843 	bl	80029bc <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000936:	6822      	ldr	r2, [r4, #0]
 8000938:	f8d4 5238 	ldr.w	r5, [r4, #568]	; 0x238
 800093c:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8000940:	2d3e      	cmp	r5, #62	; 0x3e
 8000942:	b289      	uxth	r1, r1
 8000944:	f101 0106 	add.w	r1, r1, #6
 8000948:	f502 6080 	add.w	r0, r2, #1024	; 0x400
 800094c:	d917      	bls.n	800097e <HAL_PCD_IRQHandler+0x2ba>
 800094e:	f3c5 134f 	ubfx	r3, r5, #5, #16
 8000952:	06ee      	lsls	r6, r5, #27
 8000954:	bf04      	itt	eq
 8000956:	f103 33ff 	addeq.w	r3, r3, #4294967295	; 0xffffffff
 800095a:	b29b      	uxtheq	r3, r3
 800095c:	ea49 2383 	orr.w	r3, r9, r3, lsl #10
 8000960:	b29b      	uxth	r3, r3
 8000962:	f840 3011 	str.w	r3, [r0, r1, lsl #1]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8000966:	8813      	ldrh	r3, [r2, #0]
 8000968:	b29b      	uxth	r3, r3
 800096a:	ea03 0308 	and.w	r3, r3, r8
 800096e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8000972:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000976:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800097a:	8013      	strh	r3, [r2, #0]
 800097c:	e74d      	b.n	800081a <HAL_PCD_IRQHandler+0x156>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800097e:	f3c5 034f 	ubfx	r3, r5, #1, #16
 8000982:	07ed      	lsls	r5, r5, #31
 8000984:	bf44      	itt	mi
 8000986:	3301      	addmi	r3, #1
 8000988:	b29b      	uxthmi	r3, r3
 800098a:	029b      	lsls	r3, r3, #10
 800098c:	e7e8      	b.n	8000960 <HAL_PCD_IRQHandler+0x29c>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800098e:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 8000992:	b29b      	uxth	r3, r3
 8000994:	f8ad 3006 	strh.w	r3, [sp, #6]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000998:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800099c:	0419      	lsls	r1, r3, #16
 800099e:	d53f      	bpl.n	8000a20 <HAL_PCD_IRQHandler+0x35c>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80009a0:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 80009a4:	ea4f 1a45 	mov.w	sl, r5, lsl #5
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80009a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80009ac:	051b      	lsls	r3, r3, #20
 80009ae:	0d1b      	lsrs	r3, r3, #20
 80009b0:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 80009b4:	eb04 010a 	add.w	r1, r4, sl
 80009b8:	f891 3232 	ldrb.w	r3, [r1, #562]	; 0x232
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d174      	bne.n	8000aaa <HAL_PCD_IRQHandler+0x3e6>
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80009c0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80009c4:	f891 2228 	ldrb.w	r2, [r1, #552]	; 0x228
 80009c8:	b29b      	uxth	r3, r3
 80009ca:	3306      	adds	r3, #6
 80009cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80009d0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80009d4:	f8d3 6400 	ldr.w	r6, [r3, #1024]	; 0x400
 80009d8:	f3c6 0609 	ubfx	r6, r6, #0, #10
          if (count != 0U)
 80009dc:	b136      	cbz	r6, 80009ec <HAL_PCD_IRQHandler+0x328>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80009de:	f8b1 222c 	ldrh.w	r2, [r1, #556]	; 0x22c
 80009e2:	4633      	mov	r3, r6
 80009e4:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 80009e8:	f001 f9b8 	bl	8001d5c <USB_ReadPMA>
 80009ec:	eb04 010a 	add.w	r1, r4, sl
        ep->xfer_count+=count;
 80009f0:	f8d1 3244 	ldr.w	r3, [r1, #580]	; 0x244
        ep->xfer_buff+=count;
 80009f4:	f8d1 223c 	ldr.w	r2, [r1, #572]	; 0x23c
        ep->xfer_count+=count;
 80009f8:	4433      	add	r3, r6
 80009fa:	f8c1 3244 	str.w	r3, [r1, #580]	; 0x244
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80009fe:	f8d1 3240 	ldr.w	r3, [r1, #576]	; 0x240
        ep->xfer_buff+=count;
 8000a02:	4432      	add	r2, r6
 8000a04:	f8c1 223c 	str.w	r2, [r1, #572]	; 0x23c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8000a08:	b123      	cbz	r3, 8000a14 <HAL_PCD_IRQHandler+0x350>
 8000a0a:	f8d1 0238 	ldr.w	r0, [r1, #568]	; 0x238
 8000a0e:	4286      	cmp	r6, r0
 8000a10:	f080 8086 	bcs.w	8000b20 <HAL_PCD_IRQHandler+0x45c>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8000a14:	44a2      	add	sl, r4
 8000a16:	f89a 1228 	ldrb.w	r1, [sl, #552]	; 0x228
 8000a1a:	4620      	mov	r0, r4
 8000a1c:	f001 ffce 	bl	80029bc <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8000a20:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000a24:	061a      	lsls	r2, r3, #24
 8000a26:	f57f aef8 	bpl.w	800081a <HAL_PCD_IRQHandler+0x156>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000a2a:	6820      	ldr	r0, [r4, #0]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0U)
 8000a2c:	016e      	lsls	r6, r5, #5
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000a2e:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8000a32:	19a1      	adds	r1, r4, r6
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000a34:	b29b      	uxth	r3, r3
 8000a36:	403b      	ands	r3, r7
 8000a38:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8000a3c:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 8000a40:	3502      	adds	r5, #2
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d178      	bne.n	8000b38 <HAL_PCD_IRQHandler+0x474>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000a46:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000a4a:	f891 2028 	ldrb.w	r2, [r1, #40]	; 0x28
 8000a4e:	b29b      	uxth	r3, r3
 8000a50:	3302      	adds	r3, #2
 8000a52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000a56:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000a5a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8000a5e:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8000a62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000a66:	606b      	str	r3, [r5, #4]
          if (ep->xfer_count != 0U)
 8000a68:	b11b      	cbz	r3, 8000a72 <HAL_PCD_IRQHandler+0x3ae>
          {
            USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8000a6a:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
 8000a6c:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8000a6e:	f001 f863 	bl	8001b38 <USB_WritePMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000a72:	6822      	ldr	r2, [r4, #0]
 8000a74:	4426      	add	r6, r4
 8000a76:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8000a7a:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 8000a7e:	b29b      	uxth	r3, r3
 8000a80:	3302      	adds	r3, #2
 8000a82:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8000a86:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8000a8a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        ep->xfer_buff+=ep->xfer_count;
 8000a8e:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000a90:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8000a94:	6472      	str	r2, [r6, #68]	; 0x44
        ep->xfer_buff+=ep->xfer_count;
 8000a96:	441a      	add	r2, r3
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8000a98:	6c33      	ldr	r3, [r6, #64]	; 0x40
        ep->xfer_buff+=ep->xfer_count;
 8000a9a:	63f2      	str	r2, [r6, #60]	; 0x3c
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000a9c:	4620      	mov	r0, r4
        if (ep->xfer_len == 0U)
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	f040 8085 	bne.w	8000bae <HAL_PCD_IRQHandler+0x4ea>
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000aa4:	f001 ff92 	bl	80029cc <HAL_PCD_DataInStageCallback>
 8000aa8:	e6b7      	b.n	800081a <HAL_PCD_IRQHandler+0x156>
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8000aaa:	f891 3228 	ldrb.w	r3, [r1, #552]	; 0x228
 8000aae:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8000ab2:	00db      	lsls	r3, r3, #3
 8000ab4:	f412 4f80 	tst.w	r2, #16384	; 0x4000
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000ab8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8000abc:	b292      	uxth	r2, r2
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8000abe:	d021      	beq.n	8000b04 <HAL_PCD_IRQHandler+0x440>
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000ac0:	3202      	adds	r2, #2
 8000ac2:	4413      	add	r3, r2
 8000ac4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000ac8:	f8d3 6400 	ldr.w	r6, [r3, #1024]	; 0x400
 8000acc:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0U)
 8000ad0:	b136      	cbz	r6, 8000ae0 <HAL_PCD_IRQHandler+0x41c>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8000ad2:	4633      	mov	r3, r6
 8000ad4:	f8b1 222e 	ldrh.w	r2, [r1, #558]	; 0x22e
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000ad8:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 8000adc:	f001 f93e 	bl	8001d5c <USB_ReadPMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 8000ae0:	eb04 030a 	add.w	r3, r4, sl
 8000ae4:	f893 1228 	ldrb.w	r1, [r3, #552]	; 0x228
 8000ae8:	6822      	ldr	r2, [r4, #0]
 8000aea:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8000aee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000af2:	051b      	lsls	r3, r3, #20
 8000af4:	0d1b      	lsrs	r3, r3, #20
 8000af6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000afa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000afe:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8000b02:	e773      	b.n	80009ec <HAL_PCD_IRQHandler+0x328>
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8000b04:	3206      	adds	r2, #6
 8000b06:	4413      	add	r3, r2
 8000b08:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000b0c:	f8d3 6400 	ldr.w	r6, [r3, #1024]	; 0x400
 8000b10:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0U)
 8000b14:	2e00      	cmp	r6, #0
 8000b16:	d0e3      	beq.n	8000ae0 <HAL_PCD_IRQHandler+0x41c>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000b18:	4633      	mov	r3, r6
 8000b1a:	f8b1 2230 	ldrh.w	r2, [r1, #560]	; 0x230
 8000b1e:	e7db      	b.n	8000ad8 <HAL_PCD_IRQHandler+0x414>
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8000b20:	f891 1228 	ldrb.w	r1, [r1, #552]	; 0x228
 8000b24:	4620      	mov	r0, r4
 8000b26:	f7ff fd98 	bl	800065a <HAL_PCD_EP_Receive>
 8000b2a:	e779      	b.n	8000a20 <HAL_PCD_IRQHandler+0x35c>
 8000b2c:	ffff8f0f 	.word	0xffff8f0f
 8000b30:	ffffbf8f 	.word	0xffffbf8f
 8000b34:	ffff8000 	.word	0xffff8000
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8000b38:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8000b3c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8000b40:	00db      	lsls	r3, r3, #3
 8000b42:	f012 0f40 	tst.w	r2, #64	; 0x40
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000b46:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8000b4a:	b292      	uxth	r2, r2
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8000b4c:	d020      	beq.n	8000b90 <HAL_PCD_IRQHandler+0x4cc>
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000b4e:	3202      	adds	r2, #2
 8000b50:	4413      	add	r3, r2
 8000b52:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000b56:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8000b5a:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8000b5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000b62:	606b      	str	r3, [r5, #4]
            if (ep->xfer_count != 0U)
 8000b64:	b11b      	cbz	r3, 8000b6e <HAL_PCD_IRQHandler+0x4aa>
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 8000b66:	8dca      	ldrh	r2, [r1, #46]	; 0x2e
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8000b68:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8000b6a:	f000 ffe5 	bl	8001b38 <USB_WritePMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 8000b6e:	19a3      	adds	r3, r4, r6
 8000b70:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 8000b74:	6822      	ldr	r2, [r4, #0]
 8000b76:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8000b7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000b7e:	051b      	lsls	r3, r3, #20
 8000b80:	0d1b      	lsrs	r3, r3, #20
 8000b82:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b8a:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8000b8e:	e770      	b.n	8000a72 <HAL_PCD_IRQHandler+0x3ae>
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8000b90:	3206      	adds	r2, #6
 8000b92:	4413      	add	r3, r2
 8000b94:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000b98:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8000b9c:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8000ba0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000ba4:	606b      	str	r3, [r5, #4]
            if (ep->xfer_count != 0U)
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d0e1      	beq.n	8000b6e <HAL_PCD_IRQHandler+0x4aa>
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8000baa:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
 8000bac:	e7dc      	b.n	8000b68 <HAL_PCD_IRQHandler+0x4a4>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8000bae:	f7ff fd73 	bl	8000698 <HAL_PCD_EP_Transmit>
 8000bb2:	e632      	b.n	800081a <HAL_PCD_IRQHandler+0x156>

08000bb4 <HAL_PCD_EP_SetStall>:
  ep->is_stall = 1U;
 8000bb4:	2201      	movs	r2, #1
{
 8000bb6:	b538      	push	{r3, r4, r5, lr}
  if ((0x80U & ep_addr) == 0x80U)
 8000bb8:	b24b      	sxtb	r3, r1
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	f001 057f 	and.w	r5, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000bc0:	bfb5      	itete	lt
 8000bc2:	eb00 1145 	addlt.w	r1, r0, r5, lsl #5
    ep = &hpcd->OUT_ep[ep_addr];
 8000bc6:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000bca:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8000bcc:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8000bd0:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7FU;
 8000bd2:	b2ed      	uxtb	r5, r5
  ep->is_stall = 1U;
 8000bd4:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7FU;
 8000bd6:	700d      	strb	r5, [r1, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8000bd8:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd);
 8000bda:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{
 8000bde:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d00e      	beq.n	8000c02 <HAL_PCD_EP_SetStall+0x4e>
 8000be4:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428
  USB_EPSetStall(hpcd->Instance , ep);
 8000be8:	6800      	ldr	r0, [r0, #0]
 8000bea:	f000 ff21 	bl	8001a30 <USB_EPSetStall>
  if((ep_addr & 0x7FU) == 0U)
 8000bee:	b925      	cbnz	r5, 8000bfa <HAL_PCD_EP_SetStall+0x46>
    USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8000bf0:	f204 412c 	addw	r1, r4, #1068	; 0x42c
 8000bf4:	6820      	ldr	r0, [r4, #0]
 8000bf6:	f000 ff9d 	bl	8001b34 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd); 
 8000bfa:	2000      	movs	r0, #0
 8000bfc:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 8000c00:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8000c02:	2002      	movs	r0, #2
}
 8000c04:	bd38      	pop	{r3, r4, r5, pc}

08000c06 <HAL_PCD_EP_ClrStall>:
{
 8000c06:	b538      	push	{r3, r4, r5, lr}
  ep->is_stall = 0U;
 8000c08:	2400      	movs	r4, #0
  if ((0x80U & ep_addr) == 0x80U)
 8000c0a:	b24b      	sxtb	r3, r1
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	f001 027f 	and.w	r2, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000c12:	bfb5      	itete	lt
 8000c14:	eb00 1142 	addlt.w	r1, r0, r2, lsl #5
    ep = &hpcd->OUT_ep[ep_addr];
 8000c18:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000c1c:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8000c1e:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8000c22:	0fdb      	lsrs	r3, r3, #31
  ep->is_stall = 0U;
 8000c24:	708c      	strb	r4, [r1, #2]
  ep->num   = ep_addr & 0x7FU;
 8000c26:	700a      	strb	r2, [r1, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8000c28:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 8000c2a:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{
 8000c2e:	4605      	mov	r5, r0
  __HAL_LOCK(hpcd); 
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	d009      	beq.n	8000c48 <HAL_PCD_EP_ClrStall+0x42>
 8000c34:	2301      	movs	r3, #1
 8000c36:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
  USB_EPClearStall(hpcd->Instance , ep);
 8000c3a:	6800      	ldr	r0, [r0, #0]
 8000c3c:	f000 ff2a 	bl	8001a94 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 8000c40:	f885 4428 	strb.w	r4, [r5, #1064]	; 0x428
  return HAL_OK;
 8000c44:	4620      	mov	r0, r4
 8000c46:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd); 
 8000c48:	2002      	movs	r0, #2
}
 8000c4a:	bd38      	pop	{r3, r4, r5, pc}

08000c4c <HAL_PCDEx_PMAConfig>:

{
  PCD_EPTypeDef *ep = NULL;
  
  /* initialize ep structure*/
  if ((ep_addr & 0x80U) == 0x80U)
 8000c4c:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000c50:	bf1b      	ittet	ne
 8000c52:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8000c56:	eb00 1041 	addne.w	r0, r0, r1, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000c5a:	eb00 1041 	addeq.w	r0, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000c5e:	3028      	addne	r0, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8000c60:	bf08      	it	eq
 8000c62:	f500 700a 	addeq.w	r0, r0, #552	; 0x228
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8000c66:	b91a      	cbnz	r2, 8000c70 <HAL_PCDEx_PMAConfig+0x24>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0U;
 8000c68:	7282      	strb	r2, [r0, #10]
    /*Configure te PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 8000c6a:	8083      	strh	r3, [r0, #4]
    ep->pmaaddr0 =  pmaadress & 0x0000FFFFU;
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
  }
  
  return HAL_OK; 
}
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	4770      	bx	lr
    ep->doublebuffer = 1U;
 8000c70:	2201      	movs	r2, #1
    ep->pmaaddr0 =  pmaadress & 0x0000FFFFU;
 8000c72:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 8000c74:	0c1b      	lsrs	r3, r3, #16
    ep->doublebuffer = 1U;
 8000c76:	7282      	strb	r2, [r0, #10]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 8000c78:	8103      	strh	r3, [r0, #8]
 8000c7a:	e7f7      	b.n	8000c6c <HAL_PCDEx_PMAConfig+0x20>

08000c7c <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c7c:	6803      	ldr	r3, [r0, #0]
{
 8000c7e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c82:	07db      	lsls	r3, r3, #31
{
 8000c84:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c86:	d410      	bmi.n	8000caa <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c88:	682b      	ldr	r3, [r5, #0]
 8000c8a:	079f      	lsls	r7, r3, #30
 8000c8c:	d45e      	bmi.n	8000d4c <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c8e:	682b      	ldr	r3, [r5, #0]
 8000c90:	0719      	lsls	r1, r3, #28
 8000c92:	f100 8095 	bmi.w	8000dc0 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c96:	682b      	ldr	r3, [r5, #0]
 8000c98:	075a      	lsls	r2, r3, #29
 8000c9a:	f100 80bf 	bmi.w	8000e1c <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000c9e:	69ea      	ldr	r2, [r5, #28]
 8000ca0:	2a00      	cmp	r2, #0
 8000ca2:	f040 812d 	bne.w	8000f00 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	e014      	b.n	8000cd4 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000caa:	4c90      	ldr	r4, [pc, #576]	; (8000eec <HAL_RCC_OscConfig+0x270>)
 8000cac:	6863      	ldr	r3, [r4, #4]
 8000cae:	f003 030c 	and.w	r3, r3, #12
 8000cb2:	2b04      	cmp	r3, #4
 8000cb4:	d007      	beq.n	8000cc6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cb6:	6863      	ldr	r3, [r4, #4]
 8000cb8:	f003 030c 	and.w	r3, r3, #12
 8000cbc:	2b08      	cmp	r3, #8
 8000cbe:	d10c      	bne.n	8000cda <HAL_RCC_OscConfig+0x5e>
 8000cc0:	6863      	ldr	r3, [r4, #4]
 8000cc2:	03de      	lsls	r6, r3, #15
 8000cc4:	d509      	bpl.n	8000cda <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cc6:	6823      	ldr	r3, [r4, #0]
 8000cc8:	039c      	lsls	r4, r3, #14
 8000cca:	d5dd      	bpl.n	8000c88 <HAL_RCC_OscConfig+0xc>
 8000ccc:	686b      	ldr	r3, [r5, #4]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d1da      	bne.n	8000c88 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000cd2:	2001      	movs	r0, #1
}
 8000cd4:	b002      	add	sp, #8
 8000cd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cda:	686b      	ldr	r3, [r5, #4]
 8000cdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ce0:	d110      	bne.n	8000d04 <HAL_RCC_OscConfig+0x88>
 8000ce2:	6823      	ldr	r3, [r4, #0]
 8000ce4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ce8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000cea:	f7ff fa79 	bl	80001e0 <HAL_GetTick>
 8000cee:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cf0:	6823      	ldr	r3, [r4, #0]
 8000cf2:	0398      	lsls	r0, r3, #14
 8000cf4:	d4c8      	bmi.n	8000c88 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cf6:	f7ff fa73 	bl	80001e0 <HAL_GetTick>
 8000cfa:	1b80      	subs	r0, r0, r6
 8000cfc:	2864      	cmp	r0, #100	; 0x64
 8000cfe:	d9f7      	bls.n	8000cf0 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000d00:	2003      	movs	r0, #3
 8000d02:	e7e7      	b.n	8000cd4 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d04:	b99b      	cbnz	r3, 8000d2e <HAL_RCC_OscConfig+0xb2>
 8000d06:	6823      	ldr	r3, [r4, #0]
 8000d08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d0c:	6023      	str	r3, [r4, #0]
 8000d0e:	6823      	ldr	r3, [r4, #0]
 8000d10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d14:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000d16:	f7ff fa63 	bl	80001e0 <HAL_GetTick>
 8000d1a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d1c:	6823      	ldr	r3, [r4, #0]
 8000d1e:	0399      	lsls	r1, r3, #14
 8000d20:	d5b2      	bpl.n	8000c88 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d22:	f7ff fa5d 	bl	80001e0 <HAL_GetTick>
 8000d26:	1b80      	subs	r0, r0, r6
 8000d28:	2864      	cmp	r0, #100	; 0x64
 8000d2a:	d9f7      	bls.n	8000d1c <HAL_RCC_OscConfig+0xa0>
 8000d2c:	e7e8      	b.n	8000d00 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d2e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d32:	6823      	ldr	r3, [r4, #0]
 8000d34:	d103      	bne.n	8000d3e <HAL_RCC_OscConfig+0xc2>
 8000d36:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d3a:	6023      	str	r3, [r4, #0]
 8000d3c:	e7d1      	b.n	8000ce2 <HAL_RCC_OscConfig+0x66>
 8000d3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d42:	6023      	str	r3, [r4, #0]
 8000d44:	6823      	ldr	r3, [r4, #0]
 8000d46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d4a:	e7cd      	b.n	8000ce8 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000d4c:	4c67      	ldr	r4, [pc, #412]	; (8000eec <HAL_RCC_OscConfig+0x270>)
 8000d4e:	6863      	ldr	r3, [r4, #4]
 8000d50:	f013 0f0c 	tst.w	r3, #12
 8000d54:	d007      	beq.n	8000d66 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d56:	6863      	ldr	r3, [r4, #4]
 8000d58:	f003 030c 	and.w	r3, r3, #12
 8000d5c:	2b08      	cmp	r3, #8
 8000d5e:	d110      	bne.n	8000d82 <HAL_RCC_OscConfig+0x106>
 8000d60:	6863      	ldr	r3, [r4, #4]
 8000d62:	03da      	lsls	r2, r3, #15
 8000d64:	d40d      	bmi.n	8000d82 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d66:	6823      	ldr	r3, [r4, #0]
 8000d68:	079b      	lsls	r3, r3, #30
 8000d6a:	d502      	bpl.n	8000d72 <HAL_RCC_OscConfig+0xf6>
 8000d6c:	692b      	ldr	r3, [r5, #16]
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d1af      	bne.n	8000cd2 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d72:	6823      	ldr	r3, [r4, #0]
 8000d74:	696a      	ldr	r2, [r5, #20]
 8000d76:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000d7a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000d7e:	6023      	str	r3, [r4, #0]
 8000d80:	e785      	b.n	8000c8e <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d82:	692a      	ldr	r2, [r5, #16]
 8000d84:	4b5a      	ldr	r3, [pc, #360]	; (8000ef0 <HAL_RCC_OscConfig+0x274>)
 8000d86:	b16a      	cbz	r2, 8000da4 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8000d88:	2201      	movs	r2, #1
 8000d8a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000d8c:	f7ff fa28 	bl	80001e0 <HAL_GetTick>
 8000d90:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d92:	6823      	ldr	r3, [r4, #0]
 8000d94:	079f      	lsls	r7, r3, #30
 8000d96:	d4ec      	bmi.n	8000d72 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d98:	f7ff fa22 	bl	80001e0 <HAL_GetTick>
 8000d9c:	1b80      	subs	r0, r0, r6
 8000d9e:	2802      	cmp	r0, #2
 8000da0:	d9f7      	bls.n	8000d92 <HAL_RCC_OscConfig+0x116>
 8000da2:	e7ad      	b.n	8000d00 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000da4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000da6:	f7ff fa1b 	bl	80001e0 <HAL_GetTick>
 8000daa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dac:	6823      	ldr	r3, [r4, #0]
 8000dae:	0798      	lsls	r0, r3, #30
 8000db0:	f57f af6d 	bpl.w	8000c8e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000db4:	f7ff fa14 	bl	80001e0 <HAL_GetTick>
 8000db8:	1b80      	subs	r0, r0, r6
 8000dba:	2802      	cmp	r0, #2
 8000dbc:	d9f6      	bls.n	8000dac <HAL_RCC_OscConfig+0x130>
 8000dbe:	e79f      	b.n	8000d00 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000dc0:	69aa      	ldr	r2, [r5, #24]
 8000dc2:	4c4a      	ldr	r4, [pc, #296]	; (8000eec <HAL_RCC_OscConfig+0x270>)
 8000dc4:	4b4b      	ldr	r3, [pc, #300]	; (8000ef4 <HAL_RCC_OscConfig+0x278>)
 8000dc6:	b1da      	cbz	r2, 8000e00 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8000dc8:	2201      	movs	r2, #1
 8000dca:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000dcc:	f7ff fa08 	bl	80001e0 <HAL_GetTick>
 8000dd0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000dd4:	079b      	lsls	r3, r3, #30
 8000dd6:	d50d      	bpl.n	8000df4 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000dd8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000ddc:	4b46      	ldr	r3, [pc, #280]	; (8000ef8 <HAL_RCC_OscConfig+0x27c>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	fbb3 f3f2 	udiv	r3, r3, r2
 8000de4:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000de6:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000de8:	9b01      	ldr	r3, [sp, #4]
 8000dea:	1e5a      	subs	r2, r3, #1
 8000dec:	9201      	str	r2, [sp, #4]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d1f9      	bne.n	8000de6 <HAL_RCC_OscConfig+0x16a>
 8000df2:	e750      	b.n	8000c96 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000df4:	f7ff f9f4 	bl	80001e0 <HAL_GetTick>
 8000df8:	1b80      	subs	r0, r0, r6
 8000dfa:	2802      	cmp	r0, #2
 8000dfc:	d9e9      	bls.n	8000dd2 <HAL_RCC_OscConfig+0x156>
 8000dfe:	e77f      	b.n	8000d00 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000e00:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000e02:	f7ff f9ed 	bl	80001e0 <HAL_GetTick>
 8000e06:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000e0a:	079f      	lsls	r7, r3, #30
 8000e0c:	f57f af43 	bpl.w	8000c96 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e10:	f7ff f9e6 	bl	80001e0 <HAL_GetTick>
 8000e14:	1b80      	subs	r0, r0, r6
 8000e16:	2802      	cmp	r0, #2
 8000e18:	d9f6      	bls.n	8000e08 <HAL_RCC_OscConfig+0x18c>
 8000e1a:	e771      	b.n	8000d00 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e1c:	4c33      	ldr	r4, [pc, #204]	; (8000eec <HAL_RCC_OscConfig+0x270>)
 8000e1e:	69e3      	ldr	r3, [r4, #28]
 8000e20:	00d8      	lsls	r0, r3, #3
 8000e22:	d424      	bmi.n	8000e6e <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8000e24:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e26:	69e3      	ldr	r3, [r4, #28]
 8000e28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e2c:	61e3      	str	r3, [r4, #28]
 8000e2e:	69e3      	ldr	r3, [r4, #28]
 8000e30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e34:	9300      	str	r3, [sp, #0]
 8000e36:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e38:	4e30      	ldr	r6, [pc, #192]	; (8000efc <HAL_RCC_OscConfig+0x280>)
 8000e3a:	6833      	ldr	r3, [r6, #0]
 8000e3c:	05d9      	lsls	r1, r3, #23
 8000e3e:	d518      	bpl.n	8000e72 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e40:	68eb      	ldr	r3, [r5, #12]
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d126      	bne.n	8000e94 <HAL_RCC_OscConfig+0x218>
 8000e46:	6a23      	ldr	r3, [r4, #32]
 8000e48:	f043 0301 	orr.w	r3, r3, #1
 8000e4c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000e4e:	f7ff f9c7 	bl	80001e0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e52:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000e56:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e58:	6a23      	ldr	r3, [r4, #32]
 8000e5a:	079b      	lsls	r3, r3, #30
 8000e5c:	d53f      	bpl.n	8000ede <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8000e5e:	2f00      	cmp	r7, #0
 8000e60:	f43f af1d 	beq.w	8000c9e <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e64:	69e3      	ldr	r3, [r4, #28]
 8000e66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e6a:	61e3      	str	r3, [r4, #28]
 8000e6c:	e717      	b.n	8000c9e <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8000e6e:	2700      	movs	r7, #0
 8000e70:	e7e2      	b.n	8000e38 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e72:	6833      	ldr	r3, [r6, #0]
 8000e74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e78:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000e7a:	f7ff f9b1 	bl	80001e0 <HAL_GetTick>
 8000e7e:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e80:	6833      	ldr	r3, [r6, #0]
 8000e82:	05da      	lsls	r2, r3, #23
 8000e84:	d4dc      	bmi.n	8000e40 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e86:	f7ff f9ab 	bl	80001e0 <HAL_GetTick>
 8000e8a:	eba0 0008 	sub.w	r0, r0, r8
 8000e8e:	2864      	cmp	r0, #100	; 0x64
 8000e90:	d9f6      	bls.n	8000e80 <HAL_RCC_OscConfig+0x204>
 8000e92:	e735      	b.n	8000d00 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e94:	b9ab      	cbnz	r3, 8000ec2 <HAL_RCC_OscConfig+0x246>
 8000e96:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e98:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e9c:	f023 0301 	bic.w	r3, r3, #1
 8000ea0:	6223      	str	r3, [r4, #32]
 8000ea2:	6a23      	ldr	r3, [r4, #32]
 8000ea4:	f023 0304 	bic.w	r3, r3, #4
 8000ea8:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000eaa:	f7ff f999 	bl	80001e0 <HAL_GetTick>
 8000eae:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000eb0:	6a23      	ldr	r3, [r4, #32]
 8000eb2:	0798      	lsls	r0, r3, #30
 8000eb4:	d5d3      	bpl.n	8000e5e <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000eb6:	f7ff f993 	bl	80001e0 <HAL_GetTick>
 8000eba:	1b80      	subs	r0, r0, r6
 8000ebc:	4540      	cmp	r0, r8
 8000ebe:	d9f7      	bls.n	8000eb0 <HAL_RCC_OscConfig+0x234>
 8000ec0:	e71e      	b.n	8000d00 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ec2:	2b05      	cmp	r3, #5
 8000ec4:	6a23      	ldr	r3, [r4, #32]
 8000ec6:	d103      	bne.n	8000ed0 <HAL_RCC_OscConfig+0x254>
 8000ec8:	f043 0304 	orr.w	r3, r3, #4
 8000ecc:	6223      	str	r3, [r4, #32]
 8000ece:	e7ba      	b.n	8000e46 <HAL_RCC_OscConfig+0x1ca>
 8000ed0:	f023 0301 	bic.w	r3, r3, #1
 8000ed4:	6223      	str	r3, [r4, #32]
 8000ed6:	6a23      	ldr	r3, [r4, #32]
 8000ed8:	f023 0304 	bic.w	r3, r3, #4
 8000edc:	e7b6      	b.n	8000e4c <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ede:	f7ff f97f 	bl	80001e0 <HAL_GetTick>
 8000ee2:	eba0 0008 	sub.w	r0, r0, r8
 8000ee6:	42b0      	cmp	r0, r6
 8000ee8:	d9b6      	bls.n	8000e58 <HAL_RCC_OscConfig+0x1dc>
 8000eea:	e709      	b.n	8000d00 <HAL_RCC_OscConfig+0x84>
 8000eec:	40021000 	.word	0x40021000
 8000ef0:	42420000 	.word	0x42420000
 8000ef4:	42420480 	.word	0x42420480
 8000ef8:	20000118 	.word	0x20000118
 8000efc:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f00:	4c22      	ldr	r4, [pc, #136]	; (8000f8c <HAL_RCC_OscConfig+0x310>)
 8000f02:	6863      	ldr	r3, [r4, #4]
 8000f04:	f003 030c 	and.w	r3, r3, #12
 8000f08:	2b08      	cmp	r3, #8
 8000f0a:	f43f aee2 	beq.w	8000cd2 <HAL_RCC_OscConfig+0x56>
 8000f0e:	2300      	movs	r3, #0
 8000f10:	4e1f      	ldr	r6, [pc, #124]	; (8000f90 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f12:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000f14:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f16:	d12b      	bne.n	8000f70 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8000f18:	f7ff f962 	bl	80001e0 <HAL_GetTick>
 8000f1c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f1e:	6823      	ldr	r3, [r4, #0]
 8000f20:	0199      	lsls	r1, r3, #6
 8000f22:	d41f      	bmi.n	8000f64 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000f24:	6a2b      	ldr	r3, [r5, #32]
 8000f26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f2a:	d105      	bne.n	8000f38 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f2c:	6862      	ldr	r2, [r4, #4]
 8000f2e:	68a9      	ldr	r1, [r5, #8]
 8000f30:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000f34:	430a      	orrs	r2, r1
 8000f36:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f38:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000f3a:	6862      	ldr	r2, [r4, #4]
 8000f3c:	430b      	orrs	r3, r1
 8000f3e:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000f42:	4313      	orrs	r3, r2
 8000f44:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000f46:	2301      	movs	r3, #1
 8000f48:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000f4a:	f7ff f949 	bl	80001e0 <HAL_GetTick>
 8000f4e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f50:	6823      	ldr	r3, [r4, #0]
 8000f52:	019a      	lsls	r2, r3, #6
 8000f54:	f53f aea7 	bmi.w	8000ca6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f58:	f7ff f942 	bl	80001e0 <HAL_GetTick>
 8000f5c:	1b40      	subs	r0, r0, r5
 8000f5e:	2802      	cmp	r0, #2
 8000f60:	d9f6      	bls.n	8000f50 <HAL_RCC_OscConfig+0x2d4>
 8000f62:	e6cd      	b.n	8000d00 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f64:	f7ff f93c 	bl	80001e0 <HAL_GetTick>
 8000f68:	1bc0      	subs	r0, r0, r7
 8000f6a:	2802      	cmp	r0, #2
 8000f6c:	d9d7      	bls.n	8000f1e <HAL_RCC_OscConfig+0x2a2>
 8000f6e:	e6c7      	b.n	8000d00 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000f70:	f7ff f936 	bl	80001e0 <HAL_GetTick>
 8000f74:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f76:	6823      	ldr	r3, [r4, #0]
 8000f78:	019b      	lsls	r3, r3, #6
 8000f7a:	f57f ae94 	bpl.w	8000ca6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f7e:	f7ff f92f 	bl	80001e0 <HAL_GetTick>
 8000f82:	1b40      	subs	r0, r0, r5
 8000f84:	2802      	cmp	r0, #2
 8000f86:	d9f6      	bls.n	8000f76 <HAL_RCC_OscConfig+0x2fa>
 8000f88:	e6ba      	b.n	8000d00 <HAL_RCC_OscConfig+0x84>
 8000f8a:	bf00      	nop
 8000f8c:	40021000 	.word	0x40021000
 8000f90:	42420060 	.word	0x42420060

08000f94 <HAL_RCC_GetSysClockFreq>:
{
 8000f94:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000f96:	4b19      	ldr	r3, [pc, #100]	; (8000ffc <HAL_RCC_GetSysClockFreq+0x68>)
{
 8000f98:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000f9a:	ac02      	add	r4, sp, #8
 8000f9c:	f103 0510 	add.w	r5, r3, #16
 8000fa0:	4622      	mov	r2, r4
 8000fa2:	6818      	ldr	r0, [r3, #0]
 8000fa4:	6859      	ldr	r1, [r3, #4]
 8000fa6:	3308      	adds	r3, #8
 8000fa8:	c203      	stmia	r2!, {r0, r1}
 8000faa:	42ab      	cmp	r3, r5
 8000fac:	4614      	mov	r4, r2
 8000fae:	d1f7      	bne.n	8000fa0 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	f88d 3004 	strb.w	r3, [sp, #4]
 8000fb6:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8000fb8:	4911      	ldr	r1, [pc, #68]	; (8001000 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000fba:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8000fbe:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000fc0:	f003 020c 	and.w	r2, r3, #12
 8000fc4:	2a08      	cmp	r2, #8
 8000fc6:	d117      	bne.n	8000ff8 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000fc8:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000fcc:	a806      	add	r0, sp, #24
 8000fce:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000fd0:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000fd2:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000fd6:	d50c      	bpl.n	8000ff2 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000fd8:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000fda:	480a      	ldr	r0, [pc, #40]	; (8001004 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000fdc:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000fe0:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000fe2:	aa06      	add	r2, sp, #24
 8000fe4:	4413      	add	r3, r2
 8000fe6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000fea:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000fee:	b007      	add	sp, #28
 8000ff0:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000ff2:	4805      	ldr	r0, [pc, #20]	; (8001008 <HAL_RCC_GetSysClockFreq+0x74>)
 8000ff4:	4350      	muls	r0, r2
 8000ff6:	e7fa      	b.n	8000fee <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8000ff8:	4802      	ldr	r0, [pc, #8]	; (8001004 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8000ffa:	e7f8      	b.n	8000fee <HAL_RCC_GetSysClockFreq+0x5a>
 8000ffc:	080035fc 	.word	0x080035fc
 8001000:	40021000 	.word	0x40021000
 8001004:	007a1200 	.word	0x007a1200
 8001008:	003d0900 	.word	0x003d0900

0800100c <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800100c:	4a54      	ldr	r2, [pc, #336]	; (8001160 <HAL_RCC_ClockConfig+0x154>)
{
 800100e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001012:	6813      	ldr	r3, [r2, #0]
{
 8001014:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001016:	f003 0307 	and.w	r3, r3, #7
 800101a:	428b      	cmp	r3, r1
{
 800101c:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800101e:	d32a      	bcc.n	8001076 <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001020:	6829      	ldr	r1, [r5, #0]
 8001022:	078c      	lsls	r4, r1, #30
 8001024:	d434      	bmi.n	8001090 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001026:	07ca      	lsls	r2, r1, #31
 8001028:	d447      	bmi.n	80010ba <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800102a:	4a4d      	ldr	r2, [pc, #308]	; (8001160 <HAL_RCC_ClockConfig+0x154>)
 800102c:	6813      	ldr	r3, [r2, #0]
 800102e:	f003 0307 	and.w	r3, r3, #7
 8001032:	429e      	cmp	r6, r3
 8001034:	f0c0 8082 	bcc.w	800113c <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001038:	682a      	ldr	r2, [r5, #0]
 800103a:	4c4a      	ldr	r4, [pc, #296]	; (8001164 <HAL_RCC_ClockConfig+0x158>)
 800103c:	f012 0f04 	tst.w	r2, #4
 8001040:	f040 8087 	bne.w	8001152 <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001044:	0713      	lsls	r3, r2, #28
 8001046:	d506      	bpl.n	8001056 <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001048:	6863      	ldr	r3, [r4, #4]
 800104a:	692a      	ldr	r2, [r5, #16]
 800104c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001050:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001054:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001056:	f7ff ff9d 	bl	8000f94 <HAL_RCC_GetSysClockFreq>
 800105a:	6863      	ldr	r3, [r4, #4]
 800105c:	4a42      	ldr	r2, [pc, #264]	; (8001168 <HAL_RCC_ClockConfig+0x15c>)
 800105e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001062:	5cd3      	ldrb	r3, [r2, r3]
 8001064:	40d8      	lsrs	r0, r3
 8001066:	4b41      	ldr	r3, [pc, #260]	; (800116c <HAL_RCC_ClockConfig+0x160>)
 8001068:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800106a:	2000      	movs	r0, #0
 800106c:	f7ff f876 	bl	800015c <HAL_InitTick>
  return HAL_OK;
 8001070:	2000      	movs	r0, #0
}
 8001072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001076:	6813      	ldr	r3, [r2, #0]
 8001078:	f023 0307 	bic.w	r3, r3, #7
 800107c:	430b      	orrs	r3, r1
 800107e:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001080:	6813      	ldr	r3, [r2, #0]
 8001082:	f003 0307 	and.w	r3, r3, #7
 8001086:	4299      	cmp	r1, r3
 8001088:	d0ca      	beq.n	8001020 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 800108a:	2001      	movs	r0, #1
 800108c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001090:	4b34      	ldr	r3, [pc, #208]	; (8001164 <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001092:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001096:	bf1e      	ittt	ne
 8001098:	685a      	ldrne	r2, [r3, #4]
 800109a:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 800109e:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010a0:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010a2:	bf42      	ittt	mi
 80010a4:	685a      	ldrmi	r2, [r3, #4]
 80010a6:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 80010aa:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010ac:	685a      	ldr	r2, [r3, #4]
 80010ae:	68a8      	ldr	r0, [r5, #8]
 80010b0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80010b4:	4302      	orrs	r2, r0
 80010b6:	605a      	str	r2, [r3, #4]
 80010b8:	e7b5      	b.n	8001026 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010ba:	686a      	ldr	r2, [r5, #4]
 80010bc:	4c29      	ldr	r4, [pc, #164]	; (8001164 <HAL_RCC_ClockConfig+0x158>)
 80010be:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010c0:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010c2:	d11c      	bne.n	80010fe <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010c4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010c8:	d0df      	beq.n	800108a <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010ca:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010cc:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010d0:	f023 0303 	bic.w	r3, r3, #3
 80010d4:	4313      	orrs	r3, r2
 80010d6:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80010d8:	f7ff f882 	bl	80001e0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010dc:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 80010de:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d114      	bne.n	800110e <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80010e4:	6863      	ldr	r3, [r4, #4]
 80010e6:	f003 030c 	and.w	r3, r3, #12
 80010ea:	2b04      	cmp	r3, #4
 80010ec:	d09d      	beq.n	800102a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010ee:	f7ff f877 	bl	80001e0 <HAL_GetTick>
 80010f2:	1bc0      	subs	r0, r0, r7
 80010f4:	4540      	cmp	r0, r8
 80010f6:	d9f5      	bls.n	80010e4 <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 80010f8:	2003      	movs	r0, #3
 80010fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80010fe:	2a02      	cmp	r2, #2
 8001100:	d102      	bne.n	8001108 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001102:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001106:	e7df      	b.n	80010c8 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001108:	f013 0f02 	tst.w	r3, #2
 800110c:	e7dc      	b.n	80010c8 <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800110e:	2b02      	cmp	r3, #2
 8001110:	d10f      	bne.n	8001132 <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001112:	6863      	ldr	r3, [r4, #4]
 8001114:	f003 030c 	and.w	r3, r3, #12
 8001118:	2b08      	cmp	r3, #8
 800111a:	d086      	beq.n	800102a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800111c:	f7ff f860 	bl	80001e0 <HAL_GetTick>
 8001120:	1bc0      	subs	r0, r0, r7
 8001122:	4540      	cmp	r0, r8
 8001124:	d9f5      	bls.n	8001112 <HAL_RCC_ClockConfig+0x106>
 8001126:	e7e7      	b.n	80010f8 <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001128:	f7ff f85a 	bl	80001e0 <HAL_GetTick>
 800112c:	1bc0      	subs	r0, r0, r7
 800112e:	4540      	cmp	r0, r8
 8001130:	d8e2      	bhi.n	80010f8 <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001132:	6863      	ldr	r3, [r4, #4]
 8001134:	f013 0f0c 	tst.w	r3, #12
 8001138:	d1f6      	bne.n	8001128 <HAL_RCC_ClockConfig+0x11c>
 800113a:	e776      	b.n	800102a <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800113c:	6813      	ldr	r3, [r2, #0]
 800113e:	f023 0307 	bic.w	r3, r3, #7
 8001142:	4333      	orrs	r3, r6
 8001144:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001146:	6813      	ldr	r3, [r2, #0]
 8001148:	f003 0307 	and.w	r3, r3, #7
 800114c:	429e      	cmp	r6, r3
 800114e:	d19c      	bne.n	800108a <HAL_RCC_ClockConfig+0x7e>
 8001150:	e772      	b.n	8001038 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001152:	6863      	ldr	r3, [r4, #4]
 8001154:	68e9      	ldr	r1, [r5, #12]
 8001156:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800115a:	430b      	orrs	r3, r1
 800115c:	6063      	str	r3, [r4, #4]
 800115e:	e771      	b.n	8001044 <HAL_RCC_ClockConfig+0x38>
 8001160:	40022000 	.word	0x40022000
 8001164:	40021000 	.word	0x40021000
 8001168:	0800361b 	.word	0x0800361b
 800116c:	20000118 	.word	0x20000118

08001170 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001170:	4b04      	ldr	r3, [pc, #16]	; (8001184 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001172:	4a05      	ldr	r2, [pc, #20]	; (8001188 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800117a:	5cd3      	ldrb	r3, [r2, r3]
 800117c:	4a03      	ldr	r2, [pc, #12]	; (800118c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800117e:	6810      	ldr	r0, [r2, #0]
}    
 8001180:	40d8      	lsrs	r0, r3
 8001182:	4770      	bx	lr
 8001184:	40021000 	.word	0x40021000
 8001188:	0800362b 	.word	0x0800362b
 800118c:	20000118 	.word	0x20000118

08001190 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001190:	4b04      	ldr	r3, [pc, #16]	; (80011a4 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001192:	4a05      	ldr	r2, [pc, #20]	; (80011a8 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800119a:	5cd3      	ldrb	r3, [r2, r3]
 800119c:	4a03      	ldr	r2, [pc, #12]	; (80011ac <HAL_RCC_GetPCLK2Freq+0x1c>)
 800119e:	6810      	ldr	r0, [r2, #0]
} 
 80011a0:	40d8      	lsrs	r0, r3
 80011a2:	4770      	bx	lr
 80011a4:	40021000 	.word	0x40021000
 80011a8:	0800362b 	.word	0x0800362b
 80011ac:	20000118 	.word	0x20000118

080011b0 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80011b0:	6803      	ldr	r3, [r0, #0]
{
 80011b2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80011b6:	07d9      	lsls	r1, r3, #31
{
 80011b8:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80011ba:	d520      	bpl.n	80011fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011bc:	4c35      	ldr	r4, [pc, #212]	; (8001294 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80011be:	69e3      	ldr	r3, [r4, #28]
 80011c0:	00da      	lsls	r2, r3, #3
 80011c2:	d432      	bmi.n	800122a <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 80011c4:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 80011c6:	69e3      	ldr	r3, [r4, #28]
 80011c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011cc:	61e3      	str	r3, [r4, #28]
 80011ce:	69e3      	ldr	r3, [r4, #28]
 80011d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d4:	9301      	str	r3, [sp, #4]
 80011d6:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011d8:	4e2f      	ldr	r6, [pc, #188]	; (8001298 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80011da:	6833      	ldr	r3, [r6, #0]
 80011dc:	05db      	lsls	r3, r3, #23
 80011de:	d526      	bpl.n	800122e <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80011e0:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80011e2:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80011e6:	d136      	bne.n	8001256 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80011e8:	6a23      	ldr	r3, [r4, #32]
 80011ea:	686a      	ldr	r2, [r5, #4]
 80011ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80011f0:	4313      	orrs	r3, r2
 80011f2:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80011f4:	b11f      	cbz	r7, 80011fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011f6:	69e3      	ldr	r3, [r4, #28]
 80011f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011fc:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80011fe:	6828      	ldr	r0, [r5, #0]
 8001200:	0783      	lsls	r3, r0, #30
 8001202:	d506      	bpl.n	8001212 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001204:	4a23      	ldr	r2, [pc, #140]	; (8001294 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001206:	68a9      	ldr	r1, [r5, #8]
 8001208:	6853      	ldr	r3, [r2, #4]
 800120a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800120e:	430b      	orrs	r3, r1
 8001210:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001212:	f010 0010 	ands.w	r0, r0, #16
 8001216:	d01b      	beq.n	8001250 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001218:	4a1e      	ldr	r2, [pc, #120]	; (8001294 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800121a:	68e9      	ldr	r1, [r5, #12]
 800121c:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800121e:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001220:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001224:	430b      	orrs	r3, r1
 8001226:	6053      	str	r3, [r2, #4]
 8001228:	e012      	b.n	8001250 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 800122a:	2700      	movs	r7, #0
 800122c:	e7d4      	b.n	80011d8 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800122e:	6833      	ldr	r3, [r6, #0]
 8001230:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001234:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001236:	f7fe ffd3 	bl	80001e0 <HAL_GetTick>
 800123a:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800123c:	6833      	ldr	r3, [r6, #0]
 800123e:	05d8      	lsls	r0, r3, #23
 8001240:	d4ce      	bmi.n	80011e0 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001242:	f7fe ffcd 	bl	80001e0 <HAL_GetTick>
 8001246:	eba0 0008 	sub.w	r0, r0, r8
 800124a:	2864      	cmp	r0, #100	; 0x64
 800124c:	d9f6      	bls.n	800123c <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 800124e:	2003      	movs	r0, #3
}
 8001250:	b002      	add	sp, #8
 8001252:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001256:	686a      	ldr	r2, [r5, #4]
 8001258:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800125c:	4293      	cmp	r3, r2
 800125e:	d0c3      	beq.n	80011e8 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001260:	2001      	movs	r0, #1
 8001262:	4a0e      	ldr	r2, [pc, #56]	; (800129c <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001264:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001266:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001268:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800126a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 800126e:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8001270:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001272:	07d9      	lsls	r1, r3, #31
 8001274:	d5b8      	bpl.n	80011e8 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8001276:	f7fe ffb3 	bl	80001e0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800127a:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800127e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001280:	6a23      	ldr	r3, [r4, #32]
 8001282:	079a      	lsls	r2, r3, #30
 8001284:	d4b0      	bmi.n	80011e8 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001286:	f7fe ffab 	bl	80001e0 <HAL_GetTick>
 800128a:	1b80      	subs	r0, r0, r6
 800128c:	4540      	cmp	r0, r8
 800128e:	d9f7      	bls.n	8001280 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8001290:	e7dd      	b.n	800124e <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8001292:	bf00      	nop
 8001294:	40021000 	.word	0x40021000
 8001298:	40007000 	.word	0x40007000
 800129c:	42420440 	.word	0x42420440

080012a0 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80012a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80012a4:	6805      	ldr	r5, [r0, #0]
 80012a6:	68c2      	ldr	r2, [r0, #12]
 80012a8:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80012aa:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80012ac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80012b0:	4313      	orrs	r3, r2
 80012b2:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80012b4:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 80012b6:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80012b8:	430b      	orrs	r3, r1
 80012ba:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 80012bc:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 80012c0:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80012c4:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 80012c6:	4313      	orrs	r3, r2
 80012c8:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80012ca:	696b      	ldr	r3, [r5, #20]
 80012cc:	6982      	ldr	r2, [r0, #24]
 80012ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80012d2:	4313      	orrs	r3, r2
 80012d4:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80012d6:	4b40      	ldr	r3, [pc, #256]	; (80013d8 <UART_SetConfig+0x138>)
{
 80012d8:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 80012da:	429d      	cmp	r5, r3
 80012dc:	f04f 0419 	mov.w	r4, #25
 80012e0:	d146      	bne.n	8001370 <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80012e2:	f7ff ff55 	bl	8001190 <HAL_RCC_GetPCLK2Freq>
 80012e6:	fb04 f300 	mul.w	r3, r4, r0
 80012ea:	f8d9 6004 	ldr.w	r6, [r9, #4]
 80012ee:	f04f 0864 	mov.w	r8, #100	; 0x64
 80012f2:	00b6      	lsls	r6, r6, #2
 80012f4:	fbb3 f3f6 	udiv	r3, r3, r6
 80012f8:	fbb3 f3f8 	udiv	r3, r3, r8
 80012fc:	011e      	lsls	r6, r3, #4
 80012fe:	f7ff ff47 	bl	8001190 <HAL_RCC_GetPCLK2Freq>
 8001302:	4360      	muls	r0, r4
 8001304:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	fbb0 f7f3 	udiv	r7, r0, r3
 800130e:	f7ff ff3f 	bl	8001190 <HAL_RCC_GetPCLK2Freq>
 8001312:	4360      	muls	r0, r4
 8001314:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	fbb0 f3f3 	udiv	r3, r0, r3
 800131e:	fbb3 f3f8 	udiv	r3, r3, r8
 8001322:	fb08 7313 	mls	r3, r8, r3, r7
 8001326:	011b      	lsls	r3, r3, #4
 8001328:	3332      	adds	r3, #50	; 0x32
 800132a:	fbb3 f3f8 	udiv	r3, r3, r8
 800132e:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8001332:	f7ff ff2d 	bl	8001190 <HAL_RCC_GetPCLK2Freq>
 8001336:	4360      	muls	r0, r4
 8001338:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800133c:	0092      	lsls	r2, r2, #2
 800133e:	fbb0 faf2 	udiv	sl, r0, r2
 8001342:	f7ff ff25 	bl	8001190 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001346:	4360      	muls	r0, r4
 8001348:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001352:	fbb3 f3f8 	udiv	r3, r3, r8
 8001356:	fb08 a313 	mls	r3, r8, r3, sl
 800135a:	011b      	lsls	r3, r3, #4
 800135c:	3332      	adds	r3, #50	; 0x32
 800135e:	fbb3 f3f8 	udiv	r3, r3, r8
 8001362:	f003 030f 	and.w	r3, r3, #15
 8001366:	433b      	orrs	r3, r7
 8001368:	4433      	add	r3, r6
 800136a:	60ab      	str	r3, [r5, #8]
 800136c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001370:	f7ff fefe 	bl	8001170 <HAL_RCC_GetPCLK1Freq>
 8001374:	fb04 f300 	mul.w	r3, r4, r0
 8001378:	f8d9 6004 	ldr.w	r6, [r9, #4]
 800137c:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001380:	00b6      	lsls	r6, r6, #2
 8001382:	fbb3 f3f6 	udiv	r3, r3, r6
 8001386:	fbb3 f3f8 	udiv	r3, r3, r8
 800138a:	011e      	lsls	r6, r3, #4
 800138c:	f7ff fef0 	bl	8001170 <HAL_RCC_GetPCLK1Freq>
 8001390:	4360      	muls	r0, r4
 8001392:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	fbb0 f7f3 	udiv	r7, r0, r3
 800139c:	f7ff fee8 	bl	8001170 <HAL_RCC_GetPCLK1Freq>
 80013a0:	4360      	muls	r0, r4
 80013a2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80013ac:	fbb3 f3f8 	udiv	r3, r3, r8
 80013b0:	fb08 7313 	mls	r3, r8, r3, r7
 80013b4:	011b      	lsls	r3, r3, #4
 80013b6:	3332      	adds	r3, #50	; 0x32
 80013b8:	fbb3 f3f8 	udiv	r3, r3, r8
 80013bc:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 80013c0:	f7ff fed6 	bl	8001170 <HAL_RCC_GetPCLK1Freq>
 80013c4:	4360      	muls	r0, r4
 80013c6:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80013ca:	0092      	lsls	r2, r2, #2
 80013cc:	fbb0 faf2 	udiv	sl, r0, r2
 80013d0:	f7ff fece 	bl	8001170 <HAL_RCC_GetPCLK1Freq>
 80013d4:	e7b7      	b.n	8001346 <UART_SetConfig+0xa6>
 80013d6:	bf00      	nop
 80013d8:	40013800 	.word	0x40013800

080013dc <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 80013dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013de:	4604      	mov	r4, r0
 80013e0:	460e      	mov	r6, r1
 80013e2:	4617      	mov	r7, r2
 80013e4:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80013e6:	6821      	ldr	r1, [r4, #0]
 80013e8:	680b      	ldr	r3, [r1, #0]
 80013ea:	ea36 0303 	bics.w	r3, r6, r3
 80013ee:	d101      	bne.n	80013f4 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 80013f0:	2000      	movs	r0, #0
}
 80013f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 80013f4:	1c6b      	adds	r3, r5, #1
 80013f6:	d0f7      	beq.n	80013e8 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80013f8:	b995      	cbnz	r5, 8001420 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80013fa:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 80013fc:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80013fe:	68da      	ldr	r2, [r3, #12]
 8001400:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001404:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001406:	695a      	ldr	r2, [r3, #20]
 8001408:	f022 0201 	bic.w	r2, r2, #1
 800140c:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 800140e:	2320      	movs	r3, #32
 8001410:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001414:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8001418:	2300      	movs	r3, #0
 800141a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 800141e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001420:	f7fe fede 	bl	80001e0 <HAL_GetTick>
 8001424:	1bc0      	subs	r0, r0, r7
 8001426:	4285      	cmp	r5, r0
 8001428:	d2dd      	bcs.n	80013e6 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 800142a:	e7e6      	b.n	80013fa <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

0800142c <HAL_UART_Init>:
{
 800142c:	b510      	push	{r4, lr}
  if(huart == NULL)
 800142e:	4604      	mov	r4, r0
 8001430:	b340      	cbz	r0, 8001484 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001432:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001436:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800143a:	b91b      	cbnz	r3, 8001444 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800143c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001440:	f001 f9a4 	bl	800278c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001444:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001446:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001448:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800144c:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 800144e:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8001450:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001454:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001456:	f7ff ff23 	bl	80012a0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800145a:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800145c:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800145e:	691a      	ldr	r2, [r3, #16]
 8001460:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001464:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001466:	695a      	ldr	r2, [r3, #20]
 8001468:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800146c:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800146e:	68da      	ldr	r2, [r3, #12]
 8001470:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001474:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 8001476:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001478:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800147a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800147e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001482:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001484:	2001      	movs	r0, #1
}
 8001486:	bd10      	pop	{r4, pc}

08001488 <HAL_UART_Transmit>:
{
 8001488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800148c:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 800148e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8001492:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_READY)
 8001494:	2b20      	cmp	r3, #32
{
 8001496:	460d      	mov	r5, r1
 8001498:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 800149a:	d14e      	bne.n	800153a <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0U))
 800149c:	2900      	cmp	r1, #0
 800149e:	d049      	beq.n	8001534 <HAL_UART_Transmit+0xac>
 80014a0:	2a00      	cmp	r2, #0
 80014a2:	d047      	beq.n	8001534 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 80014a4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d046      	beq.n	800153a <HAL_UART_Transmit+0xb2>
 80014ac:	2301      	movs	r3, #1
 80014ae:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80014b2:	2300      	movs	r3, #0
 80014b4:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80014b6:	2321      	movs	r3, #33	; 0x21
 80014b8:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80014bc:	f7fe fe90 	bl	80001e0 <HAL_GetTick>
 80014c0:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 80014c2:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 80014c6:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 80014ca:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80014cc:	b29b      	uxth	r3, r3
 80014ce:	b96b      	cbnz	r3, 80014ec <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80014d0:	463b      	mov	r3, r7
 80014d2:	4632      	mov	r2, r6
 80014d4:	2140      	movs	r1, #64	; 0x40
 80014d6:	4620      	mov	r0, r4
 80014d8:	f7ff ff80 	bl	80013dc <UART_WaitOnFlagUntilTimeout.constprop.3>
 80014dc:	b9a8      	cbnz	r0, 800150a <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 80014de:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 80014e0:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 80014e4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 80014e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 80014ec:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80014ee:	4632      	mov	r2, r6
      huart->TxXferCount--;
 80014f0:	3b01      	subs	r3, #1
 80014f2:	b29b      	uxth	r3, r3
 80014f4:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80014f6:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80014f8:	2180      	movs	r1, #128	; 0x80
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80014fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80014fe:	4620      	mov	r0, r4
 8001500:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001502:	d10e      	bne.n	8001522 <HAL_UART_Transmit+0x9a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001504:	f7ff ff6a 	bl	80013dc <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001508:	b110      	cbz	r0, 8001510 <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 800150a:	2003      	movs	r0, #3
 800150c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001510:	882b      	ldrh	r3, [r5, #0]
 8001512:	6822      	ldr	r2, [r4, #0]
 8001514:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001518:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 800151a:	6923      	ldr	r3, [r4, #16]
 800151c:	b943      	cbnz	r3, 8001530 <HAL_UART_Transmit+0xa8>
          pData +=2U;
 800151e:	3502      	adds	r5, #2
 8001520:	e7d3      	b.n	80014ca <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001522:	f7ff ff5b 	bl	80013dc <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001526:	2800      	cmp	r0, #0
 8001528:	d1ef      	bne.n	800150a <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800152a:	6823      	ldr	r3, [r4, #0]
 800152c:	782a      	ldrb	r2, [r5, #0]
 800152e:	605a      	str	r2, [r3, #4]
 8001530:	3501      	adds	r5, #1
 8001532:	e7ca      	b.n	80014ca <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8001534:	2001      	movs	r0, #1
 8001536:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800153a:	2002      	movs	r0, #2
}
 800153c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001540 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8001540:	b084      	sub	sp, #16
 8001542:	a801      	add	r0, sp, #4
 8001544:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001548:	b004      	add	sp, #16
 800154a:	2000      	movs	r0, #0
 800154c:	4770      	bx	lr

0800154e <USB_EnableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
     | USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 800154e:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8001552:	b29b      	uxth	r3, r3
 8001554:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 8001558:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 800155c:	2000      	movs	r0, #0
 800155e:	4770      	bx	lr

08001560 <USB_DisableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8001560:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8001564:	f423 5374 	bic.w	r3, r3, #15616	; 0x3d00
 8001568:	045b      	lsls	r3, r3, #17
 800156a:	0c5b      	lsrs	r3, r3, #17
 800156c:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 8001570:	2000      	movs	r0, #0
 8001572:	4770      	bx	lr

08001574 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001574:	2000      	movs	r0, #0
 8001576:	4770      	bx	lr

08001578 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8001578:	b084      	sub	sp, #16
 800157a:	b510      	push	{r4, lr}
 800157c:	ac03      	add	r4, sp, #12
 800157e:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  
  /* Enable USB Device Interrupt mask */
  USB_EnableGlobalInt(USBx);
    
  return HAL_OK;
}
 8001582:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBx->CNTR = 0;
 8001586:	2200      	movs	r2, #0
  USBx->CNTR = USB_CNTR_FRES;
 8001588:	2301      	movs	r3, #1
 800158a:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->CNTR = 0;
 800158e:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
  USBx->ISTR = 0;
 8001592:	f8a0 2044 	strh.w	r2, [r0, #68]	; 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 8001596:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
  USBx->CNTR |= winterruptmask;
 800159a:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
}
 800159e:	b004      	add	sp, #16
  USBx->CNTR |= winterruptmask;
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 80015a6:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
}
 80015aa:	4610      	mov	r0, r2
 80015ac:	4770      	bx	lr
	...

080015b0 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80015b0:	b570      	push	{r4, r5, r6, lr}
  /* initialize Endpoint */
  switch (ep->type)
 80015b2:	78cb      	ldrb	r3, [r1, #3]
 80015b4:	780a      	ldrb	r2, [r1, #0]
 80015b6:	2b03      	cmp	r3, #3
 80015b8:	d80f      	bhi.n	80015da <USB_ActivateEndpoint+0x2a>
 80015ba:	e8df f003 	tbb	[pc, r3]
 80015be:	6402      	.short	0x6402
 80015c0:	5950      	.short	0x5950
  {
  case EP_TYPE_CTRL:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_CONTROL);
 80015c2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80015c6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80015ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80015ce:	041b      	lsls	r3, r3, #16
 80015d0:	0c1b      	lsrs	r3, r3, #16
 80015d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    break;
  case EP_TYPE_INTR:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
    break;
  case EP_TYPE_ISOC:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 80015d6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    break;
  default:
      break;
  } 
  
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80015da:	f640 730f 	movw	r3, #3855	; 0xf0f
 80015de:	780c      	ldrb	r4, [r1, #0]
 80015e0:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 80015e4:	f444 4500 	orr.w	r5, r4, #32768	; 0x8000
 80015e8:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 80015ec:	401a      	ands	r2, r3
 80015ee:	432a      	orrs	r2, r5
 80015f0:	f820 2024 	strh.w	r2, [r0, r4, lsl #2]
  
  if (ep->doublebuffer == 0) 
 80015f4:	7a8a      	ldrb	r2, [r1, #10]
 80015f6:	780d      	ldrb	r5, [r1, #0]
 80015f8:	2a00      	cmp	r2, #0
 80015fa:	f040 8097 	bne.w	800172c <USB_ActivateEndpoint+0x17c>
  {
    if (ep->is_in)
 80015fe:	784c      	ldrb	r4, [r1, #1]
 8001600:	888a      	ldrh	r2, [r1, #4]
 8001602:	2c00      	cmp	r4, #0
 8001604:	d04a      	beq.n	800169c <USB_ActivateEndpoint+0xec>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8001606:	f8b0 4050 	ldrh.w	r4, [r0, #80]	; 0x50
 800160a:	0852      	lsrs	r2, r2, #1
 800160c:	b2a4      	uxth	r4, r4
 800160e:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8001612:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8001616:	0052      	lsls	r2, r2, #1
 8001618:	f8c4 2400 	str.w	r2, [r4, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800161c:	780c      	ldrb	r4, [r1, #0]
 800161e:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8001622:	0652      	lsls	r2, r2, #25
 8001624:	d508      	bpl.n	8001638 <USB_ActivateEndpoint+0x88>
 8001626:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 800162a:	4013      	ands	r3, r2
 800162c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001630:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001634:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK); 
 8001638:	780a      	ldrb	r2, [r1, #0]
 800163a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800163e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001642:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001646:	041b      	lsls	r3, r3, #16
 8001648:	0c1b      	lsrs	r3, r3, #16
 800164a:	f083 0320 	eor.w	r3, r3, #32
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800164e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001652:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001656:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }
  
  return HAL_OK;
}
 800165a:	2000      	movs	r0, #0
 800165c:	bd70      	pop	{r4, r5, r6, pc}
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_BULK);
 800165e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001662:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8001666:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800166a:	041b      	lsls	r3, r3, #16
 800166c:	0c1b      	lsrs	r3, r3, #16
 800166e:	e7b2      	b.n	80015d6 <USB_ActivateEndpoint+0x26>
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
 8001670:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001674:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8001678:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800167c:	041b      	lsls	r3, r3, #16
 800167e:	0c1b      	lsrs	r3, r3, #16
 8001680:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8001684:	e7a7      	b.n	80015d6 <USB_ActivateEndpoint+0x26>
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 8001686:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800168a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800168e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001692:	041b      	lsls	r3, r3, #16
 8001694:	0c1b      	lsrs	r3, r3, #16
 8001696:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800169a:	e79c      	b.n	80015d6 <USB_ActivateEndpoint+0x26>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800169c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80016a0:	0852      	lsrs	r2, r2, #1
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	3304      	adds	r3, #4
 80016a6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80016aa:	0052      	lsls	r2, r2, #1
 80016ac:	f500 6480 	add.w	r4, r0, #1024	; 0x400
 80016b0:	f844 2013 	str.w	r2, [r4, r3, lsl #1]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80016b4:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80016b8:	690d      	ldr	r5, [r1, #16]
 80016ba:	b292      	uxth	r2, r2
 80016bc:	780b      	ldrb	r3, [r1, #0]
 80016be:	3206      	adds	r2, #6
 80016c0:	2d3e      	cmp	r5, #62	; 0x3e
 80016c2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80016c6:	d929      	bls.n	800171c <USB_ActivateEndpoint+0x16c>
 80016c8:	f3c5 164f 	ubfx	r6, r5, #5, #16
 80016cc:	06eb      	lsls	r3, r5, #27
 80016ce:	bf04      	itt	eq
 80016d0:	f106 33ff 	addeq.w	r3, r6, #4294967295	; 0xffffffff
 80016d4:	b29e      	uxtheq	r6, r3
 80016d6:	4b6e      	ldr	r3, [pc, #440]	; (8001890 <USB_ActivateEndpoint+0x2e0>)
 80016d8:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
 80016dc:	b29b      	uxth	r3, r3
 80016de:	f844 3012 	str.w	r3, [r4, r2, lsl #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80016e2:	780a      	ldrb	r2, [r1, #0]
 80016e4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80016e8:	045e      	lsls	r6, r3, #17
 80016ea:	d50b      	bpl.n	8001704 <USB_ActivateEndpoint+0x154>
 80016ec:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80016f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80016f4:	051b      	lsls	r3, r3, #20
 80016f6:	0d1b      	lsrs	r3, r3, #20
 80016f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001700:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001704:	780a      	ldrb	r2, [r1, #0]
 8001706:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800170a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800170e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001712:	041b      	lsls	r3, r3, #16
 8001714:	0c1b      	lsrs	r3, r3, #16
 8001716:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800171a:	e798      	b.n	800164e <USB_ActivateEndpoint+0x9e>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800171c:	f3c5 034f 	ubfx	r3, r5, #1, #16
 8001720:	07ed      	lsls	r5, r5, #31
 8001722:	bf44      	itt	mi
 8001724:	3301      	addmi	r3, #1
 8001726:	b29b      	uxthmi	r3, r3
 8001728:	029b      	lsls	r3, r3, #10
 800172a:	e7d7      	b.n	80016dc <USB_ActivateEndpoint+0x12c>
    PCD_SET_EP_DBUF(USBx, ep->num);
 800172c:	f830 2025 	ldrh.w	r2, [r0, r5, lsl #2]
 8001730:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
 8001734:	0512      	lsls	r2, r2, #20
 8001736:	0d12      	lsrs	r2, r2, #20
 8001738:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 800173c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001740:	f820 2025 	strh.w	r2, [r0, r5, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 8001744:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001748:	780c      	ldrb	r4, [r1, #0]
 800174a:	b292      	uxth	r2, r2
 800174c:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8001750:	88cc      	ldrh	r4, [r1, #6]
 8001752:	f500 6580 	add.w	r5, r0, #1024	; 0x400
 8001756:	0864      	lsrs	r4, r4, #1
 8001758:	0064      	lsls	r4, r4, #1
 800175a:	f845 4012 	str.w	r4, [r5, r2, lsl #1]
 800175e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001762:	780c      	ldrb	r4, [r1, #0]
 8001764:	b292      	uxth	r2, r2
 8001766:	3204      	adds	r2, #4
 8001768:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800176c:	890c      	ldrh	r4, [r1, #8]
 800176e:	0864      	lsrs	r4, r4, #1
 8001770:	0064      	lsls	r4, r4, #1
 8001772:	f845 4012 	str.w	r4, [r5, r2, lsl #1]
    if (ep->is_in==0)
 8001776:	784a      	ldrb	r2, [r1, #1]
 8001778:	780c      	ldrb	r4, [r1, #0]
 800177a:	2a00      	cmp	r2, #0
 800177c:	d147      	bne.n	800180e <USB_ActivateEndpoint+0x25e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800177e:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8001782:	0455      	lsls	r5, r2, #17
 8001784:	d508      	bpl.n	8001798 <USB_ActivateEndpoint+0x1e8>
 8001786:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 800178a:	4013      	ands	r3, r2
 800178c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001794:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001798:	780a      	ldrb	r2, [r1, #0]
 800179a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800179e:	065c      	lsls	r4, r3, #25
 80017a0:	d50b      	bpl.n	80017ba <USB_ActivateEndpoint+0x20a>
 80017a2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80017a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80017aa:	051b      	lsls	r3, r3, #20
 80017ac:	0d1b      	lsrs	r3, r3, #20
 80017ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017b2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80017b6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 80017ba:	780a      	ldrb	r2, [r1, #0]
 80017bc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80017c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80017c4:	051b      	lsls	r3, r3, #20
 80017c6:	0d1b      	lsrs	r3, r3, #20
 80017c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80017d0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80017d4:	f248 0280 	movw	r2, #32896	; 0x8080
 80017d8:	780c      	ldrb	r4, [r1, #0]
 80017da:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80017de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80017e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017e6:	041b      	lsls	r3, r3, #16
 80017e8:	0c1b      	lsrs	r3, r3, #16
 80017ea:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80017ee:	4313      	orrs	r3, r2
 80017f0:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80017f4:	7809      	ldrb	r1, [r1, #0]
 80017f6:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80017fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80017fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001802:	041b      	lsls	r3, r3, #16
 8001804:	0c1b      	lsrs	r3, r3, #16
 8001806:	4313      	orrs	r3, r2
 8001808:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 800180c:	e725      	b.n	800165a <USB_ActivateEndpoint+0xaa>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800180e:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8001812:	0452      	lsls	r2, r2, #17
 8001814:	d508      	bpl.n	8001828 <USB_ActivateEndpoint+0x278>
 8001816:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 800181a:	4013      	ands	r3, r2
 800181c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001820:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001824:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001828:	780a      	ldrb	r2, [r1, #0]
 800182a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800182e:	065b      	lsls	r3, r3, #25
 8001830:	d50b      	bpl.n	800184a <USB_ActivateEndpoint+0x29a>
 8001832:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001836:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800183a:	051b      	lsls	r3, r3, #20
 800183c:	0d1b      	lsrs	r3, r3, #20
 800183e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001842:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001846:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 800184a:	780a      	ldrb	r2, [r1, #0]
 800184c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001850:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001854:	051b      	lsls	r3, r3, #20
 8001856:	0d1b      	lsrs	r3, r3, #20
 8001858:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800185c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001860:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8001864:	f248 0280 	movw	r2, #32896	; 0x8080
 8001868:	780c      	ldrb	r4, [r1, #0]
 800186a:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800186e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001872:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001876:	041b      	lsls	r3, r3, #16
 8001878:	0c1b      	lsrs	r3, r3, #16
 800187a:	4313      	orrs	r3, r2
 800187c:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001880:	7809      	ldrb	r1, [r1, #0]
 8001882:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8001886:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800188a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800188e:	e7b8      	b.n	8001802 <USB_ActivateEndpoint+0x252>
 8001890:	ffff8000 	.word	0xffff8000

08001894 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8001894:	b510      	push	{r4, lr}
  if (ep->doublebuffer == 0) 
 8001896:	7a8c      	ldrb	r4, [r1, #10]
 8001898:	784a      	ldrb	r2, [r1, #1]
 800189a:	780b      	ldrb	r3, [r1, #0]
 800189c:	bbcc      	cbnz	r4, 8001912 <USB_DeactivateEndpoint+0x7e>
  {
    if (ep->is_in)
 800189e:	b302      	cbz	r2, 80018e2 <USB_DeactivateEndpoint+0x4e>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80018a0:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80018a4:	0652      	lsls	r2, r2, #25
 80018a6:	d50b      	bpl.n	80018c0 <USB_DeactivateEndpoint+0x2c>
 80018a8:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80018ac:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80018b0:	0512      	lsls	r2, r2, #20
 80018b2:	0d12      	lsrs	r2, r2, #20
 80018b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80018b8:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80018bc:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS); 
 80018c0:	780a      	ldrb	r2, [r1, #0]
 80018c2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80018c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80018ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80018ce:	041b      	lsls	r3, r3, #16
 80018d0:	0c1b      	lsrs	r3, r3, #16
 80018d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018da:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }
  
  return HAL_OK;
}
 80018de:	2000      	movs	r0, #0
 80018e0:	bd10      	pop	{r4, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80018e2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80018e6:	0454      	lsls	r4, r2, #17
 80018e8:	d50b      	bpl.n	8001902 <USB_DeactivateEndpoint+0x6e>
 80018ea:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80018ee:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80018f2:	0512      	lsls	r2, r2, #20
 80018f4:	0d12      	lsrs	r2, r2, #20
 80018f6:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80018fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80018fe:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001902:	780a      	ldrb	r2, [r1, #0]
 8001904:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001908:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800190c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001910:	e7dd      	b.n	80018ce <USB_DeactivateEndpoint+0x3a>
    if (ep->is_in==0)
 8001912:	2a00      	cmp	r2, #0
 8001914:	d148      	bne.n	80019a8 <USB_DeactivateEndpoint+0x114>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001916:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800191a:	0452      	lsls	r2, r2, #17
 800191c:	d50b      	bpl.n	8001936 <USB_DeactivateEndpoint+0xa2>
 800191e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001922:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001926:	0512      	lsls	r2, r2, #20
 8001928:	0d12      	lsrs	r2, r2, #20
 800192a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800192e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001932:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001936:	780a      	ldrb	r2, [r1, #0]
 8001938:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800193c:	065c      	lsls	r4, r3, #25
 800193e:	d50b      	bpl.n	8001958 <USB_DeactivateEndpoint+0xc4>
 8001940:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001944:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001948:	051b      	lsls	r3, r3, #20
 800194a:	0d1b      	lsrs	r3, r3, #20
 800194c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001950:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001954:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8001958:	780a      	ldrb	r2, [r1, #0]
 800195a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800195e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001962:	051b      	lsls	r3, r3, #20
 8001964:	0d1b      	lsrs	r3, r3, #20
 8001966:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800196a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800196e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001972:	f248 0280 	movw	r2, #32896	; 0x8080
 8001976:	780c      	ldrb	r4, [r1, #0]
 8001978:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800197c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001980:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001984:	041b      	lsls	r3, r3, #16
 8001986:	0c1b      	lsrs	r3, r3, #16
 8001988:	4313      	orrs	r3, r2
 800198a:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800198e:	7809      	ldrb	r1, [r1, #0]
 8001990:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8001994:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001998:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800199c:	041b      	lsls	r3, r3, #16
 800199e:	0c1b      	lsrs	r3, r3, #16
 80019a0:	4313      	orrs	r3, r2
 80019a2:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 80019a6:	e79a      	b.n	80018de <USB_DeactivateEndpoint+0x4a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80019a8:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80019ac:	0452      	lsls	r2, r2, #17
 80019ae:	d50b      	bpl.n	80019c8 <USB_DeactivateEndpoint+0x134>
 80019b0:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80019b4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80019b8:	0512      	lsls	r2, r2, #20
 80019ba:	0d12      	lsrs	r2, r2, #20
 80019bc:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80019c0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80019c4:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80019c8:	780a      	ldrb	r2, [r1, #0]
 80019ca:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80019ce:	065b      	lsls	r3, r3, #25
 80019d0:	d50b      	bpl.n	80019ea <USB_DeactivateEndpoint+0x156>
 80019d2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80019d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019da:	051b      	lsls	r3, r3, #20
 80019dc:	0d1b      	lsrs	r3, r3, #20
 80019de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019e2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80019e6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 80019ea:	780a      	ldrb	r2, [r1, #0]
 80019ec:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80019f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019f4:	051b      	lsls	r3, r3, #20
 80019f6:	0d1b      	lsrs	r3, r3, #20
 80019f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a00:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8001a04:	f248 0280 	movw	r2, #32896	; 0x8080
 8001a08:	780c      	ldrb	r4, [r1, #0]
 8001a0a:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8001a0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001a12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001a16:	041b      	lsls	r3, r3, #16
 8001a18:	0c1b      	lsrs	r3, r3, #16
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001a20:	7809      	ldrb	r1, [r1, #0]
 8001a22:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8001a26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a2e:	e7b5      	b.n	800199c <USB_DeactivateEndpoint+0x108>

08001a30 <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
  if (ep->num == 0)
 8001a30:	780a      	ldrb	r2, [r1, #0]
 8001a32:	b98a      	cbnz	r2, 8001a58 <USB_EPSetStall+0x28>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(USBx, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 8001a34:	8803      	ldrh	r3, [r0, #0]
 8001a36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001a3e:	041b      	lsls	r3, r3, #16
 8001a40:	0c1b      	lsrs	r3, r3, #16
 8001a42:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001a46:	f083 0310 	eor.w	r3, r3, #16
 8001a4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a52:	8003      	strh	r3, [r0, #0]
    {
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
    }
  }
  return HAL_OK;
}
 8001a54:	2000      	movs	r0, #0
 8001a56:	4770      	bx	lr
    if (ep->is_in)
 8001a58:	784b      	ldrb	r3, [r1, #1]
 8001a5a:	b183      	cbz	r3, 8001a7e <USB_EPSetStall+0x4e>
      PCD_SET_EP_TX_STATUS(USBx, ep->num , USB_EP_TX_STALL); 
 8001a5c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001a60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001a64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001a68:	041b      	lsls	r3, r3, #16
 8001a6a:	0c1b      	lsrs	r3, r3, #16
 8001a6c:	f083 0310 	eor.w	r3, r3, #16
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
 8001a70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a78:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8001a7c:	e7ea      	b.n	8001a54 <USB_EPSetStall+0x24>
 8001a7e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001a82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a8a:	041b      	lsls	r3, r3, #16
 8001a8c:	0c1b      	lsrs	r3, r3, #16
 8001a8e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001a92:	e7ed      	b.n	8001a70 <USB_EPSetStall+0x40>

08001a94 <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in)
 8001a94:	784b      	ldrb	r3, [r1, #1]
 8001a96:	780a      	ldrb	r2, [r1, #0]
 8001a98:	b313      	cbz	r3, 8001ae0 <USB_EPClearStall+0x4c>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001a9a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001a9e:	065b      	lsls	r3, r3, #25
 8001aa0:	d50b      	bpl.n	8001aba <USB_EPClearStall+0x26>
 8001aa2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001aa6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001aaa:	051b      	lsls	r3, r3, #20
 8001aac:	0d1b      	lsrs	r3, r3, #20
 8001aae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ab2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001ab6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8001aba:	780a      	ldrb	r2, [r1, #0]
 8001abc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001ac0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ac4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001ac8:	041b      	lsls	r3, r3, #16
 8001aca:	0c1b      	lsrs	r3, r3, #16
 8001acc:	f083 0330 	eor.w	r3, r3, #48	; 0x30
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001ad0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ad4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ad8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }
  return HAL_OK;
}
 8001adc:	2000      	movs	r0, #0
 8001ade:	4770      	bx	lr
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001ae0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001ae4:	045b      	lsls	r3, r3, #17
 8001ae6:	d50b      	bpl.n	8001b00 <USB_EPClearStall+0x6c>
 8001ae8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001aec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001af0:	051b      	lsls	r3, r3, #20
 8001af2:	0d1b      	lsrs	r3, r3, #20
 8001af4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001af8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001afc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001b00:	780a      	ldrb	r2, [r1, #0]
 8001b02:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001b06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b0e:	041b      	lsls	r3, r3, #16
 8001b10:	0c1b      	lsrs	r3, r3, #16
 8001b12:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001b16:	e7db      	b.n	8001ad0 <USB_EPClearStall+0x3c>

08001b18 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_TypeDef *USBx, uint8_t address)
{
  if(address == 0) 
 8001b18:	b911      	cbnz	r1, 8001b20 <USB_SetDevAddress+0x8>
  {
   /* set device address and enable function */
   USBx->DADDR = USB_DADDR_EF;
 8001b1a:	2380      	movs	r3, #128	; 0x80
 8001b1c:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }
  
  return HAL_OK;
}
 8001b20:	2000      	movs	r0, #0
 8001b22:	4770      	bx	lr

08001b24 <USB_DevConnect>:
 8001b24:	2000      	movs	r0, #0
 8001b26:	4770      	bx	lr

08001b28 <USB_DevDisconnect>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001b28:	2000      	movs	r0, #0
 8001b2a:	4770      	bx	lr

08001b2c <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_TypeDef *USBx)
{
  uint32_t tmpreg = 0;
  
  tmpreg = USBx->ISTR;
 8001b2c:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8001b30:	b280      	uxth	r0, r0
 8001b32:	4770      	bx	lr

08001b34 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001b34:	2000      	movs	r0, #0
 8001b36:	4770      	bx	lr

08001b38 <USB_WritePMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8001b38:	b510      	push	{r4, lr}
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
  uint32_t index = 0, temp1 = 0, temp2 = 0;
  uint16_t *pdwVal = NULL;
  
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
  for (index = nbytes; index != 0; index--)
 8001b3a:	2400      	movs	r4, #0
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 8001b3c:	3301      	adds	r3, #1
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8001b3e:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 8001b42:	105b      	asrs	r3, r3, #1
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8001b44:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (index = nbytes; index != 0; index--)
 8001b48:	42a3      	cmp	r3, r4
 8001b4a:	d100      	bne.n	8001b4e <USB_WritePMA+0x16>
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
    pdwVal++;
    pbUsrBuf++;
  }
}
 8001b4c:	bd10      	pop	{r4, pc}
 8001b4e:	f831 0b02 	ldrh.w	r0, [r1], #2
    *pdwVal++ = temp2;
 8001b52:	f822 0024 	strh.w	r0, [r2, r4, lsl #2]
 8001b56:	3401      	adds	r4, #1
 8001b58:	e7f6      	b.n	8001b48 <USB_WritePMA+0x10>
	...

08001b5c <USB_EPStartXfer>:
{
 8001b5c:	b570      	push	{r4, r5, r6, lr}
 8001b5e:	460e      	mov	r6, r1
  uint32_t len = ep->xfer_len;
 8001b60:	698a      	ldr	r2, [r1, #24]
  if (ep->is_in == 1)
 8001b62:	7849      	ldrb	r1, [r1, #1]
{
 8001b64:	4605      	mov	r5, r0
  if (ep->is_in == 1)
 8001b66:	2901      	cmp	r1, #1
 8001b68:	6933      	ldr	r3, [r6, #16]
 8001b6a:	7ab0      	ldrb	r0, [r6, #10]
 8001b6c:	d166      	bne.n	8001c3c <USB_EPStartXfer+0xe0>
    if (ep->xfer_len > ep->maxpacket)
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	461c      	mov	r4, r3
      ep->xfer_len =0;
 8001b72:	bf9b      	ittet	ls
 8001b74:	2300      	movls	r3, #0
 8001b76:	4614      	movls	r4, r2
      ep->xfer_len-=len; 
 8001b78:	1ad2      	subhi	r2, r2, r3
      ep->xfer_len =0;
 8001b7a:	61b3      	strls	r3, [r6, #24]
      ep->xfer_len-=len; 
 8001b7c:	bf88      	it	hi
 8001b7e:	61b2      	strhi	r2, [r6, #24]
 8001b80:	b2a3      	uxth	r3, r4
    if (ep->doublebuffer == 0) 
 8001b82:	bb10      	cbnz	r0, 8001bca <USB_EPStartXfer+0x6e>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, len);
 8001b84:	88b2      	ldrh	r2, [r6, #4]
 8001b86:	6971      	ldr	r1, [r6, #20]
 8001b88:	4628      	mov	r0, r5
 8001b8a:	f7ff ffd5 	bl	8001b38 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8001b8e:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8001b92:	7832      	ldrb	r2, [r6, #0]
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	3302      	adds	r3, #2
 8001b98:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001b9c:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8001ba0:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8001ba4:	7832      	ldrb	r2, [r6, #0]
 8001ba6:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8001baa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001bae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001bb2:	041b      	lsls	r3, r3, #16
 8001bb4:	0c1b      	lsrs	r3, r3, #16
 8001bb6:	f083 0330 	eor.w	r3, r3, #48	; 0x30
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001bba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bc2:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
}
 8001bc6:	2000      	movs	r0, #0
 8001bc8:	bd70      	pop	{r4, r5, r6, pc}
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 8001bca:	7832      	ldrb	r2, [r6, #0]
 8001bcc:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
 8001bd0:	00d2      	lsls	r2, r2, #3
 8001bd2:	f011 0f40 	tst.w	r1, #64	; 0x40
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8001bd6:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8001bda:	b289      	uxth	r1, r1
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 8001bdc:	d01a      	beq.n	8001c14 <USB_EPStartXfer+0xb8>
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8001bde:	3102      	adds	r1, #2
 8001be0:	440a      	add	r2, r1
 8001be2:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8001be6:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
        pmabuffer = ep->pmaaddr1;
 8001bea:	8932      	ldrh	r2, [r6, #8]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
 8001bec:	6971      	ldr	r1, [r6, #20]
 8001bee:	4628      	mov	r0, r5
 8001bf0:	f7ff ffa2 	bl	8001b38 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8001bf4:	7873      	ldrb	r3, [r6, #1]
 8001bf6:	7832      	ldrb	r2, [r6, #0]
 8001bf8:	b99b      	cbnz	r3, 8001c22 <USB_EPStartXfer+0xc6>
 8001bfa:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8001bfe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c02:	051b      	lsls	r3, r3, #20
 8001c04:	0d1b      	lsrs	r3, r3, #20
 8001c06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c0a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001c0e:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 8001c12:	e7c7      	b.n	8001ba4 <USB_EPStartXfer+0x48>
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8001c14:	440a      	add	r2, r1
 8001c16:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8001c1a:	f8c2 4404 	str.w	r4, [r2, #1028]	; 0x404
        pmabuffer = ep->pmaaddr0;
 8001c1e:	88f2      	ldrh	r2, [r6, #6]
 8001c20:	e7e4      	b.n	8001bec <USB_EPStartXfer+0x90>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d1be      	bne.n	8001ba4 <USB_EPStartXfer+0x48>
 8001c26:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8001c2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c2e:	051b      	lsls	r3, r3, #20
 8001c30:	0d1b      	lsrs	r3, r3, #20
 8001c32:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c3a:	e7e8      	b.n	8001c0e <USB_EPStartXfer+0xb2>
    if (ep->xfer_len > ep->maxpacket)
 8001c3c:	429a      	cmp	r2, r3
      ep->xfer_len =0;
 8001c3e:	bf93      	iteet	ls
 8001c40:	2300      	movls	r3, #0
      ep->xfer_len-=len; 
 8001c42:	1ad2      	subhi	r2, r2, r3
 8001c44:	61b2      	strhi	r2, [r6, #24]
      ep->xfer_len =0;
 8001c46:	61b3      	strls	r3, [r6, #24]
 8001c48:	bf98      	it	ls
 8001c4a:	4613      	movls	r3, r2
 8001c4c:	7832      	ldrb	r2, [r6, #0]
    if (ep->doublebuffer == 0) 
 8001c4e:	bb70      	cbnz	r0, 8001cae <USB_EPStartXfer+0x152>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8001c50:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8001c54:	2b3e      	cmp	r3, #62	; 0x3e
 8001c56:	b289      	uxth	r1, r1
 8001c58:	f101 0106 	add.w	r1, r1, #6
 8001c5c:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8001c60:	f505 6080 	add.w	r0, r5, #1024	; 0x400
 8001c64:	d918      	bls.n	8001c98 <USB_EPStartXfer+0x13c>
 8001c66:	f3c3 124f 	ubfx	r2, r3, #5, #16
 8001c6a:	06db      	lsls	r3, r3, #27
 8001c6c:	bf04      	itt	eq
 8001c6e:	f102 33ff 	addeq.w	r3, r2, #4294967295	; 0xffffffff
 8001c72:	b29a      	uxtheq	r2, r3
 8001c74:	4b38      	ldr	r3, [pc, #224]	; (8001d58 <USB_EPStartXfer+0x1fc>)
 8001c76:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	f840 3011 	str.w	r3, [r0, r1, lsl #1]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001c80:	7832      	ldrb	r2, [r6, #0]
 8001c82:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8001c86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c8e:	041b      	lsls	r3, r3, #16
 8001c90:	0c1b      	lsrs	r3, r3, #16
 8001c92:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001c96:	e790      	b.n	8001bba <USB_EPStartXfer+0x5e>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8001c98:	f3c3 024f 	ubfx	r2, r3, #1, #16
 8001c9c:	07dc      	lsls	r4, r3, #31
 8001c9e:	bf44      	itt	mi
 8001ca0:	3201      	addmi	r2, #1
 8001ca2:	b292      	uxthmi	r2, r2
 8001ca4:	0292      	lsls	r2, r2, #10
 8001ca6:	b292      	uxth	r2, r2
 8001ca8:	f840 2011 	str.w	r2, [r0, r1, lsl #1]
 8001cac:	e7e8      	b.n	8001c80 <USB_EPStartXfer+0x124>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8001cae:	b9b9      	cbnz	r1, 8001ce0 <USB_EPStartXfer+0x184>
 8001cb0:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8001cb4:	2b3e      	cmp	r3, #62	; 0x3e
 8001cb6:	b289      	uxth	r1, r1
 8001cb8:	f101 0102 	add.w	r1, r1, #2
 8001cbc:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8001cc0:	f505 6480 	add.w	r4, r5, #1024	; 0x400
 8001cc4:	d928      	bls.n	8001d18 <USB_EPStartXfer+0x1bc>
 8001cc6:	f3c3 104f 	ubfx	r0, r3, #5, #16
 8001cca:	06da      	lsls	r2, r3, #27
 8001ccc:	bf04      	itt	eq
 8001cce:	f100 32ff 	addeq.w	r2, r0, #4294967295	; 0xffffffff
 8001cd2:	b290      	uxtheq	r0, r2
 8001cd4:	4a20      	ldr	r2, [pc, #128]	; (8001d58 <USB_EPStartXfer+0x1fc>)
 8001cd6:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8001cda:	b292      	uxth	r2, r2
 8001cdc:	f844 2011 	str.w	r2, [r4, r1, lsl #1]
 8001ce0:	7872      	ldrb	r2, [r6, #1]
 8001ce2:	7831      	ldrb	r1, [r6, #0]
 8001ce4:	bb5a      	cbnz	r2, 8001d3e <USB_EPStartXfer+0x1e2>
 8001ce6:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8001cea:	2b3e      	cmp	r3, #62	; 0x3e
 8001cec:	b292      	uxth	r2, r2
 8001cee:	f102 0206 	add.w	r2, r2, #6
 8001cf2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8001cf6:	f505 6080 	add.w	r0, r5, #1024	; 0x400
 8001cfa:	d915      	bls.n	8001d28 <USB_EPStartXfer+0x1cc>
 8001cfc:	f3c3 114f 	ubfx	r1, r3, #5, #16
 8001d00:	06dc      	lsls	r4, r3, #27
 8001d02:	bf04      	itt	eq
 8001d04:	f101 33ff 	addeq.w	r3, r1, #4294967295	; 0xffffffff
 8001d08:	b299      	uxtheq	r1, r3
 8001d0a:	4b13      	ldr	r3, [pc, #76]	; (8001d58 <USB_EPStartXfer+0x1fc>)
 8001d0c:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	f840 3012 	str.w	r3, [r0, r2, lsl #1]
 8001d16:	e7b3      	b.n	8001c80 <USB_EPStartXfer+0x124>
 8001d18:	f3c3 024f 	ubfx	r2, r3, #1, #16
 8001d1c:	07d8      	lsls	r0, r3, #31
 8001d1e:	bf44      	itt	mi
 8001d20:	3201      	addmi	r2, #1
 8001d22:	b292      	uxthmi	r2, r2
 8001d24:	0292      	lsls	r2, r2, #10
 8001d26:	e7d8      	b.n	8001cda <USB_EPStartXfer+0x17e>
 8001d28:	f3c3 014f 	ubfx	r1, r3, #1, #16
 8001d2c:	07db      	lsls	r3, r3, #31
 8001d2e:	bf44      	itt	mi
 8001d30:	3101      	addmi	r1, #1
 8001d32:	b289      	uxthmi	r1, r1
 8001d34:	0289      	lsls	r1, r1, #10
 8001d36:	b289      	uxth	r1, r1
 8001d38:	f840 1012 	str.w	r1, [r0, r2, lsl #1]
 8001d3c:	e7a0      	b.n	8001c80 <USB_EPStartXfer+0x124>
 8001d3e:	2a01      	cmp	r2, #1
 8001d40:	d19e      	bne.n	8001c80 <USB_EPStartXfer+0x124>
 8001d42:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8001d46:	b292      	uxth	r2, r2
 8001d48:	3202      	adds	r2, #2
 8001d4a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8001d4e:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8001d52:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
 8001d56:	e793      	b.n	8001c80 <USB_EPStartXfer+0x124>
 8001d58:	ffff8000 	.word	0xffff8000

08001d5c <USB_ReadPMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8001d5c:	b510      	push	{r4, lr}
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
  uint32_t index = 0;
  uint32_t *pdwVal = NULL;
  
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
  for (index = nbytes; index != 0; index--)
 8001d5e:	2400      	movs	r4, #0
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 8001d60:	3301      	adds	r3, #1
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8001d62:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 8001d66:	105b      	asrs	r3, r3, #1
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8001d68:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (index = nbytes; index != 0; index--)
 8001d6c:	42a3      	cmp	r3, r4
 8001d6e:	d100      	bne.n	8001d72 <USB_ReadPMA+0x16>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
    pbUsrBuf++;
  }
}
 8001d70:	bd10      	pop	{r4, pc}
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8001d72:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8001d76:	f821 0014 	strh.w	r0, [r1, r4, lsl #1]
 8001d7a:	3401      	adds	r4, #1
 8001d7c:	e7f6      	b.n	8001d6c <USB_ReadPMA+0x10>

08001d7e <USBD_CDC_DataIn>:
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8001d7e:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 8001d82:	b11b      	cbz	r3, 8001d8c <USBD_CDC_DataIn+0xe>
  {
    
    hcdc->TxState = 0;
 8001d84:	2000      	movs	r0, #0
 8001d86:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214

    return USBD_OK;
 8001d8a:	4770      	bx	lr
  }
  else
  {
    return USBD_FAIL;
 8001d8c:	2002      	movs	r0, #2
  }
}
 8001d8e:	4770      	bx	lr

08001d90 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8001d90:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
{ 
 8001d94:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8001d96:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8001d9a:	b15b      	cbz	r3, 8001db4 <USBD_CDC_EP0_RxReady+0x24>
 8001d9c:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8001da0:	28ff      	cmp	r0, #255	; 0xff
 8001da2:	d007      	beq.n	8001db4 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8001daa:	4621      	mov	r1, r4
 8001dac:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFF; 
 8001dae:	23ff      	movs	r3, #255	; 0xff
 8001db0:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
      
  }
  return USBD_OK;
}
 8001db4:	2000      	movs	r0, #0
 8001db6:	bd10      	pop	{r4, pc}

08001db8 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8001db8:	2343      	movs	r3, #67	; 0x43
 8001dba:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8001dbc:	4800      	ldr	r0, [pc, #0]	; (8001dc0 <USBD_CDC_GetFSCfgDesc+0x8>)
 8001dbe:	4770      	bx	lr
 8001dc0:	20000040 	.word	0x20000040

08001dc4 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8001dc4:	2343      	movs	r3, #67	; 0x43
 8001dc6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8001dc8:	4800      	ldr	r0, [pc, #0]	; (8001dcc <USBD_CDC_GetHSCfgDesc+0x8>)
 8001dca:	4770      	bx	lr
 8001dcc:	20000084 	.word	0x20000084

08001dd0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8001dd0:	2343      	movs	r3, #67	; 0x43
 8001dd2:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8001dd4:	4800      	ldr	r0, [pc, #0]	; (8001dd8 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8001dd6:	4770      	bx	lr
 8001dd8:	200000d4 	.word	0x200000d4

08001ddc <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8001ddc:	230a      	movs	r3, #10
 8001dde:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8001de0:	4800      	ldr	r0, [pc, #0]	; (8001de4 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8001de2:	4770      	bx	lr
 8001de4:	200000c8 	.word	0x200000c8

08001de8 <USBD_CDC_DataOut>:
{      
 8001de8:	b538      	push	{r3, r4, r5, lr}
 8001dea:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8001dec:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8001df0:	f000 fee0 	bl	8002bb4 <USBD_LL_GetRxDataSize>
  if(pdev->pClassData != NULL)
 8001df4:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8001df8:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  if(pdev->pClassData != NULL)
 8001dfc:	b14b      	cbz	r3, 8001e12 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8001dfe:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 8001e02:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 8001e0c:	4798      	blx	r3
    return USBD_OK;
 8001e0e:	2000      	movs	r0, #0
 8001e10:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8001e12:	2002      	movs	r0, #2
}
 8001e14:	bd38      	pop	{r3, r4, r5, pc}
	...

08001e18 <USBD_CDC_Setup>:
{
 8001e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8001e1a:	780f      	ldrb	r7, [r1, #0]
{
 8001e1c:	4606      	mov	r6, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8001e1e:	f017 0360 	ands.w	r3, r7, #96	; 0x60
{
 8001e22:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8001e24:	d023      	beq.n	8001e6e <USBD_CDC_Setup+0x56>
 8001e26:	2b20      	cmp	r3, #32
 8001e28:	d119      	bne.n	8001e5e <USBD_CDC_Setup+0x46>
    if (req->wLength)
 8001e2a:	88ca      	ldrh	r2, [r1, #6]
 8001e2c:	784b      	ldrb	r3, [r1, #1]
 8001e2e:	b1c2      	cbz	r2, 8001e62 <USBD_CDC_Setup+0x4a>
      if (req->bmRequest & 0x80)
 8001e30:	0639      	lsls	r1, r7, #24
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8001e32:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
      if (req->bmRequest & 0x80)
 8001e36:	d50b      	bpl.n	8001e50 <USBD_CDC_Setup+0x38>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8001e38:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	688f      	ldr	r7, [r1, #8]
 8001e40:	4629      	mov	r1, r5
 8001e42:	47b8      	blx	r7
          USBD_CtlSendData (pdev, 
 8001e44:	4629      	mov	r1, r5
 8001e46:	4630      	mov	r0, r6
 8001e48:	88e2      	ldrh	r2, [r4, #6]
      USBD_CtlSendData (pdev,
 8001e4a:	f000 fb8a 	bl	8002562 <USBD_CtlSendData>
      break;
 8001e4e:	e006      	b.n	8001e5e <USBD_CDC_Setup+0x46>
        hcdc->CmdOpCode = req->bRequest;
 8001e50:	f885 3200 	strb.w	r3, [r5, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 8001e54:	f885 2201 	strb.w	r2, [r5, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, 
 8001e58:	4629      	mov	r1, r5
 8001e5a:	f000 fb97 	bl	800258c <USBD_CtlPrepareRx>
}
 8001e5e:	2000      	movs	r0, #0
 8001e60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8001e62:	f8d0 021c 	ldr.w	r0, [r0, #540]	; 0x21c
 8001e66:	6884      	ldr	r4, [r0, #8]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	47a0      	blx	r4
 8001e6c:	e7f7      	b.n	8001e5e <USBD_CDC_Setup+0x46>
    switch (req->bRequest)
 8001e6e:	784b      	ldrb	r3, [r1, #1]
 8001e70:	2b0a      	cmp	r3, #10
 8001e72:	d1f4      	bne.n	8001e5e <USBD_CDC_Setup+0x46>
      USBD_CtlSendData (pdev,
 8001e74:	2201      	movs	r2, #1
 8001e76:	4901      	ldr	r1, [pc, #4]	; (8001e7c <USBD_CDC_Setup+0x64>)
 8001e78:	e7e7      	b.n	8001e4a <USBD_CDC_Setup+0x32>
 8001e7a:	bf00      	nop
 8001e7c:	200001fc 	.word	0x200001fc

08001e80 <USBD_CDC_DeInit>:
{
 8001e80:	b510      	push	{r4, lr}
 8001e82:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 8001e84:	2181      	movs	r1, #129	; 0x81
 8001e86:	f000 fe31 	bl	8002aec <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 8001e8a:	2101      	movs	r1, #1
 8001e8c:	4620      	mov	r0, r4
 8001e8e:	f000 fe2d 	bl	8002aec <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 8001e92:	2182      	movs	r1, #130	; 0x82
 8001e94:	4620      	mov	r0, r4
 8001e96:	f000 fe29 	bl	8002aec <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 8001e9a:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8001e9e:	b153      	cbz	r3, 8001eb6 <USBD_CDC_DeInit+0x36>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8001ea0:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8001ea8:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8001eac:	f000 fe8c 	bl	8002bc8 <USBD_static_free>
    pdev->pClassData = NULL;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 8001eb6:	2000      	movs	r0, #0
 8001eb8:	bd10      	pop	{r4, pc}

08001eba <USBD_CDC_Init>:
{
 8001eba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8001ebc:	7c03      	ldrb	r3, [r0, #16]
{
 8001ebe:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8001ec0:	bb7b      	cbnz	r3, 8001f22 <USBD_CDC_Init+0x68>
    USBD_LL_OpenEP(pdev,
 8001ec2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ec6:	2202      	movs	r2, #2
 8001ec8:	2181      	movs	r1, #129	; 0x81
 8001eca:	f000 fdff 	bl	8002acc <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8001ece:	f44f 7300 	mov.w	r3, #512	; 0x200
    USBD_LL_OpenEP(pdev,
 8001ed2:	2202      	movs	r2, #2
 8001ed4:	2101      	movs	r1, #1
 8001ed6:	4620      	mov	r0, r4
 8001ed8:	f000 fdf8 	bl	8002acc <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,
 8001edc:	2308      	movs	r3, #8
 8001ede:	2203      	movs	r2, #3
 8001ee0:	2182      	movs	r1, #130	; 0x82
 8001ee2:	4620      	mov	r0, r4
 8001ee4:	f000 fdf2 	bl	8002acc <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8001ee8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8001eec:	f000 fe68 	bl	8002bc0 <USBD_static_malloc>
 8001ef0:	4606      	mov	r6, r0
 8001ef2:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  if(pdev->pClassData == NULL)
 8001ef6:	b320      	cbz	r0, 8001f42 <USBD_CDC_Init+0x88>
    hcdc->TxState =0;
 8001ef8:	2500      	movs	r5, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8001efa:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4798      	blx	r3
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8001f02:	7c27      	ldrb	r7, [r4, #16]
    hcdc->TxState =0;
 8001f04:	f8c6 5214 	str.w	r5, [r6, #532]	; 0x214
    hcdc->RxState =0;
 8001f08:	f8c6 5218 	str.w	r5, [r6, #536]	; 0x218
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8001f0c:	b987      	cbnz	r7, 8001f30 <USBD_CDC_Init+0x76>
      USBD_LL_PrepareReceive(pdev,
 8001f0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f12:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8001f16:	2101      	movs	r1, #1
 8001f18:	4620      	mov	r0, r4
 8001f1a:	f000 fe3d 	bl	8002b98 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 8001f1e:	4638      	mov	r0, r7
 8001f20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    USBD_LL_OpenEP(pdev,
 8001f22:	2340      	movs	r3, #64	; 0x40
 8001f24:	2202      	movs	r2, #2
 8001f26:	2181      	movs	r1, #129	; 0x81
 8001f28:	f000 fdd0 	bl	8002acc <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8001f2c:	2340      	movs	r3, #64	; 0x40
 8001f2e:	e7d0      	b.n	8001ed2 <USBD_CDC_Init+0x18>
      USBD_LL_PrepareReceive(pdev,
 8001f30:	2340      	movs	r3, #64	; 0x40
 8001f32:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8001f36:	2101      	movs	r1, #1
 8001f38:	4620      	mov	r0, r4
 8001f3a:	f000 fe2d 	bl	8002b98 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 8001f3e:	4628      	mov	r0, r5
 8001f40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret = 1; 
 8001f42:	2001      	movs	r0, #1
}
 8001f44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001f46 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
  
  if(fops != NULL)
 8001f46:	b119      	cbz	r1, 8001f50 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 8001f48:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
    ret = USBD_OK;    
 8001f4c:	2000      	movs	r0, #0
 8001f4e:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8001f50:	2002      	movs	r0, #2
  }
  
  return ret;
}
 8001f52:	4770      	bx	lr

08001f54 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8001f54:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;  
  
  return USBD_OK;  
}
 8001f58:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 8001f5a:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 8001f5e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 8001f62:	4770      	bx	lr

08001f64 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  hcdc->RxBuffer = pbuff;
 8001f64:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  return USBD_OK;
}
 8001f68:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8001f6a:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 8001f6e:	4770      	bx	lr

08001f70 <USBD_CDC_TransmitPacket>:
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8001f70:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
{      
 8001f74:	b510      	push	{r4, lr}
  
  if(pdev->pClassData != NULL)
 8001f76:	b172      	cbz	r2, 8001f96 <USBD_CDC_TransmitPacket+0x26>
  {
    if(hcdc->TxState == 0)
 8001f78:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	b964      	cbnz	r4, 8001f9a <USBD_CDC_TransmitPacket+0x2a>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1;
 8001f80:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
      
      /* Transmit next packet */
      USBD_LL_Transmit(pdev,
 8001f84:	2181      	movs	r1, #129	; 0x81
 8001f86:	f8b2 3210 	ldrh.w	r3, [r2, #528]	; 0x210
 8001f8a:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 8001f8e:	f000 fdf5 	bl	8002b7c <USBD_LL_Transmit>
                       CDC_IN_EP,
                       hcdc->TxBuffer,
                       hcdc->TxLength);
      
      return USBD_OK;
 8001f92:	4620      	mov	r0, r4
 8001f94:	bd10      	pop	{r4, pc}
      return USBD_BUSY;
    }
  }
  else
  {
    return USBD_FAIL;
 8001f96:	2002      	movs	r0, #2
 8001f98:	bd10      	pop	{r4, pc}
      return USBD_BUSY;
 8001f9a:	4618      	mov	r0, r3
  }
}
 8001f9c:	bd10      	pop	{r4, pc}

08001f9e <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8001f9e:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
{      
 8001fa2:	b510      	push	{r4, lr}
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8001fa4:	b162      	cbz	r2, 8001fc0 <USBD_CDC_ReceivePacket+0x22>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8001fa6:	7c04      	ldrb	r4, [r0, #16]
 8001fa8:	b944      	cbnz	r4, 8001fbc <USBD_CDC_ReceivePacket+0x1e>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8001faa:	f44f 7300 	mov.w	r3, #512	; 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8001fae:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8001fb2:	2101      	movs	r1, #1
 8001fb4:	f000 fdf0 	bl	8002b98 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8001fb8:	2000      	movs	r0, #0
 8001fba:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8001fbc:	2340      	movs	r3, #64	; 0x40
 8001fbe:	e7f6      	b.n	8001fae <USBD_CDC_ReceivePacket+0x10>
  }
  else
  {
    return USBD_FAIL;
 8001fc0:	2002      	movs	r0, #2
  }
}
 8001fc2:	bd10      	pop	{r4, pc}

08001fc4 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8001fc4:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8001fc6:	b180      	cbz	r0, 8001fea <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8001fc8:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8001fcc:	b113      	cbz	r3, 8001fd4 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8001fd4:	b109      	cbz	r1, 8001fda <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8001fd6:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8001fda:	2301      	movs	r3, #1
  pdev->id = id;
 8001fdc:	7002      	strb	r2, [r0, #0]
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8001fde:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8001fe2:	f000 fd25 	bl	8002a30 <USBD_LL_Init>
  
  return USBD_OK; 
 8001fe6:	2000      	movs	r0, #0
 8001fe8:	bd08      	pop	{r3, pc}
    return USBD_FAIL; 
 8001fea:	2002      	movs	r0, #2
}
 8001fec:	bd08      	pop	{r3, pc}

08001fee <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8001fee:	b119      	cbz	r1, 8001ff8 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8001ff0:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 8001ff4:	2000      	movs	r0, #0
 8001ff6:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8001ff8:	2002      	movs	r0, #2
  }
  
  return status;
}
 8001ffa:	4770      	bx	lr

08001ffc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8001ffc:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8001ffe:	f000 fd57 	bl	8002ab0 <USBD_LL_Start>
  
  return USBD_OK;  
}
 8002002:	2000      	movs	r0, #0
 8002004:	bd08      	pop	{r3, pc}

08002006 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002006:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 8002008:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800200c:	b90b      	cbnz	r3, 8002012 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800200e:	2002      	movs	r0, #2
 8002010:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4798      	blx	r3
 8002016:	2800      	cmp	r0, #0
 8002018:	d1f9      	bne.n	800200e <USBD_SetClassConfig+0x8>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 800201a:	bd08      	pop	{r3, pc}

0800201c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800201c:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 800201e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	4798      	blx	r3
  return USBD_OK;
}
 8002026:	2000      	movs	r0, #0
 8002028:	bd08      	pop	{r3, pc}

0800202a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800202a:	b538      	push	{r3, r4, r5, lr}

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800202c:	f500 7502 	add.w	r5, r0, #520	; 0x208
{
 8002030:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8002032:	4628      	mov	r0, r5
 8002034:	f000 fa65 	bl	8002502 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8002038:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 800203a:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
  pdev->ep0_state = USBD_EP0_SETUP;
 800203e:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 8002042:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 8002046:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  switch (pdev->request.bmRequest & 0x1F) 
 800204a:	f001 031f 	and.w	r3, r1, #31
 800204e:	2b01      	cmp	r3, #1
 8002050:	d00e      	beq.n	8002070 <USBD_LL_SetupStage+0x46>
 8002052:	d307      	bcc.n	8002064 <USBD_LL_SetupStage+0x3a>
 8002054:	2b02      	cmp	r3, #2
 8002056:	d010      	beq.n	800207a <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8002058:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800205c:	4620      	mov	r0, r4
 800205e:	f000 fd53 	bl	8002b08 <USBD_LL_StallEP>
    break;
 8002062:	e003      	b.n	800206c <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 8002064:	4629      	mov	r1, r5
 8002066:	4620      	mov	r0, r4
 8002068:	f000 f8d6 	bl	8002218 <USBD_StdDevReq>
  }  
  return USBD_OK;  
}
 800206c:	2000      	movs	r0, #0
 800206e:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 8002070:	4629      	mov	r1, r5
 8002072:	4620      	mov	r0, r4
 8002074:	f000 f9ca 	bl	800240c <USBD_StdItfReq>
    break;
 8002078:	e7f8      	b.n	800206c <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);   
 800207a:	4629      	mov	r1, r5
 800207c:	4620      	mov	r0, r4
 800207e:	f000 f9dd 	bl	800243c <USBD_StdEPReq>
    break;
 8002082:	e7f3      	b.n	800206c <USBD_LL_SetupStage+0x42>

08002084 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8002084:	b538      	push	{r3, r4, r5, lr}
 8002086:	4604      	mov	r4, r0
 8002088:	4615      	mov	r5, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 800208a:	bb11      	cbnz	r1, 80020d2 <USBD_LL_DataOutStage+0x4e>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800208c:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 8002090:	2b03      	cmp	r3, #3
 8002092:	d10f      	bne.n	80020b4 <USBD_LL_DataOutStage+0x30>
    {
      if(pep->rem_length > pep->maxpacket)
 8002094:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 8002098:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 800209c:	4293      	cmp	r3, r2
 800209e:	d90b      	bls.n	80020b8 <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 80020a0:	1a9b      	subs	r3, r3, r2
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 80020a2:	429a      	cmp	r2, r3
 80020a4:	bf28      	it	cs
 80020a6:	461a      	movcs	r2, r3
        pep->rem_length -=  pep->maxpacket;
 80020a8:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
        USBD_CtlContinueRx (pdev, 
 80020ac:	b292      	uxth	r2, r2
 80020ae:	4629      	mov	r1, r5
 80020b0:	f000 fa7b 	bl	80025aa <USBD_CtlContinueRx>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 80020b4:	2000      	movs	r0, #0
 80020b6:	bd38      	pop	{r3, r4, r5, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80020b8:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	b123      	cbz	r3, 80020ca <USBD_LL_DataOutStage+0x46>
 80020c0:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80020c4:	2a03      	cmp	r2, #3
 80020c6:	d100      	bne.n	80020ca <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev); 
 80020c8:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 80020ca:	4620      	mov	r0, r4
 80020cc:	f000 fa75 	bl	80025ba <USBD_CtlSendStatus>
 80020d0:	e7f0      	b.n	80020b4 <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL)&&
 80020d2:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d0eb      	beq.n	80020b4 <USBD_LL_DataOutStage+0x30>
 80020dc:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80020e0:	2a03      	cmp	r2, #3
 80020e2:	d1e7      	bne.n	80020b4 <USBD_LL_DataOutStage+0x30>
    pdev->pClass->DataOut(pdev, epnum); 
 80020e4:	4798      	blx	r3
 80020e6:	e7e5      	b.n	80020b4 <USBD_LL_DataOutStage+0x30>

080020e8 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 80020e8:	b570      	push	{r4, r5, r6, lr}
 80020ea:	4613      	mov	r3, r2
 80020ec:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 80020ee:	460e      	mov	r6, r1
 80020f0:	2900      	cmp	r1, #0
 80020f2:	d13d      	bne.n	8002170 <USBD_LL_DataInStage+0x88>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 80020f4:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 80020f8:	2a02      	cmp	r2, #2
 80020fa:	d10f      	bne.n	800211c <USBD_LL_DataInStage+0x34>
    {
      if(pep->rem_length > pep->maxpacket)
 80020fc:	69c5      	ldr	r5, [r0, #28]
 80020fe:	6a02      	ldr	r2, [r0, #32]
 8002100:	4295      	cmp	r5, r2
 8002102:	d914      	bls.n	800212e <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -=  pep->maxpacket;
 8002104:	1aaa      	subs	r2, r5, r2
 8002106:	61c2      	str	r2, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 8002108:	4619      	mov	r1, r3
 800210a:	b292      	uxth	r2, r2
 800210c:	f000 fa36 	bl	800257c <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8002110:	4633      	mov	r3, r6
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
          pdev->ep0_data_len = 0;
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8002112:	461a      	mov	r2, r3
 8002114:	4619      	mov	r1, r3
 8002116:	4620      	mov	r0, r4
 8002118:	f000 fd3e 	bl	8002b98 <USBD_LL_PrepareReceive>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 800211c:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8002120:	2b01      	cmp	r3, #1
 8002122:	d102      	bne.n	800212a <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 8002124:	2300      	movs	r3, #0
 8002126:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 800212a:	2000      	movs	r0, #0
 800212c:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0) &&
 800212e:	6983      	ldr	r3, [r0, #24]
 8002130:	fbb3 f5f2 	udiv	r5, r3, r2
 8002134:	fb02 3515 	mls	r5, r2, r5, r3
 8002138:	b965      	cbnz	r5, 8002154 <USBD_LL_DataInStage+0x6c>
 800213a:	429a      	cmp	r2, r3
 800213c:	d80a      	bhi.n	8002154 <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 800213e:	f8d0 21f8 	ldr.w	r2, [r0, #504]	; 0x1f8
 8002142:	4293      	cmp	r3, r2
 8002144:	d206      	bcs.n	8002154 <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8002146:	462a      	mov	r2, r5
 8002148:	f000 fa18 	bl	800257c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 800214c:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
        USBD_LL_PrepareReceive (pdev,
 8002150:	462b      	mov	r3, r5
 8002152:	e7de      	b.n	8002112 <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8002154:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	b12b      	cbz	r3, 8002168 <USBD_LL_DataInStage+0x80>
 800215c:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 8002160:	2a03      	cmp	r2, #3
 8002162:	d101      	bne.n	8002168 <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev); 
 8002164:	4620      	mov	r0, r4
 8002166:	4798      	blx	r3
          USBD_CtlReceiveStatus(pdev);
 8002168:	4620      	mov	r0, r4
 800216a:	f000 fa31 	bl	80025d0 <USBD_CtlReceiveStatus>
 800216e:	e7d5      	b.n	800211c <USBD_LL_DataInStage+0x34>
  else if((pdev->pClass->DataIn != NULL)&& 
 8002170:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002174:	695b      	ldr	r3, [r3, #20]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d0d7      	beq.n	800212a <USBD_LL_DataInStage+0x42>
 800217a:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800217e:	2a03      	cmp	r2, #3
 8002180:	d1d3      	bne.n	800212a <USBD_LL_DataInStage+0x42>
    pdev->pClass->DataIn(pdev, epnum); 
 8002182:	4798      	blx	r3
 8002184:	e7d1      	b.n	800212a <USBD_LL_DataInStage+0x42>

08002186 <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8002186:	2200      	movs	r2, #0
{
 8002188:	b538      	push	{r3, r4, r5, lr}
 800218a:	4604      	mov	r4, r0
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800218c:	2540      	movs	r5, #64	; 0x40
  USBD_LL_OpenEP(pdev,
 800218e:	4611      	mov	r1, r2
 8002190:	2340      	movs	r3, #64	; 0x40
 8002192:	f000 fc9b 	bl	8002acc <USBD_LL_OpenEP>
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8002196:	462b      	mov	r3, r5
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8002198:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  USBD_LL_OpenEP(pdev,
 800219c:	2200      	movs	r2, #0
 800219e:	2180      	movs	r1, #128	; 0x80
 80021a0:	4620      	mov	r0, r4
 80021a2:	f000 fc93 	bl	8002acc <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80021a6:	2301      	movs	r3, #1
 80021a8:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 80021ac:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80021b0:	6225      	str	r5, [r4, #32]
  if (pdev->pClassData) 
 80021b2:	b12b      	cbz	r3, 80021c0 <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 80021b4:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80021b8:	7921      	ldrb	r1, [r4, #4]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	4620      	mov	r0, r4
 80021be:	4798      	blx	r3
 
  
  return USBD_OK;
}
 80021c0:	2000      	movs	r0, #0
 80021c2:	bd38      	pop	{r3, r4, r5, pc}

080021c4 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80021c4:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 80021c6:	2000      	movs	r0, #0
 80021c8:	4770      	bx	lr

080021ca <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 80021ca:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80021ce:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80021d2:	2304      	movs	r3, #4
 80021d4:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 80021d8:	2000      	movs	r0, #0
 80021da:	4770      	bx	lr

080021dc <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 80021dc:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 80021e0:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 80021e4:	2000      	movs	r0, #0
 80021e6:	4770      	bx	lr

080021e8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 80021e8:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 80021ea:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80021ee:	2a03      	cmp	r2, #3
 80021f0:	d104      	bne.n	80021fc <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 80021f2:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80021f6:	69db      	ldr	r3, [r3, #28]
 80021f8:	b103      	cbz	r3, 80021fc <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 80021fa:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 80021fc:	2000      	movs	r0, #0
 80021fe:	bd08      	pop	{r3, pc}

08002200 <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8002200:	b510      	push	{r4, lr}
 8002202:	4604      	mov	r4, r0
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
 8002204:	2180      	movs	r1, #128	; 0x80
 8002206:	f000 fc7f 	bl	8002b08 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 800220a:	4620      	mov	r0, r4
}
 800220c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 8002210:	2100      	movs	r1, #0
 8002212:	f000 bc79 	b.w	8002b08 <USBD_LL_StallEP>
	...

08002218 <USBD_StdDevReq>:
{
 8002218:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bRequest) 
 800221a:	784b      	ldrb	r3, [r1, #1]
{
 800221c:	4604      	mov	r4, r0
 800221e:	460d      	mov	r5, r1
  switch (req->bRequest) 
 8002220:	2b09      	cmp	r3, #9
 8002222:	d879      	bhi.n	8002318 <USBD_StdDevReq+0x100>
 8002224:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002228:	00e500c9 	.word	0x00e500c9
 800222c:	00d90078 	.word	0x00d90078
 8002230:	006d0078 	.word	0x006d0078
 8002234:	0078000a 	.word	0x0078000a
 8002238:	008d00b9 	.word	0x008d00b9
  switch (req->wValue >> 8)
 800223c:	884b      	ldrh	r3, [r1, #2]
 800223e:	0a1a      	lsrs	r2, r3, #8
 8002240:	3a01      	subs	r2, #1
 8002242:	2a06      	cmp	r2, #6
 8002244:	d868      	bhi.n	8002318 <USBD_StdDevReq+0x100>
 8002246:	e8df f002 	tbb	[pc, r2]
 800224a:	1c04      	.short	0x1c04
 800224c:	49676729 	.word	0x49676729
 8002250:	52          	.byte	0x52
 8002251:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8002252:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002256:	681b      	ldr	r3, [r3, #0]
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8002258:	f10d 0106 	add.w	r1, sp, #6
 800225c:	7c20      	ldrb	r0, [r4, #16]
 800225e:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 8002260:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8002264:	2a00      	cmp	r2, #0
 8002266:	d067      	beq.n	8002338 <USBD_StdDevReq+0x120>
 8002268:	88eb      	ldrh	r3, [r5, #6]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d064      	beq.n	8002338 <USBD_StdDevReq+0x120>
    len = MIN(len , req->wLength);
 800226e:	429a      	cmp	r2, r3
 8002270:	bf28      	it	cs
 8002272:	461a      	movcs	r2, r3
    USBD_CtlSendData (pdev, 
 8002274:	4601      	mov	r1, r0
    len = MIN(len , req->wLength);
 8002276:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, 
 800227a:	4620      	mov	r0, r4
 800227c:	f000 f971 	bl	8002562 <USBD_CtlSendData>
 8002280:	e05a      	b.n	8002338 <USBD_StdDevReq+0x120>
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8002282:	7c02      	ldrb	r2, [r0, #16]
 8002284:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002288:	b932      	cbnz	r2, 8002298 <USBD_StdDevReq+0x80>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800228a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800228c:	f10d 0006 	add.w	r0, sp, #6
 8002290:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8002292:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8002294:	7043      	strb	r3, [r0, #1]
 8002296:	e7e3      	b.n	8002260 <USBD_StdDevReq+0x48>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8002298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800229a:	e7f7      	b.n	800228c <USBD_StdDevReq+0x74>
    switch ((uint8_t)(req->wValue))
 800229c:	b2db      	uxtb	r3, r3
 800229e:	2b05      	cmp	r3, #5
 80022a0:	d83a      	bhi.n	8002318 <USBD_StdDevReq+0x100>
 80022a2:	e8df f003 	tbb	[pc, r3]
 80022a6:	0703      	.short	0x0703
 80022a8:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 80022ac:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	e7d1      	b.n	8002258 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80022b4:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	e7cd      	b.n	8002258 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80022bc:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	e7c9      	b.n	8002258 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80022c4:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80022c8:	691b      	ldr	r3, [r3, #16]
 80022ca:	e7c5      	b.n	8002258 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80022cc:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80022d0:	695b      	ldr	r3, [r3, #20]
 80022d2:	e7c1      	b.n	8002258 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80022d4:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	e7bd      	b.n	8002258 <USBD_StdDevReq+0x40>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 80022dc:	7c03      	ldrb	r3, [r0, #16]
 80022de:	b9db      	cbnz	r3, 8002318 <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80022e0:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80022e4:	f10d 0006 	add.w	r0, sp, #6
 80022e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ea:	4798      	blx	r3
 80022ec:	e7b8      	b.n	8002260 <USBD_StdDevReq+0x48>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 80022ee:	7c03      	ldrb	r3, [r0, #16]
 80022f0:	b993      	cbnz	r3, 8002318 <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80022f2:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80022f6:	f10d 0006 	add.w	r0, sp, #6
 80022fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fc:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80022fe:	2307      	movs	r3, #7
 8002300:	e7c8      	b.n	8002294 <USBD_StdDevReq+0x7c>
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8002302:	888b      	ldrh	r3, [r1, #4]
 8002304:	b943      	cbnz	r3, 8002318 <USBD_StdDevReq+0x100>
 8002306:	88cb      	ldrh	r3, [r1, #6]
 8002308:	b933      	cbnz	r3, 8002318 <USBD_StdDevReq+0x100>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800230a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 800230e:	788d      	ldrb	r5, [r1, #2]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8002310:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8002312:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8002316:	d103      	bne.n	8002320 <USBD_StdDevReq+0x108>
    USBD_CtlError(pdev , req);
 8002318:	4620      	mov	r0, r4
 800231a:	f7ff ff71 	bl	8002200 <USBD_CtlError.constprop.0>
    break;
 800231e:	e00b      	b.n	8002338 <USBD_StdDevReq+0x120>
      pdev->dev_address = dev_addr;
 8002320:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8002324:	4629      	mov	r1, r5
 8002326:	f000 fc1b 	bl	8002b60 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 800232a:	4620      	mov	r0, r4
 800232c:	f000 f945 	bl	80025ba <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 8002330:	b12d      	cbz	r5, 800233e <USBD_StdDevReq+0x126>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8002332:	2302      	movs	r3, #2
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8002334:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
}
 8002338:	2000      	movs	r0, #0
 800233a:	b003      	add	sp, #12
 800233c:	bd30      	pop	{r4, r5, pc}
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 800233e:	2301      	movs	r3, #1
 8002340:	e7f8      	b.n	8002334 <USBD_StdDevReq+0x11c>
  cfgidx = (uint8_t)(req->wValue);                 
 8002342:	7889      	ldrb	r1, [r1, #2]
 8002344:	4d30      	ldr	r5, [pc, #192]	; (8002408 <USBD_StdDevReq+0x1f0>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8002346:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);                 
 8002348:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 800234a:	d8e5      	bhi.n	8002318 <USBD_StdDevReq+0x100>
    switch (pdev->dev_state) 
 800234c:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002350:	2b02      	cmp	r3, #2
 8002352:	d00c      	beq.n	800236e <USBD_StdDevReq+0x156>
 8002354:	2b03      	cmp	r3, #3
 8002356:	d1df      	bne.n	8002318 <USBD_StdDevReq+0x100>
      if (cfgidx == 0) 
 8002358:	b9b1      	cbnz	r1, 8002388 <USBD_StdDevReq+0x170>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800235a:	2302      	movs	r3, #2
        pdev->dev_config = cfgidx;          
 800235c:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800235e:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        USBD_ClrClassConfig(pdev , cfgidx);
 8002362:	f7ff fe5b 	bl	800201c <USBD_ClrClassConfig>
      USBD_CtlSendStatus(pdev);
 8002366:	4620      	mov	r0, r4
 8002368:	f000 f927 	bl	80025ba <USBD_CtlSendStatus>
 800236c:	e7e4      	b.n	8002338 <USBD_StdDevReq+0x120>
      if (cfgidx) 
 800236e:	2900      	cmp	r1, #0
 8002370:	d0f9      	beq.n	8002366 <USBD_StdDevReq+0x14e>
        pdev->dev_config = cfgidx;
 8002372:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8002374:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 8002376:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8002378:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 800237c:	4620      	mov	r0, r4
 800237e:	f7ff fe42 	bl	8002006 <USBD_SetClassConfig>
 8002382:	2802      	cmp	r0, #2
 8002384:	d1ef      	bne.n	8002366 <USBD_StdDevReq+0x14e>
 8002386:	e7c7      	b.n	8002318 <USBD_StdDevReq+0x100>
      else  if (cfgidx != pdev->dev_config) 
 8002388:	6841      	ldr	r1, [r0, #4]
 800238a:	2901      	cmp	r1, #1
 800238c:	d0eb      	beq.n	8002366 <USBD_StdDevReq+0x14e>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 800238e:	b2c9      	uxtb	r1, r1
 8002390:	f7ff fe44 	bl	800201c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8002394:	7829      	ldrb	r1, [r5, #0]
 8002396:	6061      	str	r1, [r4, #4]
 8002398:	e7f0      	b.n	800237c <USBD_StdDevReq+0x164>
  if (req->wLength != 1) 
 800239a:	88ca      	ldrh	r2, [r1, #6]
 800239c:	2a01      	cmp	r2, #1
 800239e:	d1bb      	bne.n	8002318 <USBD_StdDevReq+0x100>
    switch (pdev->dev_state )  
 80023a0:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d003      	beq.n	80023b0 <USBD_StdDevReq+0x198>
 80023a8:	2b03      	cmp	r3, #3
 80023aa:	d1b5      	bne.n	8002318 <USBD_StdDevReq+0x100>
      USBD_CtlSendData (pdev, 
 80023ac:	1d01      	adds	r1, r0, #4
 80023ae:	e764      	b.n	800227a <USBD_StdDevReq+0x62>
      pdev->dev_default_config = 0;
 80023b0:	4601      	mov	r1, r0
 80023b2:	2300      	movs	r3, #0
 80023b4:	f841 3f08 	str.w	r3, [r1, #8]!
 80023b8:	e75f      	b.n	800227a <USBD_StdDevReq+0x62>
  switch (pdev->dev_state) 
 80023ba:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80023be:	3b02      	subs	r3, #2
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d8a9      	bhi.n	8002318 <USBD_StdDevReq+0x100>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 80023c4:	2301      	movs	r3, #1
 80023c6:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 80023c8:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 80023cc:	b10b      	cbz	r3, 80023d2 <USBD_StdDevReq+0x1ba>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 80023ce:	2303      	movs	r3, #3
 80023d0:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, 
 80023d2:	2202      	movs	r2, #2
 80023d4:	f104 010c 	add.w	r1, r4, #12
 80023d8:	e74f      	b.n	800227a <USBD_StdDevReq+0x62>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80023da:	884b      	ldrh	r3, [r1, #2]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d1ab      	bne.n	8002338 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 80023e0:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 80023e4:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80023e8:	4629      	mov	r1, r5
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	4620      	mov	r0, r4
 80023ee:	4798      	blx	r3
 80023f0:	e7b9      	b.n	8002366 <USBD_StdDevReq+0x14e>
  switch (pdev->dev_state)
 80023f2:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80023f6:	3b02      	subs	r3, #2
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d88d      	bhi.n	8002318 <USBD_StdDevReq+0x100>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 80023fc:	884b      	ldrh	r3, [r1, #2]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d19a      	bne.n	8002338 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 8002402:	2300      	movs	r3, #0
 8002404:	e7ec      	b.n	80023e0 <USBD_StdDevReq+0x1c8>
 8002406:	bf00      	nop
 8002408:	200001fd 	.word	0x200001fd

0800240c <USBD_StdItfReq>:
{
 800240c:	b538      	push	{r3, r4, r5, lr}
  switch (pdev->dev_state) 
 800240e:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
{
 8002412:	4604      	mov	r4, r0
  switch (pdev->dev_state) 
 8002414:	2b03      	cmp	r3, #3
{
 8002416:	460d      	mov	r5, r1
  switch (pdev->dev_state) 
 8002418:	d10d      	bne.n	8002436 <USBD_StdItfReq+0x2a>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 800241a:	790b      	ldrb	r3, [r1, #4]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d80a      	bhi.n	8002436 <USBD_StdItfReq+0x2a>
      pdev->pClass->Setup (pdev, req); 
 8002420:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 8002428:	88eb      	ldrh	r3, [r5, #6]
 800242a:	b913      	cbnz	r3, 8002432 <USBD_StdItfReq+0x26>
         USBD_CtlSendStatus(pdev);
 800242c:	4620      	mov	r0, r4
 800242e:	f000 f8c4 	bl	80025ba <USBD_CtlSendStatus>
}
 8002432:	2000      	movs	r0, #0
 8002434:	bd38      	pop	{r3, r4, r5, pc}
     USBD_CtlError(pdev , req);
 8002436:	f7ff fee3 	bl	8002200 <USBD_CtlError.constprop.0>
    break;
 800243a:	e7fa      	b.n	8002432 <USBD_StdItfReq+0x26>

0800243c <USBD_StdEPReq>:
{
 800243c:	b570      	push	{r4, r5, r6, lr}
  if ((req->bmRequest & 0x60) == 0x20)
 800243e:	780a      	ldrb	r2, [r1, #0]
  ep_addr  = LOBYTE(req->wIndex);   
 8002440:	888e      	ldrh	r6, [r1, #4]
  if ((req->bmRequest & 0x60) == 0x20)
 8002442:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8002446:	2a20      	cmp	r2, #32
{
 8002448:	4604      	mov	r4, r0
 800244a:	460d      	mov	r5, r1
  ep_addr  = LOBYTE(req->wIndex);   
 800244c:	b2f3      	uxtb	r3, r6
  if ((req->bmRequest & 0x60) == 0x20)
 800244e:	d105      	bne.n	800245c <USBD_StdEPReq+0x20>
    pdev->pClass->Setup (pdev, req);
 8002450:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	4798      	blx	r3
}
 8002458:	2000      	movs	r0, #0
 800245a:	bd70      	pop	{r4, r5, r6, pc}
  switch (req->bRequest) 
 800245c:	784a      	ldrb	r2, [r1, #1]
 800245e:	2a01      	cmp	r2, #1
 8002460:	d01c      	beq.n	800249c <USBD_StdEPReq+0x60>
 8002462:	d32a      	bcc.n	80024ba <USBD_StdEPReq+0x7e>
 8002464:	2a03      	cmp	r2, #3
 8002466:	d1f7      	bne.n	8002458 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 8002468:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800246c:	2a02      	cmp	r2, #2
 800246e:	d040      	beq.n	80024f2 <USBD_StdEPReq+0xb6>
 8002470:	2a03      	cmp	r2, #3
 8002472:	d002      	beq.n	800247a <USBD_StdEPReq+0x3e>
      USBD_CtlError(pdev , req);
 8002474:	f7ff fec4 	bl	8002200 <USBD_CtlError.constprop.0>
      break;
 8002478:	e7ee      	b.n	8002458 <USBD_StdEPReq+0x1c>
      if (req->wValue == USB_FEATURE_EP_HALT)
 800247a:	884a      	ldrh	r2, [r1, #2]
 800247c:	b922      	cbnz	r2, 8002488 <USBD_StdEPReq+0x4c>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800247e:	065e      	lsls	r6, r3, #25
 8002480:	d002      	beq.n	8002488 <USBD_StdEPReq+0x4c>
          USBD_LL_StallEP(pdev , ep_addr);
 8002482:	4619      	mov	r1, r3
 8002484:	f000 fb40 	bl	8002b08 <USBD_LL_StallEP>
          pdev->pClass->Setup (pdev, req);
 8002488:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800248c:	4629      	mov	r1, r5
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	4620      	mov	r0, r4
 8002492:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8002494:	4620      	mov	r0, r4
 8002496:	f000 f890 	bl	80025ba <USBD_CtlSendStatus>
 800249a:	e7dd      	b.n	8002458 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 800249c:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80024a0:	2a02      	cmp	r2, #2
 80024a2:	d026      	beq.n	80024f2 <USBD_StdEPReq+0xb6>
 80024a4:	2a03      	cmp	r2, #3
 80024a6:	d1e5      	bne.n	8002474 <USBD_StdEPReq+0x38>
      if (req->wValue == USB_FEATURE_EP_HALT)
 80024a8:	884a      	ldrh	r2, [r1, #2]
 80024aa:	2a00      	cmp	r2, #0
 80024ac:	d1d4      	bne.n	8002458 <USBD_StdEPReq+0x1c>
        if ((ep_addr & 0x7F) != 0x00) 
 80024ae:	0659      	lsls	r1, r3, #25
 80024b0:	d0f0      	beq.n	8002494 <USBD_StdEPReq+0x58>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 80024b2:	4619      	mov	r1, r3
 80024b4:	f000 fb36 	bl	8002b24 <USBD_LL_ClearStallEP>
 80024b8:	e7e6      	b.n	8002488 <USBD_StdEPReq+0x4c>
    switch (pdev->dev_state) 
 80024ba:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80024be:	2a02      	cmp	r2, #2
 80024c0:	d017      	beq.n	80024f2 <USBD_StdEPReq+0xb6>
 80024c2:	2a03      	cmp	r2, #3
 80024c4:	d1d6      	bne.n	8002474 <USBD_StdEPReq+0x38>
 80024c6:	f003 057f 	and.w	r5, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80024ca:	f016 0f80 	tst.w	r6, #128	; 0x80
 80024ce:	eb00 1505 	add.w	r5, r0, r5, lsl #4
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 80024d2:	4619      	mov	r1, r3
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80024d4:	bf14      	ite	ne
 80024d6:	3514      	addne	r5, #20
 80024d8:	f505 7582 	addeq.w	r5, r5, #260	; 0x104
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 80024dc:	f000 fb30 	bl	8002b40 <USBD_LL_IsStallEP>
 80024e0:	b168      	cbz	r0, 80024fe <USBD_StdEPReq+0xc2>
        pep->status = 0x0001;     
 80024e2:	2301      	movs	r3, #1
 80024e4:	602b      	str	r3, [r5, #0]
      USBD_CtlSendData (pdev,
 80024e6:	2202      	movs	r2, #2
 80024e8:	4629      	mov	r1, r5
 80024ea:	4620      	mov	r0, r4
 80024ec:	f000 f839 	bl	8002562 <USBD_CtlSendData>
      break;
 80024f0:	e7b2      	b.n	8002458 <USBD_StdEPReq+0x1c>
      if ((ep_addr & 0x7F) != 0x00) 
 80024f2:	065a      	lsls	r2, r3, #25
 80024f4:	d0b0      	beq.n	8002458 <USBD_StdEPReq+0x1c>
        USBD_LL_StallEP(pdev , ep_addr);
 80024f6:	4619      	mov	r1, r3
 80024f8:	f000 fb06 	bl	8002b08 <USBD_LL_StallEP>
 80024fc:	e7ac      	b.n	8002458 <USBD_StdEPReq+0x1c>
        pep->status = 0x0000;  
 80024fe:	6028      	str	r0, [r5, #0]
 8002500:	e7f1      	b.n	80024e6 <USBD_StdEPReq+0xaa>

08002502 <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 8002502:	780b      	ldrb	r3, [r1, #0]
 8002504:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8002506:	784b      	ldrb	r3, [r1, #1]
 8002508:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800250a:	78ca      	ldrb	r2, [r1, #3]
 800250c:	788b      	ldrb	r3, [r1, #2]
 800250e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002512:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8002514:	794a      	ldrb	r2, [r1, #5]
 8002516:	790b      	ldrb	r3, [r1, #4]
 8002518:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800251c:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800251e:	79ca      	ldrb	r2, [r1, #7]
 8002520:	798b      	ldrb	r3, [r1, #6]
 8002522:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002526:	80c3      	strh	r3, [r0, #6]
 8002528:	4770      	bx	lr

0800252a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800252a:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 800252c:	b188      	cbz	r0, 8002552 <USBD_GetString+0x28>
 800252e:	4605      	mov	r5, r0
 8002530:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 8002532:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002536:	b2db      	uxtb	r3, r3
 8002538:	2c00      	cmp	r4, #0
 800253a:	d1f9      	bne.n	8002530 <USBD_GetString+0x6>
    *len =  USBD_GetLen(desc) * 2 + 2;    
 800253c:	005b      	lsls	r3, r3, #1
 800253e:	3302      	adds	r3, #2
 8002540:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 8002542:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8002544:	2303      	movs	r3, #3
 8002546:	704b      	strb	r3, [r1, #1]
 8002548:	2302      	movs	r3, #2
 800254a:	3801      	subs	r0, #1
    while (*desc != '\0') 
 800254c:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8002550:	b905      	cbnz	r5, 8002554 <USBD_GetString+0x2a>
 8002552:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 8002554:	1c5a      	adds	r2, r3, #1
 8002556:	54cd      	strb	r5, [r1, r3]
 8002558:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0x00;
 800255a:	3302      	adds	r3, #2
 800255c:	b2db      	uxtb	r3, r3
 800255e:	548c      	strb	r4, [r1, r2]
 8002560:	e7f4      	b.n	800254c <USBD_GetString+0x22>

08002562 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8002562:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8002564:	2202      	movs	r2, #2
{
 8002566:	b510      	push	{r4, lr}
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8002568:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 800256c:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 800256e:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 8002570:	61c3      	str	r3, [r0, #28]
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8002572:	2100      	movs	r1, #0
 8002574:	f000 fb02 	bl	8002b7c <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8002578:	2000      	movs	r0, #0
 800257a:	bd10      	pop	{r4, pc}

0800257c <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 800257c:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 800257e:	4613      	mov	r3, r2
 8002580:	460a      	mov	r2, r1
 8002582:	2100      	movs	r1, #0
 8002584:	f000 fafa 	bl	8002b7c <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8002588:	2000      	movs	r0, #0
 800258a:	bd08      	pop	{r3, pc}

0800258c <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 800258c:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 800258e:	2203      	movs	r2, #3
{
 8002590:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 8002592:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 8002596:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 800259a:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 800259c:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
  USBD_LL_PrepareReceive (pdev,
 80025a0:	2100      	movs	r1, #0
 80025a2:	f000 faf9 	bl	8002b98 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 80025a6:	2000      	movs	r0, #0
 80025a8:	bd10      	pop	{r4, pc}

080025aa <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 80025aa:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 80025ac:	4613      	mov	r3, r2
 80025ae:	460a      	mov	r2, r1
 80025b0:	2100      	movs	r1, #0
 80025b2:	f000 faf1 	bl	8002b98 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 80025b6:	2000      	movs	r0, #0
 80025b8:	bd08      	pop	{r3, pc}

080025ba <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 80025ba:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80025bc:	2304      	movs	r3, #4
 80025be:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 80025c2:	2300      	movs	r3, #0
 80025c4:	461a      	mov	r2, r3
 80025c6:	4619      	mov	r1, r3
 80025c8:	f000 fad8 	bl	8002b7c <USBD_LL_Transmit>
  
  return USBD_OK;
}
 80025cc:	2000      	movs	r0, #0
 80025ce:	bd08      	pop	{r3, pc}

080025d0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 80025d0:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 80025d2:	2305      	movs	r3, #5
 80025d4:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 80025d8:	2300      	movs	r3, #0
 80025da:	461a      	mov	r2, r3
 80025dc:	4619      	mov	r1, r3
 80025de:	f000 fadb 	bl	8002b98 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 80025e2:	2000      	movs	r0, #0
 80025e4:	bd08      	pop	{r3, pc}

080025e6 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025e6:	2228      	movs	r2, #40	; 0x28
{
 80025e8:	b570      	push	{r4, r5, r6, lr}
 80025ea:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025ec:	eb0d 0002 	add.w	r0, sp, r2
 80025f0:	2100      	movs	r1, #0
 80025f2:	f000 fbb3 	bl	8002d5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025f6:	2214      	movs	r2, #20
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025f8:	2610      	movs	r6, #16
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025fa:	eb0d 0002 	add.w	r0, sp, r2
 80025fe:	2100      	movs	r1, #0
 8002600:	f000 fbac 	bl	8002d5c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002604:	4632      	mov	r2, r6
 8002606:	2100      	movs	r1, #0
 8002608:	a801      	add	r0, sp, #4
 800260a:	f000 fba7 	bl	8002d5c <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800260e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002612:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002614:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002616:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002618:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800261a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800261e:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002620:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002622:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002624:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002626:	9511      	str	r5, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002628:	f7fe fb28 	bl	8000c7c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800262c:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800262e:	2400      	movs	r4, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002630:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002632:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002636:	4629      	mov	r1, r5
 8002638:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800263a:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800263c:	9506      	str	r5, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800263e:	9407      	str	r4, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002640:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002642:	f7fe fce3 	bl	800100c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002646:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002648:	9601      	str	r6, [sp, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800264a:	9404      	str	r4, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800264c:	f7fe fdb0 	bl	80011b0 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8002650:	b014      	add	sp, #80	; 0x50
 8002652:	bd70      	pop	{r4, r5, r6, pc}

08002654 <USB_Reset>:
/* USER CODE BEGIN 4 */

// После перегенерации в Кубе добавить USB_Reset(); в функцию MX_GPIO_Init(void) (после ...CLK_ENABLE(); )

void USB_Reset(void)
{
 8002654:	b530      	push	{r4, r5, lr}
 8002656:	b085      	sub	sp, #20

	 GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002658:	2210      	movs	r2, #16
 800265a:	2100      	movs	r1, #0
 800265c:	4668      	mov	r0, sp
 800265e:	f000 fb7d 	bl	8002d5c <memset>

	 // инициализируем пин DP как выход
	 GPIO_InitStruct.Pin = GPIO_PIN_12;
	 GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002662:	2301      	movs	r3, #1
	 GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002664:	f44f 5580 	mov.w	r5, #4096	; 0x1000
	 GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002668:	9301      	str	r3, [sp, #4]
	 GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800266a:	2302      	movs	r3, #2
	 HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800266c:	4c0a      	ldr	r4, [pc, #40]	; (8002698 <USB_Reset+0x44>)
 800266e:	4669      	mov	r1, sp
 8002670:	4620      	mov	r0, r4
	 GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002672:	9303      	str	r3, [sp, #12]
	 GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002674:	9500      	str	r5, [sp, #0]
	 HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002676:	f7fd fe33 	bl	80002e0 <HAL_GPIO_Init>
	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET); // прижимаем DP к "земле"
 800267a:	2200      	movs	r2, #0
 800267c:	4629      	mov	r1, r5
 800267e:	4620      	mov	r0, r4
 8002680:	f7fd ff0e 	bl	80004a0 <HAL_GPIO_WritePin>
	 for(uint16_t i = 0; i < 2000; i++) {}; // немного ждём

	 // переинициализируем пин для работы с USB
	 GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002684:	2300      	movs	r3, #0
	 GPIO_InitStruct.Pull = GPIO_NOPULL;
	 HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002686:	4669      	mov	r1, sp
 8002688:	4620      	mov	r0, r4
	 GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800268a:	9301      	str	r3, [sp, #4]
	 GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268c:	9302      	str	r3, [sp, #8]
	 HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800268e:	f7fd fe27 	bl	80002e0 <HAL_GPIO_Init>
	 for(uint16_t i = 0; i < 2000; i++) {}; // немного ждём
}
 8002692:	b005      	add	sp, #20
 8002694:	bd30      	pop	{r4, r5, pc}
 8002696:	bf00      	nop
 8002698:	40010800 	.word	0x40010800

0800269c <main>:
{
 800269c:	b570      	push	{r4, r5, r6, lr}
 800269e:	b088      	sub	sp, #32
  HAL_Init();
 80026a0:	f7fd fd80 	bl	80001a4 <HAL_Init>
  SystemClock_Config();
 80026a4:	f7ff ff9f 	bl	80025e6 <SystemClock_Config>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80026a8:	4b21      	ldr	r3, [pc, #132]	; (8002730 <main+0x94>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026aa:	2400      	movs	r4, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80026ac:	699a      	ldr	r2, [r3, #24]
	  snprintf(str_tx, 19, "Str %d to USB\n", count++);
 80026ae:	4e21      	ldr	r6, [pc, #132]	; (8002734 <main+0x98>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80026b0:	f042 0220 	orr.w	r2, r2, #32
 80026b4:	619a      	str	r2, [r3, #24]
 80026b6:	699a      	ldr	r2, [r3, #24]
	  if(hUsbDeviceFS.dev_state == USBD_STATE_CONFIGURED) CDC_Transmit_FS((uint8_t*)str_tx, strlen(str_tx));
 80026b8:	4d1f      	ldr	r5, [pc, #124]	; (8002738 <main+0x9c>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80026ba:	f002 0220 	and.w	r2, r2, #32
 80026be:	9201      	str	r2, [sp, #4]
 80026c0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026c2:	699a      	ldr	r2, [r3, #24]
 80026c4:	f042 0204 	orr.w	r2, r2, #4
 80026c8:	619a      	str	r2, [r3, #24]
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	f003 0304 	and.w	r3, r3, #4
 80026d0:	9302      	str	r3, [sp, #8]
 80026d2:	9b02      	ldr	r3, [sp, #8]
  USB_Reset();
 80026d4:	f7ff ffbe 	bl	8002654 <USB_Reset>
  MX_USB_DEVICE_Init();
 80026d8:	f000 f8e4 	bl	80028a4 <MX_USB_DEVICE_Init>
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026dc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart1.Instance = USART1;
 80026e0:	4816      	ldr	r0, [pc, #88]	; (800273c <main+0xa0>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026e2:	4a17      	ldr	r2, [pc, #92]	; (8002740 <main+0xa4>)
  huart1.Init.StopBits = UART_STOPBITS_1;
 80026e4:	60c4      	str	r4, [r0, #12]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026e6:	e880 001c 	stmia.w	r0, {r2, r3, r4}
  huart1.Init.Mode = UART_MODE_TX_RX;
 80026ea:	230c      	movs	r3, #12
  huart1.Init.Parity = UART_PARITY_NONE;
 80026ec:	6104      	str	r4, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80026ee:	6143      	str	r3, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026f0:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80026f2:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80026f4:	f7fe fe9a 	bl	800142c <HAL_UART_Init>
  char str_tx[20] = {0,};
 80026f8:	2214      	movs	r2, #20
 80026fa:	4621      	mov	r1, r4
 80026fc:	a803      	add	r0, sp, #12
 80026fe:	f000 fb2d 	bl	8002d5c <memset>
	  snprintf(str_tx, 19, "Str %d to USB\n", count++);
 8002702:	b2e3      	uxtb	r3, r4
 8002704:	4632      	mov	r2, r6
 8002706:	2113      	movs	r1, #19
 8002708:	a803      	add	r0, sp, #12
 800270a:	f000 fb2f 	bl	8002d6c <sniprintf>
	  if(hUsbDeviceFS.dev_state == USBD_STATE_CONFIGURED) CDC_Transmit_FS((uint8_t*)str_tx, strlen(str_tx));
 800270e:	f895 31fc 	ldrb.w	r3, [r5, #508]	; 0x1fc
 8002712:	2b03      	cmp	r3, #3
 8002714:	d106      	bne.n	8002724 <main+0x88>
 8002716:	a803      	add	r0, sp, #12
 8002718:	f7fd fd18 	bl	800014c <strlen>
 800271c:	b281      	uxth	r1, r0
 800271e:	a803      	add	r0, sp, #12
 8002720:	f000 f912 	bl	8002948 <CDC_Transmit_FS>
	  HAL_Delay(500);
 8002724:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002728:	f7fd fd60 	bl	80001ec <HAL_Delay>
 800272c:	3401      	adds	r4, #1
	  snprintf(str_tx, 19, "Str %d to USB\n", count++);
 800272e:	e7e8      	b.n	8002702 <main+0x66>
 8002730:	40021000 	.word	0x40021000
 8002734:	0800360c 	.word	0x0800360c
 8002738:	20000470 	.word	0x20000470
 800273c:	20000430 	.word	0x20000430
 8002740:	40013800 	.word	0x40013800

08002744 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002744:	4770      	bx	lr
	...

08002748 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002748:	4b0e      	ldr	r3, [pc, #56]	; (8002784 <HAL_MspInit+0x3c>)
{
 800274a:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 800274c:	699a      	ldr	r2, [r3, #24]
 800274e:	f042 0201 	orr.w	r2, r2, #1
 8002752:	619a      	str	r2, [r3, #24]
 8002754:	699a      	ldr	r2, [r3, #24]
 8002756:	f002 0201 	and.w	r2, r2, #1
 800275a:	9200      	str	r2, [sp, #0]
 800275c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800275e:	69da      	ldr	r2, [r3, #28]
 8002760:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002764:	61da      	str	r2, [r3, #28]
 8002766:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002768:	4a07      	ldr	r2, [pc, #28]	; (8002788 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800276a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800276e:	9301      	str	r3, [sp, #4]
 8002770:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002772:	6853      	ldr	r3, [r2, #4]
 8002774:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002778:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800277c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800277e:	b002      	add	sp, #8
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	40021000 	.word	0x40021000
 8002788:	40010000 	.word	0x40010000

0800278c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800278c:	b510      	push	{r4, lr}
 800278e:	4604      	mov	r4, r0
 8002790:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002792:	2210      	movs	r2, #16
 8002794:	2100      	movs	r1, #0
 8002796:	a802      	add	r0, sp, #8
 8002798:	f000 fae0 	bl	8002d5c <memset>
  if(huart->Instance==USART1)
 800279c:	6822      	ldr	r2, [r4, #0]
 800279e:	4b17      	ldr	r3, [pc, #92]	; (80027fc <HAL_UART_MspInit+0x70>)
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d128      	bne.n	80027f6 <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80027a4:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80027a8:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027aa:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 80027ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027b0:	619a      	str	r2, [r3, #24]
 80027b2:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027b4:	4812      	ldr	r0, [pc, #72]	; (8002800 <HAL_UART_MspInit+0x74>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80027b6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80027ba:	9200      	str	r2, [sp, #0]
 80027bc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027be:	699a      	ldr	r2, [r3, #24]
 80027c0:	f042 0204 	orr.w	r2, r2, #4
 80027c4:	619a      	str	r2, [r3, #24]
 80027c6:	699b      	ldr	r3, [r3, #24]
 80027c8:	f003 0304 	and.w	r3, r3, #4
 80027cc:	9301      	str	r3, [sp, #4]
 80027ce:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80027d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027d4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d6:	2302      	movs	r3, #2
 80027d8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027da:	2303      	movs	r3, #3
 80027dc:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027de:	f7fd fd7f 	bl	80002e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80027e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027e6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027e8:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ea:	a902      	add	r1, sp, #8
 80027ec:	4804      	ldr	r0, [pc, #16]	; (8002800 <HAL_UART_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027ee:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f0:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027f2:	f7fd fd75 	bl	80002e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80027f6:	b006      	add	sp, #24
 80027f8:	bd10      	pop	{r4, pc}
 80027fa:	bf00      	nop
 80027fc:	40013800 	.word	0x40013800
 8002800:	40010800 	.word	0x40010800

08002804 <NMI_Handler>:
 8002804:	4770      	bx	lr

08002806 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002806:	e7fe      	b.n	8002806 <HardFault_Handler>

08002808 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002808:	e7fe      	b.n	8002808 <MemManage_Handler>

0800280a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800280a:	e7fe      	b.n	800280a <BusFault_Handler>

0800280c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800280c:	e7fe      	b.n	800280c <UsageFault_Handler>

0800280e <SVC_Handler>:
 800280e:	4770      	bx	lr

08002810 <DebugMon_Handler>:
 8002810:	4770      	bx	lr

08002812 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002812:	4770      	bx	lr

08002814 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002814:	f7fd bcd8 	b.w	80001c8 <HAL_IncTick>

08002818 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002818:	4801      	ldr	r0, [pc, #4]	; (8002820 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 800281a:	f7fd bf53 	b.w	80006c4 <HAL_PCD_IRQHandler>
 800281e:	bf00      	nop
 8002820:	20000e64 	.word	0x20000e64

08002824 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8002824:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002826:	4b0a      	ldr	r3, [pc, #40]	; (8002850 <_sbrk+0x2c>)
{
 8002828:	4602      	mov	r2, r0
	if (heap_end == 0)
 800282a:	6819      	ldr	r1, [r3, #0]
 800282c:	b909      	cbnz	r1, 8002832 <_sbrk+0xe>
		heap_end = &end;
 800282e:	4909      	ldr	r1, [pc, #36]	; (8002854 <_sbrk+0x30>)
 8002830:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8002832:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8002834:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8002836:	4402      	add	r2, r0
 8002838:	428a      	cmp	r2, r1
 800283a:	d906      	bls.n	800284a <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800283c:	f000 fa64 	bl	8002d08 <__errno>
 8002840:	230c      	movs	r3, #12
 8002842:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8002844:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002848:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 800284a:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 800284c:	bd08      	pop	{r3, pc}
 800284e:	bf00      	nop
 8002850:	20000200 	.word	0x20000200
 8002854:	200014c8 	.word	0x200014c8

08002858 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002858:	4b0f      	ldr	r3, [pc, #60]	; (8002898 <SystemInit+0x40>)
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	f042 0201 	orr.w	r2, r2, #1
 8002860:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002862:	6859      	ldr	r1, [r3, #4]
 8002864:	4a0d      	ldr	r2, [pc, #52]	; (800289c <SystemInit+0x44>)
 8002866:	400a      	ands	r2, r1
 8002868:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002870:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002874:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800287c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800287e:	685a      	ldr	r2, [r3, #4]
 8002880:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002884:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002886:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800288a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800288c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002890:	4b03      	ldr	r3, [pc, #12]	; (80028a0 <SystemInit+0x48>)
 8002892:	609a      	str	r2, [r3, #8]
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	40021000 	.word	0x40021000
 800289c:	f8ff0000 	.word	0xf8ff0000
 80028a0:	e000ed00 	.word	0xe000ed00

080028a4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80028a4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80028a6:	2200      	movs	r2, #0
 80028a8:	490e      	ldr	r1, [pc, #56]	; (80028e4 <MX_USB_DEVICE_Init+0x40>)
 80028aa:	480f      	ldr	r0, [pc, #60]	; (80028e8 <MX_USB_DEVICE_Init+0x44>)
 80028ac:	f7ff fb8a 	bl	8001fc4 <USBD_Init>
 80028b0:	b108      	cbz	r0, 80028b6 <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 80028b2:	f7ff ff47 	bl	8002744 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80028b6:	490d      	ldr	r1, [pc, #52]	; (80028ec <MX_USB_DEVICE_Init+0x48>)
 80028b8:	480b      	ldr	r0, [pc, #44]	; (80028e8 <MX_USB_DEVICE_Init+0x44>)
 80028ba:	f7ff fb98 	bl	8001fee <USBD_RegisterClass>
 80028be:	b108      	cbz	r0, 80028c4 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 80028c0:	f7ff ff40 	bl	8002744 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80028c4:	490a      	ldr	r1, [pc, #40]	; (80028f0 <MX_USB_DEVICE_Init+0x4c>)
 80028c6:	4808      	ldr	r0, [pc, #32]	; (80028e8 <MX_USB_DEVICE_Init+0x44>)
 80028c8:	f7ff fb3d 	bl	8001f46 <USBD_CDC_RegisterInterface>
 80028cc:	b108      	cbz	r0, 80028d2 <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 80028ce:	f7ff ff39 	bl	8002744 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80028d2:	4805      	ldr	r0, [pc, #20]	; (80028e8 <MX_USB_DEVICE_Init+0x44>)
 80028d4:	f7ff fb92 	bl	8001ffc <USBD_Start>
 80028d8:	b118      	cbz	r0, 80028e2 <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80028da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80028de:	f7ff bf31 	b.w	8002744 <Error_Handler>
 80028e2:	bd08      	pop	{r3, pc}
 80028e4:	2000012c 	.word	0x2000012c
 80028e8:	20000470 	.word	0x20000470
 80028ec:	20000008 	.word	0x20000008
 80028f0:	2000011c 	.word	0x2000011c

080028f4 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 80028f4:	2000      	movs	r0, #0
 80028f6:	4770      	bx	lr

080028f8 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 80028f8:	2000      	movs	r0, #0
 80028fa:	4770      	bx	lr

080028fc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80028fc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 6 */
  HAL_UART_Transmit(&huart1, Buf, *Len, 1000); // отправка в USB принятого по USB
 80028fe:	880a      	ldrh	r2, [r1, #0]
 8002900:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002904:	4601      	mov	r1, r0
 8002906:	4804      	ldr	r0, [pc, #16]	; (8002918 <CDC_Receive_FS+0x1c>)
 8002908:	f7fe fdbe 	bl	8001488 <HAL_UART_Transmit>

  //USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800290c:	4803      	ldr	r0, [pc, #12]	; (800291c <CDC_Receive_FS+0x20>)
 800290e:	f7ff fb46 	bl	8001f9e <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8002912:	2000      	movs	r0, #0
 8002914:	bd08      	pop	{r3, pc}
 8002916:	bf00      	nop
 8002918:	20000430 	.word	0x20000430
 800291c:	20000470 	.word	0x20000470

08002920 <CDC_Init_FS>:
{
 8002920:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8002922:	4c06      	ldr	r4, [pc, #24]	; (800293c <CDC_Init_FS+0x1c>)
 8002924:	2200      	movs	r2, #0
 8002926:	4906      	ldr	r1, [pc, #24]	; (8002940 <CDC_Init_FS+0x20>)
 8002928:	4620      	mov	r0, r4
 800292a:	f7ff fb13 	bl	8001f54 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800292e:	4905      	ldr	r1, [pc, #20]	; (8002944 <CDC_Init_FS+0x24>)
 8002930:	4620      	mov	r0, r4
 8002932:	f7ff fb17 	bl	8001f64 <USBD_CDC_SetRxBuffer>
}
 8002936:	2000      	movs	r0, #0
 8002938:	bd10      	pop	{r4, pc}
 800293a:	bf00      	nop
 800293c:	20000470 	.word	0x20000470
 8002940:	20000a7c 	.word	0x20000a7c
 8002944:	20000694 	.word	0x20000694

08002948 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8002948:	b510      	push	{r4, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800294a:	4c09      	ldr	r4, [pc, #36]	; (8002970 <CDC_Transmit_FS+0x28>)
{
 800294c:	460a      	mov	r2, r1
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800294e:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  if (hcdc->TxState != 0){
 8002952:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002956:	b943      	cbnz	r3, 800296a <CDC_Transmit_FS+0x22>
    return USBD_BUSY;
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8002958:	4601      	mov	r1, r0
 800295a:	4620      	mov	r0, r4
 800295c:	f7ff fafa 	bl	8001f54 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8002960:	4620      	mov	r0, r4
  /* USER CODE END 7 */
  return result;
}
 8002962:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8002966:	f7ff bb03 	b.w	8001f70 <USBD_CDC_TransmitPacket>
}
 800296a:	2001      	movs	r0, #1
 800296c:	bd10      	pop	{r4, pc}
 800296e:	bf00      	nop
 8002970:	20000470 	.word	0x20000470

08002974 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002974:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 8002976:	4b0d      	ldr	r3, [pc, #52]	; (80029ac <HAL_PCD_MspInit+0x38>)
 8002978:	6802      	ldr	r2, [r0, #0]
 800297a:	429a      	cmp	r2, r3
 800297c:	d112      	bne.n	80029a4 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800297e:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8002982:	69da      	ldr	r2, [r3, #28]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002984:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 8002986:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800298a:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800298c:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 800298e:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002990:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 8002992:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002996:	9301      	str	r3, [sp, #4]
 8002998:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800299a:	f7fd fc4b 	bl	8000234 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800299e:	2014      	movs	r0, #20
 80029a0:	f7fd fc7c 	bl	800029c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80029a4:	b003      	add	sp, #12
 80029a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80029aa:	bf00      	nop
 80029ac:	40005c00 	.word	0x40005c00

080029b0 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80029b0:	f200 412c 	addw	r1, r0, #1068	; 0x42c
 80029b4:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 80029b8:	f7ff bb37 	b.w	800202a <USBD_LL_SetupStage>

080029bc <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80029bc:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 80029c0:	f8d3 223c 	ldr.w	r2, [r3, #572]	; 0x23c
 80029c4:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 80029c8:	f7ff bb5c 	b.w	8002084 <USBD_LL_DataOutStage>

080029cc <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80029cc:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 80029d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029d2:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 80029d6:	f7ff bb87 	b.w	80020e8 <USBD_LL_DataInStage>

080029da <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80029da:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 80029de:	f7ff bc03 	b.w	80021e8 <USBD_LL_SOF>

080029e2 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80029e2:	6883      	ldr	r3, [r0, #8]
{ 
 80029e4:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80029e6:	2b02      	cmp	r3, #2
{ 
 80029e8:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80029ea:	d001      	beq.n	80029f0 <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 80029ec:	f7ff feaa 	bl	8002744 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80029f0:	f8d4 045c 	ldr.w	r0, [r4, #1116]	; 0x45c
 80029f4:	2101      	movs	r1, #1
 80029f6:	f7ff fbe5 	bl	80021c4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80029fa:	f8d4 045c 	ldr.w	r0, [r4, #1116]	; 0x45c
}
 80029fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8002a02:	f7ff bbc0 	b.w	8002186 <USBD_LL_Reset>
	...

08002a08 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8002a08:	b510      	push	{r4, lr}
 8002a0a:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8002a0c:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8002a10:	f7ff fbdb 	bl	80021ca <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8002a14:	69a3      	ldr	r3, [r4, #24]
 8002a16:	b123      	cbz	r3, 8002a22 <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8002a18:	4a02      	ldr	r2, [pc, #8]	; (8002a24 <HAL_PCD_SuspendCallback+0x1c>)
 8002a1a:	6913      	ldr	r3, [r2, #16]
 8002a1c:	f043 0306 	orr.w	r3, r3, #6
 8002a20:	6113      	str	r3, [r2, #16]
 8002a22:	bd10      	pop	{r4, pc}
 8002a24:	e000ed00 	.word	0xe000ed00

08002a28 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8002a28:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8002a2c:	f7ff bbd6 	b.w	80021dc <USBD_LL_Resume>

08002a30 <USBD_LL_Init>:
  hpcd_USB_FS.pData = pdev;
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8002a30:	2302      	movs	r3, #2
 8002a32:	2208      	movs	r2, #8
{
 8002a34:	b510      	push	{r4, lr}
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8002a36:	491c      	ldr	r1, [pc, #112]	; (8002aa8 <USBD_LL_Init+0x78>)
{
 8002a38:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 8002a3a:	481c      	ldr	r0, [pc, #112]	; (8002aac <USBD_LL_Init+0x7c>)
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8002a3c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8002a40:	2300      	movs	r3, #0
  hpcd_USB_FS.pData = pdev;
 8002a42:	f8c0 445c 	str.w	r4, [r0, #1116]	; 0x45c
  pdev->pData = &hpcd_USB_FS;
 8002a46:	f8c4 0220 	str.w	r0, [r4, #544]	; 0x220
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8002a4a:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8002a4c:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8002a4e:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8002a50:	f7fd fd2b 	bl	80004aa <HAL_PCD_Init>
 8002a54:	b108      	cbz	r0, 8002a5a <USBD_LL_Init+0x2a>
  {
    Error_Handler( );
 8002a56:	f7ff fe75 	bl	8002744 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	2318      	movs	r3, #24
 8002a5e:	4611      	mov	r1, r2
 8002a60:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8002a64:	f7fe f8f2 	bl	8000c4c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8002a68:	2358      	movs	r3, #88	; 0x58
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	2180      	movs	r1, #128	; 0x80
 8002a6e:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8002a72:	f7fe f8eb 	bl	8000c4c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8002a76:	23c0      	movs	r3, #192	; 0xc0
 8002a78:	2200      	movs	r2, #0
 8002a7a:	2181      	movs	r1, #129	; 0x81
 8002a7c:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8002a80:	f7fe f8e4 	bl	8000c4c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8002a84:	f44f 7388 	mov.w	r3, #272	; 0x110
 8002a88:	2200      	movs	r2, #0
 8002a8a:	2101      	movs	r1, #1
 8002a8c:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8002a90:	f7fe f8dc 	bl	8000c4c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8002a94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a98:	2200      	movs	r2, #0
 8002a9a:	2182      	movs	r1, #130	; 0x82
 8002a9c:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8002aa0:	f7fe f8d4 	bl	8000c4c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
}
 8002aa4:	2000      	movs	r0, #0
 8002aa6:	bd10      	pop	{r4, pc}
 8002aa8:	40005c00 	.word	0x40005c00
 8002aac:	20000e64 	.word	0x20000e64

08002ab0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8002ab0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8002ab2:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002ab6:	f7fd fd61 	bl	800057c <HAL_PCD_Start>
 8002aba:	2803      	cmp	r0, #3
 8002abc:	bf9a      	itte	ls
 8002abe:	4b02      	ldrls	r3, [pc, #8]	; (8002ac8 <USBD_LL_Start+0x18>)
 8002ac0:	5c18      	ldrbls	r0, [r3, r0]
 8002ac2:	2002      	movhi	r0, #2
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8002ac4:	bd08      	pop	{r3, pc}
 8002ac6:	bf00      	nop
 8002ac8:	08003633 	.word	0x08003633

08002acc <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8002acc:	b510      	push	{r4, lr}
 8002ace:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8002ad0:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	4622      	mov	r2, r4
 8002ad8:	f7fd fd7b 	bl	80005d2 <HAL_PCD_EP_Open>
 8002adc:	2803      	cmp	r0, #3
 8002ade:	bf9a      	itte	ls
 8002ae0:	4b01      	ldrls	r3, [pc, #4]	; (8002ae8 <USBD_LL_OpenEP+0x1c>)
 8002ae2:	5c18      	ldrbls	r0, [r3, r0]
 8002ae4:	2002      	movhi	r0, #2

  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;
}
 8002ae6:	bd10      	pop	{r4, pc}
 8002ae8:	08003633 	.word	0x08003633

08002aec <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002aec:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8002aee:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002af2:	f7fd fd91 	bl	8000618 <HAL_PCD_EP_Close>
 8002af6:	2803      	cmp	r0, #3
 8002af8:	bf9a      	itte	ls
 8002afa:	4b02      	ldrls	r3, [pc, #8]	; (8002b04 <USBD_LL_CloseEP+0x18>)
 8002afc:	5c18      	ldrbls	r0, [r3, r0]
 8002afe:	2002      	movhi	r0, #2
      
  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;  
}
 8002b00:	bd08      	pop	{r3, pc}
 8002b02:	bf00      	nop
 8002b04:	08003633 	.word	0x08003633

08002b08 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002b08:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8002b0a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002b0e:	f7fe f851 	bl	8000bb4 <HAL_PCD_EP_SetStall>
 8002b12:	2803      	cmp	r0, #3
 8002b14:	bf9a      	itte	ls
 8002b16:	4b02      	ldrls	r3, [pc, #8]	; (8002b20 <USBD_LL_StallEP+0x18>)
 8002b18:	5c18      	ldrbls	r0, [r3, r0]
 8002b1a:	2002      	movhi	r0, #2

  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;  
}
 8002b1c:	bd08      	pop	{r3, pc}
 8002b1e:	bf00      	nop
 8002b20:	08003633 	.word	0x08003633

08002b24 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002b24:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8002b26:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002b2a:	f7fe f86c 	bl	8000c06 <HAL_PCD_EP_ClrStall>
 8002b2e:	2803      	cmp	r0, #3
 8002b30:	bf9a      	itte	ls
 8002b32:	4b02      	ldrls	r3, [pc, #8]	; (8002b3c <USBD_LL_ClearStallEP+0x18>)
 8002b34:	5c18      	ldrbls	r0, [r3, r0]
 8002b36:	2002      	movhi	r0, #2
     
  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status; 
}
 8002b38:	bd08      	pop	{r3, pc}
 8002b3a:	bf00      	nop
 8002b3c:	08003633 	.word	0x08003633

08002b40 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8002b40:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8002b42:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8002b46:	bf45      	ittet	mi
 8002b48:	f001 017f 	andmi.w	r1, r1, #127	; 0x7f
 8002b4c:	eb03 1341 	addmi.w	r3, r3, r1, lsl #5
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8002b50:	eb03 1341 	addpl.w	r3, r3, r1, lsl #5
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8002b54:	f893 002a 	ldrbmi.w	r0, [r3, #42]	; 0x2a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8002b58:	bf58      	it	pl
 8002b5a:	f893 022a 	ldrbpl.w	r0, [r3, #554]	; 0x22a
  }
}
 8002b5e:	4770      	bx	lr

08002b60 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8002b60:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8002b62:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002b66:	f7fd fd20 	bl	80005aa <HAL_PCD_SetAddress>
 8002b6a:	2803      	cmp	r0, #3
 8002b6c:	bf9a      	itte	ls
 8002b6e:	4b02      	ldrls	r3, [pc, #8]	; (8002b78 <USBD_LL_SetUSBAddress+0x18>)
 8002b70:	5c18      	ldrbls	r0, [r3, r0]
 8002b72:	2002      	movhi	r0, #2
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;  
}
 8002b74:	bd08      	pop	{r3, pc}
 8002b76:	bf00      	nop
 8002b78:	08003633 	.word	0x08003633

08002b7c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8002b7c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8002b7e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002b82:	f7fd fd89 	bl	8000698 <HAL_PCD_EP_Transmit>
 8002b86:	2803      	cmp	r0, #3
 8002b88:	bf9a      	itte	ls
 8002b8a:	4b02      	ldrls	r3, [pc, #8]	; (8002b94 <USBD_LL_Transmit+0x18>)
 8002b8c:	5c18      	ldrbls	r0, [r3, r0]
 8002b8e:	2002      	movhi	r0, #2
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;    
}
 8002b90:	bd08      	pop	{r3, pc}
 8002b92:	bf00      	nop
 8002b94:	08003633 	.word	0x08003633

08002b98 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8002b98:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8002b9a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002b9e:	f7fd fd5c 	bl	800065a <HAL_PCD_EP_Receive>
 8002ba2:	2803      	cmp	r0, #3
 8002ba4:	bf9a      	itte	ls
 8002ba6:	4b02      	ldrls	r3, [pc, #8]	; (8002bb0 <USBD_LL_PrepareReceive+0x18>)
 8002ba8:	5c18      	ldrbls	r0, [r3, r0]
 8002baa:	2002      	movhi	r0, #2
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  	
  return usb_status; 
}
 8002bac:	bd08      	pop	{r3, pc}
 8002bae:	bf00      	nop
 8002bb0:	08003633 	.word	0x08003633

08002bb4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002bb4:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8002bb6:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002bba:	f7fd fd66 	bl	800068a <HAL_PCD_EP_GetRxCount>
}
 8002bbe:	bd08      	pop	{r3, pc}

08002bc0 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 8002bc0:	4800      	ldr	r0, [pc, #0]	; (8002bc4 <USBD_static_malloc+0x4>)
 8002bc2:	4770      	bx	lr
 8002bc4:	20000204 	.word	0x20000204

08002bc8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8002bc8:	4770      	bx	lr

08002bca <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8002bca:	4770      	bx	lr

08002bcc <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8002bcc:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8002bce:	4801      	ldr	r0, [pc, #4]	; (8002bd4 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8002bd0:	800b      	strh	r3, [r1, #0]
}
 8002bd2:	4770      	bx	lr
 8002bd4:	20000148 	.word	0x20000148

08002bd8 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8002bd8:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8002bda:	4801      	ldr	r0, [pc, #4]	; (8002be0 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8002bdc:	800b      	strh	r3, [r1, #0]
}
 8002bde:	4770      	bx	lr
 8002be0:	2000015c 	.word	0x2000015c

08002be4 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8002be4:	2300      	movs	r3, #0
{
 8002be6:	b530      	push	{r4, r5, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8002be8:	461d      	mov	r5, r3
  for (idx = 0; idx < len; idx++)
 8002bea:	b2dc      	uxtb	r4, r3
 8002bec:	42a2      	cmp	r2, r4
 8002bee:	d800      	bhi.n	8002bf2 <IntToUnicode+0xe>
  }
}
 8002bf0:	bd30      	pop	{r4, r5, pc}
    if (((value >> 28)) < 0xA)
 8002bf2:	0f04      	lsrs	r4, r0, #28
 8002bf4:	2c09      	cmp	r4, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 8002bf6:	bf94      	ite	ls
 8002bf8:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8002bfa:	3437      	addhi	r4, #55	; 0x37
 8002bfc:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 8002c00:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    value = value << 4;
 8002c04:	0100      	lsls	r0, r0, #4
    pbuf[2 * idx + 1] = 0;
 8002c06:	7065      	strb	r5, [r4, #1]
 8002c08:	3301      	adds	r3, #1
 8002c0a:	e7ee      	b.n	8002bea <IntToUnicode+0x6>

08002c0c <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8002c0c:	231a      	movs	r3, #26
{
 8002c0e:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8002c10:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8002c12:	4b09      	ldr	r3, [pc, #36]	; (8002c38 <USBD_FS_SerialStrDescriptor+0x2c>)
 8002c14:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8002c16:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 8002c18:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 8002c1a:	18c0      	adds	r0, r0, r3
 8002c1c:	d00a      	beq.n	8002c34 <USBD_FS_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8002c1e:	4b07      	ldr	r3, [pc, #28]	; (8002c3c <USBD_FS_SerialStrDescriptor+0x30>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8002c20:	2208      	movs	r2, #8
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8002c22:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8002c24:	4906      	ldr	r1, [pc, #24]	; (8002c40 <USBD_FS_SerialStrDescriptor+0x34>)
 8002c26:	f7ff ffdd 	bl	8002be4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8002c2a:	2204      	movs	r2, #4
 8002c2c:	4905      	ldr	r1, [pc, #20]	; (8002c44 <USBD_FS_SerialStrDescriptor+0x38>)
 8002c2e:	4620      	mov	r0, r4
 8002c30:	f7ff ffd8 	bl	8002be4 <IntToUnicode>
}
 8002c34:	4804      	ldr	r0, [pc, #16]	; (8002c48 <USBD_FS_SerialStrDescriptor+0x3c>)
 8002c36:	bd10      	pop	{r4, pc}
 8002c38:	1ffff7e8 	.word	0x1ffff7e8
 8002c3c:	1ffff7ec 	.word	0x1ffff7ec
 8002c40:	20000162 	.word	0x20000162
 8002c44:	20000172 	.word	0x20000172
 8002c48:	20000160 	.word	0x20000160

08002c4c <USBD_FS_ManufacturerStrDescriptor>:
{
 8002c4c:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8002c4e:	4c04      	ldr	r4, [pc, #16]	; (8002c60 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8002c50:	460a      	mov	r2, r1
 8002c52:	4804      	ldr	r0, [pc, #16]	; (8002c64 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8002c54:	4621      	mov	r1, r4
 8002c56:	f7ff fc68 	bl	800252a <USBD_GetString>
}
 8002c5a:	4620      	mov	r0, r4
 8002c5c:	bd10      	pop	{r4, pc}
 8002c5e:	bf00      	nop
 8002c60:	200012c4 	.word	0x200012c4
 8002c64:	08003650 	.word	0x08003650

08002c68 <USBD_FS_ProductStrDescriptor>:
{
 8002c68:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8002c6a:	4c04      	ldr	r4, [pc, #16]	; (8002c7c <USBD_FS_ProductStrDescriptor+0x14>)
 8002c6c:	460a      	mov	r2, r1
 8002c6e:	4804      	ldr	r0, [pc, #16]	; (8002c80 <USBD_FS_ProductStrDescriptor+0x18>)
 8002c70:	4621      	mov	r1, r4
 8002c72:	f7ff fc5a 	bl	800252a <USBD_GetString>
}
 8002c76:	4620      	mov	r0, r4
 8002c78:	bd10      	pop	{r4, pc}
 8002c7a:	bf00      	nop
 8002c7c:	200012c4 	.word	0x200012c4
 8002c80:	08003663 	.word	0x08003663

08002c84 <USBD_FS_ConfigStrDescriptor>:
{
 8002c84:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8002c86:	4c04      	ldr	r4, [pc, #16]	; (8002c98 <USBD_FS_ConfigStrDescriptor+0x14>)
 8002c88:	460a      	mov	r2, r1
 8002c8a:	4804      	ldr	r0, [pc, #16]	; (8002c9c <USBD_FS_ConfigStrDescriptor+0x18>)
 8002c8c:	4621      	mov	r1, r4
 8002c8e:	f7ff fc4c 	bl	800252a <USBD_GetString>
}
 8002c92:	4620      	mov	r0, r4
 8002c94:	bd10      	pop	{r4, pc}
 8002c96:	bf00      	nop
 8002c98:	200012c4 	.word	0x200012c4
 8002c9c:	08003637 	.word	0x08003637

08002ca0 <USBD_FS_InterfaceStrDescriptor>:
{
 8002ca0:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8002ca2:	4c04      	ldr	r4, [pc, #16]	; (8002cb4 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8002ca4:	460a      	mov	r2, r1
 8002ca6:	4804      	ldr	r0, [pc, #16]	; (8002cb8 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8002ca8:	4621      	mov	r1, r4
 8002caa:	f7ff fc3e 	bl	800252a <USBD_GetString>
}
 8002cae:	4620      	mov	r0, r4
 8002cb0:	bd10      	pop	{r4, pc}
 8002cb2:	bf00      	nop
 8002cb4:	200012c4 	.word	0x200012c4
 8002cb8:	08003642 	.word	0x08003642

08002cbc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002cbc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002cbe:	e003      	b.n	8002cc8 <LoopCopyDataInit>

08002cc0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002cc0:	4b0b      	ldr	r3, [pc, #44]	; (8002cf0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002cc2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002cc4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002cc6:	3104      	adds	r1, #4

08002cc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002cc8:	480a      	ldr	r0, [pc, #40]	; (8002cf4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002cca:	4b0b      	ldr	r3, [pc, #44]	; (8002cf8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002ccc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002cce:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002cd0:	d3f6      	bcc.n	8002cc0 <CopyDataInit>
  ldr r2, =_sbss
 8002cd2:	4a0a      	ldr	r2, [pc, #40]	; (8002cfc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002cd4:	e002      	b.n	8002cdc <LoopFillZerobss>

08002cd6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002cd6:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002cd8:	f842 3b04 	str.w	r3, [r2], #4

08002cdc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002cdc:	4b08      	ldr	r3, [pc, #32]	; (8002d00 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002cde:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002ce0:	d3f9      	bcc.n	8002cd6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002ce2:	f7ff fdb9 	bl	8002858 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ce6:	f000 f815 	bl	8002d14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002cea:	f7ff fcd7 	bl	800269c <main>
  bx lr
 8002cee:	4770      	bx	lr
  ldr r3, =_sidata
 8002cf0:	080036b4 	.word	0x080036b4
  ldr r0, =_sdata
 8002cf4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002cf8:	200001e0 	.word	0x200001e0
  ldr r2, =_sbss
 8002cfc:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 8002d00:	200014c8 	.word	0x200014c8

08002d04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d04:	e7fe      	b.n	8002d04 <ADC1_2_IRQHandler>
	...

08002d08 <__errno>:
 8002d08:	4b01      	ldr	r3, [pc, #4]	; (8002d10 <__errno+0x8>)
 8002d0a:	6818      	ldr	r0, [r3, #0]
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	2000017c 	.word	0x2000017c

08002d14 <__libc_init_array>:
 8002d14:	b570      	push	{r4, r5, r6, lr}
 8002d16:	2500      	movs	r5, #0
 8002d18:	4e0c      	ldr	r6, [pc, #48]	; (8002d4c <__libc_init_array+0x38>)
 8002d1a:	4c0d      	ldr	r4, [pc, #52]	; (8002d50 <__libc_init_array+0x3c>)
 8002d1c:	1ba4      	subs	r4, r4, r6
 8002d1e:	10a4      	asrs	r4, r4, #2
 8002d20:	42a5      	cmp	r5, r4
 8002d22:	d109      	bne.n	8002d38 <__libc_init_array+0x24>
 8002d24:	f000 fc5e 	bl	80035e4 <_init>
 8002d28:	2500      	movs	r5, #0
 8002d2a:	4e0a      	ldr	r6, [pc, #40]	; (8002d54 <__libc_init_array+0x40>)
 8002d2c:	4c0a      	ldr	r4, [pc, #40]	; (8002d58 <__libc_init_array+0x44>)
 8002d2e:	1ba4      	subs	r4, r4, r6
 8002d30:	10a4      	asrs	r4, r4, #2
 8002d32:	42a5      	cmp	r5, r4
 8002d34:	d105      	bne.n	8002d42 <__libc_init_array+0x2e>
 8002d36:	bd70      	pop	{r4, r5, r6, pc}
 8002d38:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d3c:	4798      	blx	r3
 8002d3e:	3501      	adds	r5, #1
 8002d40:	e7ee      	b.n	8002d20 <__libc_init_array+0xc>
 8002d42:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d46:	4798      	blx	r3
 8002d48:	3501      	adds	r5, #1
 8002d4a:	e7f2      	b.n	8002d32 <__libc_init_array+0x1e>
 8002d4c:	080036ac 	.word	0x080036ac
 8002d50:	080036ac 	.word	0x080036ac
 8002d54:	080036ac 	.word	0x080036ac
 8002d58:	080036b0 	.word	0x080036b0

08002d5c <memset>:
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	4402      	add	r2, r0
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d100      	bne.n	8002d66 <memset+0xa>
 8002d64:	4770      	bx	lr
 8002d66:	f803 1b01 	strb.w	r1, [r3], #1
 8002d6a:	e7f9      	b.n	8002d60 <memset+0x4>

08002d6c <sniprintf>:
 8002d6c:	b40c      	push	{r2, r3}
 8002d6e:	b530      	push	{r4, r5, lr}
 8002d70:	4b17      	ldr	r3, [pc, #92]	; (8002dd0 <sniprintf+0x64>)
 8002d72:	1e0c      	subs	r4, r1, #0
 8002d74:	b09d      	sub	sp, #116	; 0x74
 8002d76:	681d      	ldr	r5, [r3, #0]
 8002d78:	da08      	bge.n	8002d8c <sniprintf+0x20>
 8002d7a:	238b      	movs	r3, #139	; 0x8b
 8002d7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d80:	602b      	str	r3, [r5, #0]
 8002d82:	b01d      	add	sp, #116	; 0x74
 8002d84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002d88:	b002      	add	sp, #8
 8002d8a:	4770      	bx	lr
 8002d8c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8002d90:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002d94:	bf0c      	ite	eq
 8002d96:	4623      	moveq	r3, r4
 8002d98:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8002d9c:	9304      	str	r3, [sp, #16]
 8002d9e:	9307      	str	r3, [sp, #28]
 8002da0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002da4:	9002      	str	r0, [sp, #8]
 8002da6:	9006      	str	r0, [sp, #24]
 8002da8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002dac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002dae:	ab21      	add	r3, sp, #132	; 0x84
 8002db0:	a902      	add	r1, sp, #8
 8002db2:	4628      	mov	r0, r5
 8002db4:	9301      	str	r3, [sp, #4]
 8002db6:	f000 f869 	bl	8002e8c <_svfiprintf_r>
 8002dba:	1c43      	adds	r3, r0, #1
 8002dbc:	bfbc      	itt	lt
 8002dbe:	238b      	movlt	r3, #139	; 0x8b
 8002dc0:	602b      	strlt	r3, [r5, #0]
 8002dc2:	2c00      	cmp	r4, #0
 8002dc4:	d0dd      	beq.n	8002d82 <sniprintf+0x16>
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	9b02      	ldr	r3, [sp, #8]
 8002dca:	701a      	strb	r2, [r3, #0]
 8002dcc:	e7d9      	b.n	8002d82 <sniprintf+0x16>
 8002dce:	bf00      	nop
 8002dd0:	2000017c 	.word	0x2000017c

08002dd4 <__ssputs_r>:
 8002dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002dd8:	688e      	ldr	r6, [r1, #8]
 8002dda:	4682      	mov	sl, r0
 8002ddc:	429e      	cmp	r6, r3
 8002dde:	460c      	mov	r4, r1
 8002de0:	4691      	mov	r9, r2
 8002de2:	4698      	mov	r8, r3
 8002de4:	d835      	bhi.n	8002e52 <__ssputs_r+0x7e>
 8002de6:	898a      	ldrh	r2, [r1, #12]
 8002de8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002dec:	d031      	beq.n	8002e52 <__ssputs_r+0x7e>
 8002dee:	2302      	movs	r3, #2
 8002df0:	6825      	ldr	r5, [r4, #0]
 8002df2:	6909      	ldr	r1, [r1, #16]
 8002df4:	1a6f      	subs	r7, r5, r1
 8002df6:	6965      	ldr	r5, [r4, #20]
 8002df8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002dfc:	fb95 f5f3 	sdiv	r5, r5, r3
 8002e00:	f108 0301 	add.w	r3, r8, #1
 8002e04:	443b      	add	r3, r7
 8002e06:	429d      	cmp	r5, r3
 8002e08:	bf38      	it	cc
 8002e0a:	461d      	movcc	r5, r3
 8002e0c:	0553      	lsls	r3, r2, #21
 8002e0e:	d531      	bpl.n	8002e74 <__ssputs_r+0xa0>
 8002e10:	4629      	mov	r1, r5
 8002e12:	f000 fb47 	bl	80034a4 <_malloc_r>
 8002e16:	4606      	mov	r6, r0
 8002e18:	b950      	cbnz	r0, 8002e30 <__ssputs_r+0x5c>
 8002e1a:	230c      	movs	r3, #12
 8002e1c:	f8ca 3000 	str.w	r3, [sl]
 8002e20:	89a3      	ldrh	r3, [r4, #12]
 8002e22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e2a:	81a3      	strh	r3, [r4, #12]
 8002e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e30:	463a      	mov	r2, r7
 8002e32:	6921      	ldr	r1, [r4, #16]
 8002e34:	f000 fac4 	bl	80033c0 <memcpy>
 8002e38:	89a3      	ldrh	r3, [r4, #12]
 8002e3a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002e3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e42:	81a3      	strh	r3, [r4, #12]
 8002e44:	6126      	str	r6, [r4, #16]
 8002e46:	443e      	add	r6, r7
 8002e48:	6026      	str	r6, [r4, #0]
 8002e4a:	4646      	mov	r6, r8
 8002e4c:	6165      	str	r5, [r4, #20]
 8002e4e:	1bed      	subs	r5, r5, r7
 8002e50:	60a5      	str	r5, [r4, #8]
 8002e52:	4546      	cmp	r6, r8
 8002e54:	bf28      	it	cs
 8002e56:	4646      	movcs	r6, r8
 8002e58:	4649      	mov	r1, r9
 8002e5a:	4632      	mov	r2, r6
 8002e5c:	6820      	ldr	r0, [r4, #0]
 8002e5e:	f000 faba 	bl	80033d6 <memmove>
 8002e62:	68a3      	ldr	r3, [r4, #8]
 8002e64:	2000      	movs	r0, #0
 8002e66:	1b9b      	subs	r3, r3, r6
 8002e68:	60a3      	str	r3, [r4, #8]
 8002e6a:	6823      	ldr	r3, [r4, #0]
 8002e6c:	441e      	add	r6, r3
 8002e6e:	6026      	str	r6, [r4, #0]
 8002e70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e74:	462a      	mov	r2, r5
 8002e76:	f000 fb73 	bl	8003560 <_realloc_r>
 8002e7a:	4606      	mov	r6, r0
 8002e7c:	2800      	cmp	r0, #0
 8002e7e:	d1e1      	bne.n	8002e44 <__ssputs_r+0x70>
 8002e80:	6921      	ldr	r1, [r4, #16]
 8002e82:	4650      	mov	r0, sl
 8002e84:	f000 fac2 	bl	800340c <_free_r>
 8002e88:	e7c7      	b.n	8002e1a <__ssputs_r+0x46>
	...

08002e8c <_svfiprintf_r>:
 8002e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e90:	b09d      	sub	sp, #116	; 0x74
 8002e92:	9303      	str	r3, [sp, #12]
 8002e94:	898b      	ldrh	r3, [r1, #12]
 8002e96:	4680      	mov	r8, r0
 8002e98:	061c      	lsls	r4, r3, #24
 8002e9a:	460d      	mov	r5, r1
 8002e9c:	4616      	mov	r6, r2
 8002e9e:	d50f      	bpl.n	8002ec0 <_svfiprintf_r+0x34>
 8002ea0:	690b      	ldr	r3, [r1, #16]
 8002ea2:	b96b      	cbnz	r3, 8002ec0 <_svfiprintf_r+0x34>
 8002ea4:	2140      	movs	r1, #64	; 0x40
 8002ea6:	f000 fafd 	bl	80034a4 <_malloc_r>
 8002eaa:	6028      	str	r0, [r5, #0]
 8002eac:	6128      	str	r0, [r5, #16]
 8002eae:	b928      	cbnz	r0, 8002ebc <_svfiprintf_r+0x30>
 8002eb0:	230c      	movs	r3, #12
 8002eb2:	f8c8 3000 	str.w	r3, [r8]
 8002eb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002eba:	e0c4      	b.n	8003046 <_svfiprintf_r+0x1ba>
 8002ebc:	2340      	movs	r3, #64	; 0x40
 8002ebe:	616b      	str	r3, [r5, #20]
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	9309      	str	r3, [sp, #36]	; 0x24
 8002ec4:	2320      	movs	r3, #32
 8002ec6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002eca:	2330      	movs	r3, #48	; 0x30
 8002ecc:	f04f 0b01 	mov.w	fp, #1
 8002ed0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002ed4:	4637      	mov	r7, r6
 8002ed6:	463c      	mov	r4, r7
 8002ed8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d13c      	bne.n	8002f5a <_svfiprintf_r+0xce>
 8002ee0:	ebb7 0a06 	subs.w	sl, r7, r6
 8002ee4:	d00b      	beq.n	8002efe <_svfiprintf_r+0x72>
 8002ee6:	4653      	mov	r3, sl
 8002ee8:	4632      	mov	r2, r6
 8002eea:	4629      	mov	r1, r5
 8002eec:	4640      	mov	r0, r8
 8002eee:	f7ff ff71 	bl	8002dd4 <__ssputs_r>
 8002ef2:	3001      	adds	r0, #1
 8002ef4:	f000 80a2 	beq.w	800303c <_svfiprintf_r+0x1b0>
 8002ef8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002efa:	4453      	add	r3, sl
 8002efc:	9309      	str	r3, [sp, #36]	; 0x24
 8002efe:	783b      	ldrb	r3, [r7, #0]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	f000 809b 	beq.w	800303c <_svfiprintf_r+0x1b0>
 8002f06:	2300      	movs	r3, #0
 8002f08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002f0c:	9304      	str	r3, [sp, #16]
 8002f0e:	9307      	str	r3, [sp, #28]
 8002f10:	9205      	str	r2, [sp, #20]
 8002f12:	9306      	str	r3, [sp, #24]
 8002f14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002f18:	931a      	str	r3, [sp, #104]	; 0x68
 8002f1a:	2205      	movs	r2, #5
 8002f1c:	7821      	ldrb	r1, [r4, #0]
 8002f1e:	4850      	ldr	r0, [pc, #320]	; (8003060 <_svfiprintf_r+0x1d4>)
 8002f20:	f000 fa40 	bl	80033a4 <memchr>
 8002f24:	1c67      	adds	r7, r4, #1
 8002f26:	9b04      	ldr	r3, [sp, #16]
 8002f28:	b9d8      	cbnz	r0, 8002f62 <_svfiprintf_r+0xd6>
 8002f2a:	06d9      	lsls	r1, r3, #27
 8002f2c:	bf44      	itt	mi
 8002f2e:	2220      	movmi	r2, #32
 8002f30:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002f34:	071a      	lsls	r2, r3, #28
 8002f36:	bf44      	itt	mi
 8002f38:	222b      	movmi	r2, #43	; 0x2b
 8002f3a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002f3e:	7822      	ldrb	r2, [r4, #0]
 8002f40:	2a2a      	cmp	r2, #42	; 0x2a
 8002f42:	d016      	beq.n	8002f72 <_svfiprintf_r+0xe6>
 8002f44:	2100      	movs	r1, #0
 8002f46:	200a      	movs	r0, #10
 8002f48:	9a07      	ldr	r2, [sp, #28]
 8002f4a:	4627      	mov	r7, r4
 8002f4c:	783b      	ldrb	r3, [r7, #0]
 8002f4e:	3401      	adds	r4, #1
 8002f50:	3b30      	subs	r3, #48	; 0x30
 8002f52:	2b09      	cmp	r3, #9
 8002f54:	d950      	bls.n	8002ff8 <_svfiprintf_r+0x16c>
 8002f56:	b1c9      	cbz	r1, 8002f8c <_svfiprintf_r+0x100>
 8002f58:	e011      	b.n	8002f7e <_svfiprintf_r+0xf2>
 8002f5a:	2b25      	cmp	r3, #37	; 0x25
 8002f5c:	d0c0      	beq.n	8002ee0 <_svfiprintf_r+0x54>
 8002f5e:	4627      	mov	r7, r4
 8002f60:	e7b9      	b.n	8002ed6 <_svfiprintf_r+0x4a>
 8002f62:	4a3f      	ldr	r2, [pc, #252]	; (8003060 <_svfiprintf_r+0x1d4>)
 8002f64:	463c      	mov	r4, r7
 8002f66:	1a80      	subs	r0, r0, r2
 8002f68:	fa0b f000 	lsl.w	r0, fp, r0
 8002f6c:	4318      	orrs	r0, r3
 8002f6e:	9004      	str	r0, [sp, #16]
 8002f70:	e7d3      	b.n	8002f1a <_svfiprintf_r+0x8e>
 8002f72:	9a03      	ldr	r2, [sp, #12]
 8002f74:	1d11      	adds	r1, r2, #4
 8002f76:	6812      	ldr	r2, [r2, #0]
 8002f78:	9103      	str	r1, [sp, #12]
 8002f7a:	2a00      	cmp	r2, #0
 8002f7c:	db01      	blt.n	8002f82 <_svfiprintf_r+0xf6>
 8002f7e:	9207      	str	r2, [sp, #28]
 8002f80:	e004      	b.n	8002f8c <_svfiprintf_r+0x100>
 8002f82:	4252      	negs	r2, r2
 8002f84:	f043 0302 	orr.w	r3, r3, #2
 8002f88:	9207      	str	r2, [sp, #28]
 8002f8a:	9304      	str	r3, [sp, #16]
 8002f8c:	783b      	ldrb	r3, [r7, #0]
 8002f8e:	2b2e      	cmp	r3, #46	; 0x2e
 8002f90:	d10d      	bne.n	8002fae <_svfiprintf_r+0x122>
 8002f92:	787b      	ldrb	r3, [r7, #1]
 8002f94:	1c79      	adds	r1, r7, #1
 8002f96:	2b2a      	cmp	r3, #42	; 0x2a
 8002f98:	d132      	bne.n	8003000 <_svfiprintf_r+0x174>
 8002f9a:	9b03      	ldr	r3, [sp, #12]
 8002f9c:	3702      	adds	r7, #2
 8002f9e:	1d1a      	adds	r2, r3, #4
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	9203      	str	r2, [sp, #12]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	bfb8      	it	lt
 8002fa8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002fac:	9305      	str	r3, [sp, #20]
 8002fae:	4c2d      	ldr	r4, [pc, #180]	; (8003064 <_svfiprintf_r+0x1d8>)
 8002fb0:	2203      	movs	r2, #3
 8002fb2:	7839      	ldrb	r1, [r7, #0]
 8002fb4:	4620      	mov	r0, r4
 8002fb6:	f000 f9f5 	bl	80033a4 <memchr>
 8002fba:	b138      	cbz	r0, 8002fcc <_svfiprintf_r+0x140>
 8002fbc:	2340      	movs	r3, #64	; 0x40
 8002fbe:	1b00      	subs	r0, r0, r4
 8002fc0:	fa03 f000 	lsl.w	r0, r3, r0
 8002fc4:	9b04      	ldr	r3, [sp, #16]
 8002fc6:	3701      	adds	r7, #1
 8002fc8:	4303      	orrs	r3, r0
 8002fca:	9304      	str	r3, [sp, #16]
 8002fcc:	7839      	ldrb	r1, [r7, #0]
 8002fce:	2206      	movs	r2, #6
 8002fd0:	4825      	ldr	r0, [pc, #148]	; (8003068 <_svfiprintf_r+0x1dc>)
 8002fd2:	1c7e      	adds	r6, r7, #1
 8002fd4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002fd8:	f000 f9e4 	bl	80033a4 <memchr>
 8002fdc:	2800      	cmp	r0, #0
 8002fde:	d035      	beq.n	800304c <_svfiprintf_r+0x1c0>
 8002fe0:	4b22      	ldr	r3, [pc, #136]	; (800306c <_svfiprintf_r+0x1e0>)
 8002fe2:	b9fb      	cbnz	r3, 8003024 <_svfiprintf_r+0x198>
 8002fe4:	9b03      	ldr	r3, [sp, #12]
 8002fe6:	3307      	adds	r3, #7
 8002fe8:	f023 0307 	bic.w	r3, r3, #7
 8002fec:	3308      	adds	r3, #8
 8002fee:	9303      	str	r3, [sp, #12]
 8002ff0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ff2:	444b      	add	r3, r9
 8002ff4:	9309      	str	r3, [sp, #36]	; 0x24
 8002ff6:	e76d      	b.n	8002ed4 <_svfiprintf_r+0x48>
 8002ff8:	fb00 3202 	mla	r2, r0, r2, r3
 8002ffc:	2101      	movs	r1, #1
 8002ffe:	e7a4      	b.n	8002f4a <_svfiprintf_r+0xbe>
 8003000:	2300      	movs	r3, #0
 8003002:	240a      	movs	r4, #10
 8003004:	4618      	mov	r0, r3
 8003006:	9305      	str	r3, [sp, #20]
 8003008:	460f      	mov	r7, r1
 800300a:	783a      	ldrb	r2, [r7, #0]
 800300c:	3101      	adds	r1, #1
 800300e:	3a30      	subs	r2, #48	; 0x30
 8003010:	2a09      	cmp	r2, #9
 8003012:	d903      	bls.n	800301c <_svfiprintf_r+0x190>
 8003014:	2b00      	cmp	r3, #0
 8003016:	d0ca      	beq.n	8002fae <_svfiprintf_r+0x122>
 8003018:	9005      	str	r0, [sp, #20]
 800301a:	e7c8      	b.n	8002fae <_svfiprintf_r+0x122>
 800301c:	fb04 2000 	mla	r0, r4, r0, r2
 8003020:	2301      	movs	r3, #1
 8003022:	e7f1      	b.n	8003008 <_svfiprintf_r+0x17c>
 8003024:	ab03      	add	r3, sp, #12
 8003026:	9300      	str	r3, [sp, #0]
 8003028:	462a      	mov	r2, r5
 800302a:	4b11      	ldr	r3, [pc, #68]	; (8003070 <_svfiprintf_r+0x1e4>)
 800302c:	a904      	add	r1, sp, #16
 800302e:	4640      	mov	r0, r8
 8003030:	f3af 8000 	nop.w
 8003034:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8003038:	4681      	mov	r9, r0
 800303a:	d1d9      	bne.n	8002ff0 <_svfiprintf_r+0x164>
 800303c:	89ab      	ldrh	r3, [r5, #12]
 800303e:	065b      	lsls	r3, r3, #25
 8003040:	f53f af39 	bmi.w	8002eb6 <_svfiprintf_r+0x2a>
 8003044:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003046:	b01d      	add	sp, #116	; 0x74
 8003048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800304c:	ab03      	add	r3, sp, #12
 800304e:	9300      	str	r3, [sp, #0]
 8003050:	462a      	mov	r2, r5
 8003052:	4b07      	ldr	r3, [pc, #28]	; (8003070 <_svfiprintf_r+0x1e4>)
 8003054:	a904      	add	r1, sp, #16
 8003056:	4640      	mov	r0, r8
 8003058:	f000 f884 	bl	8003164 <_printf_i>
 800305c:	e7ea      	b.n	8003034 <_svfiprintf_r+0x1a8>
 800305e:	bf00      	nop
 8003060:	08003679 	.word	0x08003679
 8003064:	0800367f 	.word	0x0800367f
 8003068:	08003683 	.word	0x08003683
 800306c:	00000000 	.word	0x00000000
 8003070:	08002dd5 	.word	0x08002dd5

08003074 <_printf_common>:
 8003074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003078:	4691      	mov	r9, r2
 800307a:	461f      	mov	r7, r3
 800307c:	688a      	ldr	r2, [r1, #8]
 800307e:	690b      	ldr	r3, [r1, #16]
 8003080:	4606      	mov	r6, r0
 8003082:	4293      	cmp	r3, r2
 8003084:	bfb8      	it	lt
 8003086:	4613      	movlt	r3, r2
 8003088:	f8c9 3000 	str.w	r3, [r9]
 800308c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003090:	460c      	mov	r4, r1
 8003092:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003096:	b112      	cbz	r2, 800309e <_printf_common+0x2a>
 8003098:	3301      	adds	r3, #1
 800309a:	f8c9 3000 	str.w	r3, [r9]
 800309e:	6823      	ldr	r3, [r4, #0]
 80030a0:	0699      	lsls	r1, r3, #26
 80030a2:	bf42      	ittt	mi
 80030a4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80030a8:	3302      	addmi	r3, #2
 80030aa:	f8c9 3000 	strmi.w	r3, [r9]
 80030ae:	6825      	ldr	r5, [r4, #0]
 80030b0:	f015 0506 	ands.w	r5, r5, #6
 80030b4:	d107      	bne.n	80030c6 <_printf_common+0x52>
 80030b6:	f104 0a19 	add.w	sl, r4, #25
 80030ba:	68e3      	ldr	r3, [r4, #12]
 80030bc:	f8d9 2000 	ldr.w	r2, [r9]
 80030c0:	1a9b      	subs	r3, r3, r2
 80030c2:	429d      	cmp	r5, r3
 80030c4:	db2a      	blt.n	800311c <_printf_common+0xa8>
 80030c6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80030ca:	6822      	ldr	r2, [r4, #0]
 80030cc:	3300      	adds	r3, #0
 80030ce:	bf18      	it	ne
 80030d0:	2301      	movne	r3, #1
 80030d2:	0692      	lsls	r2, r2, #26
 80030d4:	d42f      	bmi.n	8003136 <_printf_common+0xc2>
 80030d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80030da:	4639      	mov	r1, r7
 80030dc:	4630      	mov	r0, r6
 80030de:	47c0      	blx	r8
 80030e0:	3001      	adds	r0, #1
 80030e2:	d022      	beq.n	800312a <_printf_common+0xb6>
 80030e4:	6823      	ldr	r3, [r4, #0]
 80030e6:	68e5      	ldr	r5, [r4, #12]
 80030e8:	f003 0306 	and.w	r3, r3, #6
 80030ec:	2b04      	cmp	r3, #4
 80030ee:	bf18      	it	ne
 80030f0:	2500      	movne	r5, #0
 80030f2:	f8d9 2000 	ldr.w	r2, [r9]
 80030f6:	f04f 0900 	mov.w	r9, #0
 80030fa:	bf08      	it	eq
 80030fc:	1aad      	subeq	r5, r5, r2
 80030fe:	68a3      	ldr	r3, [r4, #8]
 8003100:	6922      	ldr	r2, [r4, #16]
 8003102:	bf08      	it	eq
 8003104:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003108:	4293      	cmp	r3, r2
 800310a:	bfc4      	itt	gt
 800310c:	1a9b      	subgt	r3, r3, r2
 800310e:	18ed      	addgt	r5, r5, r3
 8003110:	341a      	adds	r4, #26
 8003112:	454d      	cmp	r5, r9
 8003114:	d11b      	bne.n	800314e <_printf_common+0xda>
 8003116:	2000      	movs	r0, #0
 8003118:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800311c:	2301      	movs	r3, #1
 800311e:	4652      	mov	r2, sl
 8003120:	4639      	mov	r1, r7
 8003122:	4630      	mov	r0, r6
 8003124:	47c0      	blx	r8
 8003126:	3001      	adds	r0, #1
 8003128:	d103      	bne.n	8003132 <_printf_common+0xbe>
 800312a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800312e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003132:	3501      	adds	r5, #1
 8003134:	e7c1      	b.n	80030ba <_printf_common+0x46>
 8003136:	2030      	movs	r0, #48	; 0x30
 8003138:	18e1      	adds	r1, r4, r3
 800313a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800313e:	1c5a      	adds	r2, r3, #1
 8003140:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003144:	4422      	add	r2, r4
 8003146:	3302      	adds	r3, #2
 8003148:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800314c:	e7c3      	b.n	80030d6 <_printf_common+0x62>
 800314e:	2301      	movs	r3, #1
 8003150:	4622      	mov	r2, r4
 8003152:	4639      	mov	r1, r7
 8003154:	4630      	mov	r0, r6
 8003156:	47c0      	blx	r8
 8003158:	3001      	adds	r0, #1
 800315a:	d0e6      	beq.n	800312a <_printf_common+0xb6>
 800315c:	f109 0901 	add.w	r9, r9, #1
 8003160:	e7d7      	b.n	8003112 <_printf_common+0x9e>
	...

08003164 <_printf_i>:
 8003164:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003168:	4617      	mov	r7, r2
 800316a:	7e0a      	ldrb	r2, [r1, #24]
 800316c:	b085      	sub	sp, #20
 800316e:	2a6e      	cmp	r2, #110	; 0x6e
 8003170:	4698      	mov	r8, r3
 8003172:	4606      	mov	r6, r0
 8003174:	460c      	mov	r4, r1
 8003176:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003178:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800317c:	f000 80bc 	beq.w	80032f8 <_printf_i+0x194>
 8003180:	d81a      	bhi.n	80031b8 <_printf_i+0x54>
 8003182:	2a63      	cmp	r2, #99	; 0x63
 8003184:	d02e      	beq.n	80031e4 <_printf_i+0x80>
 8003186:	d80a      	bhi.n	800319e <_printf_i+0x3a>
 8003188:	2a00      	cmp	r2, #0
 800318a:	f000 80c8 	beq.w	800331e <_printf_i+0x1ba>
 800318e:	2a58      	cmp	r2, #88	; 0x58
 8003190:	f000 808a 	beq.w	80032a8 <_printf_i+0x144>
 8003194:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003198:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800319c:	e02a      	b.n	80031f4 <_printf_i+0x90>
 800319e:	2a64      	cmp	r2, #100	; 0x64
 80031a0:	d001      	beq.n	80031a6 <_printf_i+0x42>
 80031a2:	2a69      	cmp	r2, #105	; 0x69
 80031a4:	d1f6      	bne.n	8003194 <_printf_i+0x30>
 80031a6:	6821      	ldr	r1, [r4, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	f011 0f80 	tst.w	r1, #128	; 0x80
 80031ae:	d023      	beq.n	80031f8 <_printf_i+0x94>
 80031b0:	1d11      	adds	r1, r2, #4
 80031b2:	6019      	str	r1, [r3, #0]
 80031b4:	6813      	ldr	r3, [r2, #0]
 80031b6:	e027      	b.n	8003208 <_printf_i+0xa4>
 80031b8:	2a73      	cmp	r2, #115	; 0x73
 80031ba:	f000 80b4 	beq.w	8003326 <_printf_i+0x1c2>
 80031be:	d808      	bhi.n	80031d2 <_printf_i+0x6e>
 80031c0:	2a6f      	cmp	r2, #111	; 0x6f
 80031c2:	d02a      	beq.n	800321a <_printf_i+0xb6>
 80031c4:	2a70      	cmp	r2, #112	; 0x70
 80031c6:	d1e5      	bne.n	8003194 <_printf_i+0x30>
 80031c8:	680a      	ldr	r2, [r1, #0]
 80031ca:	f042 0220 	orr.w	r2, r2, #32
 80031ce:	600a      	str	r2, [r1, #0]
 80031d0:	e003      	b.n	80031da <_printf_i+0x76>
 80031d2:	2a75      	cmp	r2, #117	; 0x75
 80031d4:	d021      	beq.n	800321a <_printf_i+0xb6>
 80031d6:	2a78      	cmp	r2, #120	; 0x78
 80031d8:	d1dc      	bne.n	8003194 <_printf_i+0x30>
 80031da:	2278      	movs	r2, #120	; 0x78
 80031dc:	496f      	ldr	r1, [pc, #444]	; (800339c <_printf_i+0x238>)
 80031de:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80031e2:	e064      	b.n	80032ae <_printf_i+0x14a>
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80031ea:	1d11      	adds	r1, r2, #4
 80031ec:	6019      	str	r1, [r3, #0]
 80031ee:	6813      	ldr	r3, [r2, #0]
 80031f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80031f4:	2301      	movs	r3, #1
 80031f6:	e0a3      	b.n	8003340 <_printf_i+0x1dc>
 80031f8:	f011 0f40 	tst.w	r1, #64	; 0x40
 80031fc:	f102 0104 	add.w	r1, r2, #4
 8003200:	6019      	str	r1, [r3, #0]
 8003202:	d0d7      	beq.n	80031b4 <_printf_i+0x50>
 8003204:	f9b2 3000 	ldrsh.w	r3, [r2]
 8003208:	2b00      	cmp	r3, #0
 800320a:	da03      	bge.n	8003214 <_printf_i+0xb0>
 800320c:	222d      	movs	r2, #45	; 0x2d
 800320e:	425b      	negs	r3, r3
 8003210:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003214:	4962      	ldr	r1, [pc, #392]	; (80033a0 <_printf_i+0x23c>)
 8003216:	220a      	movs	r2, #10
 8003218:	e017      	b.n	800324a <_printf_i+0xe6>
 800321a:	6820      	ldr	r0, [r4, #0]
 800321c:	6819      	ldr	r1, [r3, #0]
 800321e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003222:	d003      	beq.n	800322c <_printf_i+0xc8>
 8003224:	1d08      	adds	r0, r1, #4
 8003226:	6018      	str	r0, [r3, #0]
 8003228:	680b      	ldr	r3, [r1, #0]
 800322a:	e006      	b.n	800323a <_printf_i+0xd6>
 800322c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003230:	f101 0004 	add.w	r0, r1, #4
 8003234:	6018      	str	r0, [r3, #0]
 8003236:	d0f7      	beq.n	8003228 <_printf_i+0xc4>
 8003238:	880b      	ldrh	r3, [r1, #0]
 800323a:	2a6f      	cmp	r2, #111	; 0x6f
 800323c:	bf14      	ite	ne
 800323e:	220a      	movne	r2, #10
 8003240:	2208      	moveq	r2, #8
 8003242:	4957      	ldr	r1, [pc, #348]	; (80033a0 <_printf_i+0x23c>)
 8003244:	2000      	movs	r0, #0
 8003246:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800324a:	6865      	ldr	r5, [r4, #4]
 800324c:	2d00      	cmp	r5, #0
 800324e:	60a5      	str	r5, [r4, #8]
 8003250:	f2c0 809c 	blt.w	800338c <_printf_i+0x228>
 8003254:	6820      	ldr	r0, [r4, #0]
 8003256:	f020 0004 	bic.w	r0, r0, #4
 800325a:	6020      	str	r0, [r4, #0]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d13f      	bne.n	80032e0 <_printf_i+0x17c>
 8003260:	2d00      	cmp	r5, #0
 8003262:	f040 8095 	bne.w	8003390 <_printf_i+0x22c>
 8003266:	4675      	mov	r5, lr
 8003268:	2a08      	cmp	r2, #8
 800326a:	d10b      	bne.n	8003284 <_printf_i+0x120>
 800326c:	6823      	ldr	r3, [r4, #0]
 800326e:	07da      	lsls	r2, r3, #31
 8003270:	d508      	bpl.n	8003284 <_printf_i+0x120>
 8003272:	6923      	ldr	r3, [r4, #16]
 8003274:	6862      	ldr	r2, [r4, #4]
 8003276:	429a      	cmp	r2, r3
 8003278:	bfde      	ittt	le
 800327a:	2330      	movle	r3, #48	; 0x30
 800327c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003280:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003284:	ebae 0305 	sub.w	r3, lr, r5
 8003288:	6123      	str	r3, [r4, #16]
 800328a:	f8cd 8000 	str.w	r8, [sp]
 800328e:	463b      	mov	r3, r7
 8003290:	aa03      	add	r2, sp, #12
 8003292:	4621      	mov	r1, r4
 8003294:	4630      	mov	r0, r6
 8003296:	f7ff feed 	bl	8003074 <_printf_common>
 800329a:	3001      	adds	r0, #1
 800329c:	d155      	bne.n	800334a <_printf_i+0x1e6>
 800329e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80032a2:	b005      	add	sp, #20
 80032a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80032a8:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80032ac:	493c      	ldr	r1, [pc, #240]	; (80033a0 <_printf_i+0x23c>)
 80032ae:	6822      	ldr	r2, [r4, #0]
 80032b0:	6818      	ldr	r0, [r3, #0]
 80032b2:	f012 0f80 	tst.w	r2, #128	; 0x80
 80032b6:	f100 0504 	add.w	r5, r0, #4
 80032ba:	601d      	str	r5, [r3, #0]
 80032bc:	d001      	beq.n	80032c2 <_printf_i+0x15e>
 80032be:	6803      	ldr	r3, [r0, #0]
 80032c0:	e002      	b.n	80032c8 <_printf_i+0x164>
 80032c2:	0655      	lsls	r5, r2, #25
 80032c4:	d5fb      	bpl.n	80032be <_printf_i+0x15a>
 80032c6:	8803      	ldrh	r3, [r0, #0]
 80032c8:	07d0      	lsls	r0, r2, #31
 80032ca:	bf44      	itt	mi
 80032cc:	f042 0220 	orrmi.w	r2, r2, #32
 80032d0:	6022      	strmi	r2, [r4, #0]
 80032d2:	b91b      	cbnz	r3, 80032dc <_printf_i+0x178>
 80032d4:	6822      	ldr	r2, [r4, #0]
 80032d6:	f022 0220 	bic.w	r2, r2, #32
 80032da:	6022      	str	r2, [r4, #0]
 80032dc:	2210      	movs	r2, #16
 80032de:	e7b1      	b.n	8003244 <_printf_i+0xe0>
 80032e0:	4675      	mov	r5, lr
 80032e2:	fbb3 f0f2 	udiv	r0, r3, r2
 80032e6:	fb02 3310 	mls	r3, r2, r0, r3
 80032ea:	5ccb      	ldrb	r3, [r1, r3]
 80032ec:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80032f0:	4603      	mov	r3, r0
 80032f2:	2800      	cmp	r0, #0
 80032f4:	d1f5      	bne.n	80032e2 <_printf_i+0x17e>
 80032f6:	e7b7      	b.n	8003268 <_printf_i+0x104>
 80032f8:	6808      	ldr	r0, [r1, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003300:	6949      	ldr	r1, [r1, #20]
 8003302:	d004      	beq.n	800330e <_printf_i+0x1aa>
 8003304:	1d10      	adds	r0, r2, #4
 8003306:	6018      	str	r0, [r3, #0]
 8003308:	6813      	ldr	r3, [r2, #0]
 800330a:	6019      	str	r1, [r3, #0]
 800330c:	e007      	b.n	800331e <_printf_i+0x1ba>
 800330e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003312:	f102 0004 	add.w	r0, r2, #4
 8003316:	6018      	str	r0, [r3, #0]
 8003318:	6813      	ldr	r3, [r2, #0]
 800331a:	d0f6      	beq.n	800330a <_printf_i+0x1a6>
 800331c:	8019      	strh	r1, [r3, #0]
 800331e:	2300      	movs	r3, #0
 8003320:	4675      	mov	r5, lr
 8003322:	6123      	str	r3, [r4, #16]
 8003324:	e7b1      	b.n	800328a <_printf_i+0x126>
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	1d11      	adds	r1, r2, #4
 800332a:	6019      	str	r1, [r3, #0]
 800332c:	6815      	ldr	r5, [r2, #0]
 800332e:	2100      	movs	r1, #0
 8003330:	6862      	ldr	r2, [r4, #4]
 8003332:	4628      	mov	r0, r5
 8003334:	f000 f836 	bl	80033a4 <memchr>
 8003338:	b108      	cbz	r0, 800333e <_printf_i+0x1da>
 800333a:	1b40      	subs	r0, r0, r5
 800333c:	6060      	str	r0, [r4, #4]
 800333e:	6863      	ldr	r3, [r4, #4]
 8003340:	6123      	str	r3, [r4, #16]
 8003342:	2300      	movs	r3, #0
 8003344:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003348:	e79f      	b.n	800328a <_printf_i+0x126>
 800334a:	6923      	ldr	r3, [r4, #16]
 800334c:	462a      	mov	r2, r5
 800334e:	4639      	mov	r1, r7
 8003350:	4630      	mov	r0, r6
 8003352:	47c0      	blx	r8
 8003354:	3001      	adds	r0, #1
 8003356:	d0a2      	beq.n	800329e <_printf_i+0x13a>
 8003358:	6823      	ldr	r3, [r4, #0]
 800335a:	079b      	lsls	r3, r3, #30
 800335c:	d507      	bpl.n	800336e <_printf_i+0x20a>
 800335e:	2500      	movs	r5, #0
 8003360:	f104 0919 	add.w	r9, r4, #25
 8003364:	68e3      	ldr	r3, [r4, #12]
 8003366:	9a03      	ldr	r2, [sp, #12]
 8003368:	1a9b      	subs	r3, r3, r2
 800336a:	429d      	cmp	r5, r3
 800336c:	db05      	blt.n	800337a <_printf_i+0x216>
 800336e:	68e0      	ldr	r0, [r4, #12]
 8003370:	9b03      	ldr	r3, [sp, #12]
 8003372:	4298      	cmp	r0, r3
 8003374:	bfb8      	it	lt
 8003376:	4618      	movlt	r0, r3
 8003378:	e793      	b.n	80032a2 <_printf_i+0x13e>
 800337a:	2301      	movs	r3, #1
 800337c:	464a      	mov	r2, r9
 800337e:	4639      	mov	r1, r7
 8003380:	4630      	mov	r0, r6
 8003382:	47c0      	blx	r8
 8003384:	3001      	adds	r0, #1
 8003386:	d08a      	beq.n	800329e <_printf_i+0x13a>
 8003388:	3501      	adds	r5, #1
 800338a:	e7eb      	b.n	8003364 <_printf_i+0x200>
 800338c:	2b00      	cmp	r3, #0
 800338e:	d1a7      	bne.n	80032e0 <_printf_i+0x17c>
 8003390:	780b      	ldrb	r3, [r1, #0]
 8003392:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003396:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800339a:	e765      	b.n	8003268 <_printf_i+0x104>
 800339c:	0800369b 	.word	0x0800369b
 80033a0:	0800368a 	.word	0x0800368a

080033a4 <memchr>:
 80033a4:	b510      	push	{r4, lr}
 80033a6:	b2c9      	uxtb	r1, r1
 80033a8:	4402      	add	r2, r0
 80033aa:	4290      	cmp	r0, r2
 80033ac:	4603      	mov	r3, r0
 80033ae:	d101      	bne.n	80033b4 <memchr+0x10>
 80033b0:	2000      	movs	r0, #0
 80033b2:	bd10      	pop	{r4, pc}
 80033b4:	781c      	ldrb	r4, [r3, #0]
 80033b6:	3001      	adds	r0, #1
 80033b8:	428c      	cmp	r4, r1
 80033ba:	d1f6      	bne.n	80033aa <memchr+0x6>
 80033bc:	4618      	mov	r0, r3
 80033be:	bd10      	pop	{r4, pc}

080033c0 <memcpy>:
 80033c0:	b510      	push	{r4, lr}
 80033c2:	1e43      	subs	r3, r0, #1
 80033c4:	440a      	add	r2, r1
 80033c6:	4291      	cmp	r1, r2
 80033c8:	d100      	bne.n	80033cc <memcpy+0xc>
 80033ca:	bd10      	pop	{r4, pc}
 80033cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80033d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80033d4:	e7f7      	b.n	80033c6 <memcpy+0x6>

080033d6 <memmove>:
 80033d6:	4288      	cmp	r0, r1
 80033d8:	b510      	push	{r4, lr}
 80033da:	eb01 0302 	add.w	r3, r1, r2
 80033de:	d803      	bhi.n	80033e8 <memmove+0x12>
 80033e0:	1e42      	subs	r2, r0, #1
 80033e2:	4299      	cmp	r1, r3
 80033e4:	d10c      	bne.n	8003400 <memmove+0x2a>
 80033e6:	bd10      	pop	{r4, pc}
 80033e8:	4298      	cmp	r0, r3
 80033ea:	d2f9      	bcs.n	80033e0 <memmove+0xa>
 80033ec:	1881      	adds	r1, r0, r2
 80033ee:	1ad2      	subs	r2, r2, r3
 80033f0:	42d3      	cmn	r3, r2
 80033f2:	d100      	bne.n	80033f6 <memmove+0x20>
 80033f4:	bd10      	pop	{r4, pc}
 80033f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80033fa:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80033fe:	e7f7      	b.n	80033f0 <memmove+0x1a>
 8003400:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003404:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003408:	e7eb      	b.n	80033e2 <memmove+0xc>
	...

0800340c <_free_r>:
 800340c:	b538      	push	{r3, r4, r5, lr}
 800340e:	4605      	mov	r5, r0
 8003410:	2900      	cmp	r1, #0
 8003412:	d043      	beq.n	800349c <_free_r+0x90>
 8003414:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003418:	1f0c      	subs	r4, r1, #4
 800341a:	2b00      	cmp	r3, #0
 800341c:	bfb8      	it	lt
 800341e:	18e4      	addlt	r4, r4, r3
 8003420:	f000 f8d4 	bl	80035cc <__malloc_lock>
 8003424:	4a1e      	ldr	r2, [pc, #120]	; (80034a0 <_free_r+0x94>)
 8003426:	6813      	ldr	r3, [r2, #0]
 8003428:	4610      	mov	r0, r2
 800342a:	b933      	cbnz	r3, 800343a <_free_r+0x2e>
 800342c:	6063      	str	r3, [r4, #4]
 800342e:	6014      	str	r4, [r2, #0]
 8003430:	4628      	mov	r0, r5
 8003432:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003436:	f000 b8ca 	b.w	80035ce <__malloc_unlock>
 800343a:	42a3      	cmp	r3, r4
 800343c:	d90b      	bls.n	8003456 <_free_r+0x4a>
 800343e:	6821      	ldr	r1, [r4, #0]
 8003440:	1862      	adds	r2, r4, r1
 8003442:	4293      	cmp	r3, r2
 8003444:	bf01      	itttt	eq
 8003446:	681a      	ldreq	r2, [r3, #0]
 8003448:	685b      	ldreq	r3, [r3, #4]
 800344a:	1852      	addeq	r2, r2, r1
 800344c:	6022      	streq	r2, [r4, #0]
 800344e:	6063      	str	r3, [r4, #4]
 8003450:	6004      	str	r4, [r0, #0]
 8003452:	e7ed      	b.n	8003430 <_free_r+0x24>
 8003454:	4613      	mov	r3, r2
 8003456:	685a      	ldr	r2, [r3, #4]
 8003458:	b10a      	cbz	r2, 800345e <_free_r+0x52>
 800345a:	42a2      	cmp	r2, r4
 800345c:	d9fa      	bls.n	8003454 <_free_r+0x48>
 800345e:	6819      	ldr	r1, [r3, #0]
 8003460:	1858      	adds	r0, r3, r1
 8003462:	42a0      	cmp	r0, r4
 8003464:	d10b      	bne.n	800347e <_free_r+0x72>
 8003466:	6820      	ldr	r0, [r4, #0]
 8003468:	4401      	add	r1, r0
 800346a:	1858      	adds	r0, r3, r1
 800346c:	4282      	cmp	r2, r0
 800346e:	6019      	str	r1, [r3, #0]
 8003470:	d1de      	bne.n	8003430 <_free_r+0x24>
 8003472:	6810      	ldr	r0, [r2, #0]
 8003474:	6852      	ldr	r2, [r2, #4]
 8003476:	4401      	add	r1, r0
 8003478:	6019      	str	r1, [r3, #0]
 800347a:	605a      	str	r2, [r3, #4]
 800347c:	e7d8      	b.n	8003430 <_free_r+0x24>
 800347e:	d902      	bls.n	8003486 <_free_r+0x7a>
 8003480:	230c      	movs	r3, #12
 8003482:	602b      	str	r3, [r5, #0]
 8003484:	e7d4      	b.n	8003430 <_free_r+0x24>
 8003486:	6820      	ldr	r0, [r4, #0]
 8003488:	1821      	adds	r1, r4, r0
 800348a:	428a      	cmp	r2, r1
 800348c:	bf01      	itttt	eq
 800348e:	6811      	ldreq	r1, [r2, #0]
 8003490:	6852      	ldreq	r2, [r2, #4]
 8003492:	1809      	addeq	r1, r1, r0
 8003494:	6021      	streq	r1, [r4, #0]
 8003496:	6062      	str	r2, [r4, #4]
 8003498:	605c      	str	r4, [r3, #4]
 800349a:	e7c9      	b.n	8003430 <_free_r+0x24>
 800349c:	bd38      	pop	{r3, r4, r5, pc}
 800349e:	bf00      	nop
 80034a0:	20000424 	.word	0x20000424

080034a4 <_malloc_r>:
 80034a4:	b570      	push	{r4, r5, r6, lr}
 80034a6:	1ccd      	adds	r5, r1, #3
 80034a8:	f025 0503 	bic.w	r5, r5, #3
 80034ac:	3508      	adds	r5, #8
 80034ae:	2d0c      	cmp	r5, #12
 80034b0:	bf38      	it	cc
 80034b2:	250c      	movcc	r5, #12
 80034b4:	2d00      	cmp	r5, #0
 80034b6:	4606      	mov	r6, r0
 80034b8:	db01      	blt.n	80034be <_malloc_r+0x1a>
 80034ba:	42a9      	cmp	r1, r5
 80034bc:	d903      	bls.n	80034c6 <_malloc_r+0x22>
 80034be:	230c      	movs	r3, #12
 80034c0:	6033      	str	r3, [r6, #0]
 80034c2:	2000      	movs	r0, #0
 80034c4:	bd70      	pop	{r4, r5, r6, pc}
 80034c6:	f000 f881 	bl	80035cc <__malloc_lock>
 80034ca:	4a23      	ldr	r2, [pc, #140]	; (8003558 <_malloc_r+0xb4>)
 80034cc:	6814      	ldr	r4, [r2, #0]
 80034ce:	4621      	mov	r1, r4
 80034d0:	b991      	cbnz	r1, 80034f8 <_malloc_r+0x54>
 80034d2:	4c22      	ldr	r4, [pc, #136]	; (800355c <_malloc_r+0xb8>)
 80034d4:	6823      	ldr	r3, [r4, #0]
 80034d6:	b91b      	cbnz	r3, 80034e0 <_malloc_r+0x3c>
 80034d8:	4630      	mov	r0, r6
 80034da:	f000 f867 	bl	80035ac <_sbrk_r>
 80034de:	6020      	str	r0, [r4, #0]
 80034e0:	4629      	mov	r1, r5
 80034e2:	4630      	mov	r0, r6
 80034e4:	f000 f862 	bl	80035ac <_sbrk_r>
 80034e8:	1c43      	adds	r3, r0, #1
 80034ea:	d126      	bne.n	800353a <_malloc_r+0x96>
 80034ec:	230c      	movs	r3, #12
 80034ee:	4630      	mov	r0, r6
 80034f0:	6033      	str	r3, [r6, #0]
 80034f2:	f000 f86c 	bl	80035ce <__malloc_unlock>
 80034f6:	e7e4      	b.n	80034c2 <_malloc_r+0x1e>
 80034f8:	680b      	ldr	r3, [r1, #0]
 80034fa:	1b5b      	subs	r3, r3, r5
 80034fc:	d41a      	bmi.n	8003534 <_malloc_r+0x90>
 80034fe:	2b0b      	cmp	r3, #11
 8003500:	d90f      	bls.n	8003522 <_malloc_r+0x7e>
 8003502:	600b      	str	r3, [r1, #0]
 8003504:	18cc      	adds	r4, r1, r3
 8003506:	50cd      	str	r5, [r1, r3]
 8003508:	4630      	mov	r0, r6
 800350a:	f000 f860 	bl	80035ce <__malloc_unlock>
 800350e:	f104 000b 	add.w	r0, r4, #11
 8003512:	1d23      	adds	r3, r4, #4
 8003514:	f020 0007 	bic.w	r0, r0, #7
 8003518:	1ac3      	subs	r3, r0, r3
 800351a:	d01b      	beq.n	8003554 <_malloc_r+0xb0>
 800351c:	425a      	negs	r2, r3
 800351e:	50e2      	str	r2, [r4, r3]
 8003520:	bd70      	pop	{r4, r5, r6, pc}
 8003522:	428c      	cmp	r4, r1
 8003524:	bf0b      	itete	eq
 8003526:	6863      	ldreq	r3, [r4, #4]
 8003528:	684b      	ldrne	r3, [r1, #4]
 800352a:	6013      	streq	r3, [r2, #0]
 800352c:	6063      	strne	r3, [r4, #4]
 800352e:	bf18      	it	ne
 8003530:	460c      	movne	r4, r1
 8003532:	e7e9      	b.n	8003508 <_malloc_r+0x64>
 8003534:	460c      	mov	r4, r1
 8003536:	6849      	ldr	r1, [r1, #4]
 8003538:	e7ca      	b.n	80034d0 <_malloc_r+0x2c>
 800353a:	1cc4      	adds	r4, r0, #3
 800353c:	f024 0403 	bic.w	r4, r4, #3
 8003540:	42a0      	cmp	r0, r4
 8003542:	d005      	beq.n	8003550 <_malloc_r+0xac>
 8003544:	1a21      	subs	r1, r4, r0
 8003546:	4630      	mov	r0, r6
 8003548:	f000 f830 	bl	80035ac <_sbrk_r>
 800354c:	3001      	adds	r0, #1
 800354e:	d0cd      	beq.n	80034ec <_malloc_r+0x48>
 8003550:	6025      	str	r5, [r4, #0]
 8003552:	e7d9      	b.n	8003508 <_malloc_r+0x64>
 8003554:	bd70      	pop	{r4, r5, r6, pc}
 8003556:	bf00      	nop
 8003558:	20000424 	.word	0x20000424
 800355c:	20000428 	.word	0x20000428

08003560 <_realloc_r>:
 8003560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003562:	4607      	mov	r7, r0
 8003564:	4614      	mov	r4, r2
 8003566:	460e      	mov	r6, r1
 8003568:	b921      	cbnz	r1, 8003574 <_realloc_r+0x14>
 800356a:	4611      	mov	r1, r2
 800356c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003570:	f7ff bf98 	b.w	80034a4 <_malloc_r>
 8003574:	b922      	cbnz	r2, 8003580 <_realloc_r+0x20>
 8003576:	f7ff ff49 	bl	800340c <_free_r>
 800357a:	4625      	mov	r5, r4
 800357c:	4628      	mov	r0, r5
 800357e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003580:	f000 f826 	bl	80035d0 <_malloc_usable_size_r>
 8003584:	4284      	cmp	r4, r0
 8003586:	d90f      	bls.n	80035a8 <_realloc_r+0x48>
 8003588:	4621      	mov	r1, r4
 800358a:	4638      	mov	r0, r7
 800358c:	f7ff ff8a 	bl	80034a4 <_malloc_r>
 8003590:	4605      	mov	r5, r0
 8003592:	2800      	cmp	r0, #0
 8003594:	d0f2      	beq.n	800357c <_realloc_r+0x1c>
 8003596:	4631      	mov	r1, r6
 8003598:	4622      	mov	r2, r4
 800359a:	f7ff ff11 	bl	80033c0 <memcpy>
 800359e:	4631      	mov	r1, r6
 80035a0:	4638      	mov	r0, r7
 80035a2:	f7ff ff33 	bl	800340c <_free_r>
 80035a6:	e7e9      	b.n	800357c <_realloc_r+0x1c>
 80035a8:	4635      	mov	r5, r6
 80035aa:	e7e7      	b.n	800357c <_realloc_r+0x1c>

080035ac <_sbrk_r>:
 80035ac:	b538      	push	{r3, r4, r5, lr}
 80035ae:	2300      	movs	r3, #0
 80035b0:	4c05      	ldr	r4, [pc, #20]	; (80035c8 <_sbrk_r+0x1c>)
 80035b2:	4605      	mov	r5, r0
 80035b4:	4608      	mov	r0, r1
 80035b6:	6023      	str	r3, [r4, #0]
 80035b8:	f7ff f934 	bl	8002824 <_sbrk>
 80035bc:	1c43      	adds	r3, r0, #1
 80035be:	d102      	bne.n	80035c6 <_sbrk_r+0x1a>
 80035c0:	6823      	ldr	r3, [r4, #0]
 80035c2:	b103      	cbz	r3, 80035c6 <_sbrk_r+0x1a>
 80035c4:	602b      	str	r3, [r5, #0]
 80035c6:	bd38      	pop	{r3, r4, r5, pc}
 80035c8:	200014c4 	.word	0x200014c4

080035cc <__malloc_lock>:
 80035cc:	4770      	bx	lr

080035ce <__malloc_unlock>:
 80035ce:	4770      	bx	lr

080035d0 <_malloc_usable_size_r>:
 80035d0:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80035d4:	2800      	cmp	r0, #0
 80035d6:	f1a0 0004 	sub.w	r0, r0, #4
 80035da:	bfbc      	itt	lt
 80035dc:	580b      	ldrlt	r3, [r1, r0]
 80035de:	18c0      	addlt	r0, r0, r3
 80035e0:	4770      	bx	lr
	...

080035e4 <_init>:
 80035e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035e6:	bf00      	nop
 80035e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035ea:	bc08      	pop	{r3}
 80035ec:	469e      	mov	lr, r3
 80035ee:	4770      	bx	lr

080035f0 <_fini>:
 80035f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035f2:	bf00      	nop
 80035f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035f6:	bc08      	pop	{r3}
 80035f8:	469e      	mov	lr, r3
 80035fa:	4770      	bx	lr
