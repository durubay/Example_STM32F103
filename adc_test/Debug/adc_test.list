
adc_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000447c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b8  08004590  08004590  00014590  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004848  08004848  00014848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800484c  0800484c  0001484c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001dc  20000000  08004850  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000164  200001dc  08004a2c  000201dc  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000340  08004a2c  00020340  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001010d  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000026f0  00000000  00000000  00030312  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003edd  00000000  00000000  00032a02  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000768  00000000  00000000  000368e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000009c8  00000000  00000000  00037048  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00004a26  00000000  00000000  00037a10  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002a94  00000000  00000000  0003c436  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003eeca  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001dac  00000000  00000000  0003ef48  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08004574 	.word	0x08004574

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08004574 	.word	0x08004574

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f092 0f00 	teq	r2, #0
 800044a:	bf14      	ite	ne
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	4770      	bxeq	lr
 8000452:	b530      	push	{r4, r5, lr}
 8000454:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000460:	e720      	b.n	80002a4 <__adddf3+0x138>
 8000462:	bf00      	nop

08000464 <__aeabi_ul2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f04f 0500 	mov.w	r5, #0
 8000472:	e00a      	b.n	800048a <__aeabi_l2d+0x16>

08000474 <__aeabi_l2d>:
 8000474:	ea50 0201 	orrs.w	r2, r0, r1
 8000478:	bf08      	it	eq
 800047a:	4770      	bxeq	lr
 800047c:	b530      	push	{r4, r5, lr}
 800047e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000482:	d502      	bpl.n	800048a <__aeabi_l2d+0x16>
 8000484:	4240      	negs	r0, r0
 8000486:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000492:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000496:	f43f aedc 	beq.w	8000252 <__adddf3+0xe6>
 800049a:	f04f 0203 	mov.w	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b2:	f1c2 0320 	rsb	r3, r2, #32
 80004b6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ba:	fa20 f002 	lsr.w	r0, r0, r2
 80004be:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c2:	ea40 000e 	orr.w	r0, r0, lr
 80004c6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ca:	4414      	add	r4, r2
 80004cc:	e6c1      	b.n	8000252 <__adddf3+0xe6>
 80004ce:	bf00      	nop

080004d0 <__aeabi_dmul>:
 80004d0:	b570      	push	{r4, r5, r6, lr}
 80004d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004de:	bf1d      	ittte	ne
 80004e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004e4:	ea94 0f0c 	teqne	r4, ip
 80004e8:	ea95 0f0c 	teqne	r5, ip
 80004ec:	f000 f8de 	bleq	80006ac <__aeabi_dmul+0x1dc>
 80004f0:	442c      	add	r4, r5
 80004f2:	ea81 0603 	eor.w	r6, r1, r3
 80004f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000502:	bf18      	it	ne
 8000504:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000508:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800050c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000510:	d038      	beq.n	8000584 <__aeabi_dmul+0xb4>
 8000512:	fba0 ce02 	umull	ip, lr, r0, r2
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800051e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000522:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000526:	f04f 0600 	mov.w	r6, #0
 800052a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800052e:	f09c 0f00 	teq	ip, #0
 8000532:	bf18      	it	ne
 8000534:	f04e 0e01 	orrne.w	lr, lr, #1
 8000538:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800053c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000540:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000544:	d204      	bcs.n	8000550 <__aeabi_dmul+0x80>
 8000546:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800054a:	416d      	adcs	r5, r5
 800054c:	eb46 0606 	adc.w	r6, r6, r6
 8000550:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000554:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000558:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800055c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000560:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000564:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000568:	bf88      	it	hi
 800056a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800056e:	d81e      	bhi.n	80005ae <__aeabi_dmul+0xde>
 8000570:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000574:	bf08      	it	eq
 8000576:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800057a:	f150 0000 	adcs.w	r0, r0, #0
 800057e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000582:	bd70      	pop	{r4, r5, r6, pc}
 8000584:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000588:	ea46 0101 	orr.w	r1, r6, r1
 800058c:	ea40 0002 	orr.w	r0, r0, r2
 8000590:	ea81 0103 	eor.w	r1, r1, r3
 8000594:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000598:	bfc2      	ittt	gt
 800059a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800059e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005a2:	bd70      	popgt	{r4, r5, r6, pc}
 80005a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a8:	f04f 0e00 	mov.w	lr, #0
 80005ac:	3c01      	subs	r4, #1
 80005ae:	f300 80ab 	bgt.w	8000708 <__aeabi_dmul+0x238>
 80005b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005b6:	bfde      	ittt	le
 80005b8:	2000      	movle	r0, #0
 80005ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005be:	bd70      	pople	{r4, r5, r6, pc}
 80005c0:	f1c4 0400 	rsb	r4, r4, #0
 80005c4:	3c20      	subs	r4, #32
 80005c6:	da35      	bge.n	8000634 <__aeabi_dmul+0x164>
 80005c8:	340c      	adds	r4, #12
 80005ca:	dc1b      	bgt.n	8000604 <__aeabi_dmul+0x134>
 80005cc:	f104 0414 	add.w	r4, r4, #20
 80005d0:	f1c4 0520 	rsb	r5, r4, #32
 80005d4:	fa00 f305 	lsl.w	r3, r0, r5
 80005d8:	fa20 f004 	lsr.w	r0, r0, r4
 80005dc:	fa01 f205 	lsl.w	r2, r1, r5
 80005e0:	ea40 0002 	orr.w	r0, r0, r2
 80005e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f0:	fa21 f604 	lsr.w	r6, r1, r4
 80005f4:	eb42 0106 	adc.w	r1, r2, r6
 80005f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005fc:	bf08      	it	eq
 80005fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f1c4 040c 	rsb	r4, r4, #12
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f304 	lsl.w	r3, r0, r4
 8000610:	fa20 f005 	lsr.w	r0, r0, r5
 8000614:	fa01 f204 	lsl.w	r2, r1, r4
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000620:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000624:	f141 0100 	adc.w	r1, r1, #0
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 0520 	rsb	r5, r4, #32
 8000638:	fa00 f205 	lsl.w	r2, r0, r5
 800063c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000640:	fa20 f304 	lsr.w	r3, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea43 0302 	orr.w	r3, r3, r2
 800064c:	fa21 f004 	lsr.w	r0, r1, r4
 8000650:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000654:	fa21 f204 	lsr.w	r2, r1, r4
 8000658:	ea20 0002 	bic.w	r0, r0, r2
 800065c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f094 0f00 	teq	r4, #0
 8000670:	d10f      	bne.n	8000692 <__aeabi_dmul+0x1c2>
 8000672:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000676:	0040      	lsls	r0, r0, #1
 8000678:	eb41 0101 	adc.w	r1, r1, r1
 800067c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000680:	bf08      	it	eq
 8000682:	3c01      	subeq	r4, #1
 8000684:	d0f7      	beq.n	8000676 <__aeabi_dmul+0x1a6>
 8000686:	ea41 0106 	orr.w	r1, r1, r6
 800068a:	f095 0f00 	teq	r5, #0
 800068e:	bf18      	it	ne
 8000690:	4770      	bxne	lr
 8000692:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000696:	0052      	lsls	r2, r2, #1
 8000698:	eb43 0303 	adc.w	r3, r3, r3
 800069c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a0:	bf08      	it	eq
 80006a2:	3d01      	subeq	r5, #1
 80006a4:	d0f7      	beq.n	8000696 <__aeabi_dmul+0x1c6>
 80006a6:	ea43 0306 	orr.w	r3, r3, r6
 80006aa:	4770      	bx	lr
 80006ac:	ea94 0f0c 	teq	r4, ip
 80006b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006b4:	bf18      	it	ne
 80006b6:	ea95 0f0c 	teqne	r5, ip
 80006ba:	d00c      	beq.n	80006d6 <__aeabi_dmul+0x206>
 80006bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c0:	bf18      	it	ne
 80006c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006c6:	d1d1      	bne.n	800066c <__aeabi_dmul+0x19c>
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	f04f 0000 	mov.w	r0, #0
 80006d4:	bd70      	pop	{r4, r5, r6, pc}
 80006d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006da:	bf06      	itte	eq
 80006dc:	4610      	moveq	r0, r2
 80006de:	4619      	moveq	r1, r3
 80006e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e4:	d019      	beq.n	800071a <__aeabi_dmul+0x24a>
 80006e6:	ea94 0f0c 	teq	r4, ip
 80006ea:	d102      	bne.n	80006f2 <__aeabi_dmul+0x222>
 80006ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f0:	d113      	bne.n	800071a <__aeabi_dmul+0x24a>
 80006f2:	ea95 0f0c 	teq	r5, ip
 80006f6:	d105      	bne.n	8000704 <__aeabi_dmul+0x234>
 80006f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006fc:	bf1c      	itt	ne
 80006fe:	4610      	movne	r0, r2
 8000700:	4619      	movne	r1, r3
 8000702:	d10a      	bne.n	800071a <__aeabi_dmul+0x24a>
 8000704:	ea81 0103 	eor.w	r1, r1, r3
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000710:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000714:	f04f 0000 	mov.w	r0, #0
 8000718:	bd70      	pop	{r4, r5, r6, pc}
 800071a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800071e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000722:	bd70      	pop	{r4, r5, r6, pc}

08000724 <__aeabi_ddiv>:
 8000724:	b570      	push	{r4, r5, r6, lr}
 8000726:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800072a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800072e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000732:	bf1d      	ittte	ne
 8000734:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000738:	ea94 0f0c 	teqne	r4, ip
 800073c:	ea95 0f0c 	teqne	r5, ip
 8000740:	f000 f8a7 	bleq	8000892 <__aeabi_ddiv+0x16e>
 8000744:	eba4 0405 	sub.w	r4, r4, r5
 8000748:	ea81 0e03 	eor.w	lr, r1, r3
 800074c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000750:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000754:	f000 8088 	beq.w	8000868 <__aeabi_ddiv+0x144>
 8000758:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800075c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000760:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000764:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000768:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800076c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000770:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000774:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000778:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800077c:	429d      	cmp	r5, r3
 800077e:	bf08      	it	eq
 8000780:	4296      	cmpeq	r6, r2
 8000782:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000786:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800078a:	d202      	bcs.n	8000792 <__aeabi_ddiv+0x6e>
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	1ab6      	subs	r6, r6, r2
 8000794:	eb65 0503 	sbc.w	r5, r5, r3
 8000798:	085b      	lsrs	r3, r3, #1
 800079a:	ea4f 0232 	mov.w	r2, r2, rrx
 800079e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ae:	bf22      	ittt	cs
 80007b0:	1ab6      	subcs	r6, r6, r2
 80007b2:	4675      	movcs	r5, lr
 80007b4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b8:	085b      	lsrs	r3, r3, #1
 80007ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000800:	ea55 0e06 	orrs.w	lr, r5, r6
 8000804:	d018      	beq.n	8000838 <__aeabi_ddiv+0x114>
 8000806:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800080a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800080e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000812:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000816:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800081a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800081e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000822:	d1c0      	bne.n	80007a6 <__aeabi_ddiv+0x82>
 8000824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000828:	d10b      	bne.n	8000842 <__aeabi_ddiv+0x11e>
 800082a:	ea41 0100 	orr.w	r1, r1, r0
 800082e:	f04f 0000 	mov.w	r0, #0
 8000832:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000836:	e7b6      	b.n	80007a6 <__aeabi_ddiv+0x82>
 8000838:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800083c:	bf04      	itt	eq
 800083e:	4301      	orreq	r1, r0
 8000840:	2000      	moveq	r0, #0
 8000842:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000846:	bf88      	it	hi
 8000848:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800084c:	f63f aeaf 	bhi.w	80005ae <__aeabi_dmul+0xde>
 8000850:	ebb5 0c03 	subs.w	ip, r5, r3
 8000854:	bf04      	itt	eq
 8000856:	ebb6 0c02 	subseq.w	ip, r6, r2
 800085a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800085e:	f150 0000 	adcs.w	r0, r0, #0
 8000862:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000866:	bd70      	pop	{r4, r5, r6, pc}
 8000868:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800086c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000870:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000874:	bfc2      	ittt	gt
 8000876:	ebd4 050c 	rsbsgt	r5, r4, ip
 800087a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800087e:	bd70      	popgt	{r4, r5, r6, pc}
 8000880:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000884:	f04f 0e00 	mov.w	lr, #0
 8000888:	3c01      	subs	r4, #1
 800088a:	e690      	b.n	80005ae <__aeabi_dmul+0xde>
 800088c:	ea45 0e06 	orr.w	lr, r5, r6
 8000890:	e68d      	b.n	80005ae <__aeabi_dmul+0xde>
 8000892:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000896:	ea94 0f0c 	teq	r4, ip
 800089a:	bf08      	it	eq
 800089c:	ea95 0f0c 	teqeq	r5, ip
 80008a0:	f43f af3b 	beq.w	800071a <__aeabi_dmul+0x24a>
 80008a4:	ea94 0f0c 	teq	r4, ip
 80008a8:	d10a      	bne.n	80008c0 <__aeabi_ddiv+0x19c>
 80008aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ae:	f47f af34 	bne.w	800071a <__aeabi_dmul+0x24a>
 80008b2:	ea95 0f0c 	teq	r5, ip
 80008b6:	f47f af25 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ba:	4610      	mov	r0, r2
 80008bc:	4619      	mov	r1, r3
 80008be:	e72c      	b.n	800071a <__aeabi_dmul+0x24a>
 80008c0:	ea95 0f0c 	teq	r5, ip
 80008c4:	d106      	bne.n	80008d4 <__aeabi_ddiv+0x1b0>
 80008c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ca:	f43f aefd 	beq.w	80006c8 <__aeabi_dmul+0x1f8>
 80008ce:	4610      	mov	r0, r2
 80008d0:	4619      	mov	r1, r3
 80008d2:	e722      	b.n	800071a <__aeabi_dmul+0x24a>
 80008d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d8:	bf18      	it	ne
 80008da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008de:	f47f aec5 	bne.w	800066c <__aeabi_dmul+0x19c>
 80008e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008e6:	f47f af0d 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008ee:	f47f aeeb 	bne.w	80006c8 <__aeabi_dmul+0x1f8>
 80008f2:	e712      	b.n	800071a <__aeabi_dmul+0x24a>

080008f4 <__gedf2>:
 80008f4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80008f8:	e006      	b.n	8000908 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__ledf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	e002      	b.n	8000908 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__cmpdf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	f84d cd04 	str.w	ip, [sp, #-4]!
 800090c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000910:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000914:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000918:	bf18      	it	ne
 800091a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800091e:	d01b      	beq.n	8000958 <__cmpdf2+0x54>
 8000920:	b001      	add	sp, #4
 8000922:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000926:	bf0c      	ite	eq
 8000928:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800092c:	ea91 0f03 	teqne	r1, r3
 8000930:	bf02      	ittt	eq
 8000932:	ea90 0f02 	teqeq	r0, r2
 8000936:	2000      	moveq	r0, #0
 8000938:	4770      	bxeq	lr
 800093a:	f110 0f00 	cmn.w	r0, #0
 800093e:	ea91 0f03 	teq	r1, r3
 8000942:	bf58      	it	pl
 8000944:	4299      	cmppl	r1, r3
 8000946:	bf08      	it	eq
 8000948:	4290      	cmpeq	r0, r2
 800094a:	bf2c      	ite	cs
 800094c:	17d8      	asrcs	r0, r3, #31
 800094e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000952:	f040 0001 	orr.w	r0, r0, #1
 8000956:	4770      	bx	lr
 8000958:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	d102      	bne.n	8000968 <__cmpdf2+0x64>
 8000962:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000966:	d107      	bne.n	8000978 <__cmpdf2+0x74>
 8000968:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800096c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000970:	d1d6      	bne.n	8000920 <__cmpdf2+0x1c>
 8000972:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000976:	d0d3      	beq.n	8000920 <__cmpdf2+0x1c>
 8000978:	f85d 0b04 	ldr.w	r0, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop

08000980 <__aeabi_cdrcmple>:
 8000980:	4684      	mov	ip, r0
 8000982:	4610      	mov	r0, r2
 8000984:	4662      	mov	r2, ip
 8000986:	468c      	mov	ip, r1
 8000988:	4619      	mov	r1, r3
 800098a:	4663      	mov	r3, ip
 800098c:	e000      	b.n	8000990 <__aeabi_cdcmpeq>
 800098e:	bf00      	nop

08000990 <__aeabi_cdcmpeq>:
 8000990:	b501      	push	{r0, lr}
 8000992:	f7ff ffb7 	bl	8000904 <__cmpdf2>
 8000996:	2800      	cmp	r0, #0
 8000998:	bf48      	it	mi
 800099a:	f110 0f00 	cmnmi.w	r0, #0
 800099e:	bd01      	pop	{r0, pc}

080009a0 <__aeabi_dcmpeq>:
 80009a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a4:	f7ff fff4 	bl	8000990 <__aeabi_cdcmpeq>
 80009a8:	bf0c      	ite	eq
 80009aa:	2001      	moveq	r0, #1
 80009ac:	2000      	movne	r0, #0
 80009ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b2:	bf00      	nop

080009b4 <__aeabi_dcmplt>:
 80009b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b8:	f7ff ffea 	bl	8000990 <__aeabi_cdcmpeq>
 80009bc:	bf34      	ite	cc
 80009be:	2001      	movcc	r0, #1
 80009c0:	2000      	movcs	r0, #0
 80009c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009c6:	bf00      	nop

080009c8 <__aeabi_dcmple>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff ffe0 	bl	8000990 <__aeabi_cdcmpeq>
 80009d0:	bf94      	ite	ls
 80009d2:	2001      	movls	r0, #1
 80009d4:	2000      	movhi	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmpge>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffce 	bl	8000980 <__aeabi_cdrcmple>
 80009e4:	bf94      	ite	ls
 80009e6:	2001      	movls	r0, #1
 80009e8:	2000      	movhi	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmpgt>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffc4 	bl	8000980 <__aeabi_cdrcmple>
 80009f8:	bf34      	ite	cc
 80009fa:	2001      	movcc	r0, #1
 80009fc:	2000      	movcs	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpun>:
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	d102      	bne.n	8000a14 <__aeabi_dcmpun+0x10>
 8000a0e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a12:	d10a      	bne.n	8000a2a <__aeabi_dcmpun+0x26>
 8000a14:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a1c:	d102      	bne.n	8000a24 <__aeabi_dcmpun+0x20>
 8000a1e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a22:	d102      	bne.n	8000a2a <__aeabi_dcmpun+0x26>
 8000a24:	f04f 0000 	mov.w	r0, #0
 8000a28:	4770      	bx	lr
 8000a2a:	f04f 0001 	mov.w	r0, #1
 8000a2e:	4770      	bx	lr

08000a30 <__aeabi_d2iz>:
 8000a30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a34:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a38:	d215      	bcs.n	8000a66 <__aeabi_d2iz+0x36>
 8000a3a:	d511      	bpl.n	8000a60 <__aeabi_d2iz+0x30>
 8000a3c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a40:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a44:	d912      	bls.n	8000a6c <__aeabi_d2iz+0x3c>
 8000a46:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a52:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a56:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5a:	bf18      	it	ne
 8000a5c:	4240      	negne	r0, r0
 8000a5e:	4770      	bx	lr
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6a:	d105      	bne.n	8000a78 <__aeabi_d2iz+0x48>
 8000a6c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a70:	bf08      	it	eq
 8000a72:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a76:	4770      	bx	lr
 8000a78:	f04f 0000 	mov.w	r0, #0
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop

08000a80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a80:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a82:	4b0e      	ldr	r3, [pc, #56]	; (8000abc <HAL_InitTick+0x3c>)
{
 8000a84:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a86:	7818      	ldrb	r0, [r3, #0]
 8000a88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a8c:	fbb3 f3f0 	udiv	r3, r3, r0
 8000a90:	4a0b      	ldr	r2, [pc, #44]	; (8000ac0 <HAL_InitTick+0x40>)
 8000a92:	6810      	ldr	r0, [r2, #0]
 8000a94:	fbb0 f0f3 	udiv	r0, r0, r3
 8000a98:	f000 fb88 	bl	80011ac <HAL_SYSTICK_Config>
 8000a9c:	4604      	mov	r4, r0
 8000a9e:	b958      	cbnz	r0, 8000ab8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aa0:	2d0f      	cmp	r5, #15
 8000aa2:	d809      	bhi.n	8000ab8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aa4:	4602      	mov	r2, r0
 8000aa6:	4629      	mov	r1, r5
 8000aa8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000aac:	f000 fb3e 	bl	800112c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ab0:	4b04      	ldr	r3, [pc, #16]	; (8000ac4 <HAL_InitTick+0x44>)
 8000ab2:	4620      	mov	r0, r4
 8000ab4:	601d      	str	r5, [r3, #0]
 8000ab6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000ab8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000aba:	bd38      	pop	{r3, r4, r5, pc}
 8000abc:	20000000 	.word	0x20000000
 8000ac0:	20000008 	.word	0x20000008
 8000ac4:	20000004 	.word	0x20000004

08000ac8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ac8:	4a07      	ldr	r2, [pc, #28]	; (8000ae8 <HAL_Init+0x20>)
{
 8000aca:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000acc:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ace:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ad0:	f043 0310 	orr.w	r3, r3, #16
 8000ad4:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ad6:	f000 fb17 	bl	8001108 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ada:	2000      	movs	r0, #0
 8000adc:	f7ff ffd0 	bl	8000a80 <HAL_InitTick>
  HAL_MspInit();
 8000ae0:	f001 fb5a 	bl	8002198 <HAL_MspInit>
}
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	bd08      	pop	{r3, pc}
 8000ae8:	40022000 	.word	0x40022000

08000aec <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000aec:	4a03      	ldr	r2, [pc, #12]	; (8000afc <HAL_IncTick+0x10>)
 8000aee:	4b04      	ldr	r3, [pc, #16]	; (8000b00 <HAL_IncTick+0x14>)
 8000af0:	6811      	ldr	r1, [r2, #0]
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	440b      	add	r3, r1
 8000af6:	6013      	str	r3, [r2, #0]
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	20000254 	.word	0x20000254
 8000b00:	20000000 	.word	0x20000000

08000b04 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000b04:	4b01      	ldr	r3, [pc, #4]	; (8000b0c <HAL_GetTick+0x8>)
 8000b06:	6818      	ldr	r0, [r3, #0]
}
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	20000254 	.word	0x20000254

08000b10 <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000b10:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8000b12:	b510      	push	{r4, lr}
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000b14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000b16:	f012 0f50 	tst.w	r2, #80	; 0x50
 8000b1a:	d11b      	bne.n	8000b54 <ADC_DMAConvCplt+0x44>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000b1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000b1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000b22:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000b24:	681a      	ldr	r2, [r3, #0]
 8000b26:	6892      	ldr	r2, [r2, #8]
 8000b28:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8000b2c:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000b30:	d10c      	bne.n	8000b4c <ADC_DMAConvCplt+0x3c>
 8000b32:	68da      	ldr	r2, [r3, #12]
 8000b34:	b952      	cbnz	r2, 8000b4c <ADC_DMAConvCplt+0x3c>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000b36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000b38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000b3c:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000b3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000b40:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000b42:	bf5e      	ittt	pl
 8000b44:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
 8000b46:	f042 0201 	orrpl.w	r2, r2, #1
 8000b4a:	629a      	strpl	r2, [r3, #40]	; 0x28
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc); 
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f001 f9fd 	bl	8001f4c <HAL_ADC_ConvCpltCallback>
 8000b52:	bd10      	pop	{r4, pc}
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000b54:	6a1b      	ldr	r3, [r3, #32]
  }
}
 8000b56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5c:	4718      	bx	r3

08000b5e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000b5e:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Half conversion callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8000b60:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8000b62:	f001 fa41 	bl	8001fe8 <HAL_ADC_ConvHalfCpltCallback>
 8000b66:	bd08      	pop	{r3, pc}

08000b68 <HAL_ADC_ErrorCallback>:
{
 8000b68:	4770      	bx	lr

08000b6a <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000b6a:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8000b6c:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000b6e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000b70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b74:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000b76:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000b78:	f043 0304 	orr.w	r3, r3, #4
 8000b7c:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 8000b7e:	f7ff fff3 	bl	8000b68 <HAL_ADC_ErrorCallback>
 8000b82:	bd08      	pop	{r3, pc}

08000b84 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 8000b84:	2300      	movs	r3, #0
{ 
 8000b86:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000b88:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000b8a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8000b8e:	2b01      	cmp	r3, #1
 8000b90:	d074      	beq.n	8000c7c <HAL_ADC_ConfigChannel+0xf8>
 8000b92:	2301      	movs	r3, #1
  if (sConfig->Rank < 7U)
 8000b94:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 8000b96:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8000b9a:	2d06      	cmp	r5, #6
 8000b9c:	6802      	ldr	r2, [r0, #0]
 8000b9e:	ea4f 0385 	mov.w	r3, r5, lsl #2
 8000ba2:	680c      	ldr	r4, [r1, #0]
 8000ba4:	d825      	bhi.n	8000bf2 <HAL_ADC_ConfigChannel+0x6e>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000ba6:	442b      	add	r3, r5
 8000ba8:	251f      	movs	r5, #31
 8000baa:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8000bac:	3b05      	subs	r3, #5
 8000bae:	409d      	lsls	r5, r3
 8000bb0:	ea26 0505 	bic.w	r5, r6, r5
 8000bb4:	fa04 f303 	lsl.w	r3, r4, r3
 8000bb8:	432b      	orrs	r3, r5
 8000bba:	6353      	str	r3, [r2, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000bbc:	2c09      	cmp	r4, #9
 8000bbe:	ea4f 0344 	mov.w	r3, r4, lsl #1
 8000bc2:	688d      	ldr	r5, [r1, #8]
 8000bc4:	d92f      	bls.n	8000c26 <HAL_ADC_ConfigChannel+0xa2>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000bc6:	2607      	movs	r6, #7
 8000bc8:	4423      	add	r3, r4
 8000bca:	68d1      	ldr	r1, [r2, #12]
 8000bcc:	3b1e      	subs	r3, #30
 8000bce:	409e      	lsls	r6, r3
 8000bd0:	ea21 0106 	bic.w	r1, r1, r6
 8000bd4:	fa05 f303 	lsl.w	r3, r5, r3
 8000bd8:	430b      	orrs	r3, r1
 8000bda:	60d3      	str	r3, [r2, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000bdc:	f1a4 0310 	sub.w	r3, r4, #16
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	d92b      	bls.n	8000c3c <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000be4:	2300      	movs	r3, #0
  __HAL_UNLOCK(hadc);
 8000be6:	2200      	movs	r2, #0
 8000be8:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	b002      	add	sp, #8
 8000bf0:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 8000bf2:	2d0c      	cmp	r5, #12
 8000bf4:	d80b      	bhi.n	8000c0e <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000bf6:	442b      	add	r3, r5
 8000bf8:	251f      	movs	r5, #31
 8000bfa:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8000bfc:	3b23      	subs	r3, #35	; 0x23
 8000bfe:	409d      	lsls	r5, r3
 8000c00:	ea26 0505 	bic.w	r5, r6, r5
 8000c04:	fa04 f303 	lsl.w	r3, r4, r3
 8000c08:	432b      	orrs	r3, r5
 8000c0a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0c:	e7d6      	b.n	8000bbc <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000c0e:	442b      	add	r3, r5
 8000c10:	251f      	movs	r5, #31
 8000c12:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8000c14:	3b41      	subs	r3, #65	; 0x41
 8000c16:	409d      	lsls	r5, r3
 8000c18:	ea26 0505 	bic.w	r5, r6, r5
 8000c1c:	fa04 f303 	lsl.w	r3, r4, r3
 8000c20:	432b      	orrs	r3, r5
 8000c22:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000c24:	e7ca      	b.n	8000bbc <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000c26:	2607      	movs	r6, #7
 8000c28:	6911      	ldr	r1, [r2, #16]
 8000c2a:	4423      	add	r3, r4
 8000c2c:	409e      	lsls	r6, r3
 8000c2e:	ea21 0106 	bic.w	r1, r1, r6
 8000c32:	fa05 f303 	lsl.w	r3, r5, r3
 8000c36:	430b      	orrs	r3, r1
 8000c38:	6113      	str	r3, [r2, #16]
 8000c3a:	e7cf      	b.n	8000bdc <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 8000c3c:	4b10      	ldr	r3, [pc, #64]	; (8000c80 <HAL_ADC_ConfigChannel+0xfc>)
 8000c3e:	429a      	cmp	r2, r3
 8000c40:	d116      	bne.n	8000c70 <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000c42:	6893      	ldr	r3, [r2, #8]
 8000c44:	021b      	lsls	r3, r3, #8
 8000c46:	d4cd      	bmi.n	8000be4 <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000c48:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000c4a:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000c4c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000c50:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000c52:	d1c7      	bne.n	8000be4 <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000c54:	4b0b      	ldr	r3, [pc, #44]	; (8000c84 <HAL_ADC_ConfigChannel+0x100>)
 8000c56:	4a0c      	ldr	r2, [pc, #48]	; (8000c88 <HAL_ADC_ConfigChannel+0x104>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	fbb3 f2f2 	udiv	r2, r3, r2
 8000c5e:	230a      	movs	r3, #10
 8000c60:	4353      	muls	r3, r2
            wait_loop_index--;
 8000c62:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8000c64:	9b01      	ldr	r3, [sp, #4]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d0bc      	beq.n	8000be4 <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 8000c6a:	9b01      	ldr	r3, [sp, #4]
 8000c6c:	3b01      	subs	r3, #1
 8000c6e:	e7f8      	b.n	8000c62 <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c70:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000c72:	f043 0320 	orr.w	r3, r3, #32
 8000c76:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	e7b4      	b.n	8000be6 <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	e7b5      	b.n	8000bec <HAL_ADC_ConfigChannel+0x68>
 8000c80:	40012400 	.word	0x40012400
 8000c84:	20000008 	.word	0x20000008
 8000c88:	000f4240 	.word	0x000f4240

08000c8c <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 8000c8c:	2300      	movs	r3, #0
{
 8000c8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000c90:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000c92:	6803      	ldr	r3, [r0, #0]
{
 8000c94:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000c96:	689a      	ldr	r2, [r3, #8]
 8000c98:	07d2      	lsls	r2, r2, #31
 8000c9a:	d502      	bpl.n	8000ca2 <ADC_Enable+0x16>
  return HAL_OK;
 8000c9c:	2000      	movs	r0, #0
}
 8000c9e:	b002      	add	sp, #8
 8000ca0:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 8000ca2:	689a      	ldr	r2, [r3, #8]
 8000ca4:	f042 0201 	orr.w	r2, r2, #1
 8000ca8:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000caa:	4b12      	ldr	r3, [pc, #72]	; (8000cf4 <ADC_Enable+0x68>)
 8000cac:	4a12      	ldr	r2, [pc, #72]	; (8000cf8 <ADC_Enable+0x6c>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8000cb4:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8000cb6:	9b01      	ldr	r3, [sp, #4]
 8000cb8:	b9c3      	cbnz	r3, 8000cec <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 8000cba:	f7ff ff23 	bl	8000b04 <HAL_GetTick>
 8000cbe:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000cc0:	6823      	ldr	r3, [r4, #0]
 8000cc2:	689d      	ldr	r5, [r3, #8]
 8000cc4:	f015 0501 	ands.w	r5, r5, #1
 8000cc8:	d1e8      	bne.n	8000c9c <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000cca:	f7ff ff1b 	bl	8000b04 <HAL_GetTick>
 8000cce:	1b80      	subs	r0, r0, r6
 8000cd0:	2802      	cmp	r0, #2
 8000cd2:	d9f5      	bls.n	8000cc0 <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000cd4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 8000cd6:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000cda:	f043 0310 	orr.w	r3, r3, #16
 8000cde:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ce0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 8000ce2:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ce4:	f043 0301 	orr.w	r3, r3, #1
 8000ce8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000cea:	e7d8      	b.n	8000c9e <ADC_Enable+0x12>
      wait_loop_index--;
 8000cec:	9b01      	ldr	r3, [sp, #4]
 8000cee:	3b01      	subs	r3, #1
 8000cf0:	e7e0      	b.n	8000cb4 <ADC_Enable+0x28>
 8000cf2:	bf00      	nop
 8000cf4:	20000008 	.word	0x20000008
 8000cf8:	000f4240 	.word	0x000f4240

08000cfc <HAL_ADC_Start>:
  __HAL_LOCK(hadc);
 8000cfc:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8000d00:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8000d02:	2b01      	cmp	r3, #1
{
 8000d04:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8000d06:	d054      	beq.n	8000db2 <HAL_ADC_Start+0xb6>
 8000d08:	2301      	movs	r3, #1
 8000d0a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 8000d0e:	f7ff ffbd 	bl	8000c8c <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8000d12:	2800      	cmp	r0, #0
 8000d14:	d149      	bne.n	8000daa <HAL_ADC_Start+0xae>
    ADC_STATE_CLR_SET(hadc->State,
 8000d16:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000d18:	4a27      	ldr	r2, [pc, #156]	; (8000db8 <HAL_ADC_Start+0xbc>)
    ADC_STATE_CLR_SET(hadc->State,
 8000d1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000d1e:	f023 0301 	bic.w	r3, r3, #1
 8000d22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d26:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000d28:	6823      	ldr	r3, [r4, #0]
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d104      	bne.n	8000d38 <HAL_ADC_Start+0x3c>
 8000d2e:	4923      	ldr	r1, [pc, #140]	; (8000dbc <HAL_ADC_Start+0xc0>)
 8000d30:	684a      	ldr	r2, [r1, #4]
 8000d32:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 8000d36:	d12e      	bne.n	8000d96 <HAL_ADC_Start+0x9a>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d38:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000d3a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8000d3e:	62a2      	str	r2, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d40:	685a      	ldr	r2, [r3, #4]
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000d42:	0552      	lsls	r2, r2, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000d44:	bf41      	itttt	mi
 8000d46:	6aa2      	ldrmi	r2, [r4, #40]	; 0x28
 8000d48:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 8000d4c:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 8000d50:	62a2      	strmi	r2, [r4, #40]	; 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d52:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000d54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000d58:	bf1c      	itt	ne
 8000d5a:	6ae2      	ldrne	r2, [r4, #44]	; 0x2c
 8000d5c:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8000d60:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 8000d62:	2200      	movs	r2, #0
 8000d64:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000d68:	f06f 0202 	mvn.w	r2, #2
 8000d6c:	601a      	str	r2, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000d6e:	689a      	ldr	r2, [r3, #8]
 8000d70:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8000d74:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000d78:	d113      	bne.n	8000da2 <HAL_ADC_Start+0xa6>
 8000d7a:	4a0f      	ldr	r2, [pc, #60]	; (8000db8 <HAL_ADC_Start+0xbc>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d105      	bne.n	8000d8c <HAL_ADC_Start+0x90>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000d80:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8000d84:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000d86:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 8000d8a:	d10a      	bne.n	8000da2 <HAL_ADC_Start+0xa6>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000d8c:	689a      	ldr	r2, [r3, #8]
 8000d8e:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	bd10      	pop	{r4, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d96:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000d98:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000d9c:	62a2      	str	r2, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000d9e:	684a      	ldr	r2, [r1, #4]
 8000da0:	e7cf      	b.n	8000d42 <HAL_ADC_Start+0x46>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000da2:	689a      	ldr	r2, [r3, #8]
 8000da4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000da8:	e7f3      	b.n	8000d92 <HAL_ADC_Start+0x96>
    __HAL_UNLOCK(hadc);
 8000daa:	2300      	movs	r3, #0
 8000dac:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8000db0:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8000db2:	2002      	movs	r0, #2
}
 8000db4:	bd10      	pop	{r4, pc}
 8000db6:	bf00      	nop
 8000db8:	40012800 	.word	0x40012800
 8000dbc:	40012400 	.word	0x40012400

08000dc0 <ADC_ConversionStop_Disable>:
{
 8000dc0:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000dc2:	6803      	ldr	r3, [r0, #0]
{
 8000dc4:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000dc6:	689a      	ldr	r2, [r3, #8]
 8000dc8:	07d2      	lsls	r2, r2, #31
 8000dca:	d401      	bmi.n	8000dd0 <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 8000dcc:	2000      	movs	r0, #0
 8000dce:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8000dd0:	689a      	ldr	r2, [r3, #8]
 8000dd2:	f022 0201 	bic.w	r2, r2, #1
 8000dd6:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8000dd8:	f7ff fe94 	bl	8000b04 <HAL_GetTick>
 8000ddc:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000dde:	6823      	ldr	r3, [r4, #0]
 8000de0:	689b      	ldr	r3, [r3, #8]
 8000de2:	07db      	lsls	r3, r3, #31
 8000de4:	d5f2      	bpl.n	8000dcc <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000de6:	f7ff fe8d 	bl	8000b04 <HAL_GetTick>
 8000dea:	1b40      	subs	r0, r0, r5
 8000dec:	2802      	cmp	r0, #2
 8000dee:	d9f6      	bls.n	8000dde <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000df0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000df2:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000df4:	f043 0310 	orr.w	r3, r3, #16
 8000df8:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dfa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000dfc:	f043 0301 	orr.w	r3, r3, #1
 8000e00:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000e02:	bd38      	pop	{r3, r4, r5, pc}

08000e04 <HAL_ADC_Init>:
{
 8000e04:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 8000e06:	4604      	mov	r4, r0
 8000e08:	2800      	cmp	r0, #0
 8000e0a:	d071      	beq.n	8000ef0 <HAL_ADC_Init+0xec>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e0c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000e0e:	b923      	cbnz	r3, 8000e1a <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8000e10:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8000e12:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8000e16:	f001 f9e1 	bl	80021dc <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000e1a:	4620      	mov	r0, r4
 8000e1c:	f7ff ffd0 	bl	8000dc0 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000e20:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000e22:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 8000e26:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000e28:	d164      	bne.n	8000ef4 <HAL_ADC_Init+0xf0>
 8000e2a:	2800      	cmp	r0, #0
 8000e2c:	d162      	bne.n	8000ef4 <HAL_ADC_Init+0xf0>
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000e2e:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 8000e30:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000e34:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8000e36:	f023 0302 	bic.w	r3, r3, #2
 8000e3a:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000e3e:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000e40:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8000e42:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 8000e44:	68e3      	ldr	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000e46:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 8000e4a:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000e4e:	d038      	beq.n	8000ec2 <HAL_ADC_Init+0xbe>
 8000e50:	2901      	cmp	r1, #1
 8000e52:	bf14      	ite	ne
 8000e54:	4606      	movne	r6, r0
 8000e56:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e5a:	6965      	ldr	r5, [r4, #20]
 8000e5c:	2d01      	cmp	r5, #1
 8000e5e:	d107      	bne.n	8000e70 <HAL_ADC_Init+0x6c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d130      	bne.n	8000ec6 <HAL_ADC_Init+0xc2>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000e64:	69a3      	ldr	r3, [r4, #24]
 8000e66:	3b01      	subs	r3, #1
 8000e68:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 8000e6c:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8000e70:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000e72:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8000e76:	685d      	ldr	r5, [r3, #4]
 8000e78:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 8000e7c:	ea45 0506 	orr.w	r5, r5, r6
 8000e80:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8000e82:	689e      	ldr	r6, [r3, #8]
 8000e84:	4d1d      	ldr	r5, [pc, #116]	; (8000efc <HAL_ADC_Init+0xf8>)
 8000e86:	ea05 0506 	and.w	r5, r5, r6
 8000e8a:	ea45 0502 	orr.w	r5, r5, r2
 8000e8e:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000e90:	d001      	beq.n	8000e96 <HAL_ADC_Init+0x92>
 8000e92:	2901      	cmp	r1, #1
 8000e94:	d120      	bne.n	8000ed8 <HAL_ADC_Init+0xd4>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000e96:	6921      	ldr	r1, [r4, #16]
 8000e98:	3901      	subs	r1, #1
 8000e9a:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8000e9c:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8000e9e:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 8000ea2:	4329      	orrs	r1, r5
 8000ea4:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ea6:	6899      	ldr	r1, [r3, #8]
 8000ea8:	4b15      	ldr	r3, [pc, #84]	; (8000f00 <HAL_ADC_Init+0xfc>)
 8000eaa:	400b      	ands	r3, r1
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d115      	bne.n	8000edc <HAL_ADC_Init+0xd8>
      ADC_CLEAR_ERRORCODE(hadc);
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8000eb4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000eb6:	f023 0303 	bic.w	r3, r3, #3
 8000eba:	f043 0301 	orr.w	r3, r3, #1
 8000ebe:	62a3      	str	r3, [r4, #40]	; 0x28
 8000ec0:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000ec2:	460e      	mov	r6, r1
 8000ec4:	e7c9      	b.n	8000e5a <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ec6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000ec8:	f043 0320 	orr.w	r3, r3, #32
 8000ecc:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ece:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000ed0:	f043 0301 	orr.w	r3, r3, #1
 8000ed4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000ed6:	e7cb      	b.n	8000e70 <HAL_ADC_Init+0x6c>
  uint32_t tmp_sqr1 = 0U;
 8000ed8:	2100      	movs	r1, #0
 8000eda:	e7df      	b.n	8000e9c <HAL_ADC_Init+0x98>
      ADC_STATE_CLR_SET(hadc->State,
 8000edc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000ede:	f023 0312 	bic.w	r3, r3, #18
 8000ee2:	f043 0310 	orr.w	r3, r3, #16
 8000ee6:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ee8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000eea:	f043 0301 	orr.w	r3, r3, #1
 8000eee:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8000ef0:	2001      	movs	r0, #1
}
 8000ef2:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ef4:	f043 0310 	orr.w	r3, r3, #16
 8000ef8:	62a3      	str	r3, [r4, #40]	; 0x28
 8000efa:	e7f9      	b.n	8000ef0 <HAL_ADC_Init+0xec>
 8000efc:	ffe1f7fd 	.word	0xffe1f7fd
 8000f00:	ff1f0efe 	.word	0xff1f0efe

08000f04 <HAL_ADCEx_Calibration_Start>:
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8000f04:	2300      	movs	r3, #0
{
 8000f06:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000f08:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000f0a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8000f0e:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d05a      	beq.n	8000fca <HAL_ADCEx_Calibration_Start+0xc6>
 8000f14:	2301      	movs	r3, #1
 8000f16:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000f1a:	f7ff ff51 	bl	8000dc0 <ADC_ConversionStop_Disable>
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000f1e:	4605      	mov	r5, r0
 8000f20:	2800      	cmp	r0, #0
 8000f22:	d132      	bne.n	8000f8a <HAL_ADCEx_Calibration_Start+0x86>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f24:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000f26:	2002      	movs	r0, #2
    ADC_STATE_CLR_SET(hadc->State,
 8000f28:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f2c:	f023 0302 	bic.w	r3, r3, #2
 8000f30:	f043 0302 	orr.w	r3, r3, #2
 8000f34:	62a3      	str	r3, [r4, #40]	; 0x28
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000f36:	4b26      	ldr	r3, [pc, #152]	; (8000fd0 <HAL_ADCEx_Calibration_Start+0xcc>)
 8000f38:	681e      	ldr	r6, [r3, #0]
 8000f3a:	f000 fe41 	bl	8001bc0 <HAL_RCCEx_GetPeriphCLKFreq>
 8000f3e:	fbb6 f0f0 	udiv	r0, r6, r0
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8000f42:	0040      	lsls	r0, r0, #1
    wait_loop_index = ((SystemCoreClock
 8000f44:	9001      	str	r0, [sp, #4]

    while(wait_loop_index != 0U)
 8000f46:	9b01      	ldr	r3, [sp, #4]
 8000f48:	bb1b      	cbnz	r3, 8000f92 <HAL_ADCEx_Calibration_Start+0x8e>
    {
      wait_loop_index--;
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8000f4a:	4620      	mov	r0, r4
 8000f4c:	f7ff fe9e 	bl	8000c8c <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8000f50:	6822      	ldr	r2, [r4, #0]
 8000f52:	6893      	ldr	r3, [r2, #8]
 8000f54:	f043 0308 	orr.w	r3, r3, #8
 8000f58:	6093      	str	r3, [r2, #8]
    
    tickstart = HAL_GetTick();  
 8000f5a:	f7ff fdd3 	bl	8000b04 <HAL_GetTick>
 8000f5e:	4606      	mov	r6, r0

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8000f60:	6823      	ldr	r3, [r4, #0]
 8000f62:	689a      	ldr	r2, [r3, #8]
 8000f64:	0712      	lsls	r2, r2, #28
 8000f66:	d418      	bmi.n	8000f9a <HAL_ADCEx_Calibration_Start+0x96>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8000f68:	689a      	ldr	r2, [r3, #8]
 8000f6a:	f042 0204 	orr.w	r2, r2, #4
 8000f6e:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8000f70:	f7ff fdc8 	bl	8000b04 <HAL_GetTick>
 8000f74:	4606      	mov	r6, r0

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8000f76:	6823      	ldr	r3, [r4, #0]
 8000f78:	689b      	ldr	r3, [r3, #8]
 8000f7a:	075b      	lsls	r3, r3, #29
 8000f7c:	d41f      	bmi.n	8000fbe <HAL_ADCEx_Calibration_Start+0xba>
        return HAL_ERROR;
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f7e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000f80:	f023 0303 	bic.w	r3, r3, #3
 8000f84:	f043 0301 	orr.w	r3, r3, #1
 8000f88:	62a3      	str	r3, [r4, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000f90:	e012      	b.n	8000fb8 <HAL_ADCEx_Calibration_Start+0xb4>
      wait_loop_index--;
 8000f92:	9b01      	ldr	r3, [sp, #4]
 8000f94:	3b01      	subs	r3, #1
 8000f96:	9301      	str	r3, [sp, #4]
 8000f98:	e7d5      	b.n	8000f46 <HAL_ADCEx_Calibration_Start+0x42>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8000f9a:	f7ff fdb3 	bl	8000b04 <HAL_GetTick>
 8000f9e:	1b80      	subs	r0, r0, r6
 8000fa0:	280a      	cmp	r0, #10
 8000fa2:	d9dd      	bls.n	8000f60 <HAL_ADCEx_Calibration_Start+0x5c>
        ADC_STATE_CLR_SET(hadc->State,
 8000fa4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        return HAL_ERROR;
 8000fa6:	2501      	movs	r5, #1
        ADC_STATE_CLR_SET(hadc->State,
 8000fa8:	f023 0312 	bic.w	r3, r3, #18
 8000fac:	f043 0310 	orr.w	r3, r3, #16
 8000fb0:	62a3      	str	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8000fb8:	4628      	mov	r0, r5
 8000fba:	b002      	add	sp, #8
 8000fbc:	bd70      	pop	{r4, r5, r6, pc}
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8000fbe:	f7ff fda1 	bl	8000b04 <HAL_GetTick>
 8000fc2:	1b80      	subs	r0, r0, r6
 8000fc4:	280a      	cmp	r0, #10
 8000fc6:	d9d6      	bls.n	8000f76 <HAL_ADCEx_Calibration_Start+0x72>
 8000fc8:	e7ec      	b.n	8000fa4 <HAL_ADCEx_Calibration_Start+0xa0>
  __HAL_LOCK(hadc);
 8000fca:	2502      	movs	r5, #2
 8000fcc:	e7f4      	b.n	8000fb8 <HAL_ADCEx_Calibration_Start+0xb4>
 8000fce:	bf00      	nop
 8000fd0:	20000008 	.word	0x20000008

08000fd4 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000fd6:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8000fda:	b08d      	sub	sp, #52	; 0x34
  __HAL_LOCK(hadc);
 8000fdc:	2b01      	cmp	r3, #1
{
 8000fde:	4604      	mov	r4, r0
 8000fe0:	460e      	mov	r6, r1
 8000fe2:	4617      	mov	r7, r2
  __HAL_LOCK(hadc);
 8000fe4:	d058      	beq.n	8001098 <HAL_ADCEx_MultiModeStart_DMA+0xc4>
 8000fe6:	2501      	movs	r5, #1

  /* Set a temporary handle of the ADC slave associated to the ADC master     */
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8000fe8:	4b2c      	ldr	r3, [pc, #176]	; (800109c <HAL_ADCEx_MultiModeStart_DMA+0xc8>)
  __HAL_LOCK(hadc);
 8000fea:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8000fee:	9300      	str	r3, [sp, #0]
  
  /* On STM32F1 devices, ADC slave regular group must be configured with      */
  /* conversion trigger ADC_SOFTWARE_START.                                   */
  /* Note: External trigger of ADC slave must be enabled, it is already done  */
  /*       into function "HAL_ADC_Init()".                                    */
  if(!ADC_IS_SOFTWARE_START_REGULAR(&tmphadcSlave))  
 8000ff0:	689b      	ldr	r3, [r3, #8]
 8000ff2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000ff6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000ffa:	d007      	beq.n	800100c <HAL_ADCEx_MultiModeStart_DMA+0x38>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ffc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000ffe:	f043 0320 	orr.w	r3, r3, #32
 8001002:	6283      	str	r3, [r0, #40]	; 0x28
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001004:	2300      	movs	r3, #0
 8001006:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 800100a:	e042      	b.n	8001092 <HAL_ADCEx_MultiModeStart_DMA+0xbe>
  tmp_hal_status = ADC_Enable(hadc);
 800100c:	f7ff fe3e 	bl	8000c8c <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8001010:	4605      	mov	r5, r0
 8001012:	2800      	cmp	r0, #0
 8001014:	d1f6      	bne.n	8001004 <HAL_ADCEx_MultiModeStart_DMA+0x30>
    tmp_hal_status = ADC_Enable(&tmphadcSlave);
 8001016:	4668      	mov	r0, sp
 8001018:	f7ff fe38 	bl	8000c8c <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 800101c:	4605      	mov	r5, r0
 800101e:	2800      	cmp	r0, #0
 8001020:	d1f0      	bne.n	8001004 <HAL_ADCEx_MultiModeStart_DMA+0x30>
    ADC_STATE_CLR_SET(hadc->State,
 8001022:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001024:	4b1e      	ldr	r3, [pc, #120]	; (80010a0 <HAL_ADCEx_MultiModeStart_DMA+0xcc>)
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001026:	6821      	ldr	r1, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 8001028:	4013      	ands	r3, r2
 800102a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800102e:	62a3      	str	r3, [r4, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001030:	684b      	ldr	r3, [r1, #4]
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001032:	6a20      	ldr	r0, [r4, #32]
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001034:	055b      	lsls	r3, r3, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001036:	bf48      	it	mi
 8001038:	6aa3      	ldrmi	r3, [r4, #40]	; 0x28
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800103a:	4632      	mov	r2, r6
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800103c:	bf42      	ittt	mi
 800103e:	f423 5340 	bicmi.w	r3, r3, #12288	; 0x3000
 8001042:	f443 5380 	orrmi.w	r3, r3, #4096	; 0x1000
 8001046:	62a3      	strmi	r3, [r4, #40]	; 0x28
    __HAL_UNLOCK(hadc);
 8001048:	2300      	movs	r3, #0
    ADC_CLEAR_ERRORCODE(hadc);
 800104a:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 800104c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001050:	4b14      	ldr	r3, [pc, #80]	; (80010a4 <HAL_ADCEx_MultiModeStart_DMA+0xd0>)
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001052:	314c      	adds	r1, #76	; 0x4c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001054:	6283      	str	r3, [r0, #40]	; 0x28
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001056:	4b14      	ldr	r3, [pc, #80]	; (80010a8 <HAL_ADCEx_MultiModeStart_DMA+0xd4>)
 8001058:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800105a:	4b14      	ldr	r3, [pc, #80]	; (80010ac <HAL_ADCEx_MultiModeStart_DMA+0xd8>)
 800105c:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800105e:	f06f 0302 	mvn.w	r3, #2
 8001062:	f841 3c4c 	str.w	r3, [r1, #-76]
    SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001066:	f851 3c44 	ldr.w	r3, [r1, #-68]
 800106a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800106e:	f841 3c44 	str.w	r3, [r1, #-68]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001072:	463b      	mov	r3, r7
 8001074:	f000 f8e0 	bl	8001238 <HAL_DMA_Start_IT>
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001078:	6823      	ldr	r3, [r4, #0]
 800107a:	689a      	ldr	r2, [r3, #8]
 800107c:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8001080:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001084:	689a      	ldr	r2, [r3, #8]
 8001086:	bf0c      	ite	eq
 8001088:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800108c:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 8001090:	609a      	str	r2, [r3, #8]
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 8001092:	4628      	mov	r0, r5
 8001094:	b00d      	add	sp, #52	; 0x34
 8001096:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hadc);
 8001098:	2502      	movs	r5, #2
 800109a:	e7fa      	b.n	8001092 <HAL_ADCEx_MultiModeStart_DMA+0xbe>
 800109c:	40012800 	.word	0x40012800
 80010a0:	ffeffcfe 	.word	0xffeffcfe
 80010a4:	08000b11 	.word	0x08000b11
 80010a8:	08000b5f 	.word	0x08000b5f
 80010ac:	08000b6b 	.word	0x08000b6b

080010b0 <HAL_ADCEx_MultiModeConfigChannel>:
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_MODE(multimode->Mode));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010b0:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 80010b4:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 80010b6:	2b01      	cmp	r3, #1
{
 80010b8:	4602      	mov	r2, r0
  __HAL_LOCK(hadc);
 80010ba:	d01f      	beq.n	80010fc <HAL_ADCEx_MultiModeConfigChannel+0x4c>
 80010bc:	2301      	movs	r3, #1
  /*  - ADC master and ADC slave DMA configuration                            */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Multimode mode selection                                              */
  /* To optimize code, all multimode settings can be set when both ADCs of    */
  /* the common group are in state: disabled.                                 */
  if ((ADC_IS_ENABLE(hadc) == RESET)                     &&
 80010be:	6804      	ldr	r4, [r0, #0]
  __HAL_LOCK(hadc);
 80010c0:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if ((ADC_IS_ENABLE(hadc) == RESET)                     &&
 80010c4:	68a3      	ldr	r3, [r4, #8]
 80010c6:	07db      	lsls	r3, r3, #31
 80010c8:	d412      	bmi.n	80010f0 <HAL_ADCEx_MultiModeConfigChannel+0x40>
      (ADC_IS_ENABLE(&tmphadcSlave) == RESET)            &&
 80010ca:	4b0d      	ldr	r3, [pc, #52]	; (8001100 <HAL_ADCEx_MultiModeConfigChannel+0x50>)
 80010cc:	689b      	ldr	r3, [r3, #8]
  if ((ADC_IS_ENABLE(hadc) == RESET)                     &&
 80010ce:	f013 0301 	ands.w	r3, r3, #1
 80010d2:	d10d      	bne.n	80010f0 <HAL_ADCEx_MultiModeConfigChannel+0x40>
      (ADC_IS_ENABLE(&tmphadcSlave) == RESET)            &&
 80010d4:	480b      	ldr	r0, [pc, #44]	; (8001104 <HAL_ADCEx_MultiModeConfigChannel+0x54>)
 80010d6:	4284      	cmp	r4, r0
 80010d8:	d10a      	bne.n	80010f0 <HAL_ADCEx_MultiModeConfigChannel+0x40>
      (IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance))   )
  {
    MODIFY_REG(hadc->Instance->CR1,
 80010da:	6860      	ldr	r0, [r4, #4]
 80010dc:	6809      	ldr	r1, [r1, #0]
 80010de:	f420 2070 	bic.w	r0, r0, #983040	; 0xf0000
 80010e2:	4301      	orrs	r1, r0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010e4:	4618      	mov	r0, r3
    MODIFY_REG(hadc->Instance->CR1,
 80010e6:	6061      	str	r1, [r4, #4]
    tmp_hal_status = HAL_ERROR;
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80010e8:	2300      	movs	r3, #0
 80010ea:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80010ee:	bd10      	pop	{r4, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010f0:	6a93      	ldr	r3, [r2, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 80010f2:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010f4:	f043 0320 	orr.w	r3, r3, #32
 80010f8:	6293      	str	r3, [r2, #40]	; 0x28
 80010fa:	e7f5      	b.n	80010e8 <HAL_ADCEx_MultiModeConfigChannel+0x38>
  __HAL_LOCK(hadc);
 80010fc:	2002      	movs	r0, #2
} 
 80010fe:	bd10      	pop	{r4, pc}
 8001100:	40012800 	.word	0x40012800
 8001104:	40012400 	.word	0x40012400

08001108 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001108:	4a07      	ldr	r2, [pc, #28]	; (8001128 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800110a:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800110c:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800110e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001112:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001116:	041b      	lsls	r3, r3, #16
 8001118:	0c1b      	lsrs	r3, r3, #16
 800111a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800111e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8001122:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001124:	60d3      	str	r3, [r2, #12]
 8001126:	4770      	bx	lr
 8001128:	e000ed00 	.word	0xe000ed00

0800112c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800112c:	4b17      	ldr	r3, [pc, #92]	; (800118c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800112e:	b530      	push	{r4, r5, lr}
 8001130:	68dc      	ldr	r4, [r3, #12]
 8001132:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001136:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800113a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800113c:	2b04      	cmp	r3, #4
 800113e:	bf28      	it	cs
 8001140:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001142:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001144:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001148:	bf98      	it	ls
 800114a:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800114c:	fa05 f303 	lsl.w	r3, r5, r3
 8001150:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001154:	bf88      	it	hi
 8001156:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001158:	4019      	ands	r1, r3
 800115a:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800115c:	fa05 f404 	lsl.w	r4, r5, r4
 8001160:	3c01      	subs	r4, #1
 8001162:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8001164:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001166:	ea42 0201 	orr.w	r2, r2, r1
 800116a:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800116e:	bfaf      	iteee	ge
 8001170:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001174:	4b06      	ldrlt	r3, [pc, #24]	; (8001190 <HAL_NVIC_SetPriority+0x64>)
 8001176:	f000 000f 	andlt.w	r0, r0, #15
 800117a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800117c:	bfa5      	ittet	ge
 800117e:	b2d2      	uxtbge	r2, r2
 8001180:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001184:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001186:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800118a:	bd30      	pop	{r4, r5, pc}
 800118c:	e000ed00 	.word	0xe000ed00
 8001190:	e000ed14 	.word	0xe000ed14

08001194 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001194:	2301      	movs	r3, #1
 8001196:	0942      	lsrs	r2, r0, #5
 8001198:	f000 001f 	and.w	r0, r0, #31
 800119c:	fa03 f000 	lsl.w	r0, r3, r0
 80011a0:	4b01      	ldr	r3, [pc, #4]	; (80011a8 <HAL_NVIC_EnableIRQ+0x14>)
 80011a2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80011a6:	4770      	bx	lr
 80011a8:	e000e100 	.word	0xe000e100

080011ac <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011ac:	3801      	subs	r0, #1
 80011ae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80011b2:	d20a      	bcs.n	80011ca <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b4:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011b6:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b8:	4a06      	ldr	r2, [pc, #24]	; (80011d4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ba:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011bc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011c0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011c2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011c4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80011ca:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	e000e010 	.word	0xe000e010
 80011d4:	e000ed00 	.word	0xe000ed00

080011d8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80011d8:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80011da:	b330      	cbz	r0, 800122a <HAL_DMA_Init+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80011dc:	2214      	movs	r2, #20
 80011de:	6801      	ldr	r1, [r0, #0]
 80011e0:	4b13      	ldr	r3, [pc, #76]	; (8001230 <HAL_DMA_Init+0x58>)
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80011e2:	6884      	ldr	r4, [r0, #8]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80011e4:	440b      	add	r3, r1
 80011e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80011ee:	4b11      	ldr	r3, [pc, #68]	; (8001234 <HAL_DMA_Init+0x5c>)
  tmp = hdma->Instance->CCR;
 80011f0:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 80011f2:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp |=  hdma->Init.Direction        |
 80011f4:	6843      	ldr	r3, [r0, #4]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80011f6:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
  tmp |=  hdma->Init.Direction        |
 80011fa:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011fc:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80011fe:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001202:	4323      	orrs	r3, r4
 8001204:	6904      	ldr	r4, [r0, #16]
 8001206:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001208:	6944      	ldr	r4, [r0, #20]
 800120a:	4323      	orrs	r3, r4
 800120c:	6984      	ldr	r4, [r0, #24]
 800120e:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8001210:	69c4      	ldr	r4, [r0, #28]
 8001212:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8001214:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001216:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001218:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800121a:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 800121c:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001220:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001222:	f880 3020 	strb.w	r3, [r0, #32]

  return HAL_OK;
 8001226:	4618      	mov	r0, r3
 8001228:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800122a:	2001      	movs	r0, #1
}
 800122c:	bd10      	pop	{r4, pc}
 800122e:	bf00      	nop
 8001230:	bffdfff8 	.word	0xbffdfff8
 8001234:	40020000 	.word	0x40020000

08001238 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001238:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800123a:	f890 4020 	ldrb.w	r4, [r0, #32]
 800123e:	2c01      	cmp	r4, #1
 8001240:	d035      	beq.n	80012ae <HAL_DMA_Start_IT+0x76>
 8001242:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001244:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8001248:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 800124c:	42a5      	cmp	r5, r4
 800124e:	f04f 0600 	mov.w	r6, #0
 8001252:	f04f 0402 	mov.w	r4, #2
 8001256:	d128      	bne.n	80012aa <HAL_DMA_Start_IT+0x72>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001258:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800125c:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800125e:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8001260:	6826      	ldr	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001262:	6c07      	ldr	r7, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 8001264:	f026 0601 	bic.w	r6, r6, #1
 8001268:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800126a:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 800126c:	40bd      	lsls	r5, r7
 800126e:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001270:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001272:	6843      	ldr	r3, [r0, #4]
 8001274:	6805      	ldr	r5, [r0, #0]
 8001276:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8001278:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800127a:	bf0b      	itete	eq
 800127c:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800127e:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001280:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001282:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8001284:	b14b      	cbz	r3, 800129a <HAL_DMA_Start_IT+0x62>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001286:	6823      	ldr	r3, [r4, #0]
 8001288:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800128c:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 800128e:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001290:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8001292:	f043 0301 	orr.w	r3, r3, #1
 8001296:	602b      	str	r3, [r5, #0]
 8001298:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800129a:	6823      	ldr	r3, [r4, #0]
 800129c:	f023 0304 	bic.w	r3, r3, #4
 80012a0:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80012a2:	6823      	ldr	r3, [r4, #0]
 80012a4:	f043 030a 	orr.w	r3, r3, #10
 80012a8:	e7f0      	b.n	800128c <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 80012aa:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 80012ae:	2002      	movs	r0, #2
}
 80012b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080012b4 <HAL_DMA_IRQHandler>:
{
 80012b4:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80012b6:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80012b8:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80012ba:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80012bc:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80012be:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80012c0:	4095      	lsls	r5, r2
 80012c2:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 80012c4:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80012c6:	d032      	beq.n	800132e <HAL_DMA_IRQHandler+0x7a>
 80012c8:	074d      	lsls	r5, r1, #29
 80012ca:	d530      	bpl.n	800132e <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80012d0:	bf5e      	ittt	pl
 80012d2:	681a      	ldrpl	r2, [r3, #0]
 80012d4:	f022 0204 	bicpl.w	r2, r2, #4
 80012d8:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80012da:	4a3e      	ldr	r2, [pc, #248]	; (80013d4 <HAL_DMA_IRQHandler+0x120>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d019      	beq.n	8001314 <HAL_DMA_IRQHandler+0x60>
 80012e0:	3214      	adds	r2, #20
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d018      	beq.n	8001318 <HAL_DMA_IRQHandler+0x64>
 80012e6:	3214      	adds	r2, #20
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d017      	beq.n	800131c <HAL_DMA_IRQHandler+0x68>
 80012ec:	3214      	adds	r2, #20
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d017      	beq.n	8001322 <HAL_DMA_IRQHandler+0x6e>
 80012f2:	3214      	adds	r2, #20
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d017      	beq.n	8001328 <HAL_DMA_IRQHandler+0x74>
 80012f8:	3214      	adds	r2, #20
 80012fa:	4293      	cmp	r3, r2
 80012fc:	bf0c      	ite	eq
 80012fe:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 8001302:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8001306:	4a34      	ldr	r2, [pc, #208]	; (80013d8 <HAL_DMA_IRQHandler+0x124>)
 8001308:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 800130a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 800130c:	2b00      	cmp	r3, #0
 800130e:	d05e      	beq.n	80013ce <HAL_DMA_IRQHandler+0x11a>
}
 8001310:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8001312:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001314:	2304      	movs	r3, #4
 8001316:	e7f6      	b.n	8001306 <HAL_DMA_IRQHandler+0x52>
 8001318:	2340      	movs	r3, #64	; 0x40
 800131a:	e7f4      	b.n	8001306 <HAL_DMA_IRQHandler+0x52>
 800131c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001320:	e7f1      	b.n	8001306 <HAL_DMA_IRQHandler+0x52>
 8001322:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001326:	e7ee      	b.n	8001306 <HAL_DMA_IRQHandler+0x52>
 8001328:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800132c:	e7eb      	b.n	8001306 <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800132e:	2502      	movs	r5, #2
 8001330:	4095      	lsls	r5, r2
 8001332:	4225      	tst	r5, r4
 8001334:	d035      	beq.n	80013a2 <HAL_DMA_IRQHandler+0xee>
 8001336:	078d      	lsls	r5, r1, #30
 8001338:	d533      	bpl.n	80013a2 <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	0694      	lsls	r4, r2, #26
 800133e:	d406      	bmi.n	800134e <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	f022 020a 	bic.w	r2, r2, #10
 8001346:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001348:	2201      	movs	r2, #1
 800134a:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800134e:	4a21      	ldr	r2, [pc, #132]	; (80013d4 <HAL_DMA_IRQHandler+0x120>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d019      	beq.n	8001388 <HAL_DMA_IRQHandler+0xd4>
 8001354:	3214      	adds	r2, #20
 8001356:	4293      	cmp	r3, r2
 8001358:	d018      	beq.n	800138c <HAL_DMA_IRQHandler+0xd8>
 800135a:	3214      	adds	r2, #20
 800135c:	4293      	cmp	r3, r2
 800135e:	d017      	beq.n	8001390 <HAL_DMA_IRQHandler+0xdc>
 8001360:	3214      	adds	r2, #20
 8001362:	4293      	cmp	r3, r2
 8001364:	d017      	beq.n	8001396 <HAL_DMA_IRQHandler+0xe2>
 8001366:	3214      	adds	r2, #20
 8001368:	4293      	cmp	r3, r2
 800136a:	d017      	beq.n	800139c <HAL_DMA_IRQHandler+0xe8>
 800136c:	3214      	adds	r2, #20
 800136e:	4293      	cmp	r3, r2
 8001370:	bf0c      	ite	eq
 8001372:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8001376:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 800137a:	4a17      	ldr	r2, [pc, #92]	; (80013d8 <HAL_DMA_IRQHandler+0x124>)
 800137c:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 800137e:	2300      	movs	r3, #0
 8001380:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8001384:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001386:	e7c1      	b.n	800130c <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001388:	2302      	movs	r3, #2
 800138a:	e7f6      	b.n	800137a <HAL_DMA_IRQHandler+0xc6>
 800138c:	2320      	movs	r3, #32
 800138e:	e7f4      	b.n	800137a <HAL_DMA_IRQHandler+0xc6>
 8001390:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001394:	e7f1      	b.n	800137a <HAL_DMA_IRQHandler+0xc6>
 8001396:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800139a:	e7ee      	b.n	800137a <HAL_DMA_IRQHandler+0xc6>
 800139c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013a0:	e7eb      	b.n	800137a <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80013a2:	2508      	movs	r5, #8
 80013a4:	4095      	lsls	r5, r2
 80013a6:	4225      	tst	r5, r4
 80013a8:	d011      	beq.n	80013ce <HAL_DMA_IRQHandler+0x11a>
 80013aa:	0709      	lsls	r1, r1, #28
 80013ac:	d50f      	bpl.n	80013ce <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013ae:	6819      	ldr	r1, [r3, #0]
 80013b0:	f021 010e 	bic.w	r1, r1, #14
 80013b4:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80013b6:	2301      	movs	r3, #1
 80013b8:	fa03 f202 	lsl.w	r2, r3, r2
 80013bc:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80013be:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 80013c0:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 80013c4:	2300      	movs	r3, #0
 80013c6:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 80013ca:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80013cc:	e79e      	b.n	800130c <HAL_DMA_IRQHandler+0x58>
}
 80013ce:	bc70      	pop	{r4, r5, r6}
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	40020008 	.word	0x40020008
 80013d8:	40020000 	.word	0x40020000

080013dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80013e0:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80013e2:	4616      	mov	r6, r2
 80013e4:	4b65      	ldr	r3, [pc, #404]	; (800157c <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013e6:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 800158c <HAL_GPIO_Init+0x1b0>
 80013ea:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8001590 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 80013ee:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013f2:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 80013f4:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013f8:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 80013fc:	45a0      	cmp	r8, r4
 80013fe:	d17f      	bne.n	8001500 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8001400:	684d      	ldr	r5, [r1, #4]
 8001402:	2d12      	cmp	r5, #18
 8001404:	f000 80af 	beq.w	8001566 <HAL_GPIO_Init+0x18a>
 8001408:	f200 8088 	bhi.w	800151c <HAL_GPIO_Init+0x140>
 800140c:	2d02      	cmp	r5, #2
 800140e:	f000 80a7 	beq.w	8001560 <HAL_GPIO_Init+0x184>
 8001412:	d87c      	bhi.n	800150e <HAL_GPIO_Init+0x132>
 8001414:	2d00      	cmp	r5, #0
 8001416:	f000 808e 	beq.w	8001536 <HAL_GPIO_Init+0x15a>
 800141a:	2d01      	cmp	r5, #1
 800141c:	f000 809e 	beq.w	800155c <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001420:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001424:	2cff      	cmp	r4, #255	; 0xff
 8001426:	bf93      	iteet	ls
 8001428:	4682      	movls	sl, r0
 800142a:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 800142e:	3d08      	subhi	r5, #8
 8001430:	f8d0 b000 	ldrls.w	fp, [r0]
 8001434:	bf92      	itee	ls
 8001436:	00b5      	lslls	r5, r6, #2
 8001438:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 800143c:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800143e:	fa09 f805 	lsl.w	r8, r9, r5
 8001442:	ea2b 0808 	bic.w	r8, fp, r8
 8001446:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800144a:	bf88      	it	hi
 800144c:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001450:	ea48 0505 	orr.w	r5, r8, r5
 8001454:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001458:	f8d1 a004 	ldr.w	sl, [r1, #4]
 800145c:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8001460:	d04e      	beq.n	8001500 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001462:	4d47      	ldr	r5, [pc, #284]	; (8001580 <HAL_GPIO_Init+0x1a4>)
 8001464:	4f46      	ldr	r7, [pc, #280]	; (8001580 <HAL_GPIO_Init+0x1a4>)
 8001466:	69ad      	ldr	r5, [r5, #24]
 8001468:	f026 0803 	bic.w	r8, r6, #3
 800146c:	f045 0501 	orr.w	r5, r5, #1
 8001470:	61bd      	str	r5, [r7, #24]
 8001472:	69bd      	ldr	r5, [r7, #24]
 8001474:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8001478:	f005 0501 	and.w	r5, r5, #1
 800147c:	9501      	str	r5, [sp, #4]
 800147e:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001482:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001486:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001488:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 800148c:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001490:	fa09 f90b 	lsl.w	r9, r9, fp
 8001494:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001498:	4d3a      	ldr	r5, [pc, #232]	; (8001584 <HAL_GPIO_Init+0x1a8>)
 800149a:	42a8      	cmp	r0, r5
 800149c:	d068      	beq.n	8001570 <HAL_GPIO_Init+0x194>
 800149e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80014a2:	42a8      	cmp	r0, r5
 80014a4:	d066      	beq.n	8001574 <HAL_GPIO_Init+0x198>
 80014a6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80014aa:	42a8      	cmp	r0, r5
 80014ac:	d064      	beq.n	8001578 <HAL_GPIO_Init+0x19c>
 80014ae:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80014b2:	42a8      	cmp	r0, r5
 80014b4:	bf0c      	ite	eq
 80014b6:	2503      	moveq	r5, #3
 80014b8:	2504      	movne	r5, #4
 80014ba:	fa05 f50b 	lsl.w	r5, r5, fp
 80014be:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 80014c2:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014c6:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014c8:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80014cc:	bf14      	ite	ne
 80014ce:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014d0:	43a5      	biceq	r5, r4
 80014d2:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014d4:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014d6:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80014da:	bf14      	ite	ne
 80014dc:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014de:	43a5      	biceq	r5, r4
 80014e0:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80014e2:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014e4:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80014e8:	bf14      	ite	ne
 80014ea:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80014ec:	43a5      	biceq	r5, r4
 80014ee:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80014f0:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014f2:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80014f6:	bf14      	ite	ne
 80014f8:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014fa:	ea25 0404 	biceq.w	r4, r5, r4
 80014fe:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001500:	3601      	adds	r6, #1
 8001502:	2e10      	cmp	r6, #16
 8001504:	f47f af73 	bne.w	80013ee <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8001508:	b003      	add	sp, #12
 800150a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 800150e:	2d03      	cmp	r5, #3
 8001510:	d022      	beq.n	8001558 <HAL_GPIO_Init+0x17c>
 8001512:	2d11      	cmp	r5, #17
 8001514:	d184      	bne.n	8001420 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001516:	68ca      	ldr	r2, [r1, #12]
 8001518:	3204      	adds	r2, #4
          break;
 800151a:	e781      	b.n	8001420 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 800151c:	4f1a      	ldr	r7, [pc, #104]	; (8001588 <HAL_GPIO_Init+0x1ac>)
 800151e:	42bd      	cmp	r5, r7
 8001520:	d009      	beq.n	8001536 <HAL_GPIO_Init+0x15a>
 8001522:	d812      	bhi.n	800154a <HAL_GPIO_Init+0x16e>
 8001524:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8001594 <HAL_GPIO_Init+0x1b8>
 8001528:	454d      	cmp	r5, r9
 800152a:	d004      	beq.n	8001536 <HAL_GPIO_Init+0x15a>
 800152c:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8001530:	454d      	cmp	r5, r9
 8001532:	f47f af75 	bne.w	8001420 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001536:	688a      	ldr	r2, [r1, #8]
 8001538:	b1c2      	cbz	r2, 800156c <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800153a:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 800153c:	bf0c      	ite	eq
 800153e:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8001542:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001546:	2208      	movs	r2, #8
 8001548:	e76a      	b.n	8001420 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 800154a:	4575      	cmp	r5, lr
 800154c:	d0f3      	beq.n	8001536 <HAL_GPIO_Init+0x15a>
 800154e:	4565      	cmp	r5, ip
 8001550:	d0f1      	beq.n	8001536 <HAL_GPIO_Init+0x15a>
 8001552:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8001598 <HAL_GPIO_Init+0x1bc>
 8001556:	e7eb      	b.n	8001530 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001558:	2200      	movs	r2, #0
 800155a:	e761      	b.n	8001420 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800155c:	68ca      	ldr	r2, [r1, #12]
          break;
 800155e:	e75f      	b.n	8001420 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001560:	68ca      	ldr	r2, [r1, #12]
 8001562:	3208      	adds	r2, #8
          break;
 8001564:	e75c      	b.n	8001420 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001566:	68ca      	ldr	r2, [r1, #12]
 8001568:	320c      	adds	r2, #12
          break;
 800156a:	e759      	b.n	8001420 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800156c:	2204      	movs	r2, #4
 800156e:	e757      	b.n	8001420 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001570:	2500      	movs	r5, #0
 8001572:	e7a2      	b.n	80014ba <HAL_GPIO_Init+0xde>
 8001574:	2501      	movs	r5, #1
 8001576:	e7a0      	b.n	80014ba <HAL_GPIO_Init+0xde>
 8001578:	2502      	movs	r5, #2
 800157a:	e79e      	b.n	80014ba <HAL_GPIO_Init+0xde>
 800157c:	40010400 	.word	0x40010400
 8001580:	40021000 	.word	0x40021000
 8001584:	40010800 	.word	0x40010800
 8001588:	10210000 	.word	0x10210000
 800158c:	10310000 	.word	0x10310000
 8001590:	10320000 	.word	0x10320000
 8001594:	10110000 	.word	0x10110000
 8001598:	10220000 	.word	0x10220000

0800159c <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800159c:	6803      	ldr	r3, [r0, #0]
{
 800159e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015a2:	07db      	lsls	r3, r3, #31
{
 80015a4:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015a6:	d410      	bmi.n	80015ca <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015a8:	682b      	ldr	r3, [r5, #0]
 80015aa:	079f      	lsls	r7, r3, #30
 80015ac:	d45e      	bmi.n	800166c <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015ae:	682b      	ldr	r3, [r5, #0]
 80015b0:	0719      	lsls	r1, r3, #28
 80015b2:	f100 8095 	bmi.w	80016e0 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015b6:	682b      	ldr	r3, [r5, #0]
 80015b8:	075a      	lsls	r2, r3, #29
 80015ba:	f100 80bf 	bmi.w	800173c <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015be:	69ea      	ldr	r2, [r5, #28]
 80015c0:	2a00      	cmp	r2, #0
 80015c2:	f040 812d 	bne.w	8001820 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80015c6:	2000      	movs	r0, #0
 80015c8:	e014      	b.n	80015f4 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80015ca:	4c90      	ldr	r4, [pc, #576]	; (800180c <HAL_RCC_OscConfig+0x270>)
 80015cc:	6863      	ldr	r3, [r4, #4]
 80015ce:	f003 030c 	and.w	r3, r3, #12
 80015d2:	2b04      	cmp	r3, #4
 80015d4:	d007      	beq.n	80015e6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015d6:	6863      	ldr	r3, [r4, #4]
 80015d8:	f003 030c 	and.w	r3, r3, #12
 80015dc:	2b08      	cmp	r3, #8
 80015de:	d10c      	bne.n	80015fa <HAL_RCC_OscConfig+0x5e>
 80015e0:	6863      	ldr	r3, [r4, #4]
 80015e2:	03de      	lsls	r6, r3, #15
 80015e4:	d509      	bpl.n	80015fa <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015e6:	6823      	ldr	r3, [r4, #0]
 80015e8:	039c      	lsls	r4, r3, #14
 80015ea:	d5dd      	bpl.n	80015a8 <HAL_RCC_OscConfig+0xc>
 80015ec:	686b      	ldr	r3, [r5, #4]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d1da      	bne.n	80015a8 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80015f2:	2001      	movs	r0, #1
}
 80015f4:	b002      	add	sp, #8
 80015f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015fa:	686b      	ldr	r3, [r5, #4]
 80015fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001600:	d110      	bne.n	8001624 <HAL_RCC_OscConfig+0x88>
 8001602:	6823      	ldr	r3, [r4, #0]
 8001604:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001608:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800160a:	f7ff fa7b 	bl	8000b04 <HAL_GetTick>
 800160e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001610:	6823      	ldr	r3, [r4, #0]
 8001612:	0398      	lsls	r0, r3, #14
 8001614:	d4c8      	bmi.n	80015a8 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001616:	f7ff fa75 	bl	8000b04 <HAL_GetTick>
 800161a:	1b80      	subs	r0, r0, r6
 800161c:	2864      	cmp	r0, #100	; 0x64
 800161e:	d9f7      	bls.n	8001610 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8001620:	2003      	movs	r0, #3
 8001622:	e7e7      	b.n	80015f4 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001624:	b99b      	cbnz	r3, 800164e <HAL_RCC_OscConfig+0xb2>
 8001626:	6823      	ldr	r3, [r4, #0]
 8001628:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800162c:	6023      	str	r3, [r4, #0]
 800162e:	6823      	ldr	r3, [r4, #0]
 8001630:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001634:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001636:	f7ff fa65 	bl	8000b04 <HAL_GetTick>
 800163a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800163c:	6823      	ldr	r3, [r4, #0]
 800163e:	0399      	lsls	r1, r3, #14
 8001640:	d5b2      	bpl.n	80015a8 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001642:	f7ff fa5f 	bl	8000b04 <HAL_GetTick>
 8001646:	1b80      	subs	r0, r0, r6
 8001648:	2864      	cmp	r0, #100	; 0x64
 800164a:	d9f7      	bls.n	800163c <HAL_RCC_OscConfig+0xa0>
 800164c:	e7e8      	b.n	8001620 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800164e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001652:	6823      	ldr	r3, [r4, #0]
 8001654:	d103      	bne.n	800165e <HAL_RCC_OscConfig+0xc2>
 8001656:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800165a:	6023      	str	r3, [r4, #0]
 800165c:	e7d1      	b.n	8001602 <HAL_RCC_OscConfig+0x66>
 800165e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001662:	6023      	str	r3, [r4, #0]
 8001664:	6823      	ldr	r3, [r4, #0]
 8001666:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800166a:	e7cd      	b.n	8001608 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800166c:	4c67      	ldr	r4, [pc, #412]	; (800180c <HAL_RCC_OscConfig+0x270>)
 800166e:	6863      	ldr	r3, [r4, #4]
 8001670:	f013 0f0c 	tst.w	r3, #12
 8001674:	d007      	beq.n	8001686 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001676:	6863      	ldr	r3, [r4, #4]
 8001678:	f003 030c 	and.w	r3, r3, #12
 800167c:	2b08      	cmp	r3, #8
 800167e:	d110      	bne.n	80016a2 <HAL_RCC_OscConfig+0x106>
 8001680:	6863      	ldr	r3, [r4, #4]
 8001682:	03da      	lsls	r2, r3, #15
 8001684:	d40d      	bmi.n	80016a2 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001686:	6823      	ldr	r3, [r4, #0]
 8001688:	079b      	lsls	r3, r3, #30
 800168a:	d502      	bpl.n	8001692 <HAL_RCC_OscConfig+0xf6>
 800168c:	692b      	ldr	r3, [r5, #16]
 800168e:	2b01      	cmp	r3, #1
 8001690:	d1af      	bne.n	80015f2 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001692:	6823      	ldr	r3, [r4, #0]
 8001694:	696a      	ldr	r2, [r5, #20]
 8001696:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800169a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800169e:	6023      	str	r3, [r4, #0]
 80016a0:	e785      	b.n	80015ae <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016a2:	692a      	ldr	r2, [r5, #16]
 80016a4:	4b5a      	ldr	r3, [pc, #360]	; (8001810 <HAL_RCC_OscConfig+0x274>)
 80016a6:	b16a      	cbz	r2, 80016c4 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 80016a8:	2201      	movs	r2, #1
 80016aa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80016ac:	f7ff fa2a 	bl	8000b04 <HAL_GetTick>
 80016b0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016b2:	6823      	ldr	r3, [r4, #0]
 80016b4:	079f      	lsls	r7, r3, #30
 80016b6:	d4ec      	bmi.n	8001692 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016b8:	f7ff fa24 	bl	8000b04 <HAL_GetTick>
 80016bc:	1b80      	subs	r0, r0, r6
 80016be:	2802      	cmp	r0, #2
 80016c0:	d9f7      	bls.n	80016b2 <HAL_RCC_OscConfig+0x116>
 80016c2:	e7ad      	b.n	8001620 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80016c4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80016c6:	f7ff fa1d 	bl	8000b04 <HAL_GetTick>
 80016ca:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016cc:	6823      	ldr	r3, [r4, #0]
 80016ce:	0798      	lsls	r0, r3, #30
 80016d0:	f57f af6d 	bpl.w	80015ae <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016d4:	f7ff fa16 	bl	8000b04 <HAL_GetTick>
 80016d8:	1b80      	subs	r0, r0, r6
 80016da:	2802      	cmp	r0, #2
 80016dc:	d9f6      	bls.n	80016cc <HAL_RCC_OscConfig+0x130>
 80016de:	e79f      	b.n	8001620 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016e0:	69aa      	ldr	r2, [r5, #24]
 80016e2:	4c4a      	ldr	r4, [pc, #296]	; (800180c <HAL_RCC_OscConfig+0x270>)
 80016e4:	4b4b      	ldr	r3, [pc, #300]	; (8001814 <HAL_RCC_OscConfig+0x278>)
 80016e6:	b1da      	cbz	r2, 8001720 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 80016e8:	2201      	movs	r2, #1
 80016ea:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80016ec:	f7ff fa0a 	bl	8000b04 <HAL_GetTick>
 80016f0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80016f4:	079b      	lsls	r3, r3, #30
 80016f6:	d50d      	bpl.n	8001714 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80016f8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80016fc:	4b46      	ldr	r3, [pc, #280]	; (8001818 <HAL_RCC_OscConfig+0x27c>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	fbb3 f3f2 	udiv	r3, r3, r2
 8001704:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8001706:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001708:	9b01      	ldr	r3, [sp, #4]
 800170a:	1e5a      	subs	r2, r3, #1
 800170c:	9201      	str	r2, [sp, #4]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d1f9      	bne.n	8001706 <HAL_RCC_OscConfig+0x16a>
 8001712:	e750      	b.n	80015b6 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001714:	f7ff f9f6 	bl	8000b04 <HAL_GetTick>
 8001718:	1b80      	subs	r0, r0, r6
 800171a:	2802      	cmp	r0, #2
 800171c:	d9e9      	bls.n	80016f2 <HAL_RCC_OscConfig+0x156>
 800171e:	e77f      	b.n	8001620 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8001720:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001722:	f7ff f9ef 	bl	8000b04 <HAL_GetTick>
 8001726:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001728:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800172a:	079f      	lsls	r7, r3, #30
 800172c:	f57f af43 	bpl.w	80015b6 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001730:	f7ff f9e8 	bl	8000b04 <HAL_GetTick>
 8001734:	1b80      	subs	r0, r0, r6
 8001736:	2802      	cmp	r0, #2
 8001738:	d9f6      	bls.n	8001728 <HAL_RCC_OscConfig+0x18c>
 800173a:	e771      	b.n	8001620 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800173c:	4c33      	ldr	r4, [pc, #204]	; (800180c <HAL_RCC_OscConfig+0x270>)
 800173e:	69e3      	ldr	r3, [r4, #28]
 8001740:	00d8      	lsls	r0, r3, #3
 8001742:	d424      	bmi.n	800178e <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8001744:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001746:	69e3      	ldr	r3, [r4, #28]
 8001748:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800174c:	61e3      	str	r3, [r4, #28]
 800174e:	69e3      	ldr	r3, [r4, #28]
 8001750:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001754:	9300      	str	r3, [sp, #0]
 8001756:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001758:	4e30      	ldr	r6, [pc, #192]	; (800181c <HAL_RCC_OscConfig+0x280>)
 800175a:	6833      	ldr	r3, [r6, #0]
 800175c:	05d9      	lsls	r1, r3, #23
 800175e:	d518      	bpl.n	8001792 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001760:	68eb      	ldr	r3, [r5, #12]
 8001762:	2b01      	cmp	r3, #1
 8001764:	d126      	bne.n	80017b4 <HAL_RCC_OscConfig+0x218>
 8001766:	6a23      	ldr	r3, [r4, #32]
 8001768:	f043 0301 	orr.w	r3, r3, #1
 800176c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800176e:	f7ff f9c9 	bl	8000b04 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001772:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001776:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001778:	6a23      	ldr	r3, [r4, #32]
 800177a:	079b      	lsls	r3, r3, #30
 800177c:	d53f      	bpl.n	80017fe <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 800177e:	2f00      	cmp	r7, #0
 8001780:	f43f af1d 	beq.w	80015be <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001784:	69e3      	ldr	r3, [r4, #28]
 8001786:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800178a:	61e3      	str	r3, [r4, #28]
 800178c:	e717      	b.n	80015be <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 800178e:	2700      	movs	r7, #0
 8001790:	e7e2      	b.n	8001758 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001792:	6833      	ldr	r3, [r6, #0]
 8001794:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001798:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800179a:	f7ff f9b3 	bl	8000b04 <HAL_GetTick>
 800179e:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017a0:	6833      	ldr	r3, [r6, #0]
 80017a2:	05da      	lsls	r2, r3, #23
 80017a4:	d4dc      	bmi.n	8001760 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017a6:	f7ff f9ad 	bl	8000b04 <HAL_GetTick>
 80017aa:	eba0 0008 	sub.w	r0, r0, r8
 80017ae:	2864      	cmp	r0, #100	; 0x64
 80017b0:	d9f6      	bls.n	80017a0 <HAL_RCC_OscConfig+0x204>
 80017b2:	e735      	b.n	8001620 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017b4:	b9ab      	cbnz	r3, 80017e2 <HAL_RCC_OscConfig+0x246>
 80017b6:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017b8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017bc:	f023 0301 	bic.w	r3, r3, #1
 80017c0:	6223      	str	r3, [r4, #32]
 80017c2:	6a23      	ldr	r3, [r4, #32]
 80017c4:	f023 0304 	bic.w	r3, r3, #4
 80017c8:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80017ca:	f7ff f99b 	bl	8000b04 <HAL_GetTick>
 80017ce:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017d0:	6a23      	ldr	r3, [r4, #32]
 80017d2:	0798      	lsls	r0, r3, #30
 80017d4:	d5d3      	bpl.n	800177e <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017d6:	f7ff f995 	bl	8000b04 <HAL_GetTick>
 80017da:	1b80      	subs	r0, r0, r6
 80017dc:	4540      	cmp	r0, r8
 80017de:	d9f7      	bls.n	80017d0 <HAL_RCC_OscConfig+0x234>
 80017e0:	e71e      	b.n	8001620 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017e2:	2b05      	cmp	r3, #5
 80017e4:	6a23      	ldr	r3, [r4, #32]
 80017e6:	d103      	bne.n	80017f0 <HAL_RCC_OscConfig+0x254>
 80017e8:	f043 0304 	orr.w	r3, r3, #4
 80017ec:	6223      	str	r3, [r4, #32]
 80017ee:	e7ba      	b.n	8001766 <HAL_RCC_OscConfig+0x1ca>
 80017f0:	f023 0301 	bic.w	r3, r3, #1
 80017f4:	6223      	str	r3, [r4, #32]
 80017f6:	6a23      	ldr	r3, [r4, #32]
 80017f8:	f023 0304 	bic.w	r3, r3, #4
 80017fc:	e7b6      	b.n	800176c <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017fe:	f7ff f981 	bl	8000b04 <HAL_GetTick>
 8001802:	eba0 0008 	sub.w	r0, r0, r8
 8001806:	42b0      	cmp	r0, r6
 8001808:	d9b6      	bls.n	8001778 <HAL_RCC_OscConfig+0x1dc>
 800180a:	e709      	b.n	8001620 <HAL_RCC_OscConfig+0x84>
 800180c:	40021000 	.word	0x40021000
 8001810:	42420000 	.word	0x42420000
 8001814:	42420480 	.word	0x42420480
 8001818:	20000008 	.word	0x20000008
 800181c:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001820:	4c22      	ldr	r4, [pc, #136]	; (80018ac <HAL_RCC_OscConfig+0x310>)
 8001822:	6863      	ldr	r3, [r4, #4]
 8001824:	f003 030c 	and.w	r3, r3, #12
 8001828:	2b08      	cmp	r3, #8
 800182a:	f43f aee2 	beq.w	80015f2 <HAL_RCC_OscConfig+0x56>
 800182e:	2300      	movs	r3, #0
 8001830:	4e1f      	ldr	r6, [pc, #124]	; (80018b0 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001832:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001834:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001836:	d12b      	bne.n	8001890 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8001838:	f7ff f964 	bl	8000b04 <HAL_GetTick>
 800183c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800183e:	6823      	ldr	r3, [r4, #0]
 8001840:	0199      	lsls	r1, r3, #6
 8001842:	d41f      	bmi.n	8001884 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001844:	6a2b      	ldr	r3, [r5, #32]
 8001846:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800184a:	d105      	bne.n	8001858 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800184c:	6862      	ldr	r2, [r4, #4]
 800184e:	68a9      	ldr	r1, [r5, #8]
 8001850:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001854:	430a      	orrs	r2, r1
 8001856:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001858:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800185a:	6862      	ldr	r2, [r4, #4]
 800185c:	430b      	orrs	r3, r1
 800185e:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001862:	4313      	orrs	r3, r2
 8001864:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001866:	2301      	movs	r3, #1
 8001868:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800186a:	f7ff f94b 	bl	8000b04 <HAL_GetTick>
 800186e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001870:	6823      	ldr	r3, [r4, #0]
 8001872:	019a      	lsls	r2, r3, #6
 8001874:	f53f aea7 	bmi.w	80015c6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001878:	f7ff f944 	bl	8000b04 <HAL_GetTick>
 800187c:	1b40      	subs	r0, r0, r5
 800187e:	2802      	cmp	r0, #2
 8001880:	d9f6      	bls.n	8001870 <HAL_RCC_OscConfig+0x2d4>
 8001882:	e6cd      	b.n	8001620 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001884:	f7ff f93e 	bl	8000b04 <HAL_GetTick>
 8001888:	1bc0      	subs	r0, r0, r7
 800188a:	2802      	cmp	r0, #2
 800188c:	d9d7      	bls.n	800183e <HAL_RCC_OscConfig+0x2a2>
 800188e:	e6c7      	b.n	8001620 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8001890:	f7ff f938 	bl	8000b04 <HAL_GetTick>
 8001894:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001896:	6823      	ldr	r3, [r4, #0]
 8001898:	019b      	lsls	r3, r3, #6
 800189a:	f57f ae94 	bpl.w	80015c6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800189e:	f7ff f931 	bl	8000b04 <HAL_GetTick>
 80018a2:	1b40      	subs	r0, r0, r5
 80018a4:	2802      	cmp	r0, #2
 80018a6:	d9f6      	bls.n	8001896 <HAL_RCC_OscConfig+0x2fa>
 80018a8:	e6ba      	b.n	8001620 <HAL_RCC_OscConfig+0x84>
 80018aa:	bf00      	nop
 80018ac:	40021000 	.word	0x40021000
 80018b0:	42420060 	.word	0x42420060

080018b4 <HAL_RCC_GetSysClockFreq>:
{
 80018b4:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80018b6:	4b19      	ldr	r3, [pc, #100]	; (800191c <HAL_RCC_GetSysClockFreq+0x68>)
{
 80018b8:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80018ba:	ac02      	add	r4, sp, #8
 80018bc:	f103 0510 	add.w	r5, r3, #16
 80018c0:	4622      	mov	r2, r4
 80018c2:	6818      	ldr	r0, [r3, #0]
 80018c4:	6859      	ldr	r1, [r3, #4]
 80018c6:	3308      	adds	r3, #8
 80018c8:	c203      	stmia	r2!, {r0, r1}
 80018ca:	42ab      	cmp	r3, r5
 80018cc:	4614      	mov	r4, r2
 80018ce:	d1f7      	bne.n	80018c0 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80018d0:	2301      	movs	r3, #1
 80018d2:	f88d 3004 	strb.w	r3, [sp, #4]
 80018d6:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 80018d8:	4911      	ldr	r1, [pc, #68]	; (8001920 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80018da:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 80018de:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80018e0:	f003 020c 	and.w	r2, r3, #12
 80018e4:	2a08      	cmp	r2, #8
 80018e6:	d117      	bne.n	8001918 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80018e8:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80018ec:	a806      	add	r0, sp, #24
 80018ee:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80018f0:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80018f2:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80018f6:	d50c      	bpl.n	8001912 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80018f8:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80018fa:	480a      	ldr	r0, [pc, #40]	; (8001924 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80018fc:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001900:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001902:	aa06      	add	r2, sp, #24
 8001904:	4413      	add	r3, r2
 8001906:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800190a:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800190e:	b007      	add	sp, #28
 8001910:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001912:	4805      	ldr	r0, [pc, #20]	; (8001928 <HAL_RCC_GetSysClockFreq+0x74>)
 8001914:	4350      	muls	r0, r2
 8001916:	e7fa      	b.n	800190e <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8001918:	4802      	ldr	r0, [pc, #8]	; (8001924 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 800191a:	e7f8      	b.n	800190e <HAL_RCC_GetSysClockFreq+0x5a>
 800191c:	08004590 	.word	0x08004590
 8001920:	40021000 	.word	0x40021000
 8001924:	007a1200 	.word	0x007a1200
 8001928:	003d0900 	.word	0x003d0900

0800192c <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800192c:	4a54      	ldr	r2, [pc, #336]	; (8001a80 <HAL_RCC_ClockConfig+0x154>)
{
 800192e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001932:	6813      	ldr	r3, [r2, #0]
{
 8001934:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001936:	f003 0307 	and.w	r3, r3, #7
 800193a:	428b      	cmp	r3, r1
{
 800193c:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800193e:	d32a      	bcc.n	8001996 <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001940:	6829      	ldr	r1, [r5, #0]
 8001942:	078c      	lsls	r4, r1, #30
 8001944:	d434      	bmi.n	80019b0 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001946:	07ca      	lsls	r2, r1, #31
 8001948:	d447      	bmi.n	80019da <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800194a:	4a4d      	ldr	r2, [pc, #308]	; (8001a80 <HAL_RCC_ClockConfig+0x154>)
 800194c:	6813      	ldr	r3, [r2, #0]
 800194e:	f003 0307 	and.w	r3, r3, #7
 8001952:	429e      	cmp	r6, r3
 8001954:	f0c0 8082 	bcc.w	8001a5c <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001958:	682a      	ldr	r2, [r5, #0]
 800195a:	4c4a      	ldr	r4, [pc, #296]	; (8001a84 <HAL_RCC_ClockConfig+0x158>)
 800195c:	f012 0f04 	tst.w	r2, #4
 8001960:	f040 8087 	bne.w	8001a72 <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001964:	0713      	lsls	r3, r2, #28
 8001966:	d506      	bpl.n	8001976 <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001968:	6863      	ldr	r3, [r4, #4]
 800196a:	692a      	ldr	r2, [r5, #16]
 800196c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001970:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001974:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001976:	f7ff ff9d 	bl	80018b4 <HAL_RCC_GetSysClockFreq>
 800197a:	6863      	ldr	r3, [r4, #4]
 800197c:	4a42      	ldr	r2, [pc, #264]	; (8001a88 <HAL_RCC_ClockConfig+0x15c>)
 800197e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001982:	5cd3      	ldrb	r3, [r2, r3]
 8001984:	40d8      	lsrs	r0, r3
 8001986:	4b41      	ldr	r3, [pc, #260]	; (8001a8c <HAL_RCC_ClockConfig+0x160>)
 8001988:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800198a:	2000      	movs	r0, #0
 800198c:	f7ff f878 	bl	8000a80 <HAL_InitTick>
  return HAL_OK;
 8001990:	2000      	movs	r0, #0
}
 8001992:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001996:	6813      	ldr	r3, [r2, #0]
 8001998:	f023 0307 	bic.w	r3, r3, #7
 800199c:	430b      	orrs	r3, r1
 800199e:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80019a0:	6813      	ldr	r3, [r2, #0]
 80019a2:	f003 0307 	and.w	r3, r3, #7
 80019a6:	4299      	cmp	r1, r3
 80019a8:	d0ca      	beq.n	8001940 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 80019aa:	2001      	movs	r0, #1
 80019ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80019b0:	4b34      	ldr	r3, [pc, #208]	; (8001a84 <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019b2:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019b6:	bf1e      	ittt	ne
 80019b8:	685a      	ldrne	r2, [r3, #4]
 80019ba:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 80019be:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019c0:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019c2:	bf42      	ittt	mi
 80019c4:	685a      	ldrmi	r2, [r3, #4]
 80019c6:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 80019ca:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019cc:	685a      	ldr	r2, [r3, #4]
 80019ce:	68a8      	ldr	r0, [r5, #8]
 80019d0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80019d4:	4302      	orrs	r2, r0
 80019d6:	605a      	str	r2, [r3, #4]
 80019d8:	e7b5      	b.n	8001946 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019da:	686a      	ldr	r2, [r5, #4]
 80019dc:	4c29      	ldr	r4, [pc, #164]	; (8001a84 <HAL_RCC_ClockConfig+0x158>)
 80019de:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019e0:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019e2:	d11c      	bne.n	8001a1e <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019e4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019e8:	d0df      	beq.n	80019aa <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019ea:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019ec:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019f0:	f023 0303 	bic.w	r3, r3, #3
 80019f4:	4313      	orrs	r3, r2
 80019f6:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80019f8:	f7ff f884 	bl	8000b04 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019fc:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 80019fe:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d114      	bne.n	8001a2e <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a04:	6863      	ldr	r3, [r4, #4]
 8001a06:	f003 030c 	and.w	r3, r3, #12
 8001a0a:	2b04      	cmp	r3, #4
 8001a0c:	d09d      	beq.n	800194a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a0e:	f7ff f879 	bl	8000b04 <HAL_GetTick>
 8001a12:	1bc0      	subs	r0, r0, r7
 8001a14:	4540      	cmp	r0, r8
 8001a16:	d9f5      	bls.n	8001a04 <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 8001a18:	2003      	movs	r0, #3
 8001a1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a1e:	2a02      	cmp	r2, #2
 8001a20:	d102      	bne.n	8001a28 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a22:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001a26:	e7df      	b.n	80019e8 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a28:	f013 0f02 	tst.w	r3, #2
 8001a2c:	e7dc      	b.n	80019e8 <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d10f      	bne.n	8001a52 <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a32:	6863      	ldr	r3, [r4, #4]
 8001a34:	f003 030c 	and.w	r3, r3, #12
 8001a38:	2b08      	cmp	r3, #8
 8001a3a:	d086      	beq.n	800194a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a3c:	f7ff f862 	bl	8000b04 <HAL_GetTick>
 8001a40:	1bc0      	subs	r0, r0, r7
 8001a42:	4540      	cmp	r0, r8
 8001a44:	d9f5      	bls.n	8001a32 <HAL_RCC_ClockConfig+0x106>
 8001a46:	e7e7      	b.n	8001a18 <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a48:	f7ff f85c 	bl	8000b04 <HAL_GetTick>
 8001a4c:	1bc0      	subs	r0, r0, r7
 8001a4e:	4540      	cmp	r0, r8
 8001a50:	d8e2      	bhi.n	8001a18 <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a52:	6863      	ldr	r3, [r4, #4]
 8001a54:	f013 0f0c 	tst.w	r3, #12
 8001a58:	d1f6      	bne.n	8001a48 <HAL_RCC_ClockConfig+0x11c>
 8001a5a:	e776      	b.n	800194a <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a5c:	6813      	ldr	r3, [r2, #0]
 8001a5e:	f023 0307 	bic.w	r3, r3, #7
 8001a62:	4333      	orrs	r3, r6
 8001a64:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a66:	6813      	ldr	r3, [r2, #0]
 8001a68:	f003 0307 	and.w	r3, r3, #7
 8001a6c:	429e      	cmp	r6, r3
 8001a6e:	d19c      	bne.n	80019aa <HAL_RCC_ClockConfig+0x7e>
 8001a70:	e772      	b.n	8001958 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a72:	6863      	ldr	r3, [r4, #4]
 8001a74:	68e9      	ldr	r1, [r5, #12]
 8001a76:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001a7a:	430b      	orrs	r3, r1
 8001a7c:	6063      	str	r3, [r4, #4]
 8001a7e:	e771      	b.n	8001964 <HAL_RCC_ClockConfig+0x38>
 8001a80:	40022000 	.word	0x40022000
 8001a84:	40021000 	.word	0x40021000
 8001a88:	080045d3 	.word	0x080045d3
 8001a8c:	20000008 	.word	0x20000008

08001a90 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a90:	4b04      	ldr	r3, [pc, #16]	; (8001aa4 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001a92:	4a05      	ldr	r2, [pc, #20]	; (8001aa8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001a9a:	5cd3      	ldrb	r3, [r2, r3]
 8001a9c:	4a03      	ldr	r2, [pc, #12]	; (8001aac <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001a9e:	6810      	ldr	r0, [r2, #0]
}    
 8001aa0:	40d8      	lsrs	r0, r3
 8001aa2:	4770      	bx	lr
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	080045e3 	.word	0x080045e3
 8001aac:	20000008 	.word	0x20000008

08001ab0 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ab0:	4b04      	ldr	r3, [pc, #16]	; (8001ac4 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001ab2:	4a05      	ldr	r2, [pc, #20]	; (8001ac8 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001aba:	5cd3      	ldrb	r3, [r2, r3]
 8001abc:	4a03      	ldr	r2, [pc, #12]	; (8001acc <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001abe:	6810      	ldr	r0, [r2, #0]
} 
 8001ac0:	40d8      	lsrs	r0, r3
 8001ac2:	4770      	bx	lr
 8001ac4:	40021000 	.word	0x40021000
 8001ac8:	080045e3 	.word	0x080045e3
 8001acc:	20000008 	.word	0x20000008

08001ad0 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001ad0:	6803      	ldr	r3, [r0, #0]
{
 8001ad2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001ad6:	07d9      	lsls	r1, r3, #31
{
 8001ad8:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001ada:	d520      	bpl.n	8001b1e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001adc:	4c35      	ldr	r4, [pc, #212]	; (8001bb4 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001ade:	69e3      	ldr	r3, [r4, #28]
 8001ae0:	00da      	lsls	r2, r3, #3
 8001ae2:	d432      	bmi.n	8001b4a <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8001ae4:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ae6:	69e3      	ldr	r3, [r4, #28]
 8001ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aec:	61e3      	str	r3, [r4, #28]
 8001aee:	69e3      	ldr	r3, [r4, #28]
 8001af0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af4:	9301      	str	r3, [sp, #4]
 8001af6:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001af8:	4e2f      	ldr	r6, [pc, #188]	; (8001bb8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8001afa:	6833      	ldr	r3, [r6, #0]
 8001afc:	05db      	lsls	r3, r3, #23
 8001afe:	d526      	bpl.n	8001b4e <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001b00:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001b02:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001b06:	d136      	bne.n	8001b76 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001b08:	6a23      	ldr	r3, [r4, #32]
 8001b0a:	686a      	ldr	r2, [r5, #4]
 8001b0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b10:	4313      	orrs	r3, r2
 8001b12:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b14:	b11f      	cbz	r7, 8001b1e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b16:	69e3      	ldr	r3, [r4, #28]
 8001b18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b1c:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001b1e:	6828      	ldr	r0, [r5, #0]
 8001b20:	0783      	lsls	r3, r0, #30
 8001b22:	d506      	bpl.n	8001b32 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001b24:	4a23      	ldr	r2, [pc, #140]	; (8001bb4 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001b26:	68a9      	ldr	r1, [r5, #8]
 8001b28:	6853      	ldr	r3, [r2, #4]
 8001b2a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001b2e:	430b      	orrs	r3, r1
 8001b30:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001b32:	f010 0010 	ands.w	r0, r0, #16
 8001b36:	d01b      	beq.n	8001b70 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001b38:	4a1e      	ldr	r2, [pc, #120]	; (8001bb4 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001b3a:	68e9      	ldr	r1, [r5, #12]
 8001b3c:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001b3e:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001b40:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001b44:	430b      	orrs	r3, r1
 8001b46:	6053      	str	r3, [r2, #4]
 8001b48:	e012      	b.n	8001b70 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8001b4a:	2700      	movs	r7, #0
 8001b4c:	e7d4      	b.n	8001af8 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b4e:	6833      	ldr	r3, [r6, #0]
 8001b50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b54:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001b56:	f7fe ffd5 	bl	8000b04 <HAL_GetTick>
 8001b5a:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b5c:	6833      	ldr	r3, [r6, #0]
 8001b5e:	05d8      	lsls	r0, r3, #23
 8001b60:	d4ce      	bmi.n	8001b00 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b62:	f7fe ffcf 	bl	8000b04 <HAL_GetTick>
 8001b66:	eba0 0008 	sub.w	r0, r0, r8
 8001b6a:	2864      	cmp	r0, #100	; 0x64
 8001b6c:	d9f6      	bls.n	8001b5c <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8001b6e:	2003      	movs	r0, #3
}
 8001b70:	b002      	add	sp, #8
 8001b72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001b76:	686a      	ldr	r2, [r5, #4]
 8001b78:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d0c3      	beq.n	8001b08 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b80:	2001      	movs	r0, #1
 8001b82:	4a0e      	ldr	r2, [pc, #56]	; (8001bbc <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001b84:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b86:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001b88:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001b8a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001b8e:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8001b90:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001b92:	07d9      	lsls	r1, r3, #31
 8001b94:	d5b8      	bpl.n	8001b08 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8001b96:	f7fe ffb5 	bl	8000b04 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b9a:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001b9e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ba0:	6a23      	ldr	r3, [r4, #32]
 8001ba2:	079a      	lsls	r2, r3, #30
 8001ba4:	d4b0      	bmi.n	8001b08 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ba6:	f7fe ffad 	bl	8000b04 <HAL_GetTick>
 8001baa:	1b80      	subs	r0, r0, r6
 8001bac:	4540      	cmp	r0, r8
 8001bae:	d9f7      	bls.n	8001ba0 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8001bb0:	e7dd      	b.n	8001b6e <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8001bb2:	bf00      	nop
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	40007000 	.word	0x40007000
 8001bbc:	42420440 	.word	0x42420440

08001bc0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001bc0:	b570      	push	{r4, r5, r6, lr}
 8001bc2:	4604      	mov	r4, r0
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001bc4:	4b35      	ldr	r3, [pc, #212]	; (8001c9c <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
{
 8001bc6:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001bc8:	ad02      	add	r5, sp, #8
 8001bca:	f103 0610 	add.w	r6, r3, #16
 8001bce:	462a      	mov	r2, r5
 8001bd0:	6818      	ldr	r0, [r3, #0]
 8001bd2:	6859      	ldr	r1, [r3, #4]
 8001bd4:	3308      	adds	r3, #8
 8001bd6:	c203      	stmia	r2!, {r0, r1}
 8001bd8:	42b3      	cmp	r3, r6
 8001bda:	4615      	mov	r5, r2
 8001bdc:	d1f7      	bne.n	8001bce <HAL_RCCEx_GetPeriphCLKFreq+0xe>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001bde:	2301      	movs	r3, #1
 8001be0:	f88d 3004 	strb.w	r3, [sp, #4]
 8001be4:	2302      	movs	r3, #2
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 8001be6:	429c      	cmp	r4, r3
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001be8:	f88d 3005 	strb.w	r3, [sp, #5]
  switch (PeriphClk)
 8001bec:	d047      	beq.n	8001c7e <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
 8001bee:	2c10      	cmp	r4, #16
 8001bf0:	d017      	beq.n	8001c22 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 8001bf2:	2c01      	cmp	r4, #1
 8001bf4:	d14f      	bne.n	8001c96 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001bf6:	f240 3102 	movw	r1, #770	; 0x302
      temp_reg = RCC->BDCR;
 8001bfa:	4a29      	ldr	r2, [pc, #164]	; (8001ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8001bfc:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001bfe:	4019      	ands	r1, r3
 8001c00:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
 8001c04:	d044      	beq.n	8001c90 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
      {
        frequency = LSE_VALUE;
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001c06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c0e:	d12d      	bne.n	8001c6c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
      {
        frequency = LSI_VALUE;
 8001c10:	f649 4040 	movw	r0, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001c14:	6a53      	ldr	r3, [r2, #36]	; 0x24
        frequency = LSI_VALUE;
 8001c16:	f013 0f02 	tst.w	r3, #2
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
      {
        frequency = HSE_VALUE / 128U;
 8001c1a:	bf08      	it	eq
 8001c1c:	2000      	moveq	r0, #0
    {
      break;
    }
  }
  return(frequency);
}
 8001c1e:	b006      	add	sp, #24
 8001c20:	bd70      	pop	{r4, r5, r6, pc}
      temp_reg = RCC->CFGR;
 8001c22:	4b1f      	ldr	r3, [pc, #124]	; (8001ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8001c24:	6859      	ldr	r1, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLLON))
 8001c26:	6818      	ldr	r0, [r3, #0]
 8001c28:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8001c2c:	d0f7      	beq.n	8001c1e <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c2e:	f3c1 4283 	ubfx	r2, r1, #18, #4
 8001c32:	a806      	add	r0, sp, #24
 8001c34:	4402      	add	r2, r0
 8001c36:	f812 0c10 	ldrb.w	r0, [r2, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c3a:	03ca      	lsls	r2, r1, #15
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c3c:	bf41      	itttt	mi
 8001c3e:	685a      	ldrmi	r2, [r3, #4]
 8001c40:	a906      	addmi	r1, sp, #24
 8001c42:	f3c2 4240 	ubfxmi	r2, r2, #17, #1
 8001c46:	1852      	addmi	r2, r2, r1
 8001c48:	bf44      	itt	mi
 8001c4a:	f812 1c14 	ldrbmi.w	r1, [r2, #-20]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001c4e:	4a15      	ldrmi	r2, [pc, #84]	; (8001ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001c50:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001c52:	bf4c      	ite	mi
 8001c54:	fbb2 f2f1 	udivmi	r2, r2, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c58:	4a13      	ldrpl	r2, [pc, #76]	; (8001ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001c5a:	025b      	lsls	r3, r3, #9
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c5c:	fb02 f000 	mul.w	r0, r2, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001c60:	d4dd      	bmi.n	8001c1e <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          frequency = (pllclk * 2) / 3;
 8001c62:	2303      	movs	r3, #3
 8001c64:	0040      	lsls	r0, r0, #1
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8001c66:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8001c6a:	e7d8      	b.n	8001c1e <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8001c6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001c70:	d111      	bne.n	8001c96 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8001c72:	6813      	ldr	r3, [r2, #0]
        frequency = HSE_VALUE / 128U;
 8001c74:	f24f 4024 	movw	r0, #62500	; 0xf424
 8001c78:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001c7c:	e7cd      	b.n	8001c1a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8001c7e:	f7ff ff17 	bl	8001ab0 <HAL_RCC_GetPCLK2Freq>
 8001c82:	4b07      	ldr	r3, [pc, #28]	; (8001ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	e7ea      	b.n	8001c66 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
        frequency = LSE_VALUE;
 8001c90:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001c94:	e7c3      	b.n	8001c1e <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
        frequency = 0U;
 8001c96:	2000      	movs	r0, #0
 8001c98:	e7c1      	b.n	8001c1e <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 8001c9a:	bf00      	nop
 8001c9c:	080045a0 	.word	0x080045a0
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	007a1200 	.word	0x007a1200
 8001ca8:	003d0900 	.word	0x003d0900

08001cac <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001cb0:	6805      	ldr	r5, [r0, #0]
 8001cb2:	68c2      	ldr	r2, [r0, #12]
 8001cb4:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001cb6:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001cb8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001cc0:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 8001cc2:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001cc4:	430b      	orrs	r3, r1
 8001cc6:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8001cc8:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8001ccc:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001cd0:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001cd6:	696b      	ldr	r3, [r5, #20]
 8001cd8:	6982      	ldr	r2, [r0, #24]
 8001cda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8001ce2:	4b40      	ldr	r3, [pc, #256]	; (8001de4 <UART_SetConfig+0x138>)
{
 8001ce4:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 8001ce6:	429d      	cmp	r5, r3
 8001ce8:	f04f 0419 	mov.w	r4, #25
 8001cec:	d146      	bne.n	8001d7c <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001cee:	f7ff fedf 	bl	8001ab0 <HAL_RCC_GetPCLK2Freq>
 8001cf2:	fb04 f300 	mul.w	r3, r4, r0
 8001cf6:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8001cfa:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001cfe:	00b6      	lsls	r6, r6, #2
 8001d00:	fbb3 f3f6 	udiv	r3, r3, r6
 8001d04:	fbb3 f3f8 	udiv	r3, r3, r8
 8001d08:	011e      	lsls	r6, r3, #4
 8001d0a:	f7ff fed1 	bl	8001ab0 <HAL_RCC_GetPCLK2Freq>
 8001d0e:	4360      	muls	r0, r4
 8001d10:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	fbb0 f7f3 	udiv	r7, r0, r3
 8001d1a:	f7ff fec9 	bl	8001ab0 <HAL_RCC_GetPCLK2Freq>
 8001d1e:	4360      	muls	r0, r4
 8001d20:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d2a:	fbb3 f3f8 	udiv	r3, r3, r8
 8001d2e:	fb08 7313 	mls	r3, r8, r3, r7
 8001d32:	011b      	lsls	r3, r3, #4
 8001d34:	3332      	adds	r3, #50	; 0x32
 8001d36:	fbb3 f3f8 	udiv	r3, r3, r8
 8001d3a:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8001d3e:	f7ff feb7 	bl	8001ab0 <HAL_RCC_GetPCLK2Freq>
 8001d42:	4360      	muls	r0, r4
 8001d44:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8001d48:	0092      	lsls	r2, r2, #2
 8001d4a:	fbb0 faf2 	udiv	sl, r0, r2
 8001d4e:	f7ff feaf 	bl	8001ab0 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001d52:	4360      	muls	r0, r4
 8001d54:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d5e:	fbb3 f3f8 	udiv	r3, r3, r8
 8001d62:	fb08 a313 	mls	r3, r8, r3, sl
 8001d66:	011b      	lsls	r3, r3, #4
 8001d68:	3332      	adds	r3, #50	; 0x32
 8001d6a:	fbb3 f3f8 	udiv	r3, r3, r8
 8001d6e:	f003 030f 	and.w	r3, r3, #15
 8001d72:	433b      	orrs	r3, r7
 8001d74:	4433      	add	r3, r6
 8001d76:	60ab      	str	r3, [r5, #8]
 8001d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d7c:	f7ff fe88 	bl	8001a90 <HAL_RCC_GetPCLK1Freq>
 8001d80:	fb04 f300 	mul.w	r3, r4, r0
 8001d84:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8001d88:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001d8c:	00b6      	lsls	r6, r6, #2
 8001d8e:	fbb3 f3f6 	udiv	r3, r3, r6
 8001d92:	fbb3 f3f8 	udiv	r3, r3, r8
 8001d96:	011e      	lsls	r6, r3, #4
 8001d98:	f7ff fe7a 	bl	8001a90 <HAL_RCC_GetPCLK1Freq>
 8001d9c:	4360      	muls	r0, r4
 8001d9e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	fbb0 f7f3 	udiv	r7, r0, r3
 8001da8:	f7ff fe72 	bl	8001a90 <HAL_RCC_GetPCLK1Freq>
 8001dac:	4360      	muls	r0, r4
 8001dae:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001db8:	fbb3 f3f8 	udiv	r3, r3, r8
 8001dbc:	fb08 7313 	mls	r3, r8, r3, r7
 8001dc0:	011b      	lsls	r3, r3, #4
 8001dc2:	3332      	adds	r3, #50	; 0x32
 8001dc4:	fbb3 f3f8 	udiv	r3, r3, r8
 8001dc8:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8001dcc:	f7ff fe60 	bl	8001a90 <HAL_RCC_GetPCLK1Freq>
 8001dd0:	4360      	muls	r0, r4
 8001dd2:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8001dd6:	0092      	lsls	r2, r2, #2
 8001dd8:	fbb0 faf2 	udiv	sl, r0, r2
 8001ddc:	f7ff fe58 	bl	8001a90 <HAL_RCC_GetPCLK1Freq>
 8001de0:	e7b7      	b.n	8001d52 <UART_SetConfig+0xa6>
 8001de2:	bf00      	nop
 8001de4:	40013800 	.word	0x40013800

08001de8 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8001de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dea:	4604      	mov	r4, r0
 8001dec:	460e      	mov	r6, r1
 8001dee:	4617      	mov	r7, r2
 8001df0:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8001df2:	6821      	ldr	r1, [r4, #0]
 8001df4:	680b      	ldr	r3, [r1, #0]
 8001df6:	ea36 0303 	bics.w	r3, r6, r3
 8001dfa:	d101      	bne.n	8001e00 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8001dfc:	2000      	movs	r0, #0
}
 8001dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001e00:	1c6b      	adds	r3, r5, #1
 8001e02:	d0f7      	beq.n	8001df4 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001e04:	b995      	cbnz	r5, 8001e2c <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001e06:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8001e08:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001e0a:	68da      	ldr	r2, [r3, #12]
 8001e0c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001e10:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e12:	695a      	ldr	r2, [r3, #20]
 8001e14:	f022 0201 	bic.w	r2, r2, #1
 8001e18:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001e1a:	2320      	movs	r3, #32
 8001e1c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001e20:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8001e24:	2300      	movs	r3, #0
 8001e26:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8001e2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001e2c:	f7fe fe6a 	bl	8000b04 <HAL_GetTick>
 8001e30:	1bc0      	subs	r0, r0, r7
 8001e32:	4285      	cmp	r5, r0
 8001e34:	d2dd      	bcs.n	8001df2 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8001e36:	e7e6      	b.n	8001e06 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08001e38 <HAL_UART_Init>:
{
 8001e38:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001e3a:	4604      	mov	r4, r0
 8001e3c:	b340      	cbz	r0, 8001e90 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001e3e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001e42:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001e46:	b91b      	cbnz	r3, 8001e50 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001e48:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001e4c:	f000 fa34 	bl	80022b8 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001e50:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001e52:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001e54:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001e58:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8001e5a:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8001e5c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001e60:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001e62:	f7ff ff23 	bl	8001cac <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e66:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e68:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e6a:	691a      	ldr	r2, [r3, #16]
 8001e6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e72:	695a      	ldr	r2, [r3, #20]
 8001e74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e78:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001e7a:	68da      	ldr	r2, [r3, #12]
 8001e7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e80:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 8001e82:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e84:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001e86:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001e8a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001e8e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001e90:	2001      	movs	r0, #1
}
 8001e92:	bd10      	pop	{r4, pc}

08001e94 <HAL_UART_Transmit>:
{
 8001e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e98:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8001e9a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8001e9e:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_READY)
 8001ea0:	2b20      	cmp	r3, #32
{
 8001ea2:	460d      	mov	r5, r1
 8001ea4:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8001ea6:	d14e      	bne.n	8001f46 <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0U))
 8001ea8:	2900      	cmp	r1, #0
 8001eaa:	d049      	beq.n	8001f40 <HAL_UART_Transmit+0xac>
 8001eac:	2a00      	cmp	r2, #0
 8001eae:	d047      	beq.n	8001f40 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8001eb0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d046      	beq.n	8001f46 <HAL_UART_Transmit+0xb2>
 8001eb8:	2301      	movs	r3, #1
 8001eba:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ec2:	2321      	movs	r3, #33	; 0x21
 8001ec4:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001ec8:	f7fe fe1c 	bl	8000b04 <HAL_GetTick>
 8001ecc:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 8001ece:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8001ed2:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8001ed6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	b96b      	cbnz	r3, 8001ef8 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001edc:	463b      	mov	r3, r7
 8001ede:	4632      	mov	r2, r6
 8001ee0:	2140      	movs	r1, #64	; 0x40
 8001ee2:	4620      	mov	r0, r4
 8001ee4:	f7ff ff80 	bl	8001de8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001ee8:	b9a8      	cbnz	r0, 8001f16 <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8001eea:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8001eec:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8001ef0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8001ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8001ef8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001efa:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8001efc:	3b01      	subs	r3, #1
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001f02:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f04:	2180      	movs	r1, #128	; 0x80
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001f06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f0a:	4620      	mov	r0, r4
 8001f0c:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001f0e:	d10e      	bne.n	8001f2e <HAL_UART_Transmit+0x9a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f10:	f7ff ff6a 	bl	8001de8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001f14:	b110      	cbz	r0, 8001f1c <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 8001f16:	2003      	movs	r0, #3
 8001f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001f1c:	882b      	ldrh	r3, [r5, #0]
 8001f1e:	6822      	ldr	r2, [r4, #0]
 8001f20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f24:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001f26:	6923      	ldr	r3, [r4, #16]
 8001f28:	b943      	cbnz	r3, 8001f3c <HAL_UART_Transmit+0xa8>
          pData +=2U;
 8001f2a:	3502      	adds	r5, #2
 8001f2c:	e7d3      	b.n	8001ed6 <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f2e:	f7ff ff5b 	bl	8001de8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001f32:	2800      	cmp	r0, #0
 8001f34:	d1ef      	bne.n	8001f16 <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001f36:	6823      	ldr	r3, [r4, #0]
 8001f38:	782a      	ldrb	r2, [r5, #0]
 8001f3a:	605a      	str	r2, [r3, #4]
 8001f3c:	3501      	adds	r5, #1
 8001f3e:	e7ca      	b.n	8001ed6 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8001f40:	2001      	movs	r0, #1
 8001f42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8001f46:	2002      	movs	r0, #2
}
 8001f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001f4c <HAL_ADC_ConvCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(hadc->Instance == ADC1)
 8001f4e:	6802      	ldr	r2, [r0, #0]
 8001f50:	4b1f      	ldr	r3, [pc, #124]	; (8001fd0 <HAL_ADC_ConvCpltCallback+0x84>)
{
 8001f52:	b089      	sub	sp, #36	; 0x24
    if(hadc->Instance == ADC1)
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d139      	bne.n	8001fcc <HAL_ADC_ConvCpltCallback+0x80>
    {
		snprintf(trans_str, 63, "ADC %d %d %d %d %d %d %d %d\n", (uint16_t)adc[0], (uint16_t)adc[1], (uint16_t)adc[2], (uint16_t)adc[3], (uint16_t)adc[4], (uint16_t)adc[5], (uint16_t)adc[6], (uint16_t)adc[7]);
 8001f58:	4c1e      	ldr	r4, [pc, #120]	; (8001fd4 <HAL_ADC_ConvCpltCallback+0x88>)
 8001f5a:	f8b4 e000 	ldrh.w	lr, [r4]
 8001f5e:	8862      	ldrh	r2, [r4, #2]
 8001f60:	88a1      	ldrh	r1, [r4, #4]
 8001f62:	88e0      	ldrh	r0, [r4, #6]
 8001f64:	8925      	ldrh	r5, [r4, #8]
 8001f66:	8966      	ldrh	r6, [r4, #10]
 8001f68:	89a7      	ldrh	r7, [r4, #12]
 8001f6a:	89e3      	ldrh	r3, [r4, #14]
 8001f6c:	b292      	uxth	r2, r2
 8001f6e:	b289      	uxth	r1, r1
 8001f70:	b280      	uxth	r0, r0
 8001f72:	b2ad      	uxth	r5, r5
 8001f74:	b2b6      	uxth	r6, r6
 8001f76:	b2bf      	uxth	r7, r7
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	9306      	str	r3, [sp, #24]
 8001f7c:	9002      	str	r0, [sp, #8]
 8001f7e:	fa1f f38e 	uxth.w	r3, lr
 8001f82:	9101      	str	r1, [sp, #4]
 8001f84:	9200      	str	r2, [sp, #0]
 8001f86:	213f      	movs	r1, #63	; 0x3f
 8001f88:	4a13      	ldr	r2, [pc, #76]	; (8001fd8 <HAL_ADC_ConvCpltCallback+0x8c>)
 8001f8a:	9705      	str	r7, [sp, #20]
 8001f8c:	9604      	str	r6, [sp, #16]
 8001f8e:	9503      	str	r5, [sp, #12]
 8001f90:	4812      	ldr	r0, [pc, #72]	; (8001fdc <HAL_ADC_ConvCpltCallback+0x90>)
 8001f92:	f000 fed7 	bl	8002d44 <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)trans_str, strlen(trans_str), 1000);
 8001f96:	4811      	ldr	r0, [pc, #68]	; (8001fdc <HAL_ADC_ConvCpltCallback+0x90>)
 8001f98:	f7fe f8da 	bl	8000150 <strlen>
 8001f9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fa0:	b282      	uxth	r2, r0
 8001fa2:	490e      	ldr	r1, [pc, #56]	; (8001fdc <HAL_ADC_ConvCpltCallback+0x90>)
 8001fa4:	480e      	ldr	r0, [pc, #56]	; (8001fe0 <HAL_ADC_ConvCpltCallback+0x94>)
 8001fa6:	f7ff ff75 	bl	8001e94 <HAL_UART_Transmit>
		adc[0] = 0;
 8001faa:	2300      	movs	r3, #0
		adc[3] = 0;
		adc[4] = 0;
		adc[5] = 0;
		adc[6] = 0;
		adc[7] = 0;
		HAL_ADCEx_MultiModeStart_DMA(&hadc1, (uint32_t*)adc, 4); // DMA забирает данные 32-х битными словами, в первой половине значение первого канала, а во второй второго, поэтому указываем половину объявленного буфера
 8001fac:	2204      	movs	r2, #4
 8001fae:	4621      	mov	r1, r4
 8001fb0:	480c      	ldr	r0, [pc, #48]	; (8001fe4 <HAL_ADC_ConvCpltCallback+0x98>)
		adc[0] = 0;
 8001fb2:	8023      	strh	r3, [r4, #0]
		adc[1] = 0;
 8001fb4:	8063      	strh	r3, [r4, #2]
		adc[2] = 0;
 8001fb6:	80a3      	strh	r3, [r4, #4]
		adc[3] = 0;
 8001fb8:	80e3      	strh	r3, [r4, #6]
		adc[4] = 0;
 8001fba:	8123      	strh	r3, [r4, #8]
		adc[5] = 0;
 8001fbc:	8163      	strh	r3, [r4, #10]
		adc[6] = 0;
 8001fbe:	81a3      	strh	r3, [r4, #12]
		adc[7] = 0;
 8001fc0:	81e3      	strh	r3, [r4, #14]
    }
}
 8001fc2:	b009      	add	sp, #36	; 0x24
 8001fc4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		HAL_ADCEx_MultiModeStart_DMA(&hadc1, (uint32_t*)adc, 4); // DMA забирает данные 32-х битными словами, в первой половине значение первого канала, а во второй второго, поэтому указываем половину объявленного буфера
 8001fc8:	f7ff b804 	b.w	8000fd4 <HAL_ADCEx_MultiModeStart_DMA>
}
 8001fcc:	b009      	add	sp, #36	; 0x24
 8001fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fd0:	40012400 	.word	0x40012400
 8001fd4:	200001f8 	.word	0x200001f8
 8001fd8:	080045b0 	.word	0x080045b0
 8001fdc:	20000208 	.word	0x20000208
 8001fe0:	200002b8 	.word	0x200002b8
 8001fe4:	20000288 	.word	0x20000288

08001fe8 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
	HAL_UART_Transmit(&huart1, (uint8_t*)"HALF\n", 5, 1000); // половинка буфера
 8001fe8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fec:	2205      	movs	r2, #5
 8001fee:	4902      	ldr	r1, [pc, #8]	; (8001ff8 <HAL_ADC_ConvHalfCpltCallback+0x10>)
 8001ff0:	4802      	ldr	r0, [pc, #8]	; (8001ffc <HAL_ADC_ConvHalfCpltCallback+0x14>)
 8001ff2:	f7ff bf4f 	b.w	8001e94 <HAL_UART_Transmit>
 8001ff6:	bf00      	nop
 8001ff8:	080045cd 	.word	0x080045cd
 8001ffc:	200002b8 	.word	0x200002b8

08002000 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002000:	2228      	movs	r2, #40	; 0x28
{
 8002002:	b510      	push	{r4, lr}
 8002004:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002006:	eb0d 0002 	add.w	r0, sp, r2
 800200a:	2100      	movs	r1, #0
 800200c:	f000 fa30 	bl	8002470 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002010:	2214      	movs	r2, #20
 8002012:	2100      	movs	r1, #0
 8002014:	eb0d 0002 	add.w	r0, sp, r2
 8002018:	f000 fa2a 	bl	8002470 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800201c:	2100      	movs	r1, #0
 800201e:	2210      	movs	r2, #16
 8002020:	a801      	add	r0, sp, #4
 8002022:	f000 fa25 	bl	8002470 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002026:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800202a:	2402      	movs	r4, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800202c:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800202e:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002030:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002032:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002036:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002038:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800203a:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800203c:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800203e:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002040:	f7ff faac 	bl	800159c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002044:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002046:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800204a:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800204c:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800204e:	4621      	mov	r1, r4
 8002050:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002052:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002054:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002056:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002058:	9406      	str	r4, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800205a:	f7ff fc67 	bl	800192c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800205e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002062:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002064:	9401      	str	r4, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002066:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002068:	f7ff fd32 	bl	8001ad0 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 800206c:	b014      	add	sp, #80	; 0x50
 800206e:	bd10      	pop	{r4, pc}

08002070 <main>:
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b088      	sub	sp, #32
  HAL_Init();
 8002074:	f7fe fd28 	bl	8000ac8 <HAL_Init>
  SystemClock_Config();
 8002078:	f7ff ffc2 	bl	8002000 <SystemClock_Config>
  */
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800207c:	4b3d      	ldr	r3, [pc, #244]	; (8002174 <main+0x104>)
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800207e:	200b      	movs	r0, #11
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002080:	699a      	ldr	r2, [r3, #24]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002082:	2400      	movs	r4, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002084:	f042 0220 	orr.w	r2, r2, #32
 8002088:	619a      	str	r2, [r3, #24]
 800208a:	699a      	ldr	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800208c:	2701      	movs	r7, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800208e:	f002 0220 	and.w	r2, r2, #32
 8002092:	9203      	str	r2, [sp, #12]
 8002094:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002096:	699a      	ldr	r2, [r3, #24]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002098:	f44f 2860 	mov.w	r8, #917504	; 0xe0000
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800209c:	f042 0204 	orr.w	r2, r2, #4
 80020a0:	619a      	str	r2, [r3, #24]
 80020a2:	699a      	ldr	r2, [r3, #24]
  hadc1.Instance = ADC1;
 80020a4:	4d34      	ldr	r5, [pc, #208]	; (8002178 <main+0x108>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020a6:	f002 0204 	and.w	r2, r2, #4
 80020aa:	9204      	str	r2, [sp, #16]
 80020ac:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80020ae:	695a      	ldr	r2, [r3, #20]
  hadc2.Instance = ADC2;
 80020b0:	4e32      	ldr	r6, [pc, #200]	; (800217c <main+0x10c>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 80020b2:	f042 0201 	orr.w	r2, r2, #1
 80020b6:	615a      	str	r2, [r3, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80020b8:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 80020ba:	695b      	ldr	r3, [r3, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80020bc:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	9302      	str	r3, [sp, #8]
 80020c4:	9b02      	ldr	r3, [sp, #8]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80020c6:	f7ff f831 	bl	800112c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80020ca:	200b      	movs	r0, #11
 80020cc:	f7ff f862 	bl	8001194 <HAL_NVIC_EnableIRQ>
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80020d0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80020d4:	4a2a      	ldr	r2, [pc, #168]	; (8002180 <main+0x110>)
  huart1.Instance = USART1;
 80020d6:	482b      	ldr	r0, [pc, #172]	; (8002184 <main+0x114>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80020d8:	e880 001c 	stmia.w	r0, {r2, r3, r4}
  huart1.Init.Mode = UART_MODE_TX_RX;
 80020dc:	230c      	movs	r3, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 80020de:	60c4      	str	r4, [r0, #12]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80020e0:	6143      	str	r3, [r0, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 80020e2:	6104      	str	r4, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020e4:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80020e6:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80020e8:	f7ff fea6 	bl	8001e38 <HAL_UART_Init>
  hadc1.Instance = ADC1;
 80020ec:	4b26      	ldr	r3, [pc, #152]	; (8002188 <main+0x118>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80020ee:	4628      	mov	r0, r5
  hadc1.Instance = ADC1;
 80020f0:	602b      	str	r3, [r5, #0]
  ADC_MultiModeTypeDef multimode = {0};
 80020f2:	9401      	str	r4, [sp, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 80020f4:	9405      	str	r4, [sp, #20]
 80020f6:	9406      	str	r4, [sp, #24]
 80020f8:	9407      	str	r4, [sp, #28]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80020fa:	60ac      	str	r4, [r5, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80020fc:	60ef      	str	r7, [r5, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80020fe:	616c      	str	r4, [r5, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002100:	f8c5 801c 	str.w	r8, [r5, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002104:	606c      	str	r4, [r5, #4]
  hadc1.Init.NbrOfConversion = 1;
 8002106:	612f      	str	r7, [r5, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002108:	f7fe fe7c 	bl	8000e04 <HAL_ADC_Init>
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 800210c:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
 8002110:	a908      	add	r1, sp, #32
 8002112:	f841 3d1c 	str.w	r3, [r1, #-28]!
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002116:	4628      	mov	r0, r5
 8002118:	f7fe ffca 	bl	80010b0 <HAL_ADCEx_MultiModeConfigChannel>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800211c:	a905      	add	r1, sp, #20
 800211e:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_0;
 8002120:	9405      	str	r4, [sp, #20]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002122:	9706      	str	r7, [sp, #24]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002124:	9407      	str	r4, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002126:	f7fe fd2d 	bl	8000b84 <HAL_ADC_ConfigChannel>
  hadc2.Instance = ADC2;
 800212a:	4b18      	ldr	r3, [pc, #96]	; (800218c <main+0x11c>)
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800212c:	4630      	mov	r0, r6
  hadc2.Instance = ADC2;
 800212e:	6033      	str	r3, [r6, #0]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002130:	9405      	str	r4, [sp, #20]
 8002132:	9406      	str	r4, [sp, #24]
 8002134:	9407      	str	r4, [sp, #28]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002136:	60b4      	str	r4, [r6, #8]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8002138:	60f7      	str	r7, [r6, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800213a:	6174      	str	r4, [r6, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800213c:	f8c6 801c 	str.w	r8, [r6, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002140:	6074      	str	r4, [r6, #4]
  hadc2.Init.NbrOfConversion = 1;
 8002142:	6137      	str	r7, [r6, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002144:	f7fe fe5e 	bl	8000e04 <HAL_ADC_Init>
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002148:	a905      	add	r1, sp, #20
 800214a:	4630      	mov	r0, r6
  sConfig.Channel = ADC_CHANNEL_1;
 800214c:	9705      	str	r7, [sp, #20]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800214e:	9706      	str	r7, [sp, #24]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002150:	9407      	str	r4, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002152:	f7fe fd17 	bl	8000b84 <HAL_ADC_ConfigChannel>
  HAL_ADCEx_Calibration_Start(&hadc1);
 8002156:	4628      	mov	r0, r5
 8002158:	f7fe fed4 	bl	8000f04 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2);
 800215c:	4630      	mov	r0, r6
 800215e:	f7fe fed1 	bl	8000f04 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start(&hadc2);
 8002162:	4630      	mov	r0, r6
 8002164:	f7fe fdca 	bl	8000cfc <HAL_ADC_Start>
  HAL_ADCEx_MultiModeStart_DMA(&hadc1, (uint32_t*)adc, 4); // DMA забирает данные 32-х битными словами, в первой половине значение первого канала, а во второй второго, поэтому указываем половину объявленного буфера
 8002168:	2204      	movs	r2, #4
 800216a:	4909      	ldr	r1, [pc, #36]	; (8002190 <main+0x120>)
 800216c:	4628      	mov	r0, r5
 800216e:	f7fe ff31 	bl	8000fd4 <HAL_ADCEx_MultiModeStart_DMA>
 8002172:	e7fe      	b.n	8002172 <main+0x102>
 8002174:	40021000 	.word	0x40021000
 8002178:	20000288 	.word	0x20000288
 800217c:	20000258 	.word	0x20000258
 8002180:	40013800 	.word	0x40013800
 8002184:	200002b8 	.word	0x200002b8
 8002188:	40012400 	.word	0x40012400
 800218c:	40012800 	.word	0x40012800
 8002190:	200001f8 	.word	0x200001f8

08002194 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002194:	4770      	bx	lr
	...

08002198 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002198:	4b0e      	ldr	r3, [pc, #56]	; (80021d4 <HAL_MspInit+0x3c>)
{
 800219a:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 800219c:	699a      	ldr	r2, [r3, #24]
 800219e:	f042 0201 	orr.w	r2, r2, #1
 80021a2:	619a      	str	r2, [r3, #24]
 80021a4:	699a      	ldr	r2, [r3, #24]
 80021a6:	f002 0201 	and.w	r2, r2, #1
 80021aa:	9200      	str	r2, [sp, #0]
 80021ac:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021ae:	69da      	ldr	r2, [r3, #28]
 80021b0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80021b4:	61da      	str	r2, [r3, #28]
 80021b6:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80021b8:	4a07      	ldr	r2, [pc, #28]	; (80021d8 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80021ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021be:	9301      	str	r3, [sp, #4]
 80021c0:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80021c2:	6853      	ldr	r3, [r2, #4]
 80021c4:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80021c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021ce:	b002      	add	sp, #8
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	40021000 	.word	0x40021000
 80021d8:	40010000 	.word	0x40010000

080021dc <HAL_ADC_MspInit>:
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021dc:	2210      	movs	r2, #16
{
 80021de:	b530      	push	{r4, r5, lr}
 80021e0:	4605      	mov	r5, r0
 80021e2:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e4:	eb0d 0002 	add.w	r0, sp, r2
 80021e8:	2100      	movs	r1, #0
 80021ea:	f000 f941 	bl	8002470 <memset>
  if(hadc->Instance==ADC1)
 80021ee:	682b      	ldr	r3, [r5, #0]
 80021f0:	4a2b      	ldr	r2, [pc, #172]	; (80022a0 <HAL_ADC_MspInit+0xc4>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d134      	bne.n	8002260 <HAL_ADC_MspInit+0x84>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80021f6:	4b2b      	ldr	r3, [pc, #172]	; (80022a4 <HAL_ADC_MspInit+0xc8>)
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f8:	482b      	ldr	r0, [pc, #172]	; (80022a8 <HAL_ADC_MspInit+0xcc>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80021fa:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021fc:	a904      	add	r1, sp, #16
    __HAL_RCC_ADC1_CLK_ENABLE();
 80021fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002202:	619a      	str	r2, [r3, #24]
 8002204:	699a      	ldr	r2, [r3, #24]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002206:	4c29      	ldr	r4, [pc, #164]	; (80022ac <HAL_ADC_MspInit+0xd0>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002208:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800220c:	9200      	str	r2, [sp, #0]
 800220e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002210:	699a      	ldr	r2, [r3, #24]
 8002212:	f042 0204 	orr.w	r2, r2, #4
 8002216:	619a      	str	r2, [r3, #24]
 8002218:	699b      	ldr	r3, [r3, #24]
 800221a:	f003 0304 	and.w	r3, r3, #4
 800221e:	9301      	str	r3, [sp, #4]
 8002220:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002222:	2301      	movs	r3, #1
 8002224:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002226:	2303      	movs	r3, #3
 8002228:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800222a:	f7ff f8d7 	bl	80013dc <HAL_GPIO_Init>
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800222e:	2280      	movs	r2, #128	; 0x80
 8002230:	60e2      	str	r2, [r4, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002232:	f44f 7200 	mov.w	r2, #512	; 0x200
    hdma_adc1.Instance = DMA1_Channel1;
 8002236:	4b1e      	ldr	r3, [pc, #120]	; (80022b0 <HAL_ADC_MspInit+0xd4>)
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002238:	6122      	str	r2, [r4, #16]
    hdma_adc1.Instance = DMA1_Channel1;
 800223a:	6023      	str	r3, [r4, #0]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800223c:	f44f 6200 	mov.w	r2, #2048	; 0x800
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002240:	2300      	movs	r3, #0
    hdma_adc1.Init.Mode = DMA_NORMAL;
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002242:	4620      	mov	r0, r4
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002244:	6063      	str	r3, [r4, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002246:	60a3      	str	r3, [r4, #8]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002248:	6162      	str	r2, [r4, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800224a:	61a3      	str	r3, [r4, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800224c:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800224e:	f7fe ffc3 	bl	80011d8 <HAL_DMA_Init>
 8002252:	b108      	cbz	r0, 8002258 <HAL_ADC_MspInit+0x7c>
    {
      Error_Handler();
 8002254:	f7ff ff9e 	bl	8002194 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002258:	622c      	str	r4, [r5, #32]
 800225a:	6265      	str	r5, [r4, #36]	; 0x24
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800225c:	b009      	add	sp, #36	; 0x24
 800225e:	bd30      	pop	{r4, r5, pc}
  else if(hadc->Instance==ADC2)
 8002260:	4a14      	ldr	r2, [pc, #80]	; (80022b4 <HAL_ADC_MspInit+0xd8>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d1fa      	bne.n	800225c <HAL_ADC_MspInit+0x80>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002266:	4b0f      	ldr	r3, [pc, #60]	; (80022a4 <HAL_ADC_MspInit+0xc8>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002268:	a904      	add	r1, sp, #16
    __HAL_RCC_ADC2_CLK_ENABLE();
 800226a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800226c:	480e      	ldr	r0, [pc, #56]	; (80022a8 <HAL_ADC_MspInit+0xcc>)
    __HAL_RCC_ADC2_CLK_ENABLE();
 800226e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002272:	619a      	str	r2, [r3, #24]
 8002274:	699a      	ldr	r2, [r3, #24]
 8002276:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 800227a:	9202      	str	r2, [sp, #8]
 800227c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800227e:	699a      	ldr	r2, [r3, #24]
 8002280:	f042 0204 	orr.w	r2, r2, #4
 8002284:	619a      	str	r2, [r3, #24]
 8002286:	699b      	ldr	r3, [r3, #24]
 8002288:	f003 0304 	and.w	r3, r3, #4
 800228c:	9303      	str	r3, [sp, #12]
 800228e:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002290:	2302      	movs	r3, #2
 8002292:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002294:	2303      	movs	r3, #3
 8002296:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002298:	f7ff f8a0 	bl	80013dc <HAL_GPIO_Init>
}
 800229c:	e7de      	b.n	800225c <HAL_ADC_MspInit+0x80>
 800229e:	bf00      	nop
 80022a0:	40012400 	.word	0x40012400
 80022a4:	40021000 	.word	0x40021000
 80022a8:	40010800 	.word	0x40010800
 80022ac:	200002f8 	.word	0x200002f8
 80022b0:	40020008 	.word	0x40020008
 80022b4:	40012800 	.word	0x40012800

080022b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022b8:	b510      	push	{r4, lr}
 80022ba:	4604      	mov	r4, r0
 80022bc:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022be:	2210      	movs	r2, #16
 80022c0:	2100      	movs	r1, #0
 80022c2:	a802      	add	r0, sp, #8
 80022c4:	f000 f8d4 	bl	8002470 <memset>
  if(huart->Instance==USART1)
 80022c8:	6822      	ldr	r2, [r4, #0]
 80022ca:	4b17      	ldr	r3, [pc, #92]	; (8002328 <HAL_UART_MspInit+0x70>)
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d128      	bne.n	8002322 <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80022d0:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80022d4:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022d6:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 80022d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80022dc:	619a      	str	r2, [r3, #24]
 80022de:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022e0:	4812      	ldr	r0, [pc, #72]	; (800232c <HAL_UART_MspInit+0x74>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80022e2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80022e6:	9200      	str	r2, [sp, #0]
 80022e8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ea:	699a      	ldr	r2, [r3, #24]
 80022ec:	f042 0204 	orr.w	r2, r2, #4
 80022f0:	619a      	str	r2, [r3, #24]
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	f003 0304 	and.w	r3, r3, #4
 80022f8:	9301      	str	r3, [sp, #4]
 80022fa:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80022fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002300:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002302:	2302      	movs	r3, #2
 8002304:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002306:	2303      	movs	r3, #3
 8002308:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800230a:	f7ff f867 	bl	80013dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800230e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002312:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002314:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002316:	a902      	add	r1, sp, #8
 8002318:	4804      	ldr	r0, [pc, #16]	; (800232c <HAL_UART_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800231a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800231e:	f7ff f85d 	bl	80013dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002322:	b006      	add	sp, #24
 8002324:	bd10      	pop	{r4, pc}
 8002326:	bf00      	nop
 8002328:	40013800 	.word	0x40013800
 800232c:	40010800 	.word	0x40010800

08002330 <NMI_Handler>:
 8002330:	4770      	bx	lr

08002332 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002332:	e7fe      	b.n	8002332 <HardFault_Handler>

08002334 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002334:	e7fe      	b.n	8002334 <MemManage_Handler>

08002336 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002336:	e7fe      	b.n	8002336 <BusFault_Handler>

08002338 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002338:	e7fe      	b.n	8002338 <UsageFault_Handler>

0800233a <SVC_Handler>:
 800233a:	4770      	bx	lr

0800233c <DebugMon_Handler>:
 800233c:	4770      	bx	lr

0800233e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800233e:	4770      	bx	lr

08002340 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002340:	f7fe bbd4 	b.w	8000aec <HAL_IncTick>

08002344 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002344:	4801      	ldr	r0, [pc, #4]	; (800234c <DMA1_Channel1_IRQHandler+0x8>)
 8002346:	f7fe bfb5 	b.w	80012b4 <HAL_DMA_IRQHandler>
 800234a:	bf00      	nop
 800234c:	200002f8 	.word	0x200002f8

08002350 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8002350:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002352:	4b0a      	ldr	r3, [pc, #40]	; (800237c <_sbrk+0x2c>)
{
 8002354:	4602      	mov	r2, r0
	if (heap_end == 0)
 8002356:	6819      	ldr	r1, [r3, #0]
 8002358:	b909      	cbnz	r1, 800235e <_sbrk+0xe>
		heap_end = &end;
 800235a:	4909      	ldr	r1, [pc, #36]	; (8002380 <_sbrk+0x30>)
 800235c:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 800235e:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8002360:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8002362:	4402      	add	r2, r0
 8002364:	428a      	cmp	r2, r1
 8002366:	d906      	bls.n	8002376 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8002368:	f000 f858 	bl	800241c <__errno>
 800236c:	230c      	movs	r3, #12
 800236e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8002370:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002374:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8002376:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8002378:	bd08      	pop	{r3, pc}
 800237a:	bf00      	nop
 800237c:	20000248 	.word	0x20000248
 8002380:	20000340 	.word	0x20000340

08002384 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002384:	4b0f      	ldr	r3, [pc, #60]	; (80023c4 <SystemInit+0x40>)
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	f042 0201 	orr.w	r2, r2, #1
 800238c:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800238e:	6859      	ldr	r1, [r3, #4]
 8002390:	4a0d      	ldr	r2, [pc, #52]	; (80023c8 <SystemInit+0x44>)
 8002392:	400a      	ands	r2, r1
 8002394:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800239c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80023a0:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80023a8:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80023aa:	685a      	ldr	r2, [r3, #4]
 80023ac:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80023b0:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80023b2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80023b6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80023b8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80023bc:	4b03      	ldr	r3, [pc, #12]	; (80023cc <SystemInit+0x48>)
 80023be:	609a      	str	r2, [r3, #8]
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	40021000 	.word	0x40021000
 80023c8:	f8ff0000 	.word	0xf8ff0000
 80023cc:	e000ed00 	.word	0xe000ed00

080023d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80023d0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80023d2:	e003      	b.n	80023dc <LoopCopyDataInit>

080023d4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80023d4:	4b0b      	ldr	r3, [pc, #44]	; (8002404 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80023d6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80023d8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80023da:	3104      	adds	r1, #4

080023dc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80023dc:	480a      	ldr	r0, [pc, #40]	; (8002408 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80023de:	4b0b      	ldr	r3, [pc, #44]	; (800240c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80023e0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80023e2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80023e4:	d3f6      	bcc.n	80023d4 <CopyDataInit>
  ldr r2, =_sbss
 80023e6:	4a0a      	ldr	r2, [pc, #40]	; (8002410 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80023e8:	e002      	b.n	80023f0 <LoopFillZerobss>

080023ea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80023ea:	2300      	movs	r3, #0
  str r3, [r2], #4
 80023ec:	f842 3b04 	str.w	r3, [r2], #4

080023f0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80023f0:	4b08      	ldr	r3, [pc, #32]	; (8002414 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80023f2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80023f4:	d3f9      	bcc.n	80023ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80023f6:	f7ff ffc5 	bl	8002384 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023fa:	f000 f815 	bl	8002428 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80023fe:	f7ff fe37 	bl	8002070 <main>
  bx lr
 8002402:	4770      	bx	lr
  ldr r3, =_sidata
 8002404:	08004850 	.word	0x08004850
  ldr r0, =_sdata
 8002408:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800240c:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 8002410:	200001dc 	.word	0x200001dc
  ldr r3, = _ebss
 8002414:	20000340 	.word	0x20000340

08002418 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002418:	e7fe      	b.n	8002418 <ADC1_2_IRQHandler>
	...

0800241c <__errno>:
 800241c:	4b01      	ldr	r3, [pc, #4]	; (8002424 <__errno+0x8>)
 800241e:	6818      	ldr	r0, [r3, #0]
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	2000000c 	.word	0x2000000c

08002428 <__libc_init_array>:
 8002428:	b570      	push	{r4, r5, r6, lr}
 800242a:	2500      	movs	r5, #0
 800242c:	4e0c      	ldr	r6, [pc, #48]	; (8002460 <__libc_init_array+0x38>)
 800242e:	4c0d      	ldr	r4, [pc, #52]	; (8002464 <__libc_init_array+0x3c>)
 8002430:	1ba4      	subs	r4, r4, r6
 8002432:	10a4      	asrs	r4, r4, #2
 8002434:	42a5      	cmp	r5, r4
 8002436:	d109      	bne.n	800244c <__libc_init_array+0x24>
 8002438:	f002 f89c 	bl	8004574 <_init>
 800243c:	2500      	movs	r5, #0
 800243e:	4e0a      	ldr	r6, [pc, #40]	; (8002468 <__libc_init_array+0x40>)
 8002440:	4c0a      	ldr	r4, [pc, #40]	; (800246c <__libc_init_array+0x44>)
 8002442:	1ba4      	subs	r4, r4, r6
 8002444:	10a4      	asrs	r4, r4, #2
 8002446:	42a5      	cmp	r5, r4
 8002448:	d105      	bne.n	8002456 <__libc_init_array+0x2e>
 800244a:	bd70      	pop	{r4, r5, r6, pc}
 800244c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002450:	4798      	blx	r3
 8002452:	3501      	adds	r5, #1
 8002454:	e7ee      	b.n	8002434 <__libc_init_array+0xc>
 8002456:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800245a:	4798      	blx	r3
 800245c:	3501      	adds	r5, #1
 800245e:	e7f2      	b.n	8002446 <__libc_init_array+0x1e>
 8002460:	08004848 	.word	0x08004848
 8002464:	08004848 	.word	0x08004848
 8002468:	08004848 	.word	0x08004848
 800246c:	0800484c 	.word	0x0800484c

08002470 <memset>:
 8002470:	4603      	mov	r3, r0
 8002472:	4402      	add	r2, r0
 8002474:	4293      	cmp	r3, r2
 8002476:	d100      	bne.n	800247a <memset+0xa>
 8002478:	4770      	bx	lr
 800247a:	f803 1b01 	strb.w	r1, [r3], #1
 800247e:	e7f9      	b.n	8002474 <memset+0x4>

08002480 <__cvt>:
 8002480:	2b00      	cmp	r3, #0
 8002482:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002486:	461e      	mov	r6, r3
 8002488:	bfbb      	ittet	lt
 800248a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800248e:	461e      	movlt	r6, r3
 8002490:	2300      	movge	r3, #0
 8002492:	232d      	movlt	r3, #45	; 0x2d
 8002494:	b088      	sub	sp, #32
 8002496:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8002498:	9912      	ldr	r1, [sp, #72]	; 0x48
 800249a:	f027 0720 	bic.w	r7, r7, #32
 800249e:	2f46      	cmp	r7, #70	; 0x46
 80024a0:	4614      	mov	r4, r2
 80024a2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80024a4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80024a8:	700b      	strb	r3, [r1, #0]
 80024aa:	d004      	beq.n	80024b6 <__cvt+0x36>
 80024ac:	2f45      	cmp	r7, #69	; 0x45
 80024ae:	d100      	bne.n	80024b2 <__cvt+0x32>
 80024b0:	3501      	adds	r5, #1
 80024b2:	2302      	movs	r3, #2
 80024b4:	e000      	b.n	80024b8 <__cvt+0x38>
 80024b6:	2303      	movs	r3, #3
 80024b8:	aa07      	add	r2, sp, #28
 80024ba:	9204      	str	r2, [sp, #16]
 80024bc:	aa06      	add	r2, sp, #24
 80024be:	9203      	str	r2, [sp, #12]
 80024c0:	e88d 0428 	stmia.w	sp, {r3, r5, sl}
 80024c4:	4622      	mov	r2, r4
 80024c6:	4633      	mov	r3, r6
 80024c8:	f000 fcfe 	bl	8002ec8 <_dtoa_r>
 80024cc:	2f47      	cmp	r7, #71	; 0x47
 80024ce:	4680      	mov	r8, r0
 80024d0:	d102      	bne.n	80024d8 <__cvt+0x58>
 80024d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80024d4:	07db      	lsls	r3, r3, #31
 80024d6:	d526      	bpl.n	8002526 <__cvt+0xa6>
 80024d8:	2f46      	cmp	r7, #70	; 0x46
 80024da:	eb08 0905 	add.w	r9, r8, r5
 80024de:	d111      	bne.n	8002504 <__cvt+0x84>
 80024e0:	f898 3000 	ldrb.w	r3, [r8]
 80024e4:	2b30      	cmp	r3, #48	; 0x30
 80024e6:	d10a      	bne.n	80024fe <__cvt+0x7e>
 80024e8:	2200      	movs	r2, #0
 80024ea:	2300      	movs	r3, #0
 80024ec:	4620      	mov	r0, r4
 80024ee:	4631      	mov	r1, r6
 80024f0:	f7fe fa56 	bl	80009a0 <__aeabi_dcmpeq>
 80024f4:	b918      	cbnz	r0, 80024fe <__cvt+0x7e>
 80024f6:	f1c5 0501 	rsb	r5, r5, #1
 80024fa:	f8ca 5000 	str.w	r5, [sl]
 80024fe:	f8da 3000 	ldr.w	r3, [sl]
 8002502:	4499      	add	r9, r3
 8002504:	2200      	movs	r2, #0
 8002506:	2300      	movs	r3, #0
 8002508:	4620      	mov	r0, r4
 800250a:	4631      	mov	r1, r6
 800250c:	f7fe fa48 	bl	80009a0 <__aeabi_dcmpeq>
 8002510:	b938      	cbnz	r0, 8002522 <__cvt+0xa2>
 8002512:	2230      	movs	r2, #48	; 0x30
 8002514:	9b07      	ldr	r3, [sp, #28]
 8002516:	4599      	cmp	r9, r3
 8002518:	d905      	bls.n	8002526 <__cvt+0xa6>
 800251a:	1c59      	adds	r1, r3, #1
 800251c:	9107      	str	r1, [sp, #28]
 800251e:	701a      	strb	r2, [r3, #0]
 8002520:	e7f8      	b.n	8002514 <__cvt+0x94>
 8002522:	f8cd 901c 	str.w	r9, [sp, #28]
 8002526:	4640      	mov	r0, r8
 8002528:	9b07      	ldr	r3, [sp, #28]
 800252a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800252c:	eba3 0308 	sub.w	r3, r3, r8
 8002530:	6013      	str	r3, [r2, #0]
 8002532:	b008      	add	sp, #32
 8002534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002538 <__exponent>:
 8002538:	4603      	mov	r3, r0
 800253a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800253c:	2900      	cmp	r1, #0
 800253e:	f803 2b02 	strb.w	r2, [r3], #2
 8002542:	bfb6      	itet	lt
 8002544:	222d      	movlt	r2, #45	; 0x2d
 8002546:	222b      	movge	r2, #43	; 0x2b
 8002548:	4249      	neglt	r1, r1
 800254a:	2909      	cmp	r1, #9
 800254c:	7042      	strb	r2, [r0, #1]
 800254e:	dd21      	ble.n	8002594 <__exponent+0x5c>
 8002550:	f10d 0207 	add.w	r2, sp, #7
 8002554:	4617      	mov	r7, r2
 8002556:	260a      	movs	r6, #10
 8002558:	fb91 f5f6 	sdiv	r5, r1, r6
 800255c:	fb06 1115 	mls	r1, r6, r5, r1
 8002560:	2d09      	cmp	r5, #9
 8002562:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8002566:	f802 1c01 	strb.w	r1, [r2, #-1]
 800256a:	f102 34ff 	add.w	r4, r2, #4294967295	; 0xffffffff
 800256e:	4629      	mov	r1, r5
 8002570:	dc09      	bgt.n	8002586 <__exponent+0x4e>
 8002572:	3130      	adds	r1, #48	; 0x30
 8002574:	3a02      	subs	r2, #2
 8002576:	f804 1c01 	strb.w	r1, [r4, #-1]
 800257a:	42ba      	cmp	r2, r7
 800257c:	461c      	mov	r4, r3
 800257e:	d304      	bcc.n	800258a <__exponent+0x52>
 8002580:	1a20      	subs	r0, r4, r0
 8002582:	b003      	add	sp, #12
 8002584:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002586:	4622      	mov	r2, r4
 8002588:	e7e6      	b.n	8002558 <__exponent+0x20>
 800258a:	f812 1b01 	ldrb.w	r1, [r2], #1
 800258e:	f803 1b01 	strb.w	r1, [r3], #1
 8002592:	e7f2      	b.n	800257a <__exponent+0x42>
 8002594:	2230      	movs	r2, #48	; 0x30
 8002596:	461c      	mov	r4, r3
 8002598:	4411      	add	r1, r2
 800259a:	f804 2b02 	strb.w	r2, [r4], #2
 800259e:	7059      	strb	r1, [r3, #1]
 80025a0:	e7ee      	b.n	8002580 <__exponent+0x48>
	...

080025a4 <_printf_float>:
 80025a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025a8:	b091      	sub	sp, #68	; 0x44
 80025aa:	460c      	mov	r4, r1
 80025ac:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80025ae:	4693      	mov	fp, r2
 80025b0:	461e      	mov	r6, r3
 80025b2:	4605      	mov	r5, r0
 80025b4:	f001 fa5c 	bl	8003a70 <_localeconv_r>
 80025b8:	6803      	ldr	r3, [r0, #0]
 80025ba:	4618      	mov	r0, r3
 80025bc:	9309      	str	r3, [sp, #36]	; 0x24
 80025be:	f7fd fdc7 	bl	8000150 <strlen>
 80025c2:	2300      	movs	r3, #0
 80025c4:	930e      	str	r3, [sp, #56]	; 0x38
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	900a      	str	r0, [sp, #40]	; 0x28
 80025ca:	3307      	adds	r3, #7
 80025cc:	f023 0307 	bic.w	r3, r3, #7
 80025d0:	f103 0208 	add.w	r2, r3, #8
 80025d4:	f894 8018 	ldrb.w	r8, [r4, #24]
 80025d8:	f8d4 a000 	ldr.w	sl, [r4]
 80025dc:	603a      	str	r2, [r7, #0]
 80025de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025e2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80025e6:	f8d4 904c 	ldr.w	r9, [r4, #76]	; 0x4c
 80025ea:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 80025ec:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80025f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80025f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80025f6:	4ba6      	ldr	r3, [pc, #664]	; (8002890 <_printf_float+0x2ec>)
 80025f8:	4638      	mov	r0, r7
 80025fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80025fc:	f7fe fa02 	bl	8000a04 <__aeabi_dcmpun>
 8002600:	2800      	cmp	r0, #0
 8002602:	f040 81f7 	bne.w	80029f4 <_printf_float+0x450>
 8002606:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800260a:	4ba1      	ldr	r3, [pc, #644]	; (8002890 <_printf_float+0x2ec>)
 800260c:	4638      	mov	r0, r7
 800260e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002610:	f7fe f9da 	bl	80009c8 <__aeabi_dcmple>
 8002614:	2800      	cmp	r0, #0
 8002616:	f040 81ed 	bne.w	80029f4 <_printf_float+0x450>
 800261a:	2200      	movs	r2, #0
 800261c:	2300      	movs	r3, #0
 800261e:	4638      	mov	r0, r7
 8002620:	4649      	mov	r1, r9
 8002622:	f7fe f9c7 	bl	80009b4 <__aeabi_dcmplt>
 8002626:	b110      	cbz	r0, 800262e <_printf_float+0x8a>
 8002628:	232d      	movs	r3, #45	; 0x2d
 800262a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800262e:	4b99      	ldr	r3, [pc, #612]	; (8002894 <_printf_float+0x2f0>)
 8002630:	4f99      	ldr	r7, [pc, #612]	; (8002898 <_printf_float+0x2f4>)
 8002632:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002636:	bf98      	it	ls
 8002638:	461f      	movls	r7, r3
 800263a:	2303      	movs	r3, #3
 800263c:	f04f 0900 	mov.w	r9, #0
 8002640:	6123      	str	r3, [r4, #16]
 8002642:	f02a 0304 	bic.w	r3, sl, #4
 8002646:	6023      	str	r3, [r4, #0]
 8002648:	9600      	str	r6, [sp, #0]
 800264a:	465b      	mov	r3, fp
 800264c:	aa0f      	add	r2, sp, #60	; 0x3c
 800264e:	4621      	mov	r1, r4
 8002650:	4628      	mov	r0, r5
 8002652:	f000 f9df 	bl	8002a14 <_printf_common>
 8002656:	3001      	adds	r0, #1
 8002658:	f040 809a 	bne.w	8002790 <_printf_float+0x1ec>
 800265c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002660:	b011      	add	sp, #68	; 0x44
 8002662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002666:	6862      	ldr	r2, [r4, #4]
 8002668:	a80e      	add	r0, sp, #56	; 0x38
 800266a:	1c53      	adds	r3, r2, #1
 800266c:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
 8002670:	f44a 6380 	orr.w	r3, sl, #1024	; 0x400
 8002674:	d141      	bne.n	80026fa <_printf_float+0x156>
 8002676:	2206      	movs	r2, #6
 8002678:	6062      	str	r2, [r4, #4]
 800267a:	2100      	movs	r1, #0
 800267c:	6023      	str	r3, [r4, #0]
 800267e:	9301      	str	r3, [sp, #4]
 8002680:	6863      	ldr	r3, [r4, #4]
 8002682:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8002686:	9005      	str	r0, [sp, #20]
 8002688:	9202      	str	r2, [sp, #8]
 800268a:	9300      	str	r3, [sp, #0]
 800268c:	463a      	mov	r2, r7
 800268e:	464b      	mov	r3, r9
 8002690:	9106      	str	r1, [sp, #24]
 8002692:	f8cd 8010 	str.w	r8, [sp, #16]
 8002696:	f8cd e00c 	str.w	lr, [sp, #12]
 800269a:	4628      	mov	r0, r5
 800269c:	f7ff fef0 	bl	8002480 <__cvt>
 80026a0:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 80026a4:	2b47      	cmp	r3, #71	; 0x47
 80026a6:	4607      	mov	r7, r0
 80026a8:	d109      	bne.n	80026be <_printf_float+0x11a>
 80026aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80026ac:	1cd8      	adds	r0, r3, #3
 80026ae:	db02      	blt.n	80026b6 <_printf_float+0x112>
 80026b0:	6862      	ldr	r2, [r4, #4]
 80026b2:	4293      	cmp	r3, r2
 80026b4:	dd59      	ble.n	800276a <_printf_float+0x1c6>
 80026b6:	f1a8 0802 	sub.w	r8, r8, #2
 80026ba:	fa5f f888 	uxtb.w	r8, r8
 80026be:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80026c2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80026c4:	d836      	bhi.n	8002734 <_printf_float+0x190>
 80026c6:	3901      	subs	r1, #1
 80026c8:	4642      	mov	r2, r8
 80026ca:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80026ce:	910d      	str	r1, [sp, #52]	; 0x34
 80026d0:	f7ff ff32 	bl	8002538 <__exponent>
 80026d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80026d6:	4681      	mov	r9, r0
 80026d8:	1883      	adds	r3, r0, r2
 80026da:	2a01      	cmp	r2, #1
 80026dc:	6123      	str	r3, [r4, #16]
 80026de:	dc02      	bgt.n	80026e6 <_printf_float+0x142>
 80026e0:	6822      	ldr	r2, [r4, #0]
 80026e2:	07d1      	lsls	r1, r2, #31
 80026e4:	d501      	bpl.n	80026ea <_printf_float+0x146>
 80026e6:	3301      	adds	r3, #1
 80026e8:	6123      	str	r3, [r4, #16]
 80026ea:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d0aa      	beq.n	8002648 <_printf_float+0xa4>
 80026f2:	232d      	movs	r3, #45	; 0x2d
 80026f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80026f8:	e7a6      	b.n	8002648 <_printf_float+0xa4>
 80026fa:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80026fe:	d002      	beq.n	8002706 <_printf_float+0x162>
 8002700:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002704:	d1b9      	bne.n	800267a <_printf_float+0xd6>
 8002706:	b19a      	cbz	r2, 8002730 <_printf_float+0x18c>
 8002708:	2100      	movs	r1, #0
 800270a:	9106      	str	r1, [sp, #24]
 800270c:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8002710:	e88d 000c 	stmia.w	sp, {r2, r3}
 8002714:	6023      	str	r3, [r4, #0]
 8002716:	9005      	str	r0, [sp, #20]
 8002718:	463a      	mov	r2, r7
 800271a:	f8cd 8010 	str.w	r8, [sp, #16]
 800271e:	f8cd e00c 	str.w	lr, [sp, #12]
 8002722:	9102      	str	r1, [sp, #8]
 8002724:	464b      	mov	r3, r9
 8002726:	4628      	mov	r0, r5
 8002728:	f7ff feaa 	bl	8002480 <__cvt>
 800272c:	4607      	mov	r7, r0
 800272e:	e7bc      	b.n	80026aa <_printf_float+0x106>
 8002730:	2201      	movs	r2, #1
 8002732:	e7a1      	b.n	8002678 <_printf_float+0xd4>
 8002734:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8002738:	d119      	bne.n	800276e <_printf_float+0x1ca>
 800273a:	2900      	cmp	r1, #0
 800273c:	6863      	ldr	r3, [r4, #4]
 800273e:	dd0c      	ble.n	800275a <_printf_float+0x1b6>
 8002740:	6121      	str	r1, [r4, #16]
 8002742:	b913      	cbnz	r3, 800274a <_printf_float+0x1a6>
 8002744:	6822      	ldr	r2, [r4, #0]
 8002746:	07d2      	lsls	r2, r2, #31
 8002748:	d502      	bpl.n	8002750 <_printf_float+0x1ac>
 800274a:	3301      	adds	r3, #1
 800274c:	440b      	add	r3, r1
 800274e:	6123      	str	r3, [r4, #16]
 8002750:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002752:	f04f 0900 	mov.w	r9, #0
 8002756:	65a3      	str	r3, [r4, #88]	; 0x58
 8002758:	e7c7      	b.n	80026ea <_printf_float+0x146>
 800275a:	b913      	cbnz	r3, 8002762 <_printf_float+0x1be>
 800275c:	6822      	ldr	r2, [r4, #0]
 800275e:	07d0      	lsls	r0, r2, #31
 8002760:	d501      	bpl.n	8002766 <_printf_float+0x1c2>
 8002762:	3302      	adds	r3, #2
 8002764:	e7f3      	b.n	800274e <_printf_float+0x1aa>
 8002766:	2301      	movs	r3, #1
 8002768:	e7f1      	b.n	800274e <_printf_float+0x1aa>
 800276a:	f04f 0867 	mov.w	r8, #103	; 0x67
 800276e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002770:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002772:	4293      	cmp	r3, r2
 8002774:	db05      	blt.n	8002782 <_printf_float+0x1de>
 8002776:	6822      	ldr	r2, [r4, #0]
 8002778:	6123      	str	r3, [r4, #16]
 800277a:	07d1      	lsls	r1, r2, #31
 800277c:	d5e8      	bpl.n	8002750 <_printf_float+0x1ac>
 800277e:	3301      	adds	r3, #1
 8002780:	e7e5      	b.n	800274e <_printf_float+0x1aa>
 8002782:	2b00      	cmp	r3, #0
 8002784:	bfcc      	ite	gt
 8002786:	2301      	movgt	r3, #1
 8002788:	f1c3 0302 	rsble	r3, r3, #2
 800278c:	4413      	add	r3, r2
 800278e:	e7de      	b.n	800274e <_printf_float+0x1aa>
 8002790:	6823      	ldr	r3, [r4, #0]
 8002792:	055a      	lsls	r2, r3, #21
 8002794:	d407      	bmi.n	80027a6 <_printf_float+0x202>
 8002796:	6923      	ldr	r3, [r4, #16]
 8002798:	463a      	mov	r2, r7
 800279a:	4659      	mov	r1, fp
 800279c:	4628      	mov	r0, r5
 800279e:	47b0      	blx	r6
 80027a0:	3001      	adds	r0, #1
 80027a2:	d12a      	bne.n	80027fa <_printf_float+0x256>
 80027a4:	e75a      	b.n	800265c <_printf_float+0xb8>
 80027a6:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80027aa:	f240 80dc 	bls.w	8002966 <_printf_float+0x3c2>
 80027ae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80027b2:	2200      	movs	r2, #0
 80027b4:	2300      	movs	r3, #0
 80027b6:	f7fe f8f3 	bl	80009a0 <__aeabi_dcmpeq>
 80027ba:	2800      	cmp	r0, #0
 80027bc:	d039      	beq.n	8002832 <_printf_float+0x28e>
 80027be:	2301      	movs	r3, #1
 80027c0:	4a36      	ldr	r2, [pc, #216]	; (800289c <_printf_float+0x2f8>)
 80027c2:	4659      	mov	r1, fp
 80027c4:	4628      	mov	r0, r5
 80027c6:	47b0      	blx	r6
 80027c8:	3001      	adds	r0, #1
 80027ca:	f43f af47 	beq.w	800265c <_printf_float+0xb8>
 80027ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80027d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80027d2:	429a      	cmp	r2, r3
 80027d4:	db02      	blt.n	80027dc <_printf_float+0x238>
 80027d6:	6823      	ldr	r3, [r4, #0]
 80027d8:	07d8      	lsls	r0, r3, #31
 80027da:	d50e      	bpl.n	80027fa <_printf_float+0x256>
 80027dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80027de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80027e0:	4659      	mov	r1, fp
 80027e2:	4628      	mov	r0, r5
 80027e4:	47b0      	blx	r6
 80027e6:	3001      	adds	r0, #1
 80027e8:	f43f af38 	beq.w	800265c <_printf_float+0xb8>
 80027ec:	2700      	movs	r7, #0
 80027ee:	f104 081a 	add.w	r8, r4, #26
 80027f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80027f4:	3b01      	subs	r3, #1
 80027f6:	429f      	cmp	r7, r3
 80027f8:	db11      	blt.n	800281e <_printf_float+0x27a>
 80027fa:	6823      	ldr	r3, [r4, #0]
 80027fc:	079f      	lsls	r7, r3, #30
 80027fe:	d508      	bpl.n	8002812 <_printf_float+0x26e>
 8002800:	2700      	movs	r7, #0
 8002802:	f104 0819 	add.w	r8, r4, #25
 8002806:	68e3      	ldr	r3, [r4, #12]
 8002808:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800280a:	1a9b      	subs	r3, r3, r2
 800280c:	429f      	cmp	r7, r3
 800280e:	f2c0 80e7 	blt.w	80029e0 <_printf_float+0x43c>
 8002812:	68e0      	ldr	r0, [r4, #12]
 8002814:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002816:	4298      	cmp	r0, r3
 8002818:	bfb8      	it	lt
 800281a:	4618      	movlt	r0, r3
 800281c:	e720      	b.n	8002660 <_printf_float+0xbc>
 800281e:	2301      	movs	r3, #1
 8002820:	4642      	mov	r2, r8
 8002822:	4659      	mov	r1, fp
 8002824:	4628      	mov	r0, r5
 8002826:	47b0      	blx	r6
 8002828:	3001      	adds	r0, #1
 800282a:	f43f af17 	beq.w	800265c <_printf_float+0xb8>
 800282e:	3701      	adds	r7, #1
 8002830:	e7df      	b.n	80027f2 <_printf_float+0x24e>
 8002832:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002834:	2b00      	cmp	r3, #0
 8002836:	dc33      	bgt.n	80028a0 <_printf_float+0x2fc>
 8002838:	2301      	movs	r3, #1
 800283a:	4a18      	ldr	r2, [pc, #96]	; (800289c <_printf_float+0x2f8>)
 800283c:	4659      	mov	r1, fp
 800283e:	4628      	mov	r0, r5
 8002840:	47b0      	blx	r6
 8002842:	3001      	adds	r0, #1
 8002844:	f43f af0a 	beq.w	800265c <_printf_float+0xb8>
 8002848:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800284a:	b923      	cbnz	r3, 8002856 <_printf_float+0x2b2>
 800284c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800284e:	b913      	cbnz	r3, 8002856 <_printf_float+0x2b2>
 8002850:	6823      	ldr	r3, [r4, #0]
 8002852:	07d9      	lsls	r1, r3, #31
 8002854:	d5d1      	bpl.n	80027fa <_printf_float+0x256>
 8002856:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002858:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800285a:	4659      	mov	r1, fp
 800285c:	4628      	mov	r0, r5
 800285e:	47b0      	blx	r6
 8002860:	3001      	adds	r0, #1
 8002862:	f43f aefb 	beq.w	800265c <_printf_float+0xb8>
 8002866:	f04f 0800 	mov.w	r8, #0
 800286a:	f104 091a 	add.w	r9, r4, #26
 800286e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002870:	425b      	negs	r3, r3
 8002872:	4598      	cmp	r8, r3
 8002874:	db01      	blt.n	800287a <_printf_float+0x2d6>
 8002876:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002878:	e78e      	b.n	8002798 <_printf_float+0x1f4>
 800287a:	2301      	movs	r3, #1
 800287c:	464a      	mov	r2, r9
 800287e:	4659      	mov	r1, fp
 8002880:	4628      	mov	r0, r5
 8002882:	47b0      	blx	r6
 8002884:	3001      	adds	r0, #1
 8002886:	f43f aee9 	beq.w	800265c <_printf_float+0xb8>
 800288a:	f108 0801 	add.w	r8, r8, #1
 800288e:	e7ee      	b.n	800286e <_printf_float+0x2ca>
 8002890:	7fefffff 	.word	0x7fefffff
 8002894:	080045eb 	.word	0x080045eb
 8002898:	080045ef 	.word	0x080045ef
 800289c:	080045fb 	.word	0x080045fb
 80028a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80028a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80028a4:	429a      	cmp	r2, r3
 80028a6:	bfa8      	it	ge
 80028a8:	461a      	movge	r2, r3
 80028aa:	2a00      	cmp	r2, #0
 80028ac:	4690      	mov	r8, r2
 80028ae:	dc36      	bgt.n	800291e <_printf_float+0x37a>
 80028b0:	f04f 0a00 	mov.w	sl, #0
 80028b4:	f104 031a 	add.w	r3, r4, #26
 80028b8:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 80028bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80028be:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80028c2:	eba9 0308 	sub.w	r3, r9, r8
 80028c6:	459a      	cmp	sl, r3
 80028c8:	db31      	blt.n	800292e <_printf_float+0x38a>
 80028ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80028cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80028ce:	429a      	cmp	r2, r3
 80028d0:	db38      	blt.n	8002944 <_printf_float+0x3a0>
 80028d2:	6823      	ldr	r3, [r4, #0]
 80028d4:	07da      	lsls	r2, r3, #31
 80028d6:	d435      	bmi.n	8002944 <_printf_float+0x3a0>
 80028d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80028da:	990d      	ldr	r1, [sp, #52]	; 0x34
 80028dc:	eba3 0209 	sub.w	r2, r3, r9
 80028e0:	eba3 0801 	sub.w	r8, r3, r1
 80028e4:	4590      	cmp	r8, r2
 80028e6:	bfa8      	it	ge
 80028e8:	4690      	movge	r8, r2
 80028ea:	f1b8 0f00 	cmp.w	r8, #0
 80028ee:	dc31      	bgt.n	8002954 <_printf_float+0x3b0>
 80028f0:	2700      	movs	r7, #0
 80028f2:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 80028f6:	f104 091a 	add.w	r9, r4, #26
 80028fa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80028fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80028fe:	1a9b      	subs	r3, r3, r2
 8002900:	eba3 0308 	sub.w	r3, r3, r8
 8002904:	429f      	cmp	r7, r3
 8002906:	f6bf af78 	bge.w	80027fa <_printf_float+0x256>
 800290a:	2301      	movs	r3, #1
 800290c:	464a      	mov	r2, r9
 800290e:	4659      	mov	r1, fp
 8002910:	4628      	mov	r0, r5
 8002912:	47b0      	blx	r6
 8002914:	3001      	adds	r0, #1
 8002916:	f43f aea1 	beq.w	800265c <_printf_float+0xb8>
 800291a:	3701      	adds	r7, #1
 800291c:	e7ed      	b.n	80028fa <_printf_float+0x356>
 800291e:	4613      	mov	r3, r2
 8002920:	4659      	mov	r1, fp
 8002922:	463a      	mov	r2, r7
 8002924:	4628      	mov	r0, r5
 8002926:	47b0      	blx	r6
 8002928:	3001      	adds	r0, #1
 800292a:	d1c1      	bne.n	80028b0 <_printf_float+0x30c>
 800292c:	e696      	b.n	800265c <_printf_float+0xb8>
 800292e:	2301      	movs	r3, #1
 8002930:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002932:	4659      	mov	r1, fp
 8002934:	4628      	mov	r0, r5
 8002936:	47b0      	blx	r6
 8002938:	3001      	adds	r0, #1
 800293a:	f43f ae8f 	beq.w	800265c <_printf_float+0xb8>
 800293e:	f10a 0a01 	add.w	sl, sl, #1
 8002942:	e7bc      	b.n	80028be <_printf_float+0x31a>
 8002944:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002946:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002948:	4659      	mov	r1, fp
 800294a:	4628      	mov	r0, r5
 800294c:	47b0      	blx	r6
 800294e:	3001      	adds	r0, #1
 8002950:	d1c2      	bne.n	80028d8 <_printf_float+0x334>
 8002952:	e683      	b.n	800265c <_printf_float+0xb8>
 8002954:	4643      	mov	r3, r8
 8002956:	eb07 0209 	add.w	r2, r7, r9
 800295a:	4659      	mov	r1, fp
 800295c:	4628      	mov	r0, r5
 800295e:	47b0      	blx	r6
 8002960:	3001      	adds	r0, #1
 8002962:	d1c5      	bne.n	80028f0 <_printf_float+0x34c>
 8002964:	e67a      	b.n	800265c <_printf_float+0xb8>
 8002966:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002968:	2a01      	cmp	r2, #1
 800296a:	dc01      	bgt.n	8002970 <_printf_float+0x3cc>
 800296c:	07db      	lsls	r3, r3, #31
 800296e:	d534      	bpl.n	80029da <_printf_float+0x436>
 8002970:	2301      	movs	r3, #1
 8002972:	463a      	mov	r2, r7
 8002974:	4659      	mov	r1, fp
 8002976:	4628      	mov	r0, r5
 8002978:	47b0      	blx	r6
 800297a:	3001      	adds	r0, #1
 800297c:	f43f ae6e 	beq.w	800265c <_printf_float+0xb8>
 8002980:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002982:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002984:	4659      	mov	r1, fp
 8002986:	4628      	mov	r0, r5
 8002988:	47b0      	blx	r6
 800298a:	3001      	adds	r0, #1
 800298c:	f43f ae66 	beq.w	800265c <_printf_float+0xb8>
 8002990:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002994:	2200      	movs	r2, #0
 8002996:	2300      	movs	r3, #0
 8002998:	f7fe f802 	bl	80009a0 <__aeabi_dcmpeq>
 800299c:	b150      	cbz	r0, 80029b4 <_printf_float+0x410>
 800299e:	2700      	movs	r7, #0
 80029a0:	f104 081a 	add.w	r8, r4, #26
 80029a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80029a6:	3b01      	subs	r3, #1
 80029a8:	429f      	cmp	r7, r3
 80029aa:	db0c      	blt.n	80029c6 <_printf_float+0x422>
 80029ac:	464b      	mov	r3, r9
 80029ae:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80029b2:	e6f2      	b.n	800279a <_printf_float+0x1f6>
 80029b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80029b6:	1c7a      	adds	r2, r7, #1
 80029b8:	3b01      	subs	r3, #1
 80029ba:	4659      	mov	r1, fp
 80029bc:	4628      	mov	r0, r5
 80029be:	47b0      	blx	r6
 80029c0:	3001      	adds	r0, #1
 80029c2:	d1f3      	bne.n	80029ac <_printf_float+0x408>
 80029c4:	e64a      	b.n	800265c <_printf_float+0xb8>
 80029c6:	2301      	movs	r3, #1
 80029c8:	4642      	mov	r2, r8
 80029ca:	4659      	mov	r1, fp
 80029cc:	4628      	mov	r0, r5
 80029ce:	47b0      	blx	r6
 80029d0:	3001      	adds	r0, #1
 80029d2:	f43f ae43 	beq.w	800265c <_printf_float+0xb8>
 80029d6:	3701      	adds	r7, #1
 80029d8:	e7e4      	b.n	80029a4 <_printf_float+0x400>
 80029da:	2301      	movs	r3, #1
 80029dc:	463a      	mov	r2, r7
 80029de:	e7ec      	b.n	80029ba <_printf_float+0x416>
 80029e0:	2301      	movs	r3, #1
 80029e2:	4642      	mov	r2, r8
 80029e4:	4659      	mov	r1, fp
 80029e6:	4628      	mov	r0, r5
 80029e8:	47b0      	blx	r6
 80029ea:	3001      	adds	r0, #1
 80029ec:	f43f ae36 	beq.w	800265c <_printf_float+0xb8>
 80029f0:	3701      	adds	r7, #1
 80029f2:	e708      	b.n	8002806 <_printf_float+0x262>
 80029f4:	463a      	mov	r2, r7
 80029f6:	464b      	mov	r3, r9
 80029f8:	4638      	mov	r0, r7
 80029fa:	4649      	mov	r1, r9
 80029fc:	f7fe f802 	bl	8000a04 <__aeabi_dcmpun>
 8002a00:	2800      	cmp	r0, #0
 8002a02:	f43f ae30 	beq.w	8002666 <_printf_float+0xc2>
 8002a06:	4b01      	ldr	r3, [pc, #4]	; (8002a0c <_printf_float+0x468>)
 8002a08:	4f01      	ldr	r7, [pc, #4]	; (8002a10 <_printf_float+0x46c>)
 8002a0a:	e612      	b.n	8002632 <_printf_float+0x8e>
 8002a0c:	080045f3 	.word	0x080045f3
 8002a10:	080045f7 	.word	0x080045f7

08002a14 <_printf_common>:
 8002a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a18:	4691      	mov	r9, r2
 8002a1a:	461f      	mov	r7, r3
 8002a1c:	688a      	ldr	r2, [r1, #8]
 8002a1e:	690b      	ldr	r3, [r1, #16]
 8002a20:	4606      	mov	r6, r0
 8002a22:	4293      	cmp	r3, r2
 8002a24:	bfb8      	it	lt
 8002a26:	4613      	movlt	r3, r2
 8002a28:	f8c9 3000 	str.w	r3, [r9]
 8002a2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002a30:	460c      	mov	r4, r1
 8002a32:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002a36:	b112      	cbz	r2, 8002a3e <_printf_common+0x2a>
 8002a38:	3301      	adds	r3, #1
 8002a3a:	f8c9 3000 	str.w	r3, [r9]
 8002a3e:	6823      	ldr	r3, [r4, #0]
 8002a40:	0699      	lsls	r1, r3, #26
 8002a42:	bf42      	ittt	mi
 8002a44:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002a48:	3302      	addmi	r3, #2
 8002a4a:	f8c9 3000 	strmi.w	r3, [r9]
 8002a4e:	6825      	ldr	r5, [r4, #0]
 8002a50:	f015 0506 	ands.w	r5, r5, #6
 8002a54:	d107      	bne.n	8002a66 <_printf_common+0x52>
 8002a56:	f104 0a19 	add.w	sl, r4, #25
 8002a5a:	68e3      	ldr	r3, [r4, #12]
 8002a5c:	f8d9 2000 	ldr.w	r2, [r9]
 8002a60:	1a9b      	subs	r3, r3, r2
 8002a62:	429d      	cmp	r5, r3
 8002a64:	db2a      	blt.n	8002abc <_printf_common+0xa8>
 8002a66:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002a6a:	6822      	ldr	r2, [r4, #0]
 8002a6c:	3300      	adds	r3, #0
 8002a6e:	bf18      	it	ne
 8002a70:	2301      	movne	r3, #1
 8002a72:	0692      	lsls	r2, r2, #26
 8002a74:	d42f      	bmi.n	8002ad6 <_printf_common+0xc2>
 8002a76:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002a7a:	4639      	mov	r1, r7
 8002a7c:	4630      	mov	r0, r6
 8002a7e:	47c0      	blx	r8
 8002a80:	3001      	adds	r0, #1
 8002a82:	d022      	beq.n	8002aca <_printf_common+0xb6>
 8002a84:	6823      	ldr	r3, [r4, #0]
 8002a86:	68e5      	ldr	r5, [r4, #12]
 8002a88:	f003 0306 	and.w	r3, r3, #6
 8002a8c:	2b04      	cmp	r3, #4
 8002a8e:	bf18      	it	ne
 8002a90:	2500      	movne	r5, #0
 8002a92:	f8d9 2000 	ldr.w	r2, [r9]
 8002a96:	f04f 0900 	mov.w	r9, #0
 8002a9a:	bf08      	it	eq
 8002a9c:	1aad      	subeq	r5, r5, r2
 8002a9e:	68a3      	ldr	r3, [r4, #8]
 8002aa0:	6922      	ldr	r2, [r4, #16]
 8002aa2:	bf08      	it	eq
 8002aa4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	bfc4      	itt	gt
 8002aac:	1a9b      	subgt	r3, r3, r2
 8002aae:	18ed      	addgt	r5, r5, r3
 8002ab0:	341a      	adds	r4, #26
 8002ab2:	454d      	cmp	r5, r9
 8002ab4:	d11b      	bne.n	8002aee <_printf_common+0xda>
 8002ab6:	2000      	movs	r0, #0
 8002ab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002abc:	2301      	movs	r3, #1
 8002abe:	4652      	mov	r2, sl
 8002ac0:	4639      	mov	r1, r7
 8002ac2:	4630      	mov	r0, r6
 8002ac4:	47c0      	blx	r8
 8002ac6:	3001      	adds	r0, #1
 8002ac8:	d103      	bne.n	8002ad2 <_printf_common+0xbe>
 8002aca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ad2:	3501      	adds	r5, #1
 8002ad4:	e7c1      	b.n	8002a5a <_printf_common+0x46>
 8002ad6:	2030      	movs	r0, #48	; 0x30
 8002ad8:	18e1      	adds	r1, r4, r3
 8002ada:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002ade:	1c5a      	adds	r2, r3, #1
 8002ae0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002ae4:	4422      	add	r2, r4
 8002ae6:	3302      	adds	r3, #2
 8002ae8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002aec:	e7c3      	b.n	8002a76 <_printf_common+0x62>
 8002aee:	2301      	movs	r3, #1
 8002af0:	4622      	mov	r2, r4
 8002af2:	4639      	mov	r1, r7
 8002af4:	4630      	mov	r0, r6
 8002af6:	47c0      	blx	r8
 8002af8:	3001      	adds	r0, #1
 8002afa:	d0e6      	beq.n	8002aca <_printf_common+0xb6>
 8002afc:	f109 0901 	add.w	r9, r9, #1
 8002b00:	e7d7      	b.n	8002ab2 <_printf_common+0x9e>
	...

08002b04 <_printf_i>:
 8002b04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002b08:	4617      	mov	r7, r2
 8002b0a:	7e0a      	ldrb	r2, [r1, #24]
 8002b0c:	b085      	sub	sp, #20
 8002b0e:	2a6e      	cmp	r2, #110	; 0x6e
 8002b10:	4698      	mov	r8, r3
 8002b12:	4606      	mov	r6, r0
 8002b14:	460c      	mov	r4, r1
 8002b16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002b18:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8002b1c:	f000 80bc 	beq.w	8002c98 <_printf_i+0x194>
 8002b20:	d81a      	bhi.n	8002b58 <_printf_i+0x54>
 8002b22:	2a63      	cmp	r2, #99	; 0x63
 8002b24:	d02e      	beq.n	8002b84 <_printf_i+0x80>
 8002b26:	d80a      	bhi.n	8002b3e <_printf_i+0x3a>
 8002b28:	2a00      	cmp	r2, #0
 8002b2a:	f000 80c8 	beq.w	8002cbe <_printf_i+0x1ba>
 8002b2e:	2a58      	cmp	r2, #88	; 0x58
 8002b30:	f000 808a 	beq.w	8002c48 <_printf_i+0x144>
 8002b34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002b38:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8002b3c:	e02a      	b.n	8002b94 <_printf_i+0x90>
 8002b3e:	2a64      	cmp	r2, #100	; 0x64
 8002b40:	d001      	beq.n	8002b46 <_printf_i+0x42>
 8002b42:	2a69      	cmp	r2, #105	; 0x69
 8002b44:	d1f6      	bne.n	8002b34 <_printf_i+0x30>
 8002b46:	6821      	ldr	r1, [r4, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002b4e:	d023      	beq.n	8002b98 <_printf_i+0x94>
 8002b50:	1d11      	adds	r1, r2, #4
 8002b52:	6019      	str	r1, [r3, #0]
 8002b54:	6813      	ldr	r3, [r2, #0]
 8002b56:	e027      	b.n	8002ba8 <_printf_i+0xa4>
 8002b58:	2a73      	cmp	r2, #115	; 0x73
 8002b5a:	f000 80b4 	beq.w	8002cc6 <_printf_i+0x1c2>
 8002b5e:	d808      	bhi.n	8002b72 <_printf_i+0x6e>
 8002b60:	2a6f      	cmp	r2, #111	; 0x6f
 8002b62:	d02a      	beq.n	8002bba <_printf_i+0xb6>
 8002b64:	2a70      	cmp	r2, #112	; 0x70
 8002b66:	d1e5      	bne.n	8002b34 <_printf_i+0x30>
 8002b68:	680a      	ldr	r2, [r1, #0]
 8002b6a:	f042 0220 	orr.w	r2, r2, #32
 8002b6e:	600a      	str	r2, [r1, #0]
 8002b70:	e003      	b.n	8002b7a <_printf_i+0x76>
 8002b72:	2a75      	cmp	r2, #117	; 0x75
 8002b74:	d021      	beq.n	8002bba <_printf_i+0xb6>
 8002b76:	2a78      	cmp	r2, #120	; 0x78
 8002b78:	d1dc      	bne.n	8002b34 <_printf_i+0x30>
 8002b7a:	2278      	movs	r2, #120	; 0x78
 8002b7c:	496f      	ldr	r1, [pc, #444]	; (8002d3c <_printf_i+0x238>)
 8002b7e:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8002b82:	e064      	b.n	8002c4e <_printf_i+0x14a>
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8002b8a:	1d11      	adds	r1, r2, #4
 8002b8c:	6019      	str	r1, [r3, #0]
 8002b8e:	6813      	ldr	r3, [r2, #0]
 8002b90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002b94:	2301      	movs	r3, #1
 8002b96:	e0a3      	b.n	8002ce0 <_printf_i+0x1dc>
 8002b98:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002b9c:	f102 0104 	add.w	r1, r2, #4
 8002ba0:	6019      	str	r1, [r3, #0]
 8002ba2:	d0d7      	beq.n	8002b54 <_printf_i+0x50>
 8002ba4:	f9b2 3000 	ldrsh.w	r3, [r2]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	da03      	bge.n	8002bb4 <_printf_i+0xb0>
 8002bac:	222d      	movs	r2, #45	; 0x2d
 8002bae:	425b      	negs	r3, r3
 8002bb0:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002bb4:	4962      	ldr	r1, [pc, #392]	; (8002d40 <_printf_i+0x23c>)
 8002bb6:	220a      	movs	r2, #10
 8002bb8:	e017      	b.n	8002bea <_printf_i+0xe6>
 8002bba:	6820      	ldr	r0, [r4, #0]
 8002bbc:	6819      	ldr	r1, [r3, #0]
 8002bbe:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002bc2:	d003      	beq.n	8002bcc <_printf_i+0xc8>
 8002bc4:	1d08      	adds	r0, r1, #4
 8002bc6:	6018      	str	r0, [r3, #0]
 8002bc8:	680b      	ldr	r3, [r1, #0]
 8002bca:	e006      	b.n	8002bda <_printf_i+0xd6>
 8002bcc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002bd0:	f101 0004 	add.w	r0, r1, #4
 8002bd4:	6018      	str	r0, [r3, #0]
 8002bd6:	d0f7      	beq.n	8002bc8 <_printf_i+0xc4>
 8002bd8:	880b      	ldrh	r3, [r1, #0]
 8002bda:	2a6f      	cmp	r2, #111	; 0x6f
 8002bdc:	bf14      	ite	ne
 8002bde:	220a      	movne	r2, #10
 8002be0:	2208      	moveq	r2, #8
 8002be2:	4957      	ldr	r1, [pc, #348]	; (8002d40 <_printf_i+0x23c>)
 8002be4:	2000      	movs	r0, #0
 8002be6:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8002bea:	6865      	ldr	r5, [r4, #4]
 8002bec:	2d00      	cmp	r5, #0
 8002bee:	60a5      	str	r5, [r4, #8]
 8002bf0:	f2c0 809c 	blt.w	8002d2c <_printf_i+0x228>
 8002bf4:	6820      	ldr	r0, [r4, #0]
 8002bf6:	f020 0004 	bic.w	r0, r0, #4
 8002bfa:	6020      	str	r0, [r4, #0]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d13f      	bne.n	8002c80 <_printf_i+0x17c>
 8002c00:	2d00      	cmp	r5, #0
 8002c02:	f040 8095 	bne.w	8002d30 <_printf_i+0x22c>
 8002c06:	4675      	mov	r5, lr
 8002c08:	2a08      	cmp	r2, #8
 8002c0a:	d10b      	bne.n	8002c24 <_printf_i+0x120>
 8002c0c:	6823      	ldr	r3, [r4, #0]
 8002c0e:	07da      	lsls	r2, r3, #31
 8002c10:	d508      	bpl.n	8002c24 <_printf_i+0x120>
 8002c12:	6923      	ldr	r3, [r4, #16]
 8002c14:	6862      	ldr	r2, [r4, #4]
 8002c16:	429a      	cmp	r2, r3
 8002c18:	bfde      	ittt	le
 8002c1a:	2330      	movle	r3, #48	; 0x30
 8002c1c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002c20:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002c24:	ebae 0305 	sub.w	r3, lr, r5
 8002c28:	6123      	str	r3, [r4, #16]
 8002c2a:	f8cd 8000 	str.w	r8, [sp]
 8002c2e:	463b      	mov	r3, r7
 8002c30:	aa03      	add	r2, sp, #12
 8002c32:	4621      	mov	r1, r4
 8002c34:	4630      	mov	r0, r6
 8002c36:	f7ff feed 	bl	8002a14 <_printf_common>
 8002c3a:	3001      	adds	r0, #1
 8002c3c:	d155      	bne.n	8002cea <_printf_i+0x1e6>
 8002c3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c42:	b005      	add	sp, #20
 8002c44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002c48:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8002c4c:	493c      	ldr	r1, [pc, #240]	; (8002d40 <_printf_i+0x23c>)
 8002c4e:	6822      	ldr	r2, [r4, #0]
 8002c50:	6818      	ldr	r0, [r3, #0]
 8002c52:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002c56:	f100 0504 	add.w	r5, r0, #4
 8002c5a:	601d      	str	r5, [r3, #0]
 8002c5c:	d001      	beq.n	8002c62 <_printf_i+0x15e>
 8002c5e:	6803      	ldr	r3, [r0, #0]
 8002c60:	e002      	b.n	8002c68 <_printf_i+0x164>
 8002c62:	0655      	lsls	r5, r2, #25
 8002c64:	d5fb      	bpl.n	8002c5e <_printf_i+0x15a>
 8002c66:	8803      	ldrh	r3, [r0, #0]
 8002c68:	07d0      	lsls	r0, r2, #31
 8002c6a:	bf44      	itt	mi
 8002c6c:	f042 0220 	orrmi.w	r2, r2, #32
 8002c70:	6022      	strmi	r2, [r4, #0]
 8002c72:	b91b      	cbnz	r3, 8002c7c <_printf_i+0x178>
 8002c74:	6822      	ldr	r2, [r4, #0]
 8002c76:	f022 0220 	bic.w	r2, r2, #32
 8002c7a:	6022      	str	r2, [r4, #0]
 8002c7c:	2210      	movs	r2, #16
 8002c7e:	e7b1      	b.n	8002be4 <_printf_i+0xe0>
 8002c80:	4675      	mov	r5, lr
 8002c82:	fbb3 f0f2 	udiv	r0, r3, r2
 8002c86:	fb02 3310 	mls	r3, r2, r0, r3
 8002c8a:	5ccb      	ldrb	r3, [r1, r3]
 8002c8c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002c90:	4603      	mov	r3, r0
 8002c92:	2800      	cmp	r0, #0
 8002c94:	d1f5      	bne.n	8002c82 <_printf_i+0x17e>
 8002c96:	e7b7      	b.n	8002c08 <_printf_i+0x104>
 8002c98:	6808      	ldr	r0, [r1, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002ca0:	6949      	ldr	r1, [r1, #20]
 8002ca2:	d004      	beq.n	8002cae <_printf_i+0x1aa>
 8002ca4:	1d10      	adds	r0, r2, #4
 8002ca6:	6018      	str	r0, [r3, #0]
 8002ca8:	6813      	ldr	r3, [r2, #0]
 8002caa:	6019      	str	r1, [r3, #0]
 8002cac:	e007      	b.n	8002cbe <_printf_i+0x1ba>
 8002cae:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002cb2:	f102 0004 	add.w	r0, r2, #4
 8002cb6:	6018      	str	r0, [r3, #0]
 8002cb8:	6813      	ldr	r3, [r2, #0]
 8002cba:	d0f6      	beq.n	8002caa <_printf_i+0x1a6>
 8002cbc:	8019      	strh	r1, [r3, #0]
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	4675      	mov	r5, lr
 8002cc2:	6123      	str	r3, [r4, #16]
 8002cc4:	e7b1      	b.n	8002c2a <_printf_i+0x126>
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	1d11      	adds	r1, r2, #4
 8002cca:	6019      	str	r1, [r3, #0]
 8002ccc:	6815      	ldr	r5, [r2, #0]
 8002cce:	2100      	movs	r1, #0
 8002cd0:	6862      	ldr	r2, [r4, #4]
 8002cd2:	4628      	mov	r0, r5
 8002cd4:	f000 fee2 	bl	8003a9c <memchr>
 8002cd8:	b108      	cbz	r0, 8002cde <_printf_i+0x1da>
 8002cda:	1b40      	subs	r0, r0, r5
 8002cdc:	6060      	str	r0, [r4, #4]
 8002cde:	6863      	ldr	r3, [r4, #4]
 8002ce0:	6123      	str	r3, [r4, #16]
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ce8:	e79f      	b.n	8002c2a <_printf_i+0x126>
 8002cea:	6923      	ldr	r3, [r4, #16]
 8002cec:	462a      	mov	r2, r5
 8002cee:	4639      	mov	r1, r7
 8002cf0:	4630      	mov	r0, r6
 8002cf2:	47c0      	blx	r8
 8002cf4:	3001      	adds	r0, #1
 8002cf6:	d0a2      	beq.n	8002c3e <_printf_i+0x13a>
 8002cf8:	6823      	ldr	r3, [r4, #0]
 8002cfa:	079b      	lsls	r3, r3, #30
 8002cfc:	d507      	bpl.n	8002d0e <_printf_i+0x20a>
 8002cfe:	2500      	movs	r5, #0
 8002d00:	f104 0919 	add.w	r9, r4, #25
 8002d04:	68e3      	ldr	r3, [r4, #12]
 8002d06:	9a03      	ldr	r2, [sp, #12]
 8002d08:	1a9b      	subs	r3, r3, r2
 8002d0a:	429d      	cmp	r5, r3
 8002d0c:	db05      	blt.n	8002d1a <_printf_i+0x216>
 8002d0e:	68e0      	ldr	r0, [r4, #12]
 8002d10:	9b03      	ldr	r3, [sp, #12]
 8002d12:	4298      	cmp	r0, r3
 8002d14:	bfb8      	it	lt
 8002d16:	4618      	movlt	r0, r3
 8002d18:	e793      	b.n	8002c42 <_printf_i+0x13e>
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	464a      	mov	r2, r9
 8002d1e:	4639      	mov	r1, r7
 8002d20:	4630      	mov	r0, r6
 8002d22:	47c0      	blx	r8
 8002d24:	3001      	adds	r0, #1
 8002d26:	d08a      	beq.n	8002c3e <_printf_i+0x13a>
 8002d28:	3501      	adds	r5, #1
 8002d2a:	e7eb      	b.n	8002d04 <_printf_i+0x200>
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d1a7      	bne.n	8002c80 <_printf_i+0x17c>
 8002d30:	780b      	ldrb	r3, [r1, #0]
 8002d32:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d36:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002d3a:	e765      	b.n	8002c08 <_printf_i+0x104>
 8002d3c:	0800460e 	.word	0x0800460e
 8002d40:	080045fd 	.word	0x080045fd

08002d44 <sniprintf>:
 8002d44:	b40c      	push	{r2, r3}
 8002d46:	b530      	push	{r4, r5, lr}
 8002d48:	4b17      	ldr	r3, [pc, #92]	; (8002da8 <sniprintf+0x64>)
 8002d4a:	1e0c      	subs	r4, r1, #0
 8002d4c:	b09d      	sub	sp, #116	; 0x74
 8002d4e:	681d      	ldr	r5, [r3, #0]
 8002d50:	da08      	bge.n	8002d64 <sniprintf+0x20>
 8002d52:	238b      	movs	r3, #139	; 0x8b
 8002d54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d58:	602b      	str	r3, [r5, #0]
 8002d5a:	b01d      	add	sp, #116	; 0x74
 8002d5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002d60:	b002      	add	sp, #8
 8002d62:	4770      	bx	lr
 8002d64:	f44f 7302 	mov.w	r3, #520	; 0x208
 8002d68:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002d6c:	bf0c      	ite	eq
 8002d6e:	4623      	moveq	r3, r4
 8002d70:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8002d74:	9304      	str	r3, [sp, #16]
 8002d76:	9307      	str	r3, [sp, #28]
 8002d78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d7c:	9002      	str	r0, [sp, #8]
 8002d7e:	9006      	str	r0, [sp, #24]
 8002d80:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002d84:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002d86:	ab21      	add	r3, sp, #132	; 0x84
 8002d88:	a902      	add	r1, sp, #8
 8002d8a:	4628      	mov	r0, r5
 8002d8c:	9301      	str	r3, [sp, #4]
 8002d8e:	f001 fa83 	bl	8004298 <_svfiprintf_r>
 8002d92:	1c43      	adds	r3, r0, #1
 8002d94:	bfbc      	itt	lt
 8002d96:	238b      	movlt	r3, #139	; 0x8b
 8002d98:	602b      	strlt	r3, [r5, #0]
 8002d9a:	2c00      	cmp	r4, #0
 8002d9c:	d0dd      	beq.n	8002d5a <sniprintf+0x16>
 8002d9e:	2200      	movs	r2, #0
 8002da0:	9b02      	ldr	r3, [sp, #8]
 8002da2:	701a      	strb	r2, [r3, #0]
 8002da4:	e7d9      	b.n	8002d5a <sniprintf+0x16>
 8002da6:	bf00      	nop
 8002da8:	2000000c 	.word	0x2000000c

08002dac <quorem>:
 8002dac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002db0:	6903      	ldr	r3, [r0, #16]
 8002db2:	690c      	ldr	r4, [r1, #16]
 8002db4:	4680      	mov	r8, r0
 8002db6:	429c      	cmp	r4, r3
 8002db8:	f300 8082 	bgt.w	8002ec0 <quorem+0x114>
 8002dbc:	3c01      	subs	r4, #1
 8002dbe:	f101 0714 	add.w	r7, r1, #20
 8002dc2:	f100 0614 	add.w	r6, r0, #20
 8002dc6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8002dca:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8002dce:	3501      	adds	r5, #1
 8002dd0:	fbb0 f5f5 	udiv	r5, r0, r5
 8002dd4:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8002dd8:	eb06 030e 	add.w	r3, r6, lr
 8002ddc:	eb07 090e 	add.w	r9, r7, lr
 8002de0:	9301      	str	r3, [sp, #4]
 8002de2:	b38d      	cbz	r5, 8002e48 <quorem+0x9c>
 8002de4:	f04f 0a00 	mov.w	sl, #0
 8002de8:	4638      	mov	r0, r7
 8002dea:	46b4      	mov	ip, r6
 8002dec:	46d3      	mov	fp, sl
 8002dee:	f850 2b04 	ldr.w	r2, [r0], #4
 8002df2:	b293      	uxth	r3, r2
 8002df4:	fb05 a303 	mla	r3, r5, r3, sl
 8002df8:	0c12      	lsrs	r2, r2, #16
 8002dfa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8002dfe:	fb05 a202 	mla	r2, r5, r2, sl
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	ebab 0303 	sub.w	r3, fp, r3
 8002e08:	f8bc b000 	ldrh.w	fp, [ip]
 8002e0c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8002e10:	445b      	add	r3, fp
 8002e12:	fa1f fb82 	uxth.w	fp, r2
 8002e16:	f8dc 2000 	ldr.w	r2, [ip]
 8002e1a:	4581      	cmp	r9, r0
 8002e1c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8002e20:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002e2a:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8002e2e:	f84c 3b04 	str.w	r3, [ip], #4
 8002e32:	d2dc      	bcs.n	8002dee <quorem+0x42>
 8002e34:	f856 300e 	ldr.w	r3, [r6, lr]
 8002e38:	b933      	cbnz	r3, 8002e48 <quorem+0x9c>
 8002e3a:	9b01      	ldr	r3, [sp, #4]
 8002e3c:	3b04      	subs	r3, #4
 8002e3e:	429e      	cmp	r6, r3
 8002e40:	461a      	mov	r2, r3
 8002e42:	d331      	bcc.n	8002ea8 <quorem+0xfc>
 8002e44:	f8c8 4010 	str.w	r4, [r8, #16]
 8002e48:	4640      	mov	r0, r8
 8002e4a:	f001 f848 	bl	8003ede <__mcmp>
 8002e4e:	2800      	cmp	r0, #0
 8002e50:	db26      	blt.n	8002ea0 <quorem+0xf4>
 8002e52:	4630      	mov	r0, r6
 8002e54:	f04f 0e00 	mov.w	lr, #0
 8002e58:	3501      	adds	r5, #1
 8002e5a:	f857 1b04 	ldr.w	r1, [r7], #4
 8002e5e:	f8d0 c000 	ldr.w	ip, [r0]
 8002e62:	b28b      	uxth	r3, r1
 8002e64:	ebae 0303 	sub.w	r3, lr, r3
 8002e68:	fa1f f28c 	uxth.w	r2, ip
 8002e6c:	4413      	add	r3, r2
 8002e6e:	0c0a      	lsrs	r2, r1, #16
 8002e70:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8002e74:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002e7e:	45b9      	cmp	r9, r7
 8002e80:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8002e84:	f840 3b04 	str.w	r3, [r0], #4
 8002e88:	d2e7      	bcs.n	8002e5a <quorem+0xae>
 8002e8a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8002e8e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8002e92:	b92a      	cbnz	r2, 8002ea0 <quorem+0xf4>
 8002e94:	3b04      	subs	r3, #4
 8002e96:	429e      	cmp	r6, r3
 8002e98:	461a      	mov	r2, r3
 8002e9a:	d30b      	bcc.n	8002eb4 <quorem+0x108>
 8002e9c:	f8c8 4010 	str.w	r4, [r8, #16]
 8002ea0:	4628      	mov	r0, r5
 8002ea2:	b003      	add	sp, #12
 8002ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ea8:	6812      	ldr	r2, [r2, #0]
 8002eaa:	3b04      	subs	r3, #4
 8002eac:	2a00      	cmp	r2, #0
 8002eae:	d1c9      	bne.n	8002e44 <quorem+0x98>
 8002eb0:	3c01      	subs	r4, #1
 8002eb2:	e7c4      	b.n	8002e3e <quorem+0x92>
 8002eb4:	6812      	ldr	r2, [r2, #0]
 8002eb6:	3b04      	subs	r3, #4
 8002eb8:	2a00      	cmp	r2, #0
 8002eba:	d1ef      	bne.n	8002e9c <quorem+0xf0>
 8002ebc:	3c01      	subs	r4, #1
 8002ebe:	e7ea      	b.n	8002e96 <quorem+0xea>
 8002ec0:	2000      	movs	r0, #0
 8002ec2:	e7ee      	b.n	8002ea2 <quorem+0xf6>
 8002ec4:	0000      	movs	r0, r0
	...

08002ec8 <_dtoa_r>:
 8002ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ecc:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8002ece:	b095      	sub	sp, #84	; 0x54
 8002ed0:	4604      	mov	r4, r0
 8002ed2:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8002ed4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002ed8:	b93e      	cbnz	r6, 8002eea <_dtoa_r+0x22>
 8002eda:	2010      	movs	r0, #16
 8002edc:	f000 fdd6 	bl	8003a8c <malloc>
 8002ee0:	6260      	str	r0, [r4, #36]	; 0x24
 8002ee2:	6046      	str	r6, [r0, #4]
 8002ee4:	6086      	str	r6, [r0, #8]
 8002ee6:	6006      	str	r6, [r0, #0]
 8002ee8:	60c6      	str	r6, [r0, #12]
 8002eea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002eec:	6819      	ldr	r1, [r3, #0]
 8002eee:	b151      	cbz	r1, 8002f06 <_dtoa_r+0x3e>
 8002ef0:	685a      	ldr	r2, [r3, #4]
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	4093      	lsls	r3, r2
 8002ef6:	604a      	str	r2, [r1, #4]
 8002ef8:	608b      	str	r3, [r1, #8]
 8002efa:	4620      	mov	r0, r4
 8002efc:	f000 fe1b 	bl	8003b36 <_Bfree>
 8002f00:	2200      	movs	r2, #0
 8002f02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002f04:	601a      	str	r2, [r3, #0]
 8002f06:	9b03      	ldr	r3, [sp, #12]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	bfb7      	itett	lt
 8002f0c:	2301      	movlt	r3, #1
 8002f0e:	2300      	movge	r3, #0
 8002f10:	602b      	strlt	r3, [r5, #0]
 8002f12:	9b03      	ldrlt	r3, [sp, #12]
 8002f14:	bfae      	itee	ge
 8002f16:	602b      	strge	r3, [r5, #0]
 8002f18:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8002f1c:	9303      	strlt	r3, [sp, #12]
 8002f1e:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8002f22:	4bab      	ldr	r3, [pc, #684]	; (80031d0 <_dtoa_r+0x308>)
 8002f24:	ea33 0309 	bics.w	r3, r3, r9
 8002f28:	d11b      	bne.n	8002f62 <_dtoa_r+0x9a>
 8002f2a:	f242 730f 	movw	r3, #9999	; 0x270f
 8002f2e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002f30:	6013      	str	r3, [r2, #0]
 8002f32:	9b02      	ldr	r3, [sp, #8]
 8002f34:	b923      	cbnz	r3, 8002f40 <_dtoa_r+0x78>
 8002f36:	f3c9 0013 	ubfx	r0, r9, #0, #20
 8002f3a:	2800      	cmp	r0, #0
 8002f3c:	f000 8583 	beq.w	8003a46 <_dtoa_r+0xb7e>
 8002f40:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002f42:	b953      	cbnz	r3, 8002f5a <_dtoa_r+0x92>
 8002f44:	4ba3      	ldr	r3, [pc, #652]	; (80031d4 <_dtoa_r+0x30c>)
 8002f46:	e021      	b.n	8002f8c <_dtoa_r+0xc4>
 8002f48:	4ba3      	ldr	r3, [pc, #652]	; (80031d8 <_dtoa_r+0x310>)
 8002f4a:	9306      	str	r3, [sp, #24]
 8002f4c:	3308      	adds	r3, #8
 8002f4e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8002f50:	6013      	str	r3, [r2, #0]
 8002f52:	9806      	ldr	r0, [sp, #24]
 8002f54:	b015      	add	sp, #84	; 0x54
 8002f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f5a:	4b9e      	ldr	r3, [pc, #632]	; (80031d4 <_dtoa_r+0x30c>)
 8002f5c:	9306      	str	r3, [sp, #24]
 8002f5e:	3303      	adds	r3, #3
 8002f60:	e7f5      	b.n	8002f4e <_dtoa_r+0x86>
 8002f62:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8002f66:	2200      	movs	r2, #0
 8002f68:	2300      	movs	r3, #0
 8002f6a:	4630      	mov	r0, r6
 8002f6c:	4639      	mov	r1, r7
 8002f6e:	f7fd fd17 	bl	80009a0 <__aeabi_dcmpeq>
 8002f72:	4680      	mov	r8, r0
 8002f74:	b160      	cbz	r0, 8002f90 <_dtoa_r+0xc8>
 8002f76:	2301      	movs	r3, #1
 8002f78:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002f7a:	6013      	str	r3, [r2, #0]
 8002f7c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	f000 855e 	beq.w	8003a40 <_dtoa_r+0xb78>
 8002f84:	4b95      	ldr	r3, [pc, #596]	; (80031dc <_dtoa_r+0x314>)
 8002f86:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8002f88:	6013      	str	r3, [r2, #0]
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	9306      	str	r3, [sp, #24]
 8002f8e:	e7e0      	b.n	8002f52 <_dtoa_r+0x8a>
 8002f90:	ab12      	add	r3, sp, #72	; 0x48
 8002f92:	9301      	str	r3, [sp, #4]
 8002f94:	ab13      	add	r3, sp, #76	; 0x4c
 8002f96:	9300      	str	r3, [sp, #0]
 8002f98:	4632      	mov	r2, r6
 8002f9a:	463b      	mov	r3, r7
 8002f9c:	4620      	mov	r0, r4
 8002f9e:	f001 f817 	bl	8003fd0 <__d2b>
 8002fa2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8002fa6:	4682      	mov	sl, r0
 8002fa8:	2d00      	cmp	r5, #0
 8002faa:	d07d      	beq.n	80030a8 <_dtoa_r+0x1e0>
 8002fac:	4630      	mov	r0, r6
 8002fae:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8002fb2:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8002fb6:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8002fba:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8002fbe:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	4b86      	ldr	r3, [pc, #536]	; (80031e0 <_dtoa_r+0x318>)
 8002fc6:	f7fd f8cf 	bl	8000168 <__aeabi_dsub>
 8002fca:	a37b      	add	r3, pc, #492	; (adr r3, 80031b8 <_dtoa_r+0x2f0>)
 8002fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fd0:	f7fd fa7e 	bl	80004d0 <__aeabi_dmul>
 8002fd4:	a37a      	add	r3, pc, #488	; (adr r3, 80031c0 <_dtoa_r+0x2f8>)
 8002fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fda:	f7fd f8c7 	bl	800016c <__adddf3>
 8002fde:	4606      	mov	r6, r0
 8002fe0:	4628      	mov	r0, r5
 8002fe2:	460f      	mov	r7, r1
 8002fe4:	f7fd fa0e 	bl	8000404 <__aeabi_i2d>
 8002fe8:	a377      	add	r3, pc, #476	; (adr r3, 80031c8 <_dtoa_r+0x300>)
 8002fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fee:	f7fd fa6f 	bl	80004d0 <__aeabi_dmul>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	4630      	mov	r0, r6
 8002ff8:	4639      	mov	r1, r7
 8002ffa:	f7fd f8b7 	bl	800016c <__adddf3>
 8002ffe:	4606      	mov	r6, r0
 8003000:	460f      	mov	r7, r1
 8003002:	f7fd fd15 	bl	8000a30 <__aeabi_d2iz>
 8003006:	2200      	movs	r2, #0
 8003008:	4683      	mov	fp, r0
 800300a:	2300      	movs	r3, #0
 800300c:	4630      	mov	r0, r6
 800300e:	4639      	mov	r1, r7
 8003010:	f7fd fcd0 	bl	80009b4 <__aeabi_dcmplt>
 8003014:	b158      	cbz	r0, 800302e <_dtoa_r+0x166>
 8003016:	4658      	mov	r0, fp
 8003018:	f7fd f9f4 	bl	8000404 <__aeabi_i2d>
 800301c:	4602      	mov	r2, r0
 800301e:	460b      	mov	r3, r1
 8003020:	4630      	mov	r0, r6
 8003022:	4639      	mov	r1, r7
 8003024:	f7fd fcbc 	bl	80009a0 <__aeabi_dcmpeq>
 8003028:	b908      	cbnz	r0, 800302e <_dtoa_r+0x166>
 800302a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800302e:	f1bb 0f16 	cmp.w	fp, #22
 8003032:	d858      	bhi.n	80030e6 <_dtoa_r+0x21e>
 8003034:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003038:	496a      	ldr	r1, [pc, #424]	; (80031e4 <_dtoa_r+0x31c>)
 800303a:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800303e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003042:	f7fd fcd5 	bl	80009f0 <__aeabi_dcmpgt>
 8003046:	2800      	cmp	r0, #0
 8003048:	d04f      	beq.n	80030ea <_dtoa_r+0x222>
 800304a:	2300      	movs	r3, #0
 800304c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8003050:	930d      	str	r3, [sp, #52]	; 0x34
 8003052:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003054:	1b5d      	subs	r5, r3, r5
 8003056:	1e6b      	subs	r3, r5, #1
 8003058:	9307      	str	r3, [sp, #28]
 800305a:	bf43      	ittte	mi
 800305c:	2300      	movmi	r3, #0
 800305e:	f1c5 0801 	rsbmi	r8, r5, #1
 8003062:	9307      	strmi	r3, [sp, #28]
 8003064:	f04f 0800 	movpl.w	r8, #0
 8003068:	f1bb 0f00 	cmp.w	fp, #0
 800306c:	db3f      	blt.n	80030ee <_dtoa_r+0x226>
 800306e:	9b07      	ldr	r3, [sp, #28]
 8003070:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8003074:	445b      	add	r3, fp
 8003076:	9307      	str	r3, [sp, #28]
 8003078:	2300      	movs	r3, #0
 800307a:	9308      	str	r3, [sp, #32]
 800307c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800307e:	2b09      	cmp	r3, #9
 8003080:	f200 80b4 	bhi.w	80031ec <_dtoa_r+0x324>
 8003084:	2b05      	cmp	r3, #5
 8003086:	bfc4      	itt	gt
 8003088:	3b04      	subgt	r3, #4
 800308a:	931e      	strgt	r3, [sp, #120]	; 0x78
 800308c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800308e:	bfc8      	it	gt
 8003090:	2600      	movgt	r6, #0
 8003092:	f1a3 0302 	sub.w	r3, r3, #2
 8003096:	bfd8      	it	le
 8003098:	2601      	movle	r6, #1
 800309a:	2b03      	cmp	r3, #3
 800309c:	f200 80b2 	bhi.w	8003204 <_dtoa_r+0x33c>
 80030a0:	e8df f003 	tbb	[pc, r3]
 80030a4:	782d8684 	.word	0x782d8684
 80030a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80030aa:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80030ac:	441d      	add	r5, r3
 80030ae:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80030b2:	2b20      	cmp	r3, #32
 80030b4:	dd11      	ble.n	80030da <_dtoa_r+0x212>
 80030b6:	9a02      	ldr	r2, [sp, #8]
 80030b8:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80030bc:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80030c0:	fa22 f000 	lsr.w	r0, r2, r0
 80030c4:	fa09 f303 	lsl.w	r3, r9, r3
 80030c8:	4318      	orrs	r0, r3
 80030ca:	f7fd f98b 	bl	80003e4 <__aeabi_ui2d>
 80030ce:	2301      	movs	r3, #1
 80030d0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80030d4:	3d01      	subs	r5, #1
 80030d6:	9310      	str	r3, [sp, #64]	; 0x40
 80030d8:	e773      	b.n	8002fc2 <_dtoa_r+0xfa>
 80030da:	f1c3 0020 	rsb	r0, r3, #32
 80030de:	9b02      	ldr	r3, [sp, #8]
 80030e0:	fa03 f000 	lsl.w	r0, r3, r0
 80030e4:	e7f1      	b.n	80030ca <_dtoa_r+0x202>
 80030e6:	2301      	movs	r3, #1
 80030e8:	e7b2      	b.n	8003050 <_dtoa_r+0x188>
 80030ea:	900d      	str	r0, [sp, #52]	; 0x34
 80030ec:	e7b1      	b.n	8003052 <_dtoa_r+0x18a>
 80030ee:	f1cb 0300 	rsb	r3, fp, #0
 80030f2:	9308      	str	r3, [sp, #32]
 80030f4:	2300      	movs	r3, #0
 80030f6:	eba8 080b 	sub.w	r8, r8, fp
 80030fa:	930c      	str	r3, [sp, #48]	; 0x30
 80030fc:	e7be      	b.n	800307c <_dtoa_r+0x1b4>
 80030fe:	2301      	movs	r3, #1
 8003100:	9309      	str	r3, [sp, #36]	; 0x24
 8003102:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003104:	2b00      	cmp	r3, #0
 8003106:	f340 8080 	ble.w	800320a <_dtoa_r+0x342>
 800310a:	4699      	mov	r9, r3
 800310c:	9304      	str	r3, [sp, #16]
 800310e:	2200      	movs	r2, #0
 8003110:	2104      	movs	r1, #4
 8003112:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003114:	606a      	str	r2, [r5, #4]
 8003116:	f101 0214 	add.w	r2, r1, #20
 800311a:	429a      	cmp	r2, r3
 800311c:	d97a      	bls.n	8003214 <_dtoa_r+0x34c>
 800311e:	6869      	ldr	r1, [r5, #4]
 8003120:	4620      	mov	r0, r4
 8003122:	f000 fcd4 	bl	8003ace <_Balloc>
 8003126:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003128:	6028      	str	r0, [r5, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f1b9 0f0e 	cmp.w	r9, #14
 8003130:	9306      	str	r3, [sp, #24]
 8003132:	f200 80f0 	bhi.w	8003316 <_dtoa_r+0x44e>
 8003136:	2e00      	cmp	r6, #0
 8003138:	f000 80ed 	beq.w	8003316 <_dtoa_r+0x44e>
 800313c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003140:	f1bb 0f00 	cmp.w	fp, #0
 8003144:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8003148:	dd79      	ble.n	800323e <_dtoa_r+0x376>
 800314a:	4a26      	ldr	r2, [pc, #152]	; (80031e4 <_dtoa_r+0x31c>)
 800314c:	f00b 030f 	and.w	r3, fp, #15
 8003150:	ea4f 162b 	mov.w	r6, fp, asr #4
 8003154:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003158:	06f0      	lsls	r0, r6, #27
 800315a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800315e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003162:	d55c      	bpl.n	800321e <_dtoa_r+0x356>
 8003164:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003168:	4b1f      	ldr	r3, [pc, #124]	; (80031e8 <_dtoa_r+0x320>)
 800316a:	2503      	movs	r5, #3
 800316c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003170:	f7fd fad8 	bl	8000724 <__aeabi_ddiv>
 8003174:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003178:	f006 060f 	and.w	r6, r6, #15
 800317c:	4f1a      	ldr	r7, [pc, #104]	; (80031e8 <_dtoa_r+0x320>)
 800317e:	2e00      	cmp	r6, #0
 8003180:	d14f      	bne.n	8003222 <_dtoa_r+0x35a>
 8003182:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003186:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800318a:	f7fd facb 	bl	8000724 <__aeabi_ddiv>
 800318e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003192:	e06e      	b.n	8003272 <_dtoa_r+0x3aa>
 8003194:	2301      	movs	r3, #1
 8003196:	9309      	str	r3, [sp, #36]	; 0x24
 8003198:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800319a:	445b      	add	r3, fp
 800319c:	f103 0901 	add.w	r9, r3, #1
 80031a0:	9304      	str	r3, [sp, #16]
 80031a2:	464b      	mov	r3, r9
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	bfb8      	it	lt
 80031a8:	2301      	movlt	r3, #1
 80031aa:	e7b0      	b.n	800310e <_dtoa_r+0x246>
 80031ac:	2300      	movs	r3, #0
 80031ae:	e7a7      	b.n	8003100 <_dtoa_r+0x238>
 80031b0:	2300      	movs	r3, #0
 80031b2:	e7f0      	b.n	8003196 <_dtoa_r+0x2ce>
 80031b4:	f3af 8000 	nop.w
 80031b8:	636f4361 	.word	0x636f4361
 80031bc:	3fd287a7 	.word	0x3fd287a7
 80031c0:	8b60c8b3 	.word	0x8b60c8b3
 80031c4:	3fc68a28 	.word	0x3fc68a28
 80031c8:	509f79fb 	.word	0x509f79fb
 80031cc:	3fd34413 	.word	0x3fd34413
 80031d0:	7ff00000 	.word	0x7ff00000
 80031d4:	08004628 	.word	0x08004628
 80031d8:	0800461f 	.word	0x0800461f
 80031dc:	080045fc 	.word	0x080045fc
 80031e0:	3ff80000 	.word	0x3ff80000
 80031e4:	08004658 	.word	0x08004658
 80031e8:	08004630 	.word	0x08004630
 80031ec:	2601      	movs	r6, #1
 80031ee:	2300      	movs	r3, #0
 80031f0:	9609      	str	r6, [sp, #36]	; 0x24
 80031f2:	931e      	str	r3, [sp, #120]	; 0x78
 80031f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80031f8:	2200      	movs	r2, #0
 80031fa:	9304      	str	r3, [sp, #16]
 80031fc:	4699      	mov	r9, r3
 80031fe:	2312      	movs	r3, #18
 8003200:	921f      	str	r2, [sp, #124]	; 0x7c
 8003202:	e784      	b.n	800310e <_dtoa_r+0x246>
 8003204:	2301      	movs	r3, #1
 8003206:	9309      	str	r3, [sp, #36]	; 0x24
 8003208:	e7f4      	b.n	80031f4 <_dtoa_r+0x32c>
 800320a:	2301      	movs	r3, #1
 800320c:	9304      	str	r3, [sp, #16]
 800320e:	4699      	mov	r9, r3
 8003210:	461a      	mov	r2, r3
 8003212:	e7f5      	b.n	8003200 <_dtoa_r+0x338>
 8003214:	686a      	ldr	r2, [r5, #4]
 8003216:	0049      	lsls	r1, r1, #1
 8003218:	3201      	adds	r2, #1
 800321a:	606a      	str	r2, [r5, #4]
 800321c:	e77b      	b.n	8003116 <_dtoa_r+0x24e>
 800321e:	2502      	movs	r5, #2
 8003220:	e7ac      	b.n	800317c <_dtoa_r+0x2b4>
 8003222:	07f1      	lsls	r1, r6, #31
 8003224:	d508      	bpl.n	8003238 <_dtoa_r+0x370>
 8003226:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800322a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800322e:	f7fd f94f 	bl	80004d0 <__aeabi_dmul>
 8003232:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003236:	3501      	adds	r5, #1
 8003238:	1076      	asrs	r6, r6, #1
 800323a:	3708      	adds	r7, #8
 800323c:	e79f      	b.n	800317e <_dtoa_r+0x2b6>
 800323e:	f000 80a5 	beq.w	800338c <_dtoa_r+0x4c4>
 8003242:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003246:	f1cb 0600 	rsb	r6, fp, #0
 800324a:	4ba2      	ldr	r3, [pc, #648]	; (80034d4 <_dtoa_r+0x60c>)
 800324c:	f006 020f 	and.w	r2, r6, #15
 8003250:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003258:	f7fd f93a 	bl	80004d0 <__aeabi_dmul>
 800325c:	2502      	movs	r5, #2
 800325e:	2300      	movs	r3, #0
 8003260:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003264:	4f9c      	ldr	r7, [pc, #624]	; (80034d8 <_dtoa_r+0x610>)
 8003266:	1136      	asrs	r6, r6, #4
 8003268:	2e00      	cmp	r6, #0
 800326a:	f040 8084 	bne.w	8003376 <_dtoa_r+0x4ae>
 800326e:	2b00      	cmp	r3, #0
 8003270:	d18d      	bne.n	800318e <_dtoa_r+0x2c6>
 8003272:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003274:	2b00      	cmp	r3, #0
 8003276:	f000 808b 	beq.w	8003390 <_dtoa_r+0x4c8>
 800327a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800327e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003282:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003286:	2200      	movs	r2, #0
 8003288:	4b94      	ldr	r3, [pc, #592]	; (80034dc <_dtoa_r+0x614>)
 800328a:	f7fd fb93 	bl	80009b4 <__aeabi_dcmplt>
 800328e:	2800      	cmp	r0, #0
 8003290:	d07e      	beq.n	8003390 <_dtoa_r+0x4c8>
 8003292:	f1b9 0f00 	cmp.w	r9, #0
 8003296:	d07b      	beq.n	8003390 <_dtoa_r+0x4c8>
 8003298:	9b04      	ldr	r3, [sp, #16]
 800329a:	2b00      	cmp	r3, #0
 800329c:	dd37      	ble.n	800330e <_dtoa_r+0x446>
 800329e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80032a2:	2200      	movs	r2, #0
 80032a4:	4b8e      	ldr	r3, [pc, #568]	; (80034e0 <_dtoa_r+0x618>)
 80032a6:	f7fd f913 	bl	80004d0 <__aeabi_dmul>
 80032aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80032ae:	9e04      	ldr	r6, [sp, #16]
 80032b0:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 80032b4:	3501      	adds	r5, #1
 80032b6:	4628      	mov	r0, r5
 80032b8:	f7fd f8a4 	bl	8000404 <__aeabi_i2d>
 80032bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80032c0:	f7fd f906 	bl	80004d0 <__aeabi_dmul>
 80032c4:	4b87      	ldr	r3, [pc, #540]	; (80034e4 <_dtoa_r+0x61c>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	f7fc ff50 	bl	800016c <__adddf3>
 80032cc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80032d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80032d2:	f1a3 7550 	sub.w	r5, r3, #54525952	; 0x3400000
 80032d6:	950b      	str	r5, [sp, #44]	; 0x2c
 80032d8:	2e00      	cmp	r6, #0
 80032da:	d15c      	bne.n	8003396 <_dtoa_r+0x4ce>
 80032dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80032e0:	2200      	movs	r2, #0
 80032e2:	4b81      	ldr	r3, [pc, #516]	; (80034e8 <_dtoa_r+0x620>)
 80032e4:	f7fc ff40 	bl	8000168 <__aeabi_dsub>
 80032e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80032ea:	462b      	mov	r3, r5
 80032ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80032f0:	f7fd fb7e 	bl	80009f0 <__aeabi_dcmpgt>
 80032f4:	2800      	cmp	r0, #0
 80032f6:	f040 82f7 	bne.w	80038e8 <_dtoa_r+0xa20>
 80032fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80032fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003300:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8003304:	f7fd fb56 	bl	80009b4 <__aeabi_dcmplt>
 8003308:	2800      	cmp	r0, #0
 800330a:	f040 82eb 	bne.w	80038e4 <_dtoa_r+0xa1c>
 800330e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8003312:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003316:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003318:	2b00      	cmp	r3, #0
 800331a:	f2c0 8150 	blt.w	80035be <_dtoa_r+0x6f6>
 800331e:	f1bb 0f0e 	cmp.w	fp, #14
 8003322:	f300 814c 	bgt.w	80035be <_dtoa_r+0x6f6>
 8003326:	4b6b      	ldr	r3, [pc, #428]	; (80034d4 <_dtoa_r+0x60c>)
 8003328:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800332c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003330:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003334:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003336:	2b00      	cmp	r3, #0
 8003338:	f280 80da 	bge.w	80034f0 <_dtoa_r+0x628>
 800333c:	f1b9 0f00 	cmp.w	r9, #0
 8003340:	f300 80d6 	bgt.w	80034f0 <_dtoa_r+0x628>
 8003344:	f040 82cd 	bne.w	80038e2 <_dtoa_r+0xa1a>
 8003348:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800334c:	2200      	movs	r2, #0
 800334e:	4b66      	ldr	r3, [pc, #408]	; (80034e8 <_dtoa_r+0x620>)
 8003350:	f7fd f8be 	bl	80004d0 <__aeabi_dmul>
 8003354:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003358:	f7fd fb40 	bl	80009dc <__aeabi_dcmpge>
 800335c:	464e      	mov	r6, r9
 800335e:	464f      	mov	r7, r9
 8003360:	2800      	cmp	r0, #0
 8003362:	f040 82a4 	bne.w	80038ae <_dtoa_r+0x9e6>
 8003366:	9b06      	ldr	r3, [sp, #24]
 8003368:	9a06      	ldr	r2, [sp, #24]
 800336a:	1c5d      	adds	r5, r3, #1
 800336c:	2331      	movs	r3, #49	; 0x31
 800336e:	f10b 0b01 	add.w	fp, fp, #1
 8003372:	7013      	strb	r3, [r2, #0]
 8003374:	e29f      	b.n	80038b6 <_dtoa_r+0x9ee>
 8003376:	07f2      	lsls	r2, r6, #31
 8003378:	d505      	bpl.n	8003386 <_dtoa_r+0x4be>
 800337a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800337e:	f7fd f8a7 	bl	80004d0 <__aeabi_dmul>
 8003382:	2301      	movs	r3, #1
 8003384:	3501      	adds	r5, #1
 8003386:	1076      	asrs	r6, r6, #1
 8003388:	3708      	adds	r7, #8
 800338a:	e76d      	b.n	8003268 <_dtoa_r+0x3a0>
 800338c:	2502      	movs	r5, #2
 800338e:	e770      	b.n	8003272 <_dtoa_r+0x3aa>
 8003390:	465f      	mov	r7, fp
 8003392:	464e      	mov	r6, r9
 8003394:	e78f      	b.n	80032b6 <_dtoa_r+0x3ee>
 8003396:	9a06      	ldr	r2, [sp, #24]
 8003398:	4b4e      	ldr	r3, [pc, #312]	; (80034d4 <_dtoa_r+0x60c>)
 800339a:	4432      	add	r2, r6
 800339c:	9211      	str	r2, [sp, #68]	; 0x44
 800339e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80033a0:	1e71      	subs	r1, r6, #1
 80033a2:	2a00      	cmp	r2, #0
 80033a4:	d048      	beq.n	8003438 <_dtoa_r+0x570>
 80033a6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80033aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ae:	2000      	movs	r0, #0
 80033b0:	494e      	ldr	r1, [pc, #312]	; (80034ec <_dtoa_r+0x624>)
 80033b2:	f7fd f9b7 	bl	8000724 <__aeabi_ddiv>
 80033b6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80033ba:	f7fc fed5 	bl	8000168 <__aeabi_dsub>
 80033be:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80033c2:	9d06      	ldr	r5, [sp, #24]
 80033c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80033c8:	f7fd fb32 	bl	8000a30 <__aeabi_d2iz>
 80033cc:	4606      	mov	r6, r0
 80033ce:	f7fd f819 	bl	8000404 <__aeabi_i2d>
 80033d2:	4602      	mov	r2, r0
 80033d4:	460b      	mov	r3, r1
 80033d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80033da:	f7fc fec5 	bl	8000168 <__aeabi_dsub>
 80033de:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80033e2:	3630      	adds	r6, #48	; 0x30
 80033e4:	f805 6b01 	strb.w	r6, [r5], #1
 80033e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80033ec:	f7fd fae2 	bl	80009b4 <__aeabi_dcmplt>
 80033f0:	2800      	cmp	r0, #0
 80033f2:	d164      	bne.n	80034be <_dtoa_r+0x5f6>
 80033f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80033f8:	2000      	movs	r0, #0
 80033fa:	4938      	ldr	r1, [pc, #224]	; (80034dc <_dtoa_r+0x614>)
 80033fc:	f7fc feb4 	bl	8000168 <__aeabi_dsub>
 8003400:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003404:	f7fd fad6 	bl	80009b4 <__aeabi_dcmplt>
 8003408:	2800      	cmp	r0, #0
 800340a:	f040 80b9 	bne.w	8003580 <_dtoa_r+0x6b8>
 800340e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003410:	429d      	cmp	r5, r3
 8003412:	f43f af7c 	beq.w	800330e <_dtoa_r+0x446>
 8003416:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800341a:	2200      	movs	r2, #0
 800341c:	4b30      	ldr	r3, [pc, #192]	; (80034e0 <_dtoa_r+0x618>)
 800341e:	f7fd f857 	bl	80004d0 <__aeabi_dmul>
 8003422:	2200      	movs	r2, #0
 8003424:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003428:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800342c:	4b2c      	ldr	r3, [pc, #176]	; (80034e0 <_dtoa_r+0x618>)
 800342e:	f7fd f84f 	bl	80004d0 <__aeabi_dmul>
 8003432:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003436:	e7c5      	b.n	80033c4 <_dtoa_r+0x4fc>
 8003438:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800343c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003440:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003444:	f7fd f844 	bl	80004d0 <__aeabi_dmul>
 8003448:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800344c:	9d06      	ldr	r5, [sp, #24]
 800344e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003452:	f7fd faed 	bl	8000a30 <__aeabi_d2iz>
 8003456:	4606      	mov	r6, r0
 8003458:	f7fc ffd4 	bl	8000404 <__aeabi_i2d>
 800345c:	4602      	mov	r2, r0
 800345e:	460b      	mov	r3, r1
 8003460:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003464:	f7fc fe80 	bl	8000168 <__aeabi_dsub>
 8003468:	3630      	adds	r6, #48	; 0x30
 800346a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800346c:	f805 6b01 	strb.w	r6, [r5], #1
 8003470:	42ab      	cmp	r3, r5
 8003472:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003476:	f04f 0200 	mov.w	r2, #0
 800347a:	d124      	bne.n	80034c6 <_dtoa_r+0x5fe>
 800347c:	4b1b      	ldr	r3, [pc, #108]	; (80034ec <_dtoa_r+0x624>)
 800347e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003482:	f7fc fe73 	bl	800016c <__adddf3>
 8003486:	4602      	mov	r2, r0
 8003488:	460b      	mov	r3, r1
 800348a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800348e:	f7fd faaf 	bl	80009f0 <__aeabi_dcmpgt>
 8003492:	2800      	cmp	r0, #0
 8003494:	d174      	bne.n	8003580 <_dtoa_r+0x6b8>
 8003496:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800349a:	2000      	movs	r0, #0
 800349c:	4913      	ldr	r1, [pc, #76]	; (80034ec <_dtoa_r+0x624>)
 800349e:	f7fc fe63 	bl	8000168 <__aeabi_dsub>
 80034a2:	4602      	mov	r2, r0
 80034a4:	460b      	mov	r3, r1
 80034a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80034aa:	f7fd fa83 	bl	80009b4 <__aeabi_dcmplt>
 80034ae:	2800      	cmp	r0, #0
 80034b0:	f43f af2d 	beq.w	800330e <_dtoa_r+0x446>
 80034b4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80034b8:	1e6a      	subs	r2, r5, #1
 80034ba:	2b30      	cmp	r3, #48	; 0x30
 80034bc:	d001      	beq.n	80034c2 <_dtoa_r+0x5fa>
 80034be:	46bb      	mov	fp, r7
 80034c0:	e04d      	b.n	800355e <_dtoa_r+0x696>
 80034c2:	4615      	mov	r5, r2
 80034c4:	e7f6      	b.n	80034b4 <_dtoa_r+0x5ec>
 80034c6:	4b06      	ldr	r3, [pc, #24]	; (80034e0 <_dtoa_r+0x618>)
 80034c8:	f7fd f802 	bl	80004d0 <__aeabi_dmul>
 80034cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80034d0:	e7bd      	b.n	800344e <_dtoa_r+0x586>
 80034d2:	bf00      	nop
 80034d4:	08004658 	.word	0x08004658
 80034d8:	08004630 	.word	0x08004630
 80034dc:	3ff00000 	.word	0x3ff00000
 80034e0:	40240000 	.word	0x40240000
 80034e4:	401c0000 	.word	0x401c0000
 80034e8:	40140000 	.word	0x40140000
 80034ec:	3fe00000 	.word	0x3fe00000
 80034f0:	9d06      	ldr	r5, [sp, #24]
 80034f2:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80034f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80034fa:	4630      	mov	r0, r6
 80034fc:	4639      	mov	r1, r7
 80034fe:	f7fd f911 	bl	8000724 <__aeabi_ddiv>
 8003502:	f7fd fa95 	bl	8000a30 <__aeabi_d2iz>
 8003506:	4680      	mov	r8, r0
 8003508:	f7fc ff7c 	bl	8000404 <__aeabi_i2d>
 800350c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003510:	f7fc ffde 	bl	80004d0 <__aeabi_dmul>
 8003514:	4602      	mov	r2, r0
 8003516:	460b      	mov	r3, r1
 8003518:	4630      	mov	r0, r6
 800351a:	4639      	mov	r1, r7
 800351c:	f7fc fe24 	bl	8000168 <__aeabi_dsub>
 8003520:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8003524:	f805 6b01 	strb.w	r6, [r5], #1
 8003528:	9e06      	ldr	r6, [sp, #24]
 800352a:	4602      	mov	r2, r0
 800352c:	1bae      	subs	r6, r5, r6
 800352e:	45b1      	cmp	r9, r6
 8003530:	460b      	mov	r3, r1
 8003532:	d137      	bne.n	80035a4 <_dtoa_r+0x6dc>
 8003534:	f7fc fe1a 	bl	800016c <__adddf3>
 8003538:	4606      	mov	r6, r0
 800353a:	460f      	mov	r7, r1
 800353c:	4602      	mov	r2, r0
 800353e:	460b      	mov	r3, r1
 8003540:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003544:	f7fd fa36 	bl	80009b4 <__aeabi_dcmplt>
 8003548:	b9c8      	cbnz	r0, 800357e <_dtoa_r+0x6b6>
 800354a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800354e:	4632      	mov	r2, r6
 8003550:	463b      	mov	r3, r7
 8003552:	f7fd fa25 	bl	80009a0 <__aeabi_dcmpeq>
 8003556:	b110      	cbz	r0, 800355e <_dtoa_r+0x696>
 8003558:	f018 0f01 	tst.w	r8, #1
 800355c:	d10f      	bne.n	800357e <_dtoa_r+0x6b6>
 800355e:	4651      	mov	r1, sl
 8003560:	4620      	mov	r0, r4
 8003562:	f000 fae8 	bl	8003b36 <_Bfree>
 8003566:	2300      	movs	r3, #0
 8003568:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800356a:	702b      	strb	r3, [r5, #0]
 800356c:	f10b 0301 	add.w	r3, fp, #1
 8003570:	6013      	str	r3, [r2, #0]
 8003572:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003574:	2b00      	cmp	r3, #0
 8003576:	f43f acec 	beq.w	8002f52 <_dtoa_r+0x8a>
 800357a:	601d      	str	r5, [r3, #0]
 800357c:	e4e9      	b.n	8002f52 <_dtoa_r+0x8a>
 800357e:	465f      	mov	r7, fp
 8003580:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8003584:	1e6b      	subs	r3, r5, #1
 8003586:	2a39      	cmp	r2, #57	; 0x39
 8003588:	d106      	bne.n	8003598 <_dtoa_r+0x6d0>
 800358a:	9a06      	ldr	r2, [sp, #24]
 800358c:	429a      	cmp	r2, r3
 800358e:	d107      	bne.n	80035a0 <_dtoa_r+0x6d8>
 8003590:	2330      	movs	r3, #48	; 0x30
 8003592:	7013      	strb	r3, [r2, #0]
 8003594:	4613      	mov	r3, r2
 8003596:	3701      	adds	r7, #1
 8003598:	781a      	ldrb	r2, [r3, #0]
 800359a:	3201      	adds	r2, #1
 800359c:	701a      	strb	r2, [r3, #0]
 800359e:	e78e      	b.n	80034be <_dtoa_r+0x5f6>
 80035a0:	461d      	mov	r5, r3
 80035a2:	e7ed      	b.n	8003580 <_dtoa_r+0x6b8>
 80035a4:	2200      	movs	r2, #0
 80035a6:	4bb5      	ldr	r3, [pc, #724]	; (800387c <_dtoa_r+0x9b4>)
 80035a8:	f7fc ff92 	bl	80004d0 <__aeabi_dmul>
 80035ac:	2200      	movs	r2, #0
 80035ae:	2300      	movs	r3, #0
 80035b0:	4606      	mov	r6, r0
 80035b2:	460f      	mov	r7, r1
 80035b4:	f7fd f9f4 	bl	80009a0 <__aeabi_dcmpeq>
 80035b8:	2800      	cmp	r0, #0
 80035ba:	d09c      	beq.n	80034f6 <_dtoa_r+0x62e>
 80035bc:	e7cf      	b.n	800355e <_dtoa_r+0x696>
 80035be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80035c0:	2a00      	cmp	r2, #0
 80035c2:	f000 8129 	beq.w	8003818 <_dtoa_r+0x950>
 80035c6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80035c8:	2a01      	cmp	r2, #1
 80035ca:	f300 810e 	bgt.w	80037ea <_dtoa_r+0x922>
 80035ce:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80035d0:	2a00      	cmp	r2, #0
 80035d2:	f000 8106 	beq.w	80037e2 <_dtoa_r+0x91a>
 80035d6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80035da:	4645      	mov	r5, r8
 80035dc:	9e08      	ldr	r6, [sp, #32]
 80035de:	9a07      	ldr	r2, [sp, #28]
 80035e0:	2101      	movs	r1, #1
 80035e2:	441a      	add	r2, r3
 80035e4:	4620      	mov	r0, r4
 80035e6:	4498      	add	r8, r3
 80035e8:	9207      	str	r2, [sp, #28]
 80035ea:	f000 fb44 	bl	8003c76 <__i2b>
 80035ee:	4607      	mov	r7, r0
 80035f0:	2d00      	cmp	r5, #0
 80035f2:	dd0b      	ble.n	800360c <_dtoa_r+0x744>
 80035f4:	9b07      	ldr	r3, [sp, #28]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	dd08      	ble.n	800360c <_dtoa_r+0x744>
 80035fa:	42ab      	cmp	r3, r5
 80035fc:	bfa8      	it	ge
 80035fe:	462b      	movge	r3, r5
 8003600:	9a07      	ldr	r2, [sp, #28]
 8003602:	eba8 0803 	sub.w	r8, r8, r3
 8003606:	1aed      	subs	r5, r5, r3
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	9307      	str	r3, [sp, #28]
 800360c:	9b08      	ldr	r3, [sp, #32]
 800360e:	b1fb      	cbz	r3, 8003650 <_dtoa_r+0x788>
 8003610:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003612:	2b00      	cmp	r3, #0
 8003614:	f000 8104 	beq.w	8003820 <_dtoa_r+0x958>
 8003618:	2e00      	cmp	r6, #0
 800361a:	dd11      	ble.n	8003640 <_dtoa_r+0x778>
 800361c:	4639      	mov	r1, r7
 800361e:	4632      	mov	r2, r6
 8003620:	4620      	mov	r0, r4
 8003622:	f000 fbbd 	bl	8003da0 <__pow5mult>
 8003626:	4652      	mov	r2, sl
 8003628:	4601      	mov	r1, r0
 800362a:	4607      	mov	r7, r0
 800362c:	4620      	mov	r0, r4
 800362e:	f000 fb2b 	bl	8003c88 <__multiply>
 8003632:	4651      	mov	r1, sl
 8003634:	900a      	str	r0, [sp, #40]	; 0x28
 8003636:	4620      	mov	r0, r4
 8003638:	f000 fa7d 	bl	8003b36 <_Bfree>
 800363c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800363e:	469a      	mov	sl, r3
 8003640:	9b08      	ldr	r3, [sp, #32]
 8003642:	1b9a      	subs	r2, r3, r6
 8003644:	d004      	beq.n	8003650 <_dtoa_r+0x788>
 8003646:	4651      	mov	r1, sl
 8003648:	4620      	mov	r0, r4
 800364a:	f000 fba9 	bl	8003da0 <__pow5mult>
 800364e:	4682      	mov	sl, r0
 8003650:	2101      	movs	r1, #1
 8003652:	4620      	mov	r0, r4
 8003654:	f000 fb0f 	bl	8003c76 <__i2b>
 8003658:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800365a:	4606      	mov	r6, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	f340 80e1 	ble.w	8003824 <_dtoa_r+0x95c>
 8003662:	461a      	mov	r2, r3
 8003664:	4601      	mov	r1, r0
 8003666:	4620      	mov	r0, r4
 8003668:	f000 fb9a 	bl	8003da0 <__pow5mult>
 800366c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800366e:	4606      	mov	r6, r0
 8003670:	2b01      	cmp	r3, #1
 8003672:	f340 80da 	ble.w	800382a <_dtoa_r+0x962>
 8003676:	2300      	movs	r3, #0
 8003678:	9308      	str	r3, [sp, #32]
 800367a:	6933      	ldr	r3, [r6, #16]
 800367c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8003680:	6918      	ldr	r0, [r3, #16]
 8003682:	f000 faaa 	bl	8003bda <__hi0bits>
 8003686:	f1c0 0020 	rsb	r0, r0, #32
 800368a:	9b07      	ldr	r3, [sp, #28]
 800368c:	4418      	add	r0, r3
 800368e:	f010 001f 	ands.w	r0, r0, #31
 8003692:	f000 80f0 	beq.w	8003876 <_dtoa_r+0x9ae>
 8003696:	f1c0 0320 	rsb	r3, r0, #32
 800369a:	2b04      	cmp	r3, #4
 800369c:	f340 80e2 	ble.w	8003864 <_dtoa_r+0x99c>
 80036a0:	9b07      	ldr	r3, [sp, #28]
 80036a2:	f1c0 001c 	rsb	r0, r0, #28
 80036a6:	4480      	add	r8, r0
 80036a8:	4405      	add	r5, r0
 80036aa:	4403      	add	r3, r0
 80036ac:	9307      	str	r3, [sp, #28]
 80036ae:	f1b8 0f00 	cmp.w	r8, #0
 80036b2:	dd05      	ble.n	80036c0 <_dtoa_r+0x7f8>
 80036b4:	4651      	mov	r1, sl
 80036b6:	4642      	mov	r2, r8
 80036b8:	4620      	mov	r0, r4
 80036ba:	f000 fbbf 	bl	8003e3c <__lshift>
 80036be:	4682      	mov	sl, r0
 80036c0:	9b07      	ldr	r3, [sp, #28]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	dd05      	ble.n	80036d2 <_dtoa_r+0x80a>
 80036c6:	4631      	mov	r1, r6
 80036c8:	461a      	mov	r2, r3
 80036ca:	4620      	mov	r0, r4
 80036cc:	f000 fbb6 	bl	8003e3c <__lshift>
 80036d0:	4606      	mov	r6, r0
 80036d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	f000 80d3 	beq.w	8003880 <_dtoa_r+0x9b8>
 80036da:	4631      	mov	r1, r6
 80036dc:	4650      	mov	r0, sl
 80036de:	f000 fbfe 	bl	8003ede <__mcmp>
 80036e2:	2800      	cmp	r0, #0
 80036e4:	f280 80cc 	bge.w	8003880 <_dtoa_r+0x9b8>
 80036e8:	2300      	movs	r3, #0
 80036ea:	4651      	mov	r1, sl
 80036ec:	220a      	movs	r2, #10
 80036ee:	4620      	mov	r0, r4
 80036f0:	f000 fa38 	bl	8003b64 <__multadd>
 80036f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80036f6:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80036fa:	4682      	mov	sl, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	f000 81a9 	beq.w	8003a54 <_dtoa_r+0xb8c>
 8003702:	2300      	movs	r3, #0
 8003704:	4639      	mov	r1, r7
 8003706:	220a      	movs	r2, #10
 8003708:	4620      	mov	r0, r4
 800370a:	f000 fa2b 	bl	8003b64 <__multadd>
 800370e:	9b04      	ldr	r3, [sp, #16]
 8003710:	4607      	mov	r7, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	dc03      	bgt.n	800371e <_dtoa_r+0x856>
 8003716:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003718:	2b02      	cmp	r3, #2
 800371a:	f300 80b9 	bgt.w	8003890 <_dtoa_r+0x9c8>
 800371e:	2d00      	cmp	r5, #0
 8003720:	dd05      	ble.n	800372e <_dtoa_r+0x866>
 8003722:	4639      	mov	r1, r7
 8003724:	462a      	mov	r2, r5
 8003726:	4620      	mov	r0, r4
 8003728:	f000 fb88 	bl	8003e3c <__lshift>
 800372c:	4607      	mov	r7, r0
 800372e:	9b08      	ldr	r3, [sp, #32]
 8003730:	2b00      	cmp	r3, #0
 8003732:	f000 8110 	beq.w	8003956 <_dtoa_r+0xa8e>
 8003736:	6879      	ldr	r1, [r7, #4]
 8003738:	4620      	mov	r0, r4
 800373a:	f000 f9c8 	bl	8003ace <_Balloc>
 800373e:	4605      	mov	r5, r0
 8003740:	693a      	ldr	r2, [r7, #16]
 8003742:	f107 010c 	add.w	r1, r7, #12
 8003746:	3202      	adds	r2, #2
 8003748:	0092      	lsls	r2, r2, #2
 800374a:	300c      	adds	r0, #12
 800374c:	f000 f9b4 	bl	8003ab8 <memcpy>
 8003750:	2201      	movs	r2, #1
 8003752:	4629      	mov	r1, r5
 8003754:	4620      	mov	r0, r4
 8003756:	f000 fb71 	bl	8003e3c <__lshift>
 800375a:	9707      	str	r7, [sp, #28]
 800375c:	4607      	mov	r7, r0
 800375e:	9b02      	ldr	r3, [sp, #8]
 8003760:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8003764:	f003 0301 	and.w	r3, r3, #1
 8003768:	9308      	str	r3, [sp, #32]
 800376a:	4631      	mov	r1, r6
 800376c:	4650      	mov	r0, sl
 800376e:	f7ff fb1d 	bl	8002dac <quorem>
 8003772:	9907      	ldr	r1, [sp, #28]
 8003774:	4605      	mov	r5, r0
 8003776:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800377a:	4650      	mov	r0, sl
 800377c:	f000 fbaf 	bl	8003ede <__mcmp>
 8003780:	463a      	mov	r2, r7
 8003782:	9002      	str	r0, [sp, #8]
 8003784:	4631      	mov	r1, r6
 8003786:	4620      	mov	r0, r4
 8003788:	f000 fbc3 	bl	8003f12 <__mdiff>
 800378c:	68c3      	ldr	r3, [r0, #12]
 800378e:	4602      	mov	r2, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	f040 80e2 	bne.w	800395a <_dtoa_r+0xa92>
 8003796:	4601      	mov	r1, r0
 8003798:	9009      	str	r0, [sp, #36]	; 0x24
 800379a:	4650      	mov	r0, sl
 800379c:	f000 fb9f 	bl	8003ede <__mcmp>
 80037a0:	4603      	mov	r3, r0
 80037a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80037a4:	4611      	mov	r1, r2
 80037a6:	4620      	mov	r0, r4
 80037a8:	9309      	str	r3, [sp, #36]	; 0x24
 80037aa:	f000 f9c4 	bl	8003b36 <_Bfree>
 80037ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	f040 80d4 	bne.w	800395e <_dtoa_r+0xa96>
 80037b6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80037b8:	2a00      	cmp	r2, #0
 80037ba:	f040 80d0 	bne.w	800395e <_dtoa_r+0xa96>
 80037be:	9a08      	ldr	r2, [sp, #32]
 80037c0:	2a00      	cmp	r2, #0
 80037c2:	f040 80cc 	bne.w	800395e <_dtoa_r+0xa96>
 80037c6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80037ca:	f000 80e8 	beq.w	800399e <_dtoa_r+0xad6>
 80037ce:	9b02      	ldr	r3, [sp, #8]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	dd01      	ble.n	80037d8 <_dtoa_r+0x910>
 80037d4:	f105 0931 	add.w	r9, r5, #49	; 0x31
 80037d8:	f108 0501 	add.w	r5, r8, #1
 80037dc:	f888 9000 	strb.w	r9, [r8]
 80037e0:	e06b      	b.n	80038ba <_dtoa_r+0x9f2>
 80037e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80037e4:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80037e8:	e6f7      	b.n	80035da <_dtoa_r+0x712>
 80037ea:	9b08      	ldr	r3, [sp, #32]
 80037ec:	f109 36ff 	add.w	r6, r9, #4294967295	; 0xffffffff
 80037f0:	42b3      	cmp	r3, r6
 80037f2:	bfb7      	itett	lt
 80037f4:	9b08      	ldrlt	r3, [sp, #32]
 80037f6:	1b9e      	subge	r6, r3, r6
 80037f8:	1af2      	sublt	r2, r6, r3
 80037fa:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 80037fc:	bfbf      	itttt	lt
 80037fe:	9608      	strlt	r6, [sp, #32]
 8003800:	189b      	addlt	r3, r3, r2
 8003802:	930c      	strlt	r3, [sp, #48]	; 0x30
 8003804:	2600      	movlt	r6, #0
 8003806:	f1b9 0f00 	cmp.w	r9, #0
 800380a:	bfb9      	ittee	lt
 800380c:	eba8 0509 	sublt.w	r5, r8, r9
 8003810:	2300      	movlt	r3, #0
 8003812:	4645      	movge	r5, r8
 8003814:	464b      	movge	r3, r9
 8003816:	e6e2      	b.n	80035de <_dtoa_r+0x716>
 8003818:	9e08      	ldr	r6, [sp, #32]
 800381a:	4645      	mov	r5, r8
 800381c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800381e:	e6e7      	b.n	80035f0 <_dtoa_r+0x728>
 8003820:	9a08      	ldr	r2, [sp, #32]
 8003822:	e710      	b.n	8003646 <_dtoa_r+0x77e>
 8003824:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003826:	2b01      	cmp	r3, #1
 8003828:	dc18      	bgt.n	800385c <_dtoa_r+0x994>
 800382a:	9b02      	ldr	r3, [sp, #8]
 800382c:	b9b3      	cbnz	r3, 800385c <_dtoa_r+0x994>
 800382e:	9b03      	ldr	r3, [sp, #12]
 8003830:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003834:	b9a3      	cbnz	r3, 8003860 <_dtoa_r+0x998>
 8003836:	9b03      	ldr	r3, [sp, #12]
 8003838:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800383c:	0d1b      	lsrs	r3, r3, #20
 800383e:	051b      	lsls	r3, r3, #20
 8003840:	b12b      	cbz	r3, 800384e <_dtoa_r+0x986>
 8003842:	9b07      	ldr	r3, [sp, #28]
 8003844:	f108 0801 	add.w	r8, r8, #1
 8003848:	3301      	adds	r3, #1
 800384a:	9307      	str	r3, [sp, #28]
 800384c:	2301      	movs	r3, #1
 800384e:	9308      	str	r3, [sp, #32]
 8003850:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003852:	2b00      	cmp	r3, #0
 8003854:	f47f af11 	bne.w	800367a <_dtoa_r+0x7b2>
 8003858:	2001      	movs	r0, #1
 800385a:	e716      	b.n	800368a <_dtoa_r+0x7c2>
 800385c:	2300      	movs	r3, #0
 800385e:	e7f6      	b.n	800384e <_dtoa_r+0x986>
 8003860:	9b02      	ldr	r3, [sp, #8]
 8003862:	e7f4      	b.n	800384e <_dtoa_r+0x986>
 8003864:	f43f af23 	beq.w	80036ae <_dtoa_r+0x7e6>
 8003868:	9a07      	ldr	r2, [sp, #28]
 800386a:	331c      	adds	r3, #28
 800386c:	441a      	add	r2, r3
 800386e:	4498      	add	r8, r3
 8003870:	441d      	add	r5, r3
 8003872:	4613      	mov	r3, r2
 8003874:	e71a      	b.n	80036ac <_dtoa_r+0x7e4>
 8003876:	4603      	mov	r3, r0
 8003878:	e7f6      	b.n	8003868 <_dtoa_r+0x9a0>
 800387a:	bf00      	nop
 800387c:	40240000 	.word	0x40240000
 8003880:	f1b9 0f00 	cmp.w	r9, #0
 8003884:	dc33      	bgt.n	80038ee <_dtoa_r+0xa26>
 8003886:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003888:	2b02      	cmp	r3, #2
 800388a:	dd30      	ble.n	80038ee <_dtoa_r+0xa26>
 800388c:	f8cd 9010 	str.w	r9, [sp, #16]
 8003890:	9b04      	ldr	r3, [sp, #16]
 8003892:	b963      	cbnz	r3, 80038ae <_dtoa_r+0x9e6>
 8003894:	4631      	mov	r1, r6
 8003896:	2205      	movs	r2, #5
 8003898:	4620      	mov	r0, r4
 800389a:	f000 f963 	bl	8003b64 <__multadd>
 800389e:	4601      	mov	r1, r0
 80038a0:	4606      	mov	r6, r0
 80038a2:	4650      	mov	r0, sl
 80038a4:	f000 fb1b 	bl	8003ede <__mcmp>
 80038a8:	2800      	cmp	r0, #0
 80038aa:	f73f ad5c 	bgt.w	8003366 <_dtoa_r+0x49e>
 80038ae:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80038b0:	9d06      	ldr	r5, [sp, #24]
 80038b2:	ea6f 0b03 	mvn.w	fp, r3
 80038b6:	2300      	movs	r3, #0
 80038b8:	9307      	str	r3, [sp, #28]
 80038ba:	4631      	mov	r1, r6
 80038bc:	4620      	mov	r0, r4
 80038be:	f000 f93a 	bl	8003b36 <_Bfree>
 80038c2:	2f00      	cmp	r7, #0
 80038c4:	f43f ae4b 	beq.w	800355e <_dtoa_r+0x696>
 80038c8:	9b07      	ldr	r3, [sp, #28]
 80038ca:	b12b      	cbz	r3, 80038d8 <_dtoa_r+0xa10>
 80038cc:	42bb      	cmp	r3, r7
 80038ce:	d003      	beq.n	80038d8 <_dtoa_r+0xa10>
 80038d0:	4619      	mov	r1, r3
 80038d2:	4620      	mov	r0, r4
 80038d4:	f000 f92f 	bl	8003b36 <_Bfree>
 80038d8:	4639      	mov	r1, r7
 80038da:	4620      	mov	r0, r4
 80038dc:	f000 f92b 	bl	8003b36 <_Bfree>
 80038e0:	e63d      	b.n	800355e <_dtoa_r+0x696>
 80038e2:	2600      	movs	r6, #0
 80038e4:	4637      	mov	r7, r6
 80038e6:	e7e2      	b.n	80038ae <_dtoa_r+0x9e6>
 80038e8:	46bb      	mov	fp, r7
 80038ea:	4637      	mov	r7, r6
 80038ec:	e53b      	b.n	8003366 <_dtoa_r+0x49e>
 80038ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038f0:	f8cd 9010 	str.w	r9, [sp, #16]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	f47f af12 	bne.w	800371e <_dtoa_r+0x856>
 80038fa:	9d06      	ldr	r5, [sp, #24]
 80038fc:	4631      	mov	r1, r6
 80038fe:	4650      	mov	r0, sl
 8003900:	f7ff fa54 	bl	8002dac <quorem>
 8003904:	9b06      	ldr	r3, [sp, #24]
 8003906:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800390a:	f805 9b01 	strb.w	r9, [r5], #1
 800390e:	9a04      	ldr	r2, [sp, #16]
 8003910:	1aeb      	subs	r3, r5, r3
 8003912:	429a      	cmp	r2, r3
 8003914:	f300 8081 	bgt.w	8003a1a <_dtoa_r+0xb52>
 8003918:	9b06      	ldr	r3, [sp, #24]
 800391a:	2a01      	cmp	r2, #1
 800391c:	bfac      	ite	ge
 800391e:	189b      	addge	r3, r3, r2
 8003920:	3301      	addlt	r3, #1
 8003922:	4698      	mov	r8, r3
 8003924:	2300      	movs	r3, #0
 8003926:	9307      	str	r3, [sp, #28]
 8003928:	4651      	mov	r1, sl
 800392a:	2201      	movs	r2, #1
 800392c:	4620      	mov	r0, r4
 800392e:	f000 fa85 	bl	8003e3c <__lshift>
 8003932:	4631      	mov	r1, r6
 8003934:	4682      	mov	sl, r0
 8003936:	f000 fad2 	bl	8003ede <__mcmp>
 800393a:	2800      	cmp	r0, #0
 800393c:	dc34      	bgt.n	80039a8 <_dtoa_r+0xae0>
 800393e:	d102      	bne.n	8003946 <_dtoa_r+0xa7e>
 8003940:	f019 0f01 	tst.w	r9, #1
 8003944:	d130      	bne.n	80039a8 <_dtoa_r+0xae0>
 8003946:	4645      	mov	r5, r8
 8003948:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800394c:	1e6a      	subs	r2, r5, #1
 800394e:	2b30      	cmp	r3, #48	; 0x30
 8003950:	d1b3      	bne.n	80038ba <_dtoa_r+0x9f2>
 8003952:	4615      	mov	r5, r2
 8003954:	e7f8      	b.n	8003948 <_dtoa_r+0xa80>
 8003956:	4638      	mov	r0, r7
 8003958:	e6ff      	b.n	800375a <_dtoa_r+0x892>
 800395a:	2301      	movs	r3, #1
 800395c:	e722      	b.n	80037a4 <_dtoa_r+0x8dc>
 800395e:	9a02      	ldr	r2, [sp, #8]
 8003960:	2a00      	cmp	r2, #0
 8003962:	db04      	blt.n	800396e <_dtoa_r+0xaa6>
 8003964:	d128      	bne.n	80039b8 <_dtoa_r+0xaf0>
 8003966:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003968:	bb32      	cbnz	r2, 80039b8 <_dtoa_r+0xaf0>
 800396a:	9a08      	ldr	r2, [sp, #32]
 800396c:	bb22      	cbnz	r2, 80039b8 <_dtoa_r+0xaf0>
 800396e:	2b00      	cmp	r3, #0
 8003970:	f77f af32 	ble.w	80037d8 <_dtoa_r+0x910>
 8003974:	4651      	mov	r1, sl
 8003976:	2201      	movs	r2, #1
 8003978:	4620      	mov	r0, r4
 800397a:	f000 fa5f 	bl	8003e3c <__lshift>
 800397e:	4631      	mov	r1, r6
 8003980:	4682      	mov	sl, r0
 8003982:	f000 faac 	bl	8003ede <__mcmp>
 8003986:	2800      	cmp	r0, #0
 8003988:	dc05      	bgt.n	8003996 <_dtoa_r+0xace>
 800398a:	f47f af25 	bne.w	80037d8 <_dtoa_r+0x910>
 800398e:	f019 0f01 	tst.w	r9, #1
 8003992:	f43f af21 	beq.w	80037d8 <_dtoa_r+0x910>
 8003996:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800399a:	f47f af1b 	bne.w	80037d4 <_dtoa_r+0x90c>
 800399e:	2339      	movs	r3, #57	; 0x39
 80039a0:	f108 0801 	add.w	r8, r8, #1
 80039a4:	f808 3c01 	strb.w	r3, [r8, #-1]
 80039a8:	4645      	mov	r5, r8
 80039aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80039ae:	1e6a      	subs	r2, r5, #1
 80039b0:	2b39      	cmp	r3, #57	; 0x39
 80039b2:	d03a      	beq.n	8003a2a <_dtoa_r+0xb62>
 80039b4:	3301      	adds	r3, #1
 80039b6:	e03f      	b.n	8003a38 <_dtoa_r+0xb70>
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	f108 0501 	add.w	r5, r8, #1
 80039be:	dd05      	ble.n	80039cc <_dtoa_r+0xb04>
 80039c0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80039c4:	d0eb      	beq.n	800399e <_dtoa_r+0xad6>
 80039c6:	f109 0901 	add.w	r9, r9, #1
 80039ca:	e707      	b.n	80037dc <_dtoa_r+0x914>
 80039cc:	9b06      	ldr	r3, [sp, #24]
 80039ce:	9a04      	ldr	r2, [sp, #16]
 80039d0:	1aeb      	subs	r3, r5, r3
 80039d2:	4293      	cmp	r3, r2
 80039d4:	46a8      	mov	r8, r5
 80039d6:	f805 9c01 	strb.w	r9, [r5, #-1]
 80039da:	d0a5      	beq.n	8003928 <_dtoa_r+0xa60>
 80039dc:	4651      	mov	r1, sl
 80039de:	2300      	movs	r3, #0
 80039e0:	220a      	movs	r2, #10
 80039e2:	4620      	mov	r0, r4
 80039e4:	f000 f8be 	bl	8003b64 <__multadd>
 80039e8:	9b07      	ldr	r3, [sp, #28]
 80039ea:	4682      	mov	sl, r0
 80039ec:	42bb      	cmp	r3, r7
 80039ee:	f04f 020a 	mov.w	r2, #10
 80039f2:	f04f 0300 	mov.w	r3, #0
 80039f6:	9907      	ldr	r1, [sp, #28]
 80039f8:	4620      	mov	r0, r4
 80039fa:	d104      	bne.n	8003a06 <_dtoa_r+0xb3e>
 80039fc:	f000 f8b2 	bl	8003b64 <__multadd>
 8003a00:	9007      	str	r0, [sp, #28]
 8003a02:	4607      	mov	r7, r0
 8003a04:	e6b1      	b.n	800376a <_dtoa_r+0x8a2>
 8003a06:	f000 f8ad 	bl	8003b64 <__multadd>
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	9007      	str	r0, [sp, #28]
 8003a0e:	220a      	movs	r2, #10
 8003a10:	4639      	mov	r1, r7
 8003a12:	4620      	mov	r0, r4
 8003a14:	f000 f8a6 	bl	8003b64 <__multadd>
 8003a18:	e7f3      	b.n	8003a02 <_dtoa_r+0xb3a>
 8003a1a:	4651      	mov	r1, sl
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	220a      	movs	r2, #10
 8003a20:	4620      	mov	r0, r4
 8003a22:	f000 f89f 	bl	8003b64 <__multadd>
 8003a26:	4682      	mov	sl, r0
 8003a28:	e768      	b.n	80038fc <_dtoa_r+0xa34>
 8003a2a:	9b06      	ldr	r3, [sp, #24]
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d105      	bne.n	8003a3c <_dtoa_r+0xb74>
 8003a30:	2331      	movs	r3, #49	; 0x31
 8003a32:	9a06      	ldr	r2, [sp, #24]
 8003a34:	f10b 0b01 	add.w	fp, fp, #1
 8003a38:	7013      	strb	r3, [r2, #0]
 8003a3a:	e73e      	b.n	80038ba <_dtoa_r+0x9f2>
 8003a3c:	4615      	mov	r5, r2
 8003a3e:	e7b4      	b.n	80039aa <_dtoa_r+0xae2>
 8003a40:	4b09      	ldr	r3, [pc, #36]	; (8003a68 <_dtoa_r+0xba0>)
 8003a42:	f7ff baa3 	b.w	8002f8c <_dtoa_r+0xc4>
 8003a46:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	f47f aa7d 	bne.w	8002f48 <_dtoa_r+0x80>
 8003a4e:	4b07      	ldr	r3, [pc, #28]	; (8003a6c <_dtoa_r+0xba4>)
 8003a50:	f7ff ba9c 	b.w	8002f8c <_dtoa_r+0xc4>
 8003a54:	9b04      	ldr	r3, [sp, #16]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	f73f af4f 	bgt.w	80038fa <_dtoa_r+0xa32>
 8003a5c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	f77f af4b 	ble.w	80038fa <_dtoa_r+0xa32>
 8003a64:	e714      	b.n	8003890 <_dtoa_r+0x9c8>
 8003a66:	bf00      	nop
 8003a68:	080045fb 	.word	0x080045fb
 8003a6c:	0800461f 	.word	0x0800461f

08003a70 <_localeconv_r>:
 8003a70:	4b04      	ldr	r3, [pc, #16]	; (8003a84 <_localeconv_r+0x14>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	6a18      	ldr	r0, [r3, #32]
 8003a76:	4b04      	ldr	r3, [pc, #16]	; (8003a88 <_localeconv_r+0x18>)
 8003a78:	2800      	cmp	r0, #0
 8003a7a:	bf08      	it	eq
 8003a7c:	4618      	moveq	r0, r3
 8003a7e:	30f0      	adds	r0, #240	; 0xf0
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	2000000c 	.word	0x2000000c
 8003a88:	20000070 	.word	0x20000070

08003a8c <malloc>:
 8003a8c:	4b02      	ldr	r3, [pc, #8]	; (8003a98 <malloc+0xc>)
 8003a8e:	4601      	mov	r1, r0
 8003a90:	6818      	ldr	r0, [r3, #0]
 8003a92:	f000 bb47 	b.w	8004124 <_malloc_r>
 8003a96:	bf00      	nop
 8003a98:	2000000c 	.word	0x2000000c

08003a9c <memchr>:
 8003a9c:	b510      	push	{r4, lr}
 8003a9e:	b2c9      	uxtb	r1, r1
 8003aa0:	4402      	add	r2, r0
 8003aa2:	4290      	cmp	r0, r2
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	d101      	bne.n	8003aac <memchr+0x10>
 8003aa8:	2000      	movs	r0, #0
 8003aaa:	bd10      	pop	{r4, pc}
 8003aac:	781c      	ldrb	r4, [r3, #0]
 8003aae:	3001      	adds	r0, #1
 8003ab0:	428c      	cmp	r4, r1
 8003ab2:	d1f6      	bne.n	8003aa2 <memchr+0x6>
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	bd10      	pop	{r4, pc}

08003ab8 <memcpy>:
 8003ab8:	b510      	push	{r4, lr}
 8003aba:	1e43      	subs	r3, r0, #1
 8003abc:	440a      	add	r2, r1
 8003abe:	4291      	cmp	r1, r2
 8003ac0:	d100      	bne.n	8003ac4 <memcpy+0xc>
 8003ac2:	bd10      	pop	{r4, pc}
 8003ac4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ac8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003acc:	e7f7      	b.n	8003abe <memcpy+0x6>

08003ace <_Balloc>:
 8003ace:	b570      	push	{r4, r5, r6, lr}
 8003ad0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003ad2:	4604      	mov	r4, r0
 8003ad4:	460e      	mov	r6, r1
 8003ad6:	b93d      	cbnz	r5, 8003ae8 <_Balloc+0x1a>
 8003ad8:	2010      	movs	r0, #16
 8003ada:	f7ff ffd7 	bl	8003a8c <malloc>
 8003ade:	6260      	str	r0, [r4, #36]	; 0x24
 8003ae0:	6045      	str	r5, [r0, #4]
 8003ae2:	6085      	str	r5, [r0, #8]
 8003ae4:	6005      	str	r5, [r0, #0]
 8003ae6:	60c5      	str	r5, [r0, #12]
 8003ae8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003aea:	68eb      	ldr	r3, [r5, #12]
 8003aec:	b183      	cbz	r3, 8003b10 <_Balloc+0x42>
 8003aee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8003af6:	b9b8      	cbnz	r0, 8003b28 <_Balloc+0x5a>
 8003af8:	2101      	movs	r1, #1
 8003afa:	fa01 f506 	lsl.w	r5, r1, r6
 8003afe:	1d6a      	adds	r2, r5, #5
 8003b00:	0092      	lsls	r2, r2, #2
 8003b02:	4620      	mov	r0, r4
 8003b04:	f000 fab3 	bl	800406e <_calloc_r>
 8003b08:	b160      	cbz	r0, 8003b24 <_Balloc+0x56>
 8003b0a:	6046      	str	r6, [r0, #4]
 8003b0c:	6085      	str	r5, [r0, #8]
 8003b0e:	e00e      	b.n	8003b2e <_Balloc+0x60>
 8003b10:	2221      	movs	r2, #33	; 0x21
 8003b12:	2104      	movs	r1, #4
 8003b14:	4620      	mov	r0, r4
 8003b16:	f000 faaa 	bl	800406e <_calloc_r>
 8003b1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b1c:	60e8      	str	r0, [r5, #12]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d1e4      	bne.n	8003aee <_Balloc+0x20>
 8003b24:	2000      	movs	r0, #0
 8003b26:	bd70      	pop	{r4, r5, r6, pc}
 8003b28:	6802      	ldr	r2, [r0, #0]
 8003b2a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8003b2e:	2300      	movs	r3, #0
 8003b30:	6103      	str	r3, [r0, #16]
 8003b32:	60c3      	str	r3, [r0, #12]
 8003b34:	bd70      	pop	{r4, r5, r6, pc}

08003b36 <_Bfree>:
 8003b36:	b570      	push	{r4, r5, r6, lr}
 8003b38:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8003b3a:	4606      	mov	r6, r0
 8003b3c:	460d      	mov	r5, r1
 8003b3e:	b93c      	cbnz	r4, 8003b50 <_Bfree+0x1a>
 8003b40:	2010      	movs	r0, #16
 8003b42:	f7ff ffa3 	bl	8003a8c <malloc>
 8003b46:	6270      	str	r0, [r6, #36]	; 0x24
 8003b48:	6044      	str	r4, [r0, #4]
 8003b4a:	6084      	str	r4, [r0, #8]
 8003b4c:	6004      	str	r4, [r0, #0]
 8003b4e:	60c4      	str	r4, [r0, #12]
 8003b50:	b13d      	cbz	r5, 8003b62 <_Bfree+0x2c>
 8003b52:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003b54:	686a      	ldr	r2, [r5, #4]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003b5c:	6029      	str	r1, [r5, #0]
 8003b5e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8003b62:	bd70      	pop	{r4, r5, r6, pc}

08003b64 <__multadd>:
 8003b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b68:	461f      	mov	r7, r3
 8003b6a:	4606      	mov	r6, r0
 8003b6c:	460c      	mov	r4, r1
 8003b6e:	2300      	movs	r3, #0
 8003b70:	690d      	ldr	r5, [r1, #16]
 8003b72:	f101 0e14 	add.w	lr, r1, #20
 8003b76:	f8de 0000 	ldr.w	r0, [lr]
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	b281      	uxth	r1, r0
 8003b7e:	fb02 7101 	mla	r1, r2, r1, r7
 8003b82:	0c00      	lsrs	r0, r0, #16
 8003b84:	0c0f      	lsrs	r7, r1, #16
 8003b86:	fb02 7000 	mla	r0, r2, r0, r7
 8003b8a:	b289      	uxth	r1, r1
 8003b8c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8003b90:	429d      	cmp	r5, r3
 8003b92:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8003b96:	f84e 1b04 	str.w	r1, [lr], #4
 8003b9a:	dcec      	bgt.n	8003b76 <__multadd+0x12>
 8003b9c:	b1d7      	cbz	r7, 8003bd4 <__multadd+0x70>
 8003b9e:	68a3      	ldr	r3, [r4, #8]
 8003ba0:	429d      	cmp	r5, r3
 8003ba2:	db12      	blt.n	8003bca <__multadd+0x66>
 8003ba4:	6861      	ldr	r1, [r4, #4]
 8003ba6:	4630      	mov	r0, r6
 8003ba8:	3101      	adds	r1, #1
 8003baa:	f7ff ff90 	bl	8003ace <_Balloc>
 8003bae:	4680      	mov	r8, r0
 8003bb0:	6922      	ldr	r2, [r4, #16]
 8003bb2:	f104 010c 	add.w	r1, r4, #12
 8003bb6:	3202      	adds	r2, #2
 8003bb8:	0092      	lsls	r2, r2, #2
 8003bba:	300c      	adds	r0, #12
 8003bbc:	f7ff ff7c 	bl	8003ab8 <memcpy>
 8003bc0:	4621      	mov	r1, r4
 8003bc2:	4630      	mov	r0, r6
 8003bc4:	f7ff ffb7 	bl	8003b36 <_Bfree>
 8003bc8:	4644      	mov	r4, r8
 8003bca:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8003bce:	3501      	adds	r5, #1
 8003bd0:	615f      	str	r7, [r3, #20]
 8003bd2:	6125      	str	r5, [r4, #16]
 8003bd4:	4620      	mov	r0, r4
 8003bd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003bda <__hi0bits>:
 8003bda:	0c02      	lsrs	r2, r0, #16
 8003bdc:	0412      	lsls	r2, r2, #16
 8003bde:	4603      	mov	r3, r0
 8003be0:	b9b2      	cbnz	r2, 8003c10 <__hi0bits+0x36>
 8003be2:	0403      	lsls	r3, r0, #16
 8003be4:	2010      	movs	r0, #16
 8003be6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8003bea:	bf04      	itt	eq
 8003bec:	021b      	lsleq	r3, r3, #8
 8003bee:	3008      	addeq	r0, #8
 8003bf0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8003bf4:	bf04      	itt	eq
 8003bf6:	011b      	lsleq	r3, r3, #4
 8003bf8:	3004      	addeq	r0, #4
 8003bfa:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8003bfe:	bf04      	itt	eq
 8003c00:	009b      	lsleq	r3, r3, #2
 8003c02:	3002      	addeq	r0, #2
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	db06      	blt.n	8003c16 <__hi0bits+0x3c>
 8003c08:	005b      	lsls	r3, r3, #1
 8003c0a:	d503      	bpl.n	8003c14 <__hi0bits+0x3a>
 8003c0c:	3001      	adds	r0, #1
 8003c0e:	4770      	bx	lr
 8003c10:	2000      	movs	r0, #0
 8003c12:	e7e8      	b.n	8003be6 <__hi0bits+0xc>
 8003c14:	2020      	movs	r0, #32
 8003c16:	4770      	bx	lr

08003c18 <__lo0bits>:
 8003c18:	6803      	ldr	r3, [r0, #0]
 8003c1a:	4601      	mov	r1, r0
 8003c1c:	f013 0207 	ands.w	r2, r3, #7
 8003c20:	d00b      	beq.n	8003c3a <__lo0bits+0x22>
 8003c22:	07da      	lsls	r2, r3, #31
 8003c24:	d423      	bmi.n	8003c6e <__lo0bits+0x56>
 8003c26:	0798      	lsls	r0, r3, #30
 8003c28:	bf49      	itett	mi
 8003c2a:	085b      	lsrmi	r3, r3, #1
 8003c2c:	089b      	lsrpl	r3, r3, #2
 8003c2e:	2001      	movmi	r0, #1
 8003c30:	600b      	strmi	r3, [r1, #0]
 8003c32:	bf5c      	itt	pl
 8003c34:	600b      	strpl	r3, [r1, #0]
 8003c36:	2002      	movpl	r0, #2
 8003c38:	4770      	bx	lr
 8003c3a:	b298      	uxth	r0, r3
 8003c3c:	b9a8      	cbnz	r0, 8003c6a <__lo0bits+0x52>
 8003c3e:	2010      	movs	r0, #16
 8003c40:	0c1b      	lsrs	r3, r3, #16
 8003c42:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003c46:	bf04      	itt	eq
 8003c48:	0a1b      	lsreq	r3, r3, #8
 8003c4a:	3008      	addeq	r0, #8
 8003c4c:	071a      	lsls	r2, r3, #28
 8003c4e:	bf04      	itt	eq
 8003c50:	091b      	lsreq	r3, r3, #4
 8003c52:	3004      	addeq	r0, #4
 8003c54:	079a      	lsls	r2, r3, #30
 8003c56:	bf04      	itt	eq
 8003c58:	089b      	lsreq	r3, r3, #2
 8003c5a:	3002      	addeq	r0, #2
 8003c5c:	07da      	lsls	r2, r3, #31
 8003c5e:	d402      	bmi.n	8003c66 <__lo0bits+0x4e>
 8003c60:	085b      	lsrs	r3, r3, #1
 8003c62:	d006      	beq.n	8003c72 <__lo0bits+0x5a>
 8003c64:	3001      	adds	r0, #1
 8003c66:	600b      	str	r3, [r1, #0]
 8003c68:	4770      	bx	lr
 8003c6a:	4610      	mov	r0, r2
 8003c6c:	e7e9      	b.n	8003c42 <__lo0bits+0x2a>
 8003c6e:	2000      	movs	r0, #0
 8003c70:	4770      	bx	lr
 8003c72:	2020      	movs	r0, #32
 8003c74:	4770      	bx	lr

08003c76 <__i2b>:
 8003c76:	b510      	push	{r4, lr}
 8003c78:	460c      	mov	r4, r1
 8003c7a:	2101      	movs	r1, #1
 8003c7c:	f7ff ff27 	bl	8003ace <_Balloc>
 8003c80:	2201      	movs	r2, #1
 8003c82:	6144      	str	r4, [r0, #20]
 8003c84:	6102      	str	r2, [r0, #16]
 8003c86:	bd10      	pop	{r4, pc}

08003c88 <__multiply>:
 8003c88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c8c:	4614      	mov	r4, r2
 8003c8e:	690a      	ldr	r2, [r1, #16]
 8003c90:	6923      	ldr	r3, [r4, #16]
 8003c92:	4689      	mov	r9, r1
 8003c94:	429a      	cmp	r2, r3
 8003c96:	bfbe      	ittt	lt
 8003c98:	460b      	movlt	r3, r1
 8003c9a:	46a1      	movlt	r9, r4
 8003c9c:	461c      	movlt	r4, r3
 8003c9e:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8003ca2:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8003ca6:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8003caa:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8003cae:	eb07 060a 	add.w	r6, r7, sl
 8003cb2:	429e      	cmp	r6, r3
 8003cb4:	bfc8      	it	gt
 8003cb6:	3101      	addgt	r1, #1
 8003cb8:	f7ff ff09 	bl	8003ace <_Balloc>
 8003cbc:	f100 0514 	add.w	r5, r0, #20
 8003cc0:	462b      	mov	r3, r5
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8003cc8:	4543      	cmp	r3, r8
 8003cca:	d316      	bcc.n	8003cfa <__multiply+0x72>
 8003ccc:	f104 0214 	add.w	r2, r4, #20
 8003cd0:	f109 0114 	add.w	r1, r9, #20
 8003cd4:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8003cd8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8003cdc:	9301      	str	r3, [sp, #4]
 8003cde:	9c01      	ldr	r4, [sp, #4]
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	4294      	cmp	r4, r2
 8003ce4:	d80c      	bhi.n	8003d00 <__multiply+0x78>
 8003ce6:	2e00      	cmp	r6, #0
 8003ce8:	dd03      	ble.n	8003cf2 <__multiply+0x6a>
 8003cea:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d054      	beq.n	8003d9c <__multiply+0x114>
 8003cf2:	6106      	str	r6, [r0, #16]
 8003cf4:	b003      	add	sp, #12
 8003cf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cfa:	f843 2b04 	str.w	r2, [r3], #4
 8003cfe:	e7e3      	b.n	8003cc8 <__multiply+0x40>
 8003d00:	f8b3 a000 	ldrh.w	sl, [r3]
 8003d04:	3204      	adds	r2, #4
 8003d06:	f1ba 0f00 	cmp.w	sl, #0
 8003d0a:	d020      	beq.n	8003d4e <__multiply+0xc6>
 8003d0c:	46ae      	mov	lr, r5
 8003d0e:	4689      	mov	r9, r1
 8003d10:	f04f 0c00 	mov.w	ip, #0
 8003d14:	f859 4b04 	ldr.w	r4, [r9], #4
 8003d18:	f8be b000 	ldrh.w	fp, [lr]
 8003d1c:	b2a3      	uxth	r3, r4
 8003d1e:	fb0a b303 	mla	r3, sl, r3, fp
 8003d22:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8003d26:	f8de 4000 	ldr.w	r4, [lr]
 8003d2a:	4463      	add	r3, ip
 8003d2c:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8003d30:	fb0a c40b 	mla	r4, sl, fp, ip
 8003d34:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8003d3e:	454f      	cmp	r7, r9
 8003d40:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8003d44:	f84e 3b04 	str.w	r3, [lr], #4
 8003d48:	d8e4      	bhi.n	8003d14 <__multiply+0x8c>
 8003d4a:	f8ce c000 	str.w	ip, [lr]
 8003d4e:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8003d52:	f1b9 0f00 	cmp.w	r9, #0
 8003d56:	d01f      	beq.n	8003d98 <__multiply+0x110>
 8003d58:	46ae      	mov	lr, r5
 8003d5a:	468c      	mov	ip, r1
 8003d5c:	f04f 0a00 	mov.w	sl, #0
 8003d60:	682b      	ldr	r3, [r5, #0]
 8003d62:	f8bc 4000 	ldrh.w	r4, [ip]
 8003d66:	f8be b002 	ldrh.w	fp, [lr, #2]
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	fb09 b404 	mla	r4, r9, r4, fp
 8003d70:	44a2      	add	sl, r4
 8003d72:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8003d76:	f84e 3b04 	str.w	r3, [lr], #4
 8003d7a:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003d7e:	f8be 4000 	ldrh.w	r4, [lr]
 8003d82:	0c1b      	lsrs	r3, r3, #16
 8003d84:	fb09 4303 	mla	r3, r9, r3, r4
 8003d88:	4567      	cmp	r7, ip
 8003d8a:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8003d8e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003d92:	d8e6      	bhi.n	8003d62 <__multiply+0xda>
 8003d94:	f8ce 3000 	str.w	r3, [lr]
 8003d98:	3504      	adds	r5, #4
 8003d9a:	e7a0      	b.n	8003cde <__multiply+0x56>
 8003d9c:	3e01      	subs	r6, #1
 8003d9e:	e7a2      	b.n	8003ce6 <__multiply+0x5e>

08003da0 <__pow5mult>:
 8003da0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003da4:	4615      	mov	r5, r2
 8003da6:	f012 0203 	ands.w	r2, r2, #3
 8003daa:	4606      	mov	r6, r0
 8003dac:	460f      	mov	r7, r1
 8003dae:	d007      	beq.n	8003dc0 <__pow5mult+0x20>
 8003db0:	4c21      	ldr	r4, [pc, #132]	; (8003e38 <__pow5mult+0x98>)
 8003db2:	3a01      	subs	r2, #1
 8003db4:	2300      	movs	r3, #0
 8003db6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8003dba:	f7ff fed3 	bl	8003b64 <__multadd>
 8003dbe:	4607      	mov	r7, r0
 8003dc0:	10ad      	asrs	r5, r5, #2
 8003dc2:	d035      	beq.n	8003e30 <__pow5mult+0x90>
 8003dc4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8003dc6:	b93c      	cbnz	r4, 8003dd8 <__pow5mult+0x38>
 8003dc8:	2010      	movs	r0, #16
 8003dca:	f7ff fe5f 	bl	8003a8c <malloc>
 8003dce:	6270      	str	r0, [r6, #36]	; 0x24
 8003dd0:	6044      	str	r4, [r0, #4]
 8003dd2:	6084      	str	r4, [r0, #8]
 8003dd4:	6004      	str	r4, [r0, #0]
 8003dd6:	60c4      	str	r4, [r0, #12]
 8003dd8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8003ddc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003de0:	b94c      	cbnz	r4, 8003df6 <__pow5mult+0x56>
 8003de2:	f240 2171 	movw	r1, #625	; 0x271
 8003de6:	4630      	mov	r0, r6
 8003de8:	f7ff ff45 	bl	8003c76 <__i2b>
 8003dec:	2300      	movs	r3, #0
 8003dee:	4604      	mov	r4, r0
 8003df0:	f8c8 0008 	str.w	r0, [r8, #8]
 8003df4:	6003      	str	r3, [r0, #0]
 8003df6:	f04f 0800 	mov.w	r8, #0
 8003dfa:	07eb      	lsls	r3, r5, #31
 8003dfc:	d50a      	bpl.n	8003e14 <__pow5mult+0x74>
 8003dfe:	4639      	mov	r1, r7
 8003e00:	4622      	mov	r2, r4
 8003e02:	4630      	mov	r0, r6
 8003e04:	f7ff ff40 	bl	8003c88 <__multiply>
 8003e08:	4681      	mov	r9, r0
 8003e0a:	4639      	mov	r1, r7
 8003e0c:	4630      	mov	r0, r6
 8003e0e:	f7ff fe92 	bl	8003b36 <_Bfree>
 8003e12:	464f      	mov	r7, r9
 8003e14:	106d      	asrs	r5, r5, #1
 8003e16:	d00b      	beq.n	8003e30 <__pow5mult+0x90>
 8003e18:	6820      	ldr	r0, [r4, #0]
 8003e1a:	b938      	cbnz	r0, 8003e2c <__pow5mult+0x8c>
 8003e1c:	4622      	mov	r2, r4
 8003e1e:	4621      	mov	r1, r4
 8003e20:	4630      	mov	r0, r6
 8003e22:	f7ff ff31 	bl	8003c88 <__multiply>
 8003e26:	6020      	str	r0, [r4, #0]
 8003e28:	f8c0 8000 	str.w	r8, [r0]
 8003e2c:	4604      	mov	r4, r0
 8003e2e:	e7e4      	b.n	8003dfa <__pow5mult+0x5a>
 8003e30:	4638      	mov	r0, r7
 8003e32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e36:	bf00      	nop
 8003e38:	08004720 	.word	0x08004720

08003e3c <__lshift>:
 8003e3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e40:	460c      	mov	r4, r1
 8003e42:	4607      	mov	r7, r0
 8003e44:	4616      	mov	r6, r2
 8003e46:	6923      	ldr	r3, [r4, #16]
 8003e48:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8003e4c:	eb0a 0903 	add.w	r9, sl, r3
 8003e50:	6849      	ldr	r1, [r1, #4]
 8003e52:	68a3      	ldr	r3, [r4, #8]
 8003e54:	f109 0501 	add.w	r5, r9, #1
 8003e58:	42ab      	cmp	r3, r5
 8003e5a:	db31      	blt.n	8003ec0 <__lshift+0x84>
 8003e5c:	4638      	mov	r0, r7
 8003e5e:	f7ff fe36 	bl	8003ace <_Balloc>
 8003e62:	2200      	movs	r2, #0
 8003e64:	4680      	mov	r8, r0
 8003e66:	4611      	mov	r1, r2
 8003e68:	f100 0314 	add.w	r3, r0, #20
 8003e6c:	4552      	cmp	r2, sl
 8003e6e:	db2a      	blt.n	8003ec6 <__lshift+0x8a>
 8003e70:	6920      	ldr	r0, [r4, #16]
 8003e72:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003e76:	f104 0114 	add.w	r1, r4, #20
 8003e7a:	f016 021f 	ands.w	r2, r6, #31
 8003e7e:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8003e82:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8003e86:	d022      	beq.n	8003ece <__lshift+0x92>
 8003e88:	2000      	movs	r0, #0
 8003e8a:	f1c2 0c20 	rsb	ip, r2, #32
 8003e8e:	680e      	ldr	r6, [r1, #0]
 8003e90:	4096      	lsls	r6, r2
 8003e92:	4330      	orrs	r0, r6
 8003e94:	f843 0b04 	str.w	r0, [r3], #4
 8003e98:	f851 0b04 	ldr.w	r0, [r1], #4
 8003e9c:	458e      	cmp	lr, r1
 8003e9e:	fa20 f00c 	lsr.w	r0, r0, ip
 8003ea2:	d8f4      	bhi.n	8003e8e <__lshift+0x52>
 8003ea4:	6018      	str	r0, [r3, #0]
 8003ea6:	b108      	cbz	r0, 8003eac <__lshift+0x70>
 8003ea8:	f109 0502 	add.w	r5, r9, #2
 8003eac:	3d01      	subs	r5, #1
 8003eae:	4638      	mov	r0, r7
 8003eb0:	f8c8 5010 	str.w	r5, [r8, #16]
 8003eb4:	4621      	mov	r1, r4
 8003eb6:	f7ff fe3e 	bl	8003b36 <_Bfree>
 8003eba:	4640      	mov	r0, r8
 8003ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ec0:	3101      	adds	r1, #1
 8003ec2:	005b      	lsls	r3, r3, #1
 8003ec4:	e7c8      	b.n	8003e58 <__lshift+0x1c>
 8003ec6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003eca:	3201      	adds	r2, #1
 8003ecc:	e7ce      	b.n	8003e6c <__lshift+0x30>
 8003ece:	3b04      	subs	r3, #4
 8003ed0:	f851 2b04 	ldr.w	r2, [r1], #4
 8003ed4:	458e      	cmp	lr, r1
 8003ed6:	f843 2f04 	str.w	r2, [r3, #4]!
 8003eda:	d8f9      	bhi.n	8003ed0 <__lshift+0x94>
 8003edc:	e7e6      	b.n	8003eac <__lshift+0x70>

08003ede <__mcmp>:
 8003ede:	6903      	ldr	r3, [r0, #16]
 8003ee0:	690a      	ldr	r2, [r1, #16]
 8003ee2:	b530      	push	{r4, r5, lr}
 8003ee4:	1a9b      	subs	r3, r3, r2
 8003ee6:	d10c      	bne.n	8003f02 <__mcmp+0x24>
 8003ee8:	0092      	lsls	r2, r2, #2
 8003eea:	3014      	adds	r0, #20
 8003eec:	3114      	adds	r1, #20
 8003eee:	1884      	adds	r4, r0, r2
 8003ef0:	4411      	add	r1, r2
 8003ef2:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8003ef6:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8003efa:	4295      	cmp	r5, r2
 8003efc:	d003      	beq.n	8003f06 <__mcmp+0x28>
 8003efe:	d305      	bcc.n	8003f0c <__mcmp+0x2e>
 8003f00:	2301      	movs	r3, #1
 8003f02:	4618      	mov	r0, r3
 8003f04:	bd30      	pop	{r4, r5, pc}
 8003f06:	42a0      	cmp	r0, r4
 8003f08:	d3f3      	bcc.n	8003ef2 <__mcmp+0x14>
 8003f0a:	e7fa      	b.n	8003f02 <__mcmp+0x24>
 8003f0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f10:	e7f7      	b.n	8003f02 <__mcmp+0x24>

08003f12 <__mdiff>:
 8003f12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f16:	460d      	mov	r5, r1
 8003f18:	4607      	mov	r7, r0
 8003f1a:	4611      	mov	r1, r2
 8003f1c:	4628      	mov	r0, r5
 8003f1e:	4614      	mov	r4, r2
 8003f20:	f7ff ffdd 	bl	8003ede <__mcmp>
 8003f24:	1e06      	subs	r6, r0, #0
 8003f26:	d108      	bne.n	8003f3a <__mdiff+0x28>
 8003f28:	4631      	mov	r1, r6
 8003f2a:	4638      	mov	r0, r7
 8003f2c:	f7ff fdcf 	bl	8003ace <_Balloc>
 8003f30:	2301      	movs	r3, #1
 8003f32:	6146      	str	r6, [r0, #20]
 8003f34:	6103      	str	r3, [r0, #16]
 8003f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f3a:	bfa4      	itt	ge
 8003f3c:	4623      	movge	r3, r4
 8003f3e:	462c      	movge	r4, r5
 8003f40:	4638      	mov	r0, r7
 8003f42:	6861      	ldr	r1, [r4, #4]
 8003f44:	bfa6      	itte	ge
 8003f46:	461d      	movge	r5, r3
 8003f48:	2600      	movge	r6, #0
 8003f4a:	2601      	movlt	r6, #1
 8003f4c:	f7ff fdbf 	bl	8003ace <_Balloc>
 8003f50:	f04f 0c00 	mov.w	ip, #0
 8003f54:	60c6      	str	r6, [r0, #12]
 8003f56:	692b      	ldr	r3, [r5, #16]
 8003f58:	6926      	ldr	r6, [r4, #16]
 8003f5a:	f104 0214 	add.w	r2, r4, #20
 8003f5e:	f105 0914 	add.w	r9, r5, #20
 8003f62:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8003f66:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8003f6a:	f100 0114 	add.w	r1, r0, #20
 8003f6e:	f852 ab04 	ldr.w	sl, [r2], #4
 8003f72:	f859 5b04 	ldr.w	r5, [r9], #4
 8003f76:	fa1f f38a 	uxth.w	r3, sl
 8003f7a:	4463      	add	r3, ip
 8003f7c:	b2ac      	uxth	r4, r5
 8003f7e:	1b1b      	subs	r3, r3, r4
 8003f80:	0c2c      	lsrs	r4, r5, #16
 8003f82:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8003f86:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8003f90:	45c8      	cmp	r8, r9
 8003f92:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8003f96:	4696      	mov	lr, r2
 8003f98:	f841 4b04 	str.w	r4, [r1], #4
 8003f9c:	d8e7      	bhi.n	8003f6e <__mdiff+0x5c>
 8003f9e:	45be      	cmp	lr, r7
 8003fa0:	d305      	bcc.n	8003fae <__mdiff+0x9c>
 8003fa2:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8003fa6:	b18b      	cbz	r3, 8003fcc <__mdiff+0xba>
 8003fa8:	6106      	str	r6, [r0, #16]
 8003faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fae:	f85e 4b04 	ldr.w	r4, [lr], #4
 8003fb2:	b2a2      	uxth	r2, r4
 8003fb4:	4462      	add	r2, ip
 8003fb6:	1413      	asrs	r3, r2, #16
 8003fb8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8003fbc:	b292      	uxth	r2, r2
 8003fbe:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8003fc2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8003fc6:	f841 2b04 	str.w	r2, [r1], #4
 8003fca:	e7e8      	b.n	8003f9e <__mdiff+0x8c>
 8003fcc:	3e01      	subs	r6, #1
 8003fce:	e7e8      	b.n	8003fa2 <__mdiff+0x90>

08003fd0 <__d2b>:
 8003fd0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003fd4:	461c      	mov	r4, r3
 8003fd6:	2101      	movs	r1, #1
 8003fd8:	4690      	mov	r8, r2
 8003fda:	9e08      	ldr	r6, [sp, #32]
 8003fdc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8003fde:	f7ff fd76 	bl	8003ace <_Balloc>
 8003fe2:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8003fe6:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8003fea:	4607      	mov	r7, r0
 8003fec:	bb34      	cbnz	r4, 800403c <__d2b+0x6c>
 8003fee:	9201      	str	r2, [sp, #4]
 8003ff0:	f1b8 0f00 	cmp.w	r8, #0
 8003ff4:	d027      	beq.n	8004046 <__d2b+0x76>
 8003ff6:	a802      	add	r0, sp, #8
 8003ff8:	f840 8d08 	str.w	r8, [r0, #-8]!
 8003ffc:	f7ff fe0c 	bl	8003c18 <__lo0bits>
 8004000:	9900      	ldr	r1, [sp, #0]
 8004002:	b1f0      	cbz	r0, 8004042 <__d2b+0x72>
 8004004:	9a01      	ldr	r2, [sp, #4]
 8004006:	f1c0 0320 	rsb	r3, r0, #32
 800400a:	fa02 f303 	lsl.w	r3, r2, r3
 800400e:	430b      	orrs	r3, r1
 8004010:	40c2      	lsrs	r2, r0
 8004012:	617b      	str	r3, [r7, #20]
 8004014:	9201      	str	r2, [sp, #4]
 8004016:	9b01      	ldr	r3, [sp, #4]
 8004018:	2b00      	cmp	r3, #0
 800401a:	bf14      	ite	ne
 800401c:	2102      	movne	r1, #2
 800401e:	2101      	moveq	r1, #1
 8004020:	61bb      	str	r3, [r7, #24]
 8004022:	6139      	str	r1, [r7, #16]
 8004024:	b1c4      	cbz	r4, 8004058 <__d2b+0x88>
 8004026:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800402a:	4404      	add	r4, r0
 800402c:	6034      	str	r4, [r6, #0]
 800402e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004032:	6028      	str	r0, [r5, #0]
 8004034:	4638      	mov	r0, r7
 8004036:	b002      	add	sp, #8
 8004038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800403c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004040:	e7d5      	b.n	8003fee <__d2b+0x1e>
 8004042:	6179      	str	r1, [r7, #20]
 8004044:	e7e7      	b.n	8004016 <__d2b+0x46>
 8004046:	a801      	add	r0, sp, #4
 8004048:	f7ff fde6 	bl	8003c18 <__lo0bits>
 800404c:	2101      	movs	r1, #1
 800404e:	9b01      	ldr	r3, [sp, #4]
 8004050:	6139      	str	r1, [r7, #16]
 8004052:	617b      	str	r3, [r7, #20]
 8004054:	3020      	adds	r0, #32
 8004056:	e7e5      	b.n	8004024 <__d2b+0x54>
 8004058:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800405c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8004060:	6030      	str	r0, [r6, #0]
 8004062:	6918      	ldr	r0, [r3, #16]
 8004064:	f7ff fdb9 	bl	8003bda <__hi0bits>
 8004068:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800406c:	e7e1      	b.n	8004032 <__d2b+0x62>

0800406e <_calloc_r>:
 800406e:	b538      	push	{r3, r4, r5, lr}
 8004070:	fb02 f401 	mul.w	r4, r2, r1
 8004074:	4621      	mov	r1, r4
 8004076:	f000 f855 	bl	8004124 <_malloc_r>
 800407a:	4605      	mov	r5, r0
 800407c:	b118      	cbz	r0, 8004086 <_calloc_r+0x18>
 800407e:	4622      	mov	r2, r4
 8004080:	2100      	movs	r1, #0
 8004082:	f7fe f9f5 	bl	8002470 <memset>
 8004086:	4628      	mov	r0, r5
 8004088:	bd38      	pop	{r3, r4, r5, pc}
	...

0800408c <_free_r>:
 800408c:	b538      	push	{r3, r4, r5, lr}
 800408e:	4605      	mov	r5, r0
 8004090:	2900      	cmp	r1, #0
 8004092:	d043      	beq.n	800411c <_free_r+0x90>
 8004094:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004098:	1f0c      	subs	r4, r1, #4
 800409a:	2b00      	cmp	r3, #0
 800409c:	bfb8      	it	lt
 800409e:	18e4      	addlt	r4, r4, r3
 80040a0:	f000 fa2a 	bl	80044f8 <__malloc_lock>
 80040a4:	4a1e      	ldr	r2, [pc, #120]	; (8004120 <_free_r+0x94>)
 80040a6:	6813      	ldr	r3, [r2, #0]
 80040a8:	4610      	mov	r0, r2
 80040aa:	b933      	cbnz	r3, 80040ba <_free_r+0x2e>
 80040ac:	6063      	str	r3, [r4, #4]
 80040ae:	6014      	str	r4, [r2, #0]
 80040b0:	4628      	mov	r0, r5
 80040b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80040b6:	f000 ba20 	b.w	80044fa <__malloc_unlock>
 80040ba:	42a3      	cmp	r3, r4
 80040bc:	d90b      	bls.n	80040d6 <_free_r+0x4a>
 80040be:	6821      	ldr	r1, [r4, #0]
 80040c0:	1862      	adds	r2, r4, r1
 80040c2:	4293      	cmp	r3, r2
 80040c4:	bf01      	itttt	eq
 80040c6:	681a      	ldreq	r2, [r3, #0]
 80040c8:	685b      	ldreq	r3, [r3, #4]
 80040ca:	1852      	addeq	r2, r2, r1
 80040cc:	6022      	streq	r2, [r4, #0]
 80040ce:	6063      	str	r3, [r4, #4]
 80040d0:	6004      	str	r4, [r0, #0]
 80040d2:	e7ed      	b.n	80040b0 <_free_r+0x24>
 80040d4:	4613      	mov	r3, r2
 80040d6:	685a      	ldr	r2, [r3, #4]
 80040d8:	b10a      	cbz	r2, 80040de <_free_r+0x52>
 80040da:	42a2      	cmp	r2, r4
 80040dc:	d9fa      	bls.n	80040d4 <_free_r+0x48>
 80040de:	6819      	ldr	r1, [r3, #0]
 80040e0:	1858      	adds	r0, r3, r1
 80040e2:	42a0      	cmp	r0, r4
 80040e4:	d10b      	bne.n	80040fe <_free_r+0x72>
 80040e6:	6820      	ldr	r0, [r4, #0]
 80040e8:	4401      	add	r1, r0
 80040ea:	1858      	adds	r0, r3, r1
 80040ec:	4282      	cmp	r2, r0
 80040ee:	6019      	str	r1, [r3, #0]
 80040f0:	d1de      	bne.n	80040b0 <_free_r+0x24>
 80040f2:	6810      	ldr	r0, [r2, #0]
 80040f4:	6852      	ldr	r2, [r2, #4]
 80040f6:	4401      	add	r1, r0
 80040f8:	6019      	str	r1, [r3, #0]
 80040fa:	605a      	str	r2, [r3, #4]
 80040fc:	e7d8      	b.n	80040b0 <_free_r+0x24>
 80040fe:	d902      	bls.n	8004106 <_free_r+0x7a>
 8004100:	230c      	movs	r3, #12
 8004102:	602b      	str	r3, [r5, #0]
 8004104:	e7d4      	b.n	80040b0 <_free_r+0x24>
 8004106:	6820      	ldr	r0, [r4, #0]
 8004108:	1821      	adds	r1, r4, r0
 800410a:	428a      	cmp	r2, r1
 800410c:	bf01      	itttt	eq
 800410e:	6811      	ldreq	r1, [r2, #0]
 8004110:	6852      	ldreq	r2, [r2, #4]
 8004112:	1809      	addeq	r1, r1, r0
 8004114:	6021      	streq	r1, [r4, #0]
 8004116:	6062      	str	r2, [r4, #4]
 8004118:	605c      	str	r4, [r3, #4]
 800411a:	e7c9      	b.n	80040b0 <_free_r+0x24>
 800411c:	bd38      	pop	{r3, r4, r5, pc}
 800411e:	bf00      	nop
 8004120:	2000024c 	.word	0x2000024c

08004124 <_malloc_r>:
 8004124:	b570      	push	{r4, r5, r6, lr}
 8004126:	1ccd      	adds	r5, r1, #3
 8004128:	f025 0503 	bic.w	r5, r5, #3
 800412c:	3508      	adds	r5, #8
 800412e:	2d0c      	cmp	r5, #12
 8004130:	bf38      	it	cc
 8004132:	250c      	movcc	r5, #12
 8004134:	2d00      	cmp	r5, #0
 8004136:	4606      	mov	r6, r0
 8004138:	db01      	blt.n	800413e <_malloc_r+0x1a>
 800413a:	42a9      	cmp	r1, r5
 800413c:	d903      	bls.n	8004146 <_malloc_r+0x22>
 800413e:	230c      	movs	r3, #12
 8004140:	6033      	str	r3, [r6, #0]
 8004142:	2000      	movs	r0, #0
 8004144:	bd70      	pop	{r4, r5, r6, pc}
 8004146:	f000 f9d7 	bl	80044f8 <__malloc_lock>
 800414a:	4a23      	ldr	r2, [pc, #140]	; (80041d8 <_malloc_r+0xb4>)
 800414c:	6814      	ldr	r4, [r2, #0]
 800414e:	4621      	mov	r1, r4
 8004150:	b991      	cbnz	r1, 8004178 <_malloc_r+0x54>
 8004152:	4c22      	ldr	r4, [pc, #136]	; (80041dc <_malloc_r+0xb8>)
 8004154:	6823      	ldr	r3, [r4, #0]
 8004156:	b91b      	cbnz	r3, 8004160 <_malloc_r+0x3c>
 8004158:	4630      	mov	r0, r6
 800415a:	f000 f991 	bl	8004480 <_sbrk_r>
 800415e:	6020      	str	r0, [r4, #0]
 8004160:	4629      	mov	r1, r5
 8004162:	4630      	mov	r0, r6
 8004164:	f000 f98c 	bl	8004480 <_sbrk_r>
 8004168:	1c43      	adds	r3, r0, #1
 800416a:	d126      	bne.n	80041ba <_malloc_r+0x96>
 800416c:	230c      	movs	r3, #12
 800416e:	4630      	mov	r0, r6
 8004170:	6033      	str	r3, [r6, #0]
 8004172:	f000 f9c2 	bl	80044fa <__malloc_unlock>
 8004176:	e7e4      	b.n	8004142 <_malloc_r+0x1e>
 8004178:	680b      	ldr	r3, [r1, #0]
 800417a:	1b5b      	subs	r3, r3, r5
 800417c:	d41a      	bmi.n	80041b4 <_malloc_r+0x90>
 800417e:	2b0b      	cmp	r3, #11
 8004180:	d90f      	bls.n	80041a2 <_malloc_r+0x7e>
 8004182:	600b      	str	r3, [r1, #0]
 8004184:	18cc      	adds	r4, r1, r3
 8004186:	50cd      	str	r5, [r1, r3]
 8004188:	4630      	mov	r0, r6
 800418a:	f000 f9b6 	bl	80044fa <__malloc_unlock>
 800418e:	f104 000b 	add.w	r0, r4, #11
 8004192:	1d23      	adds	r3, r4, #4
 8004194:	f020 0007 	bic.w	r0, r0, #7
 8004198:	1ac3      	subs	r3, r0, r3
 800419a:	d01b      	beq.n	80041d4 <_malloc_r+0xb0>
 800419c:	425a      	negs	r2, r3
 800419e:	50e2      	str	r2, [r4, r3]
 80041a0:	bd70      	pop	{r4, r5, r6, pc}
 80041a2:	428c      	cmp	r4, r1
 80041a4:	bf0b      	itete	eq
 80041a6:	6863      	ldreq	r3, [r4, #4]
 80041a8:	684b      	ldrne	r3, [r1, #4]
 80041aa:	6013      	streq	r3, [r2, #0]
 80041ac:	6063      	strne	r3, [r4, #4]
 80041ae:	bf18      	it	ne
 80041b0:	460c      	movne	r4, r1
 80041b2:	e7e9      	b.n	8004188 <_malloc_r+0x64>
 80041b4:	460c      	mov	r4, r1
 80041b6:	6849      	ldr	r1, [r1, #4]
 80041b8:	e7ca      	b.n	8004150 <_malloc_r+0x2c>
 80041ba:	1cc4      	adds	r4, r0, #3
 80041bc:	f024 0403 	bic.w	r4, r4, #3
 80041c0:	42a0      	cmp	r0, r4
 80041c2:	d005      	beq.n	80041d0 <_malloc_r+0xac>
 80041c4:	1a21      	subs	r1, r4, r0
 80041c6:	4630      	mov	r0, r6
 80041c8:	f000 f95a 	bl	8004480 <_sbrk_r>
 80041cc:	3001      	adds	r0, #1
 80041ce:	d0cd      	beq.n	800416c <_malloc_r+0x48>
 80041d0:	6025      	str	r5, [r4, #0]
 80041d2:	e7d9      	b.n	8004188 <_malloc_r+0x64>
 80041d4:	bd70      	pop	{r4, r5, r6, pc}
 80041d6:	bf00      	nop
 80041d8:	2000024c 	.word	0x2000024c
 80041dc:	20000250 	.word	0x20000250

080041e0 <__ssputs_r>:
 80041e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041e4:	688e      	ldr	r6, [r1, #8]
 80041e6:	4682      	mov	sl, r0
 80041e8:	429e      	cmp	r6, r3
 80041ea:	460c      	mov	r4, r1
 80041ec:	4691      	mov	r9, r2
 80041ee:	4698      	mov	r8, r3
 80041f0:	d835      	bhi.n	800425e <__ssputs_r+0x7e>
 80041f2:	898a      	ldrh	r2, [r1, #12]
 80041f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80041f8:	d031      	beq.n	800425e <__ssputs_r+0x7e>
 80041fa:	2302      	movs	r3, #2
 80041fc:	6825      	ldr	r5, [r4, #0]
 80041fe:	6909      	ldr	r1, [r1, #16]
 8004200:	1a6f      	subs	r7, r5, r1
 8004202:	6965      	ldr	r5, [r4, #20]
 8004204:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004208:	fb95 f5f3 	sdiv	r5, r5, r3
 800420c:	f108 0301 	add.w	r3, r8, #1
 8004210:	443b      	add	r3, r7
 8004212:	429d      	cmp	r5, r3
 8004214:	bf38      	it	cc
 8004216:	461d      	movcc	r5, r3
 8004218:	0553      	lsls	r3, r2, #21
 800421a:	d531      	bpl.n	8004280 <__ssputs_r+0xa0>
 800421c:	4629      	mov	r1, r5
 800421e:	f7ff ff81 	bl	8004124 <_malloc_r>
 8004222:	4606      	mov	r6, r0
 8004224:	b950      	cbnz	r0, 800423c <__ssputs_r+0x5c>
 8004226:	230c      	movs	r3, #12
 8004228:	f8ca 3000 	str.w	r3, [sl]
 800422c:	89a3      	ldrh	r3, [r4, #12]
 800422e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004232:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004236:	81a3      	strh	r3, [r4, #12]
 8004238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800423c:	463a      	mov	r2, r7
 800423e:	6921      	ldr	r1, [r4, #16]
 8004240:	f7ff fc3a 	bl	8003ab8 <memcpy>
 8004244:	89a3      	ldrh	r3, [r4, #12]
 8004246:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800424a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800424e:	81a3      	strh	r3, [r4, #12]
 8004250:	6126      	str	r6, [r4, #16]
 8004252:	443e      	add	r6, r7
 8004254:	6026      	str	r6, [r4, #0]
 8004256:	4646      	mov	r6, r8
 8004258:	6165      	str	r5, [r4, #20]
 800425a:	1bed      	subs	r5, r5, r7
 800425c:	60a5      	str	r5, [r4, #8]
 800425e:	4546      	cmp	r6, r8
 8004260:	bf28      	it	cs
 8004262:	4646      	movcs	r6, r8
 8004264:	4649      	mov	r1, r9
 8004266:	4632      	mov	r2, r6
 8004268:	6820      	ldr	r0, [r4, #0]
 800426a:	f000 f92b 	bl	80044c4 <memmove>
 800426e:	68a3      	ldr	r3, [r4, #8]
 8004270:	2000      	movs	r0, #0
 8004272:	1b9b      	subs	r3, r3, r6
 8004274:	60a3      	str	r3, [r4, #8]
 8004276:	6823      	ldr	r3, [r4, #0]
 8004278:	441e      	add	r6, r3
 800427a:	6026      	str	r6, [r4, #0]
 800427c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004280:	462a      	mov	r2, r5
 8004282:	f000 f93b 	bl	80044fc <_realloc_r>
 8004286:	4606      	mov	r6, r0
 8004288:	2800      	cmp	r0, #0
 800428a:	d1e1      	bne.n	8004250 <__ssputs_r+0x70>
 800428c:	6921      	ldr	r1, [r4, #16]
 800428e:	4650      	mov	r0, sl
 8004290:	f7ff fefc 	bl	800408c <_free_r>
 8004294:	e7c7      	b.n	8004226 <__ssputs_r+0x46>
	...

08004298 <_svfiprintf_r>:
 8004298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800429c:	b09d      	sub	sp, #116	; 0x74
 800429e:	9303      	str	r3, [sp, #12]
 80042a0:	898b      	ldrh	r3, [r1, #12]
 80042a2:	4680      	mov	r8, r0
 80042a4:	061c      	lsls	r4, r3, #24
 80042a6:	460d      	mov	r5, r1
 80042a8:	4616      	mov	r6, r2
 80042aa:	d50f      	bpl.n	80042cc <_svfiprintf_r+0x34>
 80042ac:	690b      	ldr	r3, [r1, #16]
 80042ae:	b96b      	cbnz	r3, 80042cc <_svfiprintf_r+0x34>
 80042b0:	2140      	movs	r1, #64	; 0x40
 80042b2:	f7ff ff37 	bl	8004124 <_malloc_r>
 80042b6:	6028      	str	r0, [r5, #0]
 80042b8:	6128      	str	r0, [r5, #16]
 80042ba:	b928      	cbnz	r0, 80042c8 <_svfiprintf_r+0x30>
 80042bc:	230c      	movs	r3, #12
 80042be:	f8c8 3000 	str.w	r3, [r8]
 80042c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80042c6:	e0c4      	b.n	8004452 <_svfiprintf_r+0x1ba>
 80042c8:	2340      	movs	r3, #64	; 0x40
 80042ca:	616b      	str	r3, [r5, #20]
 80042cc:	2300      	movs	r3, #0
 80042ce:	9309      	str	r3, [sp, #36]	; 0x24
 80042d0:	2320      	movs	r3, #32
 80042d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80042d6:	2330      	movs	r3, #48	; 0x30
 80042d8:	f04f 0b01 	mov.w	fp, #1
 80042dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80042e0:	4637      	mov	r7, r6
 80042e2:	463c      	mov	r4, r7
 80042e4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d13c      	bne.n	8004366 <_svfiprintf_r+0xce>
 80042ec:	ebb7 0a06 	subs.w	sl, r7, r6
 80042f0:	d00b      	beq.n	800430a <_svfiprintf_r+0x72>
 80042f2:	4653      	mov	r3, sl
 80042f4:	4632      	mov	r2, r6
 80042f6:	4629      	mov	r1, r5
 80042f8:	4640      	mov	r0, r8
 80042fa:	f7ff ff71 	bl	80041e0 <__ssputs_r>
 80042fe:	3001      	adds	r0, #1
 8004300:	f000 80a2 	beq.w	8004448 <_svfiprintf_r+0x1b0>
 8004304:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004306:	4453      	add	r3, sl
 8004308:	9309      	str	r3, [sp, #36]	; 0x24
 800430a:	783b      	ldrb	r3, [r7, #0]
 800430c:	2b00      	cmp	r3, #0
 800430e:	f000 809b 	beq.w	8004448 <_svfiprintf_r+0x1b0>
 8004312:	2300      	movs	r3, #0
 8004314:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004318:	9304      	str	r3, [sp, #16]
 800431a:	9307      	str	r3, [sp, #28]
 800431c:	9205      	str	r2, [sp, #20]
 800431e:	9306      	str	r3, [sp, #24]
 8004320:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004324:	931a      	str	r3, [sp, #104]	; 0x68
 8004326:	2205      	movs	r2, #5
 8004328:	7821      	ldrb	r1, [r4, #0]
 800432a:	4850      	ldr	r0, [pc, #320]	; (800446c <_svfiprintf_r+0x1d4>)
 800432c:	f7ff fbb6 	bl	8003a9c <memchr>
 8004330:	1c67      	adds	r7, r4, #1
 8004332:	9b04      	ldr	r3, [sp, #16]
 8004334:	b9d8      	cbnz	r0, 800436e <_svfiprintf_r+0xd6>
 8004336:	06d9      	lsls	r1, r3, #27
 8004338:	bf44      	itt	mi
 800433a:	2220      	movmi	r2, #32
 800433c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004340:	071a      	lsls	r2, r3, #28
 8004342:	bf44      	itt	mi
 8004344:	222b      	movmi	r2, #43	; 0x2b
 8004346:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800434a:	7822      	ldrb	r2, [r4, #0]
 800434c:	2a2a      	cmp	r2, #42	; 0x2a
 800434e:	d016      	beq.n	800437e <_svfiprintf_r+0xe6>
 8004350:	2100      	movs	r1, #0
 8004352:	200a      	movs	r0, #10
 8004354:	9a07      	ldr	r2, [sp, #28]
 8004356:	4627      	mov	r7, r4
 8004358:	783b      	ldrb	r3, [r7, #0]
 800435a:	3401      	adds	r4, #1
 800435c:	3b30      	subs	r3, #48	; 0x30
 800435e:	2b09      	cmp	r3, #9
 8004360:	d950      	bls.n	8004404 <_svfiprintf_r+0x16c>
 8004362:	b1c9      	cbz	r1, 8004398 <_svfiprintf_r+0x100>
 8004364:	e011      	b.n	800438a <_svfiprintf_r+0xf2>
 8004366:	2b25      	cmp	r3, #37	; 0x25
 8004368:	d0c0      	beq.n	80042ec <_svfiprintf_r+0x54>
 800436a:	4627      	mov	r7, r4
 800436c:	e7b9      	b.n	80042e2 <_svfiprintf_r+0x4a>
 800436e:	4a3f      	ldr	r2, [pc, #252]	; (800446c <_svfiprintf_r+0x1d4>)
 8004370:	463c      	mov	r4, r7
 8004372:	1a80      	subs	r0, r0, r2
 8004374:	fa0b f000 	lsl.w	r0, fp, r0
 8004378:	4318      	orrs	r0, r3
 800437a:	9004      	str	r0, [sp, #16]
 800437c:	e7d3      	b.n	8004326 <_svfiprintf_r+0x8e>
 800437e:	9a03      	ldr	r2, [sp, #12]
 8004380:	1d11      	adds	r1, r2, #4
 8004382:	6812      	ldr	r2, [r2, #0]
 8004384:	9103      	str	r1, [sp, #12]
 8004386:	2a00      	cmp	r2, #0
 8004388:	db01      	blt.n	800438e <_svfiprintf_r+0xf6>
 800438a:	9207      	str	r2, [sp, #28]
 800438c:	e004      	b.n	8004398 <_svfiprintf_r+0x100>
 800438e:	4252      	negs	r2, r2
 8004390:	f043 0302 	orr.w	r3, r3, #2
 8004394:	9207      	str	r2, [sp, #28]
 8004396:	9304      	str	r3, [sp, #16]
 8004398:	783b      	ldrb	r3, [r7, #0]
 800439a:	2b2e      	cmp	r3, #46	; 0x2e
 800439c:	d10d      	bne.n	80043ba <_svfiprintf_r+0x122>
 800439e:	787b      	ldrb	r3, [r7, #1]
 80043a0:	1c79      	adds	r1, r7, #1
 80043a2:	2b2a      	cmp	r3, #42	; 0x2a
 80043a4:	d132      	bne.n	800440c <_svfiprintf_r+0x174>
 80043a6:	9b03      	ldr	r3, [sp, #12]
 80043a8:	3702      	adds	r7, #2
 80043aa:	1d1a      	adds	r2, r3, #4
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	9203      	str	r2, [sp, #12]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	bfb8      	it	lt
 80043b4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80043b8:	9305      	str	r3, [sp, #20]
 80043ba:	4c2d      	ldr	r4, [pc, #180]	; (8004470 <_svfiprintf_r+0x1d8>)
 80043bc:	2203      	movs	r2, #3
 80043be:	7839      	ldrb	r1, [r7, #0]
 80043c0:	4620      	mov	r0, r4
 80043c2:	f7ff fb6b 	bl	8003a9c <memchr>
 80043c6:	b138      	cbz	r0, 80043d8 <_svfiprintf_r+0x140>
 80043c8:	2340      	movs	r3, #64	; 0x40
 80043ca:	1b00      	subs	r0, r0, r4
 80043cc:	fa03 f000 	lsl.w	r0, r3, r0
 80043d0:	9b04      	ldr	r3, [sp, #16]
 80043d2:	3701      	adds	r7, #1
 80043d4:	4303      	orrs	r3, r0
 80043d6:	9304      	str	r3, [sp, #16]
 80043d8:	7839      	ldrb	r1, [r7, #0]
 80043da:	2206      	movs	r2, #6
 80043dc:	4825      	ldr	r0, [pc, #148]	; (8004474 <_svfiprintf_r+0x1dc>)
 80043de:	1c7e      	adds	r6, r7, #1
 80043e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80043e4:	f7ff fb5a 	bl	8003a9c <memchr>
 80043e8:	2800      	cmp	r0, #0
 80043ea:	d035      	beq.n	8004458 <_svfiprintf_r+0x1c0>
 80043ec:	4b22      	ldr	r3, [pc, #136]	; (8004478 <_svfiprintf_r+0x1e0>)
 80043ee:	b9fb      	cbnz	r3, 8004430 <_svfiprintf_r+0x198>
 80043f0:	9b03      	ldr	r3, [sp, #12]
 80043f2:	3307      	adds	r3, #7
 80043f4:	f023 0307 	bic.w	r3, r3, #7
 80043f8:	3308      	adds	r3, #8
 80043fa:	9303      	str	r3, [sp, #12]
 80043fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043fe:	444b      	add	r3, r9
 8004400:	9309      	str	r3, [sp, #36]	; 0x24
 8004402:	e76d      	b.n	80042e0 <_svfiprintf_r+0x48>
 8004404:	fb00 3202 	mla	r2, r0, r2, r3
 8004408:	2101      	movs	r1, #1
 800440a:	e7a4      	b.n	8004356 <_svfiprintf_r+0xbe>
 800440c:	2300      	movs	r3, #0
 800440e:	240a      	movs	r4, #10
 8004410:	4618      	mov	r0, r3
 8004412:	9305      	str	r3, [sp, #20]
 8004414:	460f      	mov	r7, r1
 8004416:	783a      	ldrb	r2, [r7, #0]
 8004418:	3101      	adds	r1, #1
 800441a:	3a30      	subs	r2, #48	; 0x30
 800441c:	2a09      	cmp	r2, #9
 800441e:	d903      	bls.n	8004428 <_svfiprintf_r+0x190>
 8004420:	2b00      	cmp	r3, #0
 8004422:	d0ca      	beq.n	80043ba <_svfiprintf_r+0x122>
 8004424:	9005      	str	r0, [sp, #20]
 8004426:	e7c8      	b.n	80043ba <_svfiprintf_r+0x122>
 8004428:	fb04 2000 	mla	r0, r4, r0, r2
 800442c:	2301      	movs	r3, #1
 800442e:	e7f1      	b.n	8004414 <_svfiprintf_r+0x17c>
 8004430:	ab03      	add	r3, sp, #12
 8004432:	9300      	str	r3, [sp, #0]
 8004434:	462a      	mov	r2, r5
 8004436:	4b11      	ldr	r3, [pc, #68]	; (800447c <_svfiprintf_r+0x1e4>)
 8004438:	a904      	add	r1, sp, #16
 800443a:	4640      	mov	r0, r8
 800443c:	f7fe f8b2 	bl	80025a4 <_printf_float>
 8004440:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8004444:	4681      	mov	r9, r0
 8004446:	d1d9      	bne.n	80043fc <_svfiprintf_r+0x164>
 8004448:	89ab      	ldrh	r3, [r5, #12]
 800444a:	065b      	lsls	r3, r3, #25
 800444c:	f53f af39 	bmi.w	80042c2 <_svfiprintf_r+0x2a>
 8004450:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004452:	b01d      	add	sp, #116	; 0x74
 8004454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004458:	ab03      	add	r3, sp, #12
 800445a:	9300      	str	r3, [sp, #0]
 800445c:	462a      	mov	r2, r5
 800445e:	4b07      	ldr	r3, [pc, #28]	; (800447c <_svfiprintf_r+0x1e4>)
 8004460:	a904      	add	r1, sp, #16
 8004462:	4640      	mov	r0, r8
 8004464:	f7fe fb4e 	bl	8002b04 <_printf_i>
 8004468:	e7ea      	b.n	8004440 <_svfiprintf_r+0x1a8>
 800446a:	bf00      	nop
 800446c:	0800472c 	.word	0x0800472c
 8004470:	08004732 	.word	0x08004732
 8004474:	08004736 	.word	0x08004736
 8004478:	080025a5 	.word	0x080025a5
 800447c:	080041e1 	.word	0x080041e1

08004480 <_sbrk_r>:
 8004480:	b538      	push	{r3, r4, r5, lr}
 8004482:	2300      	movs	r3, #0
 8004484:	4c05      	ldr	r4, [pc, #20]	; (800449c <_sbrk_r+0x1c>)
 8004486:	4605      	mov	r5, r0
 8004488:	4608      	mov	r0, r1
 800448a:	6023      	str	r3, [r4, #0]
 800448c:	f7fd ff60 	bl	8002350 <_sbrk>
 8004490:	1c43      	adds	r3, r0, #1
 8004492:	d102      	bne.n	800449a <_sbrk_r+0x1a>
 8004494:	6823      	ldr	r3, [r4, #0]
 8004496:	b103      	cbz	r3, 800449a <_sbrk_r+0x1a>
 8004498:	602b      	str	r3, [r5, #0]
 800449a:	bd38      	pop	{r3, r4, r5, pc}
 800449c:	2000033c 	.word	0x2000033c

080044a0 <__ascii_mbtowc>:
 80044a0:	b082      	sub	sp, #8
 80044a2:	b901      	cbnz	r1, 80044a6 <__ascii_mbtowc+0x6>
 80044a4:	a901      	add	r1, sp, #4
 80044a6:	b142      	cbz	r2, 80044ba <__ascii_mbtowc+0x1a>
 80044a8:	b14b      	cbz	r3, 80044be <__ascii_mbtowc+0x1e>
 80044aa:	7813      	ldrb	r3, [r2, #0]
 80044ac:	600b      	str	r3, [r1, #0]
 80044ae:	7812      	ldrb	r2, [r2, #0]
 80044b0:	1c10      	adds	r0, r2, #0
 80044b2:	bf18      	it	ne
 80044b4:	2001      	movne	r0, #1
 80044b6:	b002      	add	sp, #8
 80044b8:	4770      	bx	lr
 80044ba:	4610      	mov	r0, r2
 80044bc:	e7fb      	b.n	80044b6 <__ascii_mbtowc+0x16>
 80044be:	f06f 0001 	mvn.w	r0, #1
 80044c2:	e7f8      	b.n	80044b6 <__ascii_mbtowc+0x16>

080044c4 <memmove>:
 80044c4:	4288      	cmp	r0, r1
 80044c6:	b510      	push	{r4, lr}
 80044c8:	eb01 0302 	add.w	r3, r1, r2
 80044cc:	d803      	bhi.n	80044d6 <memmove+0x12>
 80044ce:	1e42      	subs	r2, r0, #1
 80044d0:	4299      	cmp	r1, r3
 80044d2:	d10c      	bne.n	80044ee <memmove+0x2a>
 80044d4:	bd10      	pop	{r4, pc}
 80044d6:	4298      	cmp	r0, r3
 80044d8:	d2f9      	bcs.n	80044ce <memmove+0xa>
 80044da:	1881      	adds	r1, r0, r2
 80044dc:	1ad2      	subs	r2, r2, r3
 80044de:	42d3      	cmn	r3, r2
 80044e0:	d100      	bne.n	80044e4 <memmove+0x20>
 80044e2:	bd10      	pop	{r4, pc}
 80044e4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80044e8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80044ec:	e7f7      	b.n	80044de <memmove+0x1a>
 80044ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80044f2:	f802 4f01 	strb.w	r4, [r2, #1]!
 80044f6:	e7eb      	b.n	80044d0 <memmove+0xc>

080044f8 <__malloc_lock>:
 80044f8:	4770      	bx	lr

080044fa <__malloc_unlock>:
 80044fa:	4770      	bx	lr

080044fc <_realloc_r>:
 80044fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044fe:	4607      	mov	r7, r0
 8004500:	4614      	mov	r4, r2
 8004502:	460e      	mov	r6, r1
 8004504:	b921      	cbnz	r1, 8004510 <_realloc_r+0x14>
 8004506:	4611      	mov	r1, r2
 8004508:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800450c:	f7ff be0a 	b.w	8004124 <_malloc_r>
 8004510:	b922      	cbnz	r2, 800451c <_realloc_r+0x20>
 8004512:	f7ff fdbb 	bl	800408c <_free_r>
 8004516:	4625      	mov	r5, r4
 8004518:	4628      	mov	r0, r5
 800451a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800451c:	f000 f821 	bl	8004562 <_malloc_usable_size_r>
 8004520:	4284      	cmp	r4, r0
 8004522:	d90f      	bls.n	8004544 <_realloc_r+0x48>
 8004524:	4621      	mov	r1, r4
 8004526:	4638      	mov	r0, r7
 8004528:	f7ff fdfc 	bl	8004124 <_malloc_r>
 800452c:	4605      	mov	r5, r0
 800452e:	2800      	cmp	r0, #0
 8004530:	d0f2      	beq.n	8004518 <_realloc_r+0x1c>
 8004532:	4631      	mov	r1, r6
 8004534:	4622      	mov	r2, r4
 8004536:	f7ff fabf 	bl	8003ab8 <memcpy>
 800453a:	4631      	mov	r1, r6
 800453c:	4638      	mov	r0, r7
 800453e:	f7ff fda5 	bl	800408c <_free_r>
 8004542:	e7e9      	b.n	8004518 <_realloc_r+0x1c>
 8004544:	4635      	mov	r5, r6
 8004546:	e7e7      	b.n	8004518 <_realloc_r+0x1c>

08004548 <__ascii_wctomb>:
 8004548:	b149      	cbz	r1, 800455e <__ascii_wctomb+0x16>
 800454a:	2aff      	cmp	r2, #255	; 0xff
 800454c:	bf8b      	itete	hi
 800454e:	238a      	movhi	r3, #138	; 0x8a
 8004550:	700a      	strbls	r2, [r1, #0]
 8004552:	6003      	strhi	r3, [r0, #0]
 8004554:	2001      	movls	r0, #1
 8004556:	bf88      	it	hi
 8004558:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800455c:	4770      	bx	lr
 800455e:	4608      	mov	r0, r1
 8004560:	4770      	bx	lr

08004562 <_malloc_usable_size_r>:
 8004562:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8004566:	2800      	cmp	r0, #0
 8004568:	f1a0 0004 	sub.w	r0, r0, #4
 800456c:	bfbc      	itt	lt
 800456e:	580b      	ldrlt	r3, [r1, r0]
 8004570:	18c0      	addlt	r0, r0, r3
 8004572:	4770      	bx	lr

08004574 <_init>:
 8004574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004576:	bf00      	nop
 8004578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800457a:	bc08      	pop	{r3}
 800457c:	469e      	mov	lr, r3
 800457e:	4770      	bx	lr

08004580 <_fini>:
 8004580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004582:	bf00      	nop
 8004584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004586:	bc08      	pop	{r3}
 8004588:	469e      	mov	lr, r3
 800458a:	4770      	bx	lr
