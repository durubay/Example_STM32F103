
usb_rtc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038d4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  080039e0  080039e0  000139e0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003ab0  08003ab0  00013ab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003ab4  08003ab4  00013ab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001e0  20000000  08003ab8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000012bc  200001e0  08003c98  000201e0  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2000149c  08003c98  0002149c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001a9c1  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003fb3  00000000  00000000  0003abca  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005c31  00000000  00000000  0003eb7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000b08  00000000  00000000  000447b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000e38  00000000  00000000  000452b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000065e7  00000000  00000000  000460f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000035ac  00000000  00000000  0004c6d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004fc83  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001e20  00000000  00000000  0004fd00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e0 	.word	0x200001e0
 8000128:	00000000 	.word	0x00000000
 800012c:	080039c8 	.word	0x080039c8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001e4 	.word	0x200001e4
 8000148:	080039c8 	.word	0x080039c8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800015c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800015e:	4b0e      	ldr	r3, [pc, #56]	; (8000198 <HAL_InitTick+0x3c>)
{
 8000160:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000162:	7818      	ldrb	r0, [r3, #0]
 8000164:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000168:	fbb3 f3f0 	udiv	r3, r3, r0
 800016c:	4a0b      	ldr	r2, [pc, #44]	; (800019c <HAL_InitTick+0x40>)
 800016e:	6810      	ldr	r0, [r2, #0]
 8000170:	fbb0 f0f3 	udiv	r0, r0, r3
 8000174:	f000 f89e 	bl	80002b4 <HAL_SYSTICK_Config>
 8000178:	4604      	mov	r4, r0
 800017a:	b958      	cbnz	r0, 8000194 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800017c:	2d0f      	cmp	r5, #15
 800017e:	d809      	bhi.n	8000194 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000180:	4602      	mov	r2, r0
 8000182:	4629      	mov	r1, r5
 8000184:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000188:	f000 f854 	bl	8000234 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <HAL_InitTick+0x44>)
 800018e:	4620      	mov	r0, r4
 8000190:	601d      	str	r5, [r3, #0]
 8000192:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000194:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000196:	bd38      	pop	{r3, r4, r5, pc}
 8000198:	20000000 	.word	0x20000000
 800019c:	20000118 	.word	0x20000118
 80001a0:	20000004 	.word	0x20000004

080001a4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001a4:	4a07      	ldr	r2, [pc, #28]	; (80001c4 <HAL_Init+0x20>)
{
 80001a6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001a8:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001aa:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001ac:	f043 0310 	orr.w	r3, r3, #16
 80001b0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001b2:	f000 f82d 	bl	8000210 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001b6:	2000      	movs	r0, #0
 80001b8:	f7ff ffd0 	bl	800015c <HAL_InitTick>
  HAL_MspInit();
 80001bc:	f002 fcd8 	bl	8002b70 <HAL_MspInit>
}
 80001c0:	2000      	movs	r0, #0
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	40022000 	.word	0x40022000

080001c8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001c8:	4a03      	ldr	r2, [pc, #12]	; (80001d8 <HAL_IncTick+0x10>)
 80001ca:	4b04      	ldr	r3, [pc, #16]	; (80001dc <HAL_IncTick+0x14>)
 80001cc:	6811      	ldr	r1, [r2, #0]
 80001ce:	781b      	ldrb	r3, [r3, #0]
 80001d0:	440b      	add	r3, r1
 80001d2:	6013      	str	r3, [r2, #0]
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	2000042c 	.word	0x2000042c
 80001dc:	20000000 	.word	0x20000000

080001e0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001e0:	4b01      	ldr	r3, [pc, #4]	; (80001e8 <HAL_GetTick+0x8>)
 80001e2:	6818      	ldr	r0, [r3, #0]
}
 80001e4:	4770      	bx	lr
 80001e6:	bf00      	nop
 80001e8:	2000042c 	.word	0x2000042c

080001ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80001ec:	b538      	push	{r3, r4, r5, lr}
 80001ee:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80001f0:	f7ff fff6 	bl	80001e0 <HAL_GetTick>
 80001f4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001f6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80001f8:	bf1e      	ittt	ne
 80001fa:	4b04      	ldrne	r3, [pc, #16]	; (800020c <HAL_Delay+0x20>)
 80001fc:	781b      	ldrbne	r3, [r3, #0]
 80001fe:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000200:	f7ff ffee 	bl	80001e0 <HAL_GetTick>
 8000204:	1b40      	subs	r0, r0, r5
 8000206:	4284      	cmp	r4, r0
 8000208:	d8fa      	bhi.n	8000200 <HAL_Delay+0x14>
  {
  }
}
 800020a:	bd38      	pop	{r3, r4, r5, pc}
 800020c:	20000000 	.word	0x20000000

08000210 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000210:	4a07      	ldr	r2, [pc, #28]	; (8000230 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000212:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000214:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000216:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800021a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800021e:	041b      	lsls	r3, r3, #16
 8000220:	0c1b      	lsrs	r3, r3, #16
 8000222:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000226:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800022a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800022c:	60d3      	str	r3, [r2, #12]
 800022e:	4770      	bx	lr
 8000230:	e000ed00 	.word	0xe000ed00

08000234 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000234:	4b17      	ldr	r3, [pc, #92]	; (8000294 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000236:	b530      	push	{r4, r5, lr}
 8000238:	68dc      	ldr	r4, [r3, #12]
 800023a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800023e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000242:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000244:	2b04      	cmp	r3, #4
 8000246:	bf28      	it	cs
 8000248:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800024a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800024c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000250:	bf98      	it	ls
 8000252:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000254:	fa05 f303 	lsl.w	r3, r5, r3
 8000258:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800025c:	bf88      	it	hi
 800025e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000260:	4019      	ands	r1, r3
 8000262:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000264:	fa05 f404 	lsl.w	r4, r5, r4
 8000268:	3c01      	subs	r4, #1
 800026a:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800026c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800026e:	ea42 0201 	orr.w	r2, r2, r1
 8000272:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000276:	bfaf      	iteee	ge
 8000278:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027c:	4b06      	ldrlt	r3, [pc, #24]	; (8000298 <HAL_NVIC_SetPriority+0x64>)
 800027e:	f000 000f 	andlt.w	r0, r0, #15
 8000282:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000284:	bfa5      	ittet	ge
 8000286:	b2d2      	uxtbge	r2, r2
 8000288:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800028c:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800028e:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000292:	bd30      	pop	{r4, r5, pc}
 8000294:	e000ed00 	.word	0xe000ed00
 8000298:	e000ed14 	.word	0xe000ed14

0800029c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800029c:	2301      	movs	r3, #1
 800029e:	0942      	lsrs	r2, r0, #5
 80002a0:	f000 001f 	and.w	r0, r0, #31
 80002a4:	fa03 f000 	lsl.w	r0, r3, r0
 80002a8:	4b01      	ldr	r3, [pc, #4]	; (80002b0 <HAL_NVIC_EnableIRQ+0x14>)
 80002aa:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80002ae:	4770      	bx	lr
 80002b0:	e000e100 	.word	0xe000e100

080002b4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002b4:	3801      	subs	r0, #1
 80002b6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002ba:	d20a      	bcs.n	80002d2 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002bc:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002be:	4b06      	ldr	r3, [pc, #24]	; (80002d8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c0:	4a06      	ldr	r2, [pc, #24]	; (80002dc <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002c2:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002c8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002ca:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002cc:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002ce:	601a      	str	r2, [r3, #0]
 80002d0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002d2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	e000e010 	.word	0xe000e010
 80002dc:	e000ed00 	.word	0xe000ed00

080002e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80002e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80002e4:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80002e6:	4616      	mov	r6, r2
 80002e8:	4b65      	ldr	r3, [pc, #404]	; (8000480 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80002ea:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8000490 <HAL_GPIO_Init+0x1b0>
 80002ee:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8000494 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 80002f2:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002f6:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 80002f8:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002fc:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8000300:	45a0      	cmp	r8, r4
 8000302:	d17f      	bne.n	8000404 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8000304:	684d      	ldr	r5, [r1, #4]
 8000306:	2d12      	cmp	r5, #18
 8000308:	f000 80af 	beq.w	800046a <HAL_GPIO_Init+0x18a>
 800030c:	f200 8088 	bhi.w	8000420 <HAL_GPIO_Init+0x140>
 8000310:	2d02      	cmp	r5, #2
 8000312:	f000 80a7 	beq.w	8000464 <HAL_GPIO_Init+0x184>
 8000316:	d87c      	bhi.n	8000412 <HAL_GPIO_Init+0x132>
 8000318:	2d00      	cmp	r5, #0
 800031a:	f000 808e 	beq.w	800043a <HAL_GPIO_Init+0x15a>
 800031e:	2d01      	cmp	r5, #1
 8000320:	f000 809e 	beq.w	8000460 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000324:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000328:	2cff      	cmp	r4, #255	; 0xff
 800032a:	bf93      	iteet	ls
 800032c:	4682      	movls	sl, r0
 800032e:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000332:	3d08      	subhi	r5, #8
 8000334:	f8d0 b000 	ldrls.w	fp, [r0]
 8000338:	bf92      	itee	ls
 800033a:	00b5      	lslls	r5, r6, #2
 800033c:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000340:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000342:	fa09 f805 	lsl.w	r8, r9, r5
 8000346:	ea2b 0808 	bic.w	r8, fp, r8
 800034a:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800034e:	bf88      	it	hi
 8000350:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000354:	ea48 0505 	orr.w	r5, r8, r5
 8000358:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800035c:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000360:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000364:	d04e      	beq.n	8000404 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000366:	4d47      	ldr	r5, [pc, #284]	; (8000484 <HAL_GPIO_Init+0x1a4>)
 8000368:	4f46      	ldr	r7, [pc, #280]	; (8000484 <HAL_GPIO_Init+0x1a4>)
 800036a:	69ad      	ldr	r5, [r5, #24]
 800036c:	f026 0803 	bic.w	r8, r6, #3
 8000370:	f045 0501 	orr.w	r5, r5, #1
 8000374:	61bd      	str	r5, [r7, #24]
 8000376:	69bd      	ldr	r5, [r7, #24]
 8000378:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 800037c:	f005 0501 	and.w	r5, r5, #1
 8000380:	9501      	str	r5, [sp, #4]
 8000382:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000386:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800038a:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800038c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8000390:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000394:	fa09 f90b 	lsl.w	r9, r9, fp
 8000398:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800039c:	4d3a      	ldr	r5, [pc, #232]	; (8000488 <HAL_GPIO_Init+0x1a8>)
 800039e:	42a8      	cmp	r0, r5
 80003a0:	d068      	beq.n	8000474 <HAL_GPIO_Init+0x194>
 80003a2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003a6:	42a8      	cmp	r0, r5
 80003a8:	d066      	beq.n	8000478 <HAL_GPIO_Init+0x198>
 80003aa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003ae:	42a8      	cmp	r0, r5
 80003b0:	d064      	beq.n	800047c <HAL_GPIO_Init+0x19c>
 80003b2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003b6:	42a8      	cmp	r0, r5
 80003b8:	bf0c      	ite	eq
 80003ba:	2503      	moveq	r5, #3
 80003bc:	2504      	movne	r5, #4
 80003be:	fa05 f50b 	lsl.w	r5, r5, fp
 80003c2:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 80003c6:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80003ca:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80003cc:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80003d0:	bf14      	ite	ne
 80003d2:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80003d4:	43a5      	biceq	r5, r4
 80003d6:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80003d8:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80003da:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80003de:	bf14      	ite	ne
 80003e0:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80003e2:	43a5      	biceq	r5, r4
 80003e4:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80003e6:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80003e8:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80003ec:	bf14      	ite	ne
 80003ee:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80003f0:	43a5      	biceq	r5, r4
 80003f2:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80003f4:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80003f6:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80003fa:	bf14      	ite	ne
 80003fc:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80003fe:	ea25 0404 	biceq.w	r4, r5, r4
 8000402:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000404:	3601      	adds	r6, #1
 8000406:	2e10      	cmp	r6, #16
 8000408:	f47f af73 	bne.w	80002f2 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 800040c:	b003      	add	sp, #12
 800040e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8000412:	2d03      	cmp	r5, #3
 8000414:	d022      	beq.n	800045c <HAL_GPIO_Init+0x17c>
 8000416:	2d11      	cmp	r5, #17
 8000418:	d184      	bne.n	8000324 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800041a:	68ca      	ldr	r2, [r1, #12]
 800041c:	3204      	adds	r2, #4
          break;
 800041e:	e781      	b.n	8000324 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000420:	4f1a      	ldr	r7, [pc, #104]	; (800048c <HAL_GPIO_Init+0x1ac>)
 8000422:	42bd      	cmp	r5, r7
 8000424:	d009      	beq.n	800043a <HAL_GPIO_Init+0x15a>
 8000426:	d812      	bhi.n	800044e <HAL_GPIO_Init+0x16e>
 8000428:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8000498 <HAL_GPIO_Init+0x1b8>
 800042c:	454d      	cmp	r5, r9
 800042e:	d004      	beq.n	800043a <HAL_GPIO_Init+0x15a>
 8000430:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000434:	454d      	cmp	r5, r9
 8000436:	f47f af75 	bne.w	8000324 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800043a:	688a      	ldr	r2, [r1, #8]
 800043c:	b1c2      	cbz	r2, 8000470 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800043e:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000440:	bf0c      	ite	eq
 8000442:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000446:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800044a:	2208      	movs	r2, #8
 800044c:	e76a      	b.n	8000324 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 800044e:	4575      	cmp	r5, lr
 8000450:	d0f3      	beq.n	800043a <HAL_GPIO_Init+0x15a>
 8000452:	4565      	cmp	r5, ip
 8000454:	d0f1      	beq.n	800043a <HAL_GPIO_Init+0x15a>
 8000456:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800049c <HAL_GPIO_Init+0x1bc>
 800045a:	e7eb      	b.n	8000434 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800045c:	2200      	movs	r2, #0
 800045e:	e761      	b.n	8000324 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000460:	68ca      	ldr	r2, [r1, #12]
          break;
 8000462:	e75f      	b.n	8000324 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000464:	68ca      	ldr	r2, [r1, #12]
 8000466:	3208      	adds	r2, #8
          break;
 8000468:	e75c      	b.n	8000324 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800046a:	68ca      	ldr	r2, [r1, #12]
 800046c:	320c      	adds	r2, #12
          break;
 800046e:	e759      	b.n	8000324 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000470:	2204      	movs	r2, #4
 8000472:	e757      	b.n	8000324 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000474:	2500      	movs	r5, #0
 8000476:	e7a2      	b.n	80003be <HAL_GPIO_Init+0xde>
 8000478:	2501      	movs	r5, #1
 800047a:	e7a0      	b.n	80003be <HAL_GPIO_Init+0xde>
 800047c:	2502      	movs	r5, #2
 800047e:	e79e      	b.n	80003be <HAL_GPIO_Init+0xde>
 8000480:	40010400 	.word	0x40010400
 8000484:	40021000 	.word	0x40021000
 8000488:	40010800 	.word	0x40010800
 800048c:	10210000 	.word	0x10210000
 8000490:	10310000 	.word	0x10310000
 8000494:	10320000 	.word	0x10320000
 8000498:	10110000 	.word	0x10110000
 800049c:	10220000 	.word	0x10220000

080004a0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80004a0:	b10a      	cbz	r2, 80004a6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80004a2:	6101      	str	r1, [r0, #16]
 80004a4:	4770      	bx	lr
 80004a6:	0409      	lsls	r1, r1, #16
 80004a8:	e7fb      	b.n	80004a2 <HAL_GPIO_WritePin+0x2>

080004aa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80004aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t index = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 80004ae:	4604      	mov	r4, r0
{
 80004b0:	b086      	sub	sp, #24
  if(hpcd == NULL)
 80004b2:	2800      	cmp	r0, #0
 80004b4:	d060      	beq.n	8000578 <HAL_PCD_Init+0xce>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 80004b6:	f890 3429 	ldrb.w	r3, [r0, #1065]	; 0x429
 80004ba:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80004be:	b91b      	cbnz	r3, 80004c8 <HAL_PCD_Init+0x1e>
  {  
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80004c0:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80004c4:	f002 fc48 	bl	8002d58 <HAL_PCD_MspInit>
  }
  
  hpcd->State = HAL_PCD_STATE_BUSY;
  
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80004c8:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 80004ca:	2303      	movs	r3, #3

  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 80004cc:	466e      	mov	r6, sp
  __HAL_PCD_DISABLE(hpcd);
 80004ce:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 80004d2:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
  __HAL_PCD_DISABLE(hpcd);
 80004d6:	f001 fa11 	bl	80018fc <USB_DisableGlobalInt>
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 80004da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004dc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80004de:	682b      	ldr	r3, [r5, #0]
 80004e0:	f104 0804 	add.w	r8, r4, #4
 80004e4:	6033      	str	r3, [r6, #0]
 80004e6:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 80004ea:	6820      	ldr	r0, [r4, #0]
 80004ec:	f001 f9f6 	bl	80018dc <USB_CoreInit>
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 80004f0:	2100      	movs	r1, #0
 80004f2:	6820      	ldr	r0, [r4, #0]
 80004f4:	f001 fa0c 	bl	8001910 <USB_SetCurrentMode>
 
  /* Init endpoints structures */
  for (index = 0U; index < 15U ; index++)
 80004f8:	2100      	movs	r1, #0
 80004fa:	4623      	mov	r3, r4
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 80004fc:	4622      	mov	r2, r4
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1U;
 80004fe:	2601      	movs	r6, #1
    hpcd->IN_ep[index].num = index;
    hpcd->IN_ep[index].tx_fifo_num = index;
    /* Control until ep is actvated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 8000500:	4608      	mov	r0, r1
 8000502:	f104 0510 	add.w	r5, r4, #16
    hpcd->IN_ep[index].num = index;
 8000506:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
    hpcd->IN_ep[index].tx_fifo_num = index;
 800050a:	8691      	strh	r1, [r2, #52]	; 0x34
  for (index = 0U; index < 15U ; index++)
 800050c:	3101      	adds	r1, #1
 800050e:	290f      	cmp	r1, #15
    hpcd->IN_ep[index].is_in = 1U;
 8000510:	f882 6029 	strb.w	r6, [r2, #41]	; 0x29
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 8000514:	f882 002b 	strb.w	r0, [r2, #43]	; 0x2b
    hpcd->IN_ep[index].maxpacket =  0U;
 8000518:	6390      	str	r0, [r2, #56]	; 0x38
    hpcd->IN_ep[index].xfer_buff = 0U;
 800051a:	63d0      	str	r0, [r2, #60]	; 0x3c
    hpcd->IN_ep[index].xfer_len = 0U;
 800051c:	6410      	str	r0, [r2, #64]	; 0x40
 800051e:	f102 0220 	add.w	r2, r2, #32
  for (index = 0U; index < 15U ; index++)
 8000522:	d1f0      	bne.n	8000506 <HAL_PCD_Init+0x5c>
 8000524:	2200      	movs	r2, #0
  }
 
  for (index = 0U; index < 15U ; index++)
  {
    hpcd->OUT_ep[index].is_in = 0U;
 8000526:	4617      	mov	r7, r2
    hpcd->OUT_ep[index].num = index;
 8000528:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
    hpcd->IN_ep[index].tx_fifo_num = index;
 800052c:	869a      	strh	r2, [r3, #52]	; 0x34
  for (index = 0U; index < 15U ; index++)
 800052e:	3201      	adds	r2, #1
 8000530:	2a0f      	cmp	r2, #15
    hpcd->OUT_ep[index].is_in = 0U;
 8000532:	f883 7229 	strb.w	r7, [r3, #553]	; 0x229
    /* Control until ep is activated */
    hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
 8000536:	f883 722b 	strb.w	r7, [r3, #555]	; 0x22b
    hpcd->OUT_ep[index].maxpacket = 0U;
 800053a:	f8c3 7238 	str.w	r7, [r3, #568]	; 0x238
    hpcd->OUT_ep[index].xfer_buff = 0U;
 800053e:	f8c3 723c 	str.w	r7, [r3, #572]	; 0x23c
    hpcd->OUT_ep[index].xfer_len = 0U;
 8000542:	f8c3 7240 	str.w	r7, [r3, #576]	; 0x240
 8000546:	f103 0320 	add.w	r3, r3, #32
  for (index = 0U; index < 15U ; index++)
 800054a:	d1ed      	bne.n	8000528 <HAL_PCD_Init+0x7e>
  }
  
  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
 800054c:	466e      	mov	r6, sp
 800054e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000550:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000552:	682b      	ldr	r3, [r5, #0]
 8000554:	6033      	str	r3, [r6, #0]
 8000556:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 800055a:	6820      	ldr	r0, [r4, #0]
 800055c:	f001 f9da 	bl	8001914 <USB_DevInit>
  
  hpcd->USB_Address = 0U;
  hpcd->State= HAL_PCD_STATE_READY;
 8000560:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 8000562:	f884 7024 	strb.w	r7, [r4, #36]	; 0x24
  
  USB_DevDisconnect (hpcd->Instance);  
 8000566:	6820      	ldr	r0, [r4, #0]
  hpcd->State= HAL_PCD_STATE_READY;
 8000568:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
  USB_DevDisconnect (hpcd->Instance);  
 800056c:	f001 fcaa 	bl	8001ec4 <USB_DevDisconnect>
  return HAL_OK;
 8000570:	2000      	movs	r0, #0
}
 8000572:	b006      	add	sp, #24
 8000574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8000578:	2001      	movs	r0, #1
 800057a:	e7fa      	b.n	8000572 <HAL_PCD_Init+0xc8>

0800057c <HAL_PCD_Start>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 800057c:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{
 8000580:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8000582:	2b01      	cmp	r3, #1
{
 8000584:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000586:	d00e      	beq.n	80005a6 <HAL_PCD_Start+0x2a>
 8000588:	2101      	movs	r1, #1
 800058a:	f880 1428 	strb.w	r1, [r0, #1064]	; 0x428
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 800058e:	f002 fd0e 	bl	8002fae <HAL_PCDEx_SetConnectionState>
  USB_DevConnect (hpcd->Instance);
 8000592:	6820      	ldr	r0, [r4, #0]
 8000594:	f001 fc94 	bl	8001ec0 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000598:	6820      	ldr	r0, [r4, #0]
 800059a:	f001 f9a6 	bl	80018ea <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800059e:	2000      	movs	r0, #0
 80005a0:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 80005a4:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80005a6:	2002      	movs	r0, #2
}
 80005a8:	bd10      	pop	{r4, pc}

080005aa <HAL_PCD_SetAddress>:
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 80005aa:	f890 2428 	ldrb.w	r2, [r0, #1064]	; 0x428
{
 80005ae:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 80005b0:	2a01      	cmp	r2, #1
{
 80005b2:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80005b4:	d00b      	beq.n	80005ce <HAL_PCD_SetAddress+0x24>
 80005b6:	2201      	movs	r2, #1
 80005b8:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428
  hpcd->USB_Address = address;
 80005bc:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  USB_SetDevAddress(hpcd->Instance, address);
 80005c0:	6800      	ldr	r0, [r0, #0]
 80005c2:	f001 fc77 	bl	8001eb4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80005c6:	2000      	movs	r0, #0
 80005c8:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
 80005cc:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80005ce:	2002      	movs	r0, #2
  return HAL_OK;
}
 80005d0:	bd10      	pop	{r4, pc}

080005d2 <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80005d2:	b538      	push	{r3, r4, r5, lr}
 80005d4:	4604      	mov	r4, r0
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80U) == 0x80U)
 80005d6:	b248      	sxtb	r0, r1
 80005d8:	2800      	cmp	r0, #0
 80005da:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80005de:	bfb5      	itete	lt
 80005e0:	eb04 1145 	addlt.w	r1, r4, r5, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 80005e4:	eb04 1141 	addge.w	r1, r4, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80005e8:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 80005ea:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  }
  ep->num   = ep_addr & 0x7FU;
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 80005ee:	0fc0      	lsrs	r0, r0, #31
  ep->num   = ep_addr & 0x7FU;
 80005f0:	700d      	strb	r5, [r1, #0]
  ep->is_in = (0x80U & ep_addr) != 0U;
 80005f2:	7048      	strb	r0, [r1, #1]
  ep->maxpacket = ep_mps;
  ep->type = ep_type;
 80005f4:	70cb      	strb	r3, [r1, #3]
    
  __HAL_LOCK(hpcd);
 80005f6:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
  ep->maxpacket = ep_mps;
 80005fa:	610a      	str	r2, [r1, #16]
  __HAL_LOCK(hpcd);
 80005fc:	2b01      	cmp	r3, #1
 80005fe:	d009      	beq.n	8000614 <HAL_PCD_EP_Open+0x42>
 8000600:	2301      	movs	r3, #1
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8000602:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8000604:	f884 3428 	strb.w	r3, [r4, #1064]	; 0x428
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8000608:	f001 f9a0 	bl	800194c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800060c:	2000      	movs	r0, #0
 800060e:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return ret;
 8000612:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8000614:	2002      	movs	r0, #2
}
 8000616:	bd38      	pop	{r3, r4, r5, pc}

08000618 <HAL_PCD_EP_Close>:
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80U) == 0x80U)
 8000618:	b24b      	sxtb	r3, r1
 800061a:	2b00      	cmp	r3, #0
 800061c:	f001 027f 	and.w	r2, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000620:	bfb5      	itete	lt
 8000622:	eb00 1142 	addlt.w	r1, r0, r2, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000626:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 800062a:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 800062c:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  }
  ep->num   = ep_addr & 0x7FU;
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8000630:	0fdb      	lsrs	r3, r3, #31
{  
 8000632:	b510      	push	{r4, lr}
  ep->num   = ep_addr & 0x7FU;
 8000634:	700a      	strb	r2, [r1, #0]
  ep->is_in = (0x80U & ep_addr) != 0U;
 8000636:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd);
 8000638:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{  
 800063c:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800063e:	2b01      	cmp	r3, #1
 8000640:	d009      	beq.n	8000656 <HAL_PCD_EP_Close+0x3e>
 8000642:	2301      	movs	r3, #1
 8000644:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8000648:	6800      	ldr	r0, [r0, #0]
 800064a:	f001 faf1 	bl	8001c30 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800064e:	2000      	movs	r0, #0
 8000650:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 8000654:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000656:	2002      	movs	r0, #2
}
 8000658:	bd10      	pop	{r4, pc}

0800065a <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800065a:	b570      	push	{r4, r5, r6, lr}
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
  ep->xfer_len = len;
  ep->xfer_count = 0U;
 800065c:	2600      	movs	r6, #0
 800065e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8000662:	014d      	lsls	r5, r1, #5
  ep->xfer_buff = pBuf;  
 8000664:	1944      	adds	r4, r0, r5
  ep->is_in = 0U;
  ep->num = ep_addr & 0x7FU;
 8000666:	f884 1228 	strb.w	r1, [r4, #552]	; 0x228
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 800066a:	f505 710a 	add.w	r1, r5, #552	; 0x228
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 800066e:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;  
 8000670:	f8c4 223c 	str.w	r2, [r4, #572]	; 0x23c
  ep->xfer_len = len;
 8000674:	f8c4 3240 	str.w	r3, [r4, #576]	; 0x240
  ep->xfer_count = 0U;
 8000678:	f8c4 6244 	str.w	r6, [r4, #580]	; 0x244
  ep->is_in = 0U;
 800067c:	f884 6229 	strb.w	r6, [r4, #553]	; 0x229
    USB_EPStartXfer(hpcd->Instance , ep);
 8000680:	6800      	ldr	r0, [r0, #0]
 8000682:	f001 fc39 	bl	8001ef8 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8000686:	4630      	mov	r0, r6
 8000688:	bd70      	pop	{r4, r5, r6, pc}

0800068a <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr: endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & 0xF].xfer_count;
 800068a:	f001 010f 	and.w	r1, r1, #15
 800068e:	eb00 1141 	add.w	r1, r0, r1, lsl #5
}
 8000692:	f8b1 0244 	ldrh.w	r0, [r1, #580]	; 0x244
 8000696:	4770      	bx	lr

08000698 <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000698:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800069c:	b570      	push	{r4, r5, r6, lr}
 800069e:	014d      	lsls	r5, r1, #5
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 80006a0:	1944      	adds	r4, r0, r5
  ep->xfer_len = len;
 80006a2:	6423      	str	r3, [r4, #64]	; 0x40
  ep->xfer_count = 0U;
 80006a4:	2600      	movs	r6, #0
  ep->is_in = 1U;
 80006a6:	2301      	movs	r3, #1
  ep->num = ep_addr & 0x7FU;
 80006a8:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80006ac:	f105 0128 	add.w	r1, r5, #40	; 0x28
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 80006b0:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;  
 80006b2:	63e2      	str	r2, [r4, #60]	; 0x3c
  ep->xfer_count = 0U;
 80006b4:	6466      	str	r6, [r4, #68]	; 0x44
  ep->is_in = 1U;
 80006b6:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    USB_EPStartXfer(hpcd->Instance , ep);
 80006ba:	6800      	ldr	r0, [r0, #0]
 80006bc:	f001 fc1c 	bl	8001ef8 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 80006c0:	4630      	mov	r0, r6
 80006c2:	bd70      	pop	{r4, r5, r6, pc}

080006c4 <HAL_PCD_IRQHandler>:
{ 
 80006c4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80006c8:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 80006ca:	6800      	ldr	r0, [r0, #0]
 80006cc:	f001 fbfc 	bl	8001ec8 <USB_ReadInterrupts>
 80006d0:	0400      	lsls	r0, r0, #16
 80006d2:	f100 8098 	bmi.w	8000806 <HAL_PCD_IRQHandler+0x142>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 80006d6:	6820      	ldr	r0, [r4, #0]
 80006d8:	f001 fbf6 	bl	8001ec8 <USB_ReadInterrupts>
 80006dc:	0541      	lsls	r1, r0, #21
 80006de:	d50f      	bpl.n	8000700 <HAL_PCD_IRQHandler+0x3c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80006e0:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 80006e2:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80006e4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80006e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80006ec:	041b      	lsls	r3, r3, #16
 80006ee:	0c1b      	lsrs	r3, r3, #16
 80006f0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 80006f4:	f002 fb67 	bl	8002dc6 <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0U);
 80006f8:	2100      	movs	r1, #0
 80006fa:	4620      	mov	r0, r4
 80006fc:	f7ff ff55 	bl	80005aa <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 8000700:	6820      	ldr	r0, [r4, #0]
 8000702:	f001 fbe1 	bl	8001ec8 <USB_ReadInterrupts>
 8000706:	0447      	lsls	r7, r0, #17
 8000708:	d508      	bpl.n	800071c <HAL_PCD_IRQHandler+0x58>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 800070a:	6822      	ldr	r2, [r4, #0]
 800070c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000710:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000714:	041b      	lsls	r3, r3, #16
 8000716:	0c1b      	lsrs	r3, r3, #16
 8000718:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 800071c:	6820      	ldr	r0, [r4, #0]
 800071e:	f001 fbd3 	bl	8001ec8 <USB_ReadInterrupts>
 8000722:	0486      	lsls	r6, r0, #18
 8000724:	d508      	bpl.n	8000738 <HAL_PCD_IRQHandler+0x74>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 8000726:	6822      	ldr	r2, [r4, #0]
 8000728:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800072c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000730:	041b      	lsls	r3, r3, #16
 8000732:	0c1b      	lsrs	r3, r3, #16
 8000734:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 8000738:	6820      	ldr	r0, [r4, #0]
 800073a:	f001 fbc5 	bl	8001ec8 <USB_ReadInterrupts>
 800073e:	04c5      	lsls	r5, r0, #19
 8000740:	d51c      	bpl.n	800077c <HAL_PCD_IRQHandler+0xb8>
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 8000742:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 8000744:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 8000746:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800074a:	f023 0304 	bic.w	r3, r3, #4
 800074e:	041b      	lsls	r3, r3, #16
 8000750:	0c1b      	lsrs	r3, r3, #16
 8000752:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_FSUSP);
 8000756:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800075a:	f023 0308 	bic.w	r3, r3, #8
 800075e:	041b      	lsls	r3, r3, #16
 8000760:	0c1b      	lsrs	r3, r3, #16
 8000762:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8000766:	f002 fb51 	bl	8002e0c <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 800076a:	6822      	ldr	r2, [r4, #0]
 800076c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000770:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000774:	041b      	lsls	r3, r3, #16
 8000776:	0c1b      	lsrs	r3, r3, #16
 8000778:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 800077c:	6820      	ldr	r0, [r4, #0]
 800077e:	f001 fba3 	bl	8001ec8 <USB_ReadInterrupts>
 8000782:	0500      	lsls	r0, r0, #20
 8000784:	d51d      	bpl.n	80007c2 <HAL_PCD_IRQHandler+0xfe>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8000786:	6820      	ldr	r0, [r4, #0]
 8000788:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 800078c:	b29b      	uxth	r3, r3
 800078e:	f043 0308 	orr.w	r3, r3, #8
 8000792:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 8000796:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 800079a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800079e:	041b      	lsls	r3, r3, #16
 80007a0:	0c1b      	lsrs	r3, r3, #16
 80007a2:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 80007a6:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80007aa:	b29b      	uxth	r3, r3
 80007ac:	f043 0304 	orr.w	r3, r3, #4
 80007b0:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0U)
 80007b4:	f001 fb88 	bl	8001ec8 <USB_ReadInterrupts>
 80007b8:	04c1      	lsls	r1, r0, #19
 80007ba:	d402      	bmi.n	80007c2 <HAL_PCD_IRQHandler+0xfe>
      HAL_PCD_SuspendCallback(hpcd);
 80007bc:	4620      	mov	r0, r4
 80007be:	f002 fb15 	bl	8002dec <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 80007c2:	6820      	ldr	r0, [r4, #0]
 80007c4:	f001 fb80 	bl	8001ec8 <USB_ReadInterrupts>
 80007c8:	0582      	lsls	r2, r0, #22
 80007ca:	d50b      	bpl.n	80007e4 <HAL_PCD_IRQHandler+0x120>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 80007cc:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 80007ce:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 80007d0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80007d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80007d8:	041b      	lsls	r3, r3, #16
 80007da:	0c1b      	lsrs	r3, r3, #16
 80007dc:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 80007e0:	f002 faed 	bl	8002dbe <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 80007e4:	6820      	ldr	r0, [r4, #0]
 80007e6:	f001 fb6f 	bl	8001ec8 <USB_ReadInterrupts>
 80007ea:	05c3      	lsls	r3, r0, #23
 80007ec:	d508      	bpl.n	8000800 <HAL_PCD_IRQHandler+0x13c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 80007ee:	6822      	ldr	r2, [r4, #0]
 80007f0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80007f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80007f8:	041b      	lsls	r3, r3, #16
 80007fa:	0c1b      	lsrs	r3, r3, #16
 80007fc:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 8000800:	b002      	add	sp, #8
 8000802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
  PCD_EPTypeDef *ep = NULL;
  uint16_t count = 0;
  uint8_t epindex = 0;
  __IO uint16_t wIstr = 0;  
 8000806:	2300      	movs	r3, #0
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000808:	4fc8      	ldr	r7, [pc, #800]	; (8000b2c <HAL_PCD_IRQHandler+0x468>)
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800080a:	f8df 8324 	ldr.w	r8, [pc, #804]	; 8000b30 <HAL_PCD_IRQHandler+0x46c>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800080e:	f8df 9324 	ldr.w	r9, [pc, #804]	; 8000b34 <HAL_PCD_IRQHandler+0x470>
  __IO uint16_t wIstr = 0;  
 8000812:	f8ad 3004 	strh.w	r3, [sp, #4]
  __IO uint16_t wEPVal = 0;
 8000816:	f8ad 3006 	strh.w	r3, [sp, #6]
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 800081a:	6820      	ldr	r0, [r4, #0]
 800081c:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8000820:	b29b      	uxth	r3, r3
 8000822:	f8ad 3004 	strh.w	r3, [sp, #4]
 8000826:	041b      	lsls	r3, r3, #16
 8000828:	f57f af55 	bpl.w	80006d6 <HAL_PCD_IRQHandler+0x12>
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800082c:	f8bd 5004 	ldrh.w	r5, [sp, #4]
    if (epindex == 0)
 8000830:	f015 050f 	ands.w	r5, r5, #15
 8000834:	f040 80ab 	bne.w	800098e <HAL_PCD_IRQHandler+0x2ca>
      if ((wIstr & USB_ISTR_DIR) == 0)
 8000838:	f8bd 1004 	ldrh.w	r1, [sp, #4]
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800083c:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0)
 800083e:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000842:	b29b      	uxth	r3, r3
      if ((wIstr & USB_ISTR_DIR) == 0)
 8000844:	d126      	bne.n	8000894 <HAL_PCD_IRQHandler+0x1d0>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000846:	403b      	ands	r3, r7
 8000848:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800084a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800084e:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8000852:	b29b      	uxth	r3, r3
 8000854:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000858:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800085c:	f8d0 3404 	ldr.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 8000860:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000862:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000866:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8000868:	4413      	add	r3, r2
 800086a:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800086c:	4620      	mov	r0, r4
 800086e:	f002 fa9f 	bl	8002db0 <HAL_PCD_DataInStageCallback>
        if((hpcd->USB_Address > 0U)&& ( ep->xfer_len == 0U))
 8000872:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000876:	2b00      	cmp	r3, #0
 8000878:	d0cf      	beq.n	800081a <HAL_PCD_IRQHandler+0x156>
 800087a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800087c:	2a00      	cmp	r2, #0
 800087e:	d1cc      	bne.n	800081a <HAL_PCD_IRQHandler+0x156>
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 8000880:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000884:	6821      	ldr	r1, [r4, #0]
 8000886:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800088a:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800088e:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 8000892:	e7c2      	b.n	800081a <HAL_PCD_IRQHandler+0x156>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8000894:	f8ad 3006 	strh.w	r3, [sp, #6]
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8000898:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800089c:	051a      	lsls	r2, r3, #20
 800089e:	d51f      	bpl.n	80008e0 <HAL_PCD_IRQHandler+0x21c>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80008a0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80008a4:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 80008a8:	b29b      	uxth	r3, r3
 80008aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80008ae:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80008b2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 80008b6:	f8b4 222c 	ldrh.w	r2, [r4, #556]	; 0x22c
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80008ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80008be:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 80008c2:	f204 412c 	addw	r1, r4, #1068	; 0x42c
 80008c6:	f001 fc17 	bl	80020f8 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 80008ca:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 80008cc:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 80008ce:	8813      	ldrh	r3, [r2, #0]
 80008d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80008d4:	051b      	lsls	r3, r3, #20
 80008d6:	0d1b      	lsrs	r3, r3, #20
 80008d8:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 80008da:	f002 fa5b 	bl	8002d94 <HAL_PCD_SetupStageCallback>
 80008de:	e79c      	b.n	800081a <HAL_PCD_IRQHandler+0x156>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80008e0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80008e4:	041b      	lsls	r3, r3, #16
 80008e6:	d598      	bpl.n	800081a <HAL_PCD_IRQHandler+0x156>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80008e8:	8803      	ldrh	r3, [r0, #0]
 80008ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80008ee:	051b      	lsls	r3, r3, #20
 80008f0:	0d1b      	lsrs	r3, r3, #20
 80008f2:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80008f4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80008f8:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 80008fc:	b29b      	uxth	r3, r3
 80008fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000902:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000906:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800090a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800090e:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
          if (ep->xfer_count != 0U)
 8000912:	b163      	cbz	r3, 800092e <HAL_PCD_IRQHandler+0x26a>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8000914:	f8b4 222c 	ldrh.w	r2, [r4, #556]	; 0x22c
 8000918:	f8d4 123c 	ldr.w	r1, [r4, #572]	; 0x23c
 800091c:	f001 fbec 	bl	80020f8 <USB_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 8000920:	f8d4 323c 	ldr.w	r3, [r4, #572]	; 0x23c
 8000924:	f8d4 2244 	ldr.w	r2, [r4, #580]	; 0x244
 8000928:	4413      	add	r3, r2
 800092a:	f8c4 323c 	str.w	r3, [r4, #572]	; 0x23c
           HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800092e:	2100      	movs	r1, #0
 8000930:	4620      	mov	r0, r4
 8000932:	f002 fa35 	bl	8002da0 <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000936:	6822      	ldr	r2, [r4, #0]
 8000938:	f8d4 5238 	ldr.w	r5, [r4, #568]	; 0x238
 800093c:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8000940:	2d3e      	cmp	r5, #62	; 0x3e
 8000942:	b289      	uxth	r1, r1
 8000944:	f101 0106 	add.w	r1, r1, #6
 8000948:	f502 6080 	add.w	r0, r2, #1024	; 0x400
 800094c:	d917      	bls.n	800097e <HAL_PCD_IRQHandler+0x2ba>
 800094e:	f3c5 134f 	ubfx	r3, r5, #5, #16
 8000952:	06ee      	lsls	r6, r5, #27
 8000954:	bf04      	itt	eq
 8000956:	f103 33ff 	addeq.w	r3, r3, #4294967295	; 0xffffffff
 800095a:	b29b      	uxtheq	r3, r3
 800095c:	ea49 2383 	orr.w	r3, r9, r3, lsl #10
 8000960:	b29b      	uxth	r3, r3
 8000962:	f840 3011 	str.w	r3, [r0, r1, lsl #1]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8000966:	8813      	ldrh	r3, [r2, #0]
 8000968:	b29b      	uxth	r3, r3
 800096a:	ea03 0308 	and.w	r3, r3, r8
 800096e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8000972:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000976:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800097a:	8013      	strh	r3, [r2, #0]
 800097c:	e74d      	b.n	800081a <HAL_PCD_IRQHandler+0x156>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800097e:	f3c5 034f 	ubfx	r3, r5, #1, #16
 8000982:	07ed      	lsls	r5, r5, #31
 8000984:	bf44      	itt	mi
 8000986:	3301      	addmi	r3, #1
 8000988:	b29b      	uxthmi	r3, r3
 800098a:	029b      	lsls	r3, r3, #10
 800098c:	e7e8      	b.n	8000960 <HAL_PCD_IRQHandler+0x29c>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800098e:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 8000992:	b29b      	uxth	r3, r3
 8000994:	f8ad 3006 	strh.w	r3, [sp, #6]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000998:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800099c:	0419      	lsls	r1, r3, #16
 800099e:	d53f      	bpl.n	8000a20 <HAL_PCD_IRQHandler+0x35c>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80009a0:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 80009a4:	ea4f 1a45 	mov.w	sl, r5, lsl #5
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80009a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80009ac:	051b      	lsls	r3, r3, #20
 80009ae:	0d1b      	lsrs	r3, r3, #20
 80009b0:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 80009b4:	eb04 010a 	add.w	r1, r4, sl
 80009b8:	f891 3232 	ldrb.w	r3, [r1, #562]	; 0x232
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d174      	bne.n	8000aaa <HAL_PCD_IRQHandler+0x3e6>
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80009c0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80009c4:	f891 2228 	ldrb.w	r2, [r1, #552]	; 0x228
 80009c8:	b29b      	uxth	r3, r3
 80009ca:	3306      	adds	r3, #6
 80009cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80009d0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80009d4:	f8d3 6400 	ldr.w	r6, [r3, #1024]	; 0x400
 80009d8:	f3c6 0609 	ubfx	r6, r6, #0, #10
          if (count != 0U)
 80009dc:	b136      	cbz	r6, 80009ec <HAL_PCD_IRQHandler+0x328>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80009de:	f8b1 222c 	ldrh.w	r2, [r1, #556]	; 0x22c
 80009e2:	4633      	mov	r3, r6
 80009e4:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 80009e8:	f001 fb86 	bl	80020f8 <USB_ReadPMA>
 80009ec:	eb04 010a 	add.w	r1, r4, sl
        ep->xfer_count+=count;
 80009f0:	f8d1 3244 	ldr.w	r3, [r1, #580]	; 0x244
        ep->xfer_buff+=count;
 80009f4:	f8d1 223c 	ldr.w	r2, [r1, #572]	; 0x23c
        ep->xfer_count+=count;
 80009f8:	4433      	add	r3, r6
 80009fa:	f8c1 3244 	str.w	r3, [r1, #580]	; 0x244
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80009fe:	f8d1 3240 	ldr.w	r3, [r1, #576]	; 0x240
        ep->xfer_buff+=count;
 8000a02:	4432      	add	r2, r6
 8000a04:	f8c1 223c 	str.w	r2, [r1, #572]	; 0x23c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8000a08:	b123      	cbz	r3, 8000a14 <HAL_PCD_IRQHandler+0x350>
 8000a0a:	f8d1 0238 	ldr.w	r0, [r1, #568]	; 0x238
 8000a0e:	4286      	cmp	r6, r0
 8000a10:	f080 8086 	bcs.w	8000b20 <HAL_PCD_IRQHandler+0x45c>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8000a14:	44a2      	add	sl, r4
 8000a16:	f89a 1228 	ldrb.w	r1, [sl, #552]	; 0x228
 8000a1a:	4620      	mov	r0, r4
 8000a1c:	f002 f9c0 	bl	8002da0 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8000a20:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000a24:	061a      	lsls	r2, r3, #24
 8000a26:	f57f aef8 	bpl.w	800081a <HAL_PCD_IRQHandler+0x156>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000a2a:	6820      	ldr	r0, [r4, #0]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0U)
 8000a2c:	016e      	lsls	r6, r5, #5
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000a2e:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8000a32:	19a1      	adds	r1, r4, r6
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000a34:	b29b      	uxth	r3, r3
 8000a36:	403b      	ands	r3, r7
 8000a38:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8000a3c:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 8000a40:	3502      	adds	r5, #2
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d178      	bne.n	8000b38 <HAL_PCD_IRQHandler+0x474>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000a46:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000a4a:	f891 2028 	ldrb.w	r2, [r1, #40]	; 0x28
 8000a4e:	b29b      	uxth	r3, r3
 8000a50:	3302      	adds	r3, #2
 8000a52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000a56:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000a5a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8000a5e:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8000a62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000a66:	606b      	str	r3, [r5, #4]
          if (ep->xfer_count != 0U)
 8000a68:	b11b      	cbz	r3, 8000a72 <HAL_PCD_IRQHandler+0x3ae>
          {
            USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8000a6a:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
 8000a6c:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8000a6e:	f001 fa31 	bl	8001ed4 <USB_WritePMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000a72:	6822      	ldr	r2, [r4, #0]
 8000a74:	4426      	add	r6, r4
 8000a76:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8000a7a:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 8000a7e:	b29b      	uxth	r3, r3
 8000a80:	3302      	adds	r3, #2
 8000a82:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8000a86:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8000a8a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        ep->xfer_buff+=ep->xfer_count;
 8000a8e:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000a90:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8000a94:	6472      	str	r2, [r6, #68]	; 0x44
        ep->xfer_buff+=ep->xfer_count;
 8000a96:	441a      	add	r2, r3
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8000a98:	6c33      	ldr	r3, [r6, #64]	; 0x40
        ep->xfer_buff+=ep->xfer_count;
 8000a9a:	63f2      	str	r2, [r6, #60]	; 0x3c
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000a9c:	4620      	mov	r0, r4
        if (ep->xfer_len == 0U)
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	f040 8085 	bne.w	8000bae <HAL_PCD_IRQHandler+0x4ea>
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000aa4:	f002 f984 	bl	8002db0 <HAL_PCD_DataInStageCallback>
 8000aa8:	e6b7      	b.n	800081a <HAL_PCD_IRQHandler+0x156>
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8000aaa:	f891 3228 	ldrb.w	r3, [r1, #552]	; 0x228
 8000aae:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8000ab2:	00db      	lsls	r3, r3, #3
 8000ab4:	f412 4f80 	tst.w	r2, #16384	; 0x4000
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000ab8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8000abc:	b292      	uxth	r2, r2
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8000abe:	d021      	beq.n	8000b04 <HAL_PCD_IRQHandler+0x440>
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000ac0:	3202      	adds	r2, #2
 8000ac2:	4413      	add	r3, r2
 8000ac4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000ac8:	f8d3 6400 	ldr.w	r6, [r3, #1024]	; 0x400
 8000acc:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0U)
 8000ad0:	b136      	cbz	r6, 8000ae0 <HAL_PCD_IRQHandler+0x41c>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8000ad2:	4633      	mov	r3, r6
 8000ad4:	f8b1 222e 	ldrh.w	r2, [r1, #558]	; 0x22e
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000ad8:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 8000adc:	f001 fb0c 	bl	80020f8 <USB_ReadPMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 8000ae0:	eb04 030a 	add.w	r3, r4, sl
 8000ae4:	f893 1228 	ldrb.w	r1, [r3, #552]	; 0x228
 8000ae8:	6822      	ldr	r2, [r4, #0]
 8000aea:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8000aee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000af2:	051b      	lsls	r3, r3, #20
 8000af4:	0d1b      	lsrs	r3, r3, #20
 8000af6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000afa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000afe:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8000b02:	e773      	b.n	80009ec <HAL_PCD_IRQHandler+0x328>
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8000b04:	3206      	adds	r2, #6
 8000b06:	4413      	add	r3, r2
 8000b08:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000b0c:	f8d3 6400 	ldr.w	r6, [r3, #1024]	; 0x400
 8000b10:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0U)
 8000b14:	2e00      	cmp	r6, #0
 8000b16:	d0e3      	beq.n	8000ae0 <HAL_PCD_IRQHandler+0x41c>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000b18:	4633      	mov	r3, r6
 8000b1a:	f8b1 2230 	ldrh.w	r2, [r1, #560]	; 0x230
 8000b1e:	e7db      	b.n	8000ad8 <HAL_PCD_IRQHandler+0x414>
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8000b20:	f891 1228 	ldrb.w	r1, [r1, #552]	; 0x228
 8000b24:	4620      	mov	r0, r4
 8000b26:	f7ff fd98 	bl	800065a <HAL_PCD_EP_Receive>
 8000b2a:	e779      	b.n	8000a20 <HAL_PCD_IRQHandler+0x35c>
 8000b2c:	ffff8f0f 	.word	0xffff8f0f
 8000b30:	ffffbf8f 	.word	0xffffbf8f
 8000b34:	ffff8000 	.word	0xffff8000
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8000b38:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8000b3c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8000b40:	00db      	lsls	r3, r3, #3
 8000b42:	f012 0f40 	tst.w	r2, #64	; 0x40
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000b46:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8000b4a:	b292      	uxth	r2, r2
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8000b4c:	d020      	beq.n	8000b90 <HAL_PCD_IRQHandler+0x4cc>
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000b4e:	3202      	adds	r2, #2
 8000b50:	4413      	add	r3, r2
 8000b52:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000b56:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8000b5a:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8000b5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000b62:	606b      	str	r3, [r5, #4]
            if (ep->xfer_count != 0U)
 8000b64:	b11b      	cbz	r3, 8000b6e <HAL_PCD_IRQHandler+0x4aa>
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 8000b66:	8dca      	ldrh	r2, [r1, #46]	; 0x2e
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8000b68:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8000b6a:	f001 f9b3 	bl	8001ed4 <USB_WritePMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 8000b6e:	19a3      	adds	r3, r4, r6
 8000b70:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 8000b74:	6822      	ldr	r2, [r4, #0]
 8000b76:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8000b7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000b7e:	051b      	lsls	r3, r3, #20
 8000b80:	0d1b      	lsrs	r3, r3, #20
 8000b82:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b8a:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8000b8e:	e770      	b.n	8000a72 <HAL_PCD_IRQHandler+0x3ae>
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8000b90:	3206      	adds	r2, #6
 8000b92:	4413      	add	r3, r2
 8000b94:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000b98:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8000b9c:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8000ba0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000ba4:	606b      	str	r3, [r5, #4]
            if (ep->xfer_count != 0U)
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d0e1      	beq.n	8000b6e <HAL_PCD_IRQHandler+0x4aa>
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8000baa:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
 8000bac:	e7dc      	b.n	8000b68 <HAL_PCD_IRQHandler+0x4a4>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8000bae:	f7ff fd73 	bl	8000698 <HAL_PCD_EP_Transmit>
 8000bb2:	e632      	b.n	800081a <HAL_PCD_IRQHandler+0x156>

08000bb4 <HAL_PCD_EP_SetStall>:
  ep->is_stall = 1U;
 8000bb4:	2201      	movs	r2, #1
{
 8000bb6:	b538      	push	{r3, r4, r5, lr}
  if ((0x80U & ep_addr) == 0x80U)
 8000bb8:	b24b      	sxtb	r3, r1
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	f001 057f 	and.w	r5, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000bc0:	bfb5      	itete	lt
 8000bc2:	eb00 1145 	addlt.w	r1, r0, r5, lsl #5
    ep = &hpcd->OUT_ep[ep_addr];
 8000bc6:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000bca:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8000bcc:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8000bd0:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7FU;
 8000bd2:	b2ed      	uxtb	r5, r5
  ep->is_stall = 1U;
 8000bd4:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7FU;
 8000bd6:	700d      	strb	r5, [r1, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8000bd8:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd);
 8000bda:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{
 8000bde:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d00e      	beq.n	8000c02 <HAL_PCD_EP_SetStall+0x4e>
 8000be4:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428
  USB_EPSetStall(hpcd->Instance , ep);
 8000be8:	6800      	ldr	r0, [r0, #0]
 8000bea:	f001 f8ef 	bl	8001dcc <USB_EPSetStall>
  if((ep_addr & 0x7FU) == 0U)
 8000bee:	b925      	cbnz	r5, 8000bfa <HAL_PCD_EP_SetStall+0x46>
    USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8000bf0:	f204 412c 	addw	r1, r4, #1068	; 0x42c
 8000bf4:	6820      	ldr	r0, [r4, #0]
 8000bf6:	f001 f96b 	bl	8001ed0 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd); 
 8000bfa:	2000      	movs	r0, #0
 8000bfc:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 8000c00:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8000c02:	2002      	movs	r0, #2
}
 8000c04:	bd38      	pop	{r3, r4, r5, pc}

08000c06 <HAL_PCD_EP_ClrStall>:
{
 8000c06:	b538      	push	{r3, r4, r5, lr}
  ep->is_stall = 0U;
 8000c08:	2400      	movs	r4, #0
  if ((0x80U & ep_addr) == 0x80U)
 8000c0a:	b24b      	sxtb	r3, r1
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	f001 027f 	and.w	r2, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000c12:	bfb5      	itete	lt
 8000c14:	eb00 1142 	addlt.w	r1, r0, r2, lsl #5
    ep = &hpcd->OUT_ep[ep_addr];
 8000c18:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000c1c:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8000c1e:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8000c22:	0fdb      	lsrs	r3, r3, #31
  ep->is_stall = 0U;
 8000c24:	708c      	strb	r4, [r1, #2]
  ep->num   = ep_addr & 0x7FU;
 8000c26:	700a      	strb	r2, [r1, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8000c28:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 8000c2a:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{
 8000c2e:	4605      	mov	r5, r0
  __HAL_LOCK(hpcd); 
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	d009      	beq.n	8000c48 <HAL_PCD_EP_ClrStall+0x42>
 8000c34:	2301      	movs	r3, #1
 8000c36:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
  USB_EPClearStall(hpcd->Instance , ep);
 8000c3a:	6800      	ldr	r0, [r0, #0]
 8000c3c:	f001 f8f8 	bl	8001e30 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 8000c40:	f885 4428 	strb.w	r4, [r5, #1064]	; 0x428
  return HAL_OK;
 8000c44:	4620      	mov	r0, r4
 8000c46:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd); 
 8000c48:	2002      	movs	r0, #2
}
 8000c4a:	bd38      	pop	{r3, r4, r5, pc}

08000c4c <HAL_PCDEx_PMAConfig>:

{
  PCD_EPTypeDef *ep = NULL;
  
  /* initialize ep structure*/
  if ((ep_addr & 0x80U) == 0x80U)
 8000c4c:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000c50:	bf1b      	ittet	ne
 8000c52:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8000c56:	eb00 1041 	addne.w	r0, r0, r1, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000c5a:	eb00 1041 	addeq.w	r0, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000c5e:	3028      	addne	r0, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8000c60:	bf08      	it	eq
 8000c62:	f500 700a 	addeq.w	r0, r0, #552	; 0x228
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8000c66:	b91a      	cbnz	r2, 8000c70 <HAL_PCDEx_PMAConfig+0x24>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0U;
 8000c68:	7282      	strb	r2, [r0, #10]
    /*Configure te PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 8000c6a:	8083      	strh	r3, [r0, #4]
    ep->pmaaddr0 =  pmaadress & 0x0000FFFFU;
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
  }
  
  return HAL_OK; 
}
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	4770      	bx	lr
    ep->doublebuffer = 1U;
 8000c70:	2201      	movs	r2, #1
    ep->pmaaddr0 =  pmaadress & 0x0000FFFFU;
 8000c72:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 8000c74:	0c1b      	lsrs	r3, r3, #16
    ep->doublebuffer = 1U;
 8000c76:	7282      	strb	r2, [r0, #10]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 8000c78:	8103      	strh	r3, [r0, #8]
 8000c7a:	e7f7      	b.n	8000c6c <HAL_PCDEx_PMAConfig+0x20>

08000c7c <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	4b01      	ldr	r3, [pc, #4]	; (8000c84 <HAL_PWR_EnableBkUpAccess+0x8>)
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	4770      	bx	lr
 8000c84:	420e0020 	.word	0x420e0020

08000c88 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c88:	6803      	ldr	r3, [r0, #0]
{
 8000c8a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c8e:	07db      	lsls	r3, r3, #31
{
 8000c90:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c92:	d410      	bmi.n	8000cb6 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c94:	682b      	ldr	r3, [r5, #0]
 8000c96:	079f      	lsls	r7, r3, #30
 8000c98:	d45e      	bmi.n	8000d58 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c9a:	682b      	ldr	r3, [r5, #0]
 8000c9c:	0719      	lsls	r1, r3, #28
 8000c9e:	f100 8095 	bmi.w	8000dcc <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ca2:	682b      	ldr	r3, [r5, #0]
 8000ca4:	075a      	lsls	r2, r3, #29
 8000ca6:	f100 80bf 	bmi.w	8000e28 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000caa:	69ea      	ldr	r2, [r5, #28]
 8000cac:	2a00      	cmp	r2, #0
 8000cae:	f040 812d 	bne.w	8000f0c <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000cb2:	2000      	movs	r0, #0
 8000cb4:	e014      	b.n	8000ce0 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000cb6:	4c90      	ldr	r4, [pc, #576]	; (8000ef8 <HAL_RCC_OscConfig+0x270>)
 8000cb8:	6863      	ldr	r3, [r4, #4]
 8000cba:	f003 030c 	and.w	r3, r3, #12
 8000cbe:	2b04      	cmp	r3, #4
 8000cc0:	d007      	beq.n	8000cd2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cc2:	6863      	ldr	r3, [r4, #4]
 8000cc4:	f003 030c 	and.w	r3, r3, #12
 8000cc8:	2b08      	cmp	r3, #8
 8000cca:	d10c      	bne.n	8000ce6 <HAL_RCC_OscConfig+0x5e>
 8000ccc:	6863      	ldr	r3, [r4, #4]
 8000cce:	03de      	lsls	r6, r3, #15
 8000cd0:	d509      	bpl.n	8000ce6 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cd2:	6823      	ldr	r3, [r4, #0]
 8000cd4:	039c      	lsls	r4, r3, #14
 8000cd6:	d5dd      	bpl.n	8000c94 <HAL_RCC_OscConfig+0xc>
 8000cd8:	686b      	ldr	r3, [r5, #4]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d1da      	bne.n	8000c94 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000cde:	2001      	movs	r0, #1
}
 8000ce0:	b002      	add	sp, #8
 8000ce2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ce6:	686b      	ldr	r3, [r5, #4]
 8000ce8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cec:	d110      	bne.n	8000d10 <HAL_RCC_OscConfig+0x88>
 8000cee:	6823      	ldr	r3, [r4, #0]
 8000cf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cf4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000cf6:	f7ff fa73 	bl	80001e0 <HAL_GetTick>
 8000cfa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cfc:	6823      	ldr	r3, [r4, #0]
 8000cfe:	0398      	lsls	r0, r3, #14
 8000d00:	d4c8      	bmi.n	8000c94 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d02:	f7ff fa6d 	bl	80001e0 <HAL_GetTick>
 8000d06:	1b80      	subs	r0, r0, r6
 8000d08:	2864      	cmp	r0, #100	; 0x64
 8000d0a:	d9f7      	bls.n	8000cfc <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000d0c:	2003      	movs	r0, #3
 8000d0e:	e7e7      	b.n	8000ce0 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d10:	b99b      	cbnz	r3, 8000d3a <HAL_RCC_OscConfig+0xb2>
 8000d12:	6823      	ldr	r3, [r4, #0]
 8000d14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d18:	6023      	str	r3, [r4, #0]
 8000d1a:	6823      	ldr	r3, [r4, #0]
 8000d1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d20:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000d22:	f7ff fa5d 	bl	80001e0 <HAL_GetTick>
 8000d26:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d28:	6823      	ldr	r3, [r4, #0]
 8000d2a:	0399      	lsls	r1, r3, #14
 8000d2c:	d5b2      	bpl.n	8000c94 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d2e:	f7ff fa57 	bl	80001e0 <HAL_GetTick>
 8000d32:	1b80      	subs	r0, r0, r6
 8000d34:	2864      	cmp	r0, #100	; 0x64
 8000d36:	d9f7      	bls.n	8000d28 <HAL_RCC_OscConfig+0xa0>
 8000d38:	e7e8      	b.n	8000d0c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d3a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d3e:	6823      	ldr	r3, [r4, #0]
 8000d40:	d103      	bne.n	8000d4a <HAL_RCC_OscConfig+0xc2>
 8000d42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d46:	6023      	str	r3, [r4, #0]
 8000d48:	e7d1      	b.n	8000cee <HAL_RCC_OscConfig+0x66>
 8000d4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d4e:	6023      	str	r3, [r4, #0]
 8000d50:	6823      	ldr	r3, [r4, #0]
 8000d52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d56:	e7cd      	b.n	8000cf4 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000d58:	4c67      	ldr	r4, [pc, #412]	; (8000ef8 <HAL_RCC_OscConfig+0x270>)
 8000d5a:	6863      	ldr	r3, [r4, #4]
 8000d5c:	f013 0f0c 	tst.w	r3, #12
 8000d60:	d007      	beq.n	8000d72 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d62:	6863      	ldr	r3, [r4, #4]
 8000d64:	f003 030c 	and.w	r3, r3, #12
 8000d68:	2b08      	cmp	r3, #8
 8000d6a:	d110      	bne.n	8000d8e <HAL_RCC_OscConfig+0x106>
 8000d6c:	6863      	ldr	r3, [r4, #4]
 8000d6e:	03da      	lsls	r2, r3, #15
 8000d70:	d40d      	bmi.n	8000d8e <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d72:	6823      	ldr	r3, [r4, #0]
 8000d74:	079b      	lsls	r3, r3, #30
 8000d76:	d502      	bpl.n	8000d7e <HAL_RCC_OscConfig+0xf6>
 8000d78:	692b      	ldr	r3, [r5, #16]
 8000d7a:	2b01      	cmp	r3, #1
 8000d7c:	d1af      	bne.n	8000cde <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d7e:	6823      	ldr	r3, [r4, #0]
 8000d80:	696a      	ldr	r2, [r5, #20]
 8000d82:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000d86:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000d8a:	6023      	str	r3, [r4, #0]
 8000d8c:	e785      	b.n	8000c9a <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d8e:	692a      	ldr	r2, [r5, #16]
 8000d90:	4b5a      	ldr	r3, [pc, #360]	; (8000efc <HAL_RCC_OscConfig+0x274>)
 8000d92:	b16a      	cbz	r2, 8000db0 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8000d94:	2201      	movs	r2, #1
 8000d96:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000d98:	f7ff fa22 	bl	80001e0 <HAL_GetTick>
 8000d9c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d9e:	6823      	ldr	r3, [r4, #0]
 8000da0:	079f      	lsls	r7, r3, #30
 8000da2:	d4ec      	bmi.n	8000d7e <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000da4:	f7ff fa1c 	bl	80001e0 <HAL_GetTick>
 8000da8:	1b80      	subs	r0, r0, r6
 8000daa:	2802      	cmp	r0, #2
 8000dac:	d9f7      	bls.n	8000d9e <HAL_RCC_OscConfig+0x116>
 8000dae:	e7ad      	b.n	8000d0c <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000db0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000db2:	f7ff fa15 	bl	80001e0 <HAL_GetTick>
 8000db6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000db8:	6823      	ldr	r3, [r4, #0]
 8000dba:	0798      	lsls	r0, r3, #30
 8000dbc:	f57f af6d 	bpl.w	8000c9a <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000dc0:	f7ff fa0e 	bl	80001e0 <HAL_GetTick>
 8000dc4:	1b80      	subs	r0, r0, r6
 8000dc6:	2802      	cmp	r0, #2
 8000dc8:	d9f6      	bls.n	8000db8 <HAL_RCC_OscConfig+0x130>
 8000dca:	e79f      	b.n	8000d0c <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000dcc:	69aa      	ldr	r2, [r5, #24]
 8000dce:	4c4a      	ldr	r4, [pc, #296]	; (8000ef8 <HAL_RCC_OscConfig+0x270>)
 8000dd0:	4b4b      	ldr	r3, [pc, #300]	; (8000f00 <HAL_RCC_OscConfig+0x278>)
 8000dd2:	b1da      	cbz	r2, 8000e0c <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000dd8:	f7ff fa02 	bl	80001e0 <HAL_GetTick>
 8000ddc:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000de0:	079b      	lsls	r3, r3, #30
 8000de2:	d50d      	bpl.n	8000e00 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000de4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000de8:	4b46      	ldr	r3, [pc, #280]	; (8000f04 <HAL_RCC_OscConfig+0x27c>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	fbb3 f3f2 	udiv	r3, r3, r2
 8000df0:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000df2:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000df4:	9b01      	ldr	r3, [sp, #4]
 8000df6:	1e5a      	subs	r2, r3, #1
 8000df8:	9201      	str	r2, [sp, #4]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d1f9      	bne.n	8000df2 <HAL_RCC_OscConfig+0x16a>
 8000dfe:	e750      	b.n	8000ca2 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e00:	f7ff f9ee 	bl	80001e0 <HAL_GetTick>
 8000e04:	1b80      	subs	r0, r0, r6
 8000e06:	2802      	cmp	r0, #2
 8000e08:	d9e9      	bls.n	8000dde <HAL_RCC_OscConfig+0x156>
 8000e0a:	e77f      	b.n	8000d0c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000e0c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000e0e:	f7ff f9e7 	bl	80001e0 <HAL_GetTick>
 8000e12:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000e16:	079f      	lsls	r7, r3, #30
 8000e18:	f57f af43 	bpl.w	8000ca2 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e1c:	f7ff f9e0 	bl	80001e0 <HAL_GetTick>
 8000e20:	1b80      	subs	r0, r0, r6
 8000e22:	2802      	cmp	r0, #2
 8000e24:	d9f6      	bls.n	8000e14 <HAL_RCC_OscConfig+0x18c>
 8000e26:	e771      	b.n	8000d0c <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e28:	4c33      	ldr	r4, [pc, #204]	; (8000ef8 <HAL_RCC_OscConfig+0x270>)
 8000e2a:	69e3      	ldr	r3, [r4, #28]
 8000e2c:	00d8      	lsls	r0, r3, #3
 8000e2e:	d424      	bmi.n	8000e7a <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8000e30:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e32:	69e3      	ldr	r3, [r4, #28]
 8000e34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e38:	61e3      	str	r3, [r4, #28]
 8000e3a:	69e3      	ldr	r3, [r4, #28]
 8000e3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e40:	9300      	str	r3, [sp, #0]
 8000e42:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e44:	4e30      	ldr	r6, [pc, #192]	; (8000f08 <HAL_RCC_OscConfig+0x280>)
 8000e46:	6833      	ldr	r3, [r6, #0]
 8000e48:	05d9      	lsls	r1, r3, #23
 8000e4a:	d518      	bpl.n	8000e7e <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e4c:	68eb      	ldr	r3, [r5, #12]
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d126      	bne.n	8000ea0 <HAL_RCC_OscConfig+0x218>
 8000e52:	6a23      	ldr	r3, [r4, #32]
 8000e54:	f043 0301 	orr.w	r3, r3, #1
 8000e58:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000e5a:	f7ff f9c1 	bl	80001e0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e5e:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000e62:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e64:	6a23      	ldr	r3, [r4, #32]
 8000e66:	079b      	lsls	r3, r3, #30
 8000e68:	d53f      	bpl.n	8000eea <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8000e6a:	2f00      	cmp	r7, #0
 8000e6c:	f43f af1d 	beq.w	8000caa <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e70:	69e3      	ldr	r3, [r4, #28]
 8000e72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e76:	61e3      	str	r3, [r4, #28]
 8000e78:	e717      	b.n	8000caa <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8000e7a:	2700      	movs	r7, #0
 8000e7c:	e7e2      	b.n	8000e44 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e7e:	6833      	ldr	r3, [r6, #0]
 8000e80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e84:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000e86:	f7ff f9ab 	bl	80001e0 <HAL_GetTick>
 8000e8a:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e8c:	6833      	ldr	r3, [r6, #0]
 8000e8e:	05da      	lsls	r2, r3, #23
 8000e90:	d4dc      	bmi.n	8000e4c <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e92:	f7ff f9a5 	bl	80001e0 <HAL_GetTick>
 8000e96:	eba0 0008 	sub.w	r0, r0, r8
 8000e9a:	2864      	cmp	r0, #100	; 0x64
 8000e9c:	d9f6      	bls.n	8000e8c <HAL_RCC_OscConfig+0x204>
 8000e9e:	e735      	b.n	8000d0c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ea0:	b9ab      	cbnz	r3, 8000ece <HAL_RCC_OscConfig+0x246>
 8000ea2:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ea4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ea8:	f023 0301 	bic.w	r3, r3, #1
 8000eac:	6223      	str	r3, [r4, #32]
 8000eae:	6a23      	ldr	r3, [r4, #32]
 8000eb0:	f023 0304 	bic.w	r3, r3, #4
 8000eb4:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000eb6:	f7ff f993 	bl	80001e0 <HAL_GetTick>
 8000eba:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ebc:	6a23      	ldr	r3, [r4, #32]
 8000ebe:	0798      	lsls	r0, r3, #30
 8000ec0:	d5d3      	bpl.n	8000e6a <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ec2:	f7ff f98d 	bl	80001e0 <HAL_GetTick>
 8000ec6:	1b80      	subs	r0, r0, r6
 8000ec8:	4540      	cmp	r0, r8
 8000eca:	d9f7      	bls.n	8000ebc <HAL_RCC_OscConfig+0x234>
 8000ecc:	e71e      	b.n	8000d0c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ece:	2b05      	cmp	r3, #5
 8000ed0:	6a23      	ldr	r3, [r4, #32]
 8000ed2:	d103      	bne.n	8000edc <HAL_RCC_OscConfig+0x254>
 8000ed4:	f043 0304 	orr.w	r3, r3, #4
 8000ed8:	6223      	str	r3, [r4, #32]
 8000eda:	e7ba      	b.n	8000e52 <HAL_RCC_OscConfig+0x1ca>
 8000edc:	f023 0301 	bic.w	r3, r3, #1
 8000ee0:	6223      	str	r3, [r4, #32]
 8000ee2:	6a23      	ldr	r3, [r4, #32]
 8000ee4:	f023 0304 	bic.w	r3, r3, #4
 8000ee8:	e7b6      	b.n	8000e58 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000eea:	f7ff f979 	bl	80001e0 <HAL_GetTick>
 8000eee:	eba0 0008 	sub.w	r0, r0, r8
 8000ef2:	42b0      	cmp	r0, r6
 8000ef4:	d9b6      	bls.n	8000e64 <HAL_RCC_OscConfig+0x1dc>
 8000ef6:	e709      	b.n	8000d0c <HAL_RCC_OscConfig+0x84>
 8000ef8:	40021000 	.word	0x40021000
 8000efc:	42420000 	.word	0x42420000
 8000f00:	42420480 	.word	0x42420480
 8000f04:	20000118 	.word	0x20000118
 8000f08:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f0c:	4c22      	ldr	r4, [pc, #136]	; (8000f98 <HAL_RCC_OscConfig+0x310>)
 8000f0e:	6863      	ldr	r3, [r4, #4]
 8000f10:	f003 030c 	and.w	r3, r3, #12
 8000f14:	2b08      	cmp	r3, #8
 8000f16:	f43f aee2 	beq.w	8000cde <HAL_RCC_OscConfig+0x56>
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	4e1f      	ldr	r6, [pc, #124]	; (8000f9c <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f1e:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000f20:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f22:	d12b      	bne.n	8000f7c <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8000f24:	f7ff f95c 	bl	80001e0 <HAL_GetTick>
 8000f28:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f2a:	6823      	ldr	r3, [r4, #0]
 8000f2c:	0199      	lsls	r1, r3, #6
 8000f2e:	d41f      	bmi.n	8000f70 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000f30:	6a2b      	ldr	r3, [r5, #32]
 8000f32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f36:	d105      	bne.n	8000f44 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f38:	6862      	ldr	r2, [r4, #4]
 8000f3a:	68a9      	ldr	r1, [r5, #8]
 8000f3c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000f40:	430a      	orrs	r2, r1
 8000f42:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f44:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000f46:	6862      	ldr	r2, [r4, #4]
 8000f48:	430b      	orrs	r3, r1
 8000f4a:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000f52:	2301      	movs	r3, #1
 8000f54:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000f56:	f7ff f943 	bl	80001e0 <HAL_GetTick>
 8000f5a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f5c:	6823      	ldr	r3, [r4, #0]
 8000f5e:	019a      	lsls	r2, r3, #6
 8000f60:	f53f aea7 	bmi.w	8000cb2 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f64:	f7ff f93c 	bl	80001e0 <HAL_GetTick>
 8000f68:	1b40      	subs	r0, r0, r5
 8000f6a:	2802      	cmp	r0, #2
 8000f6c:	d9f6      	bls.n	8000f5c <HAL_RCC_OscConfig+0x2d4>
 8000f6e:	e6cd      	b.n	8000d0c <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f70:	f7ff f936 	bl	80001e0 <HAL_GetTick>
 8000f74:	1bc0      	subs	r0, r0, r7
 8000f76:	2802      	cmp	r0, #2
 8000f78:	d9d7      	bls.n	8000f2a <HAL_RCC_OscConfig+0x2a2>
 8000f7a:	e6c7      	b.n	8000d0c <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000f7c:	f7ff f930 	bl	80001e0 <HAL_GetTick>
 8000f80:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f82:	6823      	ldr	r3, [r4, #0]
 8000f84:	019b      	lsls	r3, r3, #6
 8000f86:	f57f ae94 	bpl.w	8000cb2 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f8a:	f7ff f929 	bl	80001e0 <HAL_GetTick>
 8000f8e:	1b40      	subs	r0, r0, r5
 8000f90:	2802      	cmp	r0, #2
 8000f92:	d9f6      	bls.n	8000f82 <HAL_RCC_OscConfig+0x2fa>
 8000f94:	e6ba      	b.n	8000d0c <HAL_RCC_OscConfig+0x84>
 8000f96:	bf00      	nop
 8000f98:	40021000 	.word	0x40021000
 8000f9c:	42420060 	.word	0x42420060

08000fa0 <HAL_RCC_GetSysClockFreq>:
{
 8000fa0:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000fa2:	4b19      	ldr	r3, [pc, #100]	; (8001008 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8000fa4:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000fa6:	ac02      	add	r4, sp, #8
 8000fa8:	f103 0510 	add.w	r5, r3, #16
 8000fac:	4622      	mov	r2, r4
 8000fae:	6818      	ldr	r0, [r3, #0]
 8000fb0:	6859      	ldr	r1, [r3, #4]
 8000fb2:	3308      	adds	r3, #8
 8000fb4:	c203      	stmia	r2!, {r0, r1}
 8000fb6:	42ab      	cmp	r3, r5
 8000fb8:	4614      	mov	r4, r2
 8000fba:	d1f7      	bne.n	8000fac <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	f88d 3004 	strb.w	r3, [sp, #4]
 8000fc2:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8000fc4:	4911      	ldr	r1, [pc, #68]	; (800100c <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000fc6:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8000fca:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000fcc:	f003 020c 	and.w	r2, r3, #12
 8000fd0:	2a08      	cmp	r2, #8
 8000fd2:	d117      	bne.n	8001004 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000fd4:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000fd8:	a806      	add	r0, sp, #24
 8000fda:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000fdc:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000fde:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000fe2:	d50c      	bpl.n	8000ffe <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000fe4:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000fe6:	480a      	ldr	r0, [pc, #40]	; (8001010 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000fe8:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000fec:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000fee:	aa06      	add	r2, sp, #24
 8000ff0:	4413      	add	r3, r2
 8000ff2:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000ff6:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000ffa:	b007      	add	sp, #28
 8000ffc:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000ffe:	4805      	ldr	r0, [pc, #20]	; (8001014 <HAL_RCC_GetSysClockFreq+0x74>)
 8001000:	4350      	muls	r0, r2
 8001002:	e7fa      	b.n	8000ffa <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8001004:	4802      	ldr	r0, [pc, #8]	; (8001010 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8001006:	e7f8      	b.n	8000ffa <HAL_RCC_GetSysClockFreq+0x5a>
 8001008:	080039e0 	.word	0x080039e0
 800100c:	40021000 	.word	0x40021000
 8001010:	007a1200 	.word	0x007a1200
 8001014:	003d0900 	.word	0x003d0900

08001018 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001018:	4a54      	ldr	r2, [pc, #336]	; (800116c <HAL_RCC_ClockConfig+0x154>)
{
 800101a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800101e:	6813      	ldr	r3, [r2, #0]
{
 8001020:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001022:	f003 0307 	and.w	r3, r3, #7
 8001026:	428b      	cmp	r3, r1
{
 8001028:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800102a:	d32a      	bcc.n	8001082 <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800102c:	6829      	ldr	r1, [r5, #0]
 800102e:	078c      	lsls	r4, r1, #30
 8001030:	d434      	bmi.n	800109c <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001032:	07ca      	lsls	r2, r1, #31
 8001034:	d447      	bmi.n	80010c6 <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001036:	4a4d      	ldr	r2, [pc, #308]	; (800116c <HAL_RCC_ClockConfig+0x154>)
 8001038:	6813      	ldr	r3, [r2, #0]
 800103a:	f003 0307 	and.w	r3, r3, #7
 800103e:	429e      	cmp	r6, r3
 8001040:	f0c0 8082 	bcc.w	8001148 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001044:	682a      	ldr	r2, [r5, #0]
 8001046:	4c4a      	ldr	r4, [pc, #296]	; (8001170 <HAL_RCC_ClockConfig+0x158>)
 8001048:	f012 0f04 	tst.w	r2, #4
 800104c:	f040 8087 	bne.w	800115e <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001050:	0713      	lsls	r3, r2, #28
 8001052:	d506      	bpl.n	8001062 <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001054:	6863      	ldr	r3, [r4, #4]
 8001056:	692a      	ldr	r2, [r5, #16]
 8001058:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800105c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001060:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001062:	f7ff ff9d 	bl	8000fa0 <HAL_RCC_GetSysClockFreq>
 8001066:	6863      	ldr	r3, [r4, #4]
 8001068:	4a42      	ldr	r2, [pc, #264]	; (8001174 <HAL_RCC_ClockConfig+0x15c>)
 800106a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800106e:	5cd3      	ldrb	r3, [r2, r3]
 8001070:	40d8      	lsrs	r0, r3
 8001072:	4b41      	ldr	r3, [pc, #260]	; (8001178 <HAL_RCC_ClockConfig+0x160>)
 8001074:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001076:	2000      	movs	r0, #0
 8001078:	f7ff f870 	bl	800015c <HAL_InitTick>
  return HAL_OK;
 800107c:	2000      	movs	r0, #0
}
 800107e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001082:	6813      	ldr	r3, [r2, #0]
 8001084:	f023 0307 	bic.w	r3, r3, #7
 8001088:	430b      	orrs	r3, r1
 800108a:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800108c:	6813      	ldr	r3, [r2, #0]
 800108e:	f003 0307 	and.w	r3, r3, #7
 8001092:	4299      	cmp	r1, r3
 8001094:	d0ca      	beq.n	800102c <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8001096:	2001      	movs	r0, #1
 8001098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800109c:	4b34      	ldr	r3, [pc, #208]	; (8001170 <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800109e:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010a2:	bf1e      	ittt	ne
 80010a4:	685a      	ldrne	r2, [r3, #4]
 80010a6:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 80010aa:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010ac:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010ae:	bf42      	ittt	mi
 80010b0:	685a      	ldrmi	r2, [r3, #4]
 80010b2:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 80010b6:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010b8:	685a      	ldr	r2, [r3, #4]
 80010ba:	68a8      	ldr	r0, [r5, #8]
 80010bc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80010c0:	4302      	orrs	r2, r0
 80010c2:	605a      	str	r2, [r3, #4]
 80010c4:	e7b5      	b.n	8001032 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010c6:	686a      	ldr	r2, [r5, #4]
 80010c8:	4c29      	ldr	r4, [pc, #164]	; (8001170 <HAL_RCC_ClockConfig+0x158>)
 80010ca:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010cc:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010ce:	d11c      	bne.n	800110a <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010d0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010d4:	d0df      	beq.n	8001096 <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010d6:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010d8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010dc:	f023 0303 	bic.w	r3, r3, #3
 80010e0:	4313      	orrs	r3, r2
 80010e2:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80010e4:	f7ff f87c 	bl	80001e0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010e8:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 80010ea:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d114      	bne.n	800111a <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80010f0:	6863      	ldr	r3, [r4, #4]
 80010f2:	f003 030c 	and.w	r3, r3, #12
 80010f6:	2b04      	cmp	r3, #4
 80010f8:	d09d      	beq.n	8001036 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010fa:	f7ff f871 	bl	80001e0 <HAL_GetTick>
 80010fe:	1bc0      	subs	r0, r0, r7
 8001100:	4540      	cmp	r0, r8
 8001102:	d9f5      	bls.n	80010f0 <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 8001104:	2003      	movs	r0, #3
 8001106:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800110a:	2a02      	cmp	r2, #2
 800110c:	d102      	bne.n	8001114 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800110e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001112:	e7df      	b.n	80010d4 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001114:	f013 0f02 	tst.w	r3, #2
 8001118:	e7dc      	b.n	80010d4 <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800111a:	2b02      	cmp	r3, #2
 800111c:	d10f      	bne.n	800113e <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800111e:	6863      	ldr	r3, [r4, #4]
 8001120:	f003 030c 	and.w	r3, r3, #12
 8001124:	2b08      	cmp	r3, #8
 8001126:	d086      	beq.n	8001036 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001128:	f7ff f85a 	bl	80001e0 <HAL_GetTick>
 800112c:	1bc0      	subs	r0, r0, r7
 800112e:	4540      	cmp	r0, r8
 8001130:	d9f5      	bls.n	800111e <HAL_RCC_ClockConfig+0x106>
 8001132:	e7e7      	b.n	8001104 <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001134:	f7ff f854 	bl	80001e0 <HAL_GetTick>
 8001138:	1bc0      	subs	r0, r0, r7
 800113a:	4540      	cmp	r0, r8
 800113c:	d8e2      	bhi.n	8001104 <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800113e:	6863      	ldr	r3, [r4, #4]
 8001140:	f013 0f0c 	tst.w	r3, #12
 8001144:	d1f6      	bne.n	8001134 <HAL_RCC_ClockConfig+0x11c>
 8001146:	e776      	b.n	8001036 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001148:	6813      	ldr	r3, [r2, #0]
 800114a:	f023 0307 	bic.w	r3, r3, #7
 800114e:	4333      	orrs	r3, r6
 8001150:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001152:	6813      	ldr	r3, [r2, #0]
 8001154:	f003 0307 	and.w	r3, r3, #7
 8001158:	429e      	cmp	r6, r3
 800115a:	d19c      	bne.n	8001096 <HAL_RCC_ClockConfig+0x7e>
 800115c:	e772      	b.n	8001044 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800115e:	6863      	ldr	r3, [r4, #4]
 8001160:	68e9      	ldr	r1, [r5, #12]
 8001162:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001166:	430b      	orrs	r3, r1
 8001168:	6063      	str	r3, [r4, #4]
 800116a:	e771      	b.n	8001050 <HAL_RCC_ClockConfig+0x38>
 800116c:	40022000 	.word	0x40022000
 8001170:	40021000 	.word	0x40021000
 8001174:	08003a1f 	.word	0x08003a1f
 8001178:	20000118 	.word	0x20000118

0800117c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800117c:	4b04      	ldr	r3, [pc, #16]	; (8001190 <HAL_RCC_GetPCLK2Freq+0x14>)
 800117e:	4a05      	ldr	r2, [pc, #20]	; (8001194 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001186:	5cd3      	ldrb	r3, [r2, r3]
 8001188:	4a03      	ldr	r2, [pc, #12]	; (8001198 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800118a:	6810      	ldr	r0, [r2, #0]
} 
 800118c:	40d8      	lsrs	r0, r3
 800118e:	4770      	bx	lr
 8001190:	40021000 	.word	0x40021000
 8001194:	08003a2f 	.word	0x08003a2f
 8001198:	20000118 	.word	0x20000118

0800119c <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800119c:	6803      	ldr	r3, [r0, #0]
{
 800119e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80011a2:	07d9      	lsls	r1, r3, #31
{
 80011a4:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80011a6:	d520      	bpl.n	80011ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011a8:	4c35      	ldr	r4, [pc, #212]	; (8001280 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80011aa:	69e3      	ldr	r3, [r4, #28]
 80011ac:	00da      	lsls	r2, r3, #3
 80011ae:	d432      	bmi.n	8001216 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 80011b0:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 80011b2:	69e3      	ldr	r3, [r4, #28]
 80011b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011b8:	61e3      	str	r3, [r4, #28]
 80011ba:	69e3      	ldr	r3, [r4, #28]
 80011bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c0:	9301      	str	r3, [sp, #4]
 80011c2:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011c4:	4e2f      	ldr	r6, [pc, #188]	; (8001284 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80011c6:	6833      	ldr	r3, [r6, #0]
 80011c8:	05db      	lsls	r3, r3, #23
 80011ca:	d526      	bpl.n	800121a <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80011cc:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80011ce:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80011d2:	d136      	bne.n	8001242 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80011d4:	6a23      	ldr	r3, [r4, #32]
 80011d6:	686a      	ldr	r2, [r5, #4]
 80011d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80011dc:	4313      	orrs	r3, r2
 80011de:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80011e0:	b11f      	cbz	r7, 80011ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011e2:	69e3      	ldr	r3, [r4, #28]
 80011e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011e8:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80011ea:	6828      	ldr	r0, [r5, #0]
 80011ec:	0783      	lsls	r3, r0, #30
 80011ee:	d506      	bpl.n	80011fe <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80011f0:	4a23      	ldr	r2, [pc, #140]	; (8001280 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80011f2:	68a9      	ldr	r1, [r5, #8]
 80011f4:	6853      	ldr	r3, [r2, #4]
 80011f6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80011fa:	430b      	orrs	r3, r1
 80011fc:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80011fe:	f010 0010 	ands.w	r0, r0, #16
 8001202:	d01b      	beq.n	800123c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001204:	4a1e      	ldr	r2, [pc, #120]	; (8001280 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001206:	68e9      	ldr	r1, [r5, #12]
 8001208:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800120a:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800120c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001210:	430b      	orrs	r3, r1
 8001212:	6053      	str	r3, [r2, #4]
 8001214:	e012      	b.n	800123c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8001216:	2700      	movs	r7, #0
 8001218:	e7d4      	b.n	80011c4 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800121a:	6833      	ldr	r3, [r6, #0]
 800121c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001220:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001222:	f7fe ffdd 	bl	80001e0 <HAL_GetTick>
 8001226:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001228:	6833      	ldr	r3, [r6, #0]
 800122a:	05d8      	lsls	r0, r3, #23
 800122c:	d4ce      	bmi.n	80011cc <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800122e:	f7fe ffd7 	bl	80001e0 <HAL_GetTick>
 8001232:	eba0 0008 	sub.w	r0, r0, r8
 8001236:	2864      	cmp	r0, #100	; 0x64
 8001238:	d9f6      	bls.n	8001228 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 800123a:	2003      	movs	r0, #3
}
 800123c:	b002      	add	sp, #8
 800123e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001242:	686a      	ldr	r2, [r5, #4]
 8001244:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001248:	4293      	cmp	r3, r2
 800124a:	d0c3      	beq.n	80011d4 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 800124c:	2001      	movs	r0, #1
 800124e:	4a0e      	ldr	r2, [pc, #56]	; (8001288 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001250:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001252:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001254:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001256:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 800125a:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 800125c:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800125e:	07d9      	lsls	r1, r3, #31
 8001260:	d5b8      	bpl.n	80011d4 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8001262:	f7fe ffbd 	bl	80001e0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001266:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800126a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800126c:	6a23      	ldr	r3, [r4, #32]
 800126e:	079a      	lsls	r2, r3, #30
 8001270:	d4b0      	bmi.n	80011d4 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001272:	f7fe ffb5 	bl	80001e0 <HAL_GetTick>
 8001276:	1b80      	subs	r0, r0, r6
 8001278:	4540      	cmp	r0, r8
 800127a:	d9f7      	bls.n	800126c <HAL_RCCEx_PeriphCLKConfig+0xd0>
 800127c:	e7dd      	b.n	800123a <HAL_RCCEx_PeriphCLKConfig+0x9e>
 800127e:	bf00      	nop
 8001280:	40021000 	.word	0x40021000
 8001284:	40007000 	.word	0x40007000
 8001288:	42420440 	.word	0x42420440

0800128c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800128c:	b570      	push	{r4, r5, r6, lr}
 800128e:	4604      	mov	r4, r0
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001290:	4b35      	ldr	r3, [pc, #212]	; (8001368 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
{
 8001292:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001294:	ad02      	add	r5, sp, #8
 8001296:	f103 0610 	add.w	r6, r3, #16
 800129a:	462a      	mov	r2, r5
 800129c:	6818      	ldr	r0, [r3, #0]
 800129e:	6859      	ldr	r1, [r3, #4]
 80012a0:	3308      	adds	r3, #8
 80012a2:	c203      	stmia	r2!, {r0, r1}
 80012a4:	42b3      	cmp	r3, r6
 80012a6:	4615      	mov	r5, r2
 80012a8:	d1f7      	bne.n	800129a <HAL_RCCEx_GetPeriphCLKFreq+0xe>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80012aa:	2301      	movs	r3, #1
 80012ac:	f88d 3004 	strb.w	r3, [sp, #4]
 80012b0:	2302      	movs	r3, #2
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 80012b2:	429c      	cmp	r4, r3
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80012b4:	f88d 3005 	strb.w	r3, [sp, #5]
  switch (PeriphClk)
 80012b8:	d047      	beq.n	800134a <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
 80012ba:	2c10      	cmp	r4, #16
 80012bc:	d017      	beq.n	80012ee <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 80012be:	2c01      	cmp	r4, #1
 80012c0:	d14f      	bne.n	8001362 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80012c2:	f240 3102 	movw	r1, #770	; 0x302
      temp_reg = RCC->BDCR;
 80012c6:	4a29      	ldr	r2, [pc, #164]	; (800136c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 80012c8:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80012ca:	4019      	ands	r1, r3
 80012cc:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
 80012d0:	d044      	beq.n	800135c <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
      {
        frequency = LSE_VALUE;
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80012d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80012d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012da:	d12d      	bne.n	8001338 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
      {
        frequency = LSI_VALUE;
 80012dc:	f649 4040 	movw	r0, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80012e0:	6a53      	ldr	r3, [r2, #36]	; 0x24
        frequency = LSI_VALUE;
 80012e2:	f013 0f02 	tst.w	r3, #2
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
      {
        frequency = HSE_VALUE / 128U;
 80012e6:	bf08      	it	eq
 80012e8:	2000      	moveq	r0, #0
    {
      break;
    }
  }
  return(frequency);
}
 80012ea:	b006      	add	sp, #24
 80012ec:	bd70      	pop	{r4, r5, r6, pc}
      temp_reg = RCC->CFGR;
 80012ee:	4b1f      	ldr	r3, [pc, #124]	; (800136c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 80012f0:	6859      	ldr	r1, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLLON))
 80012f2:	6818      	ldr	r0, [r3, #0]
 80012f4:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 80012f8:	d0f7      	beq.n	80012ea <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80012fa:	f3c1 4283 	ubfx	r2, r1, #18, #4
 80012fe:	a806      	add	r0, sp, #24
 8001300:	4402      	add	r2, r0
 8001302:	f812 0c10 	ldrb.w	r0, [r2, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001306:	03ca      	lsls	r2, r1, #15
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001308:	bf41      	itttt	mi
 800130a:	685a      	ldrmi	r2, [r3, #4]
 800130c:	a906      	addmi	r1, sp, #24
 800130e:	f3c2 4240 	ubfxmi	r2, r2, #17, #1
 8001312:	1852      	addmi	r2, r2, r1
 8001314:	bf44      	itt	mi
 8001316:	f812 1c14 	ldrbmi.w	r1, [r2, #-20]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800131a:	4a15      	ldrmi	r2, [pc, #84]	; (8001370 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800131c:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800131e:	bf4c      	ite	mi
 8001320:	fbb2 f2f1 	udivmi	r2, r2, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001324:	4a13      	ldrpl	r2, [pc, #76]	; (8001374 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001326:	025b      	lsls	r3, r3, #9
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001328:	fb02 f000 	mul.w	r0, r2, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800132c:	d4dd      	bmi.n	80012ea <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          frequency = (pllclk * 2) / 3;
 800132e:	2303      	movs	r3, #3
 8001330:	0040      	lsls	r0, r0, #1
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8001332:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8001336:	e7d8      	b.n	80012ea <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8001338:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800133c:	d111      	bne.n	8001362 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 800133e:	6813      	ldr	r3, [r2, #0]
        frequency = HSE_VALUE / 128U;
 8001340:	f24f 4024 	movw	r0, #62500	; 0xf424
 8001344:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001348:	e7cd      	b.n	80012e6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800134a:	f7ff ff17 	bl	800117c <HAL_RCC_GetPCLK2Freq>
 800134e:	4b07      	ldr	r3, [pc, #28]	; (800136c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8001356:	3301      	adds	r3, #1
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	e7ea      	b.n	8001332 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
        frequency = LSE_VALUE;
 800135c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001360:	e7c3      	b.n	80012ea <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
        frequency = 0U;
 8001362:	2000      	movs	r0, #0
 8001364:	e7c1      	b.n	80012ea <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 8001366:	bf00      	nop
 8001368:	080039f0 	.word	0x080039f0
 800136c:	40021000 	.word	0x40021000
 8001370:	007a1200 	.word	0x007a1200
 8001374:	003d0900 	.word	0x003d0900

08001378 <RTC_ReadTimeCounter>:
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef* hrtc)
{
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
  uint32_t timecounter = 0U;

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8001378:	6803      	ldr	r3, [r0, #0]
{
 800137a:	b530      	push	{r4, r5, lr}
  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800137c:	699a      	ldr	r2, [r3, #24]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 800137e:	69d8      	ldr	r0, [r3, #28]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8001380:	6999      	ldr	r1, [r3, #24]

  if (high1 != high2)
 8001382:	b295      	uxth	r5, r2
 8001384:	b28c      	uxth	r4, r1
 8001386:	42a5      	cmp	r5, r4
  { /* In this case the counter roll over during reading of CNTL and CNTH registers, 
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8001388:	bf1d      	ittte	ne
 800138a:	69d8      	ldrne	r0, [r3, #28]
 800138c:	b280      	uxthne	r0, r0
 800138e:	ea40 4001 	orrne.w	r0, r0, r1, lsl #16
  }
  else
  { /* No counter roll over during reading of CNTL and CNTH registers, counter 
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8001392:	b280      	uxtheq	r0, r0
 8001394:	bf08      	it	eq
 8001396:	ea40 4002 	orreq.w	r0, r0, r2, lsl #16
  }

  return timecounter;
}
 800139a:	bd30      	pop	{r4, r5, pc}

0800139c <RTC_ReadAlarmCounter>:
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef* hrtc)
{
  uint16_t high1 = 0U, low = 0U;

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 800139c:	6803      	ldr	r3, [r0, #0]
 800139e:	6a18      	ldr	r0, [r3, #32]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80013a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24

  return (((uint32_t) high1 << 16U) | low);
 80013a2:	b29b      	uxth	r3, r3
}
 80013a4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80013a8:	4770      	bx	lr

080013aa <RTC_ByteToBcd2>:
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 80013aa:	2300      	movs	r3, #0
  
  while(Value >= 10U)
 80013ac:	2809      	cmp	r0, #9
 80013ae:	d803      	bhi.n	80013b8 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Value -= 10U;
  }
  
  return  ((uint8_t)(bcdhigh << 4U) | Value);
 80013b0:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 80013b4:	b2c0      	uxtb	r0, r0
 80013b6:	4770      	bx	lr
    Value -= 10U;
 80013b8:	380a      	subs	r0, #10
    bcdhigh++;
 80013ba:	3301      	adds	r3, #1
    Value -= 10U;
 80013bc:	b2c0      	uxtb	r0, r0
 80013be:	e7f5      	b.n	80013ac <RTC_ByteToBcd2+0x2>

080013c0 <RTC_Bcd2ToByte>:
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
  return (tmp + (Value & (uint8_t)0x0F));
 80013c0:	220a      	movs	r2, #10
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80013c2:	0903      	lsrs	r3, r0, #4
  return (tmp + (Value & (uint8_t)0x0F));
 80013c4:	f000 000f 	and.w	r0, r0, #15
 80013c8:	fb02 0003 	mla	r0, r2, r3, r0
}
 80013cc:	b2c0      	uxtb	r0, r0
 80013ce:	4770      	bx	lr

080013d0 <RTC_WeekDayNum>:
{
  uint32_t year = 0U, weekday = 0U;

  year = 2000U + nYear;
  
  if(nMonth < 3U)
 80013d0:	2902      	cmp	r1, #2
{
 80013d2:	b570      	push	{r4, r5, r6, lr}
 80013d4:	f04f 0317 	mov.w	r3, #23
  year = 2000U + nYear;
 80013d8:	f500 65fa 	add.w	r5, r0, #2000	; 0x7d0
 80013dc:	f04f 0609 	mov.w	r6, #9
  if(nMonth < 3U)
 80013e0:	d81a      	bhi.n	8001418 <RTC_WeekDayNum+0x48>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth)/9U) + nDay + 4U + year + ((year-1U)/4U) - ((year-1U)/100U) + ((year-1U)/400U)) % 7U;
 80013e2:	434b      	muls	r3, r1
 80013e4:	f200 74cf 	addw	r4, r0, #1999	; 0x7cf
 80013e8:	fbb3 f0f6 	udiv	r0, r3, r6
 80013ec:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80013f0:	fbb4 f3f3 	udiv	r3, r4, r3
 80013f4:	3204      	adds	r2, #4
 80013f6:	442a      	add	r2, r5
 80013f8:	4410      	add	r0, r2
 80013fa:	eb00 0094 	add.w	r0, r0, r4, lsr #2
 80013fe:	4418      	add	r0, r3
 8001400:	2364      	movs	r3, #100	; 0x64
 8001402:	fbb4 f4f3 	udiv	r4, r4, r3
 8001406:	1b00      	subs	r0, r0, r4
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth)/9U) + nDay + 4U + year + (year/4U) - (year/100U) + (year/400U) - 2U ) % 7U; 
 8001408:	2307      	movs	r3, #7
 800140a:	fbb0 f3f3 	udiv	r3, r0, r3
 800140e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8001412:	1ac0      	subs	r0, r0, r3
  }

  return (uint8_t)weekday;
}
 8001414:	b2c0      	uxtb	r0, r0
 8001416:	bd70      	pop	{r4, r5, r6, pc}
    weekday = (((23U * nMonth)/9U) + nDay + 4U + year + (year/4U) - (year/100U) + (year/400U) - 2U ) % 7U; 
 8001418:	fb03 f001 	mul.w	r0, r3, r1
 800141c:	fbb0 f0f6 	udiv	r0, r0, r6
 8001420:	3202      	adds	r2, #2
 8001422:	442a      	add	r2, r5
 8001424:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001428:	4410      	add	r0, r2
 800142a:	2264      	movs	r2, #100	; 0x64
 800142c:	fbb5 f3f3 	udiv	r3, r5, r3
 8001430:	fbb5 f2f2 	udiv	r2, r5, r2
 8001434:	eb00 0095 	add.w	r0, r0, r5, lsr #2
 8001438:	4418      	add	r0, r3
 800143a:	1a80      	subs	r0, r0, r2
 800143c:	e7e4      	b.n	8001408 <RTC_WeekDayNum+0x38>

0800143e <RTC_EnterInitMode>:
{
 800143e:	b538      	push	{r3, r4, r5, lr}
 8001440:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 8001442:	f7fe fecd 	bl	80001e0 <HAL_GetTick>
 8001446:	4605      	mov	r5, r0
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8001448:	6823      	ldr	r3, [r4, #0]
 800144a:	685a      	ldr	r2, [r3, #4]
 800144c:	0692      	lsls	r2, r2, #26
 800144e:	d505      	bpl.n	800145c <RTC_EnterInitMode+0x1e>
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001450:	685a      	ldr	r2, [r3, #4]
  return HAL_OK;  
 8001452:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001454:	f042 0210 	orr.w	r2, r2, #16
 8001458:	605a      	str	r2, [r3, #4]
  return HAL_OK;  
 800145a:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800145c:	f7fe fec0 	bl	80001e0 <HAL_GetTick>
 8001460:	1b40      	subs	r0, r0, r5
 8001462:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001466:	d9ef      	bls.n	8001448 <RTC_EnterInitMode+0xa>
      return HAL_TIMEOUT;
 8001468:	2003      	movs	r0, #3
}
 800146a:	bd38      	pop	{r3, r4, r5, pc}

0800146c <RTC_ExitInitMode>:
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800146c:	6802      	ldr	r2, [r0, #0]
{
 800146e:	b538      	push	{r3, r4, r5, lr}
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001470:	6853      	ldr	r3, [r2, #4]
{
 8001472:	4604      	mov	r4, r0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001474:	f023 0310 	bic.w	r3, r3, #16
 8001478:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 800147a:	f7fe feb1 	bl	80001e0 <HAL_GetTick>
 800147e:	4605      	mov	r5, r0
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8001480:	6823      	ldr	r3, [r4, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	069b      	lsls	r3, r3, #26
 8001486:	d501      	bpl.n	800148c <RTC_ExitInitMode+0x20>
  return HAL_OK;  
 8001488:	2000      	movs	r0, #0
 800148a:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800148c:	f7fe fea8 	bl	80001e0 <HAL_GetTick>
 8001490:	1b40      	subs	r0, r0, r5
 8001492:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001496:	d9f3      	bls.n	8001480 <RTC_ExitInitMode+0x14>
      return HAL_TIMEOUT;
 8001498:	2003      	movs	r0, #3
}
 800149a:	bd38      	pop	{r3, r4, r5, pc}

0800149c <RTC_WriteTimeCounter>:
{
 800149c:	b538      	push	{r3, r4, r5, lr}
 800149e:	4605      	mov	r5, r0
 80014a0:	460c      	mov	r4, r1
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80014a2:	f7ff ffcc 	bl	800143e <RTC_EnterInitMode>
 80014a6:	b958      	cbnz	r0, 80014c0 <RTC_WriteTimeCounter+0x24>
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80014a8:	682b      	ldr	r3, [r5, #0]
 80014aa:	0c22      	lsrs	r2, r4, #16
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80014ac:	b2a4      	uxth	r4, r4
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80014ae:	619a      	str	r2, [r3, #24]
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 80014b0:	4628      	mov	r0, r5
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80014b2:	61dc      	str	r4, [r3, #28]
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 80014b4:	f7ff ffda 	bl	800146c <RTC_ExitInitMode>
    status = HAL_ERROR;
 80014b8:	3000      	adds	r0, #0
 80014ba:	bf18      	it	ne
 80014bc:	2001      	movne	r0, #1
 80014be:	bd38      	pop	{r3, r4, r5, pc}
 80014c0:	2001      	movs	r0, #1
}
 80014c2:	bd38      	pop	{r3, r4, r5, pc}

080014c4 <RTC_WriteAlarmCounter>:
{
 80014c4:	b538      	push	{r3, r4, r5, lr}
 80014c6:	4605      	mov	r5, r0
 80014c8:	460c      	mov	r4, r1
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80014ca:	f7ff ffb8 	bl	800143e <RTC_EnterInitMode>
 80014ce:	b958      	cbnz	r0, 80014e8 <RTC_WriteAlarmCounter+0x24>
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80014d0:	682b      	ldr	r3, [r5, #0]
 80014d2:	0c22      	lsrs	r2, r4, #16
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80014d4:	b2a4      	uxth	r4, r4
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80014d6:	621a      	str	r2, [r3, #32]
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 80014d8:	4628      	mov	r0, r5
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80014da:	625c      	str	r4, [r3, #36]	; 0x24
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 80014dc:	f7ff ffc6 	bl	800146c <RTC_ExitInitMode>
    status = HAL_ERROR;
 80014e0:	3000      	adds	r0, #0
 80014e2:	bf18      	it	ne
 80014e4:	2001      	movne	r0, #1
 80014e6:	bd38      	pop	{r3, r4, r5, pc}
 80014e8:	2001      	movs	r0, #1
}
 80014ea:	bd38      	pop	{r3, r4, r5, pc}

080014ec <HAL_RTC_SetTime>:
{
 80014ec:	b570      	push	{r4, r5, r6, lr}
  if((hrtc == NULL) || (sTime == NULL))
 80014ee:	4604      	mov	r4, r0
 80014f0:	b1e0      	cbz	r0, 800152c <HAL_RTC_SetTime+0x40>
 80014f2:	b1d9      	cbz	r1, 800152c <HAL_RTC_SetTime+0x40>
  __HAL_LOCK(hrtc);
 80014f4:	7c03      	ldrb	r3, [r0, #16]
 80014f6:	2602      	movs	r6, #2
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d046      	beq.n	800158a <HAL_RTC_SetTime+0x9e>
 80014fc:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 80014fe:	7446      	strb	r6, [r0, #17]
  __HAL_LOCK(hrtc);
 8001500:	7403      	strb	r3, [r0, #16]
 8001502:	7808      	ldrb	r0, [r1, #0]
 8001504:	784e      	ldrb	r6, [r1, #1]
 8001506:	7889      	ldrb	r1, [r1, #2]
  if(Format == RTC_FORMAT_BIN)
 8001508:	b992      	cbnz	r2, 8001530 <HAL_RTC_SetTime+0x44>
                        ((uint32_t)sTime->Minutes * 60U) + \
 800150a:	253c      	movs	r5, #60	; 0x3c
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800150c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
                        ((uint32_t)sTime->Minutes * 60U) + \
 8001510:	4375      	muls	r5, r6
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001512:	fb03 5000 	mla	r0, r3, r0, r5
 8001516:	1845      	adds	r5, r0, r1
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8001518:	4629      	mov	r1, r5
 800151a:	4620      	mov	r0, r4
 800151c:	f7ff ffbe 	bl	800149c <RTC_WriteTimeCounter>
 8001520:	4606      	mov	r6, r0
 8001522:	b1b0      	cbz	r0, 8001552 <HAL_RTC_SetTime+0x66>
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001524:	2304      	movs	r3, #4
 8001526:	7463      	strb	r3, [r4, #17]
    __HAL_UNLOCK(hrtc);
 8001528:	2300      	movs	r3, #0
 800152a:	7423      	strb	r3, [r4, #16]
     return HAL_ERROR;
 800152c:	2601      	movs	r6, #1
 800152e:	e02c      	b.n	800158a <HAL_RTC_SetTime+0x9e>
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001530:	f7ff ff46 	bl	80013c0 <RTC_Bcd2ToByte>
 8001534:	4605      	mov	r5, r0
              ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8001536:	4630      	mov	r0, r6
 8001538:	f7ff ff42 	bl	80013c0 <RTC_Bcd2ToByte>
 800153c:	233c      	movs	r3, #60	; 0x3c
 800153e:	4358      	muls	r0, r3
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001540:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001544:	fb03 0505 	mla	r5, r3, r5, r0
              ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));   
 8001548:	4608      	mov	r0, r1
 800154a:	f7ff ff39 	bl	80013c0 <RTC_Bcd2ToByte>
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800154e:	4405      	add	r5, r0
 8001550:	e7e2      	b.n	8001518 <HAL_RTC_SetTime+0x2c>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8001552:	6822      	ldr	r2, [r4, #0]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8001554:	4620      	mov	r0, r4
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8001556:	6853      	ldr	r3, [r2, #4]
 8001558:	f023 0305 	bic.w	r3, r3, #5
 800155c:	6053      	str	r3, [r2, #4]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800155e:	f7ff ff1d 	bl	800139c <RTC_ReadAlarmCounter>
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8001562:	1c43      	adds	r3, r0, #1
 8001564:	d00d      	beq.n	8001582 <HAL_RTC_SetTime+0x96>
      if(counter_alarm < counter_time)
 8001566:	4285      	cmp	r5, r0
 8001568:	d90b      	bls.n	8001582 <HAL_RTC_SetTime+0x96>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800156a:	f500 31a8 	add.w	r1, r0, #86016	; 0x15000
 800156e:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 8001572:	4620      	mov	r0, r4
 8001574:	f7ff ffa6 	bl	80014c4 <RTC_WriteAlarmCounter>
 8001578:	b118      	cbz	r0, 8001582 <HAL_RTC_SetTime+0x96>
          hrtc->State = HAL_RTC_STATE_ERROR;
 800157a:	2304      	movs	r3, #4
          __HAL_UNLOCK(hrtc);
 800157c:	7426      	strb	r6, [r4, #16]
          hrtc->State = HAL_RTC_STATE_ERROR;
 800157e:	7463      	strb	r3, [r4, #17]
 8001580:	e7d4      	b.n	800152c <HAL_RTC_SetTime+0x40>
    hrtc->State = HAL_RTC_STATE_READY;
 8001582:	2301      	movs	r3, #1
 8001584:	7463      	strb	r3, [r4, #17]
   __HAL_UNLOCK(hrtc); 
 8001586:	2300      	movs	r3, #0
 8001588:	7423      	strb	r3, [r4, #16]
}
 800158a:	4630      	mov	r0, r6
 800158c:	bd70      	pop	{r4, r5, r6, pc}
	...

08001590 <HAL_RTC_GetTime>:
{
 8001590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001594:	460d      	mov	r5, r1
 8001596:	4690      	mov	r8, r2
  if((hrtc == NULL) || (sTime == NULL))
 8001598:	4604      	mov	r4, r0
 800159a:	b910      	cbnz	r0, 80015a2 <HAL_RTC_GetTime+0x12>
     return HAL_ERROR;
 800159c:	2001      	movs	r0, #1
 800159e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if((hrtc == NULL) || (sTime == NULL))
 80015a2:	2900      	cmp	r1, #0
 80015a4:	d0fa      	beq.n	800159c <HAL_RTC_GetTime+0xc>
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 80015a6:	6803      	ldr	r3, [r0, #0]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	075e      	lsls	r6, r3, #29
 80015ac:	d4f6      	bmi.n	800159c <HAL_RTC_GetTime+0xc>
  counter_time = RTC_ReadTimeCounter(hrtc);
 80015ae:	f7ff fee3 	bl	8001378 <RTC_ReadTimeCounter>
  hours = counter_time / 3600U;
 80015b2:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80015b6:	fbb0 f3f2 	udiv	r3, r0, r2
  counter_time = RTC_ReadTimeCounter(hrtc);
 80015ba:	4607      	mov	r7, r0
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 80015bc:	fb02 0213 	mls	r2, r2, r3, r0
 80015c0:	203c      	movs	r0, #60	; 0x3c
 80015c2:	fbb2 f1f0 	udiv	r1, r2, r0
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 80015c6:	fb00 2211 	mls	r2, r0, r1, r2
  if (hours >= 24U)
 80015ca:	2b17      	cmp	r3, #23
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 80015cc:	7069      	strb	r1, [r5, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 80015ce:	70aa      	strb	r2, [r5, #2]
  if (hours >= 24U)
 80015d0:	f240 8085 	bls.w	80016de <HAL_RTC_GetTime+0x14e>
    sTime->Hours = (hours % 24U);    
 80015d4:	2118      	movs	r1, #24
 80015d6:	fbb3 f2f1 	udiv	r2, r3, r1
 80015da:	fb01 3312 	mls	r3, r1, r2, r3
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80015de:	4620      	mov	r0, r4
    sTime->Hours = (hours % 24U);    
 80015e0:	702b      	strb	r3, [r5, #0]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80015e2:	f7ff fedb 	bl	800139c <RTC_ReadAlarmCounter>
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 80015e6:	1c41      	adds	r1, r0, #1
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80015e8:	4606      	mov	r6, r0
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 80015ea:	d004      	beq.n	80015f6 <HAL_RTC_GetTime+0x66>
 80015ec:	4287      	cmp	r7, r0
      counter_alarm = RTC_ALARM_RESETVALUE;
 80015ee:	bf2c      	ite	cs
 80015f0:	f04f 36ff 	movcs.w	r6, #4294967295	; 0xffffffff
      counter_alarm -= counter_time;
 80015f4:	1bc6      	subcc	r6, r0, r7
 80015f6:	4b40      	ldr	r3, [pc, #256]	; (80016f8 <HAL_RTC_GetTime+0x168>)
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80015f8:	4620      	mov	r0, r4
 80015fa:	fbb7 f9f3 	udiv	r9, r7, r3
 80015fe:	fb03 7919 	mls	r9, r3, r9, r7
 8001602:	4649      	mov	r1, r9
 8001604:	f7ff ff4a 	bl	800149c <RTC_WriteTimeCounter>
 8001608:	2800      	cmp	r0, #0
 800160a:	d1c7      	bne.n	800159c <HAL_RTC_GetTime+0xc>
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800160c:	1c72      	adds	r2, r6, #1
 800160e:	d02f      	beq.n	8001670 <HAL_RTC_GetTime+0xe0>
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001610:	eb09 0106 	add.w	r1, r9, r6
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001614:	4620      	mov	r0, r4
 8001616:	f7ff ff55 	bl	80014c4 <RTC_WriteAlarmCounter>
 800161a:	2800      	cmp	r0, #0
 800161c:	d1be      	bne.n	800159c <HAL_RTC_GetTime+0xc>
    days_elapsed = (hours / 24U);
 800161e:	4b36      	ldr	r3, [pc, #216]	; (80016f8 <HAL_RTC_GetTime+0x168>)
  for (loop = 0U; loop < DayElapsed; loop++)
 8001620:	2600      	movs	r6, #0
    days_elapsed = (hours / 24U);
 8001622:	fbb7 f7f3 	udiv	r7, r7, r3
  if((nYear % 100U) != 0U) 
 8001626:	f04f 0e64 	mov.w	lr, #100	; 0x64
  if((nYear % 400U) == 0U)
 800162a:	f44f 7cc8 	mov.w	ip, #400	; 0x190
    if((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 800162e:	f240 29d5 	movw	r9, #725	; 0x2d5
  year = hrtc->DateToUpdate.Year;
 8001632:	7be0      	ldrb	r0, [r4, #15]
  month = hrtc->DateToUpdate.Month;
 8001634:	7b61      	ldrb	r1, [r4, #13]
  day = hrtc->DateToUpdate.Date;
 8001636:	7ba2      	ldrb	r2, [r4, #14]
  for (loop = 0U; loop < DayElapsed; loop++)
 8001638:	42b7      	cmp	r7, r6
 800163a:	d11b      	bne.n	8001674 <HAL_RTC_GetTime+0xe4>
  hrtc->DateToUpdate.Month = month;
 800163c:	b2c9      	uxtb	r1, r1
  hrtc->DateToUpdate.Date = day;
 800163e:	b2d2      	uxtb	r2, r2
  hrtc->DateToUpdate.Year = year;
 8001640:	73e0      	strb	r0, [r4, #15]
  hrtc->DateToUpdate.Month = month;
 8001642:	7361      	strb	r1, [r4, #13]
  hrtc->DateToUpdate.Date = day;
 8001644:	73a2      	strb	r2, [r4, #14]
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8001646:	f7ff fec3 	bl	80013d0 <RTC_WeekDayNum>
 800164a:	7320      	strb	r0, [r4, #12]
  if(Format != RTC_FORMAT_BIN)
 800164c:	f1b8 0f00 	cmp.w	r8, #0
 8001650:	d00b      	beq.n	800166a <HAL_RTC_GetTime+0xda>
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8001652:	7828      	ldrb	r0, [r5, #0]
 8001654:	f7ff fea9 	bl	80013aa <RTC_ByteToBcd2>
 8001658:	7028      	strb	r0, [r5, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 800165a:	7868      	ldrb	r0, [r5, #1]
 800165c:	f7ff fea5 	bl	80013aa <RTC_ByteToBcd2>
 8001660:	7068      	strb	r0, [r5, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);  
 8001662:	78a8      	ldrb	r0, [r5, #2]
 8001664:	f7ff fea1 	bl	80013aa <RTC_ByteToBcd2>
 8001668:	70a8      	strb	r0, [r5, #2]
  return HAL_OK;
 800166a:	2000      	movs	r0, #0
 800166c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001670:	4631      	mov	r1, r6
 8001672:	e7cf      	b.n	8001614 <HAL_RTC_GetTime+0x84>
    if((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8001674:	1e4b      	subs	r3, r1, #1
 8001676:	2b09      	cmp	r3, #9
 8001678:	d835      	bhi.n	80016e6 <HAL_RTC_GetTime+0x156>
 800167a:	fa29 f303 	lsr.w	r3, r9, r3
 800167e:	07db      	lsls	r3, r3, #31
 8001680:	d42f      	bmi.n	80016e2 <HAL_RTC_GetTime+0x152>
    else if((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8001682:	f021 0302 	bic.w	r3, r1, #2
 8001686:	2b04      	cmp	r3, #4
 8001688:	d001      	beq.n	800168e <HAL_RTC_GetTime+0xfe>
 800168a:	2b09      	cmp	r3, #9
 800168c:	d104      	bne.n	8001698 <HAL_RTC_GetTime+0x108>
      if(day < 30U)
 800168e:	2a1d      	cmp	r2, #29
      if(day < 31U)
 8001690:	d906      	bls.n	80016a0 <HAL_RTC_GetTime+0x110>
        month++;
 8001692:	3101      	adds	r1, #1
        day = 1U;
 8001694:	2201      	movs	r2, #1
 8001696:	e02d      	b.n	80016f4 <HAL_RTC_GetTime+0x164>
    else if(month == 2U)
 8001698:	2902      	cmp	r1, #2
 800169a:	d12b      	bne.n	80016f4 <HAL_RTC_GetTime+0x164>
      if(day < 28U)
 800169c:	2a1b      	cmp	r2, #27
 800169e:	d801      	bhi.n	80016a4 <HAL_RTC_GetTime+0x114>
        day++;
 80016a0:	3201      	adds	r2, #1
 80016a2:	e027      	b.n	80016f4 <HAL_RTC_GetTime+0x164>
      else if(day == 28U)
 80016a4:	2a1c      	cmp	r2, #28
 80016a6:	d113      	bne.n	80016d0 <HAL_RTC_GetTime+0x140>
        if(RTC_IsLeapYear(year))
 80016a8:	b282      	uxth	r2, r0
  if((nYear % 4U) != 0U) 
 80016aa:	0793      	lsls	r3, r2, #30
 80016ac:	d112      	bne.n	80016d4 <HAL_RTC_GetTime+0x144>
  if((nYear % 100U) != 0U) 
 80016ae:	fbb2 f3fe 	udiv	r3, r2, lr
 80016b2:	fb0e 2313 	mls	r3, lr, r3, r2
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	b97b      	cbnz	r3, 80016da <HAL_RTC_GetTime+0x14a>
  if((nYear % 400U) == 0U)
 80016ba:	fbb2 f3fc 	udiv	r3, r2, ip
 80016be:	fb0c 2313 	mls	r3, ip, r3, r2
 80016c2:	b29b      	uxth	r3, r3
          day++;
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	bf16      	itet	ne
 80016c8:	2201      	movne	r2, #1
 80016ca:	221d      	moveq	r2, #29
 80016cc:	2103      	movne	r1, #3
 80016ce:	e011      	b.n	80016f4 <HAL_RTC_GetTime+0x164>
      else if(day == 29U)
 80016d0:	2a1d      	cmp	r2, #29
 80016d2:	d10f      	bne.n	80016f4 <HAL_RTC_GetTime+0x164>
          day = 1U;
 80016d4:	2201      	movs	r2, #1
          month++;
 80016d6:	2103      	movs	r1, #3
 80016d8:	e00c      	b.n	80016f4 <HAL_RTC_GetTime+0x164>
          day++;
 80016da:	221d      	movs	r2, #29
 80016dc:	e00a      	b.n	80016f4 <HAL_RTC_GetTime+0x164>
    sTime->Hours = hours;    
 80016de:	702b      	strb	r3, [r5, #0]
 80016e0:	e7b4      	b.n	800164c <HAL_RTC_GetTime+0xbc>
      if(day < 31U)
 80016e2:	2a1e      	cmp	r2, #30
 80016e4:	e7d4      	b.n	8001690 <HAL_RTC_GetTime+0x100>
       (month == 8U) || (month == 10U) || (month == 12U))
 80016e6:	290c      	cmp	r1, #12
 80016e8:	d1cb      	bne.n	8001682 <HAL_RTC_GetTime+0xf2>
      if(day < 31U)
 80016ea:	2a1e      	cmp	r2, #30
 80016ec:	d9d8      	bls.n	80016a0 <HAL_RTC_GetTime+0x110>
          day = 1U;
 80016ee:	2201      	movs	r2, #1
          month = 1U;
 80016f0:	4611      	mov	r1, r2
          year++;
 80016f2:	3001      	adds	r0, #1
  for (loop = 0U; loop < DayElapsed; loop++)
 80016f4:	3601      	adds	r6, #1
 80016f6:	e79f      	b.n	8001638 <HAL_RTC_GetTime+0xa8>
 80016f8:	00015180 	.word	0x00015180

080016fc <HAL_RTC_SetDate>:
{
 80016fc:	b570      	push	{r4, r5, r6, lr}
 80016fe:	460d      	mov	r5, r1
  if((hrtc == NULL) || (sDate == NULL))
 8001700:	4604      	mov	r4, r0
 8001702:	b358      	cbz	r0, 800175c <HAL_RTC_SetDate+0x60>
 8001704:	b351      	cbz	r1, 800175c <HAL_RTC_SetDate+0x60>
 __HAL_LOCK(hrtc);
 8001706:	7c03      	ldrb	r3, [r0, #16]
 8001708:	2002      	movs	r0, #2
 800170a:	2b01      	cmp	r3, #1
 800170c:	d027      	beq.n	800175e <HAL_RTC_SetDate+0x62>
 800170e:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8001710:	7460      	strb	r0, [r4, #17]
 __HAL_LOCK(hrtc);
 8001712:	7423      	strb	r3, [r4, #16]
 8001714:	78c8      	ldrb	r0, [r1, #3]
  if(Format == RTC_FORMAT_BIN)
 8001716:	bb1a      	cbnz	r2, 8001760 <HAL_RTC_SetDate+0x64>
    hrtc->DateToUpdate.Year  = sDate->Year;
 8001718:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 800171a:	784b      	ldrb	r3, [r1, #1]
 800171c:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 800171e:	788b      	ldrb	r3, [r1, #2]
 8001720:	73a3      	strb	r3, [r4, #14]
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8001722:	7ba2      	ldrb	r2, [r4, #14]
 8001724:	7b61      	ldrb	r1, [r4, #13]
 8001726:	7be0      	ldrb	r0, [r4, #15]
 8001728:	f7ff fe52 	bl	80013d0 <RTC_WeekDayNum>
 800172c:	7320      	strb	r0, [r4, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 800172e:	7028      	strb	r0, [r5, #0]
  counter_time = RTC_ReadTimeCounter(hrtc);
 8001730:	4620      	mov	r0, r4
 8001732:	f7ff fe21 	bl	8001378 <RTC_ReadTimeCounter>
  if (hours > 24U)
 8001736:	4b1c      	ldr	r3, [pc, #112]	; (80017a8 <HAL_RTC_SetDate+0xac>)
 8001738:	4298      	cmp	r0, r3
 800173a:	d930      	bls.n	800179e <HAL_RTC_SetDate+0xa2>
 800173c:	f6a3 630f 	subw	r3, r3, #3599	; 0xe0f
 8001740:	fbb0 f5f3 	udiv	r5, r0, r3
 8001744:	fb03 0515 	mls	r5, r3, r5, r0
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8001748:	4620      	mov	r0, r4
 800174a:	4629      	mov	r1, r5
 800174c:	f7ff fea6 	bl	800149c <RTC_WriteTimeCounter>
 8001750:	4606      	mov	r6, r0
 8001752:	b188      	cbz	r0, 8001778 <HAL_RTC_SetDate+0x7c>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001754:	2304      	movs	r3, #4
 8001756:	7463      	strb	r3, [r4, #17]
      __HAL_UNLOCK(hrtc);
 8001758:	2300      	movs	r3, #0
 800175a:	7423      	strb	r3, [r4, #16]
     return HAL_ERROR;
 800175c:	2001      	movs	r0, #1
}
 800175e:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8001760:	f7ff fe2e 	bl	80013c0 <RTC_Bcd2ToByte>
 8001764:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8001766:	7848      	ldrb	r0, [r1, #1]
 8001768:	f7ff fe2a 	bl	80013c0 <RTC_Bcd2ToByte>
 800176c:	7360      	strb	r0, [r4, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 800176e:	7888      	ldrb	r0, [r1, #2]
 8001770:	f7ff fe26 	bl	80013c0 <RTC_Bcd2ToByte>
 8001774:	73a0      	strb	r0, [r4, #14]
 8001776:	e7d4      	b.n	8001722 <HAL_RTC_SetDate+0x26>
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8001778:	4620      	mov	r0, r4
 800177a:	f7ff fe0f 	bl	800139c <RTC_ReadAlarmCounter>
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800177e:	1c43      	adds	r3, r0, #1
 8001780:	d00d      	beq.n	800179e <HAL_RTC_SetDate+0xa2>
      if(counter_alarm < counter_time)
 8001782:	4285      	cmp	r5, r0
 8001784:	d90b      	bls.n	800179e <HAL_RTC_SetDate+0xa2>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001786:	f500 31a8 	add.w	r1, r0, #86016	; 0x15000
 800178a:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 800178e:	4620      	mov	r0, r4
 8001790:	f7ff fe98 	bl	80014c4 <RTC_WriteAlarmCounter>
 8001794:	b118      	cbz	r0, 800179e <HAL_RTC_SetDate+0xa2>
          hrtc->State = HAL_RTC_STATE_ERROR;
 8001796:	2304      	movs	r3, #4
          __HAL_UNLOCK(hrtc);
 8001798:	7426      	strb	r6, [r4, #16]
          hrtc->State = HAL_RTC_STATE_ERROR;
 800179a:	7463      	strb	r3, [r4, #17]
 800179c:	e7de      	b.n	800175c <HAL_RTC_SetDate+0x60>
  hrtc->State = HAL_RTC_STATE_READY ;
 800179e:	2301      	movs	r3, #1
  __HAL_UNLOCK(hrtc);
 80017a0:	2000      	movs	r0, #0
  hrtc->State = HAL_RTC_STATE_READY ;
 80017a2:	7463      	strb	r3, [r4, #17]
  __HAL_UNLOCK(hrtc);
 80017a4:	7420      	strb	r0, [r4, #16]
  return HAL_OK;    
 80017a6:	bd70      	pop	{r4, r5, r6, pc}
 80017a8:	00015f8f 	.word	0x00015f8f

080017ac <HAL_RTC_GetDate>:
{
 80017ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80017ae:	4617      	mov	r7, r2
  RTC_TimeTypeDef stime = {0U};
 80017b0:	2200      	movs	r2, #0
{
 80017b2:	460c      	mov	r4, r1
  RTC_TimeTypeDef stime = {0U};
 80017b4:	f8ad 2004 	strh.w	r2, [sp, #4]
 80017b8:	f88d 2006 	strb.w	r2, [sp, #6]
  if((hrtc == NULL) || (sDate == NULL))
 80017bc:	4605      	mov	r5, r0
 80017be:	b918      	cbnz	r0, 80017c8 <HAL_RTC_GetDate+0x1c>
     return HAL_ERROR;
 80017c0:	2201      	movs	r2, #1
}
 80017c2:	4610      	mov	r0, r2
 80017c4:	b003      	add	sp, #12
 80017c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if((hrtc == NULL) || (sDate == NULL))
 80017c8:	2900      	cmp	r1, #0
 80017ca:	d0f9      	beq.n	80017c0 <HAL_RTC_GetDate+0x14>
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 80017cc:	a901      	add	r1, sp, #4
 80017ce:	f7ff fedf 	bl	8001590 <HAL_RTC_GetTime>
 80017d2:	4602      	mov	r2, r0
 80017d4:	2800      	cmp	r0, #0
 80017d6:	d1f3      	bne.n	80017c0 <HAL_RTC_GetDate+0x14>
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 80017d8:	7b2b      	ldrb	r3, [r5, #12]
 80017da:	7023      	strb	r3, [r4, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 80017dc:	7be8      	ldrb	r0, [r5, #15]
 80017de:	70e0      	strb	r0, [r4, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 80017e0:	7b6e      	ldrb	r6, [r5, #13]
 80017e2:	7066      	strb	r6, [r4, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 80017e4:	7ba9      	ldrb	r1, [r5, #14]
 80017e6:	70a1      	strb	r1, [r4, #2]
  if(Format != RTC_FORMAT_BIN)
 80017e8:	2f00      	cmp	r7, #0
 80017ea:	d0ea      	beq.n	80017c2 <HAL_RTC_GetDate+0x16>
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 80017ec:	f7ff fddd 	bl	80013aa <RTC_ByteToBcd2>
 80017f0:	70e0      	strb	r0, [r4, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 80017f2:	4630      	mov	r0, r6
 80017f4:	f7ff fdd9 	bl	80013aa <RTC_ByteToBcd2>
 80017f8:	7060      	strb	r0, [r4, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);  
 80017fa:	4608      	mov	r0, r1
 80017fc:	f7ff fdd5 	bl	80013aa <RTC_ByteToBcd2>
 8001800:	70a0      	strb	r0, [r4, #2]
 8001802:	e7de      	b.n	80017c2 <HAL_RTC_GetDate+0x16>

08001804 <HAL_RTC_WaitForSynchro>:
{
 8001804:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8001806:	4604      	mov	r4, r0
 8001808:	b1a8      	cbz	r0, 8001836 <HAL_RTC_WaitForSynchro+0x32>
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800180a:	6802      	ldr	r2, [r0, #0]
 800180c:	6853      	ldr	r3, [r2, #4]
 800180e:	f023 0308 	bic.w	r3, r3, #8
 8001812:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 8001814:	f7fe fce4 	bl	80001e0 <HAL_GetTick>
 8001818:	4605      	mov	r5, r0
  while((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800181a:	6823      	ldr	r3, [r4, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	071b      	lsls	r3, r3, #28
 8001820:	d501      	bpl.n	8001826 <HAL_RTC_WaitForSynchro+0x22>
  return HAL_OK;
 8001822:	2000      	movs	r0, #0
 8001824:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) >  RTC_TIMEOUT_VALUE)
 8001826:	f7fe fcdb 	bl	80001e0 <HAL_GetTick>
 800182a:	1b40      	subs	r0, r0, r5
 800182c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001830:	d9f3      	bls.n	800181a <HAL_RTC_WaitForSynchro+0x16>
      return HAL_TIMEOUT;
 8001832:	2003      	movs	r0, #3
}
 8001834:	bd38      	pop	{r3, r4, r5, pc}
     return HAL_ERROR;
 8001836:	2001      	movs	r0, #1
 8001838:	bd38      	pop	{r3, r4, r5, pc}
	...

0800183c <HAL_RTC_Init>:
{
 800183c:	b510      	push	{r4, lr}
  if(hrtc == NULL)
 800183e:	4604      	mov	r4, r0
 8001840:	b170      	cbz	r0, 8001860 <HAL_RTC_Init+0x24>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8001842:	7c43      	ldrb	r3, [r0, #17]
 8001844:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001848:	b913      	cbnz	r3, 8001850 <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 800184a:	7402      	strb	r2, [r0, #16]
    HAL_RTC_MspInit(hrtc);
 800184c:	f001 f9b2 	bl	8002bb4 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8001850:	2302      	movs	r3, #2
  if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001852:	4620      	mov	r0, r4
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8001854:	7463      	strb	r3, [r4, #17]
  if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001856:	f7ff ffd5 	bl	8001804 <HAL_RTC_WaitForSynchro>
 800185a:	b118      	cbz	r0, 8001864 <HAL_RTC_Init+0x28>
        hrtc->State = HAL_RTC_STATE_ERROR;
 800185c:	2304      	movs	r3, #4
 800185e:	7463      	strb	r3, [r4, #17]
     return HAL_ERROR;
 8001860:	2001      	movs	r0, #1
}
 8001862:	bd10      	pop	{r4, pc}
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001864:	4620      	mov	r0, r4
 8001866:	f7ff fdea 	bl	800143e <RTC_EnterInitMode>
 800186a:	2800      	cmp	r0, #0
 800186c:	d1f6      	bne.n	800185c <HAL_RTC_Init+0x20>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800186e:	6822      	ldr	r2, [r4, #0]
    if(hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8001870:	68a0      	ldr	r0, [r4, #8]
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8001872:	6853      	ldr	r3, [r2, #4]
 8001874:	f023 0307 	bic.w	r3, r3, #7
 8001878:	6053      	str	r3, [r2, #4]
 800187a:	4a17      	ldr	r2, [pc, #92]	; (80018d8 <HAL_RTC_Init+0x9c>)
    if(hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800187c:	b118      	cbz	r0, 8001886 <HAL_RTC_Init+0x4a>
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800187e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001880:	f021 0101 	bic.w	r1, r1, #1
 8001884:	6311      	str	r1, [r2, #48]	; 0x30
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8001886:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001888:	f423 7360 	bic.w	r3, r3, #896	; 0x380
 800188c:	4303      	orrs	r3, r0
 800188e:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8001890:	6860      	ldr	r0, [r4, #4]
 8001892:	1c43      	adds	r3, r0, #1
 8001894:	d105      	bne.n	80018a2 <HAL_RTC_Init+0x66>
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8001896:	2001      	movs	r0, #1
 8001898:	f7ff fcf8 	bl	800128c <HAL_RCCEx_GetPeriphCLKFreq>
      if (prescaler == 0U)
 800189c:	2800      	cmp	r0, #0
 800189e:	d0dd      	beq.n	800185c <HAL_RTC_Init+0x20>
        prescaler = prescaler - 1U;
 80018a0:	3801      	subs	r0, #1
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 80018a2:	6822      	ldr	r2, [r4, #0]
 80018a4:	6893      	ldr	r3, [r2, #8]
 80018a6:	f023 030f 	bic.w	r3, r3, #15
 80018aa:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 80018ae:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 80018b0:	68d3      	ldr	r3, [r2, #12]
 80018b2:	b280      	uxth	r0, r0
 80018b4:	0c1b      	lsrs	r3, r3, #16
 80018b6:	041b      	lsls	r3, r3, #16
 80018b8:	4318      	orrs	r0, r3
 80018ba:	60d0      	str	r0, [r2, #12]
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 80018bc:	4620      	mov	r0, r4
 80018be:	f7ff fdd5 	bl	800146c <RTC_ExitInitMode>
 80018c2:	2301      	movs	r3, #1
 80018c4:	b110      	cbz	r0, 80018cc <HAL_RTC_Init+0x90>
      hrtc->State = HAL_RTC_STATE_ERROR;
 80018c6:	2204      	movs	r2, #4
 80018c8:	7462      	strb	r2, [r4, #17]
 80018ca:	e7c9      	b.n	8001860 <HAL_RTC_Init+0x24>
    hrtc->DateToUpdate.Year = 0x00U;
 80018cc:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80018ce:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80018d0:	73a3      	strb	r3, [r4, #14]
    hrtc->State = HAL_RTC_STATE_READY;
 80018d2:	7463      	strb	r3, [r4, #17]
    return HAL_OK;
 80018d4:	bd10      	pop	{r4, pc}
 80018d6:	bf00      	nop
 80018d8:	40006c00 	.word	0x40006c00

080018dc <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80018dc:	b084      	sub	sp, #16
 80018de:	a801      	add	r0, sp, #4
 80018e0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80018e4:	b004      	add	sp, #16
 80018e6:	2000      	movs	r0, #0
 80018e8:	4770      	bx	lr

080018ea <USB_EnableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
     | USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 80018ea:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 80018f4:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 80018f8:	2000      	movs	r0, #0
 80018fa:	4770      	bx	lr

080018fc <USB_DisableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80018fc:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8001900:	f423 5374 	bic.w	r3, r3, #15616	; 0x3d00
 8001904:	045b      	lsls	r3, r3, #17
 8001906:	0c5b      	lsrs	r3, r3, #17
 8001908:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 800190c:	2000      	movs	r0, #0
 800190e:	4770      	bx	lr

08001910 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001910:	2000      	movs	r0, #0
 8001912:	4770      	bx	lr

08001914 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8001914:	b084      	sub	sp, #16
 8001916:	b510      	push	{r4, lr}
 8001918:	ac03      	add	r4, sp, #12
 800191a:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  
  /* Enable USB Device Interrupt mask */
  USB_EnableGlobalInt(USBx);
    
  return HAL_OK;
}
 800191e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBx->CNTR = 0;
 8001922:	2200      	movs	r2, #0
  USBx->CNTR = USB_CNTR_FRES;
 8001924:	2301      	movs	r3, #1
 8001926:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->CNTR = 0;
 800192a:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
  USBx->ISTR = 0;
 800192e:	f8a0 2044 	strh.w	r2, [r0, #68]	; 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 8001932:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
  USBx->CNTR |= winterruptmask;
 8001936:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
}
 800193a:	b004      	add	sp, #16
  USBx->CNTR |= winterruptmask;
 800193c:	b29b      	uxth	r3, r3
 800193e:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 8001942:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
}
 8001946:	4610      	mov	r0, r2
 8001948:	4770      	bx	lr
	...

0800194c <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800194c:	b570      	push	{r4, r5, r6, lr}
  /* initialize Endpoint */
  switch (ep->type)
 800194e:	78cb      	ldrb	r3, [r1, #3]
 8001950:	780a      	ldrb	r2, [r1, #0]
 8001952:	2b03      	cmp	r3, #3
 8001954:	d80f      	bhi.n	8001976 <USB_ActivateEndpoint+0x2a>
 8001956:	e8df f003 	tbb	[pc, r3]
 800195a:	6402      	.short	0x6402
 800195c:	5950      	.short	0x5950
  {
  case EP_TYPE_CTRL:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_CONTROL);
 800195e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001962:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8001966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800196a:	041b      	lsls	r3, r3, #16
 800196c:	0c1b      	lsrs	r3, r3, #16
 800196e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    break;
  case EP_TYPE_INTR:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
    break;
  case EP_TYPE_ISOC:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 8001972:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    break;
  default:
      break;
  } 
  
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8001976:	f640 730f 	movw	r3, #3855	; 0xf0f
 800197a:	780c      	ldrb	r4, [r1, #0]
 800197c:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8001980:	f444 4500 	orr.w	r5, r4, #32768	; 0x8000
 8001984:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8001988:	401a      	ands	r2, r3
 800198a:	432a      	orrs	r2, r5
 800198c:	f820 2024 	strh.w	r2, [r0, r4, lsl #2]
  
  if (ep->doublebuffer == 0) 
 8001990:	7a8a      	ldrb	r2, [r1, #10]
 8001992:	780d      	ldrb	r5, [r1, #0]
 8001994:	2a00      	cmp	r2, #0
 8001996:	f040 8097 	bne.w	8001ac8 <USB_ActivateEndpoint+0x17c>
  {
    if (ep->is_in)
 800199a:	784c      	ldrb	r4, [r1, #1]
 800199c:	888a      	ldrh	r2, [r1, #4]
 800199e:	2c00      	cmp	r4, #0
 80019a0:	d04a      	beq.n	8001a38 <USB_ActivateEndpoint+0xec>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80019a2:	f8b0 4050 	ldrh.w	r4, [r0, #80]	; 0x50
 80019a6:	0852      	lsrs	r2, r2, #1
 80019a8:	b2a4      	uxth	r4, r4
 80019aa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80019ae:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80019b2:	0052      	lsls	r2, r2, #1
 80019b4:	f8c4 2400 	str.w	r2, [r4, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80019b8:	780c      	ldrb	r4, [r1, #0]
 80019ba:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 80019be:	0652      	lsls	r2, r2, #25
 80019c0:	d508      	bpl.n	80019d4 <USB_ActivateEndpoint+0x88>
 80019c2:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 80019c6:	4013      	ands	r3, r2
 80019c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80019d0:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK); 
 80019d4:	780a      	ldrb	r2, [r1, #0]
 80019d6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80019da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80019de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80019e2:	041b      	lsls	r3, r3, #16
 80019e4:	0c1b      	lsrs	r3, r3, #16
 80019e6:	f083 0320 	eor.w	r3, r3, #32
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80019ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019f2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }
  
  return HAL_OK;
}
 80019f6:	2000      	movs	r0, #0
 80019f8:	bd70      	pop	{r4, r5, r6, pc}
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_BULK);
 80019fa:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80019fe:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8001a02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a06:	041b      	lsls	r3, r3, #16
 8001a08:	0c1b      	lsrs	r3, r3, #16
 8001a0a:	e7b2      	b.n	8001972 <USB_ActivateEndpoint+0x26>
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
 8001a0c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001a10:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8001a14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a18:	041b      	lsls	r3, r3, #16
 8001a1a:	0c1b      	lsrs	r3, r3, #16
 8001a1c:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8001a20:	e7a7      	b.n	8001972 <USB_ActivateEndpoint+0x26>
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 8001a22:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001a26:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8001a2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a2e:	041b      	lsls	r3, r3, #16
 8001a30:	0c1b      	lsrs	r3, r3, #16
 8001a32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a36:	e79c      	b.n	8001972 <USB_ActivateEndpoint+0x26>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8001a38:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001a3c:	0852      	lsrs	r2, r2, #1
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	3304      	adds	r3, #4
 8001a42:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8001a46:	0052      	lsls	r2, r2, #1
 8001a48:	f500 6480 	add.w	r4, r0, #1024	; 0x400
 8001a4c:	f844 2013 	str.w	r2, [r4, r3, lsl #1]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8001a50:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001a54:	690d      	ldr	r5, [r1, #16]
 8001a56:	b292      	uxth	r2, r2
 8001a58:	780b      	ldrb	r3, [r1, #0]
 8001a5a:	3206      	adds	r2, #6
 8001a5c:	2d3e      	cmp	r5, #62	; 0x3e
 8001a5e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8001a62:	d929      	bls.n	8001ab8 <USB_ActivateEndpoint+0x16c>
 8001a64:	f3c5 164f 	ubfx	r6, r5, #5, #16
 8001a68:	06eb      	lsls	r3, r5, #27
 8001a6a:	bf04      	itt	eq
 8001a6c:	f106 33ff 	addeq.w	r3, r6, #4294967295	; 0xffffffff
 8001a70:	b29e      	uxtheq	r6, r3
 8001a72:	4b6e      	ldr	r3, [pc, #440]	; (8001c2c <USB_ActivateEndpoint+0x2e0>)
 8001a74:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	f844 3012 	str.w	r3, [r4, r2, lsl #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001a7e:	780a      	ldrb	r2, [r1, #0]
 8001a80:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001a84:	045e      	lsls	r6, r3, #17
 8001a86:	d50b      	bpl.n	8001aa0 <USB_ActivateEndpoint+0x154>
 8001a88:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001a8c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a90:	051b      	lsls	r3, r3, #20
 8001a92:	0d1b      	lsrs	r3, r3, #20
 8001a94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a9c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001aa0:	780a      	ldrb	r2, [r1, #0]
 8001aa2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001aa6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001aae:	041b      	lsls	r3, r3, #16
 8001ab0:	0c1b      	lsrs	r3, r3, #16
 8001ab2:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001ab6:	e798      	b.n	80019ea <USB_ActivateEndpoint+0x9e>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8001ab8:	f3c5 034f 	ubfx	r3, r5, #1, #16
 8001abc:	07ed      	lsls	r5, r5, #31
 8001abe:	bf44      	itt	mi
 8001ac0:	3301      	addmi	r3, #1
 8001ac2:	b29b      	uxthmi	r3, r3
 8001ac4:	029b      	lsls	r3, r3, #10
 8001ac6:	e7d7      	b.n	8001a78 <USB_ActivateEndpoint+0x12c>
    PCD_SET_EP_DBUF(USBx, ep->num);
 8001ac8:	f830 2025 	ldrh.w	r2, [r0, r5, lsl #2]
 8001acc:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
 8001ad0:	0512      	lsls	r2, r2, #20
 8001ad2:	0d12      	lsrs	r2, r2, #20
 8001ad4:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 8001ad8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001adc:	f820 2025 	strh.w	r2, [r0, r5, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 8001ae0:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001ae4:	780c      	ldrb	r4, [r1, #0]
 8001ae6:	b292      	uxth	r2, r2
 8001ae8:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8001aec:	88cc      	ldrh	r4, [r1, #6]
 8001aee:	f500 6580 	add.w	r5, r0, #1024	; 0x400
 8001af2:	0864      	lsrs	r4, r4, #1
 8001af4:	0064      	lsls	r4, r4, #1
 8001af6:	f845 4012 	str.w	r4, [r5, r2, lsl #1]
 8001afa:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001afe:	780c      	ldrb	r4, [r1, #0]
 8001b00:	b292      	uxth	r2, r2
 8001b02:	3204      	adds	r2, #4
 8001b04:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8001b08:	890c      	ldrh	r4, [r1, #8]
 8001b0a:	0864      	lsrs	r4, r4, #1
 8001b0c:	0064      	lsls	r4, r4, #1
 8001b0e:	f845 4012 	str.w	r4, [r5, r2, lsl #1]
    if (ep->is_in==0)
 8001b12:	784a      	ldrb	r2, [r1, #1]
 8001b14:	780c      	ldrb	r4, [r1, #0]
 8001b16:	2a00      	cmp	r2, #0
 8001b18:	d147      	bne.n	8001baa <USB_ActivateEndpoint+0x25e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001b1a:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8001b1e:	0455      	lsls	r5, r2, #17
 8001b20:	d508      	bpl.n	8001b34 <USB_ActivateEndpoint+0x1e8>
 8001b22:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8001b26:	4013      	ands	r3, r2
 8001b28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b30:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001b34:	780a      	ldrb	r2, [r1, #0]
 8001b36:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001b3a:	065c      	lsls	r4, r3, #25
 8001b3c:	d50b      	bpl.n	8001b56 <USB_ActivateEndpoint+0x20a>
 8001b3e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001b42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b46:	051b      	lsls	r3, r3, #20
 8001b48:	0d1b      	lsrs	r3, r3, #20
 8001b4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b4e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001b52:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8001b56:	780a      	ldrb	r2, [r1, #0]
 8001b58:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001b5c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b60:	051b      	lsls	r3, r3, #20
 8001b62:	0d1b      	lsrs	r3, r3, #20
 8001b64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b68:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001b6c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001b70:	f248 0280 	movw	r2, #32896	; 0x8080
 8001b74:	780c      	ldrb	r4, [r1, #0]
 8001b76:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8001b7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b82:	041b      	lsls	r3, r3, #16
 8001b84:	0c1b      	lsrs	r3, r3, #16
 8001b86:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8001b90:	7809      	ldrb	r1, [r1, #0]
 8001b92:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8001b96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001b9e:	041b      	lsls	r3, r3, #16
 8001ba0:	0c1b      	lsrs	r3, r3, #16
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 8001ba8:	e725      	b.n	80019f6 <USB_ActivateEndpoint+0xaa>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001baa:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8001bae:	0452      	lsls	r2, r2, #17
 8001bb0:	d508      	bpl.n	8001bc4 <USB_ActivateEndpoint+0x278>
 8001bb2:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001bbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bc0:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001bc4:	780a      	ldrb	r2, [r1, #0]
 8001bc6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001bca:	065b      	lsls	r3, r3, #25
 8001bcc:	d50b      	bpl.n	8001be6 <USB_ActivateEndpoint+0x29a>
 8001bce:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001bd2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001bd6:	051b      	lsls	r3, r3, #20
 8001bd8:	0d1b      	lsrs	r3, r3, #20
 8001bda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bde:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001be2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8001be6:	780a      	ldrb	r2, [r1, #0]
 8001be8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001bec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001bf0:	051b      	lsls	r3, r3, #20
 8001bf2:	0d1b      	lsrs	r3, r3, #20
 8001bf4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001bf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bfc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8001c00:	f248 0280 	movw	r2, #32896	; 0x8080
 8001c04:	780c      	ldrb	r4, [r1, #0]
 8001c06:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8001c0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001c12:	041b      	lsls	r3, r3, #16
 8001c14:	0c1b      	lsrs	r3, r3, #16
 8001c16:	4313      	orrs	r3, r2
 8001c18:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001c1c:	7809      	ldrb	r1, [r1, #0]
 8001c1e:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8001c22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c2a:	e7b8      	b.n	8001b9e <USB_ActivateEndpoint+0x252>
 8001c2c:	ffff8000 	.word	0xffff8000

08001c30 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8001c30:	b510      	push	{r4, lr}
  if (ep->doublebuffer == 0) 
 8001c32:	7a8c      	ldrb	r4, [r1, #10]
 8001c34:	784a      	ldrb	r2, [r1, #1]
 8001c36:	780b      	ldrb	r3, [r1, #0]
 8001c38:	bbcc      	cbnz	r4, 8001cae <USB_DeactivateEndpoint+0x7e>
  {
    if (ep->is_in)
 8001c3a:	b302      	cbz	r2, 8001c7e <USB_DeactivateEndpoint+0x4e>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001c3c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001c40:	0652      	lsls	r2, r2, #25
 8001c42:	d50b      	bpl.n	8001c5c <USB_DeactivateEndpoint+0x2c>
 8001c44:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001c48:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001c4c:	0512      	lsls	r2, r2, #20
 8001c4e:	0d12      	lsrs	r2, r2, #20
 8001c50:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c54:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8001c58:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS); 
 8001c5c:	780a      	ldrb	r2, [r1, #0]
 8001c5e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001c62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001c6a:	041b      	lsls	r3, r3, #16
 8001c6c:	0c1b      	lsrs	r3, r3, #16
 8001c6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c76:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }
  
  return HAL_OK;
}
 8001c7a:	2000      	movs	r0, #0
 8001c7c:	bd10      	pop	{r4, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001c7e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001c82:	0454      	lsls	r4, r2, #17
 8001c84:	d50b      	bpl.n	8001c9e <USB_DeactivateEndpoint+0x6e>
 8001c86:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001c8a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001c8e:	0512      	lsls	r2, r2, #20
 8001c90:	0d12      	lsrs	r2, r2, #20
 8001c92:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001c96:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c9a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001c9e:	780a      	ldrb	r2, [r1, #0]
 8001ca0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001ca4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ca8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cac:	e7dd      	b.n	8001c6a <USB_DeactivateEndpoint+0x3a>
    if (ep->is_in==0)
 8001cae:	2a00      	cmp	r2, #0
 8001cb0:	d148      	bne.n	8001d44 <USB_DeactivateEndpoint+0x114>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001cb2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001cb6:	0452      	lsls	r2, r2, #17
 8001cb8:	d50b      	bpl.n	8001cd2 <USB_DeactivateEndpoint+0xa2>
 8001cba:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001cbe:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001cc2:	0512      	lsls	r2, r2, #20
 8001cc4:	0d12      	lsrs	r2, r2, #20
 8001cc6:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001cca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001cce:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001cd2:	780a      	ldrb	r2, [r1, #0]
 8001cd4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001cd8:	065c      	lsls	r4, r3, #25
 8001cda:	d50b      	bpl.n	8001cf4 <USB_DeactivateEndpoint+0xc4>
 8001cdc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001ce0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ce4:	051b      	lsls	r3, r3, #20
 8001ce6:	0d1b      	lsrs	r3, r3, #20
 8001ce8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001cf0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8001cf4:	780a      	ldrb	r2, [r1, #0]
 8001cf6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001cfa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001cfe:	051b      	lsls	r3, r3, #20
 8001d00:	0d1b      	lsrs	r3, r3, #20
 8001d02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d06:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001d0a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001d0e:	f248 0280 	movw	r2, #32896	; 0x8080
 8001d12:	780c      	ldrb	r4, [r1, #0]
 8001d14:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8001d18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d20:	041b      	lsls	r3, r3, #16
 8001d22:	0c1b      	lsrs	r3, r3, #16
 8001d24:	4313      	orrs	r3, r2
 8001d26:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8001d2a:	7809      	ldrb	r1, [r1, #0]
 8001d2c:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8001d30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001d38:	041b      	lsls	r3, r3, #16
 8001d3a:	0c1b      	lsrs	r3, r3, #16
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 8001d42:	e79a      	b.n	8001c7a <USB_DeactivateEndpoint+0x4a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001d44:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001d48:	0452      	lsls	r2, r2, #17
 8001d4a:	d50b      	bpl.n	8001d64 <USB_DeactivateEndpoint+0x134>
 8001d4c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001d50:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001d54:	0512      	lsls	r2, r2, #20
 8001d56:	0d12      	lsrs	r2, r2, #20
 8001d58:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001d5c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d60:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001d64:	780a      	ldrb	r2, [r1, #0]
 8001d66:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001d6a:	065b      	lsls	r3, r3, #25
 8001d6c:	d50b      	bpl.n	8001d86 <USB_DeactivateEndpoint+0x156>
 8001d6e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001d72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d76:	051b      	lsls	r3, r3, #20
 8001d78:	0d1b      	lsrs	r3, r3, #20
 8001d7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d7e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001d82:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8001d86:	780a      	ldrb	r2, [r1, #0]
 8001d88:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001d8c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d90:	051b      	lsls	r3, r3, #20
 8001d92:	0d1b      	lsrs	r3, r3, #20
 8001d94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d9c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8001da0:	f248 0280 	movw	r2, #32896	; 0x8080
 8001da4:	780c      	ldrb	r4, [r1, #0]
 8001da6:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8001daa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001dae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001db2:	041b      	lsls	r3, r3, #16
 8001db4:	0c1b      	lsrs	r3, r3, #16
 8001db6:	4313      	orrs	r3, r2
 8001db8:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001dbc:	7809      	ldrb	r1, [r1, #0]
 8001dbe:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8001dc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001dc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dca:	e7b5      	b.n	8001d38 <USB_DeactivateEndpoint+0x108>

08001dcc <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
  if (ep->num == 0)
 8001dcc:	780a      	ldrb	r2, [r1, #0]
 8001dce:	b98a      	cbnz	r2, 8001df4 <USB_EPSetStall+0x28>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(USBx, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 8001dd0:	8803      	ldrh	r3, [r0, #0]
 8001dd2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001dd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001dda:	041b      	lsls	r3, r3, #16
 8001ddc:	0c1b      	lsrs	r3, r3, #16
 8001dde:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001de2:	f083 0310 	eor.w	r3, r3, #16
 8001de6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dee:	8003      	strh	r3, [r0, #0]
    {
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
    }
  }
  return HAL_OK;
}
 8001df0:	2000      	movs	r0, #0
 8001df2:	4770      	bx	lr
    if (ep->is_in)
 8001df4:	784b      	ldrb	r3, [r1, #1]
 8001df6:	b183      	cbz	r3, 8001e1a <USB_EPSetStall+0x4e>
      PCD_SET_EP_TX_STATUS(USBx, ep->num , USB_EP_TX_STALL); 
 8001df8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001dfc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001e04:	041b      	lsls	r3, r3, #16
 8001e06:	0c1b      	lsrs	r3, r3, #16
 8001e08:	f083 0310 	eor.w	r3, r3, #16
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
 8001e0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e14:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8001e18:	e7ea      	b.n	8001df0 <USB_EPSetStall+0x24>
 8001e1a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001e1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e26:	041b      	lsls	r3, r3, #16
 8001e28:	0c1b      	lsrs	r3, r3, #16
 8001e2a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001e2e:	e7ed      	b.n	8001e0c <USB_EPSetStall+0x40>

08001e30 <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in)
 8001e30:	784b      	ldrb	r3, [r1, #1]
 8001e32:	780a      	ldrb	r2, [r1, #0]
 8001e34:	b313      	cbz	r3, 8001e7c <USB_EPClearStall+0x4c>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001e36:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001e3a:	065b      	lsls	r3, r3, #25
 8001e3c:	d50b      	bpl.n	8001e56 <USB_EPClearStall+0x26>
 8001e3e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001e42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e46:	051b      	lsls	r3, r3, #20
 8001e48:	0d1b      	lsrs	r3, r3, #20
 8001e4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e4e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001e52:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8001e56:	780a      	ldrb	r2, [r1, #0]
 8001e58:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001e5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001e64:	041b      	lsls	r3, r3, #16
 8001e66:	0c1b      	lsrs	r3, r3, #16
 8001e68:	f083 0330 	eor.w	r3, r3, #48	; 0x30
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001e6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e74:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }
  return HAL_OK;
}
 8001e78:	2000      	movs	r0, #0
 8001e7a:	4770      	bx	lr
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001e7c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001e80:	045b      	lsls	r3, r3, #17
 8001e82:	d50b      	bpl.n	8001e9c <USB_EPClearStall+0x6c>
 8001e84:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001e88:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e8c:	051b      	lsls	r3, r3, #20
 8001e8e:	0d1b      	lsrs	r3, r3, #20
 8001e90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e98:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001e9c:	780a      	ldrb	r2, [r1, #0]
 8001e9e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001ea2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ea6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001eaa:	041b      	lsls	r3, r3, #16
 8001eac:	0c1b      	lsrs	r3, r3, #16
 8001eae:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001eb2:	e7db      	b.n	8001e6c <USB_EPClearStall+0x3c>

08001eb4 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_TypeDef *USBx, uint8_t address)
{
  if(address == 0) 
 8001eb4:	b911      	cbnz	r1, 8001ebc <USB_SetDevAddress+0x8>
  {
   /* set device address and enable function */
   USBx->DADDR = USB_DADDR_EF;
 8001eb6:	2380      	movs	r3, #128	; 0x80
 8001eb8:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }
  
  return HAL_OK;
}
 8001ebc:	2000      	movs	r0, #0
 8001ebe:	4770      	bx	lr

08001ec0 <USB_DevConnect>:
 8001ec0:	2000      	movs	r0, #0
 8001ec2:	4770      	bx	lr

08001ec4 <USB_DevDisconnect>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001ec4:	2000      	movs	r0, #0
 8001ec6:	4770      	bx	lr

08001ec8 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_TypeDef *USBx)
{
  uint32_t tmpreg = 0;
  
  tmpreg = USBx->ISTR;
 8001ec8:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8001ecc:	b280      	uxth	r0, r0
 8001ece:	4770      	bx	lr

08001ed0 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001ed0:	2000      	movs	r0, #0
 8001ed2:	4770      	bx	lr

08001ed4 <USB_WritePMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8001ed4:	b510      	push	{r4, lr}
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
  uint32_t index = 0, temp1 = 0, temp2 = 0;
  uint16_t *pdwVal = NULL;
  
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
  for (index = nbytes; index != 0; index--)
 8001ed6:	2400      	movs	r4, #0
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 8001ed8:	3301      	adds	r3, #1
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8001eda:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 8001ede:	105b      	asrs	r3, r3, #1
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8001ee0:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (index = nbytes; index != 0; index--)
 8001ee4:	42a3      	cmp	r3, r4
 8001ee6:	d100      	bne.n	8001eea <USB_WritePMA+0x16>
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
    pdwVal++;
    pbUsrBuf++;
  }
}
 8001ee8:	bd10      	pop	{r4, pc}
 8001eea:	f831 0b02 	ldrh.w	r0, [r1], #2
    *pdwVal++ = temp2;
 8001eee:	f822 0024 	strh.w	r0, [r2, r4, lsl #2]
 8001ef2:	3401      	adds	r4, #1
 8001ef4:	e7f6      	b.n	8001ee4 <USB_WritePMA+0x10>
	...

08001ef8 <USB_EPStartXfer>:
{
 8001ef8:	b570      	push	{r4, r5, r6, lr}
 8001efa:	460e      	mov	r6, r1
  uint32_t len = ep->xfer_len;
 8001efc:	698a      	ldr	r2, [r1, #24]
  if (ep->is_in == 1)
 8001efe:	7849      	ldrb	r1, [r1, #1]
{
 8001f00:	4605      	mov	r5, r0
  if (ep->is_in == 1)
 8001f02:	2901      	cmp	r1, #1
 8001f04:	6933      	ldr	r3, [r6, #16]
 8001f06:	7ab0      	ldrb	r0, [r6, #10]
 8001f08:	d166      	bne.n	8001fd8 <USB_EPStartXfer+0xe0>
    if (ep->xfer_len > ep->maxpacket)
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	461c      	mov	r4, r3
      ep->xfer_len =0;
 8001f0e:	bf9b      	ittet	ls
 8001f10:	2300      	movls	r3, #0
 8001f12:	4614      	movls	r4, r2
      ep->xfer_len-=len; 
 8001f14:	1ad2      	subhi	r2, r2, r3
      ep->xfer_len =0;
 8001f16:	61b3      	strls	r3, [r6, #24]
      ep->xfer_len-=len; 
 8001f18:	bf88      	it	hi
 8001f1a:	61b2      	strhi	r2, [r6, #24]
 8001f1c:	b2a3      	uxth	r3, r4
    if (ep->doublebuffer == 0) 
 8001f1e:	bb10      	cbnz	r0, 8001f66 <USB_EPStartXfer+0x6e>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, len);
 8001f20:	88b2      	ldrh	r2, [r6, #4]
 8001f22:	6971      	ldr	r1, [r6, #20]
 8001f24:	4628      	mov	r0, r5
 8001f26:	f7ff ffd5 	bl	8001ed4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8001f2a:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8001f2e:	7832      	ldrb	r2, [r6, #0]
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	3302      	adds	r3, #2
 8001f34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001f38:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8001f3c:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8001f40:	7832      	ldrb	r2, [r6, #0]
 8001f42:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8001f46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f4e:	041b      	lsls	r3, r3, #16
 8001f50:	0c1b      	lsrs	r3, r3, #16
 8001f52:	f083 0330 	eor.w	r3, r3, #48	; 0x30
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001f56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f5e:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
}
 8001f62:	2000      	movs	r0, #0
 8001f64:	bd70      	pop	{r4, r5, r6, pc}
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 8001f66:	7832      	ldrb	r2, [r6, #0]
 8001f68:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
 8001f6c:	00d2      	lsls	r2, r2, #3
 8001f6e:	f011 0f40 	tst.w	r1, #64	; 0x40
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8001f72:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8001f76:	b289      	uxth	r1, r1
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 8001f78:	d01a      	beq.n	8001fb0 <USB_EPStartXfer+0xb8>
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8001f7a:	3102      	adds	r1, #2
 8001f7c:	440a      	add	r2, r1
 8001f7e:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8001f82:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
        pmabuffer = ep->pmaaddr1;
 8001f86:	8932      	ldrh	r2, [r6, #8]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
 8001f88:	6971      	ldr	r1, [r6, #20]
 8001f8a:	4628      	mov	r0, r5
 8001f8c:	f7ff ffa2 	bl	8001ed4 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8001f90:	7873      	ldrb	r3, [r6, #1]
 8001f92:	7832      	ldrb	r2, [r6, #0]
 8001f94:	b99b      	cbnz	r3, 8001fbe <USB_EPStartXfer+0xc6>
 8001f96:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8001f9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f9e:	051b      	lsls	r3, r3, #20
 8001fa0:	0d1b      	lsrs	r3, r3, #20
 8001fa2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fa6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001faa:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 8001fae:	e7c7      	b.n	8001f40 <USB_EPStartXfer+0x48>
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8001fb0:	440a      	add	r2, r1
 8001fb2:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8001fb6:	f8c2 4404 	str.w	r4, [r2, #1028]	; 0x404
        pmabuffer = ep->pmaaddr0;
 8001fba:	88f2      	ldrh	r2, [r6, #6]
 8001fbc:	e7e4      	b.n	8001f88 <USB_EPStartXfer+0x90>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d1be      	bne.n	8001f40 <USB_EPStartXfer+0x48>
 8001fc2:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8001fc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001fca:	051b      	lsls	r3, r3, #20
 8001fcc:	0d1b      	lsrs	r3, r3, #20
 8001fce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001fd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fd6:	e7e8      	b.n	8001faa <USB_EPStartXfer+0xb2>
    if (ep->xfer_len > ep->maxpacket)
 8001fd8:	429a      	cmp	r2, r3
      ep->xfer_len =0;
 8001fda:	bf93      	iteet	ls
 8001fdc:	2300      	movls	r3, #0
      ep->xfer_len-=len; 
 8001fde:	1ad2      	subhi	r2, r2, r3
 8001fe0:	61b2      	strhi	r2, [r6, #24]
      ep->xfer_len =0;
 8001fe2:	61b3      	strls	r3, [r6, #24]
 8001fe4:	bf98      	it	ls
 8001fe6:	4613      	movls	r3, r2
 8001fe8:	7832      	ldrb	r2, [r6, #0]
    if (ep->doublebuffer == 0) 
 8001fea:	bb70      	cbnz	r0, 800204a <USB_EPStartXfer+0x152>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8001fec:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8001ff0:	2b3e      	cmp	r3, #62	; 0x3e
 8001ff2:	b289      	uxth	r1, r1
 8001ff4:	f101 0106 	add.w	r1, r1, #6
 8001ff8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8001ffc:	f505 6080 	add.w	r0, r5, #1024	; 0x400
 8002000:	d918      	bls.n	8002034 <USB_EPStartXfer+0x13c>
 8002002:	f3c3 124f 	ubfx	r2, r3, #5, #16
 8002006:	06db      	lsls	r3, r3, #27
 8002008:	bf04      	itt	eq
 800200a:	f102 33ff 	addeq.w	r3, r2, #4294967295	; 0xffffffff
 800200e:	b29a      	uxtheq	r2, r3
 8002010:	4b38      	ldr	r3, [pc, #224]	; (80020f4 <USB_EPStartXfer+0x1fc>)
 8002012:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 8002016:	b29b      	uxth	r3, r3
 8002018:	f840 3011 	str.w	r3, [r0, r1, lsl #1]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800201c:	7832      	ldrb	r2, [r6, #0]
 800201e:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8002022:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800202a:	041b      	lsls	r3, r3, #16
 800202c:	0c1b      	lsrs	r3, r3, #16
 800202e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002032:	e790      	b.n	8001f56 <USB_EPStartXfer+0x5e>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8002034:	f3c3 024f 	ubfx	r2, r3, #1, #16
 8002038:	07dc      	lsls	r4, r3, #31
 800203a:	bf44      	itt	mi
 800203c:	3201      	addmi	r2, #1
 800203e:	b292      	uxthmi	r2, r2
 8002040:	0292      	lsls	r2, r2, #10
 8002042:	b292      	uxth	r2, r2
 8002044:	f840 2011 	str.w	r2, [r0, r1, lsl #1]
 8002048:	e7e8      	b.n	800201c <USB_EPStartXfer+0x124>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800204a:	b9b9      	cbnz	r1, 800207c <USB_EPStartXfer+0x184>
 800204c:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8002050:	2b3e      	cmp	r3, #62	; 0x3e
 8002052:	b289      	uxth	r1, r1
 8002054:	f101 0102 	add.w	r1, r1, #2
 8002058:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800205c:	f505 6480 	add.w	r4, r5, #1024	; 0x400
 8002060:	d928      	bls.n	80020b4 <USB_EPStartXfer+0x1bc>
 8002062:	f3c3 104f 	ubfx	r0, r3, #5, #16
 8002066:	06da      	lsls	r2, r3, #27
 8002068:	bf04      	itt	eq
 800206a:	f100 32ff 	addeq.w	r2, r0, #4294967295	; 0xffffffff
 800206e:	b290      	uxtheq	r0, r2
 8002070:	4a20      	ldr	r2, [pc, #128]	; (80020f4 <USB_EPStartXfer+0x1fc>)
 8002072:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8002076:	b292      	uxth	r2, r2
 8002078:	f844 2011 	str.w	r2, [r4, r1, lsl #1]
 800207c:	7872      	ldrb	r2, [r6, #1]
 800207e:	7831      	ldrb	r1, [r6, #0]
 8002080:	bb5a      	cbnz	r2, 80020da <USB_EPStartXfer+0x1e2>
 8002082:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8002086:	2b3e      	cmp	r3, #62	; 0x3e
 8002088:	b292      	uxth	r2, r2
 800208a:	f102 0206 	add.w	r2, r2, #6
 800208e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8002092:	f505 6080 	add.w	r0, r5, #1024	; 0x400
 8002096:	d915      	bls.n	80020c4 <USB_EPStartXfer+0x1cc>
 8002098:	f3c3 114f 	ubfx	r1, r3, #5, #16
 800209c:	06dc      	lsls	r4, r3, #27
 800209e:	bf04      	itt	eq
 80020a0:	f101 33ff 	addeq.w	r3, r1, #4294967295	; 0xffffffff
 80020a4:	b299      	uxtheq	r1, r3
 80020a6:	4b13      	ldr	r3, [pc, #76]	; (80020f4 <USB_EPStartXfer+0x1fc>)
 80020a8:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	f840 3012 	str.w	r3, [r0, r2, lsl #1]
 80020b2:	e7b3      	b.n	800201c <USB_EPStartXfer+0x124>
 80020b4:	f3c3 024f 	ubfx	r2, r3, #1, #16
 80020b8:	07d8      	lsls	r0, r3, #31
 80020ba:	bf44      	itt	mi
 80020bc:	3201      	addmi	r2, #1
 80020be:	b292      	uxthmi	r2, r2
 80020c0:	0292      	lsls	r2, r2, #10
 80020c2:	e7d8      	b.n	8002076 <USB_EPStartXfer+0x17e>
 80020c4:	f3c3 014f 	ubfx	r1, r3, #1, #16
 80020c8:	07db      	lsls	r3, r3, #31
 80020ca:	bf44      	itt	mi
 80020cc:	3101      	addmi	r1, #1
 80020ce:	b289      	uxthmi	r1, r1
 80020d0:	0289      	lsls	r1, r1, #10
 80020d2:	b289      	uxth	r1, r1
 80020d4:	f840 1012 	str.w	r1, [r0, r2, lsl #1]
 80020d8:	e7a0      	b.n	800201c <USB_EPStartXfer+0x124>
 80020da:	2a01      	cmp	r2, #1
 80020dc:	d19e      	bne.n	800201c <USB_EPStartXfer+0x124>
 80020de:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80020e2:	b292      	uxth	r2, r2
 80020e4:	3202      	adds	r2, #2
 80020e6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80020ea:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 80020ee:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
 80020f2:	e793      	b.n	800201c <USB_EPStartXfer+0x124>
 80020f4:	ffff8000 	.word	0xffff8000

080020f8 <USB_ReadPMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80020f8:	b510      	push	{r4, lr}
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
  uint32_t index = 0;
  uint32_t *pdwVal = NULL;
  
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
  for (index = nbytes; index != 0; index--)
 80020fa:	2400      	movs	r4, #0
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 80020fc:	3301      	adds	r3, #1
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 80020fe:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 8002102:	105b      	asrs	r3, r3, #1
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8002104:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (index = nbytes; index != 0; index--)
 8002108:	42a3      	cmp	r3, r4
 800210a:	d100      	bne.n	800210e <USB_ReadPMA+0x16>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
    pbUsrBuf++;
  }
}
 800210c:	bd10      	pop	{r4, pc}
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 800210e:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8002112:	f821 0014 	strh.w	r0, [r1, r4, lsl #1]
 8002116:	3401      	adds	r4, #1
 8002118:	e7f6      	b.n	8002108 <USB_ReadPMA+0x10>

0800211a <USBD_CDC_DataIn>:
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800211a:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 800211e:	b11b      	cbz	r3, 8002128 <USBD_CDC_DataIn+0xe>
  {
    
    hcdc->TxState = 0;
 8002120:	2000      	movs	r0, #0
 8002122:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214

    return USBD_OK;
 8002126:	4770      	bx	lr
  }
  else
  {
    return USBD_FAIL;
 8002128:	2002      	movs	r0, #2
  }
}
 800212a:	4770      	bx	lr

0800212c <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 800212c:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
{ 
 8002130:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002132:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8002136:	b15b      	cbz	r3, 8002150 <USBD_CDC_EP0_RxReady+0x24>
 8002138:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 800213c:	28ff      	cmp	r0, #255	; 0xff
 800213e:	d007      	beq.n	8002150 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8002146:	4621      	mov	r1, r4
 8002148:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFF; 
 800214a:	23ff      	movs	r3, #255	; 0xff
 800214c:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
      
  }
  return USBD_OK;
}
 8002150:	2000      	movs	r0, #0
 8002152:	bd10      	pop	{r4, pc}

08002154 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8002154:	2343      	movs	r3, #67	; 0x43
 8002156:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8002158:	4800      	ldr	r0, [pc, #0]	; (800215c <USBD_CDC_GetFSCfgDesc+0x8>)
 800215a:	4770      	bx	lr
 800215c:	20000040 	.word	0x20000040

08002160 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8002160:	2343      	movs	r3, #67	; 0x43
 8002162:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8002164:	4800      	ldr	r0, [pc, #0]	; (8002168 <USBD_CDC_GetHSCfgDesc+0x8>)
 8002166:	4770      	bx	lr
 8002168:	20000084 	.word	0x20000084

0800216c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800216c:	2343      	movs	r3, #67	; 0x43
 800216e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8002170:	4800      	ldr	r0, [pc, #0]	; (8002174 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8002172:	4770      	bx	lr
 8002174:	200000d4 	.word	0x200000d4

08002178 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8002178:	230a      	movs	r3, #10
 800217a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 800217c:	4800      	ldr	r0, [pc, #0]	; (8002180 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 800217e:	4770      	bx	lr
 8002180:	200000c8 	.word	0x200000c8

08002184 <USBD_CDC_DataOut>:
{      
 8002184:	b538      	push	{r3, r4, r5, lr}
 8002186:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002188:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800218c:	f000 ff04 	bl	8002f98 <USBD_LL_GetRxDataSize>
  if(pdev->pClassData != NULL)
 8002190:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8002194:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  if(pdev->pClassData != NULL)
 8002198:	b14b      	cbz	r3, 80021ae <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800219a:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 800219e:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 80021a8:	4798      	blx	r3
    return USBD_OK;
 80021aa:	2000      	movs	r0, #0
 80021ac:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 80021ae:	2002      	movs	r0, #2
}
 80021b0:	bd38      	pop	{r3, r4, r5, pc}
	...

080021b4 <USBD_CDC_Setup>:
{
 80021b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80021b6:	780f      	ldrb	r7, [r1, #0]
{
 80021b8:	4606      	mov	r6, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80021ba:	f017 0360 	ands.w	r3, r7, #96	; 0x60
{
 80021be:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80021c0:	d023      	beq.n	800220a <USBD_CDC_Setup+0x56>
 80021c2:	2b20      	cmp	r3, #32
 80021c4:	d119      	bne.n	80021fa <USBD_CDC_Setup+0x46>
    if (req->wLength)
 80021c6:	88ca      	ldrh	r2, [r1, #6]
 80021c8:	784b      	ldrb	r3, [r1, #1]
 80021ca:	b1c2      	cbz	r2, 80021fe <USBD_CDC_Setup+0x4a>
      if (req->bmRequest & 0x80)
 80021cc:	0639      	lsls	r1, r7, #24
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80021ce:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
      if (req->bmRequest & 0x80)
 80021d2:	d50b      	bpl.n	80021ec <USBD_CDC_Setup+0x38>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80021d4:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
 80021d8:	4618      	mov	r0, r3
 80021da:	688f      	ldr	r7, [r1, #8]
 80021dc:	4629      	mov	r1, r5
 80021de:	47b8      	blx	r7
          USBD_CtlSendData (pdev, 
 80021e0:	4629      	mov	r1, r5
 80021e2:	4630      	mov	r0, r6
 80021e4:	88e2      	ldrh	r2, [r4, #6]
      USBD_CtlSendData (pdev,
 80021e6:	f000 fb8a 	bl	80028fe <USBD_CtlSendData>
      break;
 80021ea:	e006      	b.n	80021fa <USBD_CDC_Setup+0x46>
        hcdc->CmdOpCode = req->bRequest;
 80021ec:	f885 3200 	strb.w	r3, [r5, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 80021f0:	f885 2201 	strb.w	r2, [r5, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, 
 80021f4:	4629      	mov	r1, r5
 80021f6:	f000 fb97 	bl	8002928 <USBD_CtlPrepareRx>
}
 80021fa:	2000      	movs	r0, #0
 80021fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80021fe:	f8d0 021c 	ldr.w	r0, [r0, #540]	; 0x21c
 8002202:	6884      	ldr	r4, [r0, #8]
 8002204:	4618      	mov	r0, r3
 8002206:	47a0      	blx	r4
 8002208:	e7f7      	b.n	80021fa <USBD_CDC_Setup+0x46>
    switch (req->bRequest)
 800220a:	784b      	ldrb	r3, [r1, #1]
 800220c:	2b0a      	cmp	r3, #10
 800220e:	d1f4      	bne.n	80021fa <USBD_CDC_Setup+0x46>
      USBD_CtlSendData (pdev,
 8002210:	2201      	movs	r2, #1
 8002212:	4901      	ldr	r1, [pc, #4]	; (8002218 <USBD_CDC_Setup+0x64>)
 8002214:	e7e7      	b.n	80021e6 <USBD_CDC_Setup+0x32>
 8002216:	bf00      	nop
 8002218:	200001fc 	.word	0x200001fc

0800221c <USBD_CDC_DeInit>:
{
 800221c:	b510      	push	{r4, lr}
 800221e:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 8002220:	2181      	movs	r1, #129	; 0x81
 8002222:	f000 fe55 	bl	8002ed0 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 8002226:	2101      	movs	r1, #1
 8002228:	4620      	mov	r0, r4
 800222a:	f000 fe51 	bl	8002ed0 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 800222e:	2182      	movs	r1, #130	; 0x82
 8002230:	4620      	mov	r0, r4
 8002232:	f000 fe4d 	bl	8002ed0 <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 8002236:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 800223a:	b153      	cbz	r3, 8002252 <USBD_CDC_DeInit+0x36>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800223c:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8002244:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8002248:	f000 feb0 	bl	8002fac <USBD_static_free>
    pdev->pClassData = NULL;
 800224c:	2300      	movs	r3, #0
 800224e:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 8002252:	2000      	movs	r0, #0
 8002254:	bd10      	pop	{r4, pc}

08002256 <USBD_CDC_Init>:
{
 8002256:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002258:	7c03      	ldrb	r3, [r0, #16]
{
 800225a:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800225c:	bb7b      	cbnz	r3, 80022be <USBD_CDC_Init+0x68>
    USBD_LL_OpenEP(pdev,
 800225e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002262:	2202      	movs	r2, #2
 8002264:	2181      	movs	r1, #129	; 0x81
 8002266:	f000 fe23 	bl	8002eb0 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 800226a:	f44f 7300 	mov.w	r3, #512	; 0x200
    USBD_LL_OpenEP(pdev,
 800226e:	2202      	movs	r2, #2
 8002270:	2101      	movs	r1, #1
 8002272:	4620      	mov	r0, r4
 8002274:	f000 fe1c 	bl	8002eb0 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,
 8002278:	2308      	movs	r3, #8
 800227a:	2203      	movs	r2, #3
 800227c:	2182      	movs	r1, #130	; 0x82
 800227e:	4620      	mov	r0, r4
 8002280:	f000 fe16 	bl	8002eb0 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8002284:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8002288:	f000 fe8c 	bl	8002fa4 <USBD_static_malloc>
 800228c:	4606      	mov	r6, r0
 800228e:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  if(pdev->pClassData == NULL)
 8002292:	b320      	cbz	r0, 80022de <USBD_CDC_Init+0x88>
    hcdc->TxState =0;
 8002294:	2500      	movs	r5, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8002296:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4798      	blx	r3
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800229e:	7c27      	ldrb	r7, [r4, #16]
    hcdc->TxState =0;
 80022a0:	f8c6 5214 	str.w	r5, [r6, #532]	; 0x214
    hcdc->RxState =0;
 80022a4:	f8c6 5218 	str.w	r5, [r6, #536]	; 0x218
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80022a8:	b987      	cbnz	r7, 80022cc <USBD_CDC_Init+0x76>
      USBD_LL_PrepareReceive(pdev,
 80022aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022ae:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 80022b2:	2101      	movs	r1, #1
 80022b4:	4620      	mov	r0, r4
 80022b6:	f000 fe61 	bl	8002f7c <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 80022ba:	4638      	mov	r0, r7
 80022bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    USBD_LL_OpenEP(pdev,
 80022be:	2340      	movs	r3, #64	; 0x40
 80022c0:	2202      	movs	r2, #2
 80022c2:	2181      	movs	r1, #129	; 0x81
 80022c4:	f000 fdf4 	bl	8002eb0 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 80022c8:	2340      	movs	r3, #64	; 0x40
 80022ca:	e7d0      	b.n	800226e <USBD_CDC_Init+0x18>
      USBD_LL_PrepareReceive(pdev,
 80022cc:	2340      	movs	r3, #64	; 0x40
 80022ce:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 80022d2:	2101      	movs	r1, #1
 80022d4:	4620      	mov	r0, r4
 80022d6:	f000 fe51 	bl	8002f7c <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 80022da:	4628      	mov	r0, r5
 80022dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret = 1; 
 80022de:	2001      	movs	r0, #1
}
 80022e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080022e2 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
  
  if(fops != NULL)
 80022e2:	b119      	cbz	r1, 80022ec <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 80022e4:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
    ret = USBD_OK;    
 80022e8:	2000      	movs	r0, #0
 80022ea:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 80022ec:	2002      	movs	r0, #2
  }
  
  return ret;
}
 80022ee:	4770      	bx	lr

080022f0 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80022f0:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;  
  
  return USBD_OK;  
}
 80022f4:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 80022f6:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 80022fa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 80022fe:	4770      	bx	lr

08002300 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  hcdc->RxBuffer = pbuff;
 8002300:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  return USBD_OK;
}
 8002304:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8002306:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 800230a:	4770      	bx	lr

0800230c <USBD_CDC_TransmitPacket>:
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800230c:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
{      
 8002310:	b510      	push	{r4, lr}
  
  if(pdev->pClassData != NULL)
 8002312:	b172      	cbz	r2, 8002332 <USBD_CDC_TransmitPacket+0x26>
  {
    if(hcdc->TxState == 0)
 8002314:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 8002318:	2301      	movs	r3, #1
 800231a:	b964      	cbnz	r4, 8002336 <USBD_CDC_TransmitPacket+0x2a>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1;
 800231c:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
      
      /* Transmit next packet */
      USBD_LL_Transmit(pdev,
 8002320:	2181      	movs	r1, #129	; 0x81
 8002322:	f8b2 3210 	ldrh.w	r3, [r2, #528]	; 0x210
 8002326:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 800232a:	f000 fe19 	bl	8002f60 <USBD_LL_Transmit>
                       CDC_IN_EP,
                       hcdc->TxBuffer,
                       hcdc->TxLength);
      
      return USBD_OK;
 800232e:	4620      	mov	r0, r4
 8002330:	bd10      	pop	{r4, pc}
      return USBD_BUSY;
    }
  }
  else
  {
    return USBD_FAIL;
 8002332:	2002      	movs	r0, #2
 8002334:	bd10      	pop	{r4, pc}
      return USBD_BUSY;
 8002336:	4618      	mov	r0, r3
  }
}
 8002338:	bd10      	pop	{r4, pc}

0800233a <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800233a:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
{      
 800233e:	b510      	push	{r4, lr}
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8002340:	b162      	cbz	r2, 800235c <USBD_CDC_ReceivePacket+0x22>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002342:	7c04      	ldrb	r4, [r0, #16]
 8002344:	b944      	cbnz	r4, 8002358 <USBD_CDC_ReceivePacket+0x1e>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8002346:	f44f 7300 	mov.w	r3, #512	; 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800234a:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800234e:	2101      	movs	r1, #1
 8002350:	f000 fe14 	bl	8002f7c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8002354:	2000      	movs	r0, #0
 8002356:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8002358:	2340      	movs	r3, #64	; 0x40
 800235a:	e7f6      	b.n	800234a <USBD_CDC_ReceivePacket+0x10>
  }
  else
  {
    return USBD_FAIL;
 800235c:	2002      	movs	r0, #2
  }
}
 800235e:	bd10      	pop	{r4, pc}

08002360 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8002360:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8002362:	b180      	cbz	r0, 8002386 <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8002364:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002368:	b113      	cbz	r3, 8002370 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 800236a:	2300      	movs	r3, #0
 800236c:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8002370:	b109      	cbz	r1, 8002376 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8002372:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8002376:	2301      	movs	r3, #1
  pdev->id = id;
 8002378:	7002      	strb	r2, [r0, #0]
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800237a:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800237e:	f000 fd49 	bl	8002e14 <USBD_LL_Init>
  
  return USBD_OK; 
 8002382:	2000      	movs	r0, #0
 8002384:	bd08      	pop	{r3, pc}
    return USBD_FAIL; 
 8002386:	2002      	movs	r0, #2
}
 8002388:	bd08      	pop	{r3, pc}

0800238a <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 800238a:	b119      	cbz	r1, 8002394 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800238c:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 8002390:	2000      	movs	r0, #0
 8002392:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8002394:	2002      	movs	r0, #2
  }
  
  return status;
}
 8002396:	4770      	bx	lr

08002398 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8002398:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 800239a:	f000 fd7b 	bl	8002e94 <USBD_LL_Start>
  
  return USBD_OK;  
}
 800239e:	2000      	movs	r0, #0
 80023a0:	bd08      	pop	{r3, pc}

080023a2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80023a2:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 80023a4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80023a8:	b90b      	cbnz	r3, 80023ae <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 80023aa:	2002      	movs	r0, #2
 80023ac:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4798      	blx	r3
 80023b2:	2800      	cmp	r0, #0
 80023b4:	d1f9      	bne.n	80023aa <USBD_SetClassConfig+0x8>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 80023b6:	bd08      	pop	{r3, pc}

080023b8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80023b8:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 80023ba:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	4798      	blx	r3
  return USBD_OK;
}
 80023c2:	2000      	movs	r0, #0
 80023c4:	bd08      	pop	{r3, pc}

080023c6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80023c6:	b538      	push	{r3, r4, r5, lr}

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80023c8:	f500 7502 	add.w	r5, r0, #520	; 0x208
{
 80023cc:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80023ce:	4628      	mov	r0, r5
 80023d0:	f000 fa65 	bl	800289e <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 80023d4:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 80023d6:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
  pdev->ep0_state = USBD_EP0_SETUP;
 80023da:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 80023de:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 80023e2:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  switch (pdev->request.bmRequest & 0x1F) 
 80023e6:	f001 031f 	and.w	r3, r1, #31
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d00e      	beq.n	800240c <USBD_LL_SetupStage+0x46>
 80023ee:	d307      	bcc.n	8002400 <USBD_LL_SetupStage+0x3a>
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d010      	beq.n	8002416 <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 80023f4:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80023f8:	4620      	mov	r0, r4
 80023fa:	f000 fd77 	bl	8002eec <USBD_LL_StallEP>
    break;
 80023fe:	e003      	b.n	8002408 <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 8002400:	4629      	mov	r1, r5
 8002402:	4620      	mov	r0, r4
 8002404:	f000 f8d6 	bl	80025b4 <USBD_StdDevReq>
  }  
  return USBD_OK;  
}
 8002408:	2000      	movs	r0, #0
 800240a:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 800240c:	4629      	mov	r1, r5
 800240e:	4620      	mov	r0, r4
 8002410:	f000 f9ca 	bl	80027a8 <USBD_StdItfReq>
    break;
 8002414:	e7f8      	b.n	8002408 <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);   
 8002416:	4629      	mov	r1, r5
 8002418:	4620      	mov	r0, r4
 800241a:	f000 f9dd 	bl	80027d8 <USBD_StdEPReq>
    break;
 800241e:	e7f3      	b.n	8002408 <USBD_LL_SetupStage+0x42>

08002420 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8002420:	b538      	push	{r3, r4, r5, lr}
 8002422:	4604      	mov	r4, r0
 8002424:	4615      	mov	r5, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8002426:	bb11      	cbnz	r1, 800246e <USBD_LL_DataOutStage+0x4e>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8002428:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 800242c:	2b03      	cmp	r3, #3
 800242e:	d10f      	bne.n	8002450 <USBD_LL_DataOutStage+0x30>
    {
      if(pep->rem_length > pep->maxpacket)
 8002430:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 8002434:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 8002438:	4293      	cmp	r3, r2
 800243a:	d90b      	bls.n	8002454 <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 800243c:	1a9b      	subs	r3, r3, r2
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 800243e:	429a      	cmp	r2, r3
 8002440:	bf28      	it	cs
 8002442:	461a      	movcs	r2, r3
        pep->rem_length -=  pep->maxpacket;
 8002444:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
        USBD_CtlContinueRx (pdev, 
 8002448:	b292      	uxth	r2, r2
 800244a:	4629      	mov	r1, r5
 800244c:	f000 fa7b 	bl	8002946 <USBD_CtlContinueRx>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 8002450:	2000      	movs	r0, #0
 8002452:	bd38      	pop	{r3, r4, r5, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8002454:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	b123      	cbz	r3, 8002466 <USBD_LL_DataOutStage+0x46>
 800245c:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002460:	2a03      	cmp	r2, #3
 8002462:	d100      	bne.n	8002466 <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev); 
 8002464:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8002466:	4620      	mov	r0, r4
 8002468:	f000 fa75 	bl	8002956 <USBD_CtlSendStatus>
 800246c:	e7f0      	b.n	8002450 <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL)&&
 800246e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d0eb      	beq.n	8002450 <USBD_LL_DataOutStage+0x30>
 8002478:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800247c:	2a03      	cmp	r2, #3
 800247e:	d1e7      	bne.n	8002450 <USBD_LL_DataOutStage+0x30>
    pdev->pClass->DataOut(pdev, epnum); 
 8002480:	4798      	blx	r3
 8002482:	e7e5      	b.n	8002450 <USBD_LL_DataOutStage+0x30>

08002484 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8002484:	b570      	push	{r4, r5, r6, lr}
 8002486:	4613      	mov	r3, r2
 8002488:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 800248a:	460e      	mov	r6, r1
 800248c:	2900      	cmp	r1, #0
 800248e:	d13d      	bne.n	800250c <USBD_LL_DataInStage+0x88>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8002490:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 8002494:	2a02      	cmp	r2, #2
 8002496:	d10f      	bne.n	80024b8 <USBD_LL_DataInStage+0x34>
    {
      if(pep->rem_length > pep->maxpacket)
 8002498:	69c5      	ldr	r5, [r0, #28]
 800249a:	6a02      	ldr	r2, [r0, #32]
 800249c:	4295      	cmp	r5, r2
 800249e:	d914      	bls.n	80024ca <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -=  pep->maxpacket;
 80024a0:	1aaa      	subs	r2, r5, r2
 80024a2:	61c2      	str	r2, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 80024a4:	4619      	mov	r1, r3
 80024a6:	b292      	uxth	r2, r2
 80024a8:	f000 fa36 	bl	8002918 <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 80024ac:	4633      	mov	r3, r6
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
          pdev->ep0_data_len = 0;
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 80024ae:	461a      	mov	r2, r3
 80024b0:	4619      	mov	r1, r3
 80024b2:	4620      	mov	r0, r4
 80024b4:	f000 fd62 	bl	8002f7c <USBD_LL_PrepareReceive>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 80024b8:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d102      	bne.n	80024c6 <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 80024c0:	2300      	movs	r3, #0
 80024c2:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 80024c6:	2000      	movs	r0, #0
 80024c8:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0) &&
 80024ca:	6983      	ldr	r3, [r0, #24]
 80024cc:	fbb3 f5f2 	udiv	r5, r3, r2
 80024d0:	fb02 3515 	mls	r5, r2, r5, r3
 80024d4:	b965      	cbnz	r5, 80024f0 <USBD_LL_DataInStage+0x6c>
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d80a      	bhi.n	80024f0 <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 80024da:	f8d0 21f8 	ldr.w	r2, [r0, #504]	; 0x1f8
 80024de:	4293      	cmp	r3, r2
 80024e0:	d206      	bcs.n	80024f0 <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 80024e2:	462a      	mov	r2, r5
 80024e4:	f000 fa18 	bl	8002918 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 80024e8:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
        USBD_LL_PrepareReceive (pdev,
 80024ec:	462b      	mov	r3, r5
 80024ee:	e7de      	b.n	80024ae <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80024f0:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	b12b      	cbz	r3, 8002504 <USBD_LL_DataInStage+0x80>
 80024f8:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 80024fc:	2a03      	cmp	r2, #3
 80024fe:	d101      	bne.n	8002504 <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev); 
 8002500:	4620      	mov	r0, r4
 8002502:	4798      	blx	r3
          USBD_CtlReceiveStatus(pdev);
 8002504:	4620      	mov	r0, r4
 8002506:	f000 fa31 	bl	800296c <USBD_CtlReceiveStatus>
 800250a:	e7d5      	b.n	80024b8 <USBD_LL_DataInStage+0x34>
  else if((pdev->pClass->DataIn != NULL)&& 
 800250c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002510:	695b      	ldr	r3, [r3, #20]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d0d7      	beq.n	80024c6 <USBD_LL_DataInStage+0x42>
 8002516:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800251a:	2a03      	cmp	r2, #3
 800251c:	d1d3      	bne.n	80024c6 <USBD_LL_DataInStage+0x42>
    pdev->pClass->DataIn(pdev, epnum); 
 800251e:	4798      	blx	r3
 8002520:	e7d1      	b.n	80024c6 <USBD_LL_DataInStage+0x42>

08002522 <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8002522:	2200      	movs	r2, #0
{
 8002524:	b538      	push	{r3, r4, r5, lr}
 8002526:	4604      	mov	r4, r0
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8002528:	2540      	movs	r5, #64	; 0x40
  USBD_LL_OpenEP(pdev,
 800252a:	4611      	mov	r1, r2
 800252c:	2340      	movs	r3, #64	; 0x40
 800252e:	f000 fcbf 	bl	8002eb0 <USBD_LL_OpenEP>
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8002532:	462b      	mov	r3, r5
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8002534:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  USBD_LL_OpenEP(pdev,
 8002538:	2200      	movs	r2, #0
 800253a:	2180      	movs	r1, #128	; 0x80
 800253c:	4620      	mov	r0, r4
 800253e:	f000 fcb7 	bl	8002eb0 <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002542:	2301      	movs	r3, #1
 8002544:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8002548:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800254c:	6225      	str	r5, [r4, #32]
  if (pdev->pClassData) 
 800254e:	b12b      	cbz	r3, 800255c <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8002550:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8002554:	7921      	ldrb	r1, [r4, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	4620      	mov	r0, r4
 800255a:	4798      	blx	r3
 
  
  return USBD_OK;
}
 800255c:	2000      	movs	r0, #0
 800255e:	bd38      	pop	{r3, r4, r5, pc}

08002560 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8002560:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 8002562:	2000      	movs	r0, #0
 8002564:	4770      	bx	lr

08002566 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8002566:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800256a:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800256e:	2304      	movs	r3, #4
 8002570:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8002574:	2000      	movs	r0, #0
 8002576:	4770      	bx	lr

08002578 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 8002578:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 800257c:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8002580:	2000      	movs	r0, #0
 8002582:	4770      	bx	lr

08002584 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8002584:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8002586:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800258a:	2a03      	cmp	r2, #3
 800258c:	d104      	bne.n	8002598 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 800258e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002592:	69db      	ldr	r3, [r3, #28]
 8002594:	b103      	cbz	r3, 8002598 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8002596:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8002598:	2000      	movs	r0, #0
 800259a:	bd08      	pop	{r3, pc}

0800259c <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 800259c:	b510      	push	{r4, lr}
 800259e:	4604      	mov	r4, r0
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
 80025a0:	2180      	movs	r1, #128	; 0x80
 80025a2:	f000 fca3 	bl	8002eec <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 80025a6:	4620      	mov	r0, r4
}
 80025a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 80025ac:	2100      	movs	r1, #0
 80025ae:	f000 bc9d 	b.w	8002eec <USBD_LL_StallEP>
	...

080025b4 <USBD_StdDevReq>:
{
 80025b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bRequest) 
 80025b6:	784b      	ldrb	r3, [r1, #1]
{
 80025b8:	4604      	mov	r4, r0
 80025ba:	460d      	mov	r5, r1
  switch (req->bRequest) 
 80025bc:	2b09      	cmp	r3, #9
 80025be:	d879      	bhi.n	80026b4 <USBD_StdDevReq+0x100>
 80025c0:	e8df f013 	tbh	[pc, r3, lsl #1]
 80025c4:	00e500c9 	.word	0x00e500c9
 80025c8:	00d90078 	.word	0x00d90078
 80025cc:	006d0078 	.word	0x006d0078
 80025d0:	0078000a 	.word	0x0078000a
 80025d4:	008d00b9 	.word	0x008d00b9
  switch (req->wValue >> 8)
 80025d8:	884b      	ldrh	r3, [r1, #2]
 80025da:	0a1a      	lsrs	r2, r3, #8
 80025dc:	3a01      	subs	r2, #1
 80025de:	2a06      	cmp	r2, #6
 80025e0:	d868      	bhi.n	80026b4 <USBD_StdDevReq+0x100>
 80025e2:	e8df f002 	tbb	[pc, r2]
 80025e6:	1c04      	.short	0x1c04
 80025e8:	49676729 	.word	0x49676729
 80025ec:	52          	.byte	0x52
 80025ed:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80025ee:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80025f2:	681b      	ldr	r3, [r3, #0]
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 80025f4:	f10d 0106 	add.w	r1, sp, #6
 80025f8:	7c20      	ldrb	r0, [r4, #16]
 80025fa:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 80025fc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8002600:	2a00      	cmp	r2, #0
 8002602:	d067      	beq.n	80026d4 <USBD_StdDevReq+0x120>
 8002604:	88eb      	ldrh	r3, [r5, #6]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d064      	beq.n	80026d4 <USBD_StdDevReq+0x120>
    len = MIN(len , req->wLength);
 800260a:	429a      	cmp	r2, r3
 800260c:	bf28      	it	cs
 800260e:	461a      	movcs	r2, r3
    USBD_CtlSendData (pdev, 
 8002610:	4601      	mov	r1, r0
    len = MIN(len , req->wLength);
 8002612:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, 
 8002616:	4620      	mov	r0, r4
 8002618:	f000 f971 	bl	80028fe <USBD_CtlSendData>
 800261c:	e05a      	b.n	80026d4 <USBD_StdDevReq+0x120>
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 800261e:	7c02      	ldrb	r2, [r0, #16]
 8002620:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002624:	b932      	cbnz	r2, 8002634 <USBD_StdDevReq+0x80>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8002626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8002628:	f10d 0006 	add.w	r0, sp, #6
 800262c:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800262e:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8002630:	7043      	strb	r3, [r0, #1]
 8002632:	e7e3      	b.n	80025fc <USBD_StdDevReq+0x48>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8002634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002636:	e7f7      	b.n	8002628 <USBD_StdDevReq+0x74>
    switch ((uint8_t)(req->wValue))
 8002638:	b2db      	uxtb	r3, r3
 800263a:	2b05      	cmp	r3, #5
 800263c:	d83a      	bhi.n	80026b4 <USBD_StdDevReq+0x100>
 800263e:	e8df f003 	tbb	[pc, r3]
 8002642:	0703      	.short	0x0703
 8002644:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8002648:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	e7d1      	b.n	80025f4 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8002650:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	e7cd      	b.n	80025f4 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8002658:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	e7c9      	b.n	80025f4 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8002660:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	e7c5      	b.n	80025f4 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8002668:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800266c:	695b      	ldr	r3, [r3, #20]
 800266e:	e7c1      	b.n	80025f4 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8002670:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002674:	699b      	ldr	r3, [r3, #24]
 8002676:	e7bd      	b.n	80025f4 <USBD_StdDevReq+0x40>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8002678:	7c03      	ldrb	r3, [r0, #16]
 800267a:	b9db      	cbnz	r3, 80026b4 <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800267c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002680:	f10d 0006 	add.w	r0, sp, #6
 8002684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002686:	4798      	blx	r3
 8002688:	e7b8      	b.n	80025fc <USBD_StdDevReq+0x48>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800268a:	7c03      	ldrb	r3, [r0, #16]
 800268c:	b993      	cbnz	r3, 80026b4 <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800268e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002692:	f10d 0006 	add.w	r0, sp, #6
 8002696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002698:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800269a:	2307      	movs	r3, #7
 800269c:	e7c8      	b.n	8002630 <USBD_StdDevReq+0x7c>
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 800269e:	888b      	ldrh	r3, [r1, #4]
 80026a0:	b943      	cbnz	r3, 80026b4 <USBD_StdDevReq+0x100>
 80026a2:	88cb      	ldrh	r3, [r1, #6]
 80026a4:	b933      	cbnz	r3, 80026b4 <USBD_StdDevReq+0x100>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80026a6:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 80026aa:	788d      	ldrb	r5, [r1, #2]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80026ac:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 80026ae:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80026b2:	d103      	bne.n	80026bc <USBD_StdDevReq+0x108>
    USBD_CtlError(pdev , req);
 80026b4:	4620      	mov	r0, r4
 80026b6:	f7ff ff71 	bl	800259c <USBD_CtlError.constprop.0>
    break;
 80026ba:	e00b      	b.n	80026d4 <USBD_StdDevReq+0x120>
      pdev->dev_address = dev_addr;
 80026bc:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 80026c0:	4629      	mov	r1, r5
 80026c2:	f000 fc3f 	bl	8002f44 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 80026c6:	4620      	mov	r0, r4
 80026c8:	f000 f945 	bl	8002956 <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 80026cc:	b12d      	cbz	r5, 80026da <USBD_StdDevReq+0x126>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 80026ce:	2302      	movs	r3, #2
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 80026d0:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
}
 80026d4:	2000      	movs	r0, #0
 80026d6:	b003      	add	sp, #12
 80026d8:	bd30      	pop	{r4, r5, pc}
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 80026da:	2301      	movs	r3, #1
 80026dc:	e7f8      	b.n	80026d0 <USBD_StdDevReq+0x11c>
  cfgidx = (uint8_t)(req->wValue);                 
 80026de:	7889      	ldrb	r1, [r1, #2]
 80026e0:	4d30      	ldr	r5, [pc, #192]	; (80027a4 <USBD_StdDevReq+0x1f0>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 80026e2:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);                 
 80026e4:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 80026e6:	d8e5      	bhi.n	80026b4 <USBD_StdDevReq+0x100>
    switch (pdev->dev_state) 
 80026e8:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d00c      	beq.n	800270a <USBD_StdDevReq+0x156>
 80026f0:	2b03      	cmp	r3, #3
 80026f2:	d1df      	bne.n	80026b4 <USBD_StdDevReq+0x100>
      if (cfgidx == 0) 
 80026f4:	b9b1      	cbnz	r1, 8002724 <USBD_StdDevReq+0x170>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80026f6:	2302      	movs	r3, #2
        pdev->dev_config = cfgidx;          
 80026f8:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80026fa:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        USBD_ClrClassConfig(pdev , cfgidx);
 80026fe:	f7ff fe5b 	bl	80023b8 <USBD_ClrClassConfig>
      USBD_CtlSendStatus(pdev);
 8002702:	4620      	mov	r0, r4
 8002704:	f000 f927 	bl	8002956 <USBD_CtlSendStatus>
 8002708:	e7e4      	b.n	80026d4 <USBD_StdDevReq+0x120>
      if (cfgidx) 
 800270a:	2900      	cmp	r1, #0
 800270c:	d0f9      	beq.n	8002702 <USBD_StdDevReq+0x14e>
        pdev->dev_config = cfgidx;
 800270e:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8002710:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 8002712:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8002714:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8002718:	4620      	mov	r0, r4
 800271a:	f7ff fe42 	bl	80023a2 <USBD_SetClassConfig>
 800271e:	2802      	cmp	r0, #2
 8002720:	d1ef      	bne.n	8002702 <USBD_StdDevReq+0x14e>
 8002722:	e7c7      	b.n	80026b4 <USBD_StdDevReq+0x100>
      else  if (cfgidx != pdev->dev_config) 
 8002724:	6841      	ldr	r1, [r0, #4]
 8002726:	2901      	cmp	r1, #1
 8002728:	d0eb      	beq.n	8002702 <USBD_StdDevReq+0x14e>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 800272a:	b2c9      	uxtb	r1, r1
 800272c:	f7ff fe44 	bl	80023b8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8002730:	7829      	ldrb	r1, [r5, #0]
 8002732:	6061      	str	r1, [r4, #4]
 8002734:	e7f0      	b.n	8002718 <USBD_StdDevReq+0x164>
  if (req->wLength != 1) 
 8002736:	88ca      	ldrh	r2, [r1, #6]
 8002738:	2a01      	cmp	r2, #1
 800273a:	d1bb      	bne.n	80026b4 <USBD_StdDevReq+0x100>
    switch (pdev->dev_state )  
 800273c:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002740:	2b02      	cmp	r3, #2
 8002742:	d003      	beq.n	800274c <USBD_StdDevReq+0x198>
 8002744:	2b03      	cmp	r3, #3
 8002746:	d1b5      	bne.n	80026b4 <USBD_StdDevReq+0x100>
      USBD_CtlSendData (pdev, 
 8002748:	1d01      	adds	r1, r0, #4
 800274a:	e764      	b.n	8002616 <USBD_StdDevReq+0x62>
      pdev->dev_default_config = 0;
 800274c:	4601      	mov	r1, r0
 800274e:	2300      	movs	r3, #0
 8002750:	f841 3f08 	str.w	r3, [r1, #8]!
 8002754:	e75f      	b.n	8002616 <USBD_StdDevReq+0x62>
  switch (pdev->dev_state) 
 8002756:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800275a:	3b02      	subs	r3, #2
 800275c:	2b01      	cmp	r3, #1
 800275e:	d8a9      	bhi.n	80026b4 <USBD_StdDevReq+0x100>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8002760:	2301      	movs	r3, #1
 8002762:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 8002764:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8002768:	b10b      	cbz	r3, 800276e <USBD_StdDevReq+0x1ba>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 800276a:	2303      	movs	r3, #3
 800276c:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, 
 800276e:	2202      	movs	r2, #2
 8002770:	f104 010c 	add.w	r1, r4, #12
 8002774:	e74f      	b.n	8002616 <USBD_StdDevReq+0x62>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8002776:	884b      	ldrh	r3, [r1, #2]
 8002778:	2b01      	cmp	r3, #1
 800277a:	d1ab      	bne.n	80026d4 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 800277c:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8002780:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8002784:	4629      	mov	r1, r5
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	4620      	mov	r0, r4
 800278a:	4798      	blx	r3
 800278c:	e7b9      	b.n	8002702 <USBD_StdDevReq+0x14e>
  switch (pdev->dev_state)
 800278e:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002792:	3b02      	subs	r3, #2
 8002794:	2b01      	cmp	r3, #1
 8002796:	d88d      	bhi.n	80026b4 <USBD_StdDevReq+0x100>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8002798:	884b      	ldrh	r3, [r1, #2]
 800279a:	2b01      	cmp	r3, #1
 800279c:	d19a      	bne.n	80026d4 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 800279e:	2300      	movs	r3, #0
 80027a0:	e7ec      	b.n	800277c <USBD_StdDevReq+0x1c8>
 80027a2:	bf00      	nop
 80027a4:	200001fd 	.word	0x200001fd

080027a8 <USBD_StdItfReq>:
{
 80027a8:	b538      	push	{r3, r4, r5, lr}
  switch (pdev->dev_state) 
 80027aa:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
{
 80027ae:	4604      	mov	r4, r0
  switch (pdev->dev_state) 
 80027b0:	2b03      	cmp	r3, #3
{
 80027b2:	460d      	mov	r5, r1
  switch (pdev->dev_state) 
 80027b4:	d10d      	bne.n	80027d2 <USBD_StdItfReq+0x2a>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 80027b6:	790b      	ldrb	r3, [r1, #4]
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d80a      	bhi.n	80027d2 <USBD_StdItfReq+0x2a>
      pdev->pClass->Setup (pdev, req); 
 80027bc:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 80027c4:	88eb      	ldrh	r3, [r5, #6]
 80027c6:	b913      	cbnz	r3, 80027ce <USBD_StdItfReq+0x26>
         USBD_CtlSendStatus(pdev);
 80027c8:	4620      	mov	r0, r4
 80027ca:	f000 f8c4 	bl	8002956 <USBD_CtlSendStatus>
}
 80027ce:	2000      	movs	r0, #0
 80027d0:	bd38      	pop	{r3, r4, r5, pc}
     USBD_CtlError(pdev , req);
 80027d2:	f7ff fee3 	bl	800259c <USBD_CtlError.constprop.0>
    break;
 80027d6:	e7fa      	b.n	80027ce <USBD_StdItfReq+0x26>

080027d8 <USBD_StdEPReq>:
{
 80027d8:	b570      	push	{r4, r5, r6, lr}
  if ((req->bmRequest & 0x60) == 0x20)
 80027da:	780a      	ldrb	r2, [r1, #0]
  ep_addr  = LOBYTE(req->wIndex);   
 80027dc:	888e      	ldrh	r6, [r1, #4]
  if ((req->bmRequest & 0x60) == 0x20)
 80027de:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80027e2:	2a20      	cmp	r2, #32
{
 80027e4:	4604      	mov	r4, r0
 80027e6:	460d      	mov	r5, r1
  ep_addr  = LOBYTE(req->wIndex);   
 80027e8:	b2f3      	uxtb	r3, r6
  if ((req->bmRequest & 0x60) == 0x20)
 80027ea:	d105      	bne.n	80027f8 <USBD_StdEPReq+0x20>
    pdev->pClass->Setup (pdev, req);
 80027ec:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	4798      	blx	r3
}
 80027f4:	2000      	movs	r0, #0
 80027f6:	bd70      	pop	{r4, r5, r6, pc}
  switch (req->bRequest) 
 80027f8:	784a      	ldrb	r2, [r1, #1]
 80027fa:	2a01      	cmp	r2, #1
 80027fc:	d01c      	beq.n	8002838 <USBD_StdEPReq+0x60>
 80027fe:	d32a      	bcc.n	8002856 <USBD_StdEPReq+0x7e>
 8002800:	2a03      	cmp	r2, #3
 8002802:	d1f7      	bne.n	80027f4 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 8002804:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002808:	2a02      	cmp	r2, #2
 800280a:	d040      	beq.n	800288e <USBD_StdEPReq+0xb6>
 800280c:	2a03      	cmp	r2, #3
 800280e:	d002      	beq.n	8002816 <USBD_StdEPReq+0x3e>
      USBD_CtlError(pdev , req);
 8002810:	f7ff fec4 	bl	800259c <USBD_CtlError.constprop.0>
      break;
 8002814:	e7ee      	b.n	80027f4 <USBD_StdEPReq+0x1c>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8002816:	884a      	ldrh	r2, [r1, #2]
 8002818:	b922      	cbnz	r2, 8002824 <USBD_StdEPReq+0x4c>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800281a:	065e      	lsls	r6, r3, #25
 800281c:	d002      	beq.n	8002824 <USBD_StdEPReq+0x4c>
          USBD_LL_StallEP(pdev , ep_addr);
 800281e:	4619      	mov	r1, r3
 8002820:	f000 fb64 	bl	8002eec <USBD_LL_StallEP>
          pdev->pClass->Setup (pdev, req);
 8002824:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8002828:	4629      	mov	r1, r5
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	4620      	mov	r0, r4
 800282e:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8002830:	4620      	mov	r0, r4
 8002832:	f000 f890 	bl	8002956 <USBD_CtlSendStatus>
 8002836:	e7dd      	b.n	80027f4 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 8002838:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800283c:	2a02      	cmp	r2, #2
 800283e:	d026      	beq.n	800288e <USBD_StdEPReq+0xb6>
 8002840:	2a03      	cmp	r2, #3
 8002842:	d1e5      	bne.n	8002810 <USBD_StdEPReq+0x38>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8002844:	884a      	ldrh	r2, [r1, #2]
 8002846:	2a00      	cmp	r2, #0
 8002848:	d1d4      	bne.n	80027f4 <USBD_StdEPReq+0x1c>
        if ((ep_addr & 0x7F) != 0x00) 
 800284a:	0659      	lsls	r1, r3, #25
 800284c:	d0f0      	beq.n	8002830 <USBD_StdEPReq+0x58>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 800284e:	4619      	mov	r1, r3
 8002850:	f000 fb5a 	bl	8002f08 <USBD_LL_ClearStallEP>
 8002854:	e7e6      	b.n	8002824 <USBD_StdEPReq+0x4c>
    switch (pdev->dev_state) 
 8002856:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800285a:	2a02      	cmp	r2, #2
 800285c:	d017      	beq.n	800288e <USBD_StdEPReq+0xb6>
 800285e:	2a03      	cmp	r2, #3
 8002860:	d1d6      	bne.n	8002810 <USBD_StdEPReq+0x38>
 8002862:	f003 057f 	and.w	r5, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8002866:	f016 0f80 	tst.w	r6, #128	; 0x80
 800286a:	eb00 1505 	add.w	r5, r0, r5, lsl #4
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 800286e:	4619      	mov	r1, r3
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8002870:	bf14      	ite	ne
 8002872:	3514      	addne	r5, #20
 8002874:	f505 7582 	addeq.w	r5, r5, #260	; 0x104
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8002878:	f000 fb54 	bl	8002f24 <USBD_LL_IsStallEP>
 800287c:	b168      	cbz	r0, 800289a <USBD_StdEPReq+0xc2>
        pep->status = 0x0001;     
 800287e:	2301      	movs	r3, #1
 8002880:	602b      	str	r3, [r5, #0]
      USBD_CtlSendData (pdev,
 8002882:	2202      	movs	r2, #2
 8002884:	4629      	mov	r1, r5
 8002886:	4620      	mov	r0, r4
 8002888:	f000 f839 	bl	80028fe <USBD_CtlSendData>
      break;
 800288c:	e7b2      	b.n	80027f4 <USBD_StdEPReq+0x1c>
      if ((ep_addr & 0x7F) != 0x00) 
 800288e:	065a      	lsls	r2, r3, #25
 8002890:	d0b0      	beq.n	80027f4 <USBD_StdEPReq+0x1c>
        USBD_LL_StallEP(pdev , ep_addr);
 8002892:	4619      	mov	r1, r3
 8002894:	f000 fb2a 	bl	8002eec <USBD_LL_StallEP>
 8002898:	e7ac      	b.n	80027f4 <USBD_StdEPReq+0x1c>
        pep->status = 0x0000;  
 800289a:	6028      	str	r0, [r5, #0]
 800289c:	e7f1      	b.n	8002882 <USBD_StdEPReq+0xaa>

0800289e <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 800289e:	780b      	ldrb	r3, [r1, #0]
 80028a0:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80028a2:	784b      	ldrb	r3, [r1, #1]
 80028a4:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80028a6:	78ca      	ldrb	r2, [r1, #3]
 80028a8:	788b      	ldrb	r3, [r1, #2]
 80028aa:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80028ae:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80028b0:	794a      	ldrb	r2, [r1, #5]
 80028b2:	790b      	ldrb	r3, [r1, #4]
 80028b4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80028b8:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80028ba:	79ca      	ldrb	r2, [r1, #7]
 80028bc:	798b      	ldrb	r3, [r1, #6]
 80028be:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80028c2:	80c3      	strh	r3, [r0, #6]
 80028c4:	4770      	bx	lr

080028c6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80028c6:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 80028c8:	b188      	cbz	r0, 80028ee <USBD_GetString+0x28>
 80028ca:	4605      	mov	r5, r0
 80028cc:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 80028ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	2c00      	cmp	r4, #0
 80028d6:	d1f9      	bne.n	80028cc <USBD_GetString+0x6>
    *len =  USBD_GetLen(desc) * 2 + 2;    
 80028d8:	005b      	lsls	r3, r3, #1
 80028da:	3302      	adds	r3, #2
 80028dc:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 80028de:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 80028e0:	2303      	movs	r3, #3
 80028e2:	704b      	strb	r3, [r1, #1]
 80028e4:	2302      	movs	r3, #2
 80028e6:	3801      	subs	r0, #1
    while (*desc != '\0') 
 80028e8:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80028ec:	b905      	cbnz	r5, 80028f0 <USBD_GetString+0x2a>
 80028ee:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 80028f0:	1c5a      	adds	r2, r3, #1
 80028f2:	54cd      	strb	r5, [r1, r3]
 80028f4:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0x00;
 80028f6:	3302      	adds	r3, #2
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	548c      	strb	r4, [r1, r2]
 80028fc:	e7f4      	b.n	80028e8 <USBD_GetString+0x22>

080028fe <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 80028fe:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8002900:	2202      	movs	r2, #2
{
 8002902:	b510      	push	{r4, lr}
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8002904:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 8002908:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 800290a:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 800290c:	61c3      	str	r3, [r0, #28]
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 800290e:	2100      	movs	r1, #0
 8002910:	f000 fb26 	bl	8002f60 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8002914:	2000      	movs	r0, #0
 8002916:	bd10      	pop	{r4, pc}

08002918 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8002918:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 800291a:	4613      	mov	r3, r2
 800291c:	460a      	mov	r2, r1
 800291e:	2100      	movs	r1, #0
 8002920:	f000 fb1e 	bl	8002f60 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8002924:	2000      	movs	r0, #0
 8002926:	bd08      	pop	{r3, pc}

08002928 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 8002928:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 800292a:	2203      	movs	r2, #3
{
 800292c:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 800292e:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 8002932:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 8002936:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 8002938:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
  USBD_LL_PrepareReceive (pdev,
 800293c:	2100      	movs	r1, #0
 800293e:	f000 fb1d 	bl	8002f7c <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 8002942:	2000      	movs	r0, #0
 8002944:	bd10      	pop	{r4, pc}

08002946 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8002946:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 8002948:	4613      	mov	r3, r2
 800294a:	460a      	mov	r2, r1
 800294c:	2100      	movs	r1, #0
 800294e:	f000 fb15 	bl	8002f7c <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 8002952:	2000      	movs	r0, #0
 8002954:	bd08      	pop	{r3, pc}

08002956 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8002956:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8002958:	2304      	movs	r3, #4
 800295a:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 800295e:	2300      	movs	r3, #0
 8002960:	461a      	mov	r2, r3
 8002962:	4619      	mov	r1, r3
 8002964:	f000 fafc 	bl	8002f60 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8002968:	2000      	movs	r0, #0
 800296a:	bd08      	pop	{r3, pc}

0800296c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 800296c:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 800296e:	2305      	movs	r3, #5
 8002970:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8002974:	2300      	movs	r3, #0
 8002976:	461a      	mov	r2, r3
 8002978:	4619      	mov	r1, r3
 800297a:	f000 faff 	bl	8002f7c <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 800297e:	2000      	movs	r0, #0
 8002980:	bd08      	pop	{r3, pc}

08002982 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002982:	2228      	movs	r2, #40	; 0x28
{
 8002984:	b530      	push	{r4, r5, lr}
 8002986:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002988:	eb0d 0002 	add.w	r0, sp, r2
 800298c:	2100      	movs	r1, #0
 800298e:	f000 fbd7 	bl	8003140 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002992:	2214      	movs	r2, #20
 8002994:	2100      	movs	r1, #0
 8002996:	eb0d 0002 	add.w	r0, sp, r2
 800299a:	f000 fbd1 	bl	8003140 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800299e:	2100      	movs	r1, #0
 80029a0:	2210      	movs	r2, #16
 80029a2:	a801      	add	r0, sp, #4
 80029a4:	f000 fbcc 	bl	8003140 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80029a8:	2305      	movs	r3, #5
 80029aa:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80029ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80029b0:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029b2:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80029b4:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80029b6:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80029b8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029bc:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80029be:	920d      	str	r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80029c0:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80029c2:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029c4:	9511      	str	r5, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029c6:	f7fe f95f 	bl	8000c88 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029ca:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029cc:	2400      	movs	r4, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029ce:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80029d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80029d4:	4629      	mov	r1, r5
 80029d6:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80029d8:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029da:	9506      	str	r5, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029dc:	9407      	str	r4, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80029de:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80029e0:	f7fe fb1a 	bl	8001018 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USB;
 80029e4:	2311      	movs	r3, #17
 80029e6:	9301      	str	r3, [sp, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80029e8:	f44f 7380 	mov.w	r3, #256	; 0x100
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029ec:	a801      	add	r0, sp, #4
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80029ee:	9302      	str	r3, [sp, #8]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80029f0:	9404      	str	r4, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029f2:	f7fe fbd3 	bl	800119c <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 80029f6:	b015      	add	sp, #84	; 0x54
 80029f8:	bd30      	pop	{r4, r5, pc}
	...

080029fc <USB_Reset>:

/* USER CODE BEGIN 4 */
// После перегенерации в Кубе добавить USB_Reset(); в функцию MX_GPIO_Init(void) (после ...CLK_ENABLE(); )

void USB_Reset(void)
{
 80029fc:	b530      	push	{r4, r5, lr}
 80029fe:	b085      	sub	sp, #20

	 GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a00:	2210      	movs	r2, #16
 8002a02:	2100      	movs	r1, #0
 8002a04:	4668      	mov	r0, sp
 8002a06:	f000 fb9b 	bl	8003140 <memset>

	 // инициализируем пин DP как выход
	 GPIO_InitStruct.Pin = GPIO_PIN_12;
	 GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a0a:	2301      	movs	r3, #1
	 GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002a0c:	f44f 5580 	mov.w	r5, #4096	; 0x1000
	 GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a10:	9301      	str	r3, [sp, #4]
	 GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a12:	2302      	movs	r3, #2
	 HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a14:	4c0a      	ldr	r4, [pc, #40]	; (8002a40 <USB_Reset+0x44>)
 8002a16:	4669      	mov	r1, sp
 8002a18:	4620      	mov	r0, r4
	 GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a1a:	9303      	str	r3, [sp, #12]
	 GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002a1c:	9500      	str	r5, [sp, #0]
	 HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a1e:	f7fd fc5f 	bl	80002e0 <HAL_GPIO_Init>
	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET); // прижимаем DP к "земле"
 8002a22:	2200      	movs	r2, #0
 8002a24:	4629      	mov	r1, r5
 8002a26:	4620      	mov	r0, r4
 8002a28:	f7fd fd3a 	bl	80004a0 <HAL_GPIO_WritePin>
	 for(uint16_t i = 0; i < 2000; i++) {}; // немного ждём

	 // переинициализируем пин для работы с USB
	 GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a2c:	2300      	movs	r3, #0
	 GPIO_InitStruct.Pull = GPIO_NOPULL;
	 HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a2e:	4669      	mov	r1, sp
 8002a30:	4620      	mov	r0, r4
	 GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a32:	9301      	str	r3, [sp, #4]
	 GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a34:	9302      	str	r3, [sp, #8]
	 HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a36:	f7fd fc53 	bl	80002e0 <HAL_GPIO_Init>
	 for(uint16_t i = 0; i < 2000; i++) {}; // немного ждём
}
 8002a3a:	b005      	add	sp, #20
 8002a3c:	bd30      	pop	{r4, r5, pc}
 8002a3e:	bf00      	nop
 8002a40:	40010800 	.word	0x40010800

08002a44 <main>:
{
 8002a44:	b500      	push	{lr}
 8002a46:	b0ad      	sub	sp, #180	; 0xb4
  HAL_Init();
 8002a48:	f7fd fbac 	bl	80001a4 <HAL_Init>
  SystemClock_Config();
 8002a4c:	f7ff ff99 	bl	8002982 <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a50:	4b42      	ldr	r3, [pc, #264]	; (8002b5c <main+0x118>)
  RTC_TimeTypeDef sTime = {0};
 8002a52:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a54:	699a      	ldr	r2, [r3, #24]
  hrtc.Instance = RTC;
 8002a56:	4d42      	ldr	r5, [pc, #264]	; (8002b60 <main+0x11c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a58:	f042 0210 	orr.w	r2, r2, #16
 8002a5c:	619a      	str	r2, [r3, #24]
 8002a5e:	699a      	ldr	r2, [r3, #24]
 8002a60:	f002 0210 	and.w	r2, r2, #16
 8002a64:	9209      	str	r2, [sp, #36]	; 0x24
 8002a66:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a68:	699a      	ldr	r2, [r3, #24]
 8002a6a:	f042 0220 	orr.w	r2, r2, #32
 8002a6e:	619a      	str	r2, [r3, #24]
 8002a70:	699a      	ldr	r2, [r3, #24]
 8002a72:	f002 0220 	and.w	r2, r2, #32
 8002a76:	920a      	str	r2, [sp, #40]	; 0x28
 8002a78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a7a:	699a      	ldr	r2, [r3, #24]
 8002a7c:	f042 0204 	orr.w	r2, r2, #4
 8002a80:	619a      	str	r2, [r3, #24]
 8002a82:	699b      	ldr	r3, [r3, #24]
 8002a84:	f003 0304 	and.w	r3, r3, #4
 8002a88:	930b      	str	r3, [sp, #44]	; 0x2c
 8002a8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  USB_Reset();
 8002a8c:	f7ff ffb6 	bl	80029fc <USB_Reset>
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8002a90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a98:	4932      	ldr	r1, [pc, #200]	; (8002b64 <main+0x120>)
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002a9a:	4628      	mov	r0, r5
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8002a9c:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  RTC_TimeTypeDef sTime = {0};
 8002aa0:	f8ad 4020 	strh.w	r4, [sp, #32]
 8002aa4:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
  RTC_DateTypeDef DateToUpdate = {0};
 8002aa8:	940c      	str	r4, [sp, #48]	; 0x30
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002aaa:	f7fe fec7 	bl	800183c <HAL_RTC_Init>
  sTime.Minutes = 16;
 8002aae:	2310      	movs	r3, #16
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002ab0:	4622      	mov	r2, r4
 8002ab2:	a908      	add	r1, sp, #32
 8002ab4:	4628      	mov	r0, r5
  sTime.Hours = 0;
 8002ab6:	f88d 4020 	strb.w	r4, [sp, #32]
  sTime.Minutes = 16;
 8002aba:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
  sTime.Seconds = 0;
 8002abe:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002ac2:	f7fe fd13 	bl	80014ec <HAL_RTC_SetTime>
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  DateToUpdate.Month = RTC_MONTH_MAY;
 8002acc:	2305      	movs	r3, #5
 8002ace:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  DateToUpdate.Date = 30;
 8002ad2:	231e      	movs	r3, #30
 8002ad4:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
  DateToUpdate.Year = 19;
 8002ad8:	2313      	movs	r3, #19
  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)
 8002ada:	4622      	mov	r2, r4
 8002adc:	a90c      	add	r1, sp, #48	; 0x30
 8002ade:	4628      	mov	r0, r5
  DateToUpdate.Year = 19;
 8002ae0:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)
 8002ae4:	f7fe fe0a 	bl	80016fc <HAL_RTC_SetDate>
  MX_USB_DEVICE_Init();
 8002ae8:	f000 f8d2 	bl	8002c90 <MX_USB_DEVICE_Init>
  char trans_str[128] = {0,};
 8002aec:	4621      	mov	r1, r4
 8002aee:	2280      	movs	r2, #128	; 0x80
 8002af0:	a80c      	add	r0, sp, #48	; 0x30
  RTC_TimeTypeDef sTime = {0};
 8002af2:	f8ad 401c 	strh.w	r4, [sp, #28]
 8002af6:	f88d 401e 	strb.w	r4, [sp, #30]
  RTC_DateTypeDef DateToUpdate = {0};
 8002afa:	9408      	str	r4, [sp, #32]
  char trans_str[128] = {0,};
 8002afc:	f000 fb20 	bl	8003140 <memset>
		snprintf(trans_str, 128, "Time %d:%d:%d\nDate %d-%d-20%d\n", sTime.Hours, sTime.Minutes, sTime.Seconds, DateToUpdate.Date, DateToUpdate.Month, DateToUpdate.Year);
 8002b00:	4c19      	ldr	r4, [pc, #100]	; (8002b68 <main+0x124>)
	    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN); // RTC_FORMAT_BIN , RTC_FORMAT_BCD
 8002b02:	a907      	add	r1, sp, #28
 8002b04:	2200      	movs	r2, #0
 8002b06:	4628      	mov	r0, r5
 8002b08:	f7fe fd42 	bl	8001590 <HAL_RTC_GetTime>
	    HAL_RTC_GetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN);
 8002b0c:	a908      	add	r1, sp, #32
 8002b0e:	2200      	movs	r2, #0
 8002b10:	4628      	mov	r0, r5
 8002b12:	f7fe fe4b 	bl	80017ac <HAL_RTC_GetDate>
		snprintf(trans_str, 128, "Time %d:%d:%d\nDate %d-%d-20%d\n", sTime.Hours, sTime.Minutes, sTime.Seconds, DateToUpdate.Date, DateToUpdate.Month, DateToUpdate.Year);
 8002b16:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
 8002b1a:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8002b1e:	9204      	str	r2, [sp, #16]
 8002b20:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
 8002b24:	2180      	movs	r1, #128	; 0x80
 8002b26:	9203      	str	r2, [sp, #12]
 8002b28:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
 8002b2c:	a80c      	add	r0, sp, #48	; 0x30
 8002b2e:	9202      	str	r2, [sp, #8]
 8002b30:	f89d 201e 	ldrb.w	r2, [sp, #30]
 8002b34:	9201      	str	r2, [sp, #4]
 8002b36:	f89d 201d 	ldrb.w	r2, [sp, #29]
 8002b3a:	9200      	str	r2, [sp, #0]
 8002b3c:	4622      	mov	r2, r4
 8002b3e:	f000 fb07 	bl	8003150 <sniprintf>
		CDC_Transmit_FS((uint8_t*)trans_str, strlen(trans_str));
 8002b42:	a80c      	add	r0, sp, #48	; 0x30
 8002b44:	f7fd fb02 	bl	800014c <strlen>
 8002b48:	b281      	uxth	r1, r0
 8002b4a:	a80c      	add	r0, sp, #48	; 0x30
 8002b4c:	f000 f8ee 	bl	8002d2c <CDC_Transmit_FS>
		HAL_Delay(1000);
 8002b50:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b54:	f7fd fb4a 	bl	80001ec <HAL_Delay>
 8002b58:	e7d3      	b.n	8002b02 <main+0xbe>
 8002b5a:	bf00      	nop
 8002b5c:	40021000 	.word	0x40021000
 8002b60:	20000430 	.word	0x20000430
 8002b64:	40002800 	.word	0x40002800
 8002b68:	08003a00 	.word	0x08003a00

08002b6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b6c:	4770      	bx	lr
	...

08002b70 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002b70:	4b0e      	ldr	r3, [pc, #56]	; (8002bac <HAL_MspInit+0x3c>)
{
 8002b72:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002b74:	699a      	ldr	r2, [r3, #24]
 8002b76:	f042 0201 	orr.w	r2, r2, #1
 8002b7a:	619a      	str	r2, [r3, #24]
 8002b7c:	699a      	ldr	r2, [r3, #24]
 8002b7e:	f002 0201 	and.w	r2, r2, #1
 8002b82:	9200      	str	r2, [sp, #0]
 8002b84:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b86:	69da      	ldr	r2, [r3, #28]
 8002b88:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002b8c:	61da      	str	r2, [r3, #28]
 8002b8e:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002b90:	4a07      	ldr	r2, [pc, #28]	; (8002bb0 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b96:	9301      	str	r3, [sp, #4]
 8002b98:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002b9a:	6853      	ldr	r3, [r2, #4]
 8002b9c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002ba0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ba4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ba6:	b002      	add	sp, #8
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	40021000 	.word	0x40021000
 8002bb0:	40010000 	.word	0x40010000

08002bb4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002bb4:	b507      	push	{r0, r1, r2, lr}
  if(hrtc->Instance==RTC)
 8002bb6:	4b0b      	ldr	r3, [pc, #44]	; (8002be4 <HAL_RTC_MspInit+0x30>)
 8002bb8:	6802      	ldr	r2, [r0, #0]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d10e      	bne.n	8002bdc <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8002bbe:	f7fe f85d 	bl	8000c7c <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8002bc2:	4b09      	ldr	r3, [pc, #36]	; (8002be8 <HAL_RTC_MspInit+0x34>)
 8002bc4:	69da      	ldr	r2, [r3, #28]
 8002bc6:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8002bca:	61da      	str	r2, [r3, #28]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002bcc:	2201      	movs	r2, #1
    __HAL_RCC_BKP_CLK_ENABLE();
 8002bce:	69db      	ldr	r3, [r3, #28]
 8002bd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002bd4:	9301      	str	r3, [sp, #4]
 8002bd6:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_RTC_ENABLE();
 8002bd8:	4b04      	ldr	r3, [pc, #16]	; (8002bec <HAL_RTC_MspInit+0x38>)
 8002bda:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002bdc:	b003      	add	sp, #12
 8002bde:	f85d fb04 	ldr.w	pc, [sp], #4
 8002be2:	bf00      	nop
 8002be4:	40002800 	.word	0x40002800
 8002be8:	40021000 	.word	0x40021000
 8002bec:	4242043c 	.word	0x4242043c

08002bf0 <NMI_Handler>:
 8002bf0:	4770      	bx	lr

08002bf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bf2:	e7fe      	b.n	8002bf2 <HardFault_Handler>

08002bf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bf4:	e7fe      	b.n	8002bf4 <MemManage_Handler>

08002bf6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bf6:	e7fe      	b.n	8002bf6 <BusFault_Handler>

08002bf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bf8:	e7fe      	b.n	8002bf8 <UsageFault_Handler>

08002bfa <SVC_Handler>:
 8002bfa:	4770      	bx	lr

08002bfc <DebugMon_Handler>:
 8002bfc:	4770      	bx	lr

08002bfe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002bfe:	4770      	bx	lr

08002c00 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c00:	f7fd bae2 	b.w	80001c8 <HAL_IncTick>

08002c04 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002c04:	4801      	ldr	r0, [pc, #4]	; (8002c0c <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 8002c06:	f7fd bd5d 	b.w	80006c4 <HAL_PCD_IRQHandler>
 8002c0a:	bf00      	nop
 8002c0c:	20000e38 	.word	0x20000e38

08002c10 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8002c10:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002c12:	4b0a      	ldr	r3, [pc, #40]	; (8002c3c <_sbrk+0x2c>)
{
 8002c14:	4602      	mov	r2, r0
	if (heap_end == 0)
 8002c16:	6819      	ldr	r1, [r3, #0]
 8002c18:	b909      	cbnz	r1, 8002c1e <_sbrk+0xe>
		heap_end = &end;
 8002c1a:	4909      	ldr	r1, [pc, #36]	; (8002c40 <_sbrk+0x30>)
 8002c1c:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8002c1e:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8002c20:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8002c22:	4402      	add	r2, r0
 8002c24:	428a      	cmp	r2, r1
 8002c26:	d906      	bls.n	8002c36 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8002c28:	f000 fa60 	bl	80030ec <__errno>
 8002c2c:	230c      	movs	r3, #12
 8002c2e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8002c30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c34:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8002c36:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8002c38:	bd08      	pop	{r3, pc}
 8002c3a:	bf00      	nop
 8002c3c:	20000200 	.word	0x20000200
 8002c40:	2000149c 	.word	0x2000149c

08002c44 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002c44:	4b0f      	ldr	r3, [pc, #60]	; (8002c84 <SystemInit+0x40>)
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	f042 0201 	orr.w	r2, r2, #1
 8002c4c:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002c4e:	6859      	ldr	r1, [r3, #4]
 8002c50:	4a0d      	ldr	r2, [pc, #52]	; (8002c88 <SystemInit+0x44>)
 8002c52:	400a      	ands	r2, r1
 8002c54:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002c5c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002c60:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c68:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002c6a:	685a      	ldr	r2, [r3, #4]
 8002c6c:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002c70:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002c72:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002c76:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002c78:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002c7c:	4b03      	ldr	r3, [pc, #12]	; (8002c8c <SystemInit+0x48>)
 8002c7e:	609a      	str	r2, [r3, #8]
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	40021000 	.word	0x40021000
 8002c88:	f8ff0000 	.word	0xf8ff0000
 8002c8c:	e000ed00 	.word	0xe000ed00

08002c90 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8002c90:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8002c92:	2200      	movs	r2, #0
 8002c94:	490e      	ldr	r1, [pc, #56]	; (8002cd0 <MX_USB_DEVICE_Init+0x40>)
 8002c96:	480f      	ldr	r0, [pc, #60]	; (8002cd4 <MX_USB_DEVICE_Init+0x44>)
 8002c98:	f7ff fb62 	bl	8002360 <USBD_Init>
 8002c9c:	b108      	cbz	r0, 8002ca2 <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 8002c9e:	f7ff ff65 	bl	8002b6c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8002ca2:	490d      	ldr	r1, [pc, #52]	; (8002cd8 <MX_USB_DEVICE_Init+0x48>)
 8002ca4:	480b      	ldr	r0, [pc, #44]	; (8002cd4 <MX_USB_DEVICE_Init+0x44>)
 8002ca6:	f7ff fb70 	bl	800238a <USBD_RegisterClass>
 8002caa:	b108      	cbz	r0, 8002cb0 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 8002cac:	f7ff ff5e 	bl	8002b6c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8002cb0:	490a      	ldr	r1, [pc, #40]	; (8002cdc <MX_USB_DEVICE_Init+0x4c>)
 8002cb2:	4808      	ldr	r0, [pc, #32]	; (8002cd4 <MX_USB_DEVICE_Init+0x44>)
 8002cb4:	f7ff fb15 	bl	80022e2 <USBD_CDC_RegisterInterface>
 8002cb8:	b108      	cbz	r0, 8002cbe <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 8002cba:	f7ff ff57 	bl	8002b6c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8002cbe:	4805      	ldr	r0, [pc, #20]	; (8002cd4 <MX_USB_DEVICE_Init+0x44>)
 8002cc0:	f7ff fb6a 	bl	8002398 <USBD_Start>
 8002cc4:	b118      	cbz	r0, 8002cce <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8002cc6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002cca:	f7ff bf4f 	b.w	8002b6c <Error_Handler>
 8002cce:	bd08      	pop	{r3, pc}
 8002cd0:	2000012c 	.word	0x2000012c
 8002cd4:	20000444 	.word	0x20000444
 8002cd8:	20000008 	.word	0x20000008
 8002cdc:	2000011c 	.word	0x2000011c

08002ce0 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8002ce0:	2000      	movs	r0, #0
 8002ce2:	4770      	bx	lr

08002ce4 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8002ce4:	2000      	movs	r0, #0
 8002ce6:	4770      	bx	lr

08002ce8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8002ce8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8002cea:	4c05      	ldr	r4, [pc, #20]	; (8002d00 <CDC_Receive_FS+0x18>)
 8002cec:	4601      	mov	r1, r0
 8002cee:	4620      	mov	r0, r4
 8002cf0:	f7ff fb06 	bl	8002300 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8002cf4:	4620      	mov	r0, r4
 8002cf6:	f7ff fb20 	bl	800233a <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8002cfa:	2000      	movs	r0, #0
 8002cfc:	bd10      	pop	{r4, pc}
 8002cfe:	bf00      	nop
 8002d00:	20000444 	.word	0x20000444

08002d04 <CDC_Init_FS>:
{
 8002d04:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8002d06:	4c06      	ldr	r4, [pc, #24]	; (8002d20 <CDC_Init_FS+0x1c>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	4906      	ldr	r1, [pc, #24]	; (8002d24 <CDC_Init_FS+0x20>)
 8002d0c:	4620      	mov	r0, r4
 8002d0e:	f7ff faef 	bl	80022f0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8002d12:	4905      	ldr	r1, [pc, #20]	; (8002d28 <CDC_Init_FS+0x24>)
 8002d14:	4620      	mov	r0, r4
 8002d16:	f7ff faf3 	bl	8002300 <USBD_CDC_SetRxBuffer>
}
 8002d1a:	2000      	movs	r0, #0
 8002d1c:	bd10      	pop	{r4, pc}
 8002d1e:	bf00      	nop
 8002d20:	20000444 	.word	0x20000444
 8002d24:	20000a50 	.word	0x20000a50
 8002d28:	20000668 	.word	0x20000668

08002d2c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8002d2c:	b510      	push	{r4, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8002d2e:	4c09      	ldr	r4, [pc, #36]	; (8002d54 <CDC_Transmit_FS+0x28>)
{
 8002d30:	460a      	mov	r2, r1
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8002d32:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  if (hcdc->TxState != 0){
 8002d36:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002d3a:	b943      	cbnz	r3, 8002d4e <CDC_Transmit_FS+0x22>
    return USBD_BUSY;
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8002d3c:	4601      	mov	r1, r0
 8002d3e:	4620      	mov	r0, r4
 8002d40:	f7ff fad6 	bl	80022f0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8002d44:	4620      	mov	r0, r4
  /* USER CODE END 7 */
  return result;
}
 8002d46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8002d4a:	f7ff badf 	b.w	800230c <USBD_CDC_TransmitPacket>
}
 8002d4e:	2001      	movs	r0, #1
 8002d50:	bd10      	pop	{r4, pc}
 8002d52:	bf00      	nop
 8002d54:	20000444 	.word	0x20000444

08002d58 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002d58:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 8002d5a:	4b0d      	ldr	r3, [pc, #52]	; (8002d90 <HAL_PCD_MspInit+0x38>)
 8002d5c:	6802      	ldr	r2, [r0, #0]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d112      	bne.n	8002d88 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002d62:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8002d66:	69da      	ldr	r2, [r3, #28]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002d68:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 8002d6a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002d6e:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002d70:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 8002d72:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002d74:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 8002d76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d7a:	9301      	str	r3, [sp, #4]
 8002d7c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002d7e:	f7fd fa59 	bl	8000234 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8002d82:	2014      	movs	r0, #20
 8002d84:	f7fd fa8a 	bl	800029c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8002d88:	b003      	add	sp, #12
 8002d8a:	f85d fb04 	ldr.w	pc, [sp], #4
 8002d8e:	bf00      	nop
 8002d90:	40005c00 	.word	0x40005c00

08002d94 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8002d94:	f200 412c 	addw	r1, r0, #1068	; 0x42c
 8002d98:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8002d9c:	f7ff bb13 	b.w	80023c6 <USBD_LL_SetupStage>

08002da0 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8002da0:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8002da4:	f8d3 223c 	ldr.w	r2, [r3, #572]	; 0x23c
 8002da8:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8002dac:	f7ff bb38 	b.w	8002420 <USBD_LL_DataOutStage>

08002db0 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8002db0:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8002db4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002db6:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8002dba:	f7ff bb63 	b.w	8002484 <USBD_LL_DataInStage>

08002dbe <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8002dbe:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8002dc2:	f7ff bbdf 	b.w	8002584 <USBD_LL_SOF>

08002dc6 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8002dc6:	6883      	ldr	r3, [r0, #8]
{ 
 8002dc8:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8002dca:	2b02      	cmp	r3, #2
{ 
 8002dcc:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8002dce:	d001      	beq.n	8002dd4 <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 8002dd0:	f7ff fecc 	bl	8002b6c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8002dd4:	f8d4 045c 	ldr.w	r0, [r4, #1116]	; 0x45c
 8002dd8:	2101      	movs	r1, #1
 8002dda:	f7ff fbc1 	bl	8002560 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8002dde:	f8d4 045c 	ldr.w	r0, [r4, #1116]	; 0x45c
}
 8002de2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8002de6:	f7ff bb9c 	b.w	8002522 <USBD_LL_Reset>
	...

08002dec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8002dec:	b510      	push	{r4, lr}
 8002dee:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8002df0:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8002df4:	f7ff fbb7 	bl	8002566 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8002df8:	69a3      	ldr	r3, [r4, #24]
 8002dfa:	b123      	cbz	r3, 8002e06 <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8002dfc:	4a02      	ldr	r2, [pc, #8]	; (8002e08 <HAL_PCD_SuspendCallback+0x1c>)
 8002dfe:	6913      	ldr	r3, [r2, #16]
 8002e00:	f043 0306 	orr.w	r3, r3, #6
 8002e04:	6113      	str	r3, [r2, #16]
 8002e06:	bd10      	pop	{r4, pc}
 8002e08:	e000ed00 	.word	0xe000ed00

08002e0c <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8002e0c:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8002e10:	f7ff bbb2 	b.w	8002578 <USBD_LL_Resume>

08002e14 <USBD_LL_Init>:
  hpcd_USB_FS.pData = pdev;
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8002e14:	2302      	movs	r3, #2
 8002e16:	2208      	movs	r2, #8
{
 8002e18:	b510      	push	{r4, lr}
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8002e1a:	491c      	ldr	r1, [pc, #112]	; (8002e8c <USBD_LL_Init+0x78>)
{
 8002e1c:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 8002e1e:	481c      	ldr	r0, [pc, #112]	; (8002e90 <USBD_LL_Init+0x7c>)
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8002e20:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8002e24:	2300      	movs	r3, #0
  hpcd_USB_FS.pData = pdev;
 8002e26:	f8c0 445c 	str.w	r4, [r0, #1116]	; 0x45c
  pdev->pData = &hpcd_USB_FS;
 8002e2a:	f8c4 0220 	str.w	r0, [r4, #544]	; 0x220
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8002e2e:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8002e30:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8002e32:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8002e34:	f7fd fb39 	bl	80004aa <HAL_PCD_Init>
 8002e38:	b108      	cbz	r0, 8002e3e <USBD_LL_Init+0x2a>
  {
    Error_Handler( );
 8002e3a:	f7ff fe97 	bl	8002b6c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8002e3e:	2200      	movs	r2, #0
 8002e40:	2318      	movs	r3, #24
 8002e42:	4611      	mov	r1, r2
 8002e44:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8002e48:	f7fd ff00 	bl	8000c4c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8002e4c:	2358      	movs	r3, #88	; 0x58
 8002e4e:	2200      	movs	r2, #0
 8002e50:	2180      	movs	r1, #128	; 0x80
 8002e52:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8002e56:	f7fd fef9 	bl	8000c4c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8002e5a:	23c0      	movs	r3, #192	; 0xc0
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	2181      	movs	r1, #129	; 0x81
 8002e60:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8002e64:	f7fd fef2 	bl	8000c4c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8002e68:	f44f 7388 	mov.w	r3, #272	; 0x110
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	2101      	movs	r1, #1
 8002e70:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8002e74:	f7fd feea 	bl	8000c4c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8002e78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	2182      	movs	r1, #130	; 0x82
 8002e80:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8002e84:	f7fd fee2 	bl	8000c4c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
}
 8002e88:	2000      	movs	r0, #0
 8002e8a:	bd10      	pop	{r4, pc}
 8002e8c:	40005c00 	.word	0x40005c00
 8002e90:	20000e38 	.word	0x20000e38

08002e94 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8002e94:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8002e96:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002e9a:	f7fd fb6f 	bl	800057c <HAL_PCD_Start>
 8002e9e:	2803      	cmp	r0, #3
 8002ea0:	bf9a      	itte	ls
 8002ea2:	4b02      	ldrls	r3, [pc, #8]	; (8002eac <USBD_LL_Start+0x18>)
 8002ea4:	5c18      	ldrbls	r0, [r3, r0]
 8002ea6:	2002      	movhi	r0, #2
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8002ea8:	bd08      	pop	{r3, pc}
 8002eaa:	bf00      	nop
 8002eac:	08003a37 	.word	0x08003a37

08002eb0 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8002eb0:	b510      	push	{r4, lr}
 8002eb2:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8002eb4:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002eb8:	4613      	mov	r3, r2
 8002eba:	4622      	mov	r2, r4
 8002ebc:	f7fd fb89 	bl	80005d2 <HAL_PCD_EP_Open>
 8002ec0:	2803      	cmp	r0, #3
 8002ec2:	bf9a      	itte	ls
 8002ec4:	4b01      	ldrls	r3, [pc, #4]	; (8002ecc <USBD_LL_OpenEP+0x1c>)
 8002ec6:	5c18      	ldrbls	r0, [r3, r0]
 8002ec8:	2002      	movhi	r0, #2

  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;
}
 8002eca:	bd10      	pop	{r4, pc}
 8002ecc:	08003a37 	.word	0x08003a37

08002ed0 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002ed0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8002ed2:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002ed6:	f7fd fb9f 	bl	8000618 <HAL_PCD_EP_Close>
 8002eda:	2803      	cmp	r0, #3
 8002edc:	bf9a      	itte	ls
 8002ede:	4b02      	ldrls	r3, [pc, #8]	; (8002ee8 <USBD_LL_CloseEP+0x18>)
 8002ee0:	5c18      	ldrbls	r0, [r3, r0]
 8002ee2:	2002      	movhi	r0, #2
      
  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;  
}
 8002ee4:	bd08      	pop	{r3, pc}
 8002ee6:	bf00      	nop
 8002ee8:	08003a37 	.word	0x08003a37

08002eec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002eec:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8002eee:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002ef2:	f7fd fe5f 	bl	8000bb4 <HAL_PCD_EP_SetStall>
 8002ef6:	2803      	cmp	r0, #3
 8002ef8:	bf9a      	itte	ls
 8002efa:	4b02      	ldrls	r3, [pc, #8]	; (8002f04 <USBD_LL_StallEP+0x18>)
 8002efc:	5c18      	ldrbls	r0, [r3, r0]
 8002efe:	2002      	movhi	r0, #2

  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;  
}
 8002f00:	bd08      	pop	{r3, pc}
 8002f02:	bf00      	nop
 8002f04:	08003a37 	.word	0x08003a37

08002f08 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002f08:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8002f0a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002f0e:	f7fd fe7a 	bl	8000c06 <HAL_PCD_EP_ClrStall>
 8002f12:	2803      	cmp	r0, #3
 8002f14:	bf9a      	itte	ls
 8002f16:	4b02      	ldrls	r3, [pc, #8]	; (8002f20 <USBD_LL_ClearStallEP+0x18>)
 8002f18:	5c18      	ldrbls	r0, [r3, r0]
 8002f1a:	2002      	movhi	r0, #2
     
  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status; 
}
 8002f1c:	bd08      	pop	{r3, pc}
 8002f1e:	bf00      	nop
 8002f20:	08003a37 	.word	0x08003a37

08002f24 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8002f24:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8002f26:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8002f2a:	bf45      	ittet	mi
 8002f2c:	f001 017f 	andmi.w	r1, r1, #127	; 0x7f
 8002f30:	eb03 1341 	addmi.w	r3, r3, r1, lsl #5
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8002f34:	eb03 1341 	addpl.w	r3, r3, r1, lsl #5
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8002f38:	f893 002a 	ldrbmi.w	r0, [r3, #42]	; 0x2a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8002f3c:	bf58      	it	pl
 8002f3e:	f893 022a 	ldrbpl.w	r0, [r3, #554]	; 0x22a
  }
}
 8002f42:	4770      	bx	lr

08002f44 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8002f44:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8002f46:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002f4a:	f7fd fb2e 	bl	80005aa <HAL_PCD_SetAddress>
 8002f4e:	2803      	cmp	r0, #3
 8002f50:	bf9a      	itte	ls
 8002f52:	4b02      	ldrls	r3, [pc, #8]	; (8002f5c <USBD_LL_SetUSBAddress+0x18>)
 8002f54:	5c18      	ldrbls	r0, [r3, r0]
 8002f56:	2002      	movhi	r0, #2
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;  
}
 8002f58:	bd08      	pop	{r3, pc}
 8002f5a:	bf00      	nop
 8002f5c:	08003a37 	.word	0x08003a37

08002f60 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8002f60:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8002f62:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002f66:	f7fd fb97 	bl	8000698 <HAL_PCD_EP_Transmit>
 8002f6a:	2803      	cmp	r0, #3
 8002f6c:	bf9a      	itte	ls
 8002f6e:	4b02      	ldrls	r3, [pc, #8]	; (8002f78 <USBD_LL_Transmit+0x18>)
 8002f70:	5c18      	ldrbls	r0, [r3, r0]
 8002f72:	2002      	movhi	r0, #2
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;    
}
 8002f74:	bd08      	pop	{r3, pc}
 8002f76:	bf00      	nop
 8002f78:	08003a37 	.word	0x08003a37

08002f7c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8002f7c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8002f7e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002f82:	f7fd fb6a 	bl	800065a <HAL_PCD_EP_Receive>
 8002f86:	2803      	cmp	r0, #3
 8002f88:	bf9a      	itte	ls
 8002f8a:	4b02      	ldrls	r3, [pc, #8]	; (8002f94 <USBD_LL_PrepareReceive+0x18>)
 8002f8c:	5c18      	ldrbls	r0, [r3, r0]
 8002f8e:	2002      	movhi	r0, #2
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  	
  return usb_status; 
}
 8002f90:	bd08      	pop	{r3, pc}
 8002f92:	bf00      	nop
 8002f94:	08003a37 	.word	0x08003a37

08002f98 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002f98:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8002f9a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002f9e:	f7fd fb74 	bl	800068a <HAL_PCD_EP_GetRxCount>
}
 8002fa2:	bd08      	pop	{r3, pc}

08002fa4 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 8002fa4:	4800      	ldr	r0, [pc, #0]	; (8002fa8 <USBD_static_malloc+0x4>)
 8002fa6:	4770      	bx	lr
 8002fa8:	20000204 	.word	0x20000204

08002fac <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8002fac:	4770      	bx	lr

08002fae <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8002fae:	4770      	bx	lr

08002fb0 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8002fb0:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8002fb2:	4801      	ldr	r0, [pc, #4]	; (8002fb8 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8002fb4:	800b      	strh	r3, [r1, #0]
}
 8002fb6:	4770      	bx	lr
 8002fb8:	20000148 	.word	0x20000148

08002fbc <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8002fbc:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8002fbe:	4801      	ldr	r0, [pc, #4]	; (8002fc4 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8002fc0:	800b      	strh	r3, [r1, #0]
}
 8002fc2:	4770      	bx	lr
 8002fc4:	2000015c 	.word	0x2000015c

08002fc8 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8002fc8:	2300      	movs	r3, #0
{
 8002fca:	b530      	push	{r4, r5, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8002fcc:	461d      	mov	r5, r3
  for (idx = 0; idx < len; idx++)
 8002fce:	b2dc      	uxtb	r4, r3
 8002fd0:	42a2      	cmp	r2, r4
 8002fd2:	d800      	bhi.n	8002fd6 <IntToUnicode+0xe>
  }
}
 8002fd4:	bd30      	pop	{r4, r5, pc}
    if (((value >> 28)) < 0xA)
 8002fd6:	0f04      	lsrs	r4, r0, #28
 8002fd8:	2c09      	cmp	r4, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 8002fda:	bf94      	ite	ls
 8002fdc:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8002fde:	3437      	addhi	r4, #55	; 0x37
 8002fe0:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 8002fe4:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    value = value << 4;
 8002fe8:	0100      	lsls	r0, r0, #4
    pbuf[2 * idx + 1] = 0;
 8002fea:	7065      	strb	r5, [r4, #1]
 8002fec:	3301      	adds	r3, #1
 8002fee:	e7ee      	b.n	8002fce <IntToUnicode+0x6>

08002ff0 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8002ff0:	231a      	movs	r3, #26
{
 8002ff2:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8002ff4:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8002ff6:	4b09      	ldr	r3, [pc, #36]	; (800301c <USBD_FS_SerialStrDescriptor+0x2c>)
 8002ff8:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8002ffa:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 8002ffc:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 8002ffe:	18c0      	adds	r0, r0, r3
 8003000:	d00a      	beq.n	8003018 <USBD_FS_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8003002:	4b07      	ldr	r3, [pc, #28]	; (8003020 <USBD_FS_SerialStrDescriptor+0x30>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8003004:	2208      	movs	r2, #8
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8003006:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8003008:	4906      	ldr	r1, [pc, #24]	; (8003024 <USBD_FS_SerialStrDescriptor+0x34>)
 800300a:	f7ff ffdd 	bl	8002fc8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800300e:	2204      	movs	r2, #4
 8003010:	4905      	ldr	r1, [pc, #20]	; (8003028 <USBD_FS_SerialStrDescriptor+0x38>)
 8003012:	4620      	mov	r0, r4
 8003014:	f7ff ffd8 	bl	8002fc8 <IntToUnicode>
}
 8003018:	4804      	ldr	r0, [pc, #16]	; (800302c <USBD_FS_SerialStrDescriptor+0x3c>)
 800301a:	bd10      	pop	{r4, pc}
 800301c:	1ffff7e8 	.word	0x1ffff7e8
 8003020:	1ffff7ec 	.word	0x1ffff7ec
 8003024:	20000162 	.word	0x20000162
 8003028:	20000172 	.word	0x20000172
 800302c:	20000160 	.word	0x20000160

08003030 <USBD_FS_ManufacturerStrDescriptor>:
{
 8003030:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8003032:	4c04      	ldr	r4, [pc, #16]	; (8003044 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8003034:	460a      	mov	r2, r1
 8003036:	4804      	ldr	r0, [pc, #16]	; (8003048 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8003038:	4621      	mov	r1, r4
 800303a:	f7ff fc44 	bl	80028c6 <USBD_GetString>
}
 800303e:	4620      	mov	r0, r4
 8003040:	bd10      	pop	{r4, pc}
 8003042:	bf00      	nop
 8003044:	20001298 	.word	0x20001298
 8003048:	08003a54 	.word	0x08003a54

0800304c <USBD_FS_ProductStrDescriptor>:
{
 800304c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800304e:	4c04      	ldr	r4, [pc, #16]	; (8003060 <USBD_FS_ProductStrDescriptor+0x14>)
 8003050:	460a      	mov	r2, r1
 8003052:	4804      	ldr	r0, [pc, #16]	; (8003064 <USBD_FS_ProductStrDescriptor+0x18>)
 8003054:	4621      	mov	r1, r4
 8003056:	f7ff fc36 	bl	80028c6 <USBD_GetString>
}
 800305a:	4620      	mov	r0, r4
 800305c:	bd10      	pop	{r4, pc}
 800305e:	bf00      	nop
 8003060:	20001298 	.word	0x20001298
 8003064:	08003a67 	.word	0x08003a67

08003068 <USBD_FS_ConfigStrDescriptor>:
{
 8003068:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800306a:	4c04      	ldr	r4, [pc, #16]	; (800307c <USBD_FS_ConfigStrDescriptor+0x14>)
 800306c:	460a      	mov	r2, r1
 800306e:	4804      	ldr	r0, [pc, #16]	; (8003080 <USBD_FS_ConfigStrDescriptor+0x18>)
 8003070:	4621      	mov	r1, r4
 8003072:	f7ff fc28 	bl	80028c6 <USBD_GetString>
}
 8003076:	4620      	mov	r0, r4
 8003078:	bd10      	pop	{r4, pc}
 800307a:	bf00      	nop
 800307c:	20001298 	.word	0x20001298
 8003080:	08003a3b 	.word	0x08003a3b

08003084 <USBD_FS_InterfaceStrDescriptor>:
{
 8003084:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8003086:	4c04      	ldr	r4, [pc, #16]	; (8003098 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8003088:	460a      	mov	r2, r1
 800308a:	4804      	ldr	r0, [pc, #16]	; (800309c <USBD_FS_InterfaceStrDescriptor+0x18>)
 800308c:	4621      	mov	r1, r4
 800308e:	f7ff fc1a 	bl	80028c6 <USBD_GetString>
}
 8003092:	4620      	mov	r0, r4
 8003094:	bd10      	pop	{r4, pc}
 8003096:	bf00      	nop
 8003098:	20001298 	.word	0x20001298
 800309c:	08003a46 	.word	0x08003a46

080030a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80030a0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80030a2:	e003      	b.n	80030ac <LoopCopyDataInit>

080030a4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80030a4:	4b0b      	ldr	r3, [pc, #44]	; (80030d4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80030a6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80030a8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80030aa:	3104      	adds	r1, #4

080030ac <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80030ac:	480a      	ldr	r0, [pc, #40]	; (80030d8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80030ae:	4b0b      	ldr	r3, [pc, #44]	; (80030dc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80030b0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80030b2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80030b4:	d3f6      	bcc.n	80030a4 <CopyDataInit>
  ldr r2, =_sbss
 80030b6:	4a0a      	ldr	r2, [pc, #40]	; (80030e0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80030b8:	e002      	b.n	80030c0 <LoopFillZerobss>

080030ba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80030ba:	2300      	movs	r3, #0
  str r3, [r2], #4
 80030bc:	f842 3b04 	str.w	r3, [r2], #4

080030c0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80030c0:	4b08      	ldr	r3, [pc, #32]	; (80030e4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80030c2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80030c4:	d3f9      	bcc.n	80030ba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80030c6:	f7ff fdbd 	bl	8002c44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80030ca:	f000 f815 	bl	80030f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80030ce:	f7ff fcb9 	bl	8002a44 <main>
  bx lr
 80030d2:	4770      	bx	lr
  ldr r3, =_sidata
 80030d4:	08003ab8 	.word	0x08003ab8
  ldr r0, =_sdata
 80030d8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80030dc:	200001e0 	.word	0x200001e0
  ldr r2, =_sbss
 80030e0:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 80030e4:	2000149c 	.word	0x2000149c

080030e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80030e8:	e7fe      	b.n	80030e8 <ADC1_2_IRQHandler>
	...

080030ec <__errno>:
 80030ec:	4b01      	ldr	r3, [pc, #4]	; (80030f4 <__errno+0x8>)
 80030ee:	6818      	ldr	r0, [r3, #0]
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop
 80030f4:	2000017c 	.word	0x2000017c

080030f8 <__libc_init_array>:
 80030f8:	b570      	push	{r4, r5, r6, lr}
 80030fa:	2500      	movs	r5, #0
 80030fc:	4e0c      	ldr	r6, [pc, #48]	; (8003130 <__libc_init_array+0x38>)
 80030fe:	4c0d      	ldr	r4, [pc, #52]	; (8003134 <__libc_init_array+0x3c>)
 8003100:	1ba4      	subs	r4, r4, r6
 8003102:	10a4      	asrs	r4, r4, #2
 8003104:	42a5      	cmp	r5, r4
 8003106:	d109      	bne.n	800311c <__libc_init_array+0x24>
 8003108:	f000 fc5e 	bl	80039c8 <_init>
 800310c:	2500      	movs	r5, #0
 800310e:	4e0a      	ldr	r6, [pc, #40]	; (8003138 <__libc_init_array+0x40>)
 8003110:	4c0a      	ldr	r4, [pc, #40]	; (800313c <__libc_init_array+0x44>)
 8003112:	1ba4      	subs	r4, r4, r6
 8003114:	10a4      	asrs	r4, r4, #2
 8003116:	42a5      	cmp	r5, r4
 8003118:	d105      	bne.n	8003126 <__libc_init_array+0x2e>
 800311a:	bd70      	pop	{r4, r5, r6, pc}
 800311c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003120:	4798      	blx	r3
 8003122:	3501      	adds	r5, #1
 8003124:	e7ee      	b.n	8003104 <__libc_init_array+0xc>
 8003126:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800312a:	4798      	blx	r3
 800312c:	3501      	adds	r5, #1
 800312e:	e7f2      	b.n	8003116 <__libc_init_array+0x1e>
 8003130:	08003ab0 	.word	0x08003ab0
 8003134:	08003ab0 	.word	0x08003ab0
 8003138:	08003ab0 	.word	0x08003ab0
 800313c:	08003ab4 	.word	0x08003ab4

08003140 <memset>:
 8003140:	4603      	mov	r3, r0
 8003142:	4402      	add	r2, r0
 8003144:	4293      	cmp	r3, r2
 8003146:	d100      	bne.n	800314a <memset+0xa>
 8003148:	4770      	bx	lr
 800314a:	f803 1b01 	strb.w	r1, [r3], #1
 800314e:	e7f9      	b.n	8003144 <memset+0x4>

08003150 <sniprintf>:
 8003150:	b40c      	push	{r2, r3}
 8003152:	b530      	push	{r4, r5, lr}
 8003154:	4b17      	ldr	r3, [pc, #92]	; (80031b4 <sniprintf+0x64>)
 8003156:	1e0c      	subs	r4, r1, #0
 8003158:	b09d      	sub	sp, #116	; 0x74
 800315a:	681d      	ldr	r5, [r3, #0]
 800315c:	da08      	bge.n	8003170 <sniprintf+0x20>
 800315e:	238b      	movs	r3, #139	; 0x8b
 8003160:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003164:	602b      	str	r3, [r5, #0]
 8003166:	b01d      	add	sp, #116	; 0x74
 8003168:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800316c:	b002      	add	sp, #8
 800316e:	4770      	bx	lr
 8003170:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003174:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003178:	bf0c      	ite	eq
 800317a:	4623      	moveq	r3, r4
 800317c:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8003180:	9304      	str	r3, [sp, #16]
 8003182:	9307      	str	r3, [sp, #28]
 8003184:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003188:	9002      	str	r0, [sp, #8]
 800318a:	9006      	str	r0, [sp, #24]
 800318c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003190:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003192:	ab21      	add	r3, sp, #132	; 0x84
 8003194:	a902      	add	r1, sp, #8
 8003196:	4628      	mov	r0, r5
 8003198:	9301      	str	r3, [sp, #4]
 800319a:	f000 f869 	bl	8003270 <_svfiprintf_r>
 800319e:	1c43      	adds	r3, r0, #1
 80031a0:	bfbc      	itt	lt
 80031a2:	238b      	movlt	r3, #139	; 0x8b
 80031a4:	602b      	strlt	r3, [r5, #0]
 80031a6:	2c00      	cmp	r4, #0
 80031a8:	d0dd      	beq.n	8003166 <sniprintf+0x16>
 80031aa:	2200      	movs	r2, #0
 80031ac:	9b02      	ldr	r3, [sp, #8]
 80031ae:	701a      	strb	r2, [r3, #0]
 80031b0:	e7d9      	b.n	8003166 <sniprintf+0x16>
 80031b2:	bf00      	nop
 80031b4:	2000017c 	.word	0x2000017c

080031b8 <__ssputs_r>:
 80031b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031bc:	688e      	ldr	r6, [r1, #8]
 80031be:	4682      	mov	sl, r0
 80031c0:	429e      	cmp	r6, r3
 80031c2:	460c      	mov	r4, r1
 80031c4:	4691      	mov	r9, r2
 80031c6:	4698      	mov	r8, r3
 80031c8:	d835      	bhi.n	8003236 <__ssputs_r+0x7e>
 80031ca:	898a      	ldrh	r2, [r1, #12]
 80031cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80031d0:	d031      	beq.n	8003236 <__ssputs_r+0x7e>
 80031d2:	2302      	movs	r3, #2
 80031d4:	6825      	ldr	r5, [r4, #0]
 80031d6:	6909      	ldr	r1, [r1, #16]
 80031d8:	1a6f      	subs	r7, r5, r1
 80031da:	6965      	ldr	r5, [r4, #20]
 80031dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80031e0:	fb95 f5f3 	sdiv	r5, r5, r3
 80031e4:	f108 0301 	add.w	r3, r8, #1
 80031e8:	443b      	add	r3, r7
 80031ea:	429d      	cmp	r5, r3
 80031ec:	bf38      	it	cc
 80031ee:	461d      	movcc	r5, r3
 80031f0:	0553      	lsls	r3, r2, #21
 80031f2:	d531      	bpl.n	8003258 <__ssputs_r+0xa0>
 80031f4:	4629      	mov	r1, r5
 80031f6:	f000 fb47 	bl	8003888 <_malloc_r>
 80031fa:	4606      	mov	r6, r0
 80031fc:	b950      	cbnz	r0, 8003214 <__ssputs_r+0x5c>
 80031fe:	230c      	movs	r3, #12
 8003200:	f8ca 3000 	str.w	r3, [sl]
 8003204:	89a3      	ldrh	r3, [r4, #12]
 8003206:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800320a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800320e:	81a3      	strh	r3, [r4, #12]
 8003210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003214:	463a      	mov	r2, r7
 8003216:	6921      	ldr	r1, [r4, #16]
 8003218:	f000 fac4 	bl	80037a4 <memcpy>
 800321c:	89a3      	ldrh	r3, [r4, #12]
 800321e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003222:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003226:	81a3      	strh	r3, [r4, #12]
 8003228:	6126      	str	r6, [r4, #16]
 800322a:	443e      	add	r6, r7
 800322c:	6026      	str	r6, [r4, #0]
 800322e:	4646      	mov	r6, r8
 8003230:	6165      	str	r5, [r4, #20]
 8003232:	1bed      	subs	r5, r5, r7
 8003234:	60a5      	str	r5, [r4, #8]
 8003236:	4546      	cmp	r6, r8
 8003238:	bf28      	it	cs
 800323a:	4646      	movcs	r6, r8
 800323c:	4649      	mov	r1, r9
 800323e:	4632      	mov	r2, r6
 8003240:	6820      	ldr	r0, [r4, #0]
 8003242:	f000 faba 	bl	80037ba <memmove>
 8003246:	68a3      	ldr	r3, [r4, #8]
 8003248:	2000      	movs	r0, #0
 800324a:	1b9b      	subs	r3, r3, r6
 800324c:	60a3      	str	r3, [r4, #8]
 800324e:	6823      	ldr	r3, [r4, #0]
 8003250:	441e      	add	r6, r3
 8003252:	6026      	str	r6, [r4, #0]
 8003254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003258:	462a      	mov	r2, r5
 800325a:	f000 fb73 	bl	8003944 <_realloc_r>
 800325e:	4606      	mov	r6, r0
 8003260:	2800      	cmp	r0, #0
 8003262:	d1e1      	bne.n	8003228 <__ssputs_r+0x70>
 8003264:	6921      	ldr	r1, [r4, #16]
 8003266:	4650      	mov	r0, sl
 8003268:	f000 fac2 	bl	80037f0 <_free_r>
 800326c:	e7c7      	b.n	80031fe <__ssputs_r+0x46>
	...

08003270 <_svfiprintf_r>:
 8003270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003274:	b09d      	sub	sp, #116	; 0x74
 8003276:	9303      	str	r3, [sp, #12]
 8003278:	898b      	ldrh	r3, [r1, #12]
 800327a:	4680      	mov	r8, r0
 800327c:	061c      	lsls	r4, r3, #24
 800327e:	460d      	mov	r5, r1
 8003280:	4616      	mov	r6, r2
 8003282:	d50f      	bpl.n	80032a4 <_svfiprintf_r+0x34>
 8003284:	690b      	ldr	r3, [r1, #16]
 8003286:	b96b      	cbnz	r3, 80032a4 <_svfiprintf_r+0x34>
 8003288:	2140      	movs	r1, #64	; 0x40
 800328a:	f000 fafd 	bl	8003888 <_malloc_r>
 800328e:	6028      	str	r0, [r5, #0]
 8003290:	6128      	str	r0, [r5, #16]
 8003292:	b928      	cbnz	r0, 80032a0 <_svfiprintf_r+0x30>
 8003294:	230c      	movs	r3, #12
 8003296:	f8c8 3000 	str.w	r3, [r8]
 800329a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800329e:	e0c4      	b.n	800342a <_svfiprintf_r+0x1ba>
 80032a0:	2340      	movs	r3, #64	; 0x40
 80032a2:	616b      	str	r3, [r5, #20]
 80032a4:	2300      	movs	r3, #0
 80032a6:	9309      	str	r3, [sp, #36]	; 0x24
 80032a8:	2320      	movs	r3, #32
 80032aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80032ae:	2330      	movs	r3, #48	; 0x30
 80032b0:	f04f 0b01 	mov.w	fp, #1
 80032b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80032b8:	4637      	mov	r7, r6
 80032ba:	463c      	mov	r4, r7
 80032bc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d13c      	bne.n	800333e <_svfiprintf_r+0xce>
 80032c4:	ebb7 0a06 	subs.w	sl, r7, r6
 80032c8:	d00b      	beq.n	80032e2 <_svfiprintf_r+0x72>
 80032ca:	4653      	mov	r3, sl
 80032cc:	4632      	mov	r2, r6
 80032ce:	4629      	mov	r1, r5
 80032d0:	4640      	mov	r0, r8
 80032d2:	f7ff ff71 	bl	80031b8 <__ssputs_r>
 80032d6:	3001      	adds	r0, #1
 80032d8:	f000 80a2 	beq.w	8003420 <_svfiprintf_r+0x1b0>
 80032dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80032de:	4453      	add	r3, sl
 80032e0:	9309      	str	r3, [sp, #36]	; 0x24
 80032e2:	783b      	ldrb	r3, [r7, #0]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	f000 809b 	beq.w	8003420 <_svfiprintf_r+0x1b0>
 80032ea:	2300      	movs	r3, #0
 80032ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80032f0:	9304      	str	r3, [sp, #16]
 80032f2:	9307      	str	r3, [sp, #28]
 80032f4:	9205      	str	r2, [sp, #20]
 80032f6:	9306      	str	r3, [sp, #24]
 80032f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80032fc:	931a      	str	r3, [sp, #104]	; 0x68
 80032fe:	2205      	movs	r2, #5
 8003300:	7821      	ldrb	r1, [r4, #0]
 8003302:	4850      	ldr	r0, [pc, #320]	; (8003444 <_svfiprintf_r+0x1d4>)
 8003304:	f000 fa40 	bl	8003788 <memchr>
 8003308:	1c67      	adds	r7, r4, #1
 800330a:	9b04      	ldr	r3, [sp, #16]
 800330c:	b9d8      	cbnz	r0, 8003346 <_svfiprintf_r+0xd6>
 800330e:	06d9      	lsls	r1, r3, #27
 8003310:	bf44      	itt	mi
 8003312:	2220      	movmi	r2, #32
 8003314:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003318:	071a      	lsls	r2, r3, #28
 800331a:	bf44      	itt	mi
 800331c:	222b      	movmi	r2, #43	; 0x2b
 800331e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003322:	7822      	ldrb	r2, [r4, #0]
 8003324:	2a2a      	cmp	r2, #42	; 0x2a
 8003326:	d016      	beq.n	8003356 <_svfiprintf_r+0xe6>
 8003328:	2100      	movs	r1, #0
 800332a:	200a      	movs	r0, #10
 800332c:	9a07      	ldr	r2, [sp, #28]
 800332e:	4627      	mov	r7, r4
 8003330:	783b      	ldrb	r3, [r7, #0]
 8003332:	3401      	adds	r4, #1
 8003334:	3b30      	subs	r3, #48	; 0x30
 8003336:	2b09      	cmp	r3, #9
 8003338:	d950      	bls.n	80033dc <_svfiprintf_r+0x16c>
 800333a:	b1c9      	cbz	r1, 8003370 <_svfiprintf_r+0x100>
 800333c:	e011      	b.n	8003362 <_svfiprintf_r+0xf2>
 800333e:	2b25      	cmp	r3, #37	; 0x25
 8003340:	d0c0      	beq.n	80032c4 <_svfiprintf_r+0x54>
 8003342:	4627      	mov	r7, r4
 8003344:	e7b9      	b.n	80032ba <_svfiprintf_r+0x4a>
 8003346:	4a3f      	ldr	r2, [pc, #252]	; (8003444 <_svfiprintf_r+0x1d4>)
 8003348:	463c      	mov	r4, r7
 800334a:	1a80      	subs	r0, r0, r2
 800334c:	fa0b f000 	lsl.w	r0, fp, r0
 8003350:	4318      	orrs	r0, r3
 8003352:	9004      	str	r0, [sp, #16]
 8003354:	e7d3      	b.n	80032fe <_svfiprintf_r+0x8e>
 8003356:	9a03      	ldr	r2, [sp, #12]
 8003358:	1d11      	adds	r1, r2, #4
 800335a:	6812      	ldr	r2, [r2, #0]
 800335c:	9103      	str	r1, [sp, #12]
 800335e:	2a00      	cmp	r2, #0
 8003360:	db01      	blt.n	8003366 <_svfiprintf_r+0xf6>
 8003362:	9207      	str	r2, [sp, #28]
 8003364:	e004      	b.n	8003370 <_svfiprintf_r+0x100>
 8003366:	4252      	negs	r2, r2
 8003368:	f043 0302 	orr.w	r3, r3, #2
 800336c:	9207      	str	r2, [sp, #28]
 800336e:	9304      	str	r3, [sp, #16]
 8003370:	783b      	ldrb	r3, [r7, #0]
 8003372:	2b2e      	cmp	r3, #46	; 0x2e
 8003374:	d10d      	bne.n	8003392 <_svfiprintf_r+0x122>
 8003376:	787b      	ldrb	r3, [r7, #1]
 8003378:	1c79      	adds	r1, r7, #1
 800337a:	2b2a      	cmp	r3, #42	; 0x2a
 800337c:	d132      	bne.n	80033e4 <_svfiprintf_r+0x174>
 800337e:	9b03      	ldr	r3, [sp, #12]
 8003380:	3702      	adds	r7, #2
 8003382:	1d1a      	adds	r2, r3, #4
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	9203      	str	r2, [sp, #12]
 8003388:	2b00      	cmp	r3, #0
 800338a:	bfb8      	it	lt
 800338c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003390:	9305      	str	r3, [sp, #20]
 8003392:	4c2d      	ldr	r4, [pc, #180]	; (8003448 <_svfiprintf_r+0x1d8>)
 8003394:	2203      	movs	r2, #3
 8003396:	7839      	ldrb	r1, [r7, #0]
 8003398:	4620      	mov	r0, r4
 800339a:	f000 f9f5 	bl	8003788 <memchr>
 800339e:	b138      	cbz	r0, 80033b0 <_svfiprintf_r+0x140>
 80033a0:	2340      	movs	r3, #64	; 0x40
 80033a2:	1b00      	subs	r0, r0, r4
 80033a4:	fa03 f000 	lsl.w	r0, r3, r0
 80033a8:	9b04      	ldr	r3, [sp, #16]
 80033aa:	3701      	adds	r7, #1
 80033ac:	4303      	orrs	r3, r0
 80033ae:	9304      	str	r3, [sp, #16]
 80033b0:	7839      	ldrb	r1, [r7, #0]
 80033b2:	2206      	movs	r2, #6
 80033b4:	4825      	ldr	r0, [pc, #148]	; (800344c <_svfiprintf_r+0x1dc>)
 80033b6:	1c7e      	adds	r6, r7, #1
 80033b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80033bc:	f000 f9e4 	bl	8003788 <memchr>
 80033c0:	2800      	cmp	r0, #0
 80033c2:	d035      	beq.n	8003430 <_svfiprintf_r+0x1c0>
 80033c4:	4b22      	ldr	r3, [pc, #136]	; (8003450 <_svfiprintf_r+0x1e0>)
 80033c6:	b9fb      	cbnz	r3, 8003408 <_svfiprintf_r+0x198>
 80033c8:	9b03      	ldr	r3, [sp, #12]
 80033ca:	3307      	adds	r3, #7
 80033cc:	f023 0307 	bic.w	r3, r3, #7
 80033d0:	3308      	adds	r3, #8
 80033d2:	9303      	str	r3, [sp, #12]
 80033d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033d6:	444b      	add	r3, r9
 80033d8:	9309      	str	r3, [sp, #36]	; 0x24
 80033da:	e76d      	b.n	80032b8 <_svfiprintf_r+0x48>
 80033dc:	fb00 3202 	mla	r2, r0, r2, r3
 80033e0:	2101      	movs	r1, #1
 80033e2:	e7a4      	b.n	800332e <_svfiprintf_r+0xbe>
 80033e4:	2300      	movs	r3, #0
 80033e6:	240a      	movs	r4, #10
 80033e8:	4618      	mov	r0, r3
 80033ea:	9305      	str	r3, [sp, #20]
 80033ec:	460f      	mov	r7, r1
 80033ee:	783a      	ldrb	r2, [r7, #0]
 80033f0:	3101      	adds	r1, #1
 80033f2:	3a30      	subs	r2, #48	; 0x30
 80033f4:	2a09      	cmp	r2, #9
 80033f6:	d903      	bls.n	8003400 <_svfiprintf_r+0x190>
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d0ca      	beq.n	8003392 <_svfiprintf_r+0x122>
 80033fc:	9005      	str	r0, [sp, #20]
 80033fe:	e7c8      	b.n	8003392 <_svfiprintf_r+0x122>
 8003400:	fb04 2000 	mla	r0, r4, r0, r2
 8003404:	2301      	movs	r3, #1
 8003406:	e7f1      	b.n	80033ec <_svfiprintf_r+0x17c>
 8003408:	ab03      	add	r3, sp, #12
 800340a:	9300      	str	r3, [sp, #0]
 800340c:	462a      	mov	r2, r5
 800340e:	4b11      	ldr	r3, [pc, #68]	; (8003454 <_svfiprintf_r+0x1e4>)
 8003410:	a904      	add	r1, sp, #16
 8003412:	4640      	mov	r0, r8
 8003414:	f3af 8000 	nop.w
 8003418:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800341c:	4681      	mov	r9, r0
 800341e:	d1d9      	bne.n	80033d4 <_svfiprintf_r+0x164>
 8003420:	89ab      	ldrh	r3, [r5, #12]
 8003422:	065b      	lsls	r3, r3, #25
 8003424:	f53f af39 	bmi.w	800329a <_svfiprintf_r+0x2a>
 8003428:	9809      	ldr	r0, [sp, #36]	; 0x24
 800342a:	b01d      	add	sp, #116	; 0x74
 800342c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003430:	ab03      	add	r3, sp, #12
 8003432:	9300      	str	r3, [sp, #0]
 8003434:	462a      	mov	r2, r5
 8003436:	4b07      	ldr	r3, [pc, #28]	; (8003454 <_svfiprintf_r+0x1e4>)
 8003438:	a904      	add	r1, sp, #16
 800343a:	4640      	mov	r0, r8
 800343c:	f000 f884 	bl	8003548 <_printf_i>
 8003440:	e7ea      	b.n	8003418 <_svfiprintf_r+0x1a8>
 8003442:	bf00      	nop
 8003444:	08003a7d 	.word	0x08003a7d
 8003448:	08003a83 	.word	0x08003a83
 800344c:	08003a87 	.word	0x08003a87
 8003450:	00000000 	.word	0x00000000
 8003454:	080031b9 	.word	0x080031b9

08003458 <_printf_common>:
 8003458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800345c:	4691      	mov	r9, r2
 800345e:	461f      	mov	r7, r3
 8003460:	688a      	ldr	r2, [r1, #8]
 8003462:	690b      	ldr	r3, [r1, #16]
 8003464:	4606      	mov	r6, r0
 8003466:	4293      	cmp	r3, r2
 8003468:	bfb8      	it	lt
 800346a:	4613      	movlt	r3, r2
 800346c:	f8c9 3000 	str.w	r3, [r9]
 8003470:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003474:	460c      	mov	r4, r1
 8003476:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800347a:	b112      	cbz	r2, 8003482 <_printf_common+0x2a>
 800347c:	3301      	adds	r3, #1
 800347e:	f8c9 3000 	str.w	r3, [r9]
 8003482:	6823      	ldr	r3, [r4, #0]
 8003484:	0699      	lsls	r1, r3, #26
 8003486:	bf42      	ittt	mi
 8003488:	f8d9 3000 	ldrmi.w	r3, [r9]
 800348c:	3302      	addmi	r3, #2
 800348e:	f8c9 3000 	strmi.w	r3, [r9]
 8003492:	6825      	ldr	r5, [r4, #0]
 8003494:	f015 0506 	ands.w	r5, r5, #6
 8003498:	d107      	bne.n	80034aa <_printf_common+0x52>
 800349a:	f104 0a19 	add.w	sl, r4, #25
 800349e:	68e3      	ldr	r3, [r4, #12]
 80034a0:	f8d9 2000 	ldr.w	r2, [r9]
 80034a4:	1a9b      	subs	r3, r3, r2
 80034a6:	429d      	cmp	r5, r3
 80034a8:	db2a      	blt.n	8003500 <_printf_common+0xa8>
 80034aa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80034ae:	6822      	ldr	r2, [r4, #0]
 80034b0:	3300      	adds	r3, #0
 80034b2:	bf18      	it	ne
 80034b4:	2301      	movne	r3, #1
 80034b6:	0692      	lsls	r2, r2, #26
 80034b8:	d42f      	bmi.n	800351a <_printf_common+0xc2>
 80034ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80034be:	4639      	mov	r1, r7
 80034c0:	4630      	mov	r0, r6
 80034c2:	47c0      	blx	r8
 80034c4:	3001      	adds	r0, #1
 80034c6:	d022      	beq.n	800350e <_printf_common+0xb6>
 80034c8:	6823      	ldr	r3, [r4, #0]
 80034ca:	68e5      	ldr	r5, [r4, #12]
 80034cc:	f003 0306 	and.w	r3, r3, #6
 80034d0:	2b04      	cmp	r3, #4
 80034d2:	bf18      	it	ne
 80034d4:	2500      	movne	r5, #0
 80034d6:	f8d9 2000 	ldr.w	r2, [r9]
 80034da:	f04f 0900 	mov.w	r9, #0
 80034de:	bf08      	it	eq
 80034e0:	1aad      	subeq	r5, r5, r2
 80034e2:	68a3      	ldr	r3, [r4, #8]
 80034e4:	6922      	ldr	r2, [r4, #16]
 80034e6:	bf08      	it	eq
 80034e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80034ec:	4293      	cmp	r3, r2
 80034ee:	bfc4      	itt	gt
 80034f0:	1a9b      	subgt	r3, r3, r2
 80034f2:	18ed      	addgt	r5, r5, r3
 80034f4:	341a      	adds	r4, #26
 80034f6:	454d      	cmp	r5, r9
 80034f8:	d11b      	bne.n	8003532 <_printf_common+0xda>
 80034fa:	2000      	movs	r0, #0
 80034fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003500:	2301      	movs	r3, #1
 8003502:	4652      	mov	r2, sl
 8003504:	4639      	mov	r1, r7
 8003506:	4630      	mov	r0, r6
 8003508:	47c0      	blx	r8
 800350a:	3001      	adds	r0, #1
 800350c:	d103      	bne.n	8003516 <_printf_common+0xbe>
 800350e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003516:	3501      	adds	r5, #1
 8003518:	e7c1      	b.n	800349e <_printf_common+0x46>
 800351a:	2030      	movs	r0, #48	; 0x30
 800351c:	18e1      	adds	r1, r4, r3
 800351e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003522:	1c5a      	adds	r2, r3, #1
 8003524:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003528:	4422      	add	r2, r4
 800352a:	3302      	adds	r3, #2
 800352c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003530:	e7c3      	b.n	80034ba <_printf_common+0x62>
 8003532:	2301      	movs	r3, #1
 8003534:	4622      	mov	r2, r4
 8003536:	4639      	mov	r1, r7
 8003538:	4630      	mov	r0, r6
 800353a:	47c0      	blx	r8
 800353c:	3001      	adds	r0, #1
 800353e:	d0e6      	beq.n	800350e <_printf_common+0xb6>
 8003540:	f109 0901 	add.w	r9, r9, #1
 8003544:	e7d7      	b.n	80034f6 <_printf_common+0x9e>
	...

08003548 <_printf_i>:
 8003548:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800354c:	4617      	mov	r7, r2
 800354e:	7e0a      	ldrb	r2, [r1, #24]
 8003550:	b085      	sub	sp, #20
 8003552:	2a6e      	cmp	r2, #110	; 0x6e
 8003554:	4698      	mov	r8, r3
 8003556:	4606      	mov	r6, r0
 8003558:	460c      	mov	r4, r1
 800355a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800355c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8003560:	f000 80bc 	beq.w	80036dc <_printf_i+0x194>
 8003564:	d81a      	bhi.n	800359c <_printf_i+0x54>
 8003566:	2a63      	cmp	r2, #99	; 0x63
 8003568:	d02e      	beq.n	80035c8 <_printf_i+0x80>
 800356a:	d80a      	bhi.n	8003582 <_printf_i+0x3a>
 800356c:	2a00      	cmp	r2, #0
 800356e:	f000 80c8 	beq.w	8003702 <_printf_i+0x1ba>
 8003572:	2a58      	cmp	r2, #88	; 0x58
 8003574:	f000 808a 	beq.w	800368c <_printf_i+0x144>
 8003578:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800357c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8003580:	e02a      	b.n	80035d8 <_printf_i+0x90>
 8003582:	2a64      	cmp	r2, #100	; 0x64
 8003584:	d001      	beq.n	800358a <_printf_i+0x42>
 8003586:	2a69      	cmp	r2, #105	; 0x69
 8003588:	d1f6      	bne.n	8003578 <_printf_i+0x30>
 800358a:	6821      	ldr	r1, [r4, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003592:	d023      	beq.n	80035dc <_printf_i+0x94>
 8003594:	1d11      	adds	r1, r2, #4
 8003596:	6019      	str	r1, [r3, #0]
 8003598:	6813      	ldr	r3, [r2, #0]
 800359a:	e027      	b.n	80035ec <_printf_i+0xa4>
 800359c:	2a73      	cmp	r2, #115	; 0x73
 800359e:	f000 80b4 	beq.w	800370a <_printf_i+0x1c2>
 80035a2:	d808      	bhi.n	80035b6 <_printf_i+0x6e>
 80035a4:	2a6f      	cmp	r2, #111	; 0x6f
 80035a6:	d02a      	beq.n	80035fe <_printf_i+0xb6>
 80035a8:	2a70      	cmp	r2, #112	; 0x70
 80035aa:	d1e5      	bne.n	8003578 <_printf_i+0x30>
 80035ac:	680a      	ldr	r2, [r1, #0]
 80035ae:	f042 0220 	orr.w	r2, r2, #32
 80035b2:	600a      	str	r2, [r1, #0]
 80035b4:	e003      	b.n	80035be <_printf_i+0x76>
 80035b6:	2a75      	cmp	r2, #117	; 0x75
 80035b8:	d021      	beq.n	80035fe <_printf_i+0xb6>
 80035ba:	2a78      	cmp	r2, #120	; 0x78
 80035bc:	d1dc      	bne.n	8003578 <_printf_i+0x30>
 80035be:	2278      	movs	r2, #120	; 0x78
 80035c0:	496f      	ldr	r1, [pc, #444]	; (8003780 <_printf_i+0x238>)
 80035c2:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80035c6:	e064      	b.n	8003692 <_printf_i+0x14a>
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80035ce:	1d11      	adds	r1, r2, #4
 80035d0:	6019      	str	r1, [r3, #0]
 80035d2:	6813      	ldr	r3, [r2, #0]
 80035d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80035d8:	2301      	movs	r3, #1
 80035da:	e0a3      	b.n	8003724 <_printf_i+0x1dc>
 80035dc:	f011 0f40 	tst.w	r1, #64	; 0x40
 80035e0:	f102 0104 	add.w	r1, r2, #4
 80035e4:	6019      	str	r1, [r3, #0]
 80035e6:	d0d7      	beq.n	8003598 <_printf_i+0x50>
 80035e8:	f9b2 3000 	ldrsh.w	r3, [r2]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	da03      	bge.n	80035f8 <_printf_i+0xb0>
 80035f0:	222d      	movs	r2, #45	; 0x2d
 80035f2:	425b      	negs	r3, r3
 80035f4:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80035f8:	4962      	ldr	r1, [pc, #392]	; (8003784 <_printf_i+0x23c>)
 80035fa:	220a      	movs	r2, #10
 80035fc:	e017      	b.n	800362e <_printf_i+0xe6>
 80035fe:	6820      	ldr	r0, [r4, #0]
 8003600:	6819      	ldr	r1, [r3, #0]
 8003602:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003606:	d003      	beq.n	8003610 <_printf_i+0xc8>
 8003608:	1d08      	adds	r0, r1, #4
 800360a:	6018      	str	r0, [r3, #0]
 800360c:	680b      	ldr	r3, [r1, #0]
 800360e:	e006      	b.n	800361e <_printf_i+0xd6>
 8003610:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003614:	f101 0004 	add.w	r0, r1, #4
 8003618:	6018      	str	r0, [r3, #0]
 800361a:	d0f7      	beq.n	800360c <_printf_i+0xc4>
 800361c:	880b      	ldrh	r3, [r1, #0]
 800361e:	2a6f      	cmp	r2, #111	; 0x6f
 8003620:	bf14      	ite	ne
 8003622:	220a      	movne	r2, #10
 8003624:	2208      	moveq	r2, #8
 8003626:	4957      	ldr	r1, [pc, #348]	; (8003784 <_printf_i+0x23c>)
 8003628:	2000      	movs	r0, #0
 800362a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800362e:	6865      	ldr	r5, [r4, #4]
 8003630:	2d00      	cmp	r5, #0
 8003632:	60a5      	str	r5, [r4, #8]
 8003634:	f2c0 809c 	blt.w	8003770 <_printf_i+0x228>
 8003638:	6820      	ldr	r0, [r4, #0]
 800363a:	f020 0004 	bic.w	r0, r0, #4
 800363e:	6020      	str	r0, [r4, #0]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d13f      	bne.n	80036c4 <_printf_i+0x17c>
 8003644:	2d00      	cmp	r5, #0
 8003646:	f040 8095 	bne.w	8003774 <_printf_i+0x22c>
 800364a:	4675      	mov	r5, lr
 800364c:	2a08      	cmp	r2, #8
 800364e:	d10b      	bne.n	8003668 <_printf_i+0x120>
 8003650:	6823      	ldr	r3, [r4, #0]
 8003652:	07da      	lsls	r2, r3, #31
 8003654:	d508      	bpl.n	8003668 <_printf_i+0x120>
 8003656:	6923      	ldr	r3, [r4, #16]
 8003658:	6862      	ldr	r2, [r4, #4]
 800365a:	429a      	cmp	r2, r3
 800365c:	bfde      	ittt	le
 800365e:	2330      	movle	r3, #48	; 0x30
 8003660:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003664:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003668:	ebae 0305 	sub.w	r3, lr, r5
 800366c:	6123      	str	r3, [r4, #16]
 800366e:	f8cd 8000 	str.w	r8, [sp]
 8003672:	463b      	mov	r3, r7
 8003674:	aa03      	add	r2, sp, #12
 8003676:	4621      	mov	r1, r4
 8003678:	4630      	mov	r0, r6
 800367a:	f7ff feed 	bl	8003458 <_printf_common>
 800367e:	3001      	adds	r0, #1
 8003680:	d155      	bne.n	800372e <_printf_i+0x1e6>
 8003682:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003686:	b005      	add	sp, #20
 8003688:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800368c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8003690:	493c      	ldr	r1, [pc, #240]	; (8003784 <_printf_i+0x23c>)
 8003692:	6822      	ldr	r2, [r4, #0]
 8003694:	6818      	ldr	r0, [r3, #0]
 8003696:	f012 0f80 	tst.w	r2, #128	; 0x80
 800369a:	f100 0504 	add.w	r5, r0, #4
 800369e:	601d      	str	r5, [r3, #0]
 80036a0:	d001      	beq.n	80036a6 <_printf_i+0x15e>
 80036a2:	6803      	ldr	r3, [r0, #0]
 80036a4:	e002      	b.n	80036ac <_printf_i+0x164>
 80036a6:	0655      	lsls	r5, r2, #25
 80036a8:	d5fb      	bpl.n	80036a2 <_printf_i+0x15a>
 80036aa:	8803      	ldrh	r3, [r0, #0]
 80036ac:	07d0      	lsls	r0, r2, #31
 80036ae:	bf44      	itt	mi
 80036b0:	f042 0220 	orrmi.w	r2, r2, #32
 80036b4:	6022      	strmi	r2, [r4, #0]
 80036b6:	b91b      	cbnz	r3, 80036c0 <_printf_i+0x178>
 80036b8:	6822      	ldr	r2, [r4, #0]
 80036ba:	f022 0220 	bic.w	r2, r2, #32
 80036be:	6022      	str	r2, [r4, #0]
 80036c0:	2210      	movs	r2, #16
 80036c2:	e7b1      	b.n	8003628 <_printf_i+0xe0>
 80036c4:	4675      	mov	r5, lr
 80036c6:	fbb3 f0f2 	udiv	r0, r3, r2
 80036ca:	fb02 3310 	mls	r3, r2, r0, r3
 80036ce:	5ccb      	ldrb	r3, [r1, r3]
 80036d0:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80036d4:	4603      	mov	r3, r0
 80036d6:	2800      	cmp	r0, #0
 80036d8:	d1f5      	bne.n	80036c6 <_printf_i+0x17e>
 80036da:	e7b7      	b.n	800364c <_printf_i+0x104>
 80036dc:	6808      	ldr	r0, [r1, #0]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	f010 0f80 	tst.w	r0, #128	; 0x80
 80036e4:	6949      	ldr	r1, [r1, #20]
 80036e6:	d004      	beq.n	80036f2 <_printf_i+0x1aa>
 80036e8:	1d10      	adds	r0, r2, #4
 80036ea:	6018      	str	r0, [r3, #0]
 80036ec:	6813      	ldr	r3, [r2, #0]
 80036ee:	6019      	str	r1, [r3, #0]
 80036f0:	e007      	b.n	8003702 <_printf_i+0x1ba>
 80036f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80036f6:	f102 0004 	add.w	r0, r2, #4
 80036fa:	6018      	str	r0, [r3, #0]
 80036fc:	6813      	ldr	r3, [r2, #0]
 80036fe:	d0f6      	beq.n	80036ee <_printf_i+0x1a6>
 8003700:	8019      	strh	r1, [r3, #0]
 8003702:	2300      	movs	r3, #0
 8003704:	4675      	mov	r5, lr
 8003706:	6123      	str	r3, [r4, #16]
 8003708:	e7b1      	b.n	800366e <_printf_i+0x126>
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	1d11      	adds	r1, r2, #4
 800370e:	6019      	str	r1, [r3, #0]
 8003710:	6815      	ldr	r5, [r2, #0]
 8003712:	2100      	movs	r1, #0
 8003714:	6862      	ldr	r2, [r4, #4]
 8003716:	4628      	mov	r0, r5
 8003718:	f000 f836 	bl	8003788 <memchr>
 800371c:	b108      	cbz	r0, 8003722 <_printf_i+0x1da>
 800371e:	1b40      	subs	r0, r0, r5
 8003720:	6060      	str	r0, [r4, #4]
 8003722:	6863      	ldr	r3, [r4, #4]
 8003724:	6123      	str	r3, [r4, #16]
 8003726:	2300      	movs	r3, #0
 8003728:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800372c:	e79f      	b.n	800366e <_printf_i+0x126>
 800372e:	6923      	ldr	r3, [r4, #16]
 8003730:	462a      	mov	r2, r5
 8003732:	4639      	mov	r1, r7
 8003734:	4630      	mov	r0, r6
 8003736:	47c0      	blx	r8
 8003738:	3001      	adds	r0, #1
 800373a:	d0a2      	beq.n	8003682 <_printf_i+0x13a>
 800373c:	6823      	ldr	r3, [r4, #0]
 800373e:	079b      	lsls	r3, r3, #30
 8003740:	d507      	bpl.n	8003752 <_printf_i+0x20a>
 8003742:	2500      	movs	r5, #0
 8003744:	f104 0919 	add.w	r9, r4, #25
 8003748:	68e3      	ldr	r3, [r4, #12]
 800374a:	9a03      	ldr	r2, [sp, #12]
 800374c:	1a9b      	subs	r3, r3, r2
 800374e:	429d      	cmp	r5, r3
 8003750:	db05      	blt.n	800375e <_printf_i+0x216>
 8003752:	68e0      	ldr	r0, [r4, #12]
 8003754:	9b03      	ldr	r3, [sp, #12]
 8003756:	4298      	cmp	r0, r3
 8003758:	bfb8      	it	lt
 800375a:	4618      	movlt	r0, r3
 800375c:	e793      	b.n	8003686 <_printf_i+0x13e>
 800375e:	2301      	movs	r3, #1
 8003760:	464a      	mov	r2, r9
 8003762:	4639      	mov	r1, r7
 8003764:	4630      	mov	r0, r6
 8003766:	47c0      	blx	r8
 8003768:	3001      	adds	r0, #1
 800376a:	d08a      	beq.n	8003682 <_printf_i+0x13a>
 800376c:	3501      	adds	r5, #1
 800376e:	e7eb      	b.n	8003748 <_printf_i+0x200>
 8003770:	2b00      	cmp	r3, #0
 8003772:	d1a7      	bne.n	80036c4 <_printf_i+0x17c>
 8003774:	780b      	ldrb	r3, [r1, #0]
 8003776:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800377a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800377e:	e765      	b.n	800364c <_printf_i+0x104>
 8003780:	08003a9f 	.word	0x08003a9f
 8003784:	08003a8e 	.word	0x08003a8e

08003788 <memchr>:
 8003788:	b510      	push	{r4, lr}
 800378a:	b2c9      	uxtb	r1, r1
 800378c:	4402      	add	r2, r0
 800378e:	4290      	cmp	r0, r2
 8003790:	4603      	mov	r3, r0
 8003792:	d101      	bne.n	8003798 <memchr+0x10>
 8003794:	2000      	movs	r0, #0
 8003796:	bd10      	pop	{r4, pc}
 8003798:	781c      	ldrb	r4, [r3, #0]
 800379a:	3001      	adds	r0, #1
 800379c:	428c      	cmp	r4, r1
 800379e:	d1f6      	bne.n	800378e <memchr+0x6>
 80037a0:	4618      	mov	r0, r3
 80037a2:	bd10      	pop	{r4, pc}

080037a4 <memcpy>:
 80037a4:	b510      	push	{r4, lr}
 80037a6:	1e43      	subs	r3, r0, #1
 80037a8:	440a      	add	r2, r1
 80037aa:	4291      	cmp	r1, r2
 80037ac:	d100      	bne.n	80037b0 <memcpy+0xc>
 80037ae:	bd10      	pop	{r4, pc}
 80037b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80037b8:	e7f7      	b.n	80037aa <memcpy+0x6>

080037ba <memmove>:
 80037ba:	4288      	cmp	r0, r1
 80037bc:	b510      	push	{r4, lr}
 80037be:	eb01 0302 	add.w	r3, r1, r2
 80037c2:	d803      	bhi.n	80037cc <memmove+0x12>
 80037c4:	1e42      	subs	r2, r0, #1
 80037c6:	4299      	cmp	r1, r3
 80037c8:	d10c      	bne.n	80037e4 <memmove+0x2a>
 80037ca:	bd10      	pop	{r4, pc}
 80037cc:	4298      	cmp	r0, r3
 80037ce:	d2f9      	bcs.n	80037c4 <memmove+0xa>
 80037d0:	1881      	adds	r1, r0, r2
 80037d2:	1ad2      	subs	r2, r2, r3
 80037d4:	42d3      	cmn	r3, r2
 80037d6:	d100      	bne.n	80037da <memmove+0x20>
 80037d8:	bd10      	pop	{r4, pc}
 80037da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80037de:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80037e2:	e7f7      	b.n	80037d4 <memmove+0x1a>
 80037e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037e8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80037ec:	e7eb      	b.n	80037c6 <memmove+0xc>
	...

080037f0 <_free_r>:
 80037f0:	b538      	push	{r3, r4, r5, lr}
 80037f2:	4605      	mov	r5, r0
 80037f4:	2900      	cmp	r1, #0
 80037f6:	d043      	beq.n	8003880 <_free_r+0x90>
 80037f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037fc:	1f0c      	subs	r4, r1, #4
 80037fe:	2b00      	cmp	r3, #0
 8003800:	bfb8      	it	lt
 8003802:	18e4      	addlt	r4, r4, r3
 8003804:	f000 f8d4 	bl	80039b0 <__malloc_lock>
 8003808:	4a1e      	ldr	r2, [pc, #120]	; (8003884 <_free_r+0x94>)
 800380a:	6813      	ldr	r3, [r2, #0]
 800380c:	4610      	mov	r0, r2
 800380e:	b933      	cbnz	r3, 800381e <_free_r+0x2e>
 8003810:	6063      	str	r3, [r4, #4]
 8003812:	6014      	str	r4, [r2, #0]
 8003814:	4628      	mov	r0, r5
 8003816:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800381a:	f000 b8ca 	b.w	80039b2 <__malloc_unlock>
 800381e:	42a3      	cmp	r3, r4
 8003820:	d90b      	bls.n	800383a <_free_r+0x4a>
 8003822:	6821      	ldr	r1, [r4, #0]
 8003824:	1862      	adds	r2, r4, r1
 8003826:	4293      	cmp	r3, r2
 8003828:	bf01      	itttt	eq
 800382a:	681a      	ldreq	r2, [r3, #0]
 800382c:	685b      	ldreq	r3, [r3, #4]
 800382e:	1852      	addeq	r2, r2, r1
 8003830:	6022      	streq	r2, [r4, #0]
 8003832:	6063      	str	r3, [r4, #4]
 8003834:	6004      	str	r4, [r0, #0]
 8003836:	e7ed      	b.n	8003814 <_free_r+0x24>
 8003838:	4613      	mov	r3, r2
 800383a:	685a      	ldr	r2, [r3, #4]
 800383c:	b10a      	cbz	r2, 8003842 <_free_r+0x52>
 800383e:	42a2      	cmp	r2, r4
 8003840:	d9fa      	bls.n	8003838 <_free_r+0x48>
 8003842:	6819      	ldr	r1, [r3, #0]
 8003844:	1858      	adds	r0, r3, r1
 8003846:	42a0      	cmp	r0, r4
 8003848:	d10b      	bne.n	8003862 <_free_r+0x72>
 800384a:	6820      	ldr	r0, [r4, #0]
 800384c:	4401      	add	r1, r0
 800384e:	1858      	adds	r0, r3, r1
 8003850:	4282      	cmp	r2, r0
 8003852:	6019      	str	r1, [r3, #0]
 8003854:	d1de      	bne.n	8003814 <_free_r+0x24>
 8003856:	6810      	ldr	r0, [r2, #0]
 8003858:	6852      	ldr	r2, [r2, #4]
 800385a:	4401      	add	r1, r0
 800385c:	6019      	str	r1, [r3, #0]
 800385e:	605a      	str	r2, [r3, #4]
 8003860:	e7d8      	b.n	8003814 <_free_r+0x24>
 8003862:	d902      	bls.n	800386a <_free_r+0x7a>
 8003864:	230c      	movs	r3, #12
 8003866:	602b      	str	r3, [r5, #0]
 8003868:	e7d4      	b.n	8003814 <_free_r+0x24>
 800386a:	6820      	ldr	r0, [r4, #0]
 800386c:	1821      	adds	r1, r4, r0
 800386e:	428a      	cmp	r2, r1
 8003870:	bf01      	itttt	eq
 8003872:	6811      	ldreq	r1, [r2, #0]
 8003874:	6852      	ldreq	r2, [r2, #4]
 8003876:	1809      	addeq	r1, r1, r0
 8003878:	6021      	streq	r1, [r4, #0]
 800387a:	6062      	str	r2, [r4, #4]
 800387c:	605c      	str	r4, [r3, #4]
 800387e:	e7c9      	b.n	8003814 <_free_r+0x24>
 8003880:	bd38      	pop	{r3, r4, r5, pc}
 8003882:	bf00      	nop
 8003884:	20000424 	.word	0x20000424

08003888 <_malloc_r>:
 8003888:	b570      	push	{r4, r5, r6, lr}
 800388a:	1ccd      	adds	r5, r1, #3
 800388c:	f025 0503 	bic.w	r5, r5, #3
 8003890:	3508      	adds	r5, #8
 8003892:	2d0c      	cmp	r5, #12
 8003894:	bf38      	it	cc
 8003896:	250c      	movcc	r5, #12
 8003898:	2d00      	cmp	r5, #0
 800389a:	4606      	mov	r6, r0
 800389c:	db01      	blt.n	80038a2 <_malloc_r+0x1a>
 800389e:	42a9      	cmp	r1, r5
 80038a0:	d903      	bls.n	80038aa <_malloc_r+0x22>
 80038a2:	230c      	movs	r3, #12
 80038a4:	6033      	str	r3, [r6, #0]
 80038a6:	2000      	movs	r0, #0
 80038a8:	bd70      	pop	{r4, r5, r6, pc}
 80038aa:	f000 f881 	bl	80039b0 <__malloc_lock>
 80038ae:	4a23      	ldr	r2, [pc, #140]	; (800393c <_malloc_r+0xb4>)
 80038b0:	6814      	ldr	r4, [r2, #0]
 80038b2:	4621      	mov	r1, r4
 80038b4:	b991      	cbnz	r1, 80038dc <_malloc_r+0x54>
 80038b6:	4c22      	ldr	r4, [pc, #136]	; (8003940 <_malloc_r+0xb8>)
 80038b8:	6823      	ldr	r3, [r4, #0]
 80038ba:	b91b      	cbnz	r3, 80038c4 <_malloc_r+0x3c>
 80038bc:	4630      	mov	r0, r6
 80038be:	f000 f867 	bl	8003990 <_sbrk_r>
 80038c2:	6020      	str	r0, [r4, #0]
 80038c4:	4629      	mov	r1, r5
 80038c6:	4630      	mov	r0, r6
 80038c8:	f000 f862 	bl	8003990 <_sbrk_r>
 80038cc:	1c43      	adds	r3, r0, #1
 80038ce:	d126      	bne.n	800391e <_malloc_r+0x96>
 80038d0:	230c      	movs	r3, #12
 80038d2:	4630      	mov	r0, r6
 80038d4:	6033      	str	r3, [r6, #0]
 80038d6:	f000 f86c 	bl	80039b2 <__malloc_unlock>
 80038da:	e7e4      	b.n	80038a6 <_malloc_r+0x1e>
 80038dc:	680b      	ldr	r3, [r1, #0]
 80038de:	1b5b      	subs	r3, r3, r5
 80038e0:	d41a      	bmi.n	8003918 <_malloc_r+0x90>
 80038e2:	2b0b      	cmp	r3, #11
 80038e4:	d90f      	bls.n	8003906 <_malloc_r+0x7e>
 80038e6:	600b      	str	r3, [r1, #0]
 80038e8:	18cc      	adds	r4, r1, r3
 80038ea:	50cd      	str	r5, [r1, r3]
 80038ec:	4630      	mov	r0, r6
 80038ee:	f000 f860 	bl	80039b2 <__malloc_unlock>
 80038f2:	f104 000b 	add.w	r0, r4, #11
 80038f6:	1d23      	adds	r3, r4, #4
 80038f8:	f020 0007 	bic.w	r0, r0, #7
 80038fc:	1ac3      	subs	r3, r0, r3
 80038fe:	d01b      	beq.n	8003938 <_malloc_r+0xb0>
 8003900:	425a      	negs	r2, r3
 8003902:	50e2      	str	r2, [r4, r3]
 8003904:	bd70      	pop	{r4, r5, r6, pc}
 8003906:	428c      	cmp	r4, r1
 8003908:	bf0b      	itete	eq
 800390a:	6863      	ldreq	r3, [r4, #4]
 800390c:	684b      	ldrne	r3, [r1, #4]
 800390e:	6013      	streq	r3, [r2, #0]
 8003910:	6063      	strne	r3, [r4, #4]
 8003912:	bf18      	it	ne
 8003914:	460c      	movne	r4, r1
 8003916:	e7e9      	b.n	80038ec <_malloc_r+0x64>
 8003918:	460c      	mov	r4, r1
 800391a:	6849      	ldr	r1, [r1, #4]
 800391c:	e7ca      	b.n	80038b4 <_malloc_r+0x2c>
 800391e:	1cc4      	adds	r4, r0, #3
 8003920:	f024 0403 	bic.w	r4, r4, #3
 8003924:	42a0      	cmp	r0, r4
 8003926:	d005      	beq.n	8003934 <_malloc_r+0xac>
 8003928:	1a21      	subs	r1, r4, r0
 800392a:	4630      	mov	r0, r6
 800392c:	f000 f830 	bl	8003990 <_sbrk_r>
 8003930:	3001      	adds	r0, #1
 8003932:	d0cd      	beq.n	80038d0 <_malloc_r+0x48>
 8003934:	6025      	str	r5, [r4, #0]
 8003936:	e7d9      	b.n	80038ec <_malloc_r+0x64>
 8003938:	bd70      	pop	{r4, r5, r6, pc}
 800393a:	bf00      	nop
 800393c:	20000424 	.word	0x20000424
 8003940:	20000428 	.word	0x20000428

08003944 <_realloc_r>:
 8003944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003946:	4607      	mov	r7, r0
 8003948:	4614      	mov	r4, r2
 800394a:	460e      	mov	r6, r1
 800394c:	b921      	cbnz	r1, 8003958 <_realloc_r+0x14>
 800394e:	4611      	mov	r1, r2
 8003950:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003954:	f7ff bf98 	b.w	8003888 <_malloc_r>
 8003958:	b922      	cbnz	r2, 8003964 <_realloc_r+0x20>
 800395a:	f7ff ff49 	bl	80037f0 <_free_r>
 800395e:	4625      	mov	r5, r4
 8003960:	4628      	mov	r0, r5
 8003962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003964:	f000 f826 	bl	80039b4 <_malloc_usable_size_r>
 8003968:	4284      	cmp	r4, r0
 800396a:	d90f      	bls.n	800398c <_realloc_r+0x48>
 800396c:	4621      	mov	r1, r4
 800396e:	4638      	mov	r0, r7
 8003970:	f7ff ff8a 	bl	8003888 <_malloc_r>
 8003974:	4605      	mov	r5, r0
 8003976:	2800      	cmp	r0, #0
 8003978:	d0f2      	beq.n	8003960 <_realloc_r+0x1c>
 800397a:	4631      	mov	r1, r6
 800397c:	4622      	mov	r2, r4
 800397e:	f7ff ff11 	bl	80037a4 <memcpy>
 8003982:	4631      	mov	r1, r6
 8003984:	4638      	mov	r0, r7
 8003986:	f7ff ff33 	bl	80037f0 <_free_r>
 800398a:	e7e9      	b.n	8003960 <_realloc_r+0x1c>
 800398c:	4635      	mov	r5, r6
 800398e:	e7e7      	b.n	8003960 <_realloc_r+0x1c>

08003990 <_sbrk_r>:
 8003990:	b538      	push	{r3, r4, r5, lr}
 8003992:	2300      	movs	r3, #0
 8003994:	4c05      	ldr	r4, [pc, #20]	; (80039ac <_sbrk_r+0x1c>)
 8003996:	4605      	mov	r5, r0
 8003998:	4608      	mov	r0, r1
 800399a:	6023      	str	r3, [r4, #0]
 800399c:	f7ff f938 	bl	8002c10 <_sbrk>
 80039a0:	1c43      	adds	r3, r0, #1
 80039a2:	d102      	bne.n	80039aa <_sbrk_r+0x1a>
 80039a4:	6823      	ldr	r3, [r4, #0]
 80039a6:	b103      	cbz	r3, 80039aa <_sbrk_r+0x1a>
 80039a8:	602b      	str	r3, [r5, #0]
 80039aa:	bd38      	pop	{r3, r4, r5, pc}
 80039ac:	20001498 	.word	0x20001498

080039b0 <__malloc_lock>:
 80039b0:	4770      	bx	lr

080039b2 <__malloc_unlock>:
 80039b2:	4770      	bx	lr

080039b4 <_malloc_usable_size_r>:
 80039b4:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80039b8:	2800      	cmp	r0, #0
 80039ba:	f1a0 0004 	sub.w	r0, r0, #4
 80039be:	bfbc      	itt	lt
 80039c0:	580b      	ldrlt	r3, [r1, r0]
 80039c2:	18c0      	addlt	r0, r0, r3
 80039c4:	4770      	bx	lr
	...

080039c8 <_init>:
 80039c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ca:	bf00      	nop
 80039cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039ce:	bc08      	pop	{r3}
 80039d0:	469e      	mov	lr, r3
 80039d2:	4770      	bx	lr

080039d4 <_fini>:
 80039d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039d6:	bf00      	nop
 80039d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039da:	bc08      	pop	{r3}
 80039dc:	469e      	mov	lr, r3
 80039de:	4770      	bx	lr
