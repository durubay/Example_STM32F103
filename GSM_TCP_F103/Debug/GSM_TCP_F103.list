
GSM_TCP_F103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027dc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d8  080028e8  080028e8  000128e8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002cc0  08002cc0  00012cc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002cc4  08002cc4  00012cc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000000  08002cc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000053c  20000070  08002d38  00020070  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200005ac  08002d38  000205ac  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000f56c  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000022e2  00000000  00000000  0002f605  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006712  00000000  00000000  000318e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000009b8  00000000  00000000  00038000  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000dd0  00000000  00000000  000389b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00004e27  00000000  00000000  00039788  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000038b3  00000000  00000000  0003e5af  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00041e62  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001fec  00000000  00000000  00041ee0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080028d0 	.word	0x080028d0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080028d0 	.word	0x080028d0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800015c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800015e:	4b0e      	ldr	r3, [pc, #56]	; (8000198 <HAL_InitTick+0x3c>)
{
 8000160:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000162:	7818      	ldrb	r0, [r3, #0]
 8000164:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000168:	fbb3 f3f0 	udiv	r3, r3, r0
 800016c:	4a0b      	ldr	r2, [pc, #44]	; (800019c <HAL_InitTick+0x40>)
 800016e:	6810      	ldr	r0, [r2, #0]
 8000170:	fbb0 f0f3 	udiv	r0, r0, r3
 8000174:	f000 f8a0 	bl	80002b8 <HAL_SYSTICK_Config>
 8000178:	4604      	mov	r4, r0
 800017a:	b958      	cbnz	r0, 8000194 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800017c:	2d0f      	cmp	r5, #15
 800017e:	d809      	bhi.n	8000194 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000180:	4602      	mov	r2, r0
 8000182:	4629      	mov	r1, r5
 8000184:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000188:	f000 f854 	bl	8000234 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <HAL_InitTick+0x44>)
 800018e:	4620      	mov	r0, r4
 8000190:	601d      	str	r5, [r3, #0]
 8000192:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000194:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000196:	bd38      	pop	{r3, r4, r5, pc}
 8000198:	20000000 	.word	0x20000000
 800019c:	20000008 	.word	0x20000008
 80001a0:	20000004 	.word	0x20000004

080001a4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001a4:	4a07      	ldr	r2, [pc, #28]	; (80001c4 <HAL_Init+0x20>)
{
 80001a6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001a8:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001aa:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001ac:	f043 0310 	orr.w	r3, r3, #16
 80001b0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001b2:	f000 f82d 	bl	8000210 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001b6:	2000      	movs	r0, #0
 80001b8:	f7ff ffd0 	bl	800015c <HAL_InitTick>
  HAL_MspInit();
 80001bc:	f001 fd16 	bl	8001bec <HAL_MspInit>
}
 80001c0:	2000      	movs	r0, #0
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	40022000 	.word	0x40022000

080001c8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001c8:	4a03      	ldr	r2, [pc, #12]	; (80001d8 <HAL_IncTick+0x10>)
 80001ca:	4b04      	ldr	r3, [pc, #16]	; (80001dc <HAL_IncTick+0x14>)
 80001cc:	6811      	ldr	r1, [r2, #0]
 80001ce:	781b      	ldrb	r3, [r3, #0]
 80001d0:	440b      	add	r3, r1
 80001d2:	6013      	str	r3, [r2, #0]
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	200004e4 	.word	0x200004e4
 80001dc:	20000000 	.word	0x20000000

080001e0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001e0:	4b01      	ldr	r3, [pc, #4]	; (80001e8 <HAL_GetTick+0x8>)
 80001e2:	6818      	ldr	r0, [r3, #0]
}
 80001e4:	4770      	bx	lr
 80001e6:	bf00      	nop
 80001e8:	200004e4 	.word	0x200004e4

080001ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80001ec:	b538      	push	{r3, r4, r5, lr}
 80001ee:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80001f0:	f7ff fff6 	bl	80001e0 <HAL_GetTick>
 80001f4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001f6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80001f8:	bf1e      	ittt	ne
 80001fa:	4b04      	ldrne	r3, [pc, #16]	; (800020c <HAL_Delay+0x20>)
 80001fc:	781b      	ldrbne	r3, [r3, #0]
 80001fe:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000200:	f7ff ffee 	bl	80001e0 <HAL_GetTick>
 8000204:	1b40      	subs	r0, r0, r5
 8000206:	4284      	cmp	r4, r0
 8000208:	d8fa      	bhi.n	8000200 <HAL_Delay+0x14>
  {
  }
}
 800020a:	bd38      	pop	{r3, r4, r5, pc}
 800020c:	20000000 	.word	0x20000000

08000210 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000210:	4a07      	ldr	r2, [pc, #28]	; (8000230 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000212:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000214:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000216:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800021a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800021e:	041b      	lsls	r3, r3, #16
 8000220:	0c1b      	lsrs	r3, r3, #16
 8000222:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000226:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800022a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800022c:	60d3      	str	r3, [r2, #12]
 800022e:	4770      	bx	lr
 8000230:	e000ed00 	.word	0xe000ed00

08000234 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000234:	4b17      	ldr	r3, [pc, #92]	; (8000294 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000236:	b530      	push	{r4, r5, lr}
 8000238:	68dc      	ldr	r4, [r3, #12]
 800023a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800023e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000242:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000244:	2b04      	cmp	r3, #4
 8000246:	bf28      	it	cs
 8000248:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800024a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800024c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000250:	bf98      	it	ls
 8000252:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000254:	fa05 f303 	lsl.w	r3, r5, r3
 8000258:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800025c:	bf88      	it	hi
 800025e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000260:	4019      	ands	r1, r3
 8000262:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000264:	fa05 f404 	lsl.w	r4, r5, r4
 8000268:	3c01      	subs	r4, #1
 800026a:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 800026c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800026e:	ea42 0201 	orr.w	r2, r2, r1
 8000272:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000276:	bfa9      	itett	ge
 8000278:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027c:	4b06      	ldrlt	r3, [pc, #24]	; (8000298 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027e:	b2d2      	uxtbge	r2, r2
 8000280:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000284:	bfbb      	ittet	lt
 8000286:	f000 000f 	andlt.w	r0, r0, #15
 800028a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800028c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000290:	541a      	strblt	r2, [r3, r0]
 8000292:	bd30      	pop	{r4, r5, pc}
 8000294:	e000ed00 	.word	0xe000ed00
 8000298:	e000ed14 	.word	0xe000ed14

0800029c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800029c:	2800      	cmp	r0, #0
 800029e:	db08      	blt.n	80002b2 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002a0:	2301      	movs	r3, #1
 80002a2:	0942      	lsrs	r2, r0, #5
 80002a4:	f000 001f 	and.w	r0, r0, #31
 80002a8:	fa03 f000 	lsl.w	r0, r3, r0
 80002ac:	4b01      	ldr	r3, [pc, #4]	; (80002b4 <HAL_NVIC_EnableIRQ+0x18>)
 80002ae:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80002b2:	4770      	bx	lr
 80002b4:	e000e100 	.word	0xe000e100

080002b8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002b8:	3801      	subs	r0, #1
 80002ba:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002be:	d20a      	bcs.n	80002d6 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c0:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002c2:	4b06      	ldr	r3, [pc, #24]	; (80002dc <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c4:	4a06      	ldr	r2, [pc, #24]	; (80002e0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002c6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002cc:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002ce:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002d0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002d2:	601a      	str	r2, [r3, #0]
 80002d4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002d6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002d8:	4770      	bx	lr
 80002da:	bf00      	nop
 80002dc:	e000e010 	.word	0xe000e010
 80002e0:	e000ed00 	.word	0xe000ed00

080002e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80002e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80002e8:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 80002ea:	4626      	mov	r6, r4
 80002ec:	4b66      	ldr	r3, [pc, #408]	; (8000488 <HAL_GPIO_Init+0x1a4>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80002ee:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 8000498 <HAL_GPIO_Init+0x1b4>
 80002f2:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 800049c <HAL_GPIO_Init+0x1b8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80002f6:	680a      	ldr	r2, [r1, #0]
 80002f8:	fa32 f506 	lsrs.w	r5, r2, r6
 80002fc:	d102      	bne.n	8000304 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 80002fe:	b003      	add	sp, #12
 8000300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8000304:	f04f 0801 	mov.w	r8, #1
 8000308:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800030c:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 8000310:	4590      	cmp	r8, r2
 8000312:	d17f      	bne.n	8000414 <HAL_GPIO_Init+0x130>
      switch (GPIO_Init->Mode)
 8000314:	684d      	ldr	r5, [r1, #4]
 8000316:	2d12      	cmp	r5, #18
 8000318:	f000 80aa 	beq.w	8000470 <HAL_GPIO_Init+0x18c>
 800031c:	f200 8083 	bhi.w	8000426 <HAL_GPIO_Init+0x142>
 8000320:	2d02      	cmp	r5, #2
 8000322:	f000 80a2 	beq.w	800046a <HAL_GPIO_Init+0x186>
 8000326:	d877      	bhi.n	8000418 <HAL_GPIO_Init+0x134>
 8000328:	2d00      	cmp	r5, #0
 800032a:	f000 8089 	beq.w	8000440 <HAL_GPIO_Init+0x15c>
 800032e:	2d01      	cmp	r5, #1
 8000330:	f000 8099 	beq.w	8000466 <HAL_GPIO_Init+0x182>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000334:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000338:	2aff      	cmp	r2, #255	; 0xff
 800033a:	bf93      	iteet	ls
 800033c:	4682      	movls	sl, r0
 800033e:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000342:	3d08      	subhi	r5, #8
 8000344:	f8d0 b000 	ldrls.w	fp, [r0]
 8000348:	bf92      	itee	ls
 800034a:	00b5      	lslls	r5, r6, #2
 800034c:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000350:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000352:	fa09 f805 	lsl.w	r8, r9, r5
 8000356:	ea2b 0808 	bic.w	r8, fp, r8
 800035a:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800035e:	bf88      	it	hi
 8000360:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000364:	ea48 0505 	orr.w	r5, r8, r5
 8000368:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800036c:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000370:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000374:	d04e      	beq.n	8000414 <HAL_GPIO_Init+0x130>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000376:	4d45      	ldr	r5, [pc, #276]	; (800048c <HAL_GPIO_Init+0x1a8>)
 8000378:	4f44      	ldr	r7, [pc, #272]	; (800048c <HAL_GPIO_Init+0x1a8>)
 800037a:	69ad      	ldr	r5, [r5, #24]
 800037c:	f026 0803 	bic.w	r8, r6, #3
 8000380:	f045 0501 	orr.w	r5, r5, #1
 8000384:	61bd      	str	r5, [r7, #24]
 8000386:	69bd      	ldr	r5, [r7, #24]
 8000388:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 800038c:	f005 0501 	and.w	r5, r5, #1
 8000390:	9501      	str	r5, [sp, #4]
 8000392:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000396:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800039a:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800039c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 80003a0:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80003a4:	fa09 f90b 	lsl.w	r9, r9, fp
 80003a8:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80003ac:	4d38      	ldr	r5, [pc, #224]	; (8000490 <HAL_GPIO_Init+0x1ac>)
 80003ae:	42a8      	cmp	r0, r5
 80003b0:	d063      	beq.n	800047a <HAL_GPIO_Init+0x196>
 80003b2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003b6:	42a8      	cmp	r0, r5
 80003b8:	d061      	beq.n	800047e <HAL_GPIO_Init+0x19a>
 80003ba:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003be:	42a8      	cmp	r0, r5
 80003c0:	d05f      	beq.n	8000482 <HAL_GPIO_Init+0x19e>
 80003c2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003c6:	42a8      	cmp	r0, r5
 80003c8:	bf0c      	ite	eq
 80003ca:	2503      	moveq	r5, #3
 80003cc:	2504      	movne	r5, #4
 80003ce:	fa05 f50b 	lsl.w	r5, r5, fp
 80003d2:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 80003d6:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 80003da:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80003dc:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80003e0:	bf14      	ite	ne
 80003e2:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80003e4:	4395      	biceq	r5, r2
 80003e6:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 80003e8:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80003ea:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80003ee:	bf14      	ite	ne
 80003f0:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80003f2:	4395      	biceq	r5, r2
 80003f4:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 80003f6:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80003f8:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80003fc:	bf14      	ite	ne
 80003fe:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000400:	4395      	biceq	r5, r2
 8000402:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8000404:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000406:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800040a:	bf14      	ite	ne
 800040c:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800040e:	ea25 0202 	biceq.w	r2, r5, r2
 8000412:	60da      	str	r2, [r3, #12]
	position++;
 8000414:	3601      	adds	r6, #1
 8000416:	e76e      	b.n	80002f6 <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 8000418:	2d03      	cmp	r5, #3
 800041a:	d022      	beq.n	8000462 <HAL_GPIO_Init+0x17e>
 800041c:	2d11      	cmp	r5, #17
 800041e:	d189      	bne.n	8000334 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000420:	68cc      	ldr	r4, [r1, #12]
 8000422:	3404      	adds	r4, #4
          break;
 8000424:	e786      	b.n	8000334 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8000426:	4f1b      	ldr	r7, [pc, #108]	; (8000494 <HAL_GPIO_Init+0x1b0>)
 8000428:	42bd      	cmp	r5, r7
 800042a:	d009      	beq.n	8000440 <HAL_GPIO_Init+0x15c>
 800042c:	d812      	bhi.n	8000454 <HAL_GPIO_Init+0x170>
 800042e:	f8df 9070 	ldr.w	r9, [pc, #112]	; 80004a0 <HAL_GPIO_Init+0x1bc>
 8000432:	454d      	cmp	r5, r9
 8000434:	d004      	beq.n	8000440 <HAL_GPIO_Init+0x15c>
 8000436:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 800043a:	454d      	cmp	r5, r9
 800043c:	f47f af7a 	bne.w	8000334 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000440:	688c      	ldr	r4, [r1, #8]
 8000442:	b1c4      	cbz	r4, 8000476 <HAL_GPIO_Init+0x192>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000444:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 8000446:	bf0c      	ite	eq
 8000448:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 800044c:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000450:	2408      	movs	r4, #8
 8000452:	e76f      	b.n	8000334 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8000454:	4575      	cmp	r5, lr
 8000456:	d0f3      	beq.n	8000440 <HAL_GPIO_Init+0x15c>
 8000458:	4565      	cmp	r5, ip
 800045a:	d0f1      	beq.n	8000440 <HAL_GPIO_Init+0x15c>
 800045c:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80004a4 <HAL_GPIO_Init+0x1c0>
 8000460:	e7eb      	b.n	800043a <HAL_GPIO_Init+0x156>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000462:	2400      	movs	r4, #0
 8000464:	e766      	b.n	8000334 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000466:	68cc      	ldr	r4, [r1, #12]
          break;
 8000468:	e764      	b.n	8000334 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800046a:	68cc      	ldr	r4, [r1, #12]
 800046c:	3408      	adds	r4, #8
          break;
 800046e:	e761      	b.n	8000334 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000470:	68cc      	ldr	r4, [r1, #12]
 8000472:	340c      	adds	r4, #12
          break;
 8000474:	e75e      	b.n	8000334 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000476:	2404      	movs	r4, #4
 8000478:	e75c      	b.n	8000334 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800047a:	2500      	movs	r5, #0
 800047c:	e7a7      	b.n	80003ce <HAL_GPIO_Init+0xea>
 800047e:	2501      	movs	r5, #1
 8000480:	e7a5      	b.n	80003ce <HAL_GPIO_Init+0xea>
 8000482:	2502      	movs	r5, #2
 8000484:	e7a3      	b.n	80003ce <HAL_GPIO_Init+0xea>
 8000486:	bf00      	nop
 8000488:	40010400 	.word	0x40010400
 800048c:	40021000 	.word	0x40021000
 8000490:	40010800 	.word	0x40010800
 8000494:	10210000 	.word	0x10210000
 8000498:	10310000 	.word	0x10310000
 800049c:	10320000 	.word	0x10320000
 80004a0:	10110000 	.word	0x10110000
 80004a4:	10220000 	.word	0x10220000

080004a8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80004a8:	b10a      	cbz	r2, 80004ae <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80004aa:	6101      	str	r1, [r0, #16]
 80004ac:	4770      	bx	lr
 80004ae:	0409      	lsls	r1, r1, #16
 80004b0:	e7fb      	b.n	80004aa <HAL_GPIO_WritePin+0x2>

080004b2 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80004b2:	68c3      	ldr	r3, [r0, #12]
 80004b4:	420b      	tst	r3, r1
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80004b6:	bf14      	ite	ne
 80004b8:	6141      	strne	r1, [r0, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80004ba:	6101      	streq	r1, [r0, #16]
 80004bc:	4770      	bx	lr
	...

080004c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80004c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80004c4:	4605      	mov	r5, r0
 80004c6:	b908      	cbnz	r0, 80004cc <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 80004c8:	2001      	movs	r0, #1
 80004ca:	e03c      	b.n	8000546 <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004cc:	6803      	ldr	r3, [r0, #0]
 80004ce:	07db      	lsls	r3, r3, #31
 80004d0:	d410      	bmi.n	80004f4 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80004d2:	682b      	ldr	r3, [r5, #0]
 80004d4:	079f      	lsls	r7, r3, #30
 80004d6:	d45d      	bmi.n	8000594 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80004d8:	682b      	ldr	r3, [r5, #0]
 80004da:	0719      	lsls	r1, r3, #28
 80004dc:	f100 8094 	bmi.w	8000608 <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80004e0:	682b      	ldr	r3, [r5, #0]
 80004e2:	075a      	lsls	r2, r3, #29
 80004e4:	f100 80be 	bmi.w	8000664 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80004e8:	69e8      	ldr	r0, [r5, #28]
 80004ea:	2800      	cmp	r0, #0
 80004ec:	f040 812c 	bne.w	8000748 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 80004f0:	2000      	movs	r0, #0
 80004f2:	e028      	b.n	8000546 <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80004f4:	4c8f      	ldr	r4, [pc, #572]	; (8000734 <HAL_RCC_OscConfig+0x274>)
 80004f6:	6863      	ldr	r3, [r4, #4]
 80004f8:	f003 030c 	and.w	r3, r3, #12
 80004fc:	2b04      	cmp	r3, #4
 80004fe:	d007      	beq.n	8000510 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000500:	6863      	ldr	r3, [r4, #4]
 8000502:	f003 030c 	and.w	r3, r3, #12
 8000506:	2b08      	cmp	r3, #8
 8000508:	d109      	bne.n	800051e <HAL_RCC_OscConfig+0x5e>
 800050a:	6863      	ldr	r3, [r4, #4]
 800050c:	03de      	lsls	r6, r3, #15
 800050e:	d506      	bpl.n	800051e <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000510:	6823      	ldr	r3, [r4, #0]
 8000512:	039c      	lsls	r4, r3, #14
 8000514:	d5dd      	bpl.n	80004d2 <HAL_RCC_OscConfig+0x12>
 8000516:	686b      	ldr	r3, [r5, #4]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d1da      	bne.n	80004d2 <HAL_RCC_OscConfig+0x12>
 800051c:	e7d4      	b.n	80004c8 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800051e:	686b      	ldr	r3, [r5, #4]
 8000520:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000524:	d112      	bne.n	800054c <HAL_RCC_OscConfig+0x8c>
 8000526:	6823      	ldr	r3, [r4, #0]
 8000528:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800052c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800052e:	f7ff fe57 	bl	80001e0 <HAL_GetTick>
 8000532:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000534:	6823      	ldr	r3, [r4, #0]
 8000536:	0398      	lsls	r0, r3, #14
 8000538:	d4cb      	bmi.n	80004d2 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800053a:	f7ff fe51 	bl	80001e0 <HAL_GetTick>
 800053e:	1b80      	subs	r0, r0, r6
 8000540:	2864      	cmp	r0, #100	; 0x64
 8000542:	d9f7      	bls.n	8000534 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000544:	2003      	movs	r0, #3
}
 8000546:	b002      	add	sp, #8
 8000548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800054c:	b99b      	cbnz	r3, 8000576 <HAL_RCC_OscConfig+0xb6>
 800054e:	6823      	ldr	r3, [r4, #0]
 8000550:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000554:	6023      	str	r3, [r4, #0]
 8000556:	6823      	ldr	r3, [r4, #0]
 8000558:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800055c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800055e:	f7ff fe3f 	bl	80001e0 <HAL_GetTick>
 8000562:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000564:	6823      	ldr	r3, [r4, #0]
 8000566:	0399      	lsls	r1, r3, #14
 8000568:	d5b3      	bpl.n	80004d2 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800056a:	f7ff fe39 	bl	80001e0 <HAL_GetTick>
 800056e:	1b80      	subs	r0, r0, r6
 8000570:	2864      	cmp	r0, #100	; 0x64
 8000572:	d9f7      	bls.n	8000564 <HAL_RCC_OscConfig+0xa4>
 8000574:	e7e6      	b.n	8000544 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000576:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800057a:	6823      	ldr	r3, [r4, #0]
 800057c:	d103      	bne.n	8000586 <HAL_RCC_OscConfig+0xc6>
 800057e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000582:	6023      	str	r3, [r4, #0]
 8000584:	e7cf      	b.n	8000526 <HAL_RCC_OscConfig+0x66>
 8000586:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800058a:	6023      	str	r3, [r4, #0]
 800058c:	6823      	ldr	r3, [r4, #0]
 800058e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000592:	e7cb      	b.n	800052c <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000594:	4c67      	ldr	r4, [pc, #412]	; (8000734 <HAL_RCC_OscConfig+0x274>)
 8000596:	6863      	ldr	r3, [r4, #4]
 8000598:	f013 0f0c 	tst.w	r3, #12
 800059c:	d007      	beq.n	80005ae <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800059e:	6863      	ldr	r3, [r4, #4]
 80005a0:	f003 030c 	and.w	r3, r3, #12
 80005a4:	2b08      	cmp	r3, #8
 80005a6:	d110      	bne.n	80005ca <HAL_RCC_OscConfig+0x10a>
 80005a8:	6863      	ldr	r3, [r4, #4]
 80005aa:	03da      	lsls	r2, r3, #15
 80005ac:	d40d      	bmi.n	80005ca <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80005ae:	6823      	ldr	r3, [r4, #0]
 80005b0:	079b      	lsls	r3, r3, #30
 80005b2:	d502      	bpl.n	80005ba <HAL_RCC_OscConfig+0xfa>
 80005b4:	692b      	ldr	r3, [r5, #16]
 80005b6:	2b01      	cmp	r3, #1
 80005b8:	d186      	bne.n	80004c8 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80005ba:	6823      	ldr	r3, [r4, #0]
 80005bc:	696a      	ldr	r2, [r5, #20]
 80005be:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80005c2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80005c6:	6023      	str	r3, [r4, #0]
 80005c8:	e786      	b.n	80004d8 <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80005ca:	692a      	ldr	r2, [r5, #16]
 80005cc:	4b5a      	ldr	r3, [pc, #360]	; (8000738 <HAL_RCC_OscConfig+0x278>)
 80005ce:	b16a      	cbz	r2, 80005ec <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 80005d0:	2201      	movs	r2, #1
 80005d2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80005d4:	f7ff fe04 	bl	80001e0 <HAL_GetTick>
 80005d8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80005da:	6823      	ldr	r3, [r4, #0]
 80005dc:	079f      	lsls	r7, r3, #30
 80005de:	d4ec      	bmi.n	80005ba <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80005e0:	f7ff fdfe 	bl	80001e0 <HAL_GetTick>
 80005e4:	1b80      	subs	r0, r0, r6
 80005e6:	2802      	cmp	r0, #2
 80005e8:	d9f7      	bls.n	80005da <HAL_RCC_OscConfig+0x11a>
 80005ea:	e7ab      	b.n	8000544 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80005ec:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80005ee:	f7ff fdf7 	bl	80001e0 <HAL_GetTick>
 80005f2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80005f4:	6823      	ldr	r3, [r4, #0]
 80005f6:	0798      	lsls	r0, r3, #30
 80005f8:	f57f af6e 	bpl.w	80004d8 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80005fc:	f7ff fdf0 	bl	80001e0 <HAL_GetTick>
 8000600:	1b80      	subs	r0, r0, r6
 8000602:	2802      	cmp	r0, #2
 8000604:	d9f6      	bls.n	80005f4 <HAL_RCC_OscConfig+0x134>
 8000606:	e79d      	b.n	8000544 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000608:	69aa      	ldr	r2, [r5, #24]
 800060a:	4c4a      	ldr	r4, [pc, #296]	; (8000734 <HAL_RCC_OscConfig+0x274>)
 800060c:	4b4b      	ldr	r3, [pc, #300]	; (800073c <HAL_RCC_OscConfig+0x27c>)
 800060e:	b1da      	cbz	r2, 8000648 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8000610:	2201      	movs	r2, #1
 8000612:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000614:	f7ff fde4 	bl	80001e0 <HAL_GetTick>
 8000618:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800061a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800061c:	079b      	lsls	r3, r3, #30
 800061e:	d50d      	bpl.n	800063c <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000620:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000624:	4b46      	ldr	r3, [pc, #280]	; (8000740 <HAL_RCC_OscConfig+0x280>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	fbb3 f3f2 	udiv	r3, r3, r2
 800062c:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800062e:	bf00      	nop
  }
  while (Delay --);
 8000630:	9b01      	ldr	r3, [sp, #4]
 8000632:	1e5a      	subs	r2, r3, #1
 8000634:	9201      	str	r2, [sp, #4]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d1f9      	bne.n	800062e <HAL_RCC_OscConfig+0x16e>
 800063a:	e751      	b.n	80004e0 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800063c:	f7ff fdd0 	bl	80001e0 <HAL_GetTick>
 8000640:	1b80      	subs	r0, r0, r6
 8000642:	2802      	cmp	r0, #2
 8000644:	d9e9      	bls.n	800061a <HAL_RCC_OscConfig+0x15a>
 8000646:	e77d      	b.n	8000544 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000648:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800064a:	f7ff fdc9 	bl	80001e0 <HAL_GetTick>
 800064e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000650:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000652:	079f      	lsls	r7, r3, #30
 8000654:	f57f af44 	bpl.w	80004e0 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000658:	f7ff fdc2 	bl	80001e0 <HAL_GetTick>
 800065c:	1b80      	subs	r0, r0, r6
 800065e:	2802      	cmp	r0, #2
 8000660:	d9f6      	bls.n	8000650 <HAL_RCC_OscConfig+0x190>
 8000662:	e76f      	b.n	8000544 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000664:	4c33      	ldr	r4, [pc, #204]	; (8000734 <HAL_RCC_OscConfig+0x274>)
 8000666:	69e3      	ldr	r3, [r4, #28]
 8000668:	00d8      	lsls	r0, r3, #3
 800066a:	d424      	bmi.n	80006b6 <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 800066c:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800066e:	69e3      	ldr	r3, [r4, #28]
 8000670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000674:	61e3      	str	r3, [r4, #28]
 8000676:	69e3      	ldr	r3, [r4, #28]
 8000678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800067c:	9300      	str	r3, [sp, #0]
 800067e:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000680:	4e30      	ldr	r6, [pc, #192]	; (8000744 <HAL_RCC_OscConfig+0x284>)
 8000682:	6833      	ldr	r3, [r6, #0]
 8000684:	05d9      	lsls	r1, r3, #23
 8000686:	d518      	bpl.n	80006ba <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000688:	68eb      	ldr	r3, [r5, #12]
 800068a:	2b01      	cmp	r3, #1
 800068c:	d126      	bne.n	80006dc <HAL_RCC_OscConfig+0x21c>
 800068e:	6a23      	ldr	r3, [r4, #32]
 8000690:	f043 0301 	orr.w	r3, r3, #1
 8000694:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000696:	f7ff fda3 	bl	80001e0 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800069a:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800069e:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80006a0:	6a23      	ldr	r3, [r4, #32]
 80006a2:	079b      	lsls	r3, r3, #30
 80006a4:	d53f      	bpl.n	8000726 <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 80006a6:	2f00      	cmp	r7, #0
 80006a8:	f43f af1e 	beq.w	80004e8 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 80006ac:	69e3      	ldr	r3, [r4, #28]
 80006ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80006b2:	61e3      	str	r3, [r4, #28]
 80006b4:	e718      	b.n	80004e8 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 80006b6:	2700      	movs	r7, #0
 80006b8:	e7e2      	b.n	8000680 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80006ba:	6833      	ldr	r3, [r6, #0]
 80006bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006c0:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80006c2:	f7ff fd8d 	bl	80001e0 <HAL_GetTick>
 80006c6:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80006c8:	6833      	ldr	r3, [r6, #0]
 80006ca:	05da      	lsls	r2, r3, #23
 80006cc:	d4dc      	bmi.n	8000688 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80006ce:	f7ff fd87 	bl	80001e0 <HAL_GetTick>
 80006d2:	eba0 0008 	sub.w	r0, r0, r8
 80006d6:	2864      	cmp	r0, #100	; 0x64
 80006d8:	d9f6      	bls.n	80006c8 <HAL_RCC_OscConfig+0x208>
 80006da:	e733      	b.n	8000544 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006dc:	b9ab      	cbnz	r3, 800070a <HAL_RCC_OscConfig+0x24a>
 80006de:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80006e0:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006e4:	f023 0301 	bic.w	r3, r3, #1
 80006e8:	6223      	str	r3, [r4, #32]
 80006ea:	6a23      	ldr	r3, [r4, #32]
 80006ec:	f023 0304 	bic.w	r3, r3, #4
 80006f0:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80006f2:	f7ff fd75 	bl	80001e0 <HAL_GetTick>
 80006f6:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80006f8:	6a23      	ldr	r3, [r4, #32]
 80006fa:	0798      	lsls	r0, r3, #30
 80006fc:	d5d3      	bpl.n	80006a6 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80006fe:	f7ff fd6f 	bl	80001e0 <HAL_GetTick>
 8000702:	1b80      	subs	r0, r0, r6
 8000704:	4540      	cmp	r0, r8
 8000706:	d9f7      	bls.n	80006f8 <HAL_RCC_OscConfig+0x238>
 8000708:	e71c      	b.n	8000544 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800070a:	2b05      	cmp	r3, #5
 800070c:	6a23      	ldr	r3, [r4, #32]
 800070e:	d103      	bne.n	8000718 <HAL_RCC_OscConfig+0x258>
 8000710:	f043 0304 	orr.w	r3, r3, #4
 8000714:	6223      	str	r3, [r4, #32]
 8000716:	e7ba      	b.n	800068e <HAL_RCC_OscConfig+0x1ce>
 8000718:	f023 0301 	bic.w	r3, r3, #1
 800071c:	6223      	str	r3, [r4, #32]
 800071e:	6a23      	ldr	r3, [r4, #32]
 8000720:	f023 0304 	bic.w	r3, r3, #4
 8000724:	e7b6      	b.n	8000694 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000726:	f7ff fd5b 	bl	80001e0 <HAL_GetTick>
 800072a:	eba0 0008 	sub.w	r0, r0, r8
 800072e:	42b0      	cmp	r0, r6
 8000730:	d9b6      	bls.n	80006a0 <HAL_RCC_OscConfig+0x1e0>
 8000732:	e707      	b.n	8000544 <HAL_RCC_OscConfig+0x84>
 8000734:	40021000 	.word	0x40021000
 8000738:	42420000 	.word	0x42420000
 800073c:	42420480 	.word	0x42420480
 8000740:	20000008 	.word	0x20000008
 8000744:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000748:	4b2a      	ldr	r3, [pc, #168]	; (80007f4 <HAL_RCC_OscConfig+0x334>)
 800074a:	685a      	ldr	r2, [r3, #4]
 800074c:	461c      	mov	r4, r3
 800074e:	f002 020c 	and.w	r2, r2, #12
 8000752:	2a08      	cmp	r2, #8
 8000754:	d03d      	beq.n	80007d2 <HAL_RCC_OscConfig+0x312>
 8000756:	2300      	movs	r3, #0
 8000758:	4e27      	ldr	r6, [pc, #156]	; (80007f8 <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800075a:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800075c:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800075e:	d12b      	bne.n	80007b8 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 8000760:	f7ff fd3e 	bl	80001e0 <HAL_GetTick>
 8000764:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000766:	6823      	ldr	r3, [r4, #0]
 8000768:	0199      	lsls	r1, r3, #6
 800076a:	d41f      	bmi.n	80007ac <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800076c:	6a2b      	ldr	r3, [r5, #32]
 800076e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000772:	d105      	bne.n	8000780 <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000774:	6862      	ldr	r2, [r4, #4]
 8000776:	68a9      	ldr	r1, [r5, #8]
 8000778:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800077c:	430a      	orrs	r2, r1
 800077e:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000780:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000782:	6862      	ldr	r2, [r4, #4]
 8000784:	430b      	orrs	r3, r1
 8000786:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800078a:	4313      	orrs	r3, r2
 800078c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800078e:	2301      	movs	r3, #1
 8000790:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000792:	f7ff fd25 	bl	80001e0 <HAL_GetTick>
 8000796:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000798:	6823      	ldr	r3, [r4, #0]
 800079a:	019a      	lsls	r2, r3, #6
 800079c:	f53f aea8 	bmi.w	80004f0 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80007a0:	f7ff fd1e 	bl	80001e0 <HAL_GetTick>
 80007a4:	1b40      	subs	r0, r0, r5
 80007a6:	2802      	cmp	r0, #2
 80007a8:	d9f6      	bls.n	8000798 <HAL_RCC_OscConfig+0x2d8>
 80007aa:	e6cb      	b.n	8000544 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80007ac:	f7ff fd18 	bl	80001e0 <HAL_GetTick>
 80007b0:	1bc0      	subs	r0, r0, r7
 80007b2:	2802      	cmp	r0, #2
 80007b4:	d9d7      	bls.n	8000766 <HAL_RCC_OscConfig+0x2a6>
 80007b6:	e6c5      	b.n	8000544 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 80007b8:	f7ff fd12 	bl	80001e0 <HAL_GetTick>
 80007bc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80007be:	6823      	ldr	r3, [r4, #0]
 80007c0:	019b      	lsls	r3, r3, #6
 80007c2:	f57f ae95 	bpl.w	80004f0 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80007c6:	f7ff fd0b 	bl	80001e0 <HAL_GetTick>
 80007ca:	1b40      	subs	r0, r0, r5
 80007cc:	2802      	cmp	r0, #2
 80007ce:	d9f6      	bls.n	80007be <HAL_RCC_OscConfig+0x2fe>
 80007d0:	e6b8      	b.n	8000544 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80007d2:	2801      	cmp	r0, #1
 80007d4:	f43f aeb7 	beq.w	8000546 <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 80007d8:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80007da:	6a2b      	ldr	r3, [r5, #32]
 80007dc:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 80007e0:	429a      	cmp	r2, r3
 80007e2:	f47f ae71 	bne.w	80004c8 <HAL_RCC_OscConfig+0x8>
 80007e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80007e8:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 80007ec:	1ac0      	subs	r0, r0, r3
 80007ee:	bf18      	it	ne
 80007f0:	2001      	movne	r0, #1
 80007f2:	e6a8      	b.n	8000546 <HAL_RCC_OscConfig+0x86>
 80007f4:	40021000 	.word	0x40021000
 80007f8:	42420060 	.word	0x42420060

080007fc <HAL_RCC_GetSysClockFreq>:
{
 80007fc:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80007fe:	4b19      	ldr	r3, [pc, #100]	; (8000864 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8000800:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000802:	ac02      	add	r4, sp, #8
 8000804:	f103 0510 	add.w	r5, r3, #16
 8000808:	4622      	mov	r2, r4
 800080a:	6818      	ldr	r0, [r3, #0]
 800080c:	6859      	ldr	r1, [r3, #4]
 800080e:	3308      	adds	r3, #8
 8000810:	c203      	stmia	r2!, {r0, r1}
 8000812:	42ab      	cmp	r3, r5
 8000814:	4614      	mov	r4, r2
 8000816:	d1f7      	bne.n	8000808 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000818:	2301      	movs	r3, #1
 800081a:	f88d 3004 	strb.w	r3, [sp, #4]
 800081e:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8000820:	4911      	ldr	r1, [pc, #68]	; (8000868 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000822:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8000826:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000828:	f003 020c 	and.w	r2, r3, #12
 800082c:	2a08      	cmp	r2, #8
 800082e:	d117      	bne.n	8000860 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000830:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000834:	a806      	add	r0, sp, #24
 8000836:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000838:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800083a:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800083e:	d50c      	bpl.n	800085a <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000840:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000842:	480a      	ldr	r0, [pc, #40]	; (800086c <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000844:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000848:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800084a:	aa06      	add	r2, sp, #24
 800084c:	4413      	add	r3, r2
 800084e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000852:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000856:	b007      	add	sp, #28
 8000858:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800085a:	4805      	ldr	r0, [pc, #20]	; (8000870 <HAL_RCC_GetSysClockFreq+0x74>)
 800085c:	4350      	muls	r0, r2
 800085e:	e7fa      	b.n	8000856 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8000860:	4802      	ldr	r0, [pc, #8]	; (800086c <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8000862:	e7f8      	b.n	8000856 <HAL_RCC_GetSysClockFreq+0x5a>
 8000864:	080028e8 	.word	0x080028e8
 8000868:	40021000 	.word	0x40021000
 800086c:	007a1200 	.word	0x007a1200
 8000870:	003d0900 	.word	0x003d0900

08000874 <HAL_RCC_ClockConfig>:
{
 8000874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000878:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800087a:	4604      	mov	r4, r0
 800087c:	b910      	cbnz	r0, 8000884 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800087e:	2001      	movs	r0, #1
 8000880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000884:	4a45      	ldr	r2, [pc, #276]	; (800099c <HAL_RCC_ClockConfig+0x128>)
 8000886:	6813      	ldr	r3, [r2, #0]
 8000888:	f003 0307 	and.w	r3, r3, #7
 800088c:	428b      	cmp	r3, r1
 800088e:	d329      	bcc.n	80008e4 <HAL_RCC_ClockConfig+0x70>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000890:	6821      	ldr	r1, [r4, #0]
 8000892:	078e      	lsls	r6, r1, #30
 8000894:	d431      	bmi.n	80008fa <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000896:	07ca      	lsls	r2, r1, #31
 8000898:	d444      	bmi.n	8000924 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800089a:	4a40      	ldr	r2, [pc, #256]	; (800099c <HAL_RCC_ClockConfig+0x128>)
 800089c:	6813      	ldr	r3, [r2, #0]
 800089e:	f003 0307 	and.w	r3, r3, #7
 80008a2:	429d      	cmp	r5, r3
 80008a4:	d367      	bcc.n	8000976 <HAL_RCC_ClockConfig+0x102>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80008a6:	6822      	ldr	r2, [r4, #0]
 80008a8:	4d3d      	ldr	r5, [pc, #244]	; (80009a0 <HAL_RCC_ClockConfig+0x12c>)
 80008aa:	f012 0f04 	tst.w	r2, #4
 80008ae:	d16e      	bne.n	800098e <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80008b0:	0713      	lsls	r3, r2, #28
 80008b2:	d506      	bpl.n	80008c2 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80008b4:	686b      	ldr	r3, [r5, #4]
 80008b6:	6922      	ldr	r2, [r4, #16]
 80008b8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80008bc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80008c0:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80008c2:	f7ff ff9b 	bl	80007fc <HAL_RCC_GetSysClockFreq>
 80008c6:	686b      	ldr	r3, [r5, #4]
 80008c8:	4a36      	ldr	r2, [pc, #216]	; (80009a4 <HAL_RCC_ClockConfig+0x130>)
 80008ca:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80008ce:	5cd3      	ldrb	r3, [r2, r3]
 80008d0:	40d8      	lsrs	r0, r3
 80008d2:	4b35      	ldr	r3, [pc, #212]	; (80009a8 <HAL_RCC_ClockConfig+0x134>)
 80008d4:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80008d6:	4b35      	ldr	r3, [pc, #212]	; (80009ac <HAL_RCC_ClockConfig+0x138>)
 80008d8:	6818      	ldr	r0, [r3, #0]
 80008da:	f7ff fc3f 	bl	800015c <HAL_InitTick>
  return HAL_OK;
 80008de:	2000      	movs	r0, #0
 80008e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80008e4:	6813      	ldr	r3, [r2, #0]
 80008e6:	f023 0307 	bic.w	r3, r3, #7
 80008ea:	430b      	orrs	r3, r1
 80008ec:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80008ee:	6813      	ldr	r3, [r2, #0]
 80008f0:	f003 0307 	and.w	r3, r3, #7
 80008f4:	4299      	cmp	r1, r3
 80008f6:	d1c2      	bne.n	800087e <HAL_RCC_ClockConfig+0xa>
 80008f8:	e7ca      	b.n	8000890 <HAL_RCC_ClockConfig+0x1c>
 80008fa:	4b29      	ldr	r3, [pc, #164]	; (80009a0 <HAL_RCC_ClockConfig+0x12c>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80008fc:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000900:	bf1e      	ittt	ne
 8000902:	685a      	ldrne	r2, [r3, #4]
 8000904:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8000908:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800090a:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800090c:	bf42      	ittt	mi
 800090e:	685a      	ldrmi	r2, [r3, #4]
 8000910:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8000914:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000916:	685a      	ldr	r2, [r3, #4]
 8000918:	68a0      	ldr	r0, [r4, #8]
 800091a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800091e:	4302      	orrs	r2, r0
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	e7b8      	b.n	8000896 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000924:	6862      	ldr	r2, [r4, #4]
 8000926:	4e1e      	ldr	r6, [pc, #120]	; (80009a0 <HAL_RCC_ClockConfig+0x12c>)
 8000928:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800092a:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800092c:	d11b      	bne.n	8000966 <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800092e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000932:	d0a4      	beq.n	800087e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000934:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000936:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800093a:	f023 0303 	bic.w	r3, r3, #3
 800093e:	4313      	orrs	r3, r2
 8000940:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000942:	f7ff fc4d 	bl	80001e0 <HAL_GetTick>
 8000946:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000948:	6873      	ldr	r3, [r6, #4]
 800094a:	6862      	ldr	r2, [r4, #4]
 800094c:	f003 030c 	and.w	r3, r3, #12
 8000950:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000954:	d0a1      	beq.n	800089a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000956:	f7ff fc43 	bl	80001e0 <HAL_GetTick>
 800095a:	1bc0      	subs	r0, r0, r7
 800095c:	4540      	cmp	r0, r8
 800095e:	d9f3      	bls.n	8000948 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8000960:	2003      	movs	r0, #3
}
 8000962:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000966:	2a02      	cmp	r2, #2
 8000968:	d102      	bne.n	8000970 <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800096a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800096e:	e7e0      	b.n	8000932 <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000970:	f013 0f02 	tst.w	r3, #2
 8000974:	e7dd      	b.n	8000932 <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000976:	6813      	ldr	r3, [r2, #0]
 8000978:	f023 0307 	bic.w	r3, r3, #7
 800097c:	432b      	orrs	r3, r5
 800097e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000980:	6813      	ldr	r3, [r2, #0]
 8000982:	f003 0307 	and.w	r3, r3, #7
 8000986:	429d      	cmp	r5, r3
 8000988:	f47f af79 	bne.w	800087e <HAL_RCC_ClockConfig+0xa>
 800098c:	e78b      	b.n	80008a6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800098e:	686b      	ldr	r3, [r5, #4]
 8000990:	68e1      	ldr	r1, [r4, #12]
 8000992:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000996:	430b      	orrs	r3, r1
 8000998:	606b      	str	r3, [r5, #4]
 800099a:	e789      	b.n	80008b0 <HAL_RCC_ClockConfig+0x3c>
 800099c:	40022000 	.word	0x40022000
 80009a0:	40021000 	.word	0x40021000
 80009a4:	08002c72 	.word	0x08002c72
 80009a8:	20000008 	.word	0x20000008
 80009ac:	20000004 	.word	0x20000004

080009b0 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80009b0:	4b04      	ldr	r3, [pc, #16]	; (80009c4 <HAL_RCC_GetPCLK1Freq+0x14>)
 80009b2:	4a05      	ldr	r2, [pc, #20]	; (80009c8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80009b4:	685b      	ldr	r3, [r3, #4]
 80009b6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80009ba:	5cd3      	ldrb	r3, [r2, r3]
 80009bc:	4a03      	ldr	r2, [pc, #12]	; (80009cc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80009be:	6810      	ldr	r0, [r2, #0]
}
 80009c0:	40d8      	lsrs	r0, r3
 80009c2:	4770      	bx	lr
 80009c4:	40021000 	.word	0x40021000
 80009c8:	08002c82 	.word	0x08002c82
 80009cc:	20000008 	.word	0x20000008

080009d0 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80009d0:	4b04      	ldr	r3, [pc, #16]	; (80009e4 <HAL_RCC_GetPCLK2Freq+0x14>)
 80009d2:	4a05      	ldr	r2, [pc, #20]	; (80009e8 <HAL_RCC_GetPCLK2Freq+0x18>)
 80009d4:	685b      	ldr	r3, [r3, #4]
 80009d6:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80009da:	5cd3      	ldrb	r3, [r2, r3]
 80009dc:	4a03      	ldr	r2, [pc, #12]	; (80009ec <HAL_RCC_GetPCLK2Freq+0x1c>)
 80009de:	6810      	ldr	r0, [r2, #0]
}
 80009e0:	40d8      	lsrs	r0, r3
 80009e2:	4770      	bx	lr
 80009e4:	40021000 	.word	0x40021000
 80009e8:	08002c82 	.word	0x08002c82
 80009ec:	20000008 	.word	0x20000008

080009f0 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80009f0:	6803      	ldr	r3, [r0, #0]
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
}
 80009f2:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80009f4:	68da      	ldr	r2, [r3, #12]
 80009f6:	f042 0201 	orr.w	r2, r2, #1
 80009fa:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80009fc:	689a      	ldr	r2, [r3, #8]
 80009fe:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000a02:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 8000a04:	bf1e      	ittt	ne
 8000a06:	681a      	ldrne	r2, [r3, #0]
 8000a08:	f042 0201 	orrne.w	r2, r2, #1
 8000a0c:	601a      	strne	r2, [r3, #0]
}
 8000a0e:	4770      	bx	lr

08000a10 <HAL_TIM_OC_DelayElapsedCallback>:
 8000a10:	4770      	bx	lr

08000a12 <HAL_TIM_IC_CaptureCallback>:
 8000a12:	4770      	bx	lr

08000a14 <HAL_TIM_PWM_PulseFinishedCallback>:
 8000a14:	4770      	bx	lr

08000a16 <HAL_TIM_TriggerCallback>:
 8000a16:	4770      	bx	lr

08000a18 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000a18:	6803      	ldr	r3, [r0, #0]
{
 8000a1a:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000a1c:	691a      	ldr	r2, [r3, #16]
{
 8000a1e:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000a20:	0791      	lsls	r1, r2, #30
 8000a22:	d50e      	bpl.n	8000a42 <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8000a24:	68da      	ldr	r2, [r3, #12]
 8000a26:	0792      	lsls	r2, r2, #30
 8000a28:	d50b      	bpl.n	8000a42 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000a2a:	f06f 0202 	mvn.w	r2, #2
 8000a2e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000a30:	2201      	movs	r2, #1

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000a32:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000a34:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000a36:	079b      	lsls	r3, r3, #30
 8000a38:	d077      	beq.n	8000b2a <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8000a3a:	f7ff ffea 	bl	8000a12 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000a42:	6823      	ldr	r3, [r4, #0]
 8000a44:	691a      	ldr	r2, [r3, #16]
 8000a46:	0750      	lsls	r0, r2, #29
 8000a48:	d510      	bpl.n	8000a6c <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8000a4a:	68da      	ldr	r2, [r3, #12]
 8000a4c:	0751      	lsls	r1, r2, #29
 8000a4e:	d50d      	bpl.n	8000a6c <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000a50:	f06f 0204 	mvn.w	r2, #4
 8000a54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000a56:	2202      	movs	r2, #2
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000a58:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000a5a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000a5c:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000a60:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000a62:	d068      	beq.n	8000b36 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8000a64:	f7ff ffd5 	bl	8000a12 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000a6c:	6823      	ldr	r3, [r4, #0]
 8000a6e:	691a      	ldr	r2, [r3, #16]
 8000a70:	0712      	lsls	r2, r2, #28
 8000a72:	d50f      	bpl.n	8000a94 <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8000a74:	68da      	ldr	r2, [r3, #12]
 8000a76:	0710      	lsls	r0, r2, #28
 8000a78:	d50c      	bpl.n	8000a94 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000a7a:	f06f 0208 	mvn.w	r2, #8
 8000a7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000a80:	2204      	movs	r2, #4
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000a82:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000a84:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000a86:	0799      	lsls	r1, r3, #30
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000a88:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000a8a:	d05a      	beq.n	8000b42 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8000a8c:	f7ff ffc1 	bl	8000a12 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000a90:	2300      	movs	r3, #0
 8000a92:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000a94:	6823      	ldr	r3, [r4, #0]
 8000a96:	691a      	ldr	r2, [r3, #16]
 8000a98:	06d2      	lsls	r2, r2, #27
 8000a9a:	d510      	bpl.n	8000abe <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8000a9c:	68da      	ldr	r2, [r3, #12]
 8000a9e:	06d0      	lsls	r0, r2, #27
 8000aa0:	d50d      	bpl.n	8000abe <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000aa2:	f06f 0210 	mvn.w	r2, #16
 8000aa6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000aa8:	2208      	movs	r2, #8
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000aaa:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000aac:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000aae:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000ab2:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000ab4:	d04b      	beq.n	8000b4e <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8000ab6:	f7ff ffac 	bl	8000a12 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000aba:	2300      	movs	r3, #0
 8000abc:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000abe:	6823      	ldr	r3, [r4, #0]
 8000ac0:	691a      	ldr	r2, [r3, #16]
 8000ac2:	07d1      	lsls	r1, r2, #31
 8000ac4:	d508      	bpl.n	8000ad8 <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8000ac6:	68da      	ldr	r2, [r3, #12]
 8000ac8:	07d2      	lsls	r2, r2, #31
 8000aca:	d505      	bpl.n	8000ad8 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000acc:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8000ad0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000ad2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8000ad4:	f000 fc8c 	bl	80013f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000ad8:	6823      	ldr	r3, [r4, #0]
 8000ada:	691a      	ldr	r2, [r3, #16]
 8000adc:	0610      	lsls	r0, r2, #24
 8000ade:	d508      	bpl.n	8000af2 <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8000ae0:	68da      	ldr	r2, [r3, #12]
 8000ae2:	0611      	lsls	r1, r2, #24
 8000ae4:	d505      	bpl.n	8000af2 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000ae6:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8000aea:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000aec:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8000aee:	f000 f944 	bl	8000d7a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000af2:	6823      	ldr	r3, [r4, #0]
 8000af4:	691a      	ldr	r2, [r3, #16]
 8000af6:	0652      	lsls	r2, r2, #25
 8000af8:	d508      	bpl.n	8000b0c <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8000afa:	68da      	ldr	r2, [r3, #12]
 8000afc:	0650      	lsls	r0, r2, #25
 8000afe:	d505      	bpl.n	8000b0c <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000b00:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8000b04:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000b06:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8000b08:	f7ff ff85 	bl	8000a16 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000b0c:	6823      	ldr	r3, [r4, #0]
 8000b0e:	691a      	ldr	r2, [r3, #16]
 8000b10:	0691      	lsls	r1, r2, #26
 8000b12:	d522      	bpl.n	8000b5a <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8000b14:	68da      	ldr	r2, [r3, #12]
 8000b16:	0692      	lsls	r2, r2, #26
 8000b18:	d51f      	bpl.n	8000b5a <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000b1a:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8000b1e:	4620      	mov	r0, r4
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8000b20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000b24:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8000b26:	f000 b927 	b.w	8000d78 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000b2a:	f7ff ff71 	bl	8000a10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000b2e:	4620      	mov	r0, r4
 8000b30:	f7ff ff70 	bl	8000a14 <HAL_TIM_PWM_PulseFinishedCallback>
 8000b34:	e783      	b.n	8000a3e <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000b36:	f7ff ff6b 	bl	8000a10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000b3a:	4620      	mov	r0, r4
 8000b3c:	f7ff ff6a 	bl	8000a14 <HAL_TIM_PWM_PulseFinishedCallback>
 8000b40:	e792      	b.n	8000a68 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000b42:	f7ff ff65 	bl	8000a10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000b46:	4620      	mov	r0, r4
 8000b48:	f7ff ff64 	bl	8000a14 <HAL_TIM_PWM_PulseFinishedCallback>
 8000b4c:	e7a0      	b.n	8000a90 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000b4e:	f7ff ff5f 	bl	8000a10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000b52:	4620      	mov	r0, r4
 8000b54:	f7ff ff5e 	bl	8000a14 <HAL_TIM_PWM_PulseFinishedCallback>
 8000b58:	e7af      	b.n	8000aba <HAL_TIM_IRQHandler+0xa2>
 8000b5a:	bd10      	pop	{r4, pc}

08000b5c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000b5c:	4a1a      	ldr	r2, [pc, #104]	; (8000bc8 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8000b5e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000b60:	4290      	cmp	r0, r2
 8000b62:	d00a      	beq.n	8000b7a <TIM_Base_SetConfig+0x1e>
 8000b64:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000b68:	d007      	beq.n	8000b7a <TIM_Base_SetConfig+0x1e>
 8000b6a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8000b6e:	4290      	cmp	r0, r2
 8000b70:	d003      	beq.n	8000b7a <TIM_Base_SetConfig+0x1e>
 8000b72:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000b76:	4290      	cmp	r0, r2
 8000b78:	d115      	bne.n	8000ba6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8000b7a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000b7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000b80:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000b82:	4a11      	ldr	r2, [pc, #68]	; (8000bc8 <TIM_Base_SetConfig+0x6c>)
 8000b84:	4290      	cmp	r0, r2
 8000b86:	d00a      	beq.n	8000b9e <TIM_Base_SetConfig+0x42>
 8000b88:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000b8c:	d007      	beq.n	8000b9e <TIM_Base_SetConfig+0x42>
 8000b8e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8000b92:	4290      	cmp	r0, r2
 8000b94:	d003      	beq.n	8000b9e <TIM_Base_SetConfig+0x42>
 8000b96:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000b9a:	4290      	cmp	r0, r2
 8000b9c:	d103      	bne.n	8000ba6 <TIM_Base_SetConfig+0x4a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000b9e:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000ba0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000ba4:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8000ba6:	694a      	ldr	r2, [r1, #20]
 8000ba8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000bac:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8000bae:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000bb0:	688b      	ldr	r3, [r1, #8]
 8000bb2:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8000bb4:	680b      	ldr	r3, [r1, #0]
 8000bb6:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000bb8:	4b03      	ldr	r3, [pc, #12]	; (8000bc8 <TIM_Base_SetConfig+0x6c>)
 8000bba:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8000bbc:	bf04      	itt	eq
 8000bbe:	690b      	ldreq	r3, [r1, #16]
 8000bc0:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	6143      	str	r3, [r0, #20]
 8000bc6:	4770      	bx	lr
 8000bc8:	40012c00 	.word	0x40012c00

08000bcc <HAL_TIM_Base_Init>:
{
 8000bcc:	b510      	push	{r4, lr}
  if (htim == NULL)
 8000bce:	4604      	mov	r4, r0
 8000bd0:	b1a0      	cbz	r0, 8000bfc <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8000bd2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000bd6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000bda:	b91b      	cbnz	r3, 8000be4 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000bdc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8000be0:	f001 f826 	bl	8001c30 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8000be4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000be6:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8000be8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000bec:	1d21      	adds	r1, r4, #4
 8000bee:	f7ff ffb5 	bl	8000b5c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8000bf2:	2301      	movs	r3, #1
  return HAL_OK;
 8000bf4:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8000bf6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8000bfa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000bfc:	2001      	movs	r0, #1
}
 8000bfe:	bd10      	pop	{r4, pc}

08000c00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8000c00:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8000c02:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000c04:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000c06:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000c0a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8000c0e:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8000c10:	6083      	str	r3, [r0, #8]
 8000c12:	bd10      	pop	{r4, pc}

08000c14 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8000c14:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8000c18:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8000c1a:	2b01      	cmp	r3, #1
{
 8000c1c:	4604      	mov	r4, r0
 8000c1e:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8000c22:	d019      	beq.n	8000c58 <HAL_TIM_ConfigClockSource+0x44>
 8000c24:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8000c26:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8000c2a:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8000c2c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8000c30:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000c32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000c36:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8000c3a:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8000c3c:	680b      	ldr	r3, [r1, #0]
 8000c3e:	2b40      	cmp	r3, #64	; 0x40
 8000c40:	d065      	beq.n	8000d0e <HAL_TIM_ConfigClockSource+0xfa>
 8000c42:	d815      	bhi.n	8000c70 <HAL_TIM_ConfigClockSource+0x5c>
 8000c44:	2b10      	cmp	r3, #16
 8000c46:	d00c      	beq.n	8000c62 <HAL_TIM_ConfigClockSource+0x4e>
 8000c48:	d807      	bhi.n	8000c5a <HAL_TIM_ConfigClockSource+0x46>
 8000c4a:	b153      	cbz	r3, 8000c62 <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 8000c4c:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8000c4e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8000c50:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8000c54:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8000c58:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8000c5a:	2b20      	cmp	r3, #32
 8000c5c:	d001      	beq.n	8000c62 <HAL_TIM_ConfigClockSource+0x4e>
 8000c5e:	2b30      	cmp	r3, #48	; 0x30
 8000c60:	d1f4      	bne.n	8000c4c <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 8000c62:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8000c64:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8000c68:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	e01a      	b.n	8000ca6 <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 8000c70:	2b60      	cmp	r3, #96	; 0x60
 8000c72:	d034      	beq.n	8000cde <HAL_TIM_ConfigClockSource+0xca>
 8000c74:	d819      	bhi.n	8000caa <HAL_TIM_ConfigClockSource+0x96>
 8000c76:	2b50      	cmp	r3, #80	; 0x50
 8000c78:	d1e8      	bne.n	8000c4c <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8000c7a:	684a      	ldr	r2, [r1, #4]
 8000c7c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8000c7e:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000c80:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000c82:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000c86:	f025 0501 	bic.w	r5, r5, #1
 8000c8a:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000c8c:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8000c8e:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000c90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000c94:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8000c98:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8000c9a:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8000c9c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8000c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8000ca2:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8000ca6:	6083      	str	r3, [r0, #8]
 8000ca8:	e7d0      	b.n	8000c4c <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 8000caa:	2b70      	cmp	r3, #112	; 0x70
 8000cac:	d00c      	beq.n	8000cc8 <HAL_TIM_ConfigClockSource+0xb4>
 8000cae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000cb2:	d1cb      	bne.n	8000c4c <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 8000cb4:	68cb      	ldr	r3, [r1, #12]
 8000cb6:	684a      	ldr	r2, [r1, #4]
 8000cb8:	6889      	ldr	r1, [r1, #8]
 8000cba:	f7ff ffa1 	bl	8000c00 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8000cbe:	6822      	ldr	r2, [r4, #0]
 8000cc0:	6893      	ldr	r3, [r2, #8]
 8000cc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cc6:	e008      	b.n	8000cda <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 8000cc8:	68cb      	ldr	r3, [r1, #12]
 8000cca:	684a      	ldr	r2, [r1, #4]
 8000ccc:	6889      	ldr	r1, [r1, #8]
 8000cce:	f7ff ff97 	bl	8000c00 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8000cd2:	6822      	ldr	r2, [r4, #0]
 8000cd4:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8000cd6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8000cda:	6093      	str	r3, [r2, #8]
      break;
 8000cdc:	e7b6      	b.n	8000c4c <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8000cde:	684d      	ldr	r5, [r1, #4]
 8000ce0:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000ce2:	6a01      	ldr	r1, [r0, #32]
 8000ce4:	f021 0110 	bic.w	r1, r1, #16
 8000ce8:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000cea:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8000cec:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8000cee:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8000cf2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8000cf6:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8000cfa:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8000cfe:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8000d00:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8000d02:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8000d04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8000d08:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8000d0c:	e7cb      	b.n	8000ca6 <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8000d0e:	684a      	ldr	r2, [r1, #4]
 8000d10:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8000d12:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000d14:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000d16:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000d1a:	f025 0501 	bic.w	r5, r5, #1
 8000d1e:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000d20:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8000d22:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000d24:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000d28:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8000d2c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8000d2e:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8000d30:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8000d32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8000d36:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8000d3a:	e7b4      	b.n	8000ca6 <HAL_TIM_ConfigClockSource+0x92>

08000d3c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8000d3c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8000d40:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	f04f 0302 	mov.w	r3, #2
 8000d48:	d014      	beq.n	8000d74 <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8000d4a:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8000d4c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8000d50:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8000d52:	68a3      	ldr	r3, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8000d54:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8000d56:	6849      	ldr	r1, [r1, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 8000d58:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 8000d5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8000d60:	430b      	orrs	r3, r1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8000d62:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8000d64:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8000d66:	60a3      	str	r3, [r4, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8000d6e:	2300      	movs	r3, #0
 8000d70:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8000d74:	4618      	mov	r0, r3

  return HAL_OK;
}
 8000d76:	bd30      	pop	{r4, r5, pc}

08000d78 <HAL_TIMEx_CommutCallback>:
 8000d78:	4770      	bx	lr

08000d7a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8000d7a:	4770      	bx	lr

08000d7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000d7c:	b538      	push	{r3, r4, r5, lr}
 8000d7e:	4605      	mov	r5, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000d80:	6803      	ldr	r3, [r0, #0]
 8000d82:	68c1      	ldr	r1, [r0, #12]
 8000d84:	691a      	ldr	r2, [r3, #16]
 8000d86:	2419      	movs	r4, #25
 8000d88:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000d8c:	430a      	orrs	r2, r1
 8000d8e:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000d90:	6882      	ldr	r2, [r0, #8]
 8000d92:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8000d94:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000d96:	4302      	orrs	r2, r0
 8000d98:	6968      	ldr	r0, [r5, #20]
  MODIFY_REG(huart->Instance->CR1,
 8000d9a:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8000d9e:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000da2:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8000da4:	430a      	orrs	r2, r1
 8000da6:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000da8:	695a      	ldr	r2, [r3, #20]
 8000daa:	69a9      	ldr	r1, [r5, #24]
 8000dac:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000db0:	430a      	orrs	r2, r1
 8000db2:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8000db4:	4a0d      	ldr	r2, [pc, #52]	; (8000dec <UART_SetConfig+0x70>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d114      	bne.n	8000de4 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8000dba:	f7ff fe09 	bl	80009d0 <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8000dbe:	4360      	muls	r0, r4
 8000dc0:	686c      	ldr	r4, [r5, #4]
 8000dc2:	2264      	movs	r2, #100	; 0x64
 8000dc4:	00a4      	lsls	r4, r4, #2
 8000dc6:	fbb0 f0f4 	udiv	r0, r0, r4
 8000dca:	fbb0 f4f2 	udiv	r4, r0, r2
 8000dce:	fb02 0314 	mls	r3, r2, r4, r0
 8000dd2:	011b      	lsls	r3, r3, #4
 8000dd4:	3332      	adds	r3, #50	; 0x32
 8000dd6:	fbb3 f3f2 	udiv	r3, r3, r2
 8000dda:	6829      	ldr	r1, [r5, #0]
 8000ddc:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8000de0:	608b      	str	r3, [r1, #8]
 8000de2:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8000de4:	f7ff fde4 	bl	80009b0 <HAL_RCC_GetPCLK1Freq>
 8000de8:	e7e9      	b.n	8000dbe <UART_SetConfig+0x42>
 8000dea:	bf00      	nop
 8000dec:	40013800 	.word	0x40013800

08000df0 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8000df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000df2:	4604      	mov	r4, r0
 8000df4:	460e      	mov	r6, r1
 8000df6:	4617      	mov	r7, r2
 8000df8:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8000dfa:	6821      	ldr	r1, [r4, #0]
 8000dfc:	680b      	ldr	r3, [r1, #0]
 8000dfe:	ea36 0303 	bics.w	r3, r6, r3
 8000e02:	d101      	bne.n	8000e08 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8000e04:	2000      	movs	r0, #0
}
 8000e06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000e08:	1c6b      	adds	r3, r5, #1
 8000e0a:	d0f7      	beq.n	8000dfc <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000e0c:	b995      	cbnz	r5, 8000e34 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000e0e:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8000e10:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000e12:	68da      	ldr	r2, [r3, #12]
 8000e14:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8000e18:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000e1a:	695a      	ldr	r2, [r3, #20]
 8000e1c:	f022 0201 	bic.w	r2, r2, #1
 8000e20:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8000e22:	2320      	movs	r3, #32
 8000e24:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8000e28:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8000e32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000e34:	f7ff f9d4 	bl	80001e0 <HAL_GetTick>
 8000e38:	1bc0      	subs	r0, r0, r7
 8000e3a:	4285      	cmp	r5, r0
 8000e3c:	d2dd      	bcs.n	8000dfa <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8000e3e:	e7e6      	b.n	8000e0e <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08000e40 <HAL_UART_Init>:
{
 8000e40:	b510      	push	{r4, lr}
  if (huart == NULL)
 8000e42:	4604      	mov	r4, r0
 8000e44:	b340      	cbz	r0, 8000e98 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8000e46:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000e4a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000e4e:	b91b      	cbnz	r3, 8000e58 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8000e50:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8000e54:	f000 ff0a 	bl	8001c6c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8000e58:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8000e5a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8000e5c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8000e60:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8000e62:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8000e64:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000e68:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8000e6a:	f7ff ff87 	bl	8000d7c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000e6e:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000e70:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000e72:	691a      	ldr	r2, [r3, #16]
 8000e74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000e78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000e7a:	695a      	ldr	r2, [r3, #20]
 8000e7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000e80:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8000e82:	68da      	ldr	r2, [r3, #12]
 8000e84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000e88:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8000e8a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000e8c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8000e8e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8000e92:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8000e96:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000e98:	2001      	movs	r0, #1
}
 8000e9a:	bd10      	pop	{r4, pc}

08000e9c <HAL_UART_Transmit>:
{
 8000e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ea0:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8000ea2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8000ea6:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8000ea8:	2b20      	cmp	r3, #32
{
 8000eaa:	460d      	mov	r5, r1
 8000eac:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8000eae:	d14e      	bne.n	8000f4e <HAL_UART_Transmit+0xb2>
    if ((pData == NULL) || (Size == 0U))
 8000eb0:	2900      	cmp	r1, #0
 8000eb2:	d049      	beq.n	8000f48 <HAL_UART_Transmit+0xac>
 8000eb4:	2a00      	cmp	r2, #0
 8000eb6:	d047      	beq.n	8000f48 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8000eb8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d046      	beq.n	8000f4e <HAL_UART_Transmit+0xb2>
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000eca:	2321      	movs	r3, #33	; 0x21
 8000ecc:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8000ed0:	f7ff f986 	bl	80001e0 <HAL_GetTick>
 8000ed4:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 8000ed6:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8000eda:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8000ede:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8000ee0:	b29b      	uxth	r3, r3
 8000ee2:	b96b      	cbnz	r3, 8000f00 <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8000ee4:	463b      	mov	r3, r7
 8000ee6:	4632      	mov	r2, r6
 8000ee8:	2140      	movs	r1, #64	; 0x40
 8000eea:	4620      	mov	r0, r4
 8000eec:	f7ff ff80 	bl	8000df0 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000ef0:	b9a8      	cbnz	r0, 8000f1e <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8000ef2:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8000ef4:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8000ef8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8000efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8000f00:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000f02:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8000f04:	3b01      	subs	r3, #1
 8000f06:	b29b      	uxth	r3, r3
 8000f08:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000f0a:	68a3      	ldr	r3, [r4, #8]
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000f0c:	2180      	movs	r1, #128	; 0x80
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000f0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000f12:	4620      	mov	r0, r4
 8000f14:	463b      	mov	r3, r7
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000f16:	d10e      	bne.n	8000f36 <HAL_UART_Transmit+0x9a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000f18:	f7ff ff6a 	bl	8000df0 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000f1c:	b110      	cbz	r0, 8000f24 <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 8000f1e:	2003      	movs	r0, #3
 8000f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8000f24:	882b      	ldrh	r3, [r5, #0]
 8000f26:	6822      	ldr	r2, [r4, #0]
 8000f28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000f2c:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8000f2e:	6923      	ldr	r3, [r4, #16]
 8000f30:	b943      	cbnz	r3, 8000f44 <HAL_UART_Transmit+0xa8>
          pData += 2U;
 8000f32:	3502      	adds	r5, #2
 8000f34:	e7d3      	b.n	8000ede <HAL_UART_Transmit+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000f36:	f7ff ff5b 	bl	8000df0 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000f3a:	2800      	cmp	r0, #0
 8000f3c:	d1ef      	bne.n	8000f1e <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8000f3e:	6823      	ldr	r3, [r4, #0]
 8000f40:	782a      	ldrb	r2, [r5, #0]
 8000f42:	605a      	str	r2, [r3, #4]
 8000f44:	3501      	adds	r5, #1
 8000f46:	e7ca      	b.n	8000ede <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8000f48:	2001      	movs	r0, #1
 8000f4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8000f4e:	2002      	movs	r0, #2
}
 8000f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000f54 <replac_string>:
extern UART_HandleTypeDef huart3;

///////////////////////// Функция для замены смволов \r и \n на пробелы ////////////////////////////
void replac_string(char *src)
{
	if(!src) return;
 8000f54:	b110      	cbz	r0, 8000f5c <replac_string+0x8>

	for(;*src; src++)
	{
		if(*src == '\n' || *src == '\r') *src = ' ';
 8000f56:	2220      	movs	r2, #32
	for(;*src; src++)
 8000f58:	7803      	ldrb	r3, [r0, #0]
 8000f5a:	b903      	cbnz	r3, 8000f5e <replac_string+0xa>
 8000f5c:	4770      	bx	lr
		if(*src == '\n' || *src == '\r') *src = ' ';
 8000f5e:	2b0a      	cmp	r3, #10
 8000f60:	d001      	beq.n	8000f66 <replac_string+0x12>
 8000f62:	2b0d      	cmp	r3, #13
 8000f64:	d100      	bne.n	8000f68 <replac_string+0x14>
 8000f66:	7002      	strb	r2, [r0, #0]
	for(;*src; src++)
 8000f68:	3001      	adds	r0, #1
 8000f6a:	e7f5      	b.n	8000f58 <replac_string+0x4>

08000f6c <set_comand>:
	}
}

///////////////////////// Функция для отправки настроечных команд, в цикле лучше не использовать ////////////////////////////
void set_comand(char *buff)
{
 8000f6c:	b570      	push	{r4, r5, r6, lr}
 8000f6e:	4606      	mov	r6, r0
 8000f70:	b0ca      	sub	sp, #296	; 0x128
	uint8_t count_err = 0;
	char str[SEND_STR_SIZE] = {0,};
 8000f72:	ac02      	add	r4, sp, #8
 8000f74:	2280      	movs	r2, #128	; 0x80
 8000f76:	2100      	movs	r1, #0
 8000f78:	4620      	mov	r0, r4
 8000f7a:	f001 f83d 	bl	8001ff8 <memset>
	snprintf(str, SEND_STR_SIZE, "%s\r\n", buff);
 8000f7e:	4633      	mov	r3, r6
 8000f80:	4a6d      	ldr	r2, [pc, #436]	; (8001138 <set_comand+0x1cc>)
 8000f82:	2180      	movs	r1, #128	; 0x80
 8000f84:	4620      	mov	r0, r4
 8000f86:	f001 f83f 	bl	8002008 <sniprintf>
	HAL_UART_Transmit(GSM, (uint8_t*)str, strlen(str), 1000);
 8000f8a:	4620      	mov	r0, r4
 8000f8c:	f7ff f8de 	bl	800014c <strlen>
 8000f90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f94:	b282      	uxth	r2, r0
 8000f96:	4621      	mov	r1, r4
 8000f98:	4868      	ldr	r0, [pc, #416]	; (800113c <set_comand+0x1d0>)
 8000f9a:	f7ff ff7f 	bl	8000e9c <HAL_UART_Transmit>
	HAL_Delay(200);
 8000f9e:	20c8      	movs	r0, #200	; 0xc8
 8000fa0:	f7ff f924 	bl	80001ec <HAL_Delay>

	memset(str, 0, SEND_STR_SIZE);
 8000fa4:	2280      	movs	r2, #128	; 0x80
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	4620      	mov	r0, r4
 8000faa:	f001 f825 	bl	8001ff8 <memset>
 8000fae:	251e      	movs	r5, #30

	for(uint8_t i = 0; i < 30; i++)
	{
		if(gsm_available()) //если модуль что-то прислал
 8000fb0:	f000 ff84 	bl	8001ebc <gsm_available>
 8000fb4:	2800      	cmp	r0, #0
 8000fb6:	f000 809b 	beq.w	80010f0 <set_comand+0x184>
 8000fba:	2500      	movs	r5, #0
		{
			uint16_t i = 0;

			while(gsm_available())
 8000fbc:	f000 ff7e 	bl	8001ebc <gsm_available>
 8000fc0:	b128      	cbz	r0, 8000fce <set_comand+0x62>
			{
				str[i++] = gsm_read();
 8000fc2:	f000 ff87 	bl	8001ed4 <gsm_read>
 8000fc6:	5560      	strb	r0, [r4, r5]
 8000fc8:	3501      	adds	r5, #1
				if(i > SEND_STR_SIZE - 1) break;
 8000fca:	2d80      	cmp	r5, #128	; 0x80
 8000fcc:	d12f      	bne.n	800102e <set_comand+0xc2>
				HAL_Delay(1);
			}

			replac_string(str);
 8000fce:	4620      	mov	r0, r4
 8000fd0:	f7ff ffc0 	bl	8000f54 <replac_string>

			char *p = NULL;

			if((p = strstr(str, "+CPAS:")) != NULL)
 8000fd4:	495a      	ldr	r1, [pc, #360]	; (8001140 <set_comand+0x1d4>)
 8000fd6:	4620      	mov	r0, r4
 8000fd8:	f001 f858 	bl	800208c <strstr>
 8000fdc:	4605      	mov	r5, r0
 8000fde:	bb50      	cbnz	r0, 8001036 <set_comand+0xca>
						HAL_Delay(100);
						//if(count_err > 49) HAL_NVIC_SystemReset();
					}
				}
			}
			else if((p = strstr(str, "+CREG:")) != NULL)
 8000fe0:	4958      	ldr	r1, [pc, #352]	; (8001144 <set_comand+0x1d8>)
 8000fe2:	4620      	mov	r0, r4
 8000fe4:	f001 f852 	bl	800208c <strstr>
 8000fe8:	4605      	mov	r5, r0
 8000fea:	2800      	cmp	r0, #0
 8000fec:	d043      	beq.n	8001076 <set_comand+0x10a>
			{
				if(strstr(str, "0,1") == NULL)
 8000fee:	4956      	ldr	r1, [pc, #344]	; (8001148 <set_comand+0x1dc>)
 8000ff0:	4620      	mov	r0, r4
 8000ff2:	f001 f84b 	bl	800208c <strstr>
 8000ff6:	2800      	cmp	r0, #0
 8000ff8:	d162      	bne.n	80010c0 <set_comand+0x154>
				{
					HAL_UART_Transmit(DEBUG, (uint8_t*)p, strlen(p), 1000);
 8000ffa:	4628      	mov	r0, r5
 8000ffc:	f7ff f8a6 	bl	800014c <strlen>
 8001000:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001004:	b282      	uxth	r2, r0
 8001006:	4629      	mov	r1, r5
 8001008:	4850      	ldr	r0, [pc, #320]	; (800114c <set_comand+0x1e0>)
 800100a:	f7ff ff47 	bl	8000e9c <HAL_UART_Transmit>
					HAL_UART_Transmit(DEBUG, (uint8_t*)"\n+CREG not ready, must be '0,1'\n", strlen("\n+CREG not ready, must be '0,1'\n"), 1000);
 800100e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001012:	2220      	movs	r2, #32
 8001014:	494e      	ldr	r1, [pc, #312]	; (8001150 <set_comand+0x1e4>)
 8001016:	484d      	ldr	r0, [pc, #308]	; (800114c <set_comand+0x1e0>)
 8001018:	f7ff ff40 	bl	8000e9c <HAL_UART_Transmit>

					while(1) // мигаем 5 секунд и ресетим плату
					{
						count_err++;
						HAL_GPIO_TogglePin(ER_LED_GPIO_Port, ER_LED_Pin);
 800101c:	4c4d      	ldr	r4, [pc, #308]	; (8001154 <set_comand+0x1e8>)
 800101e:	4620      	mov	r0, r4
 8001020:	2180      	movs	r1, #128	; 0x80
 8001022:	f7ff fa46 	bl	80004b2 <HAL_GPIO_TogglePin>
						HAL_Delay(100);
 8001026:	2064      	movs	r0, #100	; 0x64
 8001028:	f7ff f8e0 	bl	80001ec <HAL_Delay>
 800102c:	e7f7      	b.n	800101e <set_comand+0xb2>
				HAL_Delay(1);
 800102e:	2001      	movs	r0, #1
 8001030:	f7ff f8dc 	bl	80001ec <HAL_Delay>
 8001034:	e7c2      	b.n	8000fbc <set_comand+0x50>
				if(strstr(str, "0") == NULL)
 8001036:	2130      	movs	r1, #48	; 0x30
 8001038:	4620      	mov	r0, r4
 800103a:	f001 f819 	bl	8002070 <strchr>
 800103e:	2800      	cmp	r0, #0
 8001040:	d13e      	bne.n	80010c0 <set_comand+0x154>
					HAL_UART_Transmit(DEBUG, (uint8_t*)p, strlen(p), 1000);
 8001042:	4628      	mov	r0, r5
 8001044:	f7ff f882 	bl	800014c <strlen>
 8001048:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800104c:	b282      	uxth	r2, r0
 800104e:	4629      	mov	r1, r5
 8001050:	483e      	ldr	r0, [pc, #248]	; (800114c <set_comand+0x1e0>)
 8001052:	f7ff ff23 	bl	8000e9c <HAL_UART_Transmit>
					HAL_UART_Transmit(DEBUG, (uint8_t*)"\n+CPAS not ready, must be '0'\n", strlen("\n+CPAS not ready, must be '0'\n"), 1000);
 8001056:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800105a:	221e      	movs	r2, #30
 800105c:	493e      	ldr	r1, [pc, #248]	; (8001158 <set_comand+0x1ec>)
 800105e:	483b      	ldr	r0, [pc, #236]	; (800114c <set_comand+0x1e0>)
 8001060:	f7ff ff1c 	bl	8000e9c <HAL_UART_Transmit>
						HAL_GPIO_TogglePin(ER_LED_GPIO_Port, ER_LED_Pin);
 8001064:	4c3b      	ldr	r4, [pc, #236]	; (8001154 <set_comand+0x1e8>)
 8001066:	4620      	mov	r0, r4
 8001068:	2180      	movs	r1, #128	; 0x80
 800106a:	f7ff fa22 	bl	80004b2 <HAL_GPIO_TogglePin>
						HAL_Delay(100);
 800106e:	2064      	movs	r0, #100	; 0x64
 8001070:	f7ff f8bc 	bl	80001ec <HAL_Delay>
 8001074:	e7f7      	b.n	8001066 <set_comand+0xfa>
						//if(count_err > 49) HAL_NVIC_SystemReset();
					}
				}
			}
			else if((p = strstr(str, "+CGATT:")) != NULL)
 8001076:	4939      	ldr	r1, [pc, #228]	; (800115c <set_comand+0x1f0>)
 8001078:	4620      	mov	r0, r4
 800107a:	f001 f807 	bl	800208c <strstr>
 800107e:	4605      	mov	r5, r0
 8001080:	b1f0      	cbz	r0, 80010c0 <set_comand+0x154>
			{
				if(strstr(str, "1") == NULL)
 8001082:	2131      	movs	r1, #49	; 0x31
 8001084:	4620      	mov	r0, r4
 8001086:	f000 fff3 	bl	8002070 <strchr>
 800108a:	b9c8      	cbnz	r0, 80010c0 <set_comand+0x154>
				{
					HAL_UART_Transmit(DEBUG, (uint8_t*)p, strlen(p), 1000);
 800108c:	4628      	mov	r0, r5
 800108e:	f7ff f85d 	bl	800014c <strlen>
 8001092:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001096:	b282      	uxth	r2, r0
 8001098:	4629      	mov	r1, r5
 800109a:	482c      	ldr	r0, [pc, #176]	; (800114c <set_comand+0x1e0>)
 800109c:	f7ff fefe 	bl	8000e9c <HAL_UART_Transmit>
					HAL_UART_Transmit(DEBUG, (uint8_t*)"\n+CGATT not ready, must be '1'\n", strlen("\n+CGATT not ready, must be '1'\n"), 1000);
 80010a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010a4:	221f      	movs	r2, #31
 80010a6:	492e      	ldr	r1, [pc, #184]	; (8001160 <set_comand+0x1f4>)
 80010a8:	4828      	ldr	r0, [pc, #160]	; (800114c <set_comand+0x1e0>)
 80010aa:	f7ff fef7 	bl	8000e9c <HAL_UART_Transmit>

					while(1) // мигаем 5 секунд и ресетим плату
					{
						count_err++;
						HAL_GPIO_TogglePin(ER_LED_GPIO_Port, ER_LED_Pin);
 80010ae:	4c29      	ldr	r4, [pc, #164]	; (8001154 <set_comand+0x1e8>)
 80010b0:	4620      	mov	r0, r4
 80010b2:	2180      	movs	r1, #128	; 0x80
 80010b4:	f7ff f9fd 	bl	80004b2 <HAL_GPIO_TogglePin>
						HAL_Delay(100);
 80010b8:	2064      	movs	r0, #100	; 0x64
 80010ba:	f7ff f897 	bl	80001ec <HAL_Delay>
 80010be:	e7f7      	b.n	80010b0 <set_comand+0x144>
				}
			}

			p = 0;

			char dbg_str[SEND_STR_SIZE + 32] = {0,};
 80010c0:	22a0      	movs	r2, #160	; 0xa0
 80010c2:	2100      	movs	r1, #0
 80010c4:	a822      	add	r0, sp, #136	; 0x88
 80010c6:	f000 ff97 	bl	8001ff8 <memset>
			snprintf(dbg_str, SEND_STR_SIZE + 32, "Set %s %s\n", buff, str);
 80010ca:	4633      	mov	r3, r6
 80010cc:	4a25      	ldr	r2, [pc, #148]	; (8001164 <set_comand+0x1f8>)
 80010ce:	21a0      	movs	r1, #160	; 0xa0
 80010d0:	9400      	str	r4, [sp, #0]
 80010d2:	a822      	add	r0, sp, #136	; 0x88
 80010d4:	f000 ff98 	bl	8002008 <sniprintf>
			HAL_UART_Transmit(DEBUG, (uint8_t*)dbg_str, strlen(dbg_str), 1000);
 80010d8:	a822      	add	r0, sp, #136	; 0x88
 80010da:	f7ff f837 	bl	800014c <strlen>
 80010de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010e2:	b282      	uxth	r2, r0
 80010e4:	a922      	add	r1, sp, #136	; 0x88
 80010e6:	4819      	ldr	r0, [pc, #100]	; (800114c <set_comand+0x1e0>)
 80010e8:	f7ff fed8 	bl	8000e9c <HAL_UART_Transmit>
		count_err++;
		HAL_GPIO_TogglePin(ER_LED_GPIO_Port, ER_LED_Pin);
		HAL_Delay(100);
		//if(count_err > 49) HAL_NVIC_SystemReset();
	}
}
 80010ec:	b04a      	add	sp, #296	; 0x128
 80010ee:	bd70      	pop	{r4, r5, r6, pc}
		HAL_Delay(500);
 80010f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010f4:	3d01      	subs	r5, #1
 80010f6:	f7ff f879 	bl	80001ec <HAL_Delay>
	for(uint8_t i = 0; i < 30; i++)
 80010fa:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 80010fe:	f47f af57 	bne.w	8000fb0 <set_comand+0x44>
	HAL_UART_Transmit(DEBUG, (uint8_t*)"Not reply ", strlen("Not reply "), 1000);
 8001102:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001106:	220a      	movs	r2, #10
 8001108:	4917      	ldr	r1, [pc, #92]	; (8001168 <set_comand+0x1fc>)
 800110a:	4810      	ldr	r0, [pc, #64]	; (800114c <set_comand+0x1e0>)
 800110c:	f7ff fec6 	bl	8000e9c <HAL_UART_Transmit>
	HAL_UART_Transmit(DEBUG, (uint8_t*)buff, strlen(buff), 1000);
 8001110:	4630      	mov	r0, r6
 8001112:	f7ff f81b 	bl	800014c <strlen>
 8001116:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800111a:	b282      	uxth	r2, r0
 800111c:	4631      	mov	r1, r6
 800111e:	480b      	ldr	r0, [pc, #44]	; (800114c <set_comand+0x1e0>)
 8001120:	f7ff febc 	bl	8000e9c <HAL_UART_Transmit>
		HAL_GPIO_TogglePin(ER_LED_GPIO_Port, ER_LED_Pin);
 8001124:	4c0b      	ldr	r4, [pc, #44]	; (8001154 <set_comand+0x1e8>)
 8001126:	4620      	mov	r0, r4
 8001128:	2180      	movs	r1, #128	; 0x80
 800112a:	f7ff f9c2 	bl	80004b2 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 800112e:	2064      	movs	r0, #100	; 0x64
 8001130:	f7ff f85c 	bl	80001ec <HAL_Delay>
 8001134:	e7f7      	b.n	8001126 <set_comand+0x1ba>
 8001136:	bf00      	nop
 8001138:	0800295c 	.word	0x0800295c
 800113c:	20000568 	.word	0x20000568
 8001140:	08002961 	.word	0x08002961
 8001144:	08002987 	.word	0x08002987
 8001148:	0800298e 	.word	0x0800298e
 800114c:	20000528 	.word	0x20000528
 8001150:	08002992 	.word	0x08002992
 8001154:	40010800 	.word	0x40010800
 8001158:	08002968 	.word	0x08002968
 800115c:	080029b3 	.word	0x080029b3
 8001160:	080029bb 	.word	0x080029bb
 8001164:	080029db 	.word	0x080029db
 8001168:	080029e6 	.word	0x080029e6

0800116c <chek_status>:

///////////////////////// Функция для проверки статуса ////////////////////////////
void chek_status(char *buff, uint8_t state)
{
 800116c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800116e:	4606      	mov	r6, r0
 8001170:	b0cb      	sub	sp, #300	; 0x12c
	uint8_t count_err = 0;
	char str[SEND_STR_SIZE] = {0,};
 8001172:	ac02      	add	r4, sp, #8
 8001174:	2280      	movs	r2, #128	; 0x80
{
 8001176:	460f      	mov	r7, r1
	char str[SEND_STR_SIZE] = {0,};
 8001178:	4620      	mov	r0, r4
 800117a:	2100      	movs	r1, #0
 800117c:	f000 ff3c 	bl	8001ff8 <memset>
	snprintf(str, SEND_STR_SIZE, "%s\r\n", buff);
 8001180:	4633      	mov	r3, r6
 8001182:	4a67      	ldr	r2, [pc, #412]	; (8001320 <chek_status+0x1b4>)
 8001184:	2180      	movs	r1, #128	; 0x80
 8001186:	4620      	mov	r0, r4
 8001188:	f000 ff3e 	bl	8002008 <sniprintf>
	HAL_UART_Transmit(GSM, (uint8_t*)str, strlen(str), 1000);
 800118c:	4620      	mov	r0, r4
 800118e:	f7fe ffdd 	bl	800014c <strlen>
 8001192:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001196:	b282      	uxth	r2, r0
 8001198:	4621      	mov	r1, r4
 800119a:	4862      	ldr	r0, [pc, #392]	; (8001324 <chek_status+0x1b8>)
 800119c:	f7ff fe7e 	bl	8000e9c <HAL_UART_Transmit>
	HAL_Delay(200);
 80011a0:	20c8      	movs	r0, #200	; 0xc8
 80011a2:	f7ff f823 	bl	80001ec <HAL_Delay>

	memset(str, 0, SEND_STR_SIZE);
 80011a6:	2280      	movs	r2, #128	; 0x80
 80011a8:	2100      	movs	r1, #0
 80011aa:	4620      	mov	r0, r4
 80011ac:	f000 ff24 	bl	8001ff8 <memset>
 80011b0:	251e      	movs	r5, #30

	for(uint8_t i = 0; i < 30; i++)
	{
		if(gsm_available()) //если модуль что-то прислал
 80011b2:	f000 fe83 	bl	8001ebc <gsm_available>
 80011b6:	2800      	cmp	r0, #0
 80011b8:	f000 808e 	beq.w	80012d8 <chek_status+0x16c>
 80011bc:	2500      	movs	r5, #0
		{
			uint16_t i = 0;

			while(gsm_available())
 80011be:	f000 fe7d 	bl	8001ebc <gsm_available>
 80011c2:	b128      	cbz	r0, 80011d0 <chek_status+0x64>
			{
				str[i++] = gsm_read();
 80011c4:	f000 fe86 	bl	8001ed4 <gsm_read>
 80011c8:	5560      	strb	r0, [r4, r5]
 80011ca:	3501      	adds	r5, #1
				if(i > SEND_STR_SIZE - 1) break;
 80011cc:	2d80      	cmp	r5, #128	; 0x80
 80011ce:	d11f      	bne.n	8001210 <chek_status+0xa4>
				HAL_Delay(1);
			}

			replac_string(str);
 80011d0:	4620      	mov	r0, r4
 80011d2:	f7ff febf 	bl	8000f54 <replac_string>

			if(strstr(str, "STATE:") != NULL)
 80011d6:	4954      	ldr	r1, [pc, #336]	; (8001328 <chek_status+0x1bc>)
 80011d8:	4620      	mov	r0, r4
 80011da:	f000 ff57 	bl	800208c <strstr>
 80011de:	b9d8      	cbnz	r0, 8001218 <chek_status+0xac>
						//if(count_err > 49) HAL_NVIC_SystemReset();
					}
				}
			}

			char dbg_str[SEND_STR_SIZE + 32] = {0,};
 80011e0:	22a0      	movs	r2, #160	; 0xa0
 80011e2:	2100      	movs	r1, #0
 80011e4:	a822      	add	r0, sp, #136	; 0x88
 80011e6:	f000 ff07 	bl	8001ff8 <memset>
			snprintf(dbg_str, SEND_STR_SIZE + 32, "Set %s %s\n", buff, str);
 80011ea:	4633      	mov	r3, r6
 80011ec:	4a4f      	ldr	r2, [pc, #316]	; (800132c <chek_status+0x1c0>)
 80011ee:	21a0      	movs	r1, #160	; 0xa0
 80011f0:	9400      	str	r4, [sp, #0]
 80011f2:	a822      	add	r0, sp, #136	; 0x88
 80011f4:	f000 ff08 	bl	8002008 <sniprintf>
			HAL_UART_Transmit(DEBUG, (uint8_t*)dbg_str, strlen(dbg_str), 1000);
 80011f8:	a822      	add	r0, sp, #136	; 0x88
 80011fa:	f7fe ffa7 	bl	800014c <strlen>
 80011fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001202:	b282      	uxth	r2, r0
 8001204:	a922      	add	r1, sp, #136	; 0x88
 8001206:	484a      	ldr	r0, [pc, #296]	; (8001330 <chek_status+0x1c4>)
 8001208:	f7ff fe48 	bl	8000e9c <HAL_UART_Transmit>
		count_err++;
		HAL_GPIO_TogglePin(ER_LED_GPIO_Port, ER_LED_Pin);
		HAL_Delay(100);
		//if(count_err > 49) HAL_NVIC_SystemReset();
	}
}
 800120c:	b04b      	add	sp, #300	; 0x12c
 800120e:	bdf0      	pop	{r4, r5, r6, r7, pc}
				HAL_Delay(1);
 8001210:	2001      	movs	r0, #1
 8001212:	f7fe ffeb 	bl	80001ec <HAL_Delay>
 8001216:	e7d2      	b.n	80011be <chek_status+0x52>
				if((state == 1) && (strstr(str, "INITIAL") == NULL))
 8001218:	2f01      	cmp	r7, #1
 800121a:	d115      	bne.n	8001248 <chek_status+0xdc>
 800121c:	4945      	ldr	r1, [pc, #276]	; (8001334 <chek_status+0x1c8>)
 800121e:	4620      	mov	r0, r4
 8001220:	f000 ff34 	bl	800208c <strstr>
 8001224:	2800      	cmp	r0, #0
 8001226:	d1db      	bne.n	80011e0 <chek_status+0x74>
					HAL_UART_Transmit(DEBUG, (uint8_t*)"\nNot IP INITIAL\n", strlen("\nNot IP INITIAL\n"), 1000);
 8001228:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800122c:	2210      	movs	r2, #16
 800122e:	4942      	ldr	r1, [pc, #264]	; (8001338 <chek_status+0x1cc>)
 8001230:	483f      	ldr	r0, [pc, #252]	; (8001330 <chek_status+0x1c4>)
 8001232:	f7ff fe33 	bl	8000e9c <HAL_UART_Transmit>
						HAL_GPIO_TogglePin(ER_LED_GPIO_Port, ER_LED_Pin);
 8001236:	4c41      	ldr	r4, [pc, #260]	; (800133c <chek_status+0x1d0>)
 8001238:	4620      	mov	r0, r4
 800123a:	2180      	movs	r1, #128	; 0x80
 800123c:	f7ff f939 	bl	80004b2 <HAL_GPIO_TogglePin>
						HAL_Delay(100);
 8001240:	2064      	movs	r0, #100	; 0x64
 8001242:	f7fe ffd3 	bl	80001ec <HAL_Delay>
 8001246:	e7f7      	b.n	8001238 <chek_status+0xcc>
				else if((state == 2) && (strstr(str, "START") == NULL))
 8001248:	2f02      	cmp	r7, #2
 800124a:	d115      	bne.n	8001278 <chek_status+0x10c>
 800124c:	493c      	ldr	r1, [pc, #240]	; (8001340 <chek_status+0x1d4>)
 800124e:	4620      	mov	r0, r4
 8001250:	f000 ff1c 	bl	800208c <strstr>
 8001254:	2800      	cmp	r0, #0
 8001256:	d1c3      	bne.n	80011e0 <chek_status+0x74>
					HAL_UART_Transmit(DEBUG, (uint8_t*)"\nNot IP START\n", strlen("\nNot IP START\n"), 1000);
 8001258:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800125c:	220e      	movs	r2, #14
 800125e:	4939      	ldr	r1, [pc, #228]	; (8001344 <chek_status+0x1d8>)
 8001260:	4833      	ldr	r0, [pc, #204]	; (8001330 <chek_status+0x1c4>)
 8001262:	f7ff fe1b 	bl	8000e9c <HAL_UART_Transmit>
						HAL_GPIO_TogglePin(ER_LED_GPIO_Port, ER_LED_Pin);
 8001266:	4c35      	ldr	r4, [pc, #212]	; (800133c <chek_status+0x1d0>)
 8001268:	4620      	mov	r0, r4
 800126a:	2180      	movs	r1, #128	; 0x80
 800126c:	f7ff f921 	bl	80004b2 <HAL_GPIO_TogglePin>
						HAL_Delay(100);
 8001270:	2064      	movs	r0, #100	; 0x64
 8001272:	f7fe ffbb 	bl	80001ec <HAL_Delay>
 8001276:	e7f7      	b.n	8001268 <chek_status+0xfc>
				else if((state == 3) && (strstr(str, "GPRSACT") == NULL))
 8001278:	2f03      	cmp	r7, #3
 800127a:	d115      	bne.n	80012a8 <chek_status+0x13c>
 800127c:	4932      	ldr	r1, [pc, #200]	; (8001348 <chek_status+0x1dc>)
 800127e:	4620      	mov	r0, r4
 8001280:	f000 ff04 	bl	800208c <strstr>
 8001284:	2800      	cmp	r0, #0
 8001286:	d1ab      	bne.n	80011e0 <chek_status+0x74>
					HAL_UART_Transmit(DEBUG, (uint8_t*)"\nNot IP GPRSACT\n", strlen("\nNot IP GPRSACT\n"), 1000);
 8001288:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800128c:	2210      	movs	r2, #16
 800128e:	492f      	ldr	r1, [pc, #188]	; (800134c <chek_status+0x1e0>)
 8001290:	4827      	ldr	r0, [pc, #156]	; (8001330 <chek_status+0x1c4>)
 8001292:	f7ff fe03 	bl	8000e9c <HAL_UART_Transmit>
						HAL_GPIO_TogglePin(ER_LED_GPIO_Port, ER_LED_Pin);
 8001296:	4c29      	ldr	r4, [pc, #164]	; (800133c <chek_status+0x1d0>)
 8001298:	4620      	mov	r0, r4
 800129a:	2180      	movs	r1, #128	; 0x80
 800129c:	f7ff f909 	bl	80004b2 <HAL_GPIO_TogglePin>
						HAL_Delay(100);
 80012a0:	2064      	movs	r0, #100	; 0x64
 80012a2:	f7fe ffa3 	bl	80001ec <HAL_Delay>
 80012a6:	e7f7      	b.n	8001298 <chek_status+0x12c>
				else if((state == 4) && (strstr(str, "STATUS") == NULL))
 80012a8:	2f04      	cmp	r7, #4
 80012aa:	d199      	bne.n	80011e0 <chek_status+0x74>
 80012ac:	4928      	ldr	r1, [pc, #160]	; (8001350 <chek_status+0x1e4>)
 80012ae:	4620      	mov	r0, r4
 80012b0:	f000 feec 	bl	800208c <strstr>
 80012b4:	2800      	cmp	r0, #0
 80012b6:	d193      	bne.n	80011e0 <chek_status+0x74>
					HAL_UART_Transmit(DEBUG, (uint8_t*)"\nNot IP STATUS\n", strlen("\nNot IP STATUS\n"), 1000);
 80012b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012bc:	220f      	movs	r2, #15
 80012be:	4925      	ldr	r1, [pc, #148]	; (8001354 <chek_status+0x1e8>)
 80012c0:	481b      	ldr	r0, [pc, #108]	; (8001330 <chek_status+0x1c4>)
 80012c2:	f7ff fdeb 	bl	8000e9c <HAL_UART_Transmit>
						HAL_GPIO_TogglePin(ER_LED_GPIO_Port, ER_LED_Pin);
 80012c6:	4c1d      	ldr	r4, [pc, #116]	; (800133c <chek_status+0x1d0>)
 80012c8:	4620      	mov	r0, r4
 80012ca:	2180      	movs	r1, #128	; 0x80
 80012cc:	f7ff f8f1 	bl	80004b2 <HAL_GPIO_TogglePin>
						HAL_Delay(100);
 80012d0:	2064      	movs	r0, #100	; 0x64
 80012d2:	f7fe ff8b 	bl	80001ec <HAL_Delay>
 80012d6:	e7f7      	b.n	80012c8 <chek_status+0x15c>
		HAL_Delay(500);
 80012d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012dc:	3d01      	subs	r5, #1
 80012de:	f7fe ff85 	bl	80001ec <HAL_Delay>
	for(uint8_t i = 0; i < 30; i++)
 80012e2:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 80012e6:	f47f af64 	bne.w	80011b2 <chek_status+0x46>
	HAL_UART_Transmit(DEBUG, (uint8_t*)"Not reply ", strlen("Not reply "), 1000);
 80012ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ee:	220a      	movs	r2, #10
 80012f0:	4919      	ldr	r1, [pc, #100]	; (8001358 <chek_status+0x1ec>)
 80012f2:	480f      	ldr	r0, [pc, #60]	; (8001330 <chek_status+0x1c4>)
 80012f4:	f7ff fdd2 	bl	8000e9c <HAL_UART_Transmit>
	HAL_UART_Transmit(DEBUG, (uint8_t*)buff, strlen(buff), 1000);
 80012f8:	4630      	mov	r0, r6
 80012fa:	f7fe ff27 	bl	800014c <strlen>
 80012fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001302:	b282      	uxth	r2, r0
 8001304:	4631      	mov	r1, r6
 8001306:	480a      	ldr	r0, [pc, #40]	; (8001330 <chek_status+0x1c4>)
 8001308:	f7ff fdc8 	bl	8000e9c <HAL_UART_Transmit>
		HAL_GPIO_TogglePin(ER_LED_GPIO_Port, ER_LED_Pin);
 800130c:	4c0b      	ldr	r4, [pc, #44]	; (800133c <chek_status+0x1d0>)
 800130e:	4620      	mov	r0, r4
 8001310:	2180      	movs	r1, #128	; 0x80
 8001312:	f7ff f8ce 	bl	80004b2 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8001316:	2064      	movs	r0, #100	; 0x64
 8001318:	f7fe ff68 	bl	80001ec <HAL_Delay>
 800131c:	e7f7      	b.n	800130e <chek_status+0x1a2>
 800131e:	bf00      	nop
 8001320:	0800295c 	.word	0x0800295c
 8001324:	20000568 	.word	0x20000568
 8001328:	080028f8 	.word	0x080028f8
 800132c:	080029db 	.word	0x080029db
 8001330:	20000528 	.word	0x20000528
 8001334:	080028ff 	.word	0x080028ff
 8001338:	08002907 	.word	0x08002907
 800133c:	40010800 	.word	0x40010800
 8001340:	08002918 	.word	0x08002918
 8001344:	0800291e 	.word	0x0800291e
 8001348:	0800292d 	.word	0x0800292d
 800134c:	08002935 	.word	0x08002935
 8001350:	08002a84 	.word	0x08002a84
 8001354:	08002946 	.word	0x08002946
 8001358:	080029e6 	.word	0x080029e6

0800135c <disable_connection>:
	char ATD[] = "ATD#100#;\r\n"; // баланс (бабло)
	HAL_UART_Transmit(GSM, (uint8_t*)ATD, strlen(ATD), 1000);
}

void disable_connection(void)
{
 800135c:	b507      	push	{r0, r1, r2, lr}
	char ATH[] = "ATH\r\n"; // сбросить все соединения
 800135e:	4b09      	ldr	r3, [pc, #36]	; (8001384 <disable_connection+0x28>)
 8001360:	6818      	ldr	r0, [r3, #0]
 8001362:	889b      	ldrh	r3, [r3, #4]
 8001364:	9000      	str	r0, [sp, #0]
	HAL_UART_Transmit(GSM, (uint8_t*)ATH, strlen(ATH), 1000);
 8001366:	4668      	mov	r0, sp
	char ATH[] = "ATH\r\n"; // сбросить все соединения
 8001368:	f8ad 3004 	strh.w	r3, [sp, #4]
	HAL_UART_Transmit(GSM, (uint8_t*)ATH, strlen(ATH), 1000);
 800136c:	f7fe feee 	bl	800014c <strlen>
 8001370:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001374:	b282      	uxth	r2, r0
 8001376:	4669      	mov	r1, sp
 8001378:	4803      	ldr	r0, [pc, #12]	; (8001388 <disable_connection+0x2c>)
 800137a:	f7ff fd8f 	bl	8000e9c <HAL_UART_Transmit>
}
 800137e:	b003      	add	sp, #12
 8001380:	f85d fb04 	ldr.w	pc, [sp], #4
 8001384:	08002956 	.word	0x08002956
 8001388:	20000568 	.word	0x20000568

0800138c <clear_string>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/////////////////// удалить символы \r и \n из строки //////////////////////
static void clear_string(char *src)
{
 800138c:	b510      	push	{r4, lr}
	char *dst = NULL;
	if(!src) return;
 800138e:	b128      	cbz	r0, 800139c <clear_string+0x10>
 8001390:	4601      	mov	r1, r0
 8001392:	2200      	movs	r2, #0
		if(i < 2 && (*src == '\n' || *src == '\r'))
		{
			i++;
			continue;
		}
		else if(*src == '\n' || *src == '\r') *src = ' ';
 8001394:	2420      	movs	r4, #32
	for(dst = src; *src; src++)
 8001396:	7803      	ldrb	r3, [r0, #0]
 8001398:	b90b      	cbnz	r3, 800139e <clear_string+0x12>

		*dst++ = *src;
	}

	*dst = 0;
 800139a:	700b      	strb	r3, [r1, #0]
 800139c:	bd10      	pop	{r4, pc}
		if(i < 2 && (*src == '\n' || *src == '\r'))
 800139e:	2a01      	cmp	r2, #1
 80013a0:	d807      	bhi.n	80013b2 <clear_string+0x26>
 80013a2:	2b0a      	cmp	r3, #10
 80013a4:	d001      	beq.n	80013aa <clear_string+0x1e>
 80013a6:	2b0d      	cmp	r3, #13
 80013a8:	d108      	bne.n	80013bc <clear_string+0x30>
			i++;
 80013aa:	3201      	adds	r2, #1
 80013ac:	b2d2      	uxtb	r2, r2
	for(dst = src; *src; src++)
 80013ae:	3001      	adds	r0, #1
 80013b0:	e7f1      	b.n	8001396 <clear_string+0xa>
		else if(*src == '\n' || *src == '\r') *src = ' ';
 80013b2:	2b0a      	cmp	r3, #10
 80013b4:	d001      	beq.n	80013ba <clear_string+0x2e>
 80013b6:	2b0d      	cmp	r3, #13
 80013b8:	d100      	bne.n	80013bc <clear_string+0x30>
 80013ba:	7004      	strb	r4, [r0, #0]
		*dst++ = *src;
 80013bc:	7803      	ldrb	r3, [r0, #0]
 80013be:	3101      	adds	r1, #1
 80013c0:	f801 3c01 	strb.w	r3, [r1, #-1]
 80013c4:	e7f3      	b.n	80013ae <clear_string+0x22>
	...

080013c8 <MX_USART1_UART_Init>:

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 57600;
 80013c8:	f44f 4c61 	mov.w	ip, #57600	; 0xe100
  huart1.Instance = USART1;
 80013cc:	4806      	ldr	r0, [pc, #24]	; (80013e8 <MX_USART1_UART_Init+0x20>)
  huart1.Init.BaudRate = 57600;
 80013ce:	4b07      	ldr	r3, [pc, #28]	; (80013ec <MX_USART1_UART_Init+0x24>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013d0:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 57600;
 80013d2:	e880 1008 	stmia.w	r0, {r3, ip}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013d6:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013d8:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013da:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013dc:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013de:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013e0:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013e2:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013e4:	f7ff bd2c 	b.w	8000e40 <HAL_UART_Init>
 80013e8:	20000568 	.word	0x20000568
 80013ec:	40013800 	.word	0x40013800

080013f0 <HAL_TIM_PeriodElapsedCallback>:
	if(htim->Instance == TIM4)
 80013f0:	6802      	ldr	r2, [r0, #0]
 80013f2:	4b03      	ldr	r3, [pc, #12]	; (8001400 <HAL_TIM_PeriodElapsedCallback+0x10>)
 80013f4:	429a      	cmp	r2, r3
		flag = 1;
 80013f6:	bf02      	ittt	eq
 80013f8:	2201      	moveq	r2, #1
 80013fa:	4b02      	ldreq	r3, [pc, #8]	; (8001404 <HAL_TIM_PeriodElapsedCallback+0x14>)
 80013fc:	701a      	strbeq	r2, [r3, #0]
 80013fe:	4770      	bx	lr
 8001400:	40000800 	.word	0x40000800
 8001404:	2000008c 	.word	0x2000008c

08001408 <chek_speed>:
{
 8001408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	  if(i == 0) sp = 2400;
 800140c:	f44f 6316 	mov.w	r3, #2400	; 0x960
  for(uint8_t i = 0; i < 7; i++)
 8001410:	2500      	movs	r5, #0
	  huart1.Instance = USART1;
 8001412:	4e3d      	ldr	r6, [pc, #244]	; (8001508 <chek_speed+0x100>)
 8001414:	4f3d      	ldr	r7, [pc, #244]	; (800150c <chek_speed+0x104>)
	  HAL_UART_Transmit(GSM, (uint8_t*)"AT\r\n", strlen("AT\r\n"), 1000);
 8001416:	f8df 8108 	ldr.w	r8, [pc, #264]	; 8001520 <chek_speed+0x118>
{
 800141a:	b094      	sub	sp, #80	; 0x50
	  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800141c:	2400      	movs	r4, #0
	  huart1.Init.BaudRate = sp;
 800141e:	6073      	str	r3, [r6, #4]
	  huart1.Init.Mode = UART_MODE_TX_RX;
 8001420:	230c      	movs	r3, #12
	  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001422:	4839      	ldr	r0, [pc, #228]	; (8001508 <chek_speed+0x100>)
	  huart1.Init.Mode = UART_MODE_TX_RX;
 8001424:	6173      	str	r3, [r6, #20]
	  huart1.Instance = USART1;
 8001426:	6037      	str	r7, [r6, #0]
	  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001428:	60b4      	str	r4, [r6, #8]
	  huart1.Init.StopBits = UART_STOPBITS_1;
 800142a:	60f4      	str	r4, [r6, #12]
	  huart1.Init.Parity = UART_PARITY_NONE;
 800142c:	6134      	str	r4, [r6, #16]
	  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800142e:	61b4      	str	r4, [r6, #24]
	  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001430:	61f4      	str	r4, [r6, #28]
	  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001432:	f7ff fd05 	bl	8000e40 <HAL_UART_Init>
	  char str[16] = {0,};
 8001436:	2210      	movs	r2, #16
 8001438:	4621      	mov	r1, r4
 800143a:	4668      	mov	r0, sp
 800143c:	f000 fddc 	bl	8001ff8 <memset>
	  HAL_UART_Transmit(GSM, (uint8_t*)"AT\r\n", strlen("AT\r\n"), 1000);
 8001440:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001444:	2204      	movs	r2, #4
 8001446:	4641      	mov	r1, r8
 8001448:	482f      	ldr	r0, [pc, #188]	; (8001508 <chek_speed+0x100>)
 800144a:	f7ff fd27 	bl	8000e9c <HAL_UART_Transmit>
	  HAL_Delay(300);
 800144e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001452:	f7fe fecb 	bl	80001ec <HAL_Delay>
	  if(gsm_available()) //если модуль что-то прислал
 8001456:	f000 fd31 	bl	8001ebc <gsm_available>
 800145a:	2800      	cmp	r0, #0
 800145c:	d041      	beq.n	80014e2 <chek_speed+0xda>
		  while(gsm_available())
 800145e:	f000 fd2d 	bl	8001ebc <gsm_available>
 8001462:	b130      	cbz	r0, 8001472 <chek_speed+0x6a>
			  str[i++] = gsm_read();
 8001464:	f000 fd36 	bl	8001ed4 <gsm_read>
 8001468:	f80d 0004 	strb.w	r0, [sp, r4]
 800146c:	3401      	adds	r4, #1
			  if(i > 15) break;
 800146e:	2c10      	cmp	r4, #16
 8001470:	d133      	bne.n	80014da <chek_speed+0xd2>
		  if(strstr(str, "OK") != NULL)
 8001472:	4927      	ldr	r1, [pc, #156]	; (8001510 <chek_speed+0x108>)
 8001474:	4668      	mov	r0, sp
 8001476:	f000 fe09 	bl	800208c <strstr>
 800147a:	b390      	cbz	r0, 80014e2 <chek_speed+0xda>
			  char buf[64] = {0,};
 800147c:	2240      	movs	r2, #64	; 0x40
 800147e:	2100      	movs	r1, #0
 8001480:	a804      	add	r0, sp, #16
 8001482:	f000 fdb9 	bl	8001ff8 <memset>
			  snprintf(buf, 64, "Uart modem was %lu, switched to 57600\n", huart1.Init.BaudRate);
 8001486:	6873      	ldr	r3, [r6, #4]
 8001488:	4a22      	ldr	r2, [pc, #136]	; (8001514 <chek_speed+0x10c>)
 800148a:	2140      	movs	r1, #64	; 0x40
 800148c:	a804      	add	r0, sp, #16
 800148e:	f000 fdbb 	bl	8002008 <sniprintf>
			  HAL_UART_Transmit(DEBUG, (uint8_t*)buf, strlen(buf), 100);
 8001492:	a804      	add	r0, sp, #16
 8001494:	f7fe fe5a 	bl	800014c <strlen>
 8001498:	2364      	movs	r3, #100	; 0x64
 800149a:	b282      	uxth	r2, r0
 800149c:	a904      	add	r1, sp, #16
 800149e:	481e      	ldr	r0, [pc, #120]	; (8001518 <chek_speed+0x110>)
 80014a0:	f7ff fcfc 	bl	8000e9c <HAL_UART_Transmit>
			  HAL_UART_Transmit(GSM, (uint8_t*)"AT+IPR=57600\r\n", strlen("AT+IPR=57600\r\n"), 1000);
 80014a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014a8:	220e      	movs	r2, #14
 80014aa:	491c      	ldr	r1, [pc, #112]	; (800151c <chek_speed+0x114>)
 80014ac:	4816      	ldr	r0, [pc, #88]	; (8001508 <chek_speed+0x100>)
 80014ae:	f7ff fcf5 	bl	8000e9c <HAL_UART_Transmit>
			  HAL_Delay(250);
 80014b2:	20fa      	movs	r0, #250	; 0xfa
 80014b4:	f7fe fe9a 	bl	80001ec <HAL_Delay>
			  MX_USART1_UART_Init();
 80014b8:	f7ff ff86 	bl	80013c8 <MX_USART1_UART_Init>
}
 80014bc:	b014      	add	sp, #80	; 0x50
 80014be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	  else if(i == 1) sp = 4800;
 80014c2:	f44f 5396 	mov.w	r3, #4800	; 0x12c0
 80014c6:	e7a9      	b.n	800141c <chek_speed+0x14>
	  else if(i == 2) sp = 9600;
 80014c8:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80014cc:	e7a6      	b.n	800141c <chek_speed+0x14>
	  else if(i == 3) sp = 19200;
 80014ce:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
 80014d2:	e7a3      	b.n	800141c <chek_speed+0x14>
	  else if(i == 4) sp = 38400;
 80014d4:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 80014d8:	e7a0      	b.n	800141c <chek_speed+0x14>
			  HAL_Delay(2);
 80014da:	2002      	movs	r0, #2
 80014dc:	f7fe fe86 	bl	80001ec <HAL_Delay>
 80014e0:	e7bd      	b.n	800145e <chek_speed+0x56>
  for(uint8_t i = 0; i < 7; i++)
 80014e2:	3501      	adds	r5, #1
 80014e4:	b2ed      	uxtb	r5, r5
 80014e6:	2d07      	cmp	r5, #7
 80014e8:	d0e8      	beq.n	80014bc <chek_speed+0xb4>
	  else if(i == 1) sp = 4800;
 80014ea:	2d01      	cmp	r5, #1
 80014ec:	d0e9      	beq.n	80014c2 <chek_speed+0xba>
	  else if(i == 2) sp = 9600;
 80014ee:	2d02      	cmp	r5, #2
 80014f0:	d0ea      	beq.n	80014c8 <chek_speed+0xc0>
	  else if(i == 3) sp = 19200;
 80014f2:	2d03      	cmp	r5, #3
 80014f4:	d0eb      	beq.n	80014ce <chek_speed+0xc6>
	  else if(i == 4) sp = 38400;
 80014f6:	2d04      	cmp	r5, #4
 80014f8:	d0ec      	beq.n	80014d4 <chek_speed+0xcc>
	  else if(i == 6) sp = 115200;
 80014fa:	2d05      	cmp	r5, #5
 80014fc:	bf0c      	ite	eq
 80014fe:	f44f 4361 	moveq.w	r3, #57600	; 0xe100
 8001502:	f44f 33e1 	movne.w	r3, #115200	; 0x1c200
 8001506:	e789      	b.n	800141c <chek_speed+0x14>
 8001508:	20000568 	.word	0x20000568
 800150c:	40013800 	.word	0x40013800
 8001510:	08002c14 	.word	0x08002c14
 8001514:	080029f6 	.word	0x080029f6
 8001518:	20000528 	.word	0x20000528
 800151c:	08002a1d 	.word	0x08002a1d
 8001520:	080029f1 	.word	0x080029f1

08001524 <send_tcp>:
{
 8001524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001528:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
	char adres[] = "example.com";
 800152c:	af05      	add	r7, sp, #20
 800152e:	463b      	mov	r3, r7
 8001530:	4aa3      	ldr	r2, [pc, #652]	; (80017c0 <send_tcp+0x29c>)
	char buf[GPRS_RX_BUFFER_SIZE] = {0,};
 8001532:	ac08      	add	r4, sp, #32
	char adres[] = "example.com";
 8001534:	6810      	ldr	r0, [r2, #0]
 8001536:	6851      	ldr	r1, [r2, #4]
	for(uint16_t i = 0; i < timeout; i++) // 20 sek
 8001538:	f644 6620 	movw	r6, #20000	; 0x4e20
	char adres[] = "example.com";
 800153c:	c303      	stmia	r3!, {r0, r1}
 800153e:	6890      	ldr	r0, [r2, #8]
	char buf[GPRS_RX_BUFFER_SIZE] = {0,};
 8001540:	2100      	movs	r1, #0
	char adres[] = "example.com";
 8001542:	6018      	str	r0, [r3, #0]
	char data[] = "GET /";
 8001544:	4b9f      	ldr	r3, [pc, #636]	; (80017c4 <send_tcp+0x2a0>)
	char buf[GPRS_RX_BUFFER_SIZE] = {0,};
 8001546:	f44f 6280 	mov.w	r2, #1024	; 0x400
	char data[] = "GET /";
 800154a:	6818      	ldr	r0, [r3, #0]
 800154c:	889b      	ldrh	r3, [r3, #4]
 800154e:	9003      	str	r0, [sp, #12]
	char buf[GPRS_RX_BUFFER_SIZE] = {0,};
 8001550:	4620      	mov	r0, r4
	char data[] = "GET /";
 8001552:	f8ad 3010 	strh.w	r3, [sp, #16]
	char buf[GPRS_RX_BUFFER_SIZE] = {0,};
 8001556:	f000 fd4f 	bl	8001ff8 <memset>
	clear_gsm_buff();
 800155a:	f000 fc99 	bl	8001e90 <clear_gsm_buff>
	snprintf(buf, GPRS_RX_BUFFER_SIZE, "AT+CIPSTART=\"TCP\",\"%s\",\"%d\"\r\n", adres, port);
 800155e:	2350      	movs	r3, #80	; 0x50
 8001560:	4a99      	ldr	r2, [pc, #612]	; (80017c8 <send_tcp+0x2a4>)
 8001562:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001566:	9300      	str	r3, [sp, #0]
 8001568:	4620      	mov	r0, r4
 800156a:	463b      	mov	r3, r7
 800156c:	f000 fd4c 	bl	8002008 <sniprintf>
	HAL_UART_Transmit(GSM, (uint8_t*)buf, strlen(buf), 1000);
 8001570:	4620      	mov	r0, r4
 8001572:	f7fe fdeb 	bl	800014c <strlen>
 8001576:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800157a:	b282      	uxth	r2, r0
 800157c:	4621      	mov	r1, r4
 800157e:	4893      	ldr	r0, [pc, #588]	; (80017cc <send_tcp+0x2a8>)
 8001580:	f7ff fc8c 	bl	8000e9c <HAL_UART_Transmit>
	memset(buf, 0, GPRS_RX_BUFFER_SIZE);
 8001584:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001588:	2100      	movs	r1, #0
 800158a:	4620      	mov	r0, r4
 800158c:	f000 fd34 	bl	8001ff8 <memset>
			if(strstr(buf, "CONNECT FAIL") != NULL)
 8001590:	f8df 9280 	ldr.w	r9, [pc, #640]	; 8001814 <send_tcp+0x2f0>
			if(strstr(buf, "ALREADY CONNECT") != NULL)
 8001594:	f8df a280 	ldr.w	sl, [pc, #640]	; 8001818 <send_tcp+0x2f4>
		if(gsm_available())
 8001598:	f000 fc90 	bl	8001ebc <gsm_available>
 800159c:	2800      	cmp	r0, #0
 800159e:	d053      	beq.n	8001648 <send_tcp+0x124>
 80015a0:	2500      	movs	r5, #0
 80015a2:	e007      	b.n	80015b4 <send_tcp+0x90>
				buf[k++] = gsm_read();
 80015a4:	f000 fc96 	bl	8001ed4 <gsm_read>
 80015a8:	b2ed      	uxtb	r5, r5
 80015aa:	5560      	strb	r0, [r4, r5]
				HAL_Delay(1);
 80015ac:	2001      	movs	r0, #1
 80015ae:	f7fe fe1d 	bl	80001ec <HAL_Delay>
 80015b2:	4645      	mov	r5, r8
			while(gsm_available())
 80015b4:	f000 fc82 	bl	8001ebc <gsm_available>
 80015b8:	f105 0801 	add.w	r8, r5, #1
 80015bc:	4683      	mov	fp, r0
 80015be:	2800      	cmp	r0, #0
 80015c0:	d1f0      	bne.n	80015a4 <send_tcp+0x80>
			if(strstr(buf, "CONNECT OK") != NULL)
 80015c2:	4983      	ldr	r1, [pc, #524]	; (80017d0 <send_tcp+0x2ac>)
 80015c4:	4620      	mov	r0, r4
 80015c6:	f000 fd61 	bl	800208c <strstr>
 80015ca:	b1e8      	cbz	r0, 8001608 <send_tcp+0xe4>
				HAL_UART_Transmit(DEBUG, (uint8_t*)"CONNECT OK\n", strlen("CONNECT OK\n"), 100); // debug
 80015cc:	2364      	movs	r3, #100	; 0x64
 80015ce:	220b      	movs	r2, #11
 80015d0:	4980      	ldr	r1, [pc, #512]	; (80017d4 <send_tcp+0x2b0>)
 80015d2:	4881      	ldr	r0, [pc, #516]	; (80017d8 <send_tcp+0x2b4>)
 80015d4:	f7ff fc62 	bl	8000e9c <HAL_UART_Transmit>
	HAL_Delay(100);
 80015d8:	2064      	movs	r0, #100	; 0x64
 80015da:	f7fe fe07 	bl	80001ec <HAL_Delay>
	HAL_UART_Transmit(GSM, (uint8_t*)"AT+CIPSEND\r\n", 12, 1000);
 80015de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015e2:	220c      	movs	r2, #12
 80015e4:	497d      	ldr	r1, [pc, #500]	; (80017dc <send_tcp+0x2b8>)
 80015e6:	4879      	ldr	r0, [pc, #484]	; (80017cc <send_tcp+0x2a8>)
 80015e8:	f7ff fc58 	bl	8000e9c <HAL_UART_Transmit>
	memset(buf, 0, GPRS_RX_BUFFER_SIZE);
 80015ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015f0:	4659      	mov	r1, fp
 80015f2:	4620      	mov	r0, r4
 80015f4:	f000 fd00 	bl	8001ff8 <memset>
	for(uint16_t i = 0; i < timeout; i++) // 2 sek
 80015f8:	f44f 66fa 	mov.w	r6, #2000	; 0x7d0
		if(gsm_available())
 80015fc:	f000 fc5e 	bl	8001ebc <gsm_available>
 8001600:	2800      	cmp	r0, #0
 8001602:	d07b      	beq.n	80016fc <send_tcp+0x1d8>
 8001604:	2500      	movs	r5, #0
 8001606:	e033      	b.n	8001670 <send_tcp+0x14c>
			if(strstr(buf, "CONNECT FAIL") != NULL)
 8001608:	4649      	mov	r1, r9
 800160a:	4620      	mov	r0, r4
 800160c:	f000 fd3e 	bl	800208c <strstr>
 8001610:	b148      	cbz	r0, 8001626 <send_tcp+0x102>
				HAL_UART_Transmit(DEBUG, (uint8_t*)"CONNECT FAIL\n", strlen("CONNECT FAIL\n"), 100); // debug
 8001612:	2364      	movs	r3, #100	; 0x64
 8001614:	220d      	movs	r2, #13
 8001616:	4972      	ldr	r1, [pc, #456]	; (80017e0 <send_tcp+0x2bc>)
			HAL_UART_Transmit(DEBUG, (uint8_t*)"Error, not CONNECT OK\n", strlen("Error, not CONNECT OK\n"), 1000);
 8001618:	486f      	ldr	r0, [pc, #444]	; (80017d8 <send_tcp+0x2b4>)
			HAL_UART_Transmit(GSM, (uint8_t*)"AT+CIPCLOSE\r\n", 13, 1000); // закрыть соединение
 800161a:	f7ff fc3f 	bl	8000e9c <HAL_UART_Transmit>
}
 800161e:	f20d 4d24 	addw	sp, sp, #1060	; 0x424
 8001622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if(strstr(buf, "ALREADY CONNECT") != NULL)
 8001626:	4651      	mov	r1, sl
 8001628:	4620      	mov	r0, r4
 800162a:	f000 fd2f 	bl	800208c <strstr>
 800162e:	b158      	cbz	r0, 8001648 <send_tcp+0x124>
				HAL_UART_Transmit(DEBUG, (uint8_t*)"ALREADY CONNECT\n", strlen("ALREADY CONNECT\n"), 100); // debug
 8001630:	2364      	movs	r3, #100	; 0x64
 8001632:	2210      	movs	r2, #16
 8001634:	496b      	ldr	r1, [pc, #428]	; (80017e4 <send_tcp+0x2c0>)
			HAL_UART_Transmit(DEBUG, (uint8_t*)"Error, not SEND OK 2\n", strlen("Error, not SEND OK 2\n"), 1000);
 8001636:	4868      	ldr	r0, [pc, #416]	; (80017d8 <send_tcp+0x2b4>)
 8001638:	f7ff fc30 	bl	8000e9c <HAL_UART_Transmit>
			HAL_UART_Transmit(GSM, (uint8_t*)"AT+CIPCLOSE\r\n", 13, 1000); // закрыть соединение
 800163c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001640:	220d      	movs	r2, #13
 8001642:	4969      	ldr	r1, [pc, #420]	; (80017e8 <send_tcp+0x2c4>)
 8001644:	4861      	ldr	r0, [pc, #388]	; (80017cc <send_tcp+0x2a8>)
 8001646:	e7e8      	b.n	800161a <send_tcp+0xf6>
 8001648:	3e01      	subs	r6, #1
 800164a:	b2b6      	uxth	r6, r6
		if(i == timeout - 1)
 800164c:	b926      	cbnz	r6, 8001658 <send_tcp+0x134>
			HAL_UART_Transmit(DEBUG, (uint8_t*)"Error, not CONNECT OK\n", strlen("Error, not CONNECT OK\n"), 1000);
 800164e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001652:	2216      	movs	r2, #22
 8001654:	4965      	ldr	r1, [pc, #404]	; (80017ec <send_tcp+0x2c8>)
 8001656:	e7df      	b.n	8001618 <send_tcp+0xf4>
		HAL_Delay(1);
 8001658:	2001      	movs	r0, #1
 800165a:	f7fe fdc7 	bl	80001ec <HAL_Delay>
 800165e:	e79b      	b.n	8001598 <send_tcp+0x74>
				buf[k++] = gsm_read();
 8001660:	f000 fc38 	bl	8001ed4 <gsm_read>
 8001664:	b2ed      	uxtb	r5, r5
 8001666:	5560      	strb	r0, [r4, r5]
				HAL_Delay(1);
 8001668:	2001      	movs	r0, #1
 800166a:	f7fe fdbf 	bl	80001ec <HAL_Delay>
 800166e:	464d      	mov	r5, r9
			while(gsm_available())
 8001670:	f000 fc24 	bl	8001ebc <gsm_available>
 8001674:	f105 0901 	add.w	r9, r5, #1
 8001678:	4680      	mov	r8, r0
 800167a:	2800      	cmp	r0, #0
 800167c:	d1f0      	bne.n	8001660 <send_tcp+0x13c>
			if(strstr(buf, ">") != NULL)
 800167e:	213e      	movs	r1, #62	; 0x3e
 8001680:	4620      	mov	r0, r4
 8001682:	f000 fcf5 	bl	8002070 <strchr>
 8001686:	2800      	cmp	r0, #0
 8001688:	d038      	beq.n	80016fc <send_tcp+0x1d8>
				HAL_UART_Transmit(DEBUG, (uint8_t*)"OK '>'\n", strlen("OK '>'\n"), 100); // debug
 800168a:	2364      	movs	r3, #100	; 0x64
 800168c:	2207      	movs	r2, #7
 800168e:	4958      	ldr	r1, [pc, #352]	; (80017f0 <send_tcp+0x2cc>)
 8001690:	4851      	ldr	r0, [pc, #324]	; (80017d8 <send_tcp+0x2b4>)
 8001692:	f7ff fc03 	bl	8000e9c <HAL_UART_Transmit>
	clear_gsm_buff();
 8001696:	f000 fbfb 	bl	8001e90 <clear_gsm_buff>
	HAL_Delay(100);
 800169a:	2064      	movs	r0, #100	; 0x64
 800169c:	f7fe fda6 	bl	80001ec <HAL_Delay>
	memset(buf, 0, GPRS_RX_BUFFER_SIZE);
 80016a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016a4:	4641      	mov	r1, r8
 80016a6:	4620      	mov	r0, r4
 80016a8:	f000 fca6 	bl	8001ff8 <memset>
	snprintf(buf, GPRS_RX_BUFFER_SIZE, "%s HTTP/1.1\r\nHost: %s\r\nConnection: keep-alive\r\n\r\n%c", data, adres, (char)26);
 80016ac:	231a      	movs	r3, #26
 80016ae:	4a51      	ldr	r2, [pc, #324]	; (80017f4 <send_tcp+0x2d0>)
 80016b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016b4:	9301      	str	r3, [sp, #4]
 80016b6:	9700      	str	r7, [sp, #0]
 80016b8:	ab03      	add	r3, sp, #12
 80016ba:	4620      	mov	r0, r4
 80016bc:	f000 fca4 	bl	8002008 <sniprintf>
	HAL_UART_Transmit(GSM, (uint8_t*)buf, strlen(buf), 1000);
 80016c0:	4620      	mov	r0, r4
 80016c2:	f7fe fd43 	bl	800014c <strlen>
 80016c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ca:	b282      	uxth	r2, r0
 80016cc:	4621      	mov	r1, r4
 80016ce:	483f      	ldr	r0, [pc, #252]	; (80017cc <send_tcp+0x2a8>)
 80016d0:	f7ff fbe4 	bl	8000e9c <HAL_UART_Transmit>
	memset(buf, 0, GPRS_RX_BUFFER_SIZE);
 80016d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016d8:	4641      	mov	r1, r8
 80016da:	4620      	mov	r0, r4
 80016dc:	f000 fc8c 	bl	8001ff8 <memset>
	HAL_UART_Transmit(DEBUG, (uint8_t*)"-----------\n", strlen("-----------\n"), 100);
 80016e0:	2364      	movs	r3, #100	; 0x64
 80016e2:	220c      	movs	r2, #12
 80016e4:	4944      	ldr	r1, [pc, #272]	; (80017f8 <send_tcp+0x2d4>)
 80016e6:	483c      	ldr	r0, [pc, #240]	; (80017d8 <send_tcp+0x2b4>)
 80016e8:	f7ff fbd8 	bl	8000e9c <HAL_UART_Transmit>
	for(uint16_t i = 0; i < timeout; i++) // 20 sek
 80016ec:	f644 6520 	movw	r5, #20000	; 0x4e20
		if(gsm_available())
 80016f0:	f000 fbe4 	bl	8001ebc <gsm_available>
 80016f4:	2800      	cmp	r0, #0
 80016f6:	d057      	beq.n	80017a8 <send_tcp+0x284>
 80016f8:	2500      	movs	r5, #0
 80016fa:	e014      	b.n	8001726 <send_tcp+0x202>
 80016fc:	3e01      	subs	r6, #1
 80016fe:	b2b6      	uxth	r6, r6
		if(i == timeout - 1)
 8001700:	b926      	cbnz	r6, 800170c <send_tcp+0x1e8>
			HAL_UART_Transmit(DEBUG, (uint8_t*)"Error, not '>'\n", strlen("Error, not '>'\n"), 1000);
 8001702:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001706:	220f      	movs	r2, #15
 8001708:	493c      	ldr	r1, [pc, #240]	; (80017fc <send_tcp+0x2d8>)
 800170a:	e794      	b.n	8001636 <send_tcp+0x112>
		HAL_Delay(1);
 800170c:	2001      	movs	r0, #1
 800170e:	f7fe fd6d 	bl	80001ec <HAL_Delay>
 8001712:	e773      	b.n	80015fc <send_tcp+0xd8>
				buf[k++] = gsm_read();
 8001714:	f000 fbde 	bl	8001ed4 <gsm_read>
 8001718:	5560      	strb	r0, [r4, r5]
 800171a:	3501      	adds	r5, #1
				if(k > 11) break;
 800171c:	2d0c      	cmp	r5, #12
 800171e:	d01a      	beq.n	8001756 <send_tcp+0x232>
				HAL_Delay(1);
 8001720:	2001      	movs	r0, #1
 8001722:	f7fe fd63 	bl	80001ec <HAL_Delay>
 8001726:	b2af      	uxth	r7, r5
			while(gsm_available())
 8001728:	f000 fbc8 	bl	8001ebc <gsm_available>
 800172c:	2800      	cmp	r0, #0
 800172e:	d1f1      	bne.n	8001714 <send_tcp+0x1f0>
			if((p = strstr(buf, "SEND OK")) != NULL)
 8001730:	4933      	ldr	r1, [pc, #204]	; (8001800 <send_tcp+0x2dc>)
 8001732:	4620      	mov	r0, r4
 8001734:	f000 fcaa 	bl	800208c <strstr>
 8001738:	4605      	mov	r5, r0
 800173a:	b380      	cbz	r0, 800179e <send_tcp+0x27a>
 800173c:	f242 7610 	movw	r6, #10000	; 0x2710
					if(gsm_available())
 8001740:	f000 fbbc 	bl	8001ebc <gsm_available>
 8001744:	b968      	cbnz	r0, 8001762 <send_tcp+0x23e>
 8001746:	3e01      	subs	r6, #1
 8001748:	b2b6      	uxth	r6, r6
					if(x == 9999)
 800174a:	bb26      	cbnz	r6, 8001796 <send_tcp+0x272>
						HAL_UART_Transmit(DEBUG, (uint8_t*)"No data after SEND OK\n", strlen("No data after SEND OK\n"), 1000);
 800174c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001750:	2216      	movs	r2, #22
 8001752:	492c      	ldr	r1, [pc, #176]	; (8001804 <send_tcp+0x2e0>)
 8001754:	e76f      	b.n	8001636 <send_tcp+0x112>
 8001756:	462f      	mov	r7, r5
 8001758:	e7ea      	b.n	8001730 <send_tcp+0x20c>
							HAL_Delay(1);
 800175a:	2001      	movs	r0, #1
 800175c:	f7fe fd46 	bl	80001ec <HAL_Delay>
 8001760:	4637      	mov	r7, r6
						while(gsm_available())
 8001762:	f000 fbab 	bl	8001ebc <gsm_available>
 8001766:	b138      	cbz	r0, 8001778 <send_tcp+0x254>
							buf[k++] = gsm_read();
 8001768:	f000 fbb4 	bl	8001ed4 <gsm_read>
 800176c:	1c7e      	adds	r6, r7, #1
 800176e:	b2b6      	uxth	r6, r6
							if(k > GPRS_RX_BUFFER_SIZE - 1) break;
 8001770:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
							buf[k++] = gsm_read();
 8001774:	55e0      	strb	r0, [r4, r7]
							if(k > GPRS_RX_BUFFER_SIZE - 1) break;
 8001776:	d1f0      	bne.n	800175a <send_tcp+0x236>
						HAL_UART_Transmit(DEBUG, (uint8_t*)"RES: ", 5, 100);
 8001778:	2364      	movs	r3, #100	; 0x64
 800177a:	2205      	movs	r2, #5
 800177c:	4922      	ldr	r1, [pc, #136]	; (8001808 <send_tcp+0x2e4>)
						HAL_UART_Transmit(DEBUG, (uint8_t*)p + 9, strlen(p + 9), 1000);
 800177e:	3509      	adds	r5, #9
						HAL_UART_Transmit(DEBUG, (uint8_t*)"RES: ", 5, 100);
 8001780:	4815      	ldr	r0, [pc, #84]	; (80017d8 <send_tcp+0x2b4>)
 8001782:	f7ff fb8b 	bl	8000e9c <HAL_UART_Transmit>
						HAL_UART_Transmit(DEBUG, (uint8_t*)p + 9, strlen(p + 9), 1000);
 8001786:	4628      	mov	r0, r5
 8001788:	f7fe fce0 	bl	800014c <strlen>
 800178c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001790:	b282      	uxth	r2, r0
 8001792:	4629      	mov	r1, r5
 8001794:	e74f      	b.n	8001636 <send_tcp+0x112>
					HAL_Delay(1);
 8001796:	2001      	movs	r0, #1
 8001798:	f7fe fd28 	bl	80001ec <HAL_Delay>
 800179c:	e7d0      	b.n	8001740 <send_tcp+0x21c>
				HAL_UART_Transmit(DEBUG, (uint8_t*)"Error, not SEND OK 1\n", strlen("Error, not SEND OK 1\n"), 1000);
 800179e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017a2:	2215      	movs	r2, #21
 80017a4:	4919      	ldr	r1, [pc, #100]	; (800180c <send_tcp+0x2e8>)
 80017a6:	e746      	b.n	8001636 <send_tcp+0x112>
 80017a8:	3d01      	subs	r5, #1
 80017aa:	b2ad      	uxth	r5, r5
		if(i == timeout - 1)
 80017ac:	b925      	cbnz	r5, 80017b8 <send_tcp+0x294>
			HAL_UART_Transmit(DEBUG, (uint8_t*)"Error, not SEND OK 2\n", strlen("Error, not SEND OK 2\n"), 1000);
 80017ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017b2:	2215      	movs	r2, #21
 80017b4:	4916      	ldr	r1, [pc, #88]	; (8001810 <send_tcp+0x2ec>)
 80017b6:	e73e      	b.n	8001636 <send_tcp+0x112>
		HAL_Delay(1);
 80017b8:	2001      	movs	r0, #1
 80017ba:	f7fe fd17 	bl	80001ec <HAL_Delay>
 80017be:	e797      	b.n	80016f0 <send_tcp+0x1cc>
 80017c0:	08002c60 	.word	0x08002c60
 80017c4:	08002c6c 	.word	0x08002c6c
 80017c8:	08002b1f 	.word	0x08002b1f
 80017cc:	20000568 	.word	0x20000568
 80017d0:	08002b3d 	.word	0x08002b3d
 80017d4:	08002baa 	.word	0x08002baa
 80017d8:	20000528 	.word	0x20000528
 80017dc:	08002b48 	.word	0x08002b48
 80017e0:	08002b62 	.word	0x08002b62
 80017e4:	08002b80 	.word	0x08002b80
 80017e8:	08002b91 	.word	0x08002b91
 80017ec:	08002b9f 	.word	0x08002b9f
 80017f0:	08002bb6 	.word	0x08002bb6
 80017f4:	08002bbe 	.word	0x08002bbe
 80017f8:	08002bf2 	.word	0x08002bf2
 80017fc:	08002bff 	.word	0x08002bff
 8001800:	08002c0f 	.word	0x08002c0f
 8001804:	08002c1d 	.word	0x08002c1d
 8001808:	08002c17 	.word	0x08002c17
 800180c:	08002c34 	.word	0x08002c34
 8001810:	08002c4a 	.word	0x08002c4a
 8001814:	08002b55 	.word	0x08002b55
 8001818:	08002b70 	.word	0x08002b70

0800181c <SystemClock_Config>:
{
 800181c:	b510      	push	{r4, lr}
 800181e:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001820:	2228      	movs	r2, #40	; 0x28
 8001822:	2100      	movs	r1, #0
 8001824:	a806      	add	r0, sp, #24
 8001826:	f000 fbe7 	bl	8001ff8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800182a:	2100      	movs	r1, #0
 800182c:	2214      	movs	r2, #20
 800182e:	a801      	add	r0, sp, #4
 8001830:	f000 fbe2 	bl	8001ff8 <memset>
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001834:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001838:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800183a:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800183c:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800183e:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001840:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001844:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001846:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001848:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800184a:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800184c:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800184e:	f7fe fe37 	bl	80004c0 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001852:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001854:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001858:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800185a:	2300      	movs	r3, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800185c:	4621      	mov	r1, r4
 800185e:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001860:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001862:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001864:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001866:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001868:	f7ff f804 	bl	8000874 <HAL_RCC_ClockConfig>
}
 800186c:	b010      	add	sp, #64	; 0x40
 800186e:	bd10      	pop	{r4, pc}

08001870 <main>:
{
 8001870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001874:	b0c4      	sub	sp, #272	; 0x110
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001876:	ae24      	add	r6, sp, #144	; 0x90
  HAL_Init();
 8001878:	f7fe fc94 	bl	80001a4 <HAL_Init>
  SystemClock_Config();
 800187c:	f7ff ffce 	bl	800181c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001880:	2210      	movs	r2, #16
 8001882:	2100      	movs	r1, #0
 8001884:	4630      	mov	r0, r6
 8001886:	f000 fbb7 	bl	8001ff8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800188a:	4bba      	ldr	r3, [pc, #744]	; (8001b74 <main+0x304>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ON_RELAY_Pin|ER_LED_Pin, GPIO_PIN_RESET);
 800188c:	2181      	movs	r1, #129	; 0x81
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800188e:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, ON_RELAY_Pin|ER_LED_Pin, GPIO_PIN_RESET);
 8001890:	48b9      	ldr	r0, [pc, #740]	; (8001b78 <main+0x308>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001892:	f042 0220 	orr.w	r2, r2, #32
 8001896:	619a      	str	r2, [r3, #24]
 8001898:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pins : ON_RELAY_Pin ER_LED_Pin */
  GPIO_InitStruct.Pin = ON_RELAY_Pin|ER_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189a:	2500      	movs	r5, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800189c:	f002 0220 	and.w	r2, r2, #32
 80018a0:	9201      	str	r2, [sp, #4]
 80018a2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a4:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a6:	f04f 0901 	mov.w	r9, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018aa:	f042 0204 	orr.w	r2, r2, #4
 80018ae:	619a      	str	r2, [r3, #24]
 80018b0:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b2:	f04f 0a02 	mov.w	sl, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b6:	f002 0204 	and.w	r2, r2, #4
 80018ba:	9202      	str	r2, [sp, #8]
 80018bc:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018be:	699a      	ldr	r2, [r3, #24]
  htim4.Instance = TIM4;
 80018c0:	4fae      	ldr	r7, [pc, #696]	; (8001b7c <main+0x30c>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c2:	f042 0208 	orr.w	r2, r2, #8
 80018c6:	619a      	str	r2, [r3, #24]
 80018c8:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, ON_RELAY_Pin|ER_LED_Pin, GPIO_PIN_RESET);
 80018ca:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018cc:	f003 0308 	and.w	r3, r3, #8
 80018d0:	9303      	str	r3, [sp, #12]
 80018d2:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOA, ON_RELAY_Pin|ER_LED_Pin, GPIO_PIN_RESET);
 80018d4:	f7fe fde8 	bl	80004a8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = ON_RELAY_Pin|ER_LED_Pin;
 80018d8:	2381      	movs	r3, #129	; 0x81
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018da:	4631      	mov	r1, r6
 80018dc:	48a6      	ldr	r0, [pc, #664]	; (8001b78 <main+0x308>)
  GPIO_InitStruct.Pin = ON_RELAY_Pin|ER_LED_Pin;
 80018de:	9324      	str	r3, [sp, #144]	; 0x90
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e0:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e4:	9526      	str	r5, [sp, #152]	; 0x98
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e6:	f8cd a09c 	str.w	sl, [sp, #156]	; 0x9c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ea:	f7fe fcfb 	bl	80002e4 <HAL_GPIO_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ee:	4629      	mov	r1, r5
 80018f0:	2210      	movs	r2, #16
 80018f2:	4630      	mov	r0, r6
 80018f4:	f000 fb80 	bl	8001ff8 <memset>
  htim4.Init.Prescaler = 7199;
 80018f8:	f641 431f 	movw	r3, #7199	; 0x1c1f
 80018fc:	4aa0      	ldr	r2, [pc, #640]	; (8001b80 <main+0x310>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018fe:	ac04      	add	r4, sp, #16
  htim4.Init.Prescaler = 7199;
 8001900:	e887 000c 	stmia.w	r7, {r2, r3}
  htim4.Init.Period = 9999;
 8001904:	f242 730f 	movw	r3, #9999	; 0x270f
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001908:	4638      	mov	r0, r7
  htim4.Init.Period = 9999;
 800190a:	60fb      	str	r3, [r7, #12]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800190c:	60bd      	str	r5, [r7, #8]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800190e:	613d      	str	r5, [r7, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001910:	61bd      	str	r5, [r7, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001912:	6025      	str	r5, [r4, #0]
 8001914:	6065      	str	r5, [r4, #4]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001916:	f7ff f959 	bl	8000bcc <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800191a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800191e:	4631      	mov	r1, r6
 8001920:	4638      	mov	r0, r7
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001922:	9324      	str	r3, [sp, #144]	; 0x90
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001924:	f7ff f976 	bl	8000c14 <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001928:	4621      	mov	r1, r4
 800192a:	4638      	mov	r0, r7
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800192c:	6025      	str	r5, [r4, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800192e:	6065      	str	r5, [r4, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001930:	f7ff fa04 	bl	8000d3c <HAL_TIMEx_MasterConfigSynchronization>
  MX_USART1_UART_Init();
 8001934:	f7ff fd48 	bl	80013c8 <MX_USART1_UART_Init>
  huart3.Init.BaudRate = 57600;
 8001938:	f44f 4361 	mov.w	r3, #57600	; 0xe100
  huart3.Instance = USART3;
 800193c:	f8df 8290 	ldr.w	r8, [pc, #656]	; 8001bd0 <main+0x360>
  huart3.Init.BaudRate = 57600;
 8001940:	4990      	ldr	r1, [pc, #576]	; (8001b84 <main+0x314>)
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001942:	4640      	mov	r0, r8
  huart3.Init.BaudRate = 57600;
 8001944:	e888 000a 	stmia.w	r8, {r1, r3}
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001948:	230c      	movs	r3, #12
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800194a:	f8c8 5008 	str.w	r5, [r8, #8]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800194e:	f8c8 3014 	str.w	r3, [r8, #20]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001952:	f8c8 500c 	str.w	r5, [r8, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001956:	f8c8 5010 	str.w	r5, [r8, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800195a:	f8c8 5018 	str.w	r5, [r8, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800195e:	f8c8 501c 	str.w	r5, [r8, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001962:	f7ff fa6d 	bl	8000e40 <HAL_UART_Init>
  HAL_Delay(1000);
 8001966:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800196a:	f7fe fc3f 	bl	80001ec <HAL_Delay>
  HAL_GPIO_WritePin(ON_RELAY_GPIO_Port, ON_RELAY_Pin, GPIO_PIN_SET);
 800196e:	4649      	mov	r1, r9
 8001970:	464a      	mov	r2, r9
 8001972:	4881      	ldr	r0, [pc, #516]	; (8001b78 <main+0x308>)
 8001974:	f7fe fd98 	bl	80004a8 <HAL_GPIO_WritePin>
  HAL_Delay(6000); // задержка чтоб модем успел раздуплиться, если его включение происходит вместе с включением МК
 8001978:	f241 7070 	movw	r0, #6000	; 0x1770
 800197c:	f7fe fc36 	bl	80001ec <HAL_Delay>
  __HAL_UART_ENABLE_IT(GSM, UART_IT_RXNE);
 8001980:	4b81      	ldr	r3, [pc, #516]	; (8001b88 <main+0x318>)
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	68d3      	ldr	r3, [r2, #12]
 8001986:	f043 0320 	orr.w	r3, r3, #32
 800198a:	60d3      	str	r3, [r2, #12]
  __HAL_UART_ENABLE_IT(DEBUG, UART_IT_RXNE);
 800198c:	f8d8 2000 	ldr.w	r2, [r8]
			if(strstr(buf, "RING") != NULL) // ЕСЛИ ЭТО ЗВОНОК
 8001990:	f8df 8250 	ldr.w	r8, [pc, #592]	; 8001be4 <main+0x374>
  __HAL_UART_ENABLE_IT(DEBUG, UART_IT_RXNE);
 8001994:	68d3      	ldr	r3, [r2, #12]
 8001996:	f043 0320 	orr.w	r3, r3, #32
 800199a:	60d3      	str	r3, [r2, #12]
  chek_speed(); // проверка и установка скорости 57600, нужна один раз
 800199c:	f7ff fd34 	bl	8001408 <chek_speed>
  set_comand(ATCPAS);  // проверка статуса модема
 80019a0:	487a      	ldr	r0, [pc, #488]	; (8001b8c <main+0x31c>)
 80019a2:	f7ff fae3 	bl	8000f6c <set_comand>
  set_comand(ATCREG);  // проверка регистрации в сети - должен вернуть  +CREG: 0,1
 80019a6:	487a      	ldr	r0, [pc, #488]	; (8001b90 <main+0x320>)
 80019a8:	f7ff fae0 	bl	8000f6c <set_comand>
  set_comand(ATCLIP1); // включить АОН
 80019ac:	4879      	ldr	r0, [pc, #484]	; (8001b94 <main+0x324>)
 80019ae:	f7ff fadd 	bl	8000f6c <set_comand>
  set_comand(ATE);     // отключить «эхо»
 80019b2:	4879      	ldr	r0, [pc, #484]	; (8001b98 <main+0x328>)
 80019b4:	f7ff fada 	bl	8000f6c <set_comand>
  set_comand(ATS);     // поднимать трубку только "вручную"
 80019b8:	4878      	ldr	r0, [pc, #480]	; (8001b9c <main+0x32c>)
 80019ba:	f7ff fad7 	bl	8000f6c <set_comand>
  set_comand(ATCMEE);  // включить расшифровку ошибок
 80019be:	4878      	ldr	r0, [pc, #480]	; (8001ba0 <main+0x330>)
 80019c0:	f7ff fad4 	bl	8000f6c <set_comand>
  set_comand(ATCGATT1);         // включить GPRS сервис
 80019c4:	4877      	ldr	r0, [pc, #476]	; (8001ba4 <main+0x334>)
 80019c6:	f7ff fad1 	bl	8000f6c <set_comand>
  set_comand(ATCGATT);          // проверить подключен ли к GPRS - +CGATT: 1
 80019ca:	4877      	ldr	r0, [pc, #476]	; (8001ba8 <main+0x338>)
 80019cc:	f7ff face 	bl	8000f6c <set_comand>
  set_comand(ATCIPMUX0);        // установить режим одиночного соединения
 80019d0:	4876      	ldr	r0, [pc, #472]	; (8001bac <main+0x33c>)
 80019d2:	f7ff facb 	bl	8000f6c <set_comand>
  chek_status(ATCIPSTATUS, 1);  // должно вернуть IP INITIAL
 80019d6:	4649      	mov	r1, r9
 80019d8:	4875      	ldr	r0, [pc, #468]	; (8001bb0 <main+0x340>)
 80019da:	f7ff fbc7 	bl	800116c <chek_status>
  set_comand(ATCSTTAPN);        // APN, имя пользователя и пароль
 80019de:	4875      	ldr	r0, [pc, #468]	; (8001bb4 <main+0x344>)
 80019e0:	f7ff fac4 	bl	8000f6c <set_comand>
  chek_status(ATCIPSTATUS, 2);  // должно вернуть IP START
 80019e4:	4651      	mov	r1, sl
 80019e6:	4872      	ldr	r0, [pc, #456]	; (8001bb0 <main+0x340>)
 80019e8:	f7ff fbc0 	bl	800116c <chek_status>
  set_comand(ATCIICR);          // устанавливаем беспроводное подключение GPRS
 80019ec:	4872      	ldr	r0, [pc, #456]	; (8001bb8 <main+0x348>)
 80019ee:	f7ff fabd 	bl	8000f6c <set_comand>
  chek_status(ATCIPSTATUS, 3);  // должно вернуть IP GPRSACT
 80019f2:	2103      	movs	r1, #3
 80019f4:	486e      	ldr	r0, [pc, #440]	; (8001bb0 <main+0x340>)
 80019f6:	f7ff fbb9 	bl	800116c <chek_status>
  set_comand(ATCIFSR);          // возвращает IP-адрес модуля
 80019fa:	4870      	ldr	r0, [pc, #448]	; (8001bbc <main+0x34c>)
 80019fc:	f7ff fab6 	bl	8000f6c <set_comand>
  chek_status(ATCIPSTATUS, 4);  // должно вернуть IP STATUS
 8001a00:	2104      	movs	r1, #4
 8001a02:	486b      	ldr	r0, [pc, #428]	; (8001bb0 <main+0x340>)
 8001a04:	f7ff fbb2 	bl	800116c <chek_status>
  set_comand(ATCDNSCFG);        // установить сервера DNS
 8001a08:	486d      	ldr	r0, [pc, #436]	; (8001bc0 <main+0x350>)
 8001a0a:	f7ff faaf 	bl	8000f6c <set_comand>
  send_tcp(); // отправка данных серверу
 8001a0e:	f7ff fd89 	bl	8001524 <send_tcp>
  HAL_TIM_Base_Start_IT(&htim4);
 8001a12:	4638      	mov	r0, r7
 8001a14:	f7fe ffec 	bl	80009f0 <HAL_TIM_Base_Start_IT>
		if(flag == 1) // срабатывает раз в секунду выводить время
 8001a18:	4f6a      	ldr	r7, [pc, #424]	; (8001bc4 <main+0x354>)
			snprintf(str, GSM_AVAIL_SIZE, "My %s\n", buf);
 8001a1a:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 8001be8 <main+0x378>
		if(flag == 1) // срабатывает раз в секунду выводить время
 8001a1e:	783b      	ldrb	r3, [r7, #0]
 8001a20:	2b01      	cmp	r3, #1
			flag = 0;
 8001a22:	bf04      	itt	eq
 8001a24:	2300      	moveq	r3, #0
 8001a26:	703b      	strbeq	r3, [r7, #0]
		if(gsm_available()) //если модуль что-то прислал
 8001a28:	f000 fa48 	bl	8001ebc <gsm_available>
 8001a2c:	2800      	cmp	r0, #0
 8001a2e:	d071      	beq.n	8001b14 <main+0x2a4>
			char buf[GSM_AVAIL_SIZE] = {0,};
 8001a30:	2280      	movs	r2, #128	; 0x80
 8001a32:	2100      	movs	r1, #0
 8001a34:	4620      	mov	r0, r4
 8001a36:	f000 fadf 	bl	8001ff8 <memset>
			char str[GSM_AVAIL_SIZE] = {0,};
 8001a3a:	2280      	movs	r2, #128	; 0x80
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	4630      	mov	r0, r6
 8001a40:	f000 fada 	bl	8001ff8 <memset>
			HAL_Delay(50);
 8001a44:	2032      	movs	r0, #50	; 0x32
 8001a46:	f7fe fbd1 	bl	80001ec <HAL_Delay>
			while(gsm_available())
 8001a4a:	2500      	movs	r5, #0
 8001a4c:	f000 fa36 	bl	8001ebc <gsm_available>
 8001a50:	b128      	cbz	r0, 8001a5e <main+0x1ee>
				buf[i++] = gsm_read();
 8001a52:	f000 fa3f 	bl	8001ed4 <gsm_read>
 8001a56:	5560      	strb	r0, [r4, r5]
 8001a58:	3501      	adds	r5, #1
				if(i > GSM_AVAIL_SIZE - 1) break;
 8001a5a:	2d80      	cmp	r5, #128	; 0x80
 8001a5c:	d138      	bne.n	8001ad0 <main+0x260>
			clear_string(buf); // очищаем строку от символов \r и \n  +PDP: DEACT
 8001a5e:	4620      	mov	r0, r4
 8001a60:	f7ff fc94 	bl	800138c <clear_string>
			if(strstr(buf, "RING") != NULL) // ЕСЛИ ЭТО ЗВОНОК
 8001a64:	4641      	mov	r1, r8
 8001a66:	4620      	mov	r0, r4
 8001a68:	f000 fb10 	bl	800208c <strstr>
 8001a6c:	2800      	cmp	r0, #0
 8001a6e:	d133      	bne.n	8001ad8 <main+0x268>
			else if(strstr(buf, "DEACT") != NULL) // ЕСЛИ ЭТО +PDP: DEACT
 8001a70:	4955      	ldr	r1, [pc, #340]	; (8001bc8 <main+0x358>)
 8001a72:	4620      	mov	r0, r4
 8001a74:	f000 fb0a 	bl	800208c <strstr>
 8001a78:	2800      	cmp	r0, #0
 8001a7a:	d03b      	beq.n	8001af4 <main+0x284>
				HAL_UART_Transmit(DEBUG, (uint8_t*)"My_DEACT\n", strlen("My_DEACT\n"), 1000);
 8001a7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a80:	2209      	movs	r2, #9
 8001a82:	4952      	ldr	r1, [pc, #328]	; (8001bcc <main+0x35c>)
 8001a84:	4852      	ldr	r0, [pc, #328]	; (8001bd0 <main+0x360>)
 8001a86:	f7ff fa09 	bl	8000e9c <HAL_UART_Transmit>
				set_comand(ATCIPSHUT); // разорвать все соединения и деактивировать интерфейс GPRS
 8001a8a:	4852      	ldr	r0, [pc, #328]	; (8001bd4 <main+0x364>)
 8001a8c:	f7ff fa6e 	bl	8000f6c <set_comand>
				set_comand(ATCIPMUX0);        // установить режим одиночного соединения
 8001a90:	4846      	ldr	r0, [pc, #280]	; (8001bac <main+0x33c>)
 8001a92:	f7ff fa6b 	bl	8000f6c <set_comand>
				chek_status(ATCIPSTATUS, 1);
 8001a96:	2101      	movs	r1, #1
 8001a98:	4845      	ldr	r0, [pc, #276]	; (8001bb0 <main+0x340>)
 8001a9a:	f7ff fb67 	bl	800116c <chek_status>
				set_comand(ATCSTTAPN);        // APN, имя пользователя и пароль
 8001a9e:	4845      	ldr	r0, [pc, #276]	; (8001bb4 <main+0x344>)
 8001aa0:	f7ff fa64 	bl	8000f6c <set_comand>
				chek_status(ATCIPSTATUS, 2);
 8001aa4:	2102      	movs	r1, #2
 8001aa6:	4842      	ldr	r0, [pc, #264]	; (8001bb0 <main+0x340>)
 8001aa8:	f7ff fb60 	bl	800116c <chek_status>
				set_comand(ATCIICR);          // устанавливаем беспроводное подключение GPRS
 8001aac:	4842      	ldr	r0, [pc, #264]	; (8001bb8 <main+0x348>)
 8001aae:	f7ff fa5d 	bl	8000f6c <set_comand>
				chek_status(ATCIPSTATUS, 3);
 8001ab2:	2103      	movs	r1, #3
 8001ab4:	483e      	ldr	r0, [pc, #248]	; (8001bb0 <main+0x340>)
 8001ab6:	f7ff fb59 	bl	800116c <chek_status>
				set_comand(ATCIFSR);          // возвращает IP-адрес модуля
 8001aba:	4840      	ldr	r0, [pc, #256]	; (8001bbc <main+0x34c>)
 8001abc:	f7ff fa56 	bl	8000f6c <set_comand>
				chek_status(ATCIPSTATUS, 4);
 8001ac0:	2104      	movs	r1, #4
 8001ac2:	483b      	ldr	r0, [pc, #236]	; (8001bb0 <main+0x340>)
 8001ac4:	f7ff fb52 	bl	800116c <chek_status>
				set_comand(ATCDNSCFG);       // установить сервера DNS
 8001ac8:	483d      	ldr	r0, [pc, #244]	; (8001bc0 <main+0x350>)
 8001aca:	f7ff fa4f 	bl	8000f6c <set_comand>
 8001ace:	e011      	b.n	8001af4 <main+0x284>
				HAL_Delay(1);
 8001ad0:	2001      	movs	r0, #1
 8001ad2:	f7fe fb8b 	bl	80001ec <HAL_Delay>
 8001ad6:	e7b9      	b.n	8001a4c <main+0x1dc>
				if(strstr(buf, "9823124561") != NULL) // если звонит нужный номер
 8001ad8:	493f      	ldr	r1, [pc, #252]	; (8001bd8 <main+0x368>)
 8001ada:	4620      	mov	r0, r4
 8001adc:	f000 fad6 	bl	800208c <strstr>
 8001ae0:	b140      	cbz	r0, 8001af4 <main+0x284>
					HAL_UART_Transmit(DEBUG, (uint8_t*)"My number\n", strlen("My number\n"), 1000);
 8001ae2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ae6:	220a      	movs	r2, #10
 8001ae8:	493c      	ldr	r1, [pc, #240]	; (8001bdc <main+0x36c>)
 8001aea:	4839      	ldr	r0, [pc, #228]	; (8001bd0 <main+0x360>)
 8001aec:	f7ff f9d6 	bl	8000e9c <HAL_UART_Transmit>
					disable_connection(); // сброс соединения
 8001af0:	f7ff fc34 	bl	800135c <disable_connection>
			snprintf(str, GSM_AVAIL_SIZE, "My %s\n", buf);
 8001af4:	4623      	mov	r3, r4
 8001af6:	464a      	mov	r2, r9
 8001af8:	2180      	movs	r1, #128	; 0x80
 8001afa:	4630      	mov	r0, r6
 8001afc:	f000 fa84 	bl	8002008 <sniprintf>
			HAL_UART_Transmit(DEBUG, (uint8_t*)str, strlen(str), 1000);
 8001b00:	4630      	mov	r0, r6
 8001b02:	f7fe fb23 	bl	800014c <strlen>
 8001b06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b0a:	b282      	uxth	r2, r0
 8001b0c:	4631      	mov	r1, r6
 8001b0e:	4830      	ldr	r0, [pc, #192]	; (8001bd0 <main+0x360>)
 8001b10:	f7ff f9c4 	bl	8000e9c <HAL_UART_Transmit>
		if(dbg_available()) //если послали в терминал какую-то команду, то она перенаправиться в модем
 8001b14:	f000 f9fa 	bl	8001f0c <dbg_available>
 8001b18:	2800      	cmp	r0, #0
 8001b1a:	d080      	beq.n	8001a1e <main+0x1ae>
			char dbg_str[DBG_AVAIL_SIZE] = {0,};
 8001b1c:	2280      	movs	r2, #128	; 0x80
 8001b1e:	2100      	movs	r1, #0
 8001b20:	4620      	mov	r0, r4
 8001b22:	f000 fa69 	bl	8001ff8 <memset>
			char dbg_buf[DBG_AVAIL_SIZE] = {0,};
 8001b26:	2280      	movs	r2, #128	; 0x80
 8001b28:	2100      	movs	r1, #0
 8001b2a:	4630      	mov	r0, r6
 8001b2c:	f000 fa64 	bl	8001ff8 <memset>
			while(dbg_available())
 8001b30:	2500      	movs	r5, #0
 8001b32:	f000 f9eb 	bl	8001f0c <dbg_available>
 8001b36:	b128      	cbz	r0, 8001b44 <main+0x2d4>
				dbg_buf[i++] = dbg_read();
 8001b38:	f000 f9f4 	bl	8001f24 <dbg_read>
 8001b3c:	5570      	strb	r0, [r6, r5]
 8001b3e:	3501      	adds	r5, #1
				if(i > DBG_AVAIL_SIZE - 1) break;
 8001b40:	2d80      	cmp	r5, #128	; 0x80
 8001b42:	d113      	bne.n	8001b6c <main+0x2fc>
			clear_string(dbg_buf);
 8001b44:	4630      	mov	r0, r6
 8001b46:	f7ff fc21 	bl	800138c <clear_string>
			snprintf(dbg_str, DBG_AVAIL_SIZE, "%s\r\n", dbg_buf);
 8001b4a:	4633      	mov	r3, r6
 8001b4c:	4a24      	ldr	r2, [pc, #144]	; (8001be0 <main+0x370>)
 8001b4e:	2180      	movs	r1, #128	; 0x80
 8001b50:	4620      	mov	r0, r4
 8001b52:	f000 fa59 	bl	8002008 <sniprintf>
			HAL_UART_Transmit(GSM, (uint8_t*)dbg_str, strlen(dbg_str), 1000);
 8001b56:	4620      	mov	r0, r4
 8001b58:	f7fe faf8 	bl	800014c <strlen>
 8001b5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b60:	b282      	uxth	r2, r0
 8001b62:	4621      	mov	r1, r4
 8001b64:	4808      	ldr	r0, [pc, #32]	; (8001b88 <main+0x318>)
 8001b66:	f7ff f999 	bl	8000e9c <HAL_UART_Transmit>
 8001b6a:	e758      	b.n	8001a1e <main+0x1ae>
				HAL_Delay(1);
 8001b6c:	2001      	movs	r0, #1
 8001b6e:	f7fe fb3d 	bl	80001ec <HAL_Delay>
 8001b72:	e7de      	b.n	8001b32 <main+0x2c2>
 8001b74:	40021000 	.word	0x40021000
 8001b78:	40010800 	.word	0x40010800
 8001b7c:	200004e8 	.word	0x200004e8
 8001b80:	40000800 	.word	0x40000800
 8001b84:	40004800 	.word	0x40004800
 8001b88:	20000568 	.word	0x20000568
 8001b8c:	08002a2c 	.word	0x08002a2c
 8001b90:	08002a34 	.word	0x08002a34
 8001b94:	08002a3d 	.word	0x08002a3d
 8001b98:	08002a47 	.word	0x08002a47
 8001b9c:	08002a4c 	.word	0x08002a4c
 8001ba0:	08002a53 	.word	0x08002a53
 8001ba4:	08002a5d 	.word	0x08002a5d
 8001ba8:	08002a68 	.word	0x08002a68
 8001bac:	08002a72 	.word	0x08002a72
 8001bb0:	08002a7e 	.word	0x08002a7e
 8001bb4:	08002a8b 	.word	0x08002a8b
 8001bb8:	08002ab1 	.word	0x08002ab1
 8001bbc:	08002aba 	.word	0x08002aba
 8001bc0:	08002ac3 	.word	0x08002ac3
 8001bc4:	2000008c 	.word	0x2000008c
 8001bc8:	08002afd 	.word	0x08002afd
 8001bcc:	08002b03 	.word	0x08002b03
 8001bd0:	20000528 	.word	0x20000528
 8001bd4:	08002b0d 	.word	0x08002b0d
 8001bd8:	08002ae7 	.word	0x08002ae7
 8001bdc:	08002af2 	.word	0x08002af2
 8001be0:	0800295c 	.word	0x0800295c
 8001be4:	08002ae2 	.word	0x08002ae2
 8001be8:	08002b18 	.word	0x08002b18

08001bec <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001bec:	4b0e      	ldr	r3, [pc, #56]	; (8001c28 <HAL_MspInit+0x3c>)
{
 8001bee:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001bf0:	699a      	ldr	r2, [r3, #24]
 8001bf2:	f042 0201 	orr.w	r2, r2, #1
 8001bf6:	619a      	str	r2, [r3, #24]
 8001bf8:	699a      	ldr	r2, [r3, #24]
 8001bfa:	f002 0201 	and.w	r2, r2, #1
 8001bfe:	9200      	str	r2, [sp, #0]
 8001c00:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c02:	69da      	ldr	r2, [r3, #28]
 8001c04:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c08:	61da      	str	r2, [r3, #28]
 8001c0a:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c0c:	4a07      	ldr	r2, [pc, #28]	; (8001c2c <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c12:	9301      	str	r3, [sp, #4]
 8001c14:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c16:	6853      	ldr	r3, [r2, #4]
 8001c18:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001c1c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c20:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c22:	b002      	add	sp, #8
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	40010000 	.word	0x40010000

08001c30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c30:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM4)
 8001c32:	4b0d      	ldr	r3, [pc, #52]	; (8001c68 <HAL_TIM_Base_MspInit+0x38>)
 8001c34:	6802      	ldr	r2, [r0, #0]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d112      	bne.n	8001c60 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c3a:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001c3e:	69da      	ldr	r2, [r3, #28]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 3, 0);
 8001c40:	201e      	movs	r0, #30
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c42:	f042 0204 	orr.w	r2, r2, #4
 8001c46:	61da      	str	r2, [r3, #28]
 8001c48:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 3, 0);
 8001c4a:	2200      	movs	r2, #0
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c4c:	f003 0304 	and.w	r3, r3, #4
 8001c50:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM4_IRQn, 3, 0);
 8001c52:	2103      	movs	r1, #3
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c54:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM4_IRQn, 3, 0);
 8001c56:	f7fe faed 	bl	8000234 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001c5a:	201e      	movs	r0, #30
 8001c5c:	f7fe fb1e 	bl	800029c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001c60:	b003      	add	sp, #12
 8001c62:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c66:	bf00      	nop
 8001c68:	40000800 	.word	0x40000800

08001c6c <HAL_UART_MspInit>:
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c6c:	2210      	movs	r2, #16
{
 8001c6e:	b530      	push	{r4, r5, lr}
 8001c70:	4604      	mov	r4, r0
 8001c72:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c74:	eb0d 0002 	add.w	r0, sp, r2
 8001c78:	2100      	movs	r1, #0
 8001c7a:	f000 f9bd 	bl	8001ff8 <memset>
  if(huart->Instance==USART1)
 8001c7e:	6823      	ldr	r3, [r4, #0]
 8001c80:	4a33      	ldr	r2, [pc, #204]	; (8001d50 <HAL_UART_MspInit+0xe4>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d131      	bne.n	8001cea <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c86:	4b33      	ldr	r3, [pc, #204]	; (8001d54 <HAL_UART_MspInit+0xe8>)
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c88:	a904      	add	r1, sp, #16
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c8a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c8c:	4832      	ldr	r0, [pc, #200]	; (8001d58 <HAL_UART_MspInit+0xec>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c92:	619a      	str	r2, [r3, #24]
 8001c94:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c96:	2400      	movs	r4, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c98:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001c9c:	9200      	str	r2, [sp, #0]
 8001c9e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca0:	699a      	ldr	r2, [r3, #24]
 8001ca2:	f042 0204 	orr.w	r2, r2, #4
 8001ca6:	619a      	str	r2, [r3, #24]
 8001ca8:	699b      	ldr	r3, [r3, #24]
 8001caa:	f003 0304 	and.w	r3, r3, #4
 8001cae:	9301      	str	r3, [sp, #4]
 8001cb0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001cb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cb6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb8:	2302      	movs	r3, #2
 8001cba:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc0:	f7fe fb10 	bl	80002e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001cc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc8:	a904      	add	r1, sp, #16
 8001cca:	4823      	ldr	r0, [pc, #140]	; (8001d58 <HAL_UART_MspInit+0xec>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ccc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cce:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd0:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd2:	f7fe fb07 	bl	80002e4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8001cd6:	2025      	movs	r0, #37	; 0x25
 8001cd8:	4622      	mov	r2, r4
 8001cda:	2101      	movs	r1, #1
 8001cdc:	f7fe faaa 	bl	8000234 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001ce0:	2025      	movs	r0, #37	; 0x25
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 2, 0);
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001ce2:	f7fe fadb 	bl	800029c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001ce6:	b009      	add	sp, #36	; 0x24
 8001ce8:	bd30      	pop	{r4, r5, pc}
  else if(huart->Instance==USART3)
 8001cea:	4a1c      	ldr	r2, [pc, #112]	; (8001d5c <HAL_UART_MspInit+0xf0>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d1fa      	bne.n	8001ce6 <HAL_UART_MspInit+0x7a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001cf0:	4b18      	ldr	r3, [pc, #96]	; (8001d54 <HAL_UART_MspInit+0xe8>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf2:	2502      	movs	r5, #2
    __HAL_RCC_USART3_CLK_ENABLE();
 8001cf4:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cf6:	a904      	add	r1, sp, #16
    __HAL_RCC_USART3_CLK_ENABLE();
 8001cf8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001cfc:	61da      	str	r2, [r3, #28]
 8001cfe:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d00:	4817      	ldr	r0, [pc, #92]	; (8001d60 <HAL_UART_MspInit+0xf4>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d02:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8001d06:	9202      	str	r2, [sp, #8]
 8001d08:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d0a:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d0c:	2400      	movs	r4, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d0e:	f042 0208 	orr.w	r2, r2, #8
 8001d12:	619a      	str	r2, [r3, #24]
 8001d14:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d16:	9505      	str	r5, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d18:	f003 0308 	and.w	r3, r3, #8
 8001d1c:	9303      	str	r3, [sp, #12]
 8001d1e:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d24:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d26:	2303      	movs	r3, #3
 8001d28:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d2a:	f7fe fadb 	bl	80002e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001d2e:	f44f 6300 	mov.w	r3, #2048	; 0x800
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d32:	a904      	add	r1, sp, #16
 8001d34:	480a      	ldr	r0, [pc, #40]	; (8001d60 <HAL_UART_MspInit+0xf4>)
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001d36:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d38:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3a:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d3c:	f7fe fad2 	bl	80002e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 2, 0);
 8001d40:	2027      	movs	r0, #39	; 0x27
 8001d42:	4622      	mov	r2, r4
 8001d44:	4629      	mov	r1, r5
 8001d46:	f7fe fa75 	bl	8000234 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001d4a:	2027      	movs	r0, #39	; 0x27
 8001d4c:	e7c9      	b.n	8001ce2 <HAL_UART_MspInit+0x76>
 8001d4e:	bf00      	nop
 8001d50:	40013800 	.word	0x40013800
 8001d54:	40021000 	.word	0x40021000
 8001d58:	40010800 	.word	0x40010800
 8001d5c:	40004800 	.word	0x40004800
 8001d60:	40010c00 	.word	0x40010c00

08001d64 <NMI_Handler>:
 8001d64:	4770      	bx	lr

08001d66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d66:	e7fe      	b.n	8001d66 <HardFault_Handler>

08001d68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d68:	e7fe      	b.n	8001d68 <MemManage_Handler>

08001d6a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d6a:	e7fe      	b.n	8001d6a <BusFault_Handler>

08001d6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d6c:	e7fe      	b.n	8001d6c <UsageFault_Handler>

08001d6e <SVC_Handler>:
 8001d6e:	4770      	bx	lr

08001d70 <DebugMon_Handler>:
 8001d70:	4770      	bx	lr

08001d72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d72:	4770      	bx	lr

08001d74 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d74:	f7fe ba28 	b.w	80001c8 <HAL_IncTick>

08001d78 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001d78:	4801      	ldr	r0, [pc, #4]	; (8001d80 <TIM4_IRQHandler+0x8>)
 8001d7a:	f7fe be4d 	b.w	8000a18 <HAL_TIM_IRQHandler>
 8001d7e:	bf00      	nop
 8001d80:	200004e8 	.word	0x200004e8

08001d84 <USART1_IRQHandler>:
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */
	if(((huart1.Instance->SR & USART_SR_RXNE) != RESET) && ((huart1.Instance->CR1 & USART_CR1_RXNEIE) != RESET))
 8001d84:	4b0d      	ldr	r3, [pc, #52]	; (8001dbc <USART1_IRQHandler+0x38>)
{
 8001d86:	b510      	push	{r4, lr}
	if(((huart1.Instance->SR & USART_SR_RXNE) != RESET) && ((huart1.Instance->CR1 & USART_CR1_RXNEIE) != RESET))
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	0691      	lsls	r1, r2, #26
 8001d8e:	d513      	bpl.n	8001db8 <USART1_IRQHandler+0x34>
 8001d90:	68da      	ldr	r2, [r3, #12]
 8001d92:	0692      	lsls	r2, r2, #26
 8001d94:	d510      	bpl.n	8001db8 <USART1_IRQHandler+0x34>
	{
		uint8_t rbyte = (uint8_t)(huart1.Instance->DR & (uint8_t)0x00FF); // читает байт из регистра
		gsm_rx_buffer_index_t i = (uint16_t)(gsm_rx_buffer_head + 1) % GPRS_RX_BUFFER_SIZE;
 8001d96:	4a0a      	ldr	r2, [pc, #40]	; (8001dc0 <USART1_IRQHandler+0x3c>)

		if(i != gsm_rx_buffer_tail)
 8001d98:	490a      	ldr	r1, [pc, #40]	; (8001dc4 <USART1_IRQHandler+0x40>)
		uint8_t rbyte = (uint8_t)(huart1.Instance->DR & (uint8_t)0x00FF); // читает байт из регистра
 8001d9a:	6858      	ldr	r0, [r3, #4]
		gsm_rx_buffer_index_t i = (uint16_t)(gsm_rx_buffer_head + 1) % GPRS_RX_BUFFER_SIZE;
 8001d9c:	8813      	ldrh	r3, [r2, #0]
		if(i != gsm_rx_buffer_tail)
 8001d9e:	8809      	ldrh	r1, [r1, #0]
		gsm_rx_buffer_index_t i = (uint16_t)(gsm_rx_buffer_head + 1) % GPRS_RX_BUFFER_SIZE;
 8001da0:	3301      	adds	r3, #1
 8001da2:	f3c3 0309 	ubfx	r3, r3, #0, #10
		if(i != gsm_rx_buffer_tail)
 8001da6:	b289      	uxth	r1, r1
 8001da8:	428b      	cmp	r3, r1
		uint8_t rbyte = (uint8_t)(huart1.Instance->DR & (uint8_t)0x00FF); // читает байт из регистра
 8001daa:	b2c0      	uxtb	r0, r0
		if(i != gsm_rx_buffer_tail)
 8001dac:	d004      	beq.n	8001db8 <USART1_IRQHandler+0x34>
		{
			gsm_rx_buffer[gsm_rx_buffer_head] = rbyte;
 8001dae:	8811      	ldrh	r1, [r2, #0]
 8001db0:	4c05      	ldr	r4, [pc, #20]	; (8001dc8 <USART1_IRQHandler+0x44>)
 8001db2:	b289      	uxth	r1, r1
 8001db4:	5460      	strb	r0, [r4, r1]
			gsm_rx_buffer_head = i;
 8001db6:	8013      	strh	r3, [r2, #0]
 8001db8:	bd10      	pop	{r4, pc}
 8001dba:	bf00      	nop
 8001dbc:	20000568 	.word	0x20000568
 8001dc0:	200004d6 	.word	0x200004d6
 8001dc4:	200004d8 	.word	0x200004d8
 8001dc8:	200000d6 	.word	0x200000d6

08001dcc <USART3_IRQHandler>:
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */
	if(((huart3.Instance->SR & USART_SR_RXNE) != RESET) && ((huart3.Instance->CR1 & USART_CR1_RXNEIE) != RESET))
 8001dcc:	4b0c      	ldr	r3, [pc, #48]	; (8001e00 <USART3_IRQHandler+0x34>)
{
 8001dce:	b510      	push	{r4, lr}
	if(((huart3.Instance->SR & USART_SR_RXNE) != RESET) && ((huart3.Instance->CR1 & USART_CR1_RXNEIE) != RESET))
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	0691      	lsls	r1, r2, #26
 8001dd6:	d512      	bpl.n	8001dfe <USART3_IRQHandler+0x32>
 8001dd8:	68da      	ldr	r2, [r3, #12]
 8001dda:	0692      	lsls	r2, r2, #26
 8001ddc:	d50f      	bpl.n	8001dfe <USART3_IRQHandler+0x32>
	{
		uint8_t rbyte = (uint8_t)(huart3.Instance->DR & (uint8_t)0x00FF); // читает байт из регистра
		dbg_rx_buffer_index_t i = (uint16_t)(dbg_rx_buffer_head + 1) % DBG_RX_BUFFER_SIZE;
 8001dde:	4a09      	ldr	r2, [pc, #36]	; (8001e04 <USART3_IRQHandler+0x38>)
		uint8_t rbyte = (uint8_t)(huart3.Instance->DR & (uint8_t)0x00FF); // читает байт из регистра
 8001de0:	6859      	ldr	r1, [r3, #4]

		if(i != dbg_rx_buffer_tail)
 8001de2:	4809      	ldr	r0, [pc, #36]	; (8001e08 <USART3_IRQHandler+0x3c>)
		dbg_rx_buffer_index_t i = (uint16_t)(dbg_rx_buffer_head + 1) % DBG_RX_BUFFER_SIZE;
 8001de4:	7813      	ldrb	r3, [r2, #0]
		if(i != dbg_rx_buffer_tail)
 8001de6:	7800      	ldrb	r0, [r0, #0]
		dbg_rx_buffer_index_t i = (uint16_t)(dbg_rx_buffer_head + 1) % DBG_RX_BUFFER_SIZE;
 8001de8:	3301      	adds	r3, #1
 8001dea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		if(i != dbg_rx_buffer_tail)
 8001dee:	4283      	cmp	r3, r0
		{
			dbg_rx_buffer[dbg_rx_buffer_head] = rbyte;
 8001df0:	bf1c      	itt	ne
 8001df2:	7810      	ldrbne	r0, [r2, #0]
 8001df4:	4c05      	ldrne	r4, [pc, #20]	; (8001e0c <USART3_IRQHandler+0x40>)
		uint8_t rbyte = (uint8_t)(huart3.Instance->DR & (uint8_t)0x00FF); // читает байт из регистра
 8001df6:	b2c9      	uxtb	r1, r1
			dbg_rx_buffer[dbg_rx_buffer_head] = rbyte;
 8001df8:	bf1c      	itt	ne
 8001dfa:	5421      	strbne	r1, [r4, r0]
			dbg_rx_buffer_head = i;
 8001dfc:	7013      	strbne	r3, [r2, #0]
 8001dfe:	bd10      	pop	{r4, pc}
 8001e00:	20000528 	.word	0x20000528
 8001e04:	200000d4 	.word	0x200000d4
 8001e08:	200000d5 	.word	0x200000d5
 8001e0c:	20000094 	.word	0x20000094

08001e10 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8001e10:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001e12:	4b0a      	ldr	r3, [pc, #40]	; (8001e3c <_sbrk+0x2c>)
{
 8001e14:	4602      	mov	r2, r0
	if (heap_end == 0)
 8001e16:	6819      	ldr	r1, [r3, #0]
 8001e18:	b909      	cbnz	r1, 8001e1e <_sbrk+0xe>
		heap_end = &end;
 8001e1a:	4909      	ldr	r1, [pc, #36]	; (8001e40 <_sbrk+0x30>)
 8001e1c:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8001e1e:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8001e20:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8001e22:	4402      	add	r2, r0
 8001e24:	428a      	cmp	r2, r1
 8001e26:	d906      	bls.n	8001e36 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001e28:	f000 f8bc 	bl	8001fa4 <__errno>
 8001e2c:	230c      	movs	r3, #12
 8001e2e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8001e30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e34:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8001e36:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8001e38:	bd08      	pop	{r3, pc}
 8001e3a:	bf00      	nop
 8001e3c:	20000090 	.word	0x20000090
 8001e40:	200005ac 	.word	0x200005ac

08001e44 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001e44:	4b0f      	ldr	r3, [pc, #60]	; (8001e84 <SystemInit+0x40>)
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	f042 0201 	orr.w	r2, r2, #1
 8001e4c:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001e4e:	6859      	ldr	r1, [r3, #4]
 8001e50:	4a0d      	ldr	r2, [pc, #52]	; (8001e88 <SystemInit+0x44>)
 8001e52:	400a      	ands	r2, r1
 8001e54:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001e5c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001e60:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001e68:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001e6a:	685a      	ldr	r2, [r3, #4]
 8001e6c:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001e70:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001e72:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001e76:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001e78:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e7c:	4b03      	ldr	r3, [pc, #12]	; (8001e8c <SystemInit+0x48>)
 8001e7e:	609a      	str	r2, [r3, #8]
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	40021000 	.word	0x40021000
 8001e88:	f8ff0000 	.word	0xf8ff0000
 8001e8c:	e000ed00 	.word	0xe000ed00

08001e90 <clear_gsm_buff>:
volatile gsm_rx_buffer_index_t gsm_rx_buffer_tail = 0;
uint8_t gsm_rx_buffer[GPRS_RX_BUFFER_SIZE] = {0,};

void clear_gsm_buff()
{
	__HAL_UART_DISABLE_IT(&huart1, UART_IT_RXNE);
 8001e90:	4b07      	ldr	r3, [pc, #28]	; (8001eb0 <clear_gsm_buff+0x20>)
	gsm_rx_buffer_head = 0;
 8001e92:	4908      	ldr	r1, [pc, #32]	; (8001eb4 <clear_gsm_buff+0x24>)
	__HAL_UART_DISABLE_IT(&huart1, UART_IT_RXNE);
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	68da      	ldr	r2, [r3, #12]
 8001e98:	f022 0220 	bic.w	r2, r2, #32
 8001e9c:	60da      	str	r2, [r3, #12]
	gsm_rx_buffer_head = 0;
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	800a      	strh	r2, [r1, #0]
	gsm_rx_buffer_tail = 0;
 8001ea2:	4905      	ldr	r1, [pc, #20]	; (8001eb8 <clear_gsm_buff+0x28>)
 8001ea4:	800a      	strh	r2, [r1, #0]
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8001ea6:	68da      	ldr	r2, [r3, #12]
 8001ea8:	f042 0220 	orr.w	r2, r2, #32
 8001eac:	60da      	str	r2, [r3, #12]
 8001eae:	4770      	bx	lr
 8001eb0:	20000568 	.word	0x20000568
 8001eb4:	200004d6 	.word	0x200004d6
 8001eb8:	200004d8 	.word	0x200004d8

08001ebc <gsm_available>:
}

uint16_t gsm_available(void)
{
	return ((uint16_t)(GPRS_RX_BUFFER_SIZE + gsm_rx_buffer_head - gsm_rx_buffer_tail)) % GPRS_RX_BUFFER_SIZE;
 8001ebc:	4b03      	ldr	r3, [pc, #12]	; (8001ecc <gsm_available+0x10>)
 8001ebe:	8818      	ldrh	r0, [r3, #0]
 8001ec0:	4b03      	ldr	r3, [pc, #12]	; (8001ed0 <gsm_available+0x14>)
 8001ec2:	881b      	ldrh	r3, [r3, #0]
 8001ec4:	1ac0      	subs	r0, r0, r3
}
 8001ec6:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8001eca:	4770      	bx	lr
 8001ecc:	200004d6 	.word	0x200004d6
 8001ed0:	200004d8 	.word	0x200004d8

08001ed4 <gsm_read>:

uint16_t gsm_read(void)
{
	if(gsm_rx_buffer_head == gsm_rx_buffer_tail)
 8001ed4:	4b0a      	ldr	r3, [pc, #40]	; (8001f00 <gsm_read+0x2c>)
 8001ed6:	4a0b      	ldr	r2, [pc, #44]	; (8001f04 <gsm_read+0x30>)
 8001ed8:	8819      	ldrh	r1, [r3, #0]
 8001eda:	8813      	ldrh	r3, [r2, #0]
 8001edc:	b289      	uxth	r1, r1
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	4299      	cmp	r1, r3
 8001ee2:	d00a      	beq.n	8001efa <gsm_read+0x26>
	{
		return -1;
	}
	else
	{
		unsigned char c = gsm_rx_buffer[gsm_rx_buffer_tail];
 8001ee4:	8813      	ldrh	r3, [r2, #0]
 8001ee6:	4908      	ldr	r1, [pc, #32]	; (8001f08 <gsm_read+0x34>)
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	5cc8      	ldrb	r0, [r1, r3]
		gsm_rx_buffer_tail = (gsm_rx_buffer_index_t)(gsm_rx_buffer_tail + 1) % GPRS_RX_BUFFER_SIZE;
 8001eec:	8813      	ldrh	r3, [r2, #0]
		return c;
 8001eee:	b280      	uxth	r0, r0
		gsm_rx_buffer_tail = (gsm_rx_buffer_index_t)(gsm_rx_buffer_tail + 1) % GPRS_RX_BUFFER_SIZE;
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ef6:	8013      	strh	r3, [r2, #0]
		return c;
 8001ef8:	4770      	bx	lr
		return -1;
 8001efa:	f64f 70ff 	movw	r0, #65535	; 0xffff
	}
}
 8001efe:	4770      	bx	lr
 8001f00:	200004d6 	.word	0x200004d6
 8001f04:	200004d8 	.word	0x200004d8
 8001f08:	200000d6 	.word	0x200000d6

08001f0c <dbg_available>:
volatile dbg_rx_buffer_index_t dbg_rx_buffer_tail = 0;
uint8_t dbg_rx_buffer[DBG_RX_BUFFER_SIZE] = {0,};

uint16_t dbg_available(void)
{
	return ((uint16_t)(DBG_RX_BUFFER_SIZE + dbg_rx_buffer_head - dbg_rx_buffer_tail)) % DBG_RX_BUFFER_SIZE;
 8001f0c:	4b03      	ldr	r3, [pc, #12]	; (8001f1c <dbg_available+0x10>)
 8001f0e:	7818      	ldrb	r0, [r3, #0]
 8001f10:	4b03      	ldr	r3, [pc, #12]	; (8001f20 <dbg_available+0x14>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	1ac0      	subs	r0, r0, r3
}
 8001f16:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8001f1a:	4770      	bx	lr
 8001f1c:	200000d4 	.word	0x200000d4
 8001f20:	200000d5 	.word	0x200000d5

08001f24 <dbg_read>:

uint16_t dbg_read(void)
{
	if(dbg_rx_buffer_head == dbg_rx_buffer_tail)
 8001f24:	4b09      	ldr	r3, [pc, #36]	; (8001f4c <dbg_read+0x28>)
 8001f26:	4a0a      	ldr	r2, [pc, #40]	; (8001f50 <dbg_read+0x2c>)
 8001f28:	7819      	ldrb	r1, [r3, #0]
 8001f2a:	7813      	ldrb	r3, [r2, #0]
 8001f2c:	4299      	cmp	r1, r3
 8001f2e:	d009      	beq.n	8001f44 <dbg_read+0x20>
	{
		return -1;
	}
	else
	{
		uint8_t c = dbg_rx_buffer[dbg_rx_buffer_tail];
 8001f30:	7813      	ldrb	r3, [r2, #0]
 8001f32:	4908      	ldr	r1, [pc, #32]	; (8001f54 <dbg_read+0x30>)
 8001f34:	5cc8      	ldrb	r0, [r1, r3]
		dbg_rx_buffer_tail = (dbg_rx_buffer_index_t)(dbg_rx_buffer_tail + 1) % DBG_RX_BUFFER_SIZE;
 8001f36:	7813      	ldrb	r3, [r2, #0]
		return c;
 8001f38:	b280      	uxth	r0, r0
		dbg_rx_buffer_tail = (dbg_rx_buffer_index_t)(dbg_rx_buffer_tail + 1) % DBG_RX_BUFFER_SIZE;
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f40:	7013      	strb	r3, [r2, #0]
		return c;
 8001f42:	4770      	bx	lr
		return -1;
 8001f44:	f64f 70ff 	movw	r0, #65535	; 0xffff
	}
}
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	200000d4 	.word	0x200000d4
 8001f50:	200000d5 	.word	0x200000d5
 8001f54:	20000094 	.word	0x20000094

08001f58 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001f58:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001f5a:	e003      	b.n	8001f64 <LoopCopyDataInit>

08001f5c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001f5c:	4b0b      	ldr	r3, [pc, #44]	; (8001f8c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001f5e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001f60:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001f62:	3104      	adds	r1, #4

08001f64 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001f64:	480a      	ldr	r0, [pc, #40]	; (8001f90 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001f66:	4b0b      	ldr	r3, [pc, #44]	; (8001f94 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001f68:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001f6a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001f6c:	d3f6      	bcc.n	8001f5c <CopyDataInit>
  ldr r2, =_sbss
 8001f6e:	4a0a      	ldr	r2, [pc, #40]	; (8001f98 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001f70:	e002      	b.n	8001f78 <LoopFillZerobss>

08001f72 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001f72:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001f74:	f842 3b04 	str.w	r3, [r2], #4

08001f78 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001f78:	4b08      	ldr	r3, [pc, #32]	; (8001f9c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001f7a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001f7c:	d3f9      	bcc.n	8001f72 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001f7e:	f7ff ff61 	bl	8001e44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f82:	f000 f815 	bl	8001fb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f86:	f7ff fc73 	bl	8001870 <main>
  bx lr
 8001f8a:	4770      	bx	lr
  ldr r3, =_sidata
 8001f8c:	08002cc8 	.word	0x08002cc8
  ldr r0, =_sdata
 8001f90:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001f94:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8001f98:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8001f9c:	200005ac 	.word	0x200005ac

08001fa0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001fa0:	e7fe      	b.n	8001fa0 <ADC1_2_IRQHandler>
	...

08001fa4 <__errno>:
 8001fa4:	4b01      	ldr	r3, [pc, #4]	; (8001fac <__errno+0x8>)
 8001fa6:	6818      	ldr	r0, [r3, #0]
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	2000000c 	.word	0x2000000c

08001fb0 <__libc_init_array>:
 8001fb0:	b570      	push	{r4, r5, r6, lr}
 8001fb2:	2500      	movs	r5, #0
 8001fb4:	4e0c      	ldr	r6, [pc, #48]	; (8001fe8 <__libc_init_array+0x38>)
 8001fb6:	4c0d      	ldr	r4, [pc, #52]	; (8001fec <__libc_init_array+0x3c>)
 8001fb8:	1ba4      	subs	r4, r4, r6
 8001fba:	10a4      	asrs	r4, r4, #2
 8001fbc:	42a5      	cmp	r5, r4
 8001fbe:	d109      	bne.n	8001fd4 <__libc_init_array+0x24>
 8001fc0:	f000 fc86 	bl	80028d0 <_init>
 8001fc4:	2500      	movs	r5, #0
 8001fc6:	4e0a      	ldr	r6, [pc, #40]	; (8001ff0 <__libc_init_array+0x40>)
 8001fc8:	4c0a      	ldr	r4, [pc, #40]	; (8001ff4 <__libc_init_array+0x44>)
 8001fca:	1ba4      	subs	r4, r4, r6
 8001fcc:	10a4      	asrs	r4, r4, #2
 8001fce:	42a5      	cmp	r5, r4
 8001fd0:	d105      	bne.n	8001fde <__libc_init_array+0x2e>
 8001fd2:	bd70      	pop	{r4, r5, r6, pc}
 8001fd4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001fd8:	4798      	blx	r3
 8001fda:	3501      	adds	r5, #1
 8001fdc:	e7ee      	b.n	8001fbc <__libc_init_array+0xc>
 8001fde:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001fe2:	4798      	blx	r3
 8001fe4:	3501      	adds	r5, #1
 8001fe6:	e7f2      	b.n	8001fce <__libc_init_array+0x1e>
 8001fe8:	08002cc0 	.word	0x08002cc0
 8001fec:	08002cc0 	.word	0x08002cc0
 8001ff0:	08002cc0 	.word	0x08002cc0
 8001ff4:	08002cc4 	.word	0x08002cc4

08001ff8 <memset>:
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	4402      	add	r2, r0
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d100      	bne.n	8002002 <memset+0xa>
 8002000:	4770      	bx	lr
 8002002:	f803 1b01 	strb.w	r1, [r3], #1
 8002006:	e7f9      	b.n	8001ffc <memset+0x4>

08002008 <sniprintf>:
 8002008:	b40c      	push	{r2, r3}
 800200a:	b530      	push	{r4, r5, lr}
 800200c:	4b17      	ldr	r3, [pc, #92]	; (800206c <sniprintf+0x64>)
 800200e:	1e0c      	subs	r4, r1, #0
 8002010:	b09d      	sub	sp, #116	; 0x74
 8002012:	681d      	ldr	r5, [r3, #0]
 8002014:	da08      	bge.n	8002028 <sniprintf+0x20>
 8002016:	238b      	movs	r3, #139	; 0x8b
 8002018:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800201c:	602b      	str	r3, [r5, #0]
 800201e:	b01d      	add	sp, #116	; 0x74
 8002020:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002024:	b002      	add	sp, #8
 8002026:	4770      	bx	lr
 8002028:	f44f 7302 	mov.w	r3, #520	; 0x208
 800202c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002030:	bf0c      	ite	eq
 8002032:	4623      	moveq	r3, r4
 8002034:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8002038:	9304      	str	r3, [sp, #16]
 800203a:	9307      	str	r3, [sp, #28]
 800203c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002040:	9002      	str	r0, [sp, #8]
 8002042:	9006      	str	r0, [sp, #24]
 8002044:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002048:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800204a:	ab21      	add	r3, sp, #132	; 0x84
 800204c:	a902      	add	r1, sp, #8
 800204e:	4628      	mov	r0, r5
 8002050:	9301      	str	r3, [sp, #4]
 8002052:	f000 f891 	bl	8002178 <_svfiprintf_r>
 8002056:	1c43      	adds	r3, r0, #1
 8002058:	bfbc      	itt	lt
 800205a:	238b      	movlt	r3, #139	; 0x8b
 800205c:	602b      	strlt	r3, [r5, #0]
 800205e:	2c00      	cmp	r4, #0
 8002060:	d0dd      	beq.n	800201e <sniprintf+0x16>
 8002062:	2200      	movs	r2, #0
 8002064:	9b02      	ldr	r3, [sp, #8]
 8002066:	701a      	strb	r2, [r3, #0]
 8002068:	e7d9      	b.n	800201e <sniprintf+0x16>
 800206a:	bf00      	nop
 800206c:	2000000c 	.word	0x2000000c

08002070 <strchr>:
 8002070:	b2c9      	uxtb	r1, r1
 8002072:	4603      	mov	r3, r0
 8002074:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002078:	b11a      	cbz	r2, 8002082 <strchr+0x12>
 800207a:	4291      	cmp	r1, r2
 800207c:	d1f9      	bne.n	8002072 <strchr+0x2>
 800207e:	4618      	mov	r0, r3
 8002080:	4770      	bx	lr
 8002082:	2900      	cmp	r1, #0
 8002084:	bf0c      	ite	eq
 8002086:	4618      	moveq	r0, r3
 8002088:	2000      	movne	r0, #0
 800208a:	4770      	bx	lr

0800208c <strstr>:
 800208c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800208e:	7803      	ldrb	r3, [r0, #0]
 8002090:	b133      	cbz	r3, 80020a0 <strstr+0x14>
 8002092:	4603      	mov	r3, r0
 8002094:	4618      	mov	r0, r3
 8002096:	1c5e      	adds	r6, r3, #1
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	b933      	cbnz	r3, 80020aa <strstr+0x1e>
 800209c:	4618      	mov	r0, r3
 800209e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020a0:	780b      	ldrb	r3, [r1, #0]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	bf18      	it	ne
 80020a6:	2000      	movne	r0, #0
 80020a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020aa:	1e4d      	subs	r5, r1, #1
 80020ac:	1e44      	subs	r4, r0, #1
 80020ae:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80020b2:	2a00      	cmp	r2, #0
 80020b4:	d0f3      	beq.n	800209e <strstr+0x12>
 80020b6:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 80020ba:	4633      	mov	r3, r6
 80020bc:	4297      	cmp	r7, r2
 80020be:	d0f6      	beq.n	80020ae <strstr+0x22>
 80020c0:	e7e8      	b.n	8002094 <strstr+0x8>

080020c2 <__ssputs_r>:
 80020c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80020c6:	688e      	ldr	r6, [r1, #8]
 80020c8:	4682      	mov	sl, r0
 80020ca:	429e      	cmp	r6, r3
 80020cc:	460c      	mov	r4, r1
 80020ce:	4691      	mov	r9, r2
 80020d0:	4698      	mov	r8, r3
 80020d2:	d835      	bhi.n	8002140 <__ssputs_r+0x7e>
 80020d4:	898a      	ldrh	r2, [r1, #12]
 80020d6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80020da:	d031      	beq.n	8002140 <__ssputs_r+0x7e>
 80020dc:	2302      	movs	r3, #2
 80020de:	6825      	ldr	r5, [r4, #0]
 80020e0:	6909      	ldr	r1, [r1, #16]
 80020e2:	1a6f      	subs	r7, r5, r1
 80020e4:	6965      	ldr	r5, [r4, #20]
 80020e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80020ea:	fb95 f5f3 	sdiv	r5, r5, r3
 80020ee:	f108 0301 	add.w	r3, r8, #1
 80020f2:	443b      	add	r3, r7
 80020f4:	429d      	cmp	r5, r3
 80020f6:	bf38      	it	cc
 80020f8:	461d      	movcc	r5, r3
 80020fa:	0553      	lsls	r3, r2, #21
 80020fc:	d531      	bpl.n	8002162 <__ssputs_r+0xa0>
 80020fe:	4629      	mov	r1, r5
 8002100:	f000 fb46 	bl	8002790 <_malloc_r>
 8002104:	4606      	mov	r6, r0
 8002106:	b950      	cbnz	r0, 800211e <__ssputs_r+0x5c>
 8002108:	230c      	movs	r3, #12
 800210a:	f8ca 3000 	str.w	r3, [sl]
 800210e:	89a3      	ldrh	r3, [r4, #12]
 8002110:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002114:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002118:	81a3      	strh	r3, [r4, #12]
 800211a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800211e:	463a      	mov	r2, r7
 8002120:	6921      	ldr	r1, [r4, #16]
 8002122:	f000 fac3 	bl	80026ac <memcpy>
 8002126:	89a3      	ldrh	r3, [r4, #12]
 8002128:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800212c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002130:	81a3      	strh	r3, [r4, #12]
 8002132:	6126      	str	r6, [r4, #16]
 8002134:	443e      	add	r6, r7
 8002136:	6026      	str	r6, [r4, #0]
 8002138:	4646      	mov	r6, r8
 800213a:	6165      	str	r5, [r4, #20]
 800213c:	1bed      	subs	r5, r5, r7
 800213e:	60a5      	str	r5, [r4, #8]
 8002140:	4546      	cmp	r6, r8
 8002142:	bf28      	it	cs
 8002144:	4646      	movcs	r6, r8
 8002146:	4649      	mov	r1, r9
 8002148:	4632      	mov	r2, r6
 800214a:	6820      	ldr	r0, [r4, #0]
 800214c:	f000 fab9 	bl	80026c2 <memmove>
 8002150:	68a3      	ldr	r3, [r4, #8]
 8002152:	2000      	movs	r0, #0
 8002154:	1b9b      	subs	r3, r3, r6
 8002156:	60a3      	str	r3, [r4, #8]
 8002158:	6823      	ldr	r3, [r4, #0]
 800215a:	441e      	add	r6, r3
 800215c:	6026      	str	r6, [r4, #0]
 800215e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002162:	462a      	mov	r2, r5
 8002164:	f000 fb72 	bl	800284c <_realloc_r>
 8002168:	4606      	mov	r6, r0
 800216a:	2800      	cmp	r0, #0
 800216c:	d1e1      	bne.n	8002132 <__ssputs_r+0x70>
 800216e:	6921      	ldr	r1, [r4, #16]
 8002170:	4650      	mov	r0, sl
 8002172:	f000 fac1 	bl	80026f8 <_free_r>
 8002176:	e7c7      	b.n	8002108 <__ssputs_r+0x46>

08002178 <_svfiprintf_r>:
 8002178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800217c:	b09d      	sub	sp, #116	; 0x74
 800217e:	9303      	str	r3, [sp, #12]
 8002180:	898b      	ldrh	r3, [r1, #12]
 8002182:	4680      	mov	r8, r0
 8002184:	061c      	lsls	r4, r3, #24
 8002186:	460d      	mov	r5, r1
 8002188:	4616      	mov	r6, r2
 800218a:	d50f      	bpl.n	80021ac <_svfiprintf_r+0x34>
 800218c:	690b      	ldr	r3, [r1, #16]
 800218e:	b96b      	cbnz	r3, 80021ac <_svfiprintf_r+0x34>
 8002190:	2140      	movs	r1, #64	; 0x40
 8002192:	f000 fafd 	bl	8002790 <_malloc_r>
 8002196:	6028      	str	r0, [r5, #0]
 8002198:	6128      	str	r0, [r5, #16]
 800219a:	b928      	cbnz	r0, 80021a8 <_svfiprintf_r+0x30>
 800219c:	230c      	movs	r3, #12
 800219e:	f8c8 3000 	str.w	r3, [r8]
 80021a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021a6:	e0c4      	b.n	8002332 <_svfiprintf_r+0x1ba>
 80021a8:	2340      	movs	r3, #64	; 0x40
 80021aa:	616b      	str	r3, [r5, #20]
 80021ac:	2300      	movs	r3, #0
 80021ae:	9309      	str	r3, [sp, #36]	; 0x24
 80021b0:	2320      	movs	r3, #32
 80021b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80021b6:	2330      	movs	r3, #48	; 0x30
 80021b8:	f04f 0b01 	mov.w	fp, #1
 80021bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80021c0:	4637      	mov	r7, r6
 80021c2:	463c      	mov	r4, r7
 80021c4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d13c      	bne.n	8002246 <_svfiprintf_r+0xce>
 80021cc:	ebb7 0a06 	subs.w	sl, r7, r6
 80021d0:	d00b      	beq.n	80021ea <_svfiprintf_r+0x72>
 80021d2:	4653      	mov	r3, sl
 80021d4:	4632      	mov	r2, r6
 80021d6:	4629      	mov	r1, r5
 80021d8:	4640      	mov	r0, r8
 80021da:	f7ff ff72 	bl	80020c2 <__ssputs_r>
 80021de:	3001      	adds	r0, #1
 80021e0:	f000 80a2 	beq.w	8002328 <_svfiprintf_r+0x1b0>
 80021e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80021e6:	4453      	add	r3, sl
 80021e8:	9309      	str	r3, [sp, #36]	; 0x24
 80021ea:	783b      	ldrb	r3, [r7, #0]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	f000 809b 	beq.w	8002328 <_svfiprintf_r+0x1b0>
 80021f2:	2300      	movs	r3, #0
 80021f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80021f8:	9304      	str	r3, [sp, #16]
 80021fa:	9307      	str	r3, [sp, #28]
 80021fc:	9205      	str	r2, [sp, #20]
 80021fe:	9306      	str	r3, [sp, #24]
 8002200:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002204:	931a      	str	r3, [sp, #104]	; 0x68
 8002206:	2205      	movs	r2, #5
 8002208:	7821      	ldrb	r1, [r4, #0]
 800220a:	4850      	ldr	r0, [pc, #320]	; (800234c <_svfiprintf_r+0x1d4>)
 800220c:	f000 fa40 	bl	8002690 <memchr>
 8002210:	1c67      	adds	r7, r4, #1
 8002212:	9b04      	ldr	r3, [sp, #16]
 8002214:	b9d8      	cbnz	r0, 800224e <_svfiprintf_r+0xd6>
 8002216:	06d9      	lsls	r1, r3, #27
 8002218:	bf44      	itt	mi
 800221a:	2220      	movmi	r2, #32
 800221c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002220:	071a      	lsls	r2, r3, #28
 8002222:	bf44      	itt	mi
 8002224:	222b      	movmi	r2, #43	; 0x2b
 8002226:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800222a:	7822      	ldrb	r2, [r4, #0]
 800222c:	2a2a      	cmp	r2, #42	; 0x2a
 800222e:	d016      	beq.n	800225e <_svfiprintf_r+0xe6>
 8002230:	2100      	movs	r1, #0
 8002232:	200a      	movs	r0, #10
 8002234:	9a07      	ldr	r2, [sp, #28]
 8002236:	4627      	mov	r7, r4
 8002238:	783b      	ldrb	r3, [r7, #0]
 800223a:	3401      	adds	r4, #1
 800223c:	3b30      	subs	r3, #48	; 0x30
 800223e:	2b09      	cmp	r3, #9
 8002240:	d950      	bls.n	80022e4 <_svfiprintf_r+0x16c>
 8002242:	b1c9      	cbz	r1, 8002278 <_svfiprintf_r+0x100>
 8002244:	e011      	b.n	800226a <_svfiprintf_r+0xf2>
 8002246:	2b25      	cmp	r3, #37	; 0x25
 8002248:	d0c0      	beq.n	80021cc <_svfiprintf_r+0x54>
 800224a:	4627      	mov	r7, r4
 800224c:	e7b9      	b.n	80021c2 <_svfiprintf_r+0x4a>
 800224e:	4a3f      	ldr	r2, [pc, #252]	; (800234c <_svfiprintf_r+0x1d4>)
 8002250:	463c      	mov	r4, r7
 8002252:	1a80      	subs	r0, r0, r2
 8002254:	fa0b f000 	lsl.w	r0, fp, r0
 8002258:	4318      	orrs	r0, r3
 800225a:	9004      	str	r0, [sp, #16]
 800225c:	e7d3      	b.n	8002206 <_svfiprintf_r+0x8e>
 800225e:	9a03      	ldr	r2, [sp, #12]
 8002260:	1d11      	adds	r1, r2, #4
 8002262:	6812      	ldr	r2, [r2, #0]
 8002264:	9103      	str	r1, [sp, #12]
 8002266:	2a00      	cmp	r2, #0
 8002268:	db01      	blt.n	800226e <_svfiprintf_r+0xf6>
 800226a:	9207      	str	r2, [sp, #28]
 800226c:	e004      	b.n	8002278 <_svfiprintf_r+0x100>
 800226e:	4252      	negs	r2, r2
 8002270:	f043 0302 	orr.w	r3, r3, #2
 8002274:	9207      	str	r2, [sp, #28]
 8002276:	9304      	str	r3, [sp, #16]
 8002278:	783b      	ldrb	r3, [r7, #0]
 800227a:	2b2e      	cmp	r3, #46	; 0x2e
 800227c:	d10d      	bne.n	800229a <_svfiprintf_r+0x122>
 800227e:	787b      	ldrb	r3, [r7, #1]
 8002280:	1c79      	adds	r1, r7, #1
 8002282:	2b2a      	cmp	r3, #42	; 0x2a
 8002284:	d132      	bne.n	80022ec <_svfiprintf_r+0x174>
 8002286:	9b03      	ldr	r3, [sp, #12]
 8002288:	3702      	adds	r7, #2
 800228a:	1d1a      	adds	r2, r3, #4
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	9203      	str	r2, [sp, #12]
 8002290:	2b00      	cmp	r3, #0
 8002292:	bfb8      	it	lt
 8002294:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002298:	9305      	str	r3, [sp, #20]
 800229a:	4c2d      	ldr	r4, [pc, #180]	; (8002350 <_svfiprintf_r+0x1d8>)
 800229c:	2203      	movs	r2, #3
 800229e:	7839      	ldrb	r1, [r7, #0]
 80022a0:	4620      	mov	r0, r4
 80022a2:	f000 f9f5 	bl	8002690 <memchr>
 80022a6:	b138      	cbz	r0, 80022b8 <_svfiprintf_r+0x140>
 80022a8:	2340      	movs	r3, #64	; 0x40
 80022aa:	1b00      	subs	r0, r0, r4
 80022ac:	fa03 f000 	lsl.w	r0, r3, r0
 80022b0:	9b04      	ldr	r3, [sp, #16]
 80022b2:	3701      	adds	r7, #1
 80022b4:	4303      	orrs	r3, r0
 80022b6:	9304      	str	r3, [sp, #16]
 80022b8:	7839      	ldrb	r1, [r7, #0]
 80022ba:	2206      	movs	r2, #6
 80022bc:	4825      	ldr	r0, [pc, #148]	; (8002354 <_svfiprintf_r+0x1dc>)
 80022be:	1c7e      	adds	r6, r7, #1
 80022c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80022c4:	f000 f9e4 	bl	8002690 <memchr>
 80022c8:	2800      	cmp	r0, #0
 80022ca:	d035      	beq.n	8002338 <_svfiprintf_r+0x1c0>
 80022cc:	4b22      	ldr	r3, [pc, #136]	; (8002358 <_svfiprintf_r+0x1e0>)
 80022ce:	b9fb      	cbnz	r3, 8002310 <_svfiprintf_r+0x198>
 80022d0:	9b03      	ldr	r3, [sp, #12]
 80022d2:	3307      	adds	r3, #7
 80022d4:	f023 0307 	bic.w	r3, r3, #7
 80022d8:	3308      	adds	r3, #8
 80022da:	9303      	str	r3, [sp, #12]
 80022dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80022de:	444b      	add	r3, r9
 80022e0:	9309      	str	r3, [sp, #36]	; 0x24
 80022e2:	e76d      	b.n	80021c0 <_svfiprintf_r+0x48>
 80022e4:	fb00 3202 	mla	r2, r0, r2, r3
 80022e8:	2101      	movs	r1, #1
 80022ea:	e7a4      	b.n	8002236 <_svfiprintf_r+0xbe>
 80022ec:	2300      	movs	r3, #0
 80022ee:	240a      	movs	r4, #10
 80022f0:	4618      	mov	r0, r3
 80022f2:	9305      	str	r3, [sp, #20]
 80022f4:	460f      	mov	r7, r1
 80022f6:	783a      	ldrb	r2, [r7, #0]
 80022f8:	3101      	adds	r1, #1
 80022fa:	3a30      	subs	r2, #48	; 0x30
 80022fc:	2a09      	cmp	r2, #9
 80022fe:	d903      	bls.n	8002308 <_svfiprintf_r+0x190>
 8002300:	2b00      	cmp	r3, #0
 8002302:	d0ca      	beq.n	800229a <_svfiprintf_r+0x122>
 8002304:	9005      	str	r0, [sp, #20]
 8002306:	e7c8      	b.n	800229a <_svfiprintf_r+0x122>
 8002308:	fb04 2000 	mla	r0, r4, r0, r2
 800230c:	2301      	movs	r3, #1
 800230e:	e7f1      	b.n	80022f4 <_svfiprintf_r+0x17c>
 8002310:	ab03      	add	r3, sp, #12
 8002312:	9300      	str	r3, [sp, #0]
 8002314:	462a      	mov	r2, r5
 8002316:	4b11      	ldr	r3, [pc, #68]	; (800235c <_svfiprintf_r+0x1e4>)
 8002318:	a904      	add	r1, sp, #16
 800231a:	4640      	mov	r0, r8
 800231c:	f3af 8000 	nop.w
 8002320:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8002324:	4681      	mov	r9, r0
 8002326:	d1d9      	bne.n	80022dc <_svfiprintf_r+0x164>
 8002328:	89ab      	ldrh	r3, [r5, #12]
 800232a:	065b      	lsls	r3, r3, #25
 800232c:	f53f af39 	bmi.w	80021a2 <_svfiprintf_r+0x2a>
 8002330:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002332:	b01d      	add	sp, #116	; 0x74
 8002334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002338:	ab03      	add	r3, sp, #12
 800233a:	9300      	str	r3, [sp, #0]
 800233c:	462a      	mov	r2, r5
 800233e:	4b07      	ldr	r3, [pc, #28]	; (800235c <_svfiprintf_r+0x1e4>)
 8002340:	a904      	add	r1, sp, #16
 8002342:	4640      	mov	r0, r8
 8002344:	f000 f884 	bl	8002450 <_printf_i>
 8002348:	e7ea      	b.n	8002320 <_svfiprintf_r+0x1a8>
 800234a:	bf00      	nop
 800234c:	08002c8a 	.word	0x08002c8a
 8002350:	08002c90 	.word	0x08002c90
 8002354:	08002c94 	.word	0x08002c94
 8002358:	00000000 	.word	0x00000000
 800235c:	080020c3 	.word	0x080020c3

08002360 <_printf_common>:
 8002360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002364:	4691      	mov	r9, r2
 8002366:	461f      	mov	r7, r3
 8002368:	688a      	ldr	r2, [r1, #8]
 800236a:	690b      	ldr	r3, [r1, #16]
 800236c:	4606      	mov	r6, r0
 800236e:	4293      	cmp	r3, r2
 8002370:	bfb8      	it	lt
 8002372:	4613      	movlt	r3, r2
 8002374:	f8c9 3000 	str.w	r3, [r9]
 8002378:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800237c:	460c      	mov	r4, r1
 800237e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002382:	b112      	cbz	r2, 800238a <_printf_common+0x2a>
 8002384:	3301      	adds	r3, #1
 8002386:	f8c9 3000 	str.w	r3, [r9]
 800238a:	6823      	ldr	r3, [r4, #0]
 800238c:	0699      	lsls	r1, r3, #26
 800238e:	bf42      	ittt	mi
 8002390:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002394:	3302      	addmi	r3, #2
 8002396:	f8c9 3000 	strmi.w	r3, [r9]
 800239a:	6825      	ldr	r5, [r4, #0]
 800239c:	f015 0506 	ands.w	r5, r5, #6
 80023a0:	d107      	bne.n	80023b2 <_printf_common+0x52>
 80023a2:	f104 0a19 	add.w	sl, r4, #25
 80023a6:	68e3      	ldr	r3, [r4, #12]
 80023a8:	f8d9 2000 	ldr.w	r2, [r9]
 80023ac:	1a9b      	subs	r3, r3, r2
 80023ae:	429d      	cmp	r5, r3
 80023b0:	db2a      	blt.n	8002408 <_printf_common+0xa8>
 80023b2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80023b6:	6822      	ldr	r2, [r4, #0]
 80023b8:	3300      	adds	r3, #0
 80023ba:	bf18      	it	ne
 80023bc:	2301      	movne	r3, #1
 80023be:	0692      	lsls	r2, r2, #26
 80023c0:	d42f      	bmi.n	8002422 <_printf_common+0xc2>
 80023c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80023c6:	4639      	mov	r1, r7
 80023c8:	4630      	mov	r0, r6
 80023ca:	47c0      	blx	r8
 80023cc:	3001      	adds	r0, #1
 80023ce:	d022      	beq.n	8002416 <_printf_common+0xb6>
 80023d0:	6823      	ldr	r3, [r4, #0]
 80023d2:	68e5      	ldr	r5, [r4, #12]
 80023d4:	f003 0306 	and.w	r3, r3, #6
 80023d8:	2b04      	cmp	r3, #4
 80023da:	bf18      	it	ne
 80023dc:	2500      	movne	r5, #0
 80023de:	f8d9 2000 	ldr.w	r2, [r9]
 80023e2:	f04f 0900 	mov.w	r9, #0
 80023e6:	bf08      	it	eq
 80023e8:	1aad      	subeq	r5, r5, r2
 80023ea:	68a3      	ldr	r3, [r4, #8]
 80023ec:	6922      	ldr	r2, [r4, #16]
 80023ee:	bf08      	it	eq
 80023f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80023f4:	4293      	cmp	r3, r2
 80023f6:	bfc4      	itt	gt
 80023f8:	1a9b      	subgt	r3, r3, r2
 80023fa:	18ed      	addgt	r5, r5, r3
 80023fc:	341a      	adds	r4, #26
 80023fe:	454d      	cmp	r5, r9
 8002400:	d11b      	bne.n	800243a <_printf_common+0xda>
 8002402:	2000      	movs	r0, #0
 8002404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002408:	2301      	movs	r3, #1
 800240a:	4652      	mov	r2, sl
 800240c:	4639      	mov	r1, r7
 800240e:	4630      	mov	r0, r6
 8002410:	47c0      	blx	r8
 8002412:	3001      	adds	r0, #1
 8002414:	d103      	bne.n	800241e <_printf_common+0xbe>
 8002416:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800241a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800241e:	3501      	adds	r5, #1
 8002420:	e7c1      	b.n	80023a6 <_printf_common+0x46>
 8002422:	2030      	movs	r0, #48	; 0x30
 8002424:	18e1      	adds	r1, r4, r3
 8002426:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800242a:	1c5a      	adds	r2, r3, #1
 800242c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002430:	4422      	add	r2, r4
 8002432:	3302      	adds	r3, #2
 8002434:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002438:	e7c3      	b.n	80023c2 <_printf_common+0x62>
 800243a:	2301      	movs	r3, #1
 800243c:	4622      	mov	r2, r4
 800243e:	4639      	mov	r1, r7
 8002440:	4630      	mov	r0, r6
 8002442:	47c0      	blx	r8
 8002444:	3001      	adds	r0, #1
 8002446:	d0e6      	beq.n	8002416 <_printf_common+0xb6>
 8002448:	f109 0901 	add.w	r9, r9, #1
 800244c:	e7d7      	b.n	80023fe <_printf_common+0x9e>
	...

08002450 <_printf_i>:
 8002450:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002454:	4617      	mov	r7, r2
 8002456:	7e0a      	ldrb	r2, [r1, #24]
 8002458:	b085      	sub	sp, #20
 800245a:	2a6e      	cmp	r2, #110	; 0x6e
 800245c:	4698      	mov	r8, r3
 800245e:	4606      	mov	r6, r0
 8002460:	460c      	mov	r4, r1
 8002462:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002464:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8002468:	f000 80bc 	beq.w	80025e4 <_printf_i+0x194>
 800246c:	d81a      	bhi.n	80024a4 <_printf_i+0x54>
 800246e:	2a63      	cmp	r2, #99	; 0x63
 8002470:	d02e      	beq.n	80024d0 <_printf_i+0x80>
 8002472:	d80a      	bhi.n	800248a <_printf_i+0x3a>
 8002474:	2a00      	cmp	r2, #0
 8002476:	f000 80c8 	beq.w	800260a <_printf_i+0x1ba>
 800247a:	2a58      	cmp	r2, #88	; 0x58
 800247c:	f000 808a 	beq.w	8002594 <_printf_i+0x144>
 8002480:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002484:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8002488:	e02a      	b.n	80024e0 <_printf_i+0x90>
 800248a:	2a64      	cmp	r2, #100	; 0x64
 800248c:	d001      	beq.n	8002492 <_printf_i+0x42>
 800248e:	2a69      	cmp	r2, #105	; 0x69
 8002490:	d1f6      	bne.n	8002480 <_printf_i+0x30>
 8002492:	6821      	ldr	r1, [r4, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	f011 0f80 	tst.w	r1, #128	; 0x80
 800249a:	d023      	beq.n	80024e4 <_printf_i+0x94>
 800249c:	1d11      	adds	r1, r2, #4
 800249e:	6019      	str	r1, [r3, #0]
 80024a0:	6813      	ldr	r3, [r2, #0]
 80024a2:	e027      	b.n	80024f4 <_printf_i+0xa4>
 80024a4:	2a73      	cmp	r2, #115	; 0x73
 80024a6:	f000 80b4 	beq.w	8002612 <_printf_i+0x1c2>
 80024aa:	d808      	bhi.n	80024be <_printf_i+0x6e>
 80024ac:	2a6f      	cmp	r2, #111	; 0x6f
 80024ae:	d02a      	beq.n	8002506 <_printf_i+0xb6>
 80024b0:	2a70      	cmp	r2, #112	; 0x70
 80024b2:	d1e5      	bne.n	8002480 <_printf_i+0x30>
 80024b4:	680a      	ldr	r2, [r1, #0]
 80024b6:	f042 0220 	orr.w	r2, r2, #32
 80024ba:	600a      	str	r2, [r1, #0]
 80024bc:	e003      	b.n	80024c6 <_printf_i+0x76>
 80024be:	2a75      	cmp	r2, #117	; 0x75
 80024c0:	d021      	beq.n	8002506 <_printf_i+0xb6>
 80024c2:	2a78      	cmp	r2, #120	; 0x78
 80024c4:	d1dc      	bne.n	8002480 <_printf_i+0x30>
 80024c6:	2278      	movs	r2, #120	; 0x78
 80024c8:	496f      	ldr	r1, [pc, #444]	; (8002688 <_printf_i+0x238>)
 80024ca:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80024ce:	e064      	b.n	800259a <_printf_i+0x14a>
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80024d6:	1d11      	adds	r1, r2, #4
 80024d8:	6019      	str	r1, [r3, #0]
 80024da:	6813      	ldr	r3, [r2, #0]
 80024dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80024e0:	2301      	movs	r3, #1
 80024e2:	e0a3      	b.n	800262c <_printf_i+0x1dc>
 80024e4:	f011 0f40 	tst.w	r1, #64	; 0x40
 80024e8:	f102 0104 	add.w	r1, r2, #4
 80024ec:	6019      	str	r1, [r3, #0]
 80024ee:	d0d7      	beq.n	80024a0 <_printf_i+0x50>
 80024f0:	f9b2 3000 	ldrsh.w	r3, [r2]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	da03      	bge.n	8002500 <_printf_i+0xb0>
 80024f8:	222d      	movs	r2, #45	; 0x2d
 80024fa:	425b      	negs	r3, r3
 80024fc:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002500:	4962      	ldr	r1, [pc, #392]	; (800268c <_printf_i+0x23c>)
 8002502:	220a      	movs	r2, #10
 8002504:	e017      	b.n	8002536 <_printf_i+0xe6>
 8002506:	6820      	ldr	r0, [r4, #0]
 8002508:	6819      	ldr	r1, [r3, #0]
 800250a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800250e:	d003      	beq.n	8002518 <_printf_i+0xc8>
 8002510:	1d08      	adds	r0, r1, #4
 8002512:	6018      	str	r0, [r3, #0]
 8002514:	680b      	ldr	r3, [r1, #0]
 8002516:	e006      	b.n	8002526 <_printf_i+0xd6>
 8002518:	f010 0f40 	tst.w	r0, #64	; 0x40
 800251c:	f101 0004 	add.w	r0, r1, #4
 8002520:	6018      	str	r0, [r3, #0]
 8002522:	d0f7      	beq.n	8002514 <_printf_i+0xc4>
 8002524:	880b      	ldrh	r3, [r1, #0]
 8002526:	2a6f      	cmp	r2, #111	; 0x6f
 8002528:	bf14      	ite	ne
 800252a:	220a      	movne	r2, #10
 800252c:	2208      	moveq	r2, #8
 800252e:	4957      	ldr	r1, [pc, #348]	; (800268c <_printf_i+0x23c>)
 8002530:	2000      	movs	r0, #0
 8002532:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8002536:	6865      	ldr	r5, [r4, #4]
 8002538:	2d00      	cmp	r5, #0
 800253a:	60a5      	str	r5, [r4, #8]
 800253c:	f2c0 809c 	blt.w	8002678 <_printf_i+0x228>
 8002540:	6820      	ldr	r0, [r4, #0]
 8002542:	f020 0004 	bic.w	r0, r0, #4
 8002546:	6020      	str	r0, [r4, #0]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d13f      	bne.n	80025cc <_printf_i+0x17c>
 800254c:	2d00      	cmp	r5, #0
 800254e:	f040 8095 	bne.w	800267c <_printf_i+0x22c>
 8002552:	4675      	mov	r5, lr
 8002554:	2a08      	cmp	r2, #8
 8002556:	d10b      	bne.n	8002570 <_printf_i+0x120>
 8002558:	6823      	ldr	r3, [r4, #0]
 800255a:	07da      	lsls	r2, r3, #31
 800255c:	d508      	bpl.n	8002570 <_printf_i+0x120>
 800255e:	6923      	ldr	r3, [r4, #16]
 8002560:	6862      	ldr	r2, [r4, #4]
 8002562:	429a      	cmp	r2, r3
 8002564:	bfde      	ittt	le
 8002566:	2330      	movle	r3, #48	; 0x30
 8002568:	f805 3c01 	strble.w	r3, [r5, #-1]
 800256c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002570:	ebae 0305 	sub.w	r3, lr, r5
 8002574:	6123      	str	r3, [r4, #16]
 8002576:	f8cd 8000 	str.w	r8, [sp]
 800257a:	463b      	mov	r3, r7
 800257c:	aa03      	add	r2, sp, #12
 800257e:	4621      	mov	r1, r4
 8002580:	4630      	mov	r0, r6
 8002582:	f7ff feed 	bl	8002360 <_printf_common>
 8002586:	3001      	adds	r0, #1
 8002588:	d155      	bne.n	8002636 <_printf_i+0x1e6>
 800258a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800258e:	b005      	add	sp, #20
 8002590:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002594:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8002598:	493c      	ldr	r1, [pc, #240]	; (800268c <_printf_i+0x23c>)
 800259a:	6822      	ldr	r2, [r4, #0]
 800259c:	6818      	ldr	r0, [r3, #0]
 800259e:	f012 0f80 	tst.w	r2, #128	; 0x80
 80025a2:	f100 0504 	add.w	r5, r0, #4
 80025a6:	601d      	str	r5, [r3, #0]
 80025a8:	d001      	beq.n	80025ae <_printf_i+0x15e>
 80025aa:	6803      	ldr	r3, [r0, #0]
 80025ac:	e002      	b.n	80025b4 <_printf_i+0x164>
 80025ae:	0655      	lsls	r5, r2, #25
 80025b0:	d5fb      	bpl.n	80025aa <_printf_i+0x15a>
 80025b2:	8803      	ldrh	r3, [r0, #0]
 80025b4:	07d0      	lsls	r0, r2, #31
 80025b6:	bf44      	itt	mi
 80025b8:	f042 0220 	orrmi.w	r2, r2, #32
 80025bc:	6022      	strmi	r2, [r4, #0]
 80025be:	b91b      	cbnz	r3, 80025c8 <_printf_i+0x178>
 80025c0:	6822      	ldr	r2, [r4, #0]
 80025c2:	f022 0220 	bic.w	r2, r2, #32
 80025c6:	6022      	str	r2, [r4, #0]
 80025c8:	2210      	movs	r2, #16
 80025ca:	e7b1      	b.n	8002530 <_printf_i+0xe0>
 80025cc:	4675      	mov	r5, lr
 80025ce:	fbb3 f0f2 	udiv	r0, r3, r2
 80025d2:	fb02 3310 	mls	r3, r2, r0, r3
 80025d6:	5ccb      	ldrb	r3, [r1, r3]
 80025d8:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80025dc:	4603      	mov	r3, r0
 80025de:	2800      	cmp	r0, #0
 80025e0:	d1f5      	bne.n	80025ce <_printf_i+0x17e>
 80025e2:	e7b7      	b.n	8002554 <_printf_i+0x104>
 80025e4:	6808      	ldr	r0, [r1, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	f010 0f80 	tst.w	r0, #128	; 0x80
 80025ec:	6949      	ldr	r1, [r1, #20]
 80025ee:	d004      	beq.n	80025fa <_printf_i+0x1aa>
 80025f0:	1d10      	adds	r0, r2, #4
 80025f2:	6018      	str	r0, [r3, #0]
 80025f4:	6813      	ldr	r3, [r2, #0]
 80025f6:	6019      	str	r1, [r3, #0]
 80025f8:	e007      	b.n	800260a <_printf_i+0x1ba>
 80025fa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80025fe:	f102 0004 	add.w	r0, r2, #4
 8002602:	6018      	str	r0, [r3, #0]
 8002604:	6813      	ldr	r3, [r2, #0]
 8002606:	d0f6      	beq.n	80025f6 <_printf_i+0x1a6>
 8002608:	8019      	strh	r1, [r3, #0]
 800260a:	2300      	movs	r3, #0
 800260c:	4675      	mov	r5, lr
 800260e:	6123      	str	r3, [r4, #16]
 8002610:	e7b1      	b.n	8002576 <_printf_i+0x126>
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	1d11      	adds	r1, r2, #4
 8002616:	6019      	str	r1, [r3, #0]
 8002618:	6815      	ldr	r5, [r2, #0]
 800261a:	2100      	movs	r1, #0
 800261c:	6862      	ldr	r2, [r4, #4]
 800261e:	4628      	mov	r0, r5
 8002620:	f000 f836 	bl	8002690 <memchr>
 8002624:	b108      	cbz	r0, 800262a <_printf_i+0x1da>
 8002626:	1b40      	subs	r0, r0, r5
 8002628:	6060      	str	r0, [r4, #4]
 800262a:	6863      	ldr	r3, [r4, #4]
 800262c:	6123      	str	r3, [r4, #16]
 800262e:	2300      	movs	r3, #0
 8002630:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002634:	e79f      	b.n	8002576 <_printf_i+0x126>
 8002636:	6923      	ldr	r3, [r4, #16]
 8002638:	462a      	mov	r2, r5
 800263a:	4639      	mov	r1, r7
 800263c:	4630      	mov	r0, r6
 800263e:	47c0      	blx	r8
 8002640:	3001      	adds	r0, #1
 8002642:	d0a2      	beq.n	800258a <_printf_i+0x13a>
 8002644:	6823      	ldr	r3, [r4, #0]
 8002646:	079b      	lsls	r3, r3, #30
 8002648:	d507      	bpl.n	800265a <_printf_i+0x20a>
 800264a:	2500      	movs	r5, #0
 800264c:	f104 0919 	add.w	r9, r4, #25
 8002650:	68e3      	ldr	r3, [r4, #12]
 8002652:	9a03      	ldr	r2, [sp, #12]
 8002654:	1a9b      	subs	r3, r3, r2
 8002656:	429d      	cmp	r5, r3
 8002658:	db05      	blt.n	8002666 <_printf_i+0x216>
 800265a:	68e0      	ldr	r0, [r4, #12]
 800265c:	9b03      	ldr	r3, [sp, #12]
 800265e:	4298      	cmp	r0, r3
 8002660:	bfb8      	it	lt
 8002662:	4618      	movlt	r0, r3
 8002664:	e793      	b.n	800258e <_printf_i+0x13e>
 8002666:	2301      	movs	r3, #1
 8002668:	464a      	mov	r2, r9
 800266a:	4639      	mov	r1, r7
 800266c:	4630      	mov	r0, r6
 800266e:	47c0      	blx	r8
 8002670:	3001      	adds	r0, #1
 8002672:	d08a      	beq.n	800258a <_printf_i+0x13a>
 8002674:	3501      	adds	r5, #1
 8002676:	e7eb      	b.n	8002650 <_printf_i+0x200>
 8002678:	2b00      	cmp	r3, #0
 800267a:	d1a7      	bne.n	80025cc <_printf_i+0x17c>
 800267c:	780b      	ldrb	r3, [r1, #0]
 800267e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002682:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002686:	e765      	b.n	8002554 <_printf_i+0x104>
 8002688:	08002cac 	.word	0x08002cac
 800268c:	08002c9b 	.word	0x08002c9b

08002690 <memchr>:
 8002690:	b510      	push	{r4, lr}
 8002692:	b2c9      	uxtb	r1, r1
 8002694:	4402      	add	r2, r0
 8002696:	4290      	cmp	r0, r2
 8002698:	4603      	mov	r3, r0
 800269a:	d101      	bne.n	80026a0 <memchr+0x10>
 800269c:	2000      	movs	r0, #0
 800269e:	bd10      	pop	{r4, pc}
 80026a0:	781c      	ldrb	r4, [r3, #0]
 80026a2:	3001      	adds	r0, #1
 80026a4:	428c      	cmp	r4, r1
 80026a6:	d1f6      	bne.n	8002696 <memchr+0x6>
 80026a8:	4618      	mov	r0, r3
 80026aa:	bd10      	pop	{r4, pc}

080026ac <memcpy>:
 80026ac:	b510      	push	{r4, lr}
 80026ae:	1e43      	subs	r3, r0, #1
 80026b0:	440a      	add	r2, r1
 80026b2:	4291      	cmp	r1, r2
 80026b4:	d100      	bne.n	80026b8 <memcpy+0xc>
 80026b6:	bd10      	pop	{r4, pc}
 80026b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80026bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80026c0:	e7f7      	b.n	80026b2 <memcpy+0x6>

080026c2 <memmove>:
 80026c2:	4288      	cmp	r0, r1
 80026c4:	b510      	push	{r4, lr}
 80026c6:	eb01 0302 	add.w	r3, r1, r2
 80026ca:	d803      	bhi.n	80026d4 <memmove+0x12>
 80026cc:	1e42      	subs	r2, r0, #1
 80026ce:	4299      	cmp	r1, r3
 80026d0:	d10c      	bne.n	80026ec <memmove+0x2a>
 80026d2:	bd10      	pop	{r4, pc}
 80026d4:	4298      	cmp	r0, r3
 80026d6:	d2f9      	bcs.n	80026cc <memmove+0xa>
 80026d8:	1881      	adds	r1, r0, r2
 80026da:	1ad2      	subs	r2, r2, r3
 80026dc:	42d3      	cmn	r3, r2
 80026de:	d100      	bne.n	80026e2 <memmove+0x20>
 80026e0:	bd10      	pop	{r4, pc}
 80026e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80026e6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80026ea:	e7f7      	b.n	80026dc <memmove+0x1a>
 80026ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80026f0:	f802 4f01 	strb.w	r4, [r2, #1]!
 80026f4:	e7eb      	b.n	80026ce <memmove+0xc>
	...

080026f8 <_free_r>:
 80026f8:	b538      	push	{r3, r4, r5, lr}
 80026fa:	4605      	mov	r5, r0
 80026fc:	2900      	cmp	r1, #0
 80026fe:	d043      	beq.n	8002788 <_free_r+0x90>
 8002700:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002704:	1f0c      	subs	r4, r1, #4
 8002706:	2b00      	cmp	r3, #0
 8002708:	bfb8      	it	lt
 800270a:	18e4      	addlt	r4, r4, r3
 800270c:	f000 f8d4 	bl	80028b8 <__malloc_lock>
 8002710:	4a1e      	ldr	r2, [pc, #120]	; (800278c <_free_r+0x94>)
 8002712:	6813      	ldr	r3, [r2, #0]
 8002714:	4610      	mov	r0, r2
 8002716:	b933      	cbnz	r3, 8002726 <_free_r+0x2e>
 8002718:	6063      	str	r3, [r4, #4]
 800271a:	6014      	str	r4, [r2, #0]
 800271c:	4628      	mov	r0, r5
 800271e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002722:	f000 b8ca 	b.w	80028ba <__malloc_unlock>
 8002726:	42a3      	cmp	r3, r4
 8002728:	d90b      	bls.n	8002742 <_free_r+0x4a>
 800272a:	6821      	ldr	r1, [r4, #0]
 800272c:	1862      	adds	r2, r4, r1
 800272e:	4293      	cmp	r3, r2
 8002730:	bf01      	itttt	eq
 8002732:	681a      	ldreq	r2, [r3, #0]
 8002734:	685b      	ldreq	r3, [r3, #4]
 8002736:	1852      	addeq	r2, r2, r1
 8002738:	6022      	streq	r2, [r4, #0]
 800273a:	6063      	str	r3, [r4, #4]
 800273c:	6004      	str	r4, [r0, #0]
 800273e:	e7ed      	b.n	800271c <_free_r+0x24>
 8002740:	4613      	mov	r3, r2
 8002742:	685a      	ldr	r2, [r3, #4]
 8002744:	b10a      	cbz	r2, 800274a <_free_r+0x52>
 8002746:	42a2      	cmp	r2, r4
 8002748:	d9fa      	bls.n	8002740 <_free_r+0x48>
 800274a:	6819      	ldr	r1, [r3, #0]
 800274c:	1858      	adds	r0, r3, r1
 800274e:	42a0      	cmp	r0, r4
 8002750:	d10b      	bne.n	800276a <_free_r+0x72>
 8002752:	6820      	ldr	r0, [r4, #0]
 8002754:	4401      	add	r1, r0
 8002756:	1858      	adds	r0, r3, r1
 8002758:	4282      	cmp	r2, r0
 800275a:	6019      	str	r1, [r3, #0]
 800275c:	d1de      	bne.n	800271c <_free_r+0x24>
 800275e:	6810      	ldr	r0, [r2, #0]
 8002760:	6852      	ldr	r2, [r2, #4]
 8002762:	4401      	add	r1, r0
 8002764:	6019      	str	r1, [r3, #0]
 8002766:	605a      	str	r2, [r3, #4]
 8002768:	e7d8      	b.n	800271c <_free_r+0x24>
 800276a:	d902      	bls.n	8002772 <_free_r+0x7a>
 800276c:	230c      	movs	r3, #12
 800276e:	602b      	str	r3, [r5, #0]
 8002770:	e7d4      	b.n	800271c <_free_r+0x24>
 8002772:	6820      	ldr	r0, [r4, #0]
 8002774:	1821      	adds	r1, r4, r0
 8002776:	428a      	cmp	r2, r1
 8002778:	bf01      	itttt	eq
 800277a:	6811      	ldreq	r1, [r2, #0]
 800277c:	6852      	ldreq	r2, [r2, #4]
 800277e:	1809      	addeq	r1, r1, r0
 8002780:	6021      	streq	r1, [r4, #0]
 8002782:	6062      	str	r2, [r4, #4]
 8002784:	605c      	str	r4, [r3, #4]
 8002786:	e7c9      	b.n	800271c <_free_r+0x24>
 8002788:	bd38      	pop	{r3, r4, r5, pc}
 800278a:	bf00      	nop
 800278c:	200004dc 	.word	0x200004dc

08002790 <_malloc_r>:
 8002790:	b570      	push	{r4, r5, r6, lr}
 8002792:	1ccd      	adds	r5, r1, #3
 8002794:	f025 0503 	bic.w	r5, r5, #3
 8002798:	3508      	adds	r5, #8
 800279a:	2d0c      	cmp	r5, #12
 800279c:	bf38      	it	cc
 800279e:	250c      	movcc	r5, #12
 80027a0:	2d00      	cmp	r5, #0
 80027a2:	4606      	mov	r6, r0
 80027a4:	db01      	blt.n	80027aa <_malloc_r+0x1a>
 80027a6:	42a9      	cmp	r1, r5
 80027a8:	d903      	bls.n	80027b2 <_malloc_r+0x22>
 80027aa:	230c      	movs	r3, #12
 80027ac:	6033      	str	r3, [r6, #0]
 80027ae:	2000      	movs	r0, #0
 80027b0:	bd70      	pop	{r4, r5, r6, pc}
 80027b2:	f000 f881 	bl	80028b8 <__malloc_lock>
 80027b6:	4a23      	ldr	r2, [pc, #140]	; (8002844 <_malloc_r+0xb4>)
 80027b8:	6814      	ldr	r4, [r2, #0]
 80027ba:	4621      	mov	r1, r4
 80027bc:	b991      	cbnz	r1, 80027e4 <_malloc_r+0x54>
 80027be:	4c22      	ldr	r4, [pc, #136]	; (8002848 <_malloc_r+0xb8>)
 80027c0:	6823      	ldr	r3, [r4, #0]
 80027c2:	b91b      	cbnz	r3, 80027cc <_malloc_r+0x3c>
 80027c4:	4630      	mov	r0, r6
 80027c6:	f000 f867 	bl	8002898 <_sbrk_r>
 80027ca:	6020      	str	r0, [r4, #0]
 80027cc:	4629      	mov	r1, r5
 80027ce:	4630      	mov	r0, r6
 80027d0:	f000 f862 	bl	8002898 <_sbrk_r>
 80027d4:	1c43      	adds	r3, r0, #1
 80027d6:	d126      	bne.n	8002826 <_malloc_r+0x96>
 80027d8:	230c      	movs	r3, #12
 80027da:	4630      	mov	r0, r6
 80027dc:	6033      	str	r3, [r6, #0]
 80027de:	f000 f86c 	bl	80028ba <__malloc_unlock>
 80027e2:	e7e4      	b.n	80027ae <_malloc_r+0x1e>
 80027e4:	680b      	ldr	r3, [r1, #0]
 80027e6:	1b5b      	subs	r3, r3, r5
 80027e8:	d41a      	bmi.n	8002820 <_malloc_r+0x90>
 80027ea:	2b0b      	cmp	r3, #11
 80027ec:	d90f      	bls.n	800280e <_malloc_r+0x7e>
 80027ee:	600b      	str	r3, [r1, #0]
 80027f0:	18cc      	adds	r4, r1, r3
 80027f2:	50cd      	str	r5, [r1, r3]
 80027f4:	4630      	mov	r0, r6
 80027f6:	f000 f860 	bl	80028ba <__malloc_unlock>
 80027fa:	f104 000b 	add.w	r0, r4, #11
 80027fe:	1d23      	adds	r3, r4, #4
 8002800:	f020 0007 	bic.w	r0, r0, #7
 8002804:	1ac3      	subs	r3, r0, r3
 8002806:	d01b      	beq.n	8002840 <_malloc_r+0xb0>
 8002808:	425a      	negs	r2, r3
 800280a:	50e2      	str	r2, [r4, r3]
 800280c:	bd70      	pop	{r4, r5, r6, pc}
 800280e:	428c      	cmp	r4, r1
 8002810:	bf0b      	itete	eq
 8002812:	6863      	ldreq	r3, [r4, #4]
 8002814:	684b      	ldrne	r3, [r1, #4]
 8002816:	6013      	streq	r3, [r2, #0]
 8002818:	6063      	strne	r3, [r4, #4]
 800281a:	bf18      	it	ne
 800281c:	460c      	movne	r4, r1
 800281e:	e7e9      	b.n	80027f4 <_malloc_r+0x64>
 8002820:	460c      	mov	r4, r1
 8002822:	6849      	ldr	r1, [r1, #4]
 8002824:	e7ca      	b.n	80027bc <_malloc_r+0x2c>
 8002826:	1cc4      	adds	r4, r0, #3
 8002828:	f024 0403 	bic.w	r4, r4, #3
 800282c:	42a0      	cmp	r0, r4
 800282e:	d005      	beq.n	800283c <_malloc_r+0xac>
 8002830:	1a21      	subs	r1, r4, r0
 8002832:	4630      	mov	r0, r6
 8002834:	f000 f830 	bl	8002898 <_sbrk_r>
 8002838:	3001      	adds	r0, #1
 800283a:	d0cd      	beq.n	80027d8 <_malloc_r+0x48>
 800283c:	6025      	str	r5, [r4, #0]
 800283e:	e7d9      	b.n	80027f4 <_malloc_r+0x64>
 8002840:	bd70      	pop	{r4, r5, r6, pc}
 8002842:	bf00      	nop
 8002844:	200004dc 	.word	0x200004dc
 8002848:	200004e0 	.word	0x200004e0

0800284c <_realloc_r>:
 800284c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800284e:	4607      	mov	r7, r0
 8002850:	4614      	mov	r4, r2
 8002852:	460e      	mov	r6, r1
 8002854:	b921      	cbnz	r1, 8002860 <_realloc_r+0x14>
 8002856:	4611      	mov	r1, r2
 8002858:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800285c:	f7ff bf98 	b.w	8002790 <_malloc_r>
 8002860:	b922      	cbnz	r2, 800286c <_realloc_r+0x20>
 8002862:	f7ff ff49 	bl	80026f8 <_free_r>
 8002866:	4625      	mov	r5, r4
 8002868:	4628      	mov	r0, r5
 800286a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800286c:	f000 f826 	bl	80028bc <_malloc_usable_size_r>
 8002870:	4284      	cmp	r4, r0
 8002872:	d90f      	bls.n	8002894 <_realloc_r+0x48>
 8002874:	4621      	mov	r1, r4
 8002876:	4638      	mov	r0, r7
 8002878:	f7ff ff8a 	bl	8002790 <_malloc_r>
 800287c:	4605      	mov	r5, r0
 800287e:	2800      	cmp	r0, #0
 8002880:	d0f2      	beq.n	8002868 <_realloc_r+0x1c>
 8002882:	4631      	mov	r1, r6
 8002884:	4622      	mov	r2, r4
 8002886:	f7ff ff11 	bl	80026ac <memcpy>
 800288a:	4631      	mov	r1, r6
 800288c:	4638      	mov	r0, r7
 800288e:	f7ff ff33 	bl	80026f8 <_free_r>
 8002892:	e7e9      	b.n	8002868 <_realloc_r+0x1c>
 8002894:	4635      	mov	r5, r6
 8002896:	e7e7      	b.n	8002868 <_realloc_r+0x1c>

08002898 <_sbrk_r>:
 8002898:	b538      	push	{r3, r4, r5, lr}
 800289a:	2300      	movs	r3, #0
 800289c:	4c05      	ldr	r4, [pc, #20]	; (80028b4 <_sbrk_r+0x1c>)
 800289e:	4605      	mov	r5, r0
 80028a0:	4608      	mov	r0, r1
 80028a2:	6023      	str	r3, [r4, #0]
 80028a4:	f7ff fab4 	bl	8001e10 <_sbrk>
 80028a8:	1c43      	adds	r3, r0, #1
 80028aa:	d102      	bne.n	80028b2 <_sbrk_r+0x1a>
 80028ac:	6823      	ldr	r3, [r4, #0]
 80028ae:	b103      	cbz	r3, 80028b2 <_sbrk_r+0x1a>
 80028b0:	602b      	str	r3, [r5, #0]
 80028b2:	bd38      	pop	{r3, r4, r5, pc}
 80028b4:	200005a8 	.word	0x200005a8

080028b8 <__malloc_lock>:
 80028b8:	4770      	bx	lr

080028ba <__malloc_unlock>:
 80028ba:	4770      	bx	lr

080028bc <_malloc_usable_size_r>:
 80028bc:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80028c0:	2800      	cmp	r0, #0
 80028c2:	f1a0 0004 	sub.w	r0, r0, #4
 80028c6:	bfbc      	itt	lt
 80028c8:	580b      	ldrlt	r3, [r1, r0]
 80028ca:	18c0      	addlt	r0, r0, r3
 80028cc:	4770      	bx	lr
	...

080028d0 <_init>:
 80028d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028d2:	bf00      	nop
 80028d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028d6:	bc08      	pop	{r3}
 80028d8:	469e      	mov	lr, r3
 80028da:	4770      	bx	lr

080028dc <_fini>:
 80028dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028de:	bf00      	nop
 80028e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028e2:	bc08      	pop	{r3}
 80028e4:	469e      	mov	lr, r3
 80028e6:	4770      	bx	lr
