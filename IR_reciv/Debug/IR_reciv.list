
IR_reciv.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000261c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  0800272c  0800272c  0001272c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080027d0  080027d0  000127d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080027d4  080027d4  000127d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000000  080027d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000002c8  20000070  08002848  00020070  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000338  08002848  00020338  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  9 .debug_info   00012336  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000025ae  00000000  00000000  000323cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005fa6  00000000  00000000  0003497d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000008e8  00000000  00000000  0003a928  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000ba0  00000000  00000000  0003b210  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00004bcd  00000000  00000000  0003bdb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000352d  00000000  00000000  0004097d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00043eaa  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001eb0  00000000  00000000  00043f28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08002714 	.word	0x08002714

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08002714 	.word	0x08002714

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f092 0f00 	teq	r2, #0
 800044a:	bf14      	ite	ne
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	4770      	bxeq	lr
 8000452:	b530      	push	{r4, r5, lr}
 8000454:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000460:	e720      	b.n	80002a4 <__adddf3+0x138>
 8000462:	bf00      	nop

08000464 <__aeabi_ul2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f04f 0500 	mov.w	r5, #0
 8000472:	e00a      	b.n	800048a <__aeabi_l2d+0x16>

08000474 <__aeabi_l2d>:
 8000474:	ea50 0201 	orrs.w	r2, r0, r1
 8000478:	bf08      	it	eq
 800047a:	4770      	bxeq	lr
 800047c:	b530      	push	{r4, r5, lr}
 800047e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000482:	d502      	bpl.n	800048a <__aeabi_l2d+0x16>
 8000484:	4240      	negs	r0, r0
 8000486:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000492:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000496:	f43f aedc 	beq.w	8000252 <__adddf3+0xe6>
 800049a:	f04f 0203 	mov.w	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b2:	f1c2 0320 	rsb	r3, r2, #32
 80004b6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ba:	fa20 f002 	lsr.w	r0, r0, r2
 80004be:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c2:	ea40 000e 	orr.w	r0, r0, lr
 80004c6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ca:	4414      	add	r4, r2
 80004cc:	e6c1      	b.n	8000252 <__adddf3+0xe6>
 80004ce:	bf00      	nop

080004d0 <__aeabi_dmul>:
 80004d0:	b570      	push	{r4, r5, r6, lr}
 80004d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004de:	bf1d      	ittte	ne
 80004e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004e4:	ea94 0f0c 	teqne	r4, ip
 80004e8:	ea95 0f0c 	teqne	r5, ip
 80004ec:	f000 f8de 	bleq	80006ac <__aeabi_dmul+0x1dc>
 80004f0:	442c      	add	r4, r5
 80004f2:	ea81 0603 	eor.w	r6, r1, r3
 80004f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000502:	bf18      	it	ne
 8000504:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000508:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800050c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000510:	d038      	beq.n	8000584 <__aeabi_dmul+0xb4>
 8000512:	fba0 ce02 	umull	ip, lr, r0, r2
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800051e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000522:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000526:	f04f 0600 	mov.w	r6, #0
 800052a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800052e:	f09c 0f00 	teq	ip, #0
 8000532:	bf18      	it	ne
 8000534:	f04e 0e01 	orrne.w	lr, lr, #1
 8000538:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800053c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000540:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000544:	d204      	bcs.n	8000550 <__aeabi_dmul+0x80>
 8000546:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800054a:	416d      	adcs	r5, r5
 800054c:	eb46 0606 	adc.w	r6, r6, r6
 8000550:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000554:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000558:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800055c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000560:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000564:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000568:	bf88      	it	hi
 800056a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800056e:	d81e      	bhi.n	80005ae <__aeabi_dmul+0xde>
 8000570:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000574:	bf08      	it	eq
 8000576:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800057a:	f150 0000 	adcs.w	r0, r0, #0
 800057e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000582:	bd70      	pop	{r4, r5, r6, pc}
 8000584:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000588:	ea46 0101 	orr.w	r1, r6, r1
 800058c:	ea40 0002 	orr.w	r0, r0, r2
 8000590:	ea81 0103 	eor.w	r1, r1, r3
 8000594:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000598:	bfc2      	ittt	gt
 800059a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800059e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005a2:	bd70      	popgt	{r4, r5, r6, pc}
 80005a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a8:	f04f 0e00 	mov.w	lr, #0
 80005ac:	3c01      	subs	r4, #1
 80005ae:	f300 80ab 	bgt.w	8000708 <__aeabi_dmul+0x238>
 80005b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005b6:	bfde      	ittt	le
 80005b8:	2000      	movle	r0, #0
 80005ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005be:	bd70      	pople	{r4, r5, r6, pc}
 80005c0:	f1c4 0400 	rsb	r4, r4, #0
 80005c4:	3c20      	subs	r4, #32
 80005c6:	da35      	bge.n	8000634 <__aeabi_dmul+0x164>
 80005c8:	340c      	adds	r4, #12
 80005ca:	dc1b      	bgt.n	8000604 <__aeabi_dmul+0x134>
 80005cc:	f104 0414 	add.w	r4, r4, #20
 80005d0:	f1c4 0520 	rsb	r5, r4, #32
 80005d4:	fa00 f305 	lsl.w	r3, r0, r5
 80005d8:	fa20 f004 	lsr.w	r0, r0, r4
 80005dc:	fa01 f205 	lsl.w	r2, r1, r5
 80005e0:	ea40 0002 	orr.w	r0, r0, r2
 80005e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f0:	fa21 f604 	lsr.w	r6, r1, r4
 80005f4:	eb42 0106 	adc.w	r1, r2, r6
 80005f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005fc:	bf08      	it	eq
 80005fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f1c4 040c 	rsb	r4, r4, #12
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f304 	lsl.w	r3, r0, r4
 8000610:	fa20 f005 	lsr.w	r0, r0, r5
 8000614:	fa01 f204 	lsl.w	r2, r1, r4
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000620:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000624:	f141 0100 	adc.w	r1, r1, #0
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 0520 	rsb	r5, r4, #32
 8000638:	fa00 f205 	lsl.w	r2, r0, r5
 800063c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000640:	fa20 f304 	lsr.w	r3, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea43 0302 	orr.w	r3, r3, r2
 800064c:	fa21 f004 	lsr.w	r0, r1, r4
 8000650:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000654:	fa21 f204 	lsr.w	r2, r1, r4
 8000658:	ea20 0002 	bic.w	r0, r0, r2
 800065c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f094 0f00 	teq	r4, #0
 8000670:	d10f      	bne.n	8000692 <__aeabi_dmul+0x1c2>
 8000672:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000676:	0040      	lsls	r0, r0, #1
 8000678:	eb41 0101 	adc.w	r1, r1, r1
 800067c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000680:	bf08      	it	eq
 8000682:	3c01      	subeq	r4, #1
 8000684:	d0f7      	beq.n	8000676 <__aeabi_dmul+0x1a6>
 8000686:	ea41 0106 	orr.w	r1, r1, r6
 800068a:	f095 0f00 	teq	r5, #0
 800068e:	bf18      	it	ne
 8000690:	4770      	bxne	lr
 8000692:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000696:	0052      	lsls	r2, r2, #1
 8000698:	eb43 0303 	adc.w	r3, r3, r3
 800069c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a0:	bf08      	it	eq
 80006a2:	3d01      	subeq	r5, #1
 80006a4:	d0f7      	beq.n	8000696 <__aeabi_dmul+0x1c6>
 80006a6:	ea43 0306 	orr.w	r3, r3, r6
 80006aa:	4770      	bx	lr
 80006ac:	ea94 0f0c 	teq	r4, ip
 80006b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006b4:	bf18      	it	ne
 80006b6:	ea95 0f0c 	teqne	r5, ip
 80006ba:	d00c      	beq.n	80006d6 <__aeabi_dmul+0x206>
 80006bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c0:	bf18      	it	ne
 80006c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006c6:	d1d1      	bne.n	800066c <__aeabi_dmul+0x19c>
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	f04f 0000 	mov.w	r0, #0
 80006d4:	bd70      	pop	{r4, r5, r6, pc}
 80006d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006da:	bf06      	itte	eq
 80006dc:	4610      	moveq	r0, r2
 80006de:	4619      	moveq	r1, r3
 80006e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e4:	d019      	beq.n	800071a <__aeabi_dmul+0x24a>
 80006e6:	ea94 0f0c 	teq	r4, ip
 80006ea:	d102      	bne.n	80006f2 <__aeabi_dmul+0x222>
 80006ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f0:	d113      	bne.n	800071a <__aeabi_dmul+0x24a>
 80006f2:	ea95 0f0c 	teq	r5, ip
 80006f6:	d105      	bne.n	8000704 <__aeabi_dmul+0x234>
 80006f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006fc:	bf1c      	itt	ne
 80006fe:	4610      	movne	r0, r2
 8000700:	4619      	movne	r1, r3
 8000702:	d10a      	bne.n	800071a <__aeabi_dmul+0x24a>
 8000704:	ea81 0103 	eor.w	r1, r1, r3
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000710:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000714:	f04f 0000 	mov.w	r0, #0
 8000718:	bd70      	pop	{r4, r5, r6, pc}
 800071a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800071e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000722:	bd70      	pop	{r4, r5, r6, pc}

08000724 <__aeabi_ddiv>:
 8000724:	b570      	push	{r4, r5, r6, lr}
 8000726:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800072a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800072e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000732:	bf1d      	ittte	ne
 8000734:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000738:	ea94 0f0c 	teqne	r4, ip
 800073c:	ea95 0f0c 	teqne	r5, ip
 8000740:	f000 f8a7 	bleq	8000892 <__aeabi_ddiv+0x16e>
 8000744:	eba4 0405 	sub.w	r4, r4, r5
 8000748:	ea81 0e03 	eor.w	lr, r1, r3
 800074c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000750:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000754:	f000 8088 	beq.w	8000868 <__aeabi_ddiv+0x144>
 8000758:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800075c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000760:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000764:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000768:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800076c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000770:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000774:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000778:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800077c:	429d      	cmp	r5, r3
 800077e:	bf08      	it	eq
 8000780:	4296      	cmpeq	r6, r2
 8000782:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000786:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800078a:	d202      	bcs.n	8000792 <__aeabi_ddiv+0x6e>
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	1ab6      	subs	r6, r6, r2
 8000794:	eb65 0503 	sbc.w	r5, r5, r3
 8000798:	085b      	lsrs	r3, r3, #1
 800079a:	ea4f 0232 	mov.w	r2, r2, rrx
 800079e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ae:	bf22      	ittt	cs
 80007b0:	1ab6      	subcs	r6, r6, r2
 80007b2:	4675      	movcs	r5, lr
 80007b4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b8:	085b      	lsrs	r3, r3, #1
 80007ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000800:	ea55 0e06 	orrs.w	lr, r5, r6
 8000804:	d018      	beq.n	8000838 <__aeabi_ddiv+0x114>
 8000806:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800080a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800080e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000812:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000816:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800081a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800081e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000822:	d1c0      	bne.n	80007a6 <__aeabi_ddiv+0x82>
 8000824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000828:	d10b      	bne.n	8000842 <__aeabi_ddiv+0x11e>
 800082a:	ea41 0100 	orr.w	r1, r1, r0
 800082e:	f04f 0000 	mov.w	r0, #0
 8000832:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000836:	e7b6      	b.n	80007a6 <__aeabi_ddiv+0x82>
 8000838:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800083c:	bf04      	itt	eq
 800083e:	4301      	orreq	r1, r0
 8000840:	2000      	moveq	r0, #0
 8000842:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000846:	bf88      	it	hi
 8000848:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800084c:	f63f aeaf 	bhi.w	80005ae <__aeabi_dmul+0xde>
 8000850:	ebb5 0c03 	subs.w	ip, r5, r3
 8000854:	bf04      	itt	eq
 8000856:	ebb6 0c02 	subseq.w	ip, r6, r2
 800085a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800085e:	f150 0000 	adcs.w	r0, r0, #0
 8000862:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000866:	bd70      	pop	{r4, r5, r6, pc}
 8000868:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800086c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000870:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000874:	bfc2      	ittt	gt
 8000876:	ebd4 050c 	rsbsgt	r5, r4, ip
 800087a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800087e:	bd70      	popgt	{r4, r5, r6, pc}
 8000880:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000884:	f04f 0e00 	mov.w	lr, #0
 8000888:	3c01      	subs	r4, #1
 800088a:	e690      	b.n	80005ae <__aeabi_dmul+0xde>
 800088c:	ea45 0e06 	orr.w	lr, r5, r6
 8000890:	e68d      	b.n	80005ae <__aeabi_dmul+0xde>
 8000892:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000896:	ea94 0f0c 	teq	r4, ip
 800089a:	bf08      	it	eq
 800089c:	ea95 0f0c 	teqeq	r5, ip
 80008a0:	f43f af3b 	beq.w	800071a <__aeabi_dmul+0x24a>
 80008a4:	ea94 0f0c 	teq	r4, ip
 80008a8:	d10a      	bne.n	80008c0 <__aeabi_ddiv+0x19c>
 80008aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ae:	f47f af34 	bne.w	800071a <__aeabi_dmul+0x24a>
 80008b2:	ea95 0f0c 	teq	r5, ip
 80008b6:	f47f af25 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ba:	4610      	mov	r0, r2
 80008bc:	4619      	mov	r1, r3
 80008be:	e72c      	b.n	800071a <__aeabi_dmul+0x24a>
 80008c0:	ea95 0f0c 	teq	r5, ip
 80008c4:	d106      	bne.n	80008d4 <__aeabi_ddiv+0x1b0>
 80008c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ca:	f43f aefd 	beq.w	80006c8 <__aeabi_dmul+0x1f8>
 80008ce:	4610      	mov	r0, r2
 80008d0:	4619      	mov	r1, r3
 80008d2:	e722      	b.n	800071a <__aeabi_dmul+0x24a>
 80008d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d8:	bf18      	it	ne
 80008da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008de:	f47f aec5 	bne.w	800066c <__aeabi_dmul+0x19c>
 80008e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008e6:	f47f af0d 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008ee:	f47f aeeb 	bne.w	80006c8 <__aeabi_dmul+0x1f8>
 80008f2:	e712      	b.n	800071a <__aeabi_dmul+0x24a>

080008f4 <__gedf2>:
 80008f4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80008f8:	e006      	b.n	8000908 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__ledf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	e002      	b.n	8000908 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__cmpdf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	f84d cd04 	str.w	ip, [sp, #-4]!
 800090c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000910:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000914:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000918:	bf18      	it	ne
 800091a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800091e:	d01b      	beq.n	8000958 <__cmpdf2+0x54>
 8000920:	b001      	add	sp, #4
 8000922:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000926:	bf0c      	ite	eq
 8000928:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800092c:	ea91 0f03 	teqne	r1, r3
 8000930:	bf02      	ittt	eq
 8000932:	ea90 0f02 	teqeq	r0, r2
 8000936:	2000      	moveq	r0, #0
 8000938:	4770      	bxeq	lr
 800093a:	f110 0f00 	cmn.w	r0, #0
 800093e:	ea91 0f03 	teq	r1, r3
 8000942:	bf58      	it	pl
 8000944:	4299      	cmppl	r1, r3
 8000946:	bf08      	it	eq
 8000948:	4290      	cmpeq	r0, r2
 800094a:	bf2c      	ite	cs
 800094c:	17d8      	asrcs	r0, r3, #31
 800094e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000952:	f040 0001 	orr.w	r0, r0, #1
 8000956:	4770      	bx	lr
 8000958:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	d102      	bne.n	8000968 <__cmpdf2+0x64>
 8000962:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000966:	d107      	bne.n	8000978 <__cmpdf2+0x74>
 8000968:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800096c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000970:	d1d6      	bne.n	8000920 <__cmpdf2+0x1c>
 8000972:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000976:	d0d3      	beq.n	8000920 <__cmpdf2+0x1c>
 8000978:	f85d 0b04 	ldr.w	r0, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop

08000980 <__aeabi_cdrcmple>:
 8000980:	4684      	mov	ip, r0
 8000982:	4610      	mov	r0, r2
 8000984:	4662      	mov	r2, ip
 8000986:	468c      	mov	ip, r1
 8000988:	4619      	mov	r1, r3
 800098a:	4663      	mov	r3, ip
 800098c:	e000      	b.n	8000990 <__aeabi_cdcmpeq>
 800098e:	bf00      	nop

08000990 <__aeabi_cdcmpeq>:
 8000990:	b501      	push	{r0, lr}
 8000992:	f7ff ffb7 	bl	8000904 <__cmpdf2>
 8000996:	2800      	cmp	r0, #0
 8000998:	bf48      	it	mi
 800099a:	f110 0f00 	cmnmi.w	r0, #0
 800099e:	bd01      	pop	{r0, pc}

080009a0 <__aeabi_dcmpeq>:
 80009a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a4:	f7ff fff4 	bl	8000990 <__aeabi_cdcmpeq>
 80009a8:	bf0c      	ite	eq
 80009aa:	2001      	moveq	r0, #1
 80009ac:	2000      	movne	r0, #0
 80009ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b2:	bf00      	nop

080009b4 <__aeabi_dcmplt>:
 80009b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b8:	f7ff ffea 	bl	8000990 <__aeabi_cdcmpeq>
 80009bc:	bf34      	ite	cc
 80009be:	2001      	movcc	r0, #1
 80009c0:	2000      	movcs	r0, #0
 80009c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009c6:	bf00      	nop

080009c8 <__aeabi_dcmple>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff ffe0 	bl	8000990 <__aeabi_cdcmpeq>
 80009d0:	bf94      	ite	ls
 80009d2:	2001      	movls	r0, #1
 80009d4:	2000      	movhi	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmpge>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffce 	bl	8000980 <__aeabi_cdrcmple>
 80009e4:	bf94      	ite	ls
 80009e6:	2001      	movls	r0, #1
 80009e8:	2000      	movhi	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmpgt>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffc4 	bl	8000980 <__aeabi_cdrcmple>
 80009f8:	bf34      	ite	cc
 80009fa:	2001      	movcc	r0, #1
 80009fc:	2000      	movcs	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a04:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a06:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <HAL_InitTick+0x3c>)
{
 8000a08:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a0a:	7818      	ldrb	r0, [r3, #0]
 8000a0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a10:	fbb3 f3f0 	udiv	r3, r3, r0
 8000a14:	4a0b      	ldr	r2, [pc, #44]	; (8000a44 <HAL_InitTick+0x40>)
 8000a16:	6810      	ldr	r0, [r2, #0]
 8000a18:	fbb0 f0f3 	udiv	r0, r0, r3
 8000a1c:	f000 f89e 	bl	8000b5c <HAL_SYSTICK_Config>
 8000a20:	4604      	mov	r4, r0
 8000a22:	b958      	cbnz	r0, 8000a3c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a24:	2d0f      	cmp	r5, #15
 8000a26:	d809      	bhi.n	8000a3c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a28:	4602      	mov	r2, r0
 8000a2a:	4629      	mov	r1, r5
 8000a2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a30:	f000 f854 	bl	8000adc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a34:	4b04      	ldr	r3, [pc, #16]	; (8000a48 <HAL_InitTick+0x44>)
 8000a36:	4620      	mov	r0, r4
 8000a38:	601d      	str	r5, [r3, #0]
 8000a3a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000a3c:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000a3e:	bd38      	pop	{r3, r4, r5, pc}
 8000a40:	20000000 	.word	0x20000000
 8000a44:	20000008 	.word	0x20000008
 8000a48:	20000004 	.word	0x20000004

08000a4c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a4c:	4a07      	ldr	r2, [pc, #28]	; (8000a6c <HAL_Init+0x20>)
{
 8000a4e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a50:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a52:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a54:	f043 0310 	orr.w	r3, r3, #16
 8000a58:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a5a:	f000 f82d 	bl	8000ab8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a5e:	2000      	movs	r0, #0
 8000a60:	f7ff ffd0 	bl	8000a04 <HAL_InitTick>
  HAL_MspInit();
 8000a64:	f001 f8ee 	bl	8001c44 <HAL_MspInit>
}
 8000a68:	2000      	movs	r0, #0
 8000a6a:	bd08      	pop	{r3, pc}
 8000a6c:	40022000 	.word	0x40022000

08000a70 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000a70:	4a03      	ldr	r2, [pc, #12]	; (8000a80 <HAL_IncTick+0x10>)
 8000a72:	4b04      	ldr	r3, [pc, #16]	; (8000a84 <HAL_IncTick+0x14>)
 8000a74:	6811      	ldr	r1, [r2, #0]
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	440b      	add	r3, r1
 8000a7a:	6013      	str	r3, [r2, #0]
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	20000098 	.word	0x20000098
 8000a84:	20000000 	.word	0x20000000

08000a88 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000a88:	4b01      	ldr	r3, [pc, #4]	; (8000a90 <HAL_GetTick+0x8>)
 8000a8a:	6818      	ldr	r0, [r3, #0]
}
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	20000098 	.word	0x20000098

08000a94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a94:	b538      	push	{r3, r4, r5, lr}
 8000a96:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000a98:	f7ff fff6 	bl	8000a88 <HAL_GetTick>
 8000a9c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a9e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	4b04      	ldrne	r3, [pc, #16]	; (8000ab4 <HAL_Delay+0x20>)
 8000aa4:	781b      	ldrbne	r3, [r3, #0]
 8000aa6:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000aa8:	f7ff ffee 	bl	8000a88 <HAL_GetTick>
 8000aac:	1b40      	subs	r0, r0, r5
 8000aae:	4284      	cmp	r4, r0
 8000ab0:	d8fa      	bhi.n	8000aa8 <HAL_Delay+0x14>
  {
  }
}
 8000ab2:	bd38      	pop	{r3, r4, r5, pc}
 8000ab4:	20000000 	.word	0x20000000

08000ab8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ab8:	4a07      	ldr	r2, [pc, #28]	; (8000ad8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000aba:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000abc:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000abe:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ac2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000ac6:	041b      	lsls	r3, r3, #16
 8000ac8:	0c1b      	lsrs	r3, r3, #16
 8000aca:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ace:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000ad2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000ad4:	60d3      	str	r3, [r2, #12]
 8000ad6:	4770      	bx	lr
 8000ad8:	e000ed00 	.word	0xe000ed00

08000adc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000adc:	4b17      	ldr	r3, [pc, #92]	; (8000b3c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ade:	b530      	push	{r4, r5, lr}
 8000ae0:	68dc      	ldr	r4, [r3, #12]
 8000ae2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ae6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aea:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aec:	2b04      	cmp	r3, #4
 8000aee:	bf28      	it	cs
 8000af0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000af2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af4:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000af8:	bf98      	it	ls
 8000afa:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000afc:	fa05 f303 	lsl.w	r3, r5, r3
 8000b00:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b04:	bf88      	it	hi
 8000b06:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b08:	4019      	ands	r1, r3
 8000b0a:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b0c:	fa05 f404 	lsl.w	r4, r5, r4
 8000b10:	3c01      	subs	r4, #1
 8000b12:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000b14:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b16:	ea42 0201 	orr.w	r2, r2, r1
 8000b1a:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b1e:	bfaf      	iteee	ge
 8000b20:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b24:	4b06      	ldrlt	r3, [pc, #24]	; (8000b40 <HAL_NVIC_SetPriority+0x64>)
 8000b26:	f000 000f 	andlt.w	r0, r0, #15
 8000b2a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b2c:	bfa5      	ittet	ge
 8000b2e:	b2d2      	uxtbge	r2, r2
 8000b30:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b34:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b36:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000b3a:	bd30      	pop	{r4, r5, pc}
 8000b3c:	e000ed00 	.word	0xe000ed00
 8000b40:	e000ed14 	.word	0xe000ed14

08000b44 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000b44:	2301      	movs	r3, #1
 8000b46:	0942      	lsrs	r2, r0, #5
 8000b48:	f000 001f 	and.w	r0, r0, #31
 8000b4c:	fa03 f000 	lsl.w	r0, r3, r0
 8000b50:	4b01      	ldr	r3, [pc, #4]	; (8000b58 <HAL_NVIC_EnableIRQ+0x14>)
 8000b52:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000b56:	4770      	bx	lr
 8000b58:	e000e100 	.word	0xe000e100

08000b5c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b5c:	3801      	subs	r0, #1
 8000b5e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b62:	d20a      	bcs.n	8000b7a <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b64:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b66:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b68:	4a06      	ldr	r2, [pc, #24]	; (8000b84 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b6a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b6c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b70:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b72:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b74:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000b7a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	e000e010 	.word	0xe000e010
 8000b84:	e000ed00 	.word	0xe000ed00

08000b88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8000b8c:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000b8e:	4616      	mov	r6, r2
 8000b90:	4b65      	ldr	r3, [pc, #404]	; (8000d28 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b92:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8000d38 <HAL_GPIO_Init+0x1b0>
 8000b96:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8000d3c <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 8000b9a:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b9e:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8000ba0:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ba4:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8000ba8:	45a0      	cmp	r8, r4
 8000baa:	d17f      	bne.n	8000cac <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8000bac:	684d      	ldr	r5, [r1, #4]
 8000bae:	2d12      	cmp	r5, #18
 8000bb0:	f000 80af 	beq.w	8000d12 <HAL_GPIO_Init+0x18a>
 8000bb4:	f200 8088 	bhi.w	8000cc8 <HAL_GPIO_Init+0x140>
 8000bb8:	2d02      	cmp	r5, #2
 8000bba:	f000 80a7 	beq.w	8000d0c <HAL_GPIO_Init+0x184>
 8000bbe:	d87c      	bhi.n	8000cba <HAL_GPIO_Init+0x132>
 8000bc0:	2d00      	cmp	r5, #0
 8000bc2:	f000 808e 	beq.w	8000ce2 <HAL_GPIO_Init+0x15a>
 8000bc6:	2d01      	cmp	r5, #1
 8000bc8:	f000 809e 	beq.w	8000d08 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000bcc:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000bd0:	2cff      	cmp	r4, #255	; 0xff
 8000bd2:	bf93      	iteet	ls
 8000bd4:	4682      	movls	sl, r0
 8000bd6:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000bda:	3d08      	subhi	r5, #8
 8000bdc:	f8d0 b000 	ldrls.w	fp, [r0]
 8000be0:	bf92      	itee	ls
 8000be2:	00b5      	lslls	r5, r6, #2
 8000be4:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000be8:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000bea:	fa09 f805 	lsl.w	r8, r9, r5
 8000bee:	ea2b 0808 	bic.w	r8, fp, r8
 8000bf2:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000bf6:	bf88      	it	hi
 8000bf8:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000bfc:	ea48 0505 	orr.w	r5, r8, r5
 8000c00:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c04:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000c08:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000c0c:	d04e      	beq.n	8000cac <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c0e:	4d47      	ldr	r5, [pc, #284]	; (8000d2c <HAL_GPIO_Init+0x1a4>)
 8000c10:	4f46      	ldr	r7, [pc, #280]	; (8000d2c <HAL_GPIO_Init+0x1a4>)
 8000c12:	69ad      	ldr	r5, [r5, #24]
 8000c14:	f026 0803 	bic.w	r8, r6, #3
 8000c18:	f045 0501 	orr.w	r5, r5, #1
 8000c1c:	61bd      	str	r5, [r7, #24]
 8000c1e:	69bd      	ldr	r5, [r7, #24]
 8000c20:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000c24:	f005 0501 	and.w	r5, r5, #1
 8000c28:	9501      	str	r5, [sp, #4]
 8000c2a:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000c2e:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c32:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000c34:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8000c38:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000c3c:	fa09 f90b 	lsl.w	r9, r9, fp
 8000c40:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c44:	4d3a      	ldr	r5, [pc, #232]	; (8000d30 <HAL_GPIO_Init+0x1a8>)
 8000c46:	42a8      	cmp	r0, r5
 8000c48:	d068      	beq.n	8000d1c <HAL_GPIO_Init+0x194>
 8000c4a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000c4e:	42a8      	cmp	r0, r5
 8000c50:	d066      	beq.n	8000d20 <HAL_GPIO_Init+0x198>
 8000c52:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000c56:	42a8      	cmp	r0, r5
 8000c58:	d064      	beq.n	8000d24 <HAL_GPIO_Init+0x19c>
 8000c5a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000c5e:	42a8      	cmp	r0, r5
 8000c60:	bf0c      	ite	eq
 8000c62:	2503      	moveq	r5, #3
 8000c64:	2504      	movne	r5, #4
 8000c66:	fa05 f50b 	lsl.w	r5, r5, fp
 8000c6a:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 8000c6e:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c72:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c74:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000c78:	bf14      	ite	ne
 8000c7a:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c7c:	43a5      	biceq	r5, r4
 8000c7e:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c80:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c82:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000c86:	bf14      	ite	ne
 8000c88:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c8a:	43a5      	biceq	r5, r4
 8000c8c:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c8e:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c90:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c94:	bf14      	ite	ne
 8000c96:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c98:	43a5      	biceq	r5, r4
 8000c9a:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c9c:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c9e:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ca2:	bf14      	ite	ne
 8000ca4:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ca6:	ea25 0404 	biceq.w	r4, r5, r4
 8000caa:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000cac:	3601      	adds	r6, #1
 8000cae:	2e10      	cmp	r6, #16
 8000cb0:	f47f af73 	bne.w	8000b9a <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8000cb4:	b003      	add	sp, #12
 8000cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8000cba:	2d03      	cmp	r5, #3
 8000cbc:	d022      	beq.n	8000d04 <HAL_GPIO_Init+0x17c>
 8000cbe:	2d11      	cmp	r5, #17
 8000cc0:	d184      	bne.n	8000bcc <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000cc2:	68ca      	ldr	r2, [r1, #12]
 8000cc4:	3204      	adds	r2, #4
          break;
 8000cc6:	e781      	b.n	8000bcc <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000cc8:	4f1a      	ldr	r7, [pc, #104]	; (8000d34 <HAL_GPIO_Init+0x1ac>)
 8000cca:	42bd      	cmp	r5, r7
 8000ccc:	d009      	beq.n	8000ce2 <HAL_GPIO_Init+0x15a>
 8000cce:	d812      	bhi.n	8000cf6 <HAL_GPIO_Init+0x16e>
 8000cd0:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8000d40 <HAL_GPIO_Init+0x1b8>
 8000cd4:	454d      	cmp	r5, r9
 8000cd6:	d004      	beq.n	8000ce2 <HAL_GPIO_Init+0x15a>
 8000cd8:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000cdc:	454d      	cmp	r5, r9
 8000cde:	f47f af75 	bne.w	8000bcc <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ce2:	688a      	ldr	r2, [r1, #8]
 8000ce4:	b1c2      	cbz	r2, 8000d18 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ce6:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000ce8:	bf0c      	ite	eq
 8000cea:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000cee:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cf2:	2208      	movs	r2, #8
 8000cf4:	e76a      	b.n	8000bcc <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000cf6:	4575      	cmp	r5, lr
 8000cf8:	d0f3      	beq.n	8000ce2 <HAL_GPIO_Init+0x15a>
 8000cfa:	4565      	cmp	r5, ip
 8000cfc:	d0f1      	beq.n	8000ce2 <HAL_GPIO_Init+0x15a>
 8000cfe:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000d44 <HAL_GPIO_Init+0x1bc>
 8000d02:	e7eb      	b.n	8000cdc <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d04:	2200      	movs	r2, #0
 8000d06:	e761      	b.n	8000bcc <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d08:	68ca      	ldr	r2, [r1, #12]
          break;
 8000d0a:	e75f      	b.n	8000bcc <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d0c:	68ca      	ldr	r2, [r1, #12]
 8000d0e:	3208      	adds	r2, #8
          break;
 8000d10:	e75c      	b.n	8000bcc <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d12:	68ca      	ldr	r2, [r1, #12]
 8000d14:	320c      	adds	r2, #12
          break;
 8000d16:	e759      	b.n	8000bcc <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d18:	2204      	movs	r2, #4
 8000d1a:	e757      	b.n	8000bcc <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d1c:	2500      	movs	r5, #0
 8000d1e:	e7a2      	b.n	8000c66 <HAL_GPIO_Init+0xde>
 8000d20:	2501      	movs	r5, #1
 8000d22:	e7a0      	b.n	8000c66 <HAL_GPIO_Init+0xde>
 8000d24:	2502      	movs	r5, #2
 8000d26:	e79e      	b.n	8000c66 <HAL_GPIO_Init+0xde>
 8000d28:	40010400 	.word	0x40010400
 8000d2c:	40021000 	.word	0x40021000
 8000d30:	40010800 	.word	0x40010800
 8000d34:	10210000 	.word	0x10210000
 8000d38:	10310000 	.word	0x10310000
 8000d3c:	10320000 	.word	0x10320000
 8000d40:	10110000 	.word	0x10110000
 8000d44:	10220000 	.word	0x10220000

08000d48 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000d48:	6883      	ldr	r3, [r0, #8]
 8000d4a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000d4c:	bf14      	ite	ne
 8000d4e:	2001      	movne	r0, #1
 8000d50:	2000      	moveq	r0, #0
 8000d52:	4770      	bx	lr

08000d54 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d54:	6803      	ldr	r3, [r0, #0]
{
 8000d56:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d5a:	07db      	lsls	r3, r3, #31
{
 8000d5c:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d5e:	d410      	bmi.n	8000d82 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d60:	682b      	ldr	r3, [r5, #0]
 8000d62:	079f      	lsls	r7, r3, #30
 8000d64:	d45e      	bmi.n	8000e24 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d66:	682b      	ldr	r3, [r5, #0]
 8000d68:	0719      	lsls	r1, r3, #28
 8000d6a:	f100 8095 	bmi.w	8000e98 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d6e:	682b      	ldr	r3, [r5, #0]
 8000d70:	075a      	lsls	r2, r3, #29
 8000d72:	f100 80bf 	bmi.w	8000ef4 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000d76:	69ea      	ldr	r2, [r5, #28]
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 812d 	bne.w	8000fd8 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000d7e:	2000      	movs	r0, #0
 8000d80:	e014      	b.n	8000dac <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d82:	4c90      	ldr	r4, [pc, #576]	; (8000fc4 <HAL_RCC_OscConfig+0x270>)
 8000d84:	6863      	ldr	r3, [r4, #4]
 8000d86:	f003 030c 	and.w	r3, r3, #12
 8000d8a:	2b04      	cmp	r3, #4
 8000d8c:	d007      	beq.n	8000d9e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d8e:	6863      	ldr	r3, [r4, #4]
 8000d90:	f003 030c 	and.w	r3, r3, #12
 8000d94:	2b08      	cmp	r3, #8
 8000d96:	d10c      	bne.n	8000db2 <HAL_RCC_OscConfig+0x5e>
 8000d98:	6863      	ldr	r3, [r4, #4]
 8000d9a:	03de      	lsls	r6, r3, #15
 8000d9c:	d509      	bpl.n	8000db2 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d9e:	6823      	ldr	r3, [r4, #0]
 8000da0:	039c      	lsls	r4, r3, #14
 8000da2:	d5dd      	bpl.n	8000d60 <HAL_RCC_OscConfig+0xc>
 8000da4:	686b      	ldr	r3, [r5, #4]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d1da      	bne.n	8000d60 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000daa:	2001      	movs	r0, #1
}
 8000dac:	b002      	add	sp, #8
 8000dae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000db2:	686b      	ldr	r3, [r5, #4]
 8000db4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000db8:	d110      	bne.n	8000ddc <HAL_RCC_OscConfig+0x88>
 8000dba:	6823      	ldr	r3, [r4, #0]
 8000dbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dc0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000dc2:	f7ff fe61 	bl	8000a88 <HAL_GetTick>
 8000dc6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dc8:	6823      	ldr	r3, [r4, #0]
 8000dca:	0398      	lsls	r0, r3, #14
 8000dcc:	d4c8      	bmi.n	8000d60 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000dce:	f7ff fe5b 	bl	8000a88 <HAL_GetTick>
 8000dd2:	1b80      	subs	r0, r0, r6
 8000dd4:	2864      	cmp	r0, #100	; 0x64
 8000dd6:	d9f7      	bls.n	8000dc8 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000dd8:	2003      	movs	r0, #3
 8000dda:	e7e7      	b.n	8000dac <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ddc:	b99b      	cbnz	r3, 8000e06 <HAL_RCC_OscConfig+0xb2>
 8000dde:	6823      	ldr	r3, [r4, #0]
 8000de0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000de4:	6023      	str	r3, [r4, #0]
 8000de6:	6823      	ldr	r3, [r4, #0]
 8000de8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dec:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000dee:	f7ff fe4b 	bl	8000a88 <HAL_GetTick>
 8000df2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000df4:	6823      	ldr	r3, [r4, #0]
 8000df6:	0399      	lsls	r1, r3, #14
 8000df8:	d5b2      	bpl.n	8000d60 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000dfa:	f7ff fe45 	bl	8000a88 <HAL_GetTick>
 8000dfe:	1b80      	subs	r0, r0, r6
 8000e00:	2864      	cmp	r0, #100	; 0x64
 8000e02:	d9f7      	bls.n	8000df4 <HAL_RCC_OscConfig+0xa0>
 8000e04:	e7e8      	b.n	8000dd8 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e06:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e0a:	6823      	ldr	r3, [r4, #0]
 8000e0c:	d103      	bne.n	8000e16 <HAL_RCC_OscConfig+0xc2>
 8000e0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e12:	6023      	str	r3, [r4, #0]
 8000e14:	e7d1      	b.n	8000dba <HAL_RCC_OscConfig+0x66>
 8000e16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e1a:	6023      	str	r3, [r4, #0]
 8000e1c:	6823      	ldr	r3, [r4, #0]
 8000e1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e22:	e7cd      	b.n	8000dc0 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000e24:	4c67      	ldr	r4, [pc, #412]	; (8000fc4 <HAL_RCC_OscConfig+0x270>)
 8000e26:	6863      	ldr	r3, [r4, #4]
 8000e28:	f013 0f0c 	tst.w	r3, #12
 8000e2c:	d007      	beq.n	8000e3e <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e2e:	6863      	ldr	r3, [r4, #4]
 8000e30:	f003 030c 	and.w	r3, r3, #12
 8000e34:	2b08      	cmp	r3, #8
 8000e36:	d110      	bne.n	8000e5a <HAL_RCC_OscConfig+0x106>
 8000e38:	6863      	ldr	r3, [r4, #4]
 8000e3a:	03da      	lsls	r2, r3, #15
 8000e3c:	d40d      	bmi.n	8000e5a <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e3e:	6823      	ldr	r3, [r4, #0]
 8000e40:	079b      	lsls	r3, r3, #30
 8000e42:	d502      	bpl.n	8000e4a <HAL_RCC_OscConfig+0xf6>
 8000e44:	692b      	ldr	r3, [r5, #16]
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d1af      	bne.n	8000daa <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e4a:	6823      	ldr	r3, [r4, #0]
 8000e4c:	696a      	ldr	r2, [r5, #20]
 8000e4e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000e52:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000e56:	6023      	str	r3, [r4, #0]
 8000e58:	e785      	b.n	8000d66 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e5a:	692a      	ldr	r2, [r5, #16]
 8000e5c:	4b5a      	ldr	r3, [pc, #360]	; (8000fc8 <HAL_RCC_OscConfig+0x274>)
 8000e5e:	b16a      	cbz	r2, 8000e7c <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8000e60:	2201      	movs	r2, #1
 8000e62:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000e64:	f7ff fe10 	bl	8000a88 <HAL_GetTick>
 8000e68:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e6a:	6823      	ldr	r3, [r4, #0]
 8000e6c:	079f      	lsls	r7, r3, #30
 8000e6e:	d4ec      	bmi.n	8000e4a <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e70:	f7ff fe0a 	bl	8000a88 <HAL_GetTick>
 8000e74:	1b80      	subs	r0, r0, r6
 8000e76:	2802      	cmp	r0, #2
 8000e78:	d9f7      	bls.n	8000e6a <HAL_RCC_OscConfig+0x116>
 8000e7a:	e7ad      	b.n	8000dd8 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000e7c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000e7e:	f7ff fe03 	bl	8000a88 <HAL_GetTick>
 8000e82:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e84:	6823      	ldr	r3, [r4, #0]
 8000e86:	0798      	lsls	r0, r3, #30
 8000e88:	f57f af6d 	bpl.w	8000d66 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e8c:	f7ff fdfc 	bl	8000a88 <HAL_GetTick>
 8000e90:	1b80      	subs	r0, r0, r6
 8000e92:	2802      	cmp	r0, #2
 8000e94:	d9f6      	bls.n	8000e84 <HAL_RCC_OscConfig+0x130>
 8000e96:	e79f      	b.n	8000dd8 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e98:	69aa      	ldr	r2, [r5, #24]
 8000e9a:	4c4a      	ldr	r4, [pc, #296]	; (8000fc4 <HAL_RCC_OscConfig+0x270>)
 8000e9c:	4b4b      	ldr	r3, [pc, #300]	; (8000fcc <HAL_RCC_OscConfig+0x278>)
 8000e9e:	b1da      	cbz	r2, 8000ed8 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000ea4:	f7ff fdf0 	bl	8000a88 <HAL_GetTick>
 8000ea8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000eaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000eac:	079b      	lsls	r3, r3, #30
 8000eae:	d50d      	bpl.n	8000ecc <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000eb0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000eb4:	4b46      	ldr	r3, [pc, #280]	; (8000fd0 <HAL_RCC_OscConfig+0x27c>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	fbb3 f3f2 	udiv	r3, r3, r2
 8000ebc:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000ebe:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000ec0:	9b01      	ldr	r3, [sp, #4]
 8000ec2:	1e5a      	subs	r2, r3, #1
 8000ec4:	9201      	str	r2, [sp, #4]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d1f9      	bne.n	8000ebe <HAL_RCC_OscConfig+0x16a>
 8000eca:	e750      	b.n	8000d6e <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ecc:	f7ff fddc 	bl	8000a88 <HAL_GetTick>
 8000ed0:	1b80      	subs	r0, r0, r6
 8000ed2:	2802      	cmp	r0, #2
 8000ed4:	d9e9      	bls.n	8000eaa <HAL_RCC_OscConfig+0x156>
 8000ed6:	e77f      	b.n	8000dd8 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000ed8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000eda:	f7ff fdd5 	bl	8000a88 <HAL_GetTick>
 8000ede:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ee0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000ee2:	079f      	lsls	r7, r3, #30
 8000ee4:	f57f af43 	bpl.w	8000d6e <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ee8:	f7ff fdce 	bl	8000a88 <HAL_GetTick>
 8000eec:	1b80      	subs	r0, r0, r6
 8000eee:	2802      	cmp	r0, #2
 8000ef0:	d9f6      	bls.n	8000ee0 <HAL_RCC_OscConfig+0x18c>
 8000ef2:	e771      	b.n	8000dd8 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ef4:	4c33      	ldr	r4, [pc, #204]	; (8000fc4 <HAL_RCC_OscConfig+0x270>)
 8000ef6:	69e3      	ldr	r3, [r4, #28]
 8000ef8:	00d8      	lsls	r0, r3, #3
 8000efa:	d424      	bmi.n	8000f46 <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8000efc:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000efe:	69e3      	ldr	r3, [r4, #28]
 8000f00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f04:	61e3      	str	r3, [r4, #28]
 8000f06:	69e3      	ldr	r3, [r4, #28]
 8000f08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f0c:	9300      	str	r3, [sp, #0]
 8000f0e:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f10:	4e30      	ldr	r6, [pc, #192]	; (8000fd4 <HAL_RCC_OscConfig+0x280>)
 8000f12:	6833      	ldr	r3, [r6, #0]
 8000f14:	05d9      	lsls	r1, r3, #23
 8000f16:	d518      	bpl.n	8000f4a <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f18:	68eb      	ldr	r3, [r5, #12]
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d126      	bne.n	8000f6c <HAL_RCC_OscConfig+0x218>
 8000f1e:	6a23      	ldr	r3, [r4, #32]
 8000f20:	f043 0301 	orr.w	r3, r3, #1
 8000f24:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000f26:	f7ff fdaf 	bl	8000a88 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f2a:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000f2e:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f30:	6a23      	ldr	r3, [r4, #32]
 8000f32:	079b      	lsls	r3, r3, #30
 8000f34:	d53f      	bpl.n	8000fb6 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8000f36:	2f00      	cmp	r7, #0
 8000f38:	f43f af1d 	beq.w	8000d76 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f3c:	69e3      	ldr	r3, [r4, #28]
 8000f3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f42:	61e3      	str	r3, [r4, #28]
 8000f44:	e717      	b.n	8000d76 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8000f46:	2700      	movs	r7, #0
 8000f48:	e7e2      	b.n	8000f10 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f4a:	6833      	ldr	r3, [r6, #0]
 8000f4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f50:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000f52:	f7ff fd99 	bl	8000a88 <HAL_GetTick>
 8000f56:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f58:	6833      	ldr	r3, [r6, #0]
 8000f5a:	05da      	lsls	r2, r3, #23
 8000f5c:	d4dc      	bmi.n	8000f18 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f5e:	f7ff fd93 	bl	8000a88 <HAL_GetTick>
 8000f62:	eba0 0008 	sub.w	r0, r0, r8
 8000f66:	2864      	cmp	r0, #100	; 0x64
 8000f68:	d9f6      	bls.n	8000f58 <HAL_RCC_OscConfig+0x204>
 8000f6a:	e735      	b.n	8000dd8 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f6c:	b9ab      	cbnz	r3, 8000f9a <HAL_RCC_OscConfig+0x246>
 8000f6e:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f70:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f74:	f023 0301 	bic.w	r3, r3, #1
 8000f78:	6223      	str	r3, [r4, #32]
 8000f7a:	6a23      	ldr	r3, [r4, #32]
 8000f7c:	f023 0304 	bic.w	r3, r3, #4
 8000f80:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000f82:	f7ff fd81 	bl	8000a88 <HAL_GetTick>
 8000f86:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f88:	6a23      	ldr	r3, [r4, #32]
 8000f8a:	0798      	lsls	r0, r3, #30
 8000f8c:	d5d3      	bpl.n	8000f36 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f8e:	f7ff fd7b 	bl	8000a88 <HAL_GetTick>
 8000f92:	1b80      	subs	r0, r0, r6
 8000f94:	4540      	cmp	r0, r8
 8000f96:	d9f7      	bls.n	8000f88 <HAL_RCC_OscConfig+0x234>
 8000f98:	e71e      	b.n	8000dd8 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f9a:	2b05      	cmp	r3, #5
 8000f9c:	6a23      	ldr	r3, [r4, #32]
 8000f9e:	d103      	bne.n	8000fa8 <HAL_RCC_OscConfig+0x254>
 8000fa0:	f043 0304 	orr.w	r3, r3, #4
 8000fa4:	6223      	str	r3, [r4, #32]
 8000fa6:	e7ba      	b.n	8000f1e <HAL_RCC_OscConfig+0x1ca>
 8000fa8:	f023 0301 	bic.w	r3, r3, #1
 8000fac:	6223      	str	r3, [r4, #32]
 8000fae:	6a23      	ldr	r3, [r4, #32]
 8000fb0:	f023 0304 	bic.w	r3, r3, #4
 8000fb4:	e7b6      	b.n	8000f24 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fb6:	f7ff fd67 	bl	8000a88 <HAL_GetTick>
 8000fba:	eba0 0008 	sub.w	r0, r0, r8
 8000fbe:	42b0      	cmp	r0, r6
 8000fc0:	d9b6      	bls.n	8000f30 <HAL_RCC_OscConfig+0x1dc>
 8000fc2:	e709      	b.n	8000dd8 <HAL_RCC_OscConfig+0x84>
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	42420000 	.word	0x42420000
 8000fcc:	42420480 	.word	0x42420480
 8000fd0:	20000008 	.word	0x20000008
 8000fd4:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000fd8:	4c22      	ldr	r4, [pc, #136]	; (8001064 <HAL_RCC_OscConfig+0x310>)
 8000fda:	6863      	ldr	r3, [r4, #4]
 8000fdc:	f003 030c 	and.w	r3, r3, #12
 8000fe0:	2b08      	cmp	r3, #8
 8000fe2:	f43f aee2 	beq.w	8000daa <HAL_RCC_OscConfig+0x56>
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	4e1f      	ldr	r6, [pc, #124]	; (8001068 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fea:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000fec:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fee:	d12b      	bne.n	8001048 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8000ff0:	f7ff fd4a 	bl	8000a88 <HAL_GetTick>
 8000ff4:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ff6:	6823      	ldr	r3, [r4, #0]
 8000ff8:	0199      	lsls	r1, r3, #6
 8000ffa:	d41f      	bmi.n	800103c <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000ffc:	6a2b      	ldr	r3, [r5, #32]
 8000ffe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001002:	d105      	bne.n	8001010 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001004:	6862      	ldr	r2, [r4, #4]
 8001006:	68a9      	ldr	r1, [r5, #8]
 8001008:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800100c:	430a      	orrs	r2, r1
 800100e:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001010:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001012:	6862      	ldr	r2, [r4, #4]
 8001014:	430b      	orrs	r3, r1
 8001016:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800101a:	4313      	orrs	r3, r2
 800101c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800101e:	2301      	movs	r3, #1
 8001020:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001022:	f7ff fd31 	bl	8000a88 <HAL_GetTick>
 8001026:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001028:	6823      	ldr	r3, [r4, #0]
 800102a:	019a      	lsls	r2, r3, #6
 800102c:	f53f aea7 	bmi.w	8000d7e <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001030:	f7ff fd2a 	bl	8000a88 <HAL_GetTick>
 8001034:	1b40      	subs	r0, r0, r5
 8001036:	2802      	cmp	r0, #2
 8001038:	d9f6      	bls.n	8001028 <HAL_RCC_OscConfig+0x2d4>
 800103a:	e6cd      	b.n	8000dd8 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800103c:	f7ff fd24 	bl	8000a88 <HAL_GetTick>
 8001040:	1bc0      	subs	r0, r0, r7
 8001042:	2802      	cmp	r0, #2
 8001044:	d9d7      	bls.n	8000ff6 <HAL_RCC_OscConfig+0x2a2>
 8001046:	e6c7      	b.n	8000dd8 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8001048:	f7ff fd1e 	bl	8000a88 <HAL_GetTick>
 800104c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800104e:	6823      	ldr	r3, [r4, #0]
 8001050:	019b      	lsls	r3, r3, #6
 8001052:	f57f ae94 	bpl.w	8000d7e <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001056:	f7ff fd17 	bl	8000a88 <HAL_GetTick>
 800105a:	1b40      	subs	r0, r0, r5
 800105c:	2802      	cmp	r0, #2
 800105e:	d9f6      	bls.n	800104e <HAL_RCC_OscConfig+0x2fa>
 8001060:	e6ba      	b.n	8000dd8 <HAL_RCC_OscConfig+0x84>
 8001062:	bf00      	nop
 8001064:	40021000 	.word	0x40021000
 8001068:	42420060 	.word	0x42420060

0800106c <HAL_RCC_GetSysClockFreq>:
{
 800106c:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800106e:	4b19      	ldr	r3, [pc, #100]	; (80010d4 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8001070:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001072:	ac02      	add	r4, sp, #8
 8001074:	f103 0510 	add.w	r5, r3, #16
 8001078:	4622      	mov	r2, r4
 800107a:	6818      	ldr	r0, [r3, #0]
 800107c:	6859      	ldr	r1, [r3, #4]
 800107e:	3308      	adds	r3, #8
 8001080:	c203      	stmia	r2!, {r0, r1}
 8001082:	42ab      	cmp	r3, r5
 8001084:	4614      	mov	r4, r2
 8001086:	d1f7      	bne.n	8001078 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001088:	2301      	movs	r3, #1
 800108a:	f88d 3004 	strb.w	r3, [sp, #4]
 800108e:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8001090:	4911      	ldr	r1, [pc, #68]	; (80010d8 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001092:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8001096:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001098:	f003 020c 	and.w	r2, r3, #12
 800109c:	2a08      	cmp	r2, #8
 800109e:	d117      	bne.n	80010d0 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80010a0:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80010a4:	a806      	add	r0, sp, #24
 80010a6:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80010a8:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80010aa:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80010ae:	d50c      	bpl.n	80010ca <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80010b0:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80010b2:	480a      	ldr	r0, [pc, #40]	; (80010dc <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80010b4:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80010b8:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80010ba:	aa06      	add	r2, sp, #24
 80010bc:	4413      	add	r3, r2
 80010be:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80010c2:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80010c6:	b007      	add	sp, #28
 80010c8:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80010ca:	4805      	ldr	r0, [pc, #20]	; (80010e0 <HAL_RCC_GetSysClockFreq+0x74>)
 80010cc:	4350      	muls	r0, r2
 80010ce:	e7fa      	b.n	80010c6 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 80010d0:	4802      	ldr	r0, [pc, #8]	; (80010dc <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 80010d2:	e7f8      	b.n	80010c6 <HAL_RCC_GetSysClockFreq+0x5a>
 80010d4:	0800272c 	.word	0x0800272c
 80010d8:	40021000 	.word	0x40021000
 80010dc:	007a1200 	.word	0x007a1200
 80010e0:	003d0900 	.word	0x003d0900

080010e4 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80010e4:	4a54      	ldr	r2, [pc, #336]	; (8001238 <HAL_RCC_ClockConfig+0x154>)
{
 80010e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80010ea:	6813      	ldr	r3, [r2, #0]
{
 80010ec:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80010ee:	f003 0307 	and.w	r3, r3, #7
 80010f2:	428b      	cmp	r3, r1
{
 80010f4:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80010f6:	d32a      	bcc.n	800114e <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010f8:	6829      	ldr	r1, [r5, #0]
 80010fa:	078c      	lsls	r4, r1, #30
 80010fc:	d434      	bmi.n	8001168 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010fe:	07ca      	lsls	r2, r1, #31
 8001100:	d447      	bmi.n	8001192 <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001102:	4a4d      	ldr	r2, [pc, #308]	; (8001238 <HAL_RCC_ClockConfig+0x154>)
 8001104:	6813      	ldr	r3, [r2, #0]
 8001106:	f003 0307 	and.w	r3, r3, #7
 800110a:	429e      	cmp	r6, r3
 800110c:	f0c0 8082 	bcc.w	8001214 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001110:	682a      	ldr	r2, [r5, #0]
 8001112:	4c4a      	ldr	r4, [pc, #296]	; (800123c <HAL_RCC_ClockConfig+0x158>)
 8001114:	f012 0f04 	tst.w	r2, #4
 8001118:	f040 8087 	bne.w	800122a <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800111c:	0713      	lsls	r3, r2, #28
 800111e:	d506      	bpl.n	800112e <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001120:	6863      	ldr	r3, [r4, #4]
 8001122:	692a      	ldr	r2, [r5, #16]
 8001124:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001128:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800112c:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800112e:	f7ff ff9d 	bl	800106c <HAL_RCC_GetSysClockFreq>
 8001132:	6863      	ldr	r3, [r4, #4]
 8001134:	4a42      	ldr	r2, [pc, #264]	; (8001240 <HAL_RCC_ClockConfig+0x15c>)
 8001136:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800113a:	5cd3      	ldrb	r3, [r2, r3]
 800113c:	40d8      	lsrs	r0, r3
 800113e:	4b41      	ldr	r3, [pc, #260]	; (8001244 <HAL_RCC_ClockConfig+0x160>)
 8001140:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001142:	2000      	movs	r0, #0
 8001144:	f7ff fc5e 	bl	8000a04 <HAL_InitTick>
  return HAL_OK;
 8001148:	2000      	movs	r0, #0
}
 800114a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800114e:	6813      	ldr	r3, [r2, #0]
 8001150:	f023 0307 	bic.w	r3, r3, #7
 8001154:	430b      	orrs	r3, r1
 8001156:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001158:	6813      	ldr	r3, [r2, #0]
 800115a:	f003 0307 	and.w	r3, r3, #7
 800115e:	4299      	cmp	r1, r3
 8001160:	d0ca      	beq.n	80010f8 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8001162:	2001      	movs	r0, #1
 8001164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001168:	4b34      	ldr	r3, [pc, #208]	; (800123c <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800116a:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800116e:	bf1e      	ittt	ne
 8001170:	685a      	ldrne	r2, [r3, #4]
 8001172:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8001176:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001178:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800117a:	bf42      	ittt	mi
 800117c:	685a      	ldrmi	r2, [r3, #4]
 800117e:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8001182:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001184:	685a      	ldr	r2, [r3, #4]
 8001186:	68a8      	ldr	r0, [r5, #8]
 8001188:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800118c:	4302      	orrs	r2, r0
 800118e:	605a      	str	r2, [r3, #4]
 8001190:	e7b5      	b.n	80010fe <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001192:	686a      	ldr	r2, [r5, #4]
 8001194:	4c29      	ldr	r4, [pc, #164]	; (800123c <HAL_RCC_ClockConfig+0x158>)
 8001196:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001198:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800119a:	d11c      	bne.n	80011d6 <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800119c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011a0:	d0df      	beq.n	8001162 <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011a2:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011a4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011a8:	f023 0303 	bic.w	r3, r3, #3
 80011ac:	4313      	orrs	r3, r2
 80011ae:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80011b0:	f7ff fc6a 	bl	8000a88 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011b4:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 80011b6:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d114      	bne.n	80011e6 <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80011bc:	6863      	ldr	r3, [r4, #4]
 80011be:	f003 030c 	and.w	r3, r3, #12
 80011c2:	2b04      	cmp	r3, #4
 80011c4:	d09d      	beq.n	8001102 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011c6:	f7ff fc5f 	bl	8000a88 <HAL_GetTick>
 80011ca:	1bc0      	subs	r0, r0, r7
 80011cc:	4540      	cmp	r0, r8
 80011ce:	d9f5      	bls.n	80011bc <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 80011d0:	2003      	movs	r0, #3
 80011d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011d6:	2a02      	cmp	r2, #2
 80011d8:	d102      	bne.n	80011e0 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011da:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80011de:	e7df      	b.n	80011a0 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011e0:	f013 0f02 	tst.w	r3, #2
 80011e4:	e7dc      	b.n	80011a0 <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011e6:	2b02      	cmp	r3, #2
 80011e8:	d10f      	bne.n	800120a <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011ea:	6863      	ldr	r3, [r4, #4]
 80011ec:	f003 030c 	and.w	r3, r3, #12
 80011f0:	2b08      	cmp	r3, #8
 80011f2:	d086      	beq.n	8001102 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011f4:	f7ff fc48 	bl	8000a88 <HAL_GetTick>
 80011f8:	1bc0      	subs	r0, r0, r7
 80011fa:	4540      	cmp	r0, r8
 80011fc:	d9f5      	bls.n	80011ea <HAL_RCC_ClockConfig+0x106>
 80011fe:	e7e7      	b.n	80011d0 <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001200:	f7ff fc42 	bl	8000a88 <HAL_GetTick>
 8001204:	1bc0      	subs	r0, r0, r7
 8001206:	4540      	cmp	r0, r8
 8001208:	d8e2      	bhi.n	80011d0 <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800120a:	6863      	ldr	r3, [r4, #4]
 800120c:	f013 0f0c 	tst.w	r3, #12
 8001210:	d1f6      	bne.n	8001200 <HAL_RCC_ClockConfig+0x11c>
 8001212:	e776      	b.n	8001102 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001214:	6813      	ldr	r3, [r2, #0]
 8001216:	f023 0307 	bic.w	r3, r3, #7
 800121a:	4333      	orrs	r3, r6
 800121c:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800121e:	6813      	ldr	r3, [r2, #0]
 8001220:	f003 0307 	and.w	r3, r3, #7
 8001224:	429e      	cmp	r6, r3
 8001226:	d19c      	bne.n	8001162 <HAL_RCC_ClockConfig+0x7e>
 8001228:	e772      	b.n	8001110 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800122a:	6863      	ldr	r3, [r4, #4]
 800122c:	68e9      	ldr	r1, [r5, #12]
 800122e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001232:	430b      	orrs	r3, r1
 8001234:	6063      	str	r3, [r4, #4]
 8001236:	e771      	b.n	800111c <HAL_RCC_ClockConfig+0x38>
 8001238:	40022000 	.word	0x40022000
 800123c:	40021000 	.word	0x40021000
 8001240:	08002785 	.word	0x08002785
 8001244:	20000008 	.word	0x20000008

08001248 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001248:	4b04      	ldr	r3, [pc, #16]	; (800125c <HAL_RCC_GetPCLK1Freq+0x14>)
 800124a:	4a05      	ldr	r2, [pc, #20]	; (8001260 <HAL_RCC_GetPCLK1Freq+0x18>)
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001252:	5cd3      	ldrb	r3, [r2, r3]
 8001254:	4a03      	ldr	r2, [pc, #12]	; (8001264 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001256:	6810      	ldr	r0, [r2, #0]
}    
 8001258:	40d8      	lsrs	r0, r3
 800125a:	4770      	bx	lr
 800125c:	40021000 	.word	0x40021000
 8001260:	08002795 	.word	0x08002795
 8001264:	20000008 	.word	0x20000008

08001268 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001268:	4b04      	ldr	r3, [pc, #16]	; (800127c <HAL_RCC_GetPCLK2Freq+0x14>)
 800126a:	4a05      	ldr	r2, [pc, #20]	; (8001280 <HAL_RCC_GetPCLK2Freq+0x18>)
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001272:	5cd3      	ldrb	r3, [r2, r3]
 8001274:	4a03      	ldr	r2, [pc, #12]	; (8001284 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001276:	6810      	ldr	r0, [r2, #0]
} 
 8001278:	40d8      	lsrs	r0, r3
 800127a:	4770      	bx	lr
 800127c:	40021000 	.word	0x40021000
 8001280:	08002795 	.word	0x08002795
 8001284:	20000008 	.word	0x20000008

08001288 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001288:	6803      	ldr	r3, [r0, #0]
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);

  /* Return function status */
  return HAL_OK;
}
 800128a:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800128c:	68da      	ldr	r2, [r3, #12]
 800128e:	f042 0201 	orr.w	r2, r2, #1
 8001292:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	f042 0201 	orr.w	r2, r2, #1
 800129a:	601a      	str	r2, [r3, #0]
}
 800129c:	4770      	bx	lr

0800129e <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
  uint32_t tmpsmcr = 0U;

  /* Process Locked */
  __HAL_LOCK(htim);
 800129e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80012a2:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	f04f 0302 	mov.w	r3, #2
 80012aa:	d01c      	beq.n	80012e6 <HAL_TIM_ConfigClockSource+0x48>
 80012ac:	2201      	movs	r2, #1

  htim->State = HAL_TIM_STATE_BUSY;
 80012ae:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80012b2:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 80012b4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80012b8:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80012ba:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80012be:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80012c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80012c4:	680a      	ldr	r2, [r1, #0]
 80012c6:	2a40      	cmp	r2, #64	; 0x40
 80012c8:	d079      	beq.n	80013be <HAL_TIM_ConfigClockSource+0x120>
 80012ca:	d819      	bhi.n	8001300 <HAL_TIM_ConfigClockSource+0x62>
 80012cc:	2a10      	cmp	r2, #16
 80012ce:	f000 8093 	beq.w	80013f8 <HAL_TIM_ConfigClockSource+0x15a>
 80012d2:	d80a      	bhi.n	80012ea <HAL_TIM_ConfigClockSource+0x4c>
 80012d4:	2a00      	cmp	r2, #0
 80012d6:	f000 8089 	beq.w	80013ec <HAL_TIM_ConfigClockSource+0x14e>
    break;

  default:
    break;
  }
  htim->State = HAL_TIM_STATE_READY;
 80012da:	2301      	movs	r3, #1
 80012dc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80012e0:	2300      	movs	r3, #0
 80012e2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80012e6:	4618      	mov	r0, r3

  return HAL_OK;
}
 80012e8:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80012ea:	2a20      	cmp	r2, #32
 80012ec:	f000 808a 	beq.w	8001404 <HAL_TIM_ConfigClockSource+0x166>
 80012f0:	2a30      	cmp	r2, #48	; 0x30
 80012f2:	d1f2      	bne.n	80012da <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80012f4:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80012f6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80012fa:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 80012fe:	e036      	b.n	800136e <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8001300:	2a70      	cmp	r2, #112	; 0x70
 8001302:	d036      	beq.n	8001372 <HAL_TIM_ConfigClockSource+0xd4>
 8001304:	d81b      	bhi.n	800133e <HAL_TIM_ConfigClockSource+0xa0>
 8001306:	2a50      	cmp	r2, #80	; 0x50
 8001308:	d042      	beq.n	8001390 <HAL_TIM_ConfigClockSource+0xf2>
 800130a:	2a60      	cmp	r2, #96	; 0x60
 800130c:	d1e5      	bne.n	80012da <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800130e:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001310:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001312:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001316:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001318:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800131a:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800131c:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800131e:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001322:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001326:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800132a:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800132e:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8001330:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001332:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001334:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001338:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 800133c:	e017      	b.n	800136e <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 800133e:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001342:	d011      	beq.n	8001368 <HAL_TIM_ConfigClockSource+0xca>
 8001344:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001348:	d1c7      	bne.n	80012da <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800134a:	688a      	ldr	r2, [r1, #8]
 800134c:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800134e:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001350:	68c9      	ldr	r1, [r1, #12]
 8001352:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001354:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001358:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800135c:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800135e:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001360:	689a      	ldr	r2, [r3, #8]
 8001362:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001366:	e002      	b.n	800136e <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001368:	689a      	ldr	r2, [r3, #8]
 800136a:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	e7b3      	b.n	80012da <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001372:	688a      	ldr	r2, [r1, #8]
 8001374:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8001376:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001378:	68c9      	ldr	r1, [r1, #12]
 800137a:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800137c:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001380:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001384:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8001386:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8001388:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800138a:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 800138e:	e7ee      	b.n	800136e <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001390:	684c      	ldr	r4, [r1, #4]
 8001392:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001394:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001396:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001398:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800139c:	f025 0501 	bic.w	r5, r5, #1
 80013a0:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80013a2:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 80013a4:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80013a6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80013aa:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80013ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80013b0:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80013b2:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80013b4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80013b8:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 80013bc:	e7d7      	b.n	800136e <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80013be:	684c      	ldr	r4, [r1, #4]
 80013c0:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80013c2:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80013c4:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80013c6:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80013ca:	f025 0501 	bic.w	r5, r5, #1
 80013ce:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80013d0:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 80013d2:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80013d4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80013d8:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80013dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80013de:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80013e0:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80013e2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80013e6:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 80013ea:	e7c0      	b.n	800136e <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80013ec:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80013ee:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80013f2:	f042 0207 	orr.w	r2, r2, #7
 80013f6:	e7ba      	b.n	800136e <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80013f8:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80013fa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80013fe:	f042 0217 	orr.w	r2, r2, #23
 8001402:	e7b4      	b.n	800136e <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001404:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001406:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800140a:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 800140e:	e7ae      	b.n	800136e <HAL_TIM_ConfigClockSource+0xd0>

08001410 <HAL_TIM_OC_DelayElapsedCallback>:
 8001410:	4770      	bx	lr

08001412 <HAL_TIM_IC_CaptureCallback>:
 8001412:	4770      	bx	lr

08001414 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001414:	4770      	bx	lr

08001416 <HAL_TIM_TriggerCallback>:
 8001416:	4770      	bx	lr

08001418 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001418:	6803      	ldr	r3, [r0, #0]
{
 800141a:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800141c:	691a      	ldr	r2, [r3, #16]
{
 800141e:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001420:	0791      	lsls	r1, r2, #30
 8001422:	d50e      	bpl.n	8001442 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001424:	68da      	ldr	r2, [r3, #12]
 8001426:	0792      	lsls	r2, r2, #30
 8001428:	d50b      	bpl.n	8001442 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800142a:	f06f 0202 	mvn.w	r2, #2
 800142e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001430:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001432:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001434:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001436:	079b      	lsls	r3, r3, #30
 8001438:	d077      	beq.n	800152a <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 800143a:	f7ff ffea 	bl	8001412 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800143e:	2300      	movs	r3, #0
 8001440:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001442:	6823      	ldr	r3, [r4, #0]
 8001444:	691a      	ldr	r2, [r3, #16]
 8001446:	0750      	lsls	r0, r2, #29
 8001448:	d510      	bpl.n	800146c <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800144a:	68da      	ldr	r2, [r3, #12]
 800144c:	0751      	lsls	r1, r2, #29
 800144e:	d50d      	bpl.n	800146c <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001450:	f06f 0204 	mvn.w	r2, #4
 8001454:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001456:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001458:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800145a:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800145c:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8001460:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001462:	d068      	beq.n	8001536 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8001464:	f7ff ffd5 	bl	8001412 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001468:	2300      	movs	r3, #0
 800146a:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800146c:	6823      	ldr	r3, [r4, #0]
 800146e:	691a      	ldr	r2, [r3, #16]
 8001470:	0712      	lsls	r2, r2, #28
 8001472:	d50f      	bpl.n	8001494 <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001474:	68da      	ldr	r2, [r3, #12]
 8001476:	0710      	lsls	r0, r2, #28
 8001478:	d50c      	bpl.n	8001494 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800147a:	f06f 0208 	mvn.w	r2, #8
 800147e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001480:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001482:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001484:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001486:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8001488:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800148a:	d05a      	beq.n	8001542 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800148c:	f7ff ffc1 	bl	8001412 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001490:	2300      	movs	r3, #0
 8001492:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001494:	6823      	ldr	r3, [r4, #0]
 8001496:	691a      	ldr	r2, [r3, #16]
 8001498:	06d2      	lsls	r2, r2, #27
 800149a:	d510      	bpl.n	80014be <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800149c:	68da      	ldr	r2, [r3, #12]
 800149e:	06d0      	lsls	r0, r2, #27
 80014a0:	d50d      	bpl.n	80014be <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80014a2:	f06f 0210 	mvn.w	r2, #16
 80014a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80014a8:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80014aa:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80014ac:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80014ae:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80014b2:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80014b4:	d04b      	beq.n	800154e <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 80014b6:	f7ff ffac 	bl	8001412 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80014ba:	2300      	movs	r3, #0
 80014bc:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80014be:	6823      	ldr	r3, [r4, #0]
 80014c0:	691a      	ldr	r2, [r3, #16]
 80014c2:	07d1      	lsls	r1, r2, #31
 80014c4:	d508      	bpl.n	80014d8 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80014c6:	68da      	ldr	r2, [r3, #12]
 80014c8:	07d2      	lsls	r2, r2, #31
 80014ca:	d505      	bpl.n	80014d8 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80014cc:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 80014d0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80014d2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80014d4:	f000 fa08 	bl	80018e8 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80014d8:	6823      	ldr	r3, [r4, #0]
 80014da:	691a      	ldr	r2, [r3, #16]
 80014dc:	0610      	lsls	r0, r2, #24
 80014de:	d508      	bpl.n	80014f2 <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80014e0:	68da      	ldr	r2, [r3, #12]
 80014e2:	0611      	lsls	r1, r2, #24
 80014e4:	d505      	bpl.n	80014f2 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80014e6:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 80014ea:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80014ec:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80014ee:	f000 f8aa 	bl	8001646 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80014f2:	6823      	ldr	r3, [r4, #0]
 80014f4:	691a      	ldr	r2, [r3, #16]
 80014f6:	0652      	lsls	r2, r2, #25
 80014f8:	d508      	bpl.n	800150c <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80014fa:	68da      	ldr	r2, [r3, #12]
 80014fc:	0650      	lsls	r0, r2, #25
 80014fe:	d505      	bpl.n	800150c <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001500:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8001504:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001506:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001508:	f7ff ff85 	bl	8001416 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800150c:	6823      	ldr	r3, [r4, #0]
 800150e:	691a      	ldr	r2, [r3, #16]
 8001510:	0691      	lsls	r1, r2, #26
 8001512:	d522      	bpl.n	800155a <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001514:	68da      	ldr	r2, [r3, #12]
 8001516:	0692      	lsls	r2, r2, #26
 8001518:	d51f      	bpl.n	800155a <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800151a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 800151e:	4620      	mov	r0, r4
}
 8001520:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001524:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8001526:	f000 b88d 	b.w	8001644 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800152a:	f7ff ff71 	bl	8001410 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800152e:	4620      	mov	r0, r4
 8001530:	f7ff ff70 	bl	8001414 <HAL_TIM_PWM_PulseFinishedCallback>
 8001534:	e783      	b.n	800143e <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001536:	f7ff ff6b 	bl	8001410 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800153a:	4620      	mov	r0, r4
 800153c:	f7ff ff6a 	bl	8001414 <HAL_TIM_PWM_PulseFinishedCallback>
 8001540:	e792      	b.n	8001468 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001542:	f7ff ff65 	bl	8001410 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001546:	4620      	mov	r0, r4
 8001548:	f7ff ff64 	bl	8001414 <HAL_TIM_PWM_PulseFinishedCallback>
 800154c:	e7a0      	b.n	8001490 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800154e:	f7ff ff5f 	bl	8001410 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001552:	4620      	mov	r0, r4
 8001554:	f7ff ff5e 	bl	8001414 <HAL_TIM_PWM_PulseFinishedCallback>
 8001558:	e7af      	b.n	80014ba <HAL_TIM_IRQHandler+0xa2>
 800155a:	bd10      	pop	{r4, pc}

0800155c <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800155c:	4a1a      	ldr	r2, [pc, #104]	; (80015c8 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 800155e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001560:	4290      	cmp	r0, r2
 8001562:	d00a      	beq.n	800157a <TIM_Base_SetConfig+0x1e>
 8001564:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001568:	d007      	beq.n	800157a <TIM_Base_SetConfig+0x1e>
 800156a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800156e:	4290      	cmp	r0, r2
 8001570:	d003      	beq.n	800157a <TIM_Base_SetConfig+0x1e>
 8001572:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001576:	4290      	cmp	r0, r2
 8001578:	d115      	bne.n	80015a6 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 800157a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800157c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001580:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001582:	4a11      	ldr	r2, [pc, #68]	; (80015c8 <TIM_Base_SetConfig+0x6c>)
 8001584:	4290      	cmp	r0, r2
 8001586:	d00a      	beq.n	800159e <TIM_Base_SetConfig+0x42>
 8001588:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800158c:	d007      	beq.n	800159e <TIM_Base_SetConfig+0x42>
 800158e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001592:	4290      	cmp	r0, r2
 8001594:	d003      	beq.n	800159e <TIM_Base_SetConfig+0x42>
 8001596:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800159a:	4290      	cmp	r0, r2
 800159c:	d103      	bne.n	80015a6 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800159e:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80015a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80015a4:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 80015a6:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 80015a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 80015ac:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80015ae:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80015b0:	688b      	ldr	r3, [r1, #8]
 80015b2:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80015b4:	680b      	ldr	r3, [r1, #0]
 80015b6:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80015b8:	4b03      	ldr	r3, [pc, #12]	; (80015c8 <TIM_Base_SetConfig+0x6c>)
 80015ba:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 80015bc:	bf04      	itt	eq
 80015be:	690b      	ldreq	r3, [r1, #16]
 80015c0:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80015c2:	2301      	movs	r3, #1
 80015c4:	6143      	str	r3, [r0, #20]
 80015c6:	4770      	bx	lr
 80015c8:	40012c00 	.word	0x40012c00

080015cc <HAL_TIM_Base_Init>:
{
 80015cc:	b510      	push	{r4, lr}
  if(htim == NULL)
 80015ce:	4604      	mov	r4, r0
 80015d0:	b1a0      	cbz	r0, 80015fc <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80015d2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80015d6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80015da:	b91b      	cbnz	r3, 80015e4 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80015dc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80015e0:	f000 fb52 	bl	8001c88 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80015e4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80015e6:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 80015e8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80015ec:	1d21      	adds	r1, r4, #4
 80015ee:	f7ff ffb5 	bl	800155c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80015f2:	2301      	movs	r3, #1
  return HAL_OK;
 80015f4:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80015f6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80015fa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80015fc:	2001      	movs	r0, #1
}
 80015fe:	bd10      	pop	{r4, pc}

08001600 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8001600:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001604:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8001606:	2b01      	cmp	r3, #1
 8001608:	f04f 0302 	mov.w	r3, #2
 800160c:	d018      	beq.n	8001640 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 800160e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001612:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001614:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001616:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001618:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800161a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800161e:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001620:	685a      	ldr	r2, [r3, #4]
 8001622:	4322      	orrs	r2, r4
 8001624:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001626:	689a      	ldr	r2, [r3, #8]
 8001628:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800162c:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800162e:	689a      	ldr	r2, [r3, #8]
 8001630:	430a      	orrs	r2, r1
 8001632:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8001634:	2301      	movs	r3, #1
 8001636:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800163a:	2300      	movs	r3, #0
 800163c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001640:	4618      	mov	r0, r3

  return HAL_OK;
}
 8001642:	bd10      	pop	{r4, pc}

08001644 <HAL_TIMEx_CommutationCallback>:
 8001644:	4770      	bx	lr

08001646 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001646:	4770      	bx	lr

08001648 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800164c:	6805      	ldr	r5, [r0, #0]
 800164e:	68c2      	ldr	r2, [r0, #12]
 8001650:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001652:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001654:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001658:	4313      	orrs	r3, r2
 800165a:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800165c:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 800165e:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001660:	430b      	orrs	r3, r1
 8001662:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8001664:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8001668:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800166c:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 800166e:	4313      	orrs	r3, r2
 8001670:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001672:	696b      	ldr	r3, [r5, #20]
 8001674:	6982      	ldr	r2, [r0, #24]
 8001676:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800167a:	4313      	orrs	r3, r2
 800167c:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800167e:	4b40      	ldr	r3, [pc, #256]	; (8001780 <UART_SetConfig+0x138>)
{
 8001680:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 8001682:	429d      	cmp	r5, r3
 8001684:	f04f 0419 	mov.w	r4, #25
 8001688:	d146      	bne.n	8001718 <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800168a:	f7ff fded 	bl	8001268 <HAL_RCC_GetPCLK2Freq>
 800168e:	fb04 f300 	mul.w	r3, r4, r0
 8001692:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8001696:	f04f 0864 	mov.w	r8, #100	; 0x64
 800169a:	00b6      	lsls	r6, r6, #2
 800169c:	fbb3 f3f6 	udiv	r3, r3, r6
 80016a0:	fbb3 f3f8 	udiv	r3, r3, r8
 80016a4:	011e      	lsls	r6, r3, #4
 80016a6:	f7ff fddf 	bl	8001268 <HAL_RCC_GetPCLK2Freq>
 80016aa:	4360      	muls	r0, r4
 80016ac:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	fbb0 f7f3 	udiv	r7, r0, r3
 80016b6:	f7ff fdd7 	bl	8001268 <HAL_RCC_GetPCLK2Freq>
 80016ba:	4360      	muls	r0, r4
 80016bc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80016c6:	fbb3 f3f8 	udiv	r3, r3, r8
 80016ca:	fb08 7313 	mls	r3, r8, r3, r7
 80016ce:	011b      	lsls	r3, r3, #4
 80016d0:	3332      	adds	r3, #50	; 0x32
 80016d2:	fbb3 f3f8 	udiv	r3, r3, r8
 80016d6:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 80016da:	f7ff fdc5 	bl	8001268 <HAL_RCC_GetPCLK2Freq>
 80016de:	4360      	muls	r0, r4
 80016e0:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80016e4:	0092      	lsls	r2, r2, #2
 80016e6:	fbb0 faf2 	udiv	sl, r0, r2
 80016ea:	f7ff fdbd 	bl	8001268 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80016ee:	4360      	muls	r0, r4
 80016f0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80016fa:	fbb3 f3f8 	udiv	r3, r3, r8
 80016fe:	fb08 a313 	mls	r3, r8, r3, sl
 8001702:	011b      	lsls	r3, r3, #4
 8001704:	3332      	adds	r3, #50	; 0x32
 8001706:	fbb3 f3f8 	udiv	r3, r3, r8
 800170a:	f003 030f 	and.w	r3, r3, #15
 800170e:	433b      	orrs	r3, r7
 8001710:	4433      	add	r3, r6
 8001712:	60ab      	str	r3, [r5, #8]
 8001714:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001718:	f7ff fd96 	bl	8001248 <HAL_RCC_GetPCLK1Freq>
 800171c:	fb04 f300 	mul.w	r3, r4, r0
 8001720:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8001724:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001728:	00b6      	lsls	r6, r6, #2
 800172a:	fbb3 f3f6 	udiv	r3, r3, r6
 800172e:	fbb3 f3f8 	udiv	r3, r3, r8
 8001732:	011e      	lsls	r6, r3, #4
 8001734:	f7ff fd88 	bl	8001248 <HAL_RCC_GetPCLK1Freq>
 8001738:	4360      	muls	r0, r4
 800173a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	fbb0 f7f3 	udiv	r7, r0, r3
 8001744:	f7ff fd80 	bl	8001248 <HAL_RCC_GetPCLK1Freq>
 8001748:	4360      	muls	r0, r4
 800174a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	fbb0 f3f3 	udiv	r3, r0, r3
 8001754:	fbb3 f3f8 	udiv	r3, r3, r8
 8001758:	fb08 7313 	mls	r3, r8, r3, r7
 800175c:	011b      	lsls	r3, r3, #4
 800175e:	3332      	adds	r3, #50	; 0x32
 8001760:	fbb3 f3f8 	udiv	r3, r3, r8
 8001764:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8001768:	f7ff fd6e 	bl	8001248 <HAL_RCC_GetPCLK1Freq>
 800176c:	4360      	muls	r0, r4
 800176e:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8001772:	0092      	lsls	r2, r2, #2
 8001774:	fbb0 faf2 	udiv	sl, r0, r2
 8001778:	f7ff fd66 	bl	8001248 <HAL_RCC_GetPCLK1Freq>
 800177c:	e7b7      	b.n	80016ee <UART_SetConfig+0xa6>
 800177e:	bf00      	nop
 8001780:	40013800 	.word	0x40013800

08001784 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8001784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001786:	4604      	mov	r4, r0
 8001788:	460e      	mov	r6, r1
 800178a:	4617      	mov	r7, r2
 800178c:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 800178e:	6821      	ldr	r1, [r4, #0]
 8001790:	680b      	ldr	r3, [r1, #0]
 8001792:	ea36 0303 	bics.w	r3, r6, r3
 8001796:	d101      	bne.n	800179c <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8001798:	2000      	movs	r0, #0
}
 800179a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 800179c:	1c6b      	adds	r3, r5, #1
 800179e:	d0f7      	beq.n	8001790 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80017a0:	b995      	cbnz	r5, 80017c8 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80017a2:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 80017a4:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80017a6:	68da      	ldr	r2, [r3, #12]
 80017a8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80017ac:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80017ae:	695a      	ldr	r2, [r3, #20]
 80017b0:	f022 0201 	bic.w	r2, r2, #1
 80017b4:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80017b6:	2320      	movs	r3, #32
 80017b8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80017bc:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 80017c0:	2300      	movs	r3, #0
 80017c2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 80017c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80017c8:	f7ff f95e 	bl	8000a88 <HAL_GetTick>
 80017cc:	1bc0      	subs	r0, r0, r7
 80017ce:	4285      	cmp	r5, r0
 80017d0:	d2dd      	bcs.n	800178e <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 80017d2:	e7e6      	b.n	80017a2 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

080017d4 <HAL_UART_Init>:
{
 80017d4:	b510      	push	{r4, lr}
  if(huart == NULL)
 80017d6:	4604      	mov	r4, r0
 80017d8:	b340      	cbz	r0, 800182c <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 80017da:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80017de:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80017e2:	b91b      	cbnz	r3, 80017ec <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80017e4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80017e8:	f000 fa6c 	bl	8001cc4 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80017ec:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80017ee:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80017f0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80017f4:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80017f6:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80017f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80017fc:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80017fe:	f7ff ff23 	bl	8001648 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001802:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001804:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001806:	691a      	ldr	r2, [r3, #16]
 8001808:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800180c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800180e:	695a      	ldr	r2, [r3, #20]
 8001810:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001814:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001816:	68da      	ldr	r2, [r3, #12]
 8001818:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800181c:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 800181e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001820:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001822:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001826:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800182a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800182c:	2001      	movs	r0, #1
}
 800182e:	bd10      	pop	{r4, pc}

08001830 <HAL_UART_Transmit>:
{
 8001830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001834:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8001836:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 800183a:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_READY)
 800183c:	2b20      	cmp	r3, #32
{
 800183e:	460d      	mov	r5, r1
 8001840:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8001842:	d14e      	bne.n	80018e2 <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0U))
 8001844:	2900      	cmp	r1, #0
 8001846:	d049      	beq.n	80018dc <HAL_UART_Transmit+0xac>
 8001848:	2a00      	cmp	r2, #0
 800184a:	d047      	beq.n	80018dc <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 800184c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001850:	2b01      	cmp	r3, #1
 8001852:	d046      	beq.n	80018e2 <HAL_UART_Transmit+0xb2>
 8001854:	2301      	movs	r3, #1
 8001856:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800185a:	2300      	movs	r3, #0
 800185c:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800185e:	2321      	movs	r3, #33	; 0x21
 8001860:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001864:	f7ff f910 	bl	8000a88 <HAL_GetTick>
 8001868:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 800186a:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 800186e:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8001872:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001874:	b29b      	uxth	r3, r3
 8001876:	b96b      	cbnz	r3, 8001894 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001878:	463b      	mov	r3, r7
 800187a:	4632      	mov	r2, r6
 800187c:	2140      	movs	r1, #64	; 0x40
 800187e:	4620      	mov	r0, r4
 8001880:	f7ff ff80 	bl	8001784 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001884:	b9a8      	cbnz	r0, 80018b2 <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8001886:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8001888:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 800188c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8001890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8001894:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001896:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8001898:	3b01      	subs	r3, #1
 800189a:	b29b      	uxth	r3, r3
 800189c:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800189e:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80018a0:	2180      	movs	r1, #128	; 0x80
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80018a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80018a6:	4620      	mov	r0, r4
 80018a8:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80018aa:	d10e      	bne.n	80018ca <HAL_UART_Transmit+0x9a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80018ac:	f7ff ff6a 	bl	8001784 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80018b0:	b110      	cbz	r0, 80018b8 <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 80018b2:	2003      	movs	r0, #3
 80018b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80018b8:	882b      	ldrh	r3, [r5, #0]
 80018ba:	6822      	ldr	r2, [r4, #0]
 80018bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018c0:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80018c2:	6923      	ldr	r3, [r4, #16]
 80018c4:	b943      	cbnz	r3, 80018d8 <HAL_UART_Transmit+0xa8>
          pData +=2U;
 80018c6:	3502      	adds	r5, #2
 80018c8:	e7d3      	b.n	8001872 <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80018ca:	f7ff ff5b 	bl	8001784 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80018ce:	2800      	cmp	r0, #0
 80018d0:	d1ef      	bne.n	80018b2 <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80018d2:	6823      	ldr	r3, [r4, #0]
 80018d4:	782a      	ldrb	r2, [r5, #0]
 80018d6:	605a      	str	r2, [r3, #4]
 80018d8:	3501      	adds	r5, #1
 80018da:	e7ca      	b.n	8001872 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 80018dc:	2001      	movs	r0, #1
 80018de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80018e2:	2002      	movs	r0, #2
}
 80018e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080018e8 <HAL_TIM_PeriodElapsedCallback>:
#include "IRremote.h"

//uint16_t count = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018e8:	b508      	push	{r3, lr}
	if(htim == &htim4)
 80018ea:	4b27      	ldr	r3, [pc, #156]	; (8001988 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80018ec:	4283      	cmp	r3, r0
 80018ee:	d145      	bne.n	800197c <HAL_TIM_PeriodElapsedCallback+0x94>
	{
		uint8_t irdata = RECIV_PIN; // пин для приёма
 80018f0:	2120      	movs	r1, #32
 80018f2:	4826      	ldr	r0, [pc, #152]	; (800198c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80018f4:	f7ff fa28 	bl	8000d48 <HAL_GPIO_ReadPin>
		{
			count = 0;
			HAL_GPIO_TogglePin(pa3_GPIO_Port, pa3_Pin);
		}*/

		irparams.timer++;  // One more 50uS tick
 80018f8:	4b25      	ldr	r3, [pc, #148]	; (8001990 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80018fa:	885a      	ldrh	r2, [r3, #2]
 80018fc:	3201      	adds	r2, #1
 80018fe:	b292      	uxth	r2, r2
 8001900:	805a      	strh	r2, [r3, #2]
		if(irparams.rawlen >= RAWBUF) irparams.rcvstate = STATE_OVERFLOW;  // Buffer overflow
 8001902:	785a      	ldrb	r2, [r3, #1]

		switch(irparams.rcvstate)
 8001904:	781a      	ldrb	r2, [r3, #0]
 8001906:	3a02      	subs	r2, #2
 8001908:	2a04      	cmp	r2, #4
 800190a:	d837      	bhi.n	800197c <HAL_TIM_PeriodElapsedCallback+0x94>
 800190c:	e8df f002 	tbb	[pc, r2]
 8001910:	342c1b03 	.word	0x342c1b03
 8001914:	37          	.byte	0x37
 8001915:	00          	.byte	0x00
		{
			case STATE_IDLE: // In the middle of a gap
				if(irdata == MARK)
 8001916:	2800      	cmp	r0, #0
 8001918:	d130      	bne.n	800197c <HAL_TIM_PeriodElapsedCallback+0x94>
				{
					if(irparams.timer < GAP_TICKS)  // Not big enough to be a gap.
 800191a:	885a      	ldrh	r2, [r3, #2]
 800191c:	b292      	uxth	r2, r2
 800191e:	2a63      	cmp	r2, #99	; 0x63
 8001920:	d801      	bhi.n	8001926 <HAL_TIM_PeriodElapsedCallback+0x3e>
				}

			break;

			case STATE_STOP:  // Waiting; Measuring Gap
			 	if(irdata == MARK) irparams.timer = 0;  // Reset gap timer
 8001922:	8058      	strh	r0, [r3, #2]
 8001924:	bd08      	pop	{r3, pc}
						irparams.overflow = 0;
 8001926:	f883 0204 	strb.w	r0, [r3, #516]	; 0x204
						irparams.rawlen  = 0;
 800192a:	7058      	strb	r0, [r3, #1]
					irparams.rawbuf[irparams.rawlen++] = irparams.timer;
 800192c:	785a      	ldrb	r2, [r3, #1]
 800192e:	b2d2      	uxtb	r2, r2
 8001930:	1c51      	adds	r1, r2, #1
 8001932:	b2c9      	uxtb	r1, r1
 8001934:	7059      	strb	r1, [r3, #1]
 8001936:	8859      	ldrh	r1, [r3, #2]
 8001938:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800193c:	b289      	uxth	r1, r1
 800193e:	8091      	strh	r1, [r2, #4]
					irparams.timer = 0;
 8001940:	8058      	strh	r0, [r3, #2]
					irparams.rcvstate = STATE_MARK;
 8001942:	2203      	movs	r2, #3
 8001944:	e00e      	b.n	8001964 <HAL_TIM_PeriodElapsedCallback+0x7c>
				if(irdata == SPACE) // Mark ended; Record time
 8001946:	2801      	cmp	r0, #1
 8001948:	d118      	bne.n	800197c <HAL_TIM_PeriodElapsedCallback+0x94>
					irparams.rawbuf[irparams.rawlen++] = irparams.timer;
 800194a:	785a      	ldrb	r2, [r3, #1]
 800194c:	b2d2      	uxtb	r2, r2
 800194e:	1c51      	adds	r1, r2, #1
 8001950:	b2c9      	uxtb	r1, r1
 8001952:	7059      	strb	r1, [r3, #1]
 8001954:	8859      	ldrh	r1, [r3, #2]
 8001956:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800195a:	b289      	uxth	r1, r1
 800195c:	8091      	strh	r1, [r2, #4]
					irparams.timer = 0;
 800195e:	2200      	movs	r2, #0
 8001960:	805a      	strh	r2, [r3, #2]
					irparams.rcvstate = STATE_SPACE;
 8001962:	2204      	movs	r2, #4
			break;

			case STATE_OVERFLOW:  // Flag up a read overflow; Stop the State Machine
				irparams.overflow = 1;
				irparams.rcvstate = STATE_STOP;
 8001964:	701a      	strb	r2, [r3, #0]
			break;
		}
	}
}
 8001966:	e009      	b.n	800197c <HAL_TIM_PeriodElapsedCallback+0x94>
				if(irdata == MARK) // Space just ended; Record time
 8001968:	2800      	cmp	r0, #0
 800196a:	d0df      	beq.n	800192c <HAL_TIM_PeriodElapsedCallback+0x44>
				else if(irparams.timer > GAP_TICKS) // Space
 800196c:	885a      	ldrh	r2, [r3, #2]
 800196e:	b292      	uxth	r2, r2
 8001970:	2a64      	cmp	r2, #100	; 0x64
 8001972:	d903      	bls.n	800197c <HAL_TIM_PeriodElapsedCallback+0x94>
				irparams.rcvstate = STATE_STOP;
 8001974:	2205      	movs	r2, #5
 8001976:	e7f5      	b.n	8001964 <HAL_TIM_PeriodElapsedCallback+0x7c>
			 	if(irdata == MARK) irparams.timer = 0;  // Reset gap timer
 8001978:	2800      	cmp	r0, #0
 800197a:	d0d2      	beq.n	8001922 <HAL_TIM_PeriodElapsedCallback+0x3a>
 800197c:	bd08      	pop	{r3, pc}
				irparams.overflow = 1;
 800197e:	2201      	movs	r2, #1
 8001980:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 8001984:	e7f6      	b.n	8001974 <HAL_TIM_PeriodElapsedCallback+0x8c>
 8001986:	bf00      	nop
 8001988:	200002b4 	.word	0x200002b4
 800198c:	40010c00 	.word	0x40010c00
 8001990:	2000009c 	.word	0x2000009c

08001994 <my_enableIRIn>:
	return 0;
}

void my_enableIRIn() // initialization
{
	irparams.rcvstate = STATE_IDLE;
 8001994:	2302      	movs	r3, #2
 8001996:	4a04      	ldr	r2, [pc, #16]	; (80019a8 <my_enableIRIn+0x14>)
	irparams.rawlen = 0;

	__HAL_TIM_SET_COUNTER(&htim4, 0x0000);
 8001998:	4804      	ldr	r0, [pc, #16]	; (80019ac <my_enableIRIn+0x18>)
	irparams.rcvstate = STATE_IDLE;
 800199a:	7013      	strb	r3, [r2, #0]
	irparams.rawlen = 0;
 800199c:	2300      	movs	r3, #0
 800199e:	7053      	strb	r3, [r2, #1]
	__HAL_TIM_SET_COUNTER(&htim4, 0x0000);
 80019a0:	6802      	ldr	r2, [r0, #0]
 80019a2:	6253      	str	r3, [r2, #36]	; 0x24
	HAL_TIM_Base_Start_IT(&htim4);
 80019a4:	f7ff bc70 	b.w	8001288 <HAL_TIM_Base_Start_IT>
 80019a8:	2000009c 	.word	0x2000009c
 80019ac:	200002b4 	.word	0x200002b4

080019b0 <my_resume>:
	return (irparams.rcvstate == STATE_IDLE || irparams.rcvstate == STATE_STOP) ? true : false;
}*/

void my_resume() // Restart the ISR state machine
{
	irparams.rcvstate = STATE_IDLE;
 80019b0:	2202      	movs	r2, #2
 80019b2:	4b02      	ldr	r3, [pc, #8]	; (80019bc <my_resume+0xc>)
 80019b4:	701a      	strb	r2, [r3, #0]
	irparams.rawlen = 0;
 80019b6:	2200      	movs	r2, #0
 80019b8:	705a      	strb	r2, [r3, #1]
 80019ba:	4770      	bx	lr
 80019bc:	2000009c 	.word	0x2000009c

080019c0 <compare>:
}

int16_t compare(uint16_t oldval, uint16_t newval)
{
 80019c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019c2:	4606      	mov	r6, r0
	if(newval < oldval * .8) return 0;
 80019c4:	4608      	mov	r0, r1
 80019c6:	f7fe fd1d 	bl	8000404 <__aeabi_i2d>
 80019ca:	4604      	mov	r4, r0
 80019cc:	4630      	mov	r0, r6
 80019ce:	460d      	mov	r5, r1
 80019d0:	f7fe fd18 	bl	8000404 <__aeabi_i2d>
 80019d4:	a310      	add	r3, pc, #64	; (adr r3, 8001a18 <compare+0x58>)
 80019d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019da:	4606      	mov	r6, r0
 80019dc:	460f      	mov	r7, r1
 80019de:	f7fe fd77 	bl	80004d0 <__aeabi_dmul>
 80019e2:	4602      	mov	r2, r0
 80019e4:	460b      	mov	r3, r1
 80019e6:	4620      	mov	r0, r4
 80019e8:	4629      	mov	r1, r5
 80019ea:	f7fe ffe3 	bl	80009b4 <__aeabi_dcmplt>
 80019ee:	b988      	cbnz	r0, 8001a14 <compare+0x54>
	else if(oldval < newval * .8) return 2;
 80019f0:	a309      	add	r3, pc, #36	; (adr r3, 8001a18 <compare+0x58>)
 80019f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f6:	4620      	mov	r0, r4
 80019f8:	4629      	mov	r1, r5
 80019fa:	f7fe fd69 	bl	80004d0 <__aeabi_dmul>
 80019fe:	4602      	mov	r2, r0
 8001a00:	460b      	mov	r3, r1
 8001a02:	4630      	mov	r0, r6
 8001a04:	4639      	mov	r1, r7
 8001a06:	f7fe ffd5 	bl	80009b4 <__aeabi_dcmplt>
 8001a0a:	2800      	cmp	r0, #0
	else return 1;
 8001a0c:	bf14      	ite	ne
 8001a0e:	2002      	movne	r0, #2
 8001a10:	2001      	moveq	r0, #1
 8001a12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if(newval < oldval * .8) return 0;
 8001a14:	2000      	movs	r0, #0
}
 8001a16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a18:	9999999a 	.word	0x9999999a
 8001a1c:	3fe99999 	.word	0x3fe99999

08001a20 <decodeHash>:

#define FNV_PRIME_32 16777619
#define FNV_BASIS_32 2166136261

int32_t decodeHash(decode_results *results)
{
 8001a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int32_t hash = FNV_BASIS_32;

	if(results->rawlen < 6) return 0;
 8001a24:	f9b0 700c 	ldrsh.w	r7, [r0, #12]
{
 8001a28:	4606      	mov	r6, r0
	if(results->rawlen < 6) return 0;
 8001a2a:	2f05      	cmp	r7, #5
 8001a2c:	dd1c      	ble.n	8001a68 <decodeHash+0x48>
 8001a2e:	2401      	movs	r4, #1
 8001a30:	4d0f      	ldr	r5, [pc, #60]	; (8001a70 <decodeHash+0x50>)

	for(int16_t i = 1; (i + 2) < results->rawlen; i++)
	{
		int16_t value = compare(results->rawbuf[i], results->rawbuf[i+2]);
		hash = (hash * FNV_PRIME_32) ^ value;
 8001a32:	f8df 8040 	ldr.w	r8, [pc, #64]	; 8001a74 <decodeHash+0x54>
	for(int16_t i = 1; (i + 2) < results->rawlen; i++)
 8001a36:	1ca3      	adds	r3, r4, #2
 8001a38:	42bb      	cmp	r3, r7
 8001a3a:	db05      	blt.n	8001a48 <decodeHash+0x28>
	}

	results->value = hash;
	results->bits = 32;
 8001a3c:	2320      	movs	r3, #32
	results->value = hash;
 8001a3e:	6035      	str	r5, [r6, #0]
	results->bits = 32;
 8001a40:	80b3      	strh	r3, [r6, #4]
	return 1;
 8001a42:	2001      	movs	r0, #1
 8001a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		int16_t value = compare(results->rawbuf[i], results->rawbuf[i+2]);
 8001a48:	68b2      	ldr	r2, [r6, #8]
 8001a4a:	0063      	lsls	r3, r4, #1
 8001a4c:	3304      	adds	r3, #4
 8001a4e:	f832 0014 	ldrh.w	r0, [r2, r4, lsl #1]
 8001a52:	5ad1      	ldrh	r1, [r2, r3]
 8001a54:	b280      	uxth	r0, r0
 8001a56:	b289      	uxth	r1, r1
 8001a58:	f7ff ffb2 	bl	80019c0 <compare>
		hash = (hash * FNV_PRIME_32) ^ value;
 8001a5c:	fb08 f505 	mul.w	r5, r8, r5
 8001a60:	3401      	adds	r4, #1
 8001a62:	4045      	eors	r5, r0
 8001a64:	b224      	sxth	r4, r4
 8001a66:	e7e6      	b.n	8001a36 <decodeHash+0x16>
	if(results->rawlen < 6) return 0;
 8001a68:	2000      	movs	r0, #0
}
 8001a6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a6e:	bf00      	nop
 8001a70:	811c9dc5 	.word	0x811c9dc5
 8001a74:	01000193 	.word	0x01000193

08001a78 <my_decode>:
{
 8001a78:	b510      	push	{r4, lr}
	if(irparams.rcvstate != STATE_STOP) return 0;
 8001a7a:	4b0a      	ldr	r3, [pc, #40]	; (8001aa4 <my_decode+0x2c>)
 8001a7c:	7819      	ldrb	r1, [r3, #0]
 8001a7e:	2905      	cmp	r1, #5
 8001a80:	d10b      	bne.n	8001a9a <my_decode+0x22>
	results->rawbuf = irparams.rawbuf;
 8001a82:	1d19      	adds	r1, r3, #4
 8001a84:	6081      	str	r1, [r0, #8]
	results->rawlen = irparams.rawlen;
 8001a86:	7859      	ldrb	r1, [r3, #1]
 8001a88:	8181      	strh	r1, [r0, #12]
	results->overflow = irparams.overflow;
 8001a8a:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8001a8e:	81c3      	strh	r3, [r0, #14]
	if(decodeHash(results)) return 1;
 8001a90:	f7ff ffc6 	bl	8001a20 <decodeHash>
 8001a94:	b918      	cbnz	r0, 8001a9e <my_decode+0x26>
	my_enableIRIn();
 8001a96:	f7ff ff7d 	bl	8001994 <my_enableIRIn>
	if(irparams.rcvstate != STATE_STOP) return 0;
 8001a9a:	2000      	movs	r0, #0
 8001a9c:	bd10      	pop	{r4, pc}
	if(decodeHash(results)) return 1;
 8001a9e:	2001      	movs	r0, #1
}
 8001aa0:	bd10      	pop	{r4, pc}
 8001aa2:	bf00      	nop
 8001aa4:	2000009c 	.word	0x2000009c

08001aa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001aa8:	b510      	push	{r4, lr}
 8001aaa:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001aac:	2228      	movs	r2, #40	; 0x28
 8001aae:	2100      	movs	r1, #0
 8001ab0:	a806      	add	r0, sp, #24
 8001ab2:	f000 f9e3 	bl	8001e7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	2214      	movs	r2, #20
 8001aba:	a801      	add	r0, sp, #4
 8001abc:	f000 f9de 	bl	8001e7c <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ac0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ac4:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ac6:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ac8:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001aca:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001acc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ad0:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ad2:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ad4:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001ad6:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ad8:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ada:	f7ff f93b 	bl	8000d54 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ade:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ae0:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ae4:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ae6:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ae8:	4621      	mov	r1, r4
 8001aea:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001aec:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001aee:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001af0:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001af2:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001af4:	f7ff faf6 	bl	80010e4 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8001af8:	b010      	add	sp, #64	; 0x40
 8001afa:	bd10      	pop	{r4, pc}

08001afc <main>:
{
 8001afc:	b500      	push	{lr}
 8001afe:	b099      	sub	sp, #100	; 0x64
  HAL_Init();
 8001b00:	f7fe ffa4 	bl	8000a4c <HAL_Init>
  SystemClock_Config();
 8001b04:	f7ff ffd0 	bl	8001aa8 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b08:	2210      	movs	r2, #16
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	a808      	add	r0, sp, #32
 8001b0e:	f000 f9b5 	bl	8001e7c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b12:	4b43      	ldr	r3, [pc, #268]	; (8001c20 <main+0x124>)

  /*Configure GPIO pin : recive_IR_Pin */
  GPIO_InitStruct.Pin = recive_IR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(recive_IR_GPIO_Port, &GPIO_InitStruct);
 8001b14:	4843      	ldr	r0, [pc, #268]	; (8001c24 <main+0x128>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b16:	699a      	ldr	r2, [r3, #24]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b18:	2400      	movs	r4, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b1a:	f042 0220 	orr.w	r2, r2, #32
 8001b1e:	619a      	str	r2, [r3, #24]
 8001b20:	699a      	ldr	r2, [r3, #24]
  huart1.Instance = USART1;
 8001b22:	4d41      	ldr	r5, [pc, #260]	; (8001c28 <main+0x12c>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b24:	f002 0220 	and.w	r2, r2, #32
 8001b28:	9203      	str	r2, [sp, #12]
 8001b2a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b2c:	699a      	ldr	r2, [r3, #24]
  htim4.Instance = TIM4;
 8001b2e:	4e3f      	ldr	r6, [pc, #252]	; (8001c2c <main+0x130>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b30:	f042 0204 	orr.w	r2, r2, #4
 8001b34:	619a      	str	r2, [r3, #24]
 8001b36:	699a      	ldr	r2, [r3, #24]
 8001b38:	f002 0204 	and.w	r2, r2, #4
 8001b3c:	9204      	str	r2, [sp, #16]
 8001b3e:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b40:	699a      	ldr	r2, [r3, #24]
 8001b42:	f042 0208 	orr.w	r2, r2, #8
 8001b46:	619a      	str	r2, [r3, #24]
 8001b48:	699b      	ldr	r3, [r3, #24]
 8001b4a:	f003 0308 	and.w	r3, r3, #8
 8001b4e:	9305      	str	r3, [sp, #20]
 8001b50:	9b05      	ldr	r3, [sp, #20]
  GPIO_InitStruct.Pin = recive_IR_Pin;
 8001b52:	2320      	movs	r3, #32
  HAL_GPIO_Init(recive_IR_GPIO_Port, &GPIO_InitStruct);
 8001b54:	eb0d 0103 	add.w	r1, sp, r3
  GPIO_InitStruct.Pin = recive_IR_Pin;
 8001b58:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(recive_IR_GPIO_Port, &GPIO_InitStruct);
 8001b5a:	f7ff f815 	bl	8000b88 <HAL_GPIO_Init>
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b5e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001b62:	4a33      	ldr	r2, [pc, #204]	; (8001c30 <main+0x134>)
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b64:	4628      	mov	r0, r5
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b66:	e885 001c 	stmia.w	r5, {r2, r3, r4}
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b6a:	230c      	movs	r3, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b6c:	60ec      	str	r4, [r5, #12]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b6e:	616b      	str	r3, [r5, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b70:	612c      	str	r4, [r5, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b72:	61ac      	str	r4, [r5, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b74:	61ec      	str	r4, [r5, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b76:	f7ff fe2d 	bl	80017d4 <HAL_UART_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b7a:	2210      	movs	r2, #16
 8001b7c:	4621      	mov	r1, r4
 8001b7e:	a808      	add	r0, sp, #32
 8001b80:	f000 f97c 	bl	8001e7c <memset>
  htim4.Init.Prescaler = 71;
 8001b84:	2347      	movs	r3, #71	; 0x47
 8001b86:	492b      	ldr	r1, [pc, #172]	; (8001c34 <main+0x138>)
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001b88:	4630      	mov	r0, r6
  htim4.Init.Prescaler = 71;
 8001b8a:	e886 000a 	stmia.w	r6, {r1, r3}
  htim4.Init.Period = 49;
 8001b8e:	2331      	movs	r3, #49	; 0x31
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b90:	60b4      	str	r4, [r6, #8]
  htim4.Init.Period = 49;
 8001b92:	60f3      	str	r3, [r6, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b94:	6134      	str	r4, [r6, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b96:	61b4      	str	r4, [r6, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b98:	9406      	str	r4, [sp, #24]
 8001b9a:	9407      	str	r4, [sp, #28]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001b9c:	f7ff fd16 	bl	80015cc <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ba0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001ba4:	a908      	add	r1, sp, #32
 8001ba6:	4630      	mov	r0, r6
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ba8:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001baa:	f7ff fb78 	bl	800129e <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001bae:	a906      	add	r1, sp, #24
 8001bb0:	4630      	mov	r0, r6
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bb2:	9406      	str	r4, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bb4:	9407      	str	r4, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001bb6:	f7ff fd23 	bl	8001600 <HAL_TIMEx_MasterConfigSynchronization>
  char trans_str[64] = {0,};
 8001bba:	2240      	movs	r2, #64	; 0x40
 8001bbc:	4621      	mov	r1, r4
 8001bbe:	a808      	add	r0, sp, #32
 8001bc0:	f000 f95c 	bl	8001e7c <memset>
  snprintf(trans_str, 64, "IR-receiver https://istarik.ru/blog/stm32/125.html\n");
 8001bc4:	491c      	ldr	r1, [pc, #112]	; (8001c38 <main+0x13c>)
 8001bc6:	a808      	add	r0, sp, #32
 8001bc8:	f000 f994 	bl	8001ef4 <strcpy>
  HAL_UART_Transmit(&huart1, (uint8_t*)trans_str, strlen(trans_str), 100);
 8001bcc:	a808      	add	r0, sp, #32
 8001bce:	f7fe fabf 	bl	8000150 <strlen>
 8001bd2:	2364      	movs	r3, #100	; 0x64
 8001bd4:	b282      	uxth	r2, r0
 8001bd6:	a908      	add	r1, sp, #32
 8001bd8:	4628      	mov	r0, r5
 8001bda:	f7ff fe29 	bl	8001830 <HAL_UART_Transmit>
  my_enableIRIn(); // инициализация
 8001bde:	f7ff fed9 	bl	8001994 <my_enableIRIn>
	if(my_decode(&results))
 8001be2:	4e16      	ldr	r6, [pc, #88]	; (8001c3c <main+0x140>)
		snprintf(trans_str, 64, "Cod: HEX %p DEC %lu\n", (void*)results.value, results.value);
 8001be4:	4c16      	ldr	r4, [pc, #88]	; (8001c40 <main+0x144>)
	if(my_decode(&results))
 8001be6:	4815      	ldr	r0, [pc, #84]	; (8001c3c <main+0x140>)
 8001be8:	f7ff ff46 	bl	8001a78 <my_decode>
 8001bec:	2800      	cmp	r0, #0
 8001bee:	d0fa      	beq.n	8001be6 <main+0xea>
		snprintf(trans_str, 64, "Cod: HEX %p DEC %lu\n", (void*)results.value, results.value);
 8001bf0:	6833      	ldr	r3, [r6, #0]
 8001bf2:	4622      	mov	r2, r4
 8001bf4:	9300      	str	r3, [sp, #0]
 8001bf6:	2140      	movs	r1, #64	; 0x40
 8001bf8:	a808      	add	r0, sp, #32
 8001bfa:	f000 f947 	bl	8001e8c <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)trans_str, strlen(trans_str), 100);
 8001bfe:	a808      	add	r0, sp, #32
 8001c00:	f7fe faa6 	bl	8000150 <strlen>
 8001c04:	2364      	movs	r3, #100	; 0x64
 8001c06:	b282      	uxth	r2, r0
 8001c08:	a908      	add	r1, sp, #32
 8001c0a:	4628      	mov	r0, r5
 8001c0c:	f7ff fe10 	bl	8001830 <HAL_UART_Transmit>
		HAL_Delay(300);
 8001c10:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001c14:	f7fe ff3e 	bl	8000a94 <HAL_Delay>
		my_resume();
 8001c18:	f7ff feca 	bl	80019b0 <my_resume>
 8001c1c:	e7e3      	b.n	8001be6 <main+0xea>
 8001c1e:	bf00      	nop
 8001c20:	40021000 	.word	0x40021000
 8001c24:	40010c00 	.word	0x40010c00
 8001c28:	200002f4 	.word	0x200002f4
 8001c2c:	200002b4 	.word	0x200002b4
 8001c30:	40013800 	.word	0x40013800
 8001c34:	40000800 	.word	0x40000800
 8001c38:	0800273c 	.word	0x0800273c
 8001c3c:	200002a4 	.word	0x200002a4
 8001c40:	08002770 	.word	0x08002770

08001c44 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c44:	4b0e      	ldr	r3, [pc, #56]	; (8001c80 <HAL_MspInit+0x3c>)
{
 8001c46:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c48:	699a      	ldr	r2, [r3, #24]
 8001c4a:	f042 0201 	orr.w	r2, r2, #1
 8001c4e:	619a      	str	r2, [r3, #24]
 8001c50:	699a      	ldr	r2, [r3, #24]
 8001c52:	f002 0201 	and.w	r2, r2, #1
 8001c56:	9200      	str	r2, [sp, #0]
 8001c58:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c5a:	69da      	ldr	r2, [r3, #28]
 8001c5c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c60:	61da      	str	r2, [r3, #28]
 8001c62:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c64:	4a07      	ldr	r2, [pc, #28]	; (8001c84 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c6a:	9301      	str	r3, [sp, #4]
 8001c6c:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c6e:	6853      	ldr	r3, [r2, #4]
 8001c70:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001c74:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c78:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c7a:	b002      	add	sp, #8
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	40021000 	.word	0x40021000
 8001c84:	40010000 	.word	0x40010000

08001c88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c88:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM4)
 8001c8a:	4b0d      	ldr	r3, [pc, #52]	; (8001cc0 <HAL_TIM_Base_MspInit+0x38>)
 8001c8c:	6802      	ldr	r2, [r0, #0]
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d112      	bne.n	8001cb8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c92:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001c96:	69da      	ldr	r2, [r3, #28]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001c98:	201e      	movs	r0, #30
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c9a:	f042 0204 	orr.w	r2, r2, #4
 8001c9e:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001ca0:	2200      	movs	r2, #0
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ca2:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001ca4:	4611      	mov	r1, r2
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ca6:	f003 0304 	and.w	r3, r3, #4
 8001caa:	9301      	str	r3, [sp, #4]
 8001cac:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001cae:	f7fe ff15 	bl	8000adc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001cb2:	201e      	movs	r0, #30
 8001cb4:	f7fe ff46 	bl	8000b44 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001cb8:	b003      	add	sp, #12
 8001cba:	f85d fb04 	ldr.w	pc, [sp], #4
 8001cbe:	bf00      	nop
 8001cc0:	40000800 	.word	0x40000800

08001cc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cc4:	b510      	push	{r4, lr}
 8001cc6:	4604      	mov	r4, r0
 8001cc8:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cca:	2210      	movs	r2, #16
 8001ccc:	2100      	movs	r1, #0
 8001cce:	a802      	add	r0, sp, #8
 8001cd0:	f000 f8d4 	bl	8001e7c <memset>
  if(huart->Instance==USART1)
 8001cd4:	6822      	ldr	r2, [r4, #0]
 8001cd6:	4b17      	ldr	r3, [pc, #92]	; (8001d34 <HAL_UART_MspInit+0x70>)
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d128      	bne.n	8001d2e <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cdc:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001ce0:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce2:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ce4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ce8:	619a      	str	r2, [r3, #24]
 8001cea:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cec:	4812      	ldr	r0, [pc, #72]	; (8001d38 <HAL_UART_MspInit+0x74>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cee:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001cf2:	9200      	str	r2, [sp, #0]
 8001cf4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf6:	699a      	ldr	r2, [r3, #24]
 8001cf8:	f042 0204 	orr.w	r2, r2, #4
 8001cfc:	619a      	str	r2, [r3, #24]
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	f003 0304 	and.w	r3, r3, #4
 8001d04:	9301      	str	r3, [sp, #4]
 8001d06:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d0c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d12:	2303      	movs	r3, #3
 8001d14:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d16:	f7fe ff37 	bl	8000b88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d1e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d20:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d22:	a902      	add	r1, sp, #8
 8001d24:	4804      	ldr	r0, [pc, #16]	; (8001d38 <HAL_UART_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d26:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d28:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d2a:	f7fe ff2d 	bl	8000b88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001d2e:	b006      	add	sp, #24
 8001d30:	bd10      	pop	{r4, pc}
 8001d32:	bf00      	nop
 8001d34:	40013800 	.word	0x40013800
 8001d38:	40010800 	.word	0x40010800

08001d3c <NMI_Handler>:
 8001d3c:	4770      	bx	lr

08001d3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d3e:	e7fe      	b.n	8001d3e <HardFault_Handler>

08001d40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d40:	e7fe      	b.n	8001d40 <MemManage_Handler>

08001d42 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d42:	e7fe      	b.n	8001d42 <BusFault_Handler>

08001d44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d44:	e7fe      	b.n	8001d44 <UsageFault_Handler>

08001d46 <SVC_Handler>:
 8001d46:	4770      	bx	lr

08001d48 <DebugMon_Handler>:
 8001d48:	4770      	bx	lr

08001d4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d4a:	4770      	bx	lr

08001d4c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d4c:	f7fe be90 	b.w	8000a70 <HAL_IncTick>

08001d50 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001d50:	4801      	ldr	r0, [pc, #4]	; (8001d58 <TIM4_IRQHandler+0x8>)
 8001d52:	f7ff bb61 	b.w	8001418 <HAL_TIM_IRQHandler>
 8001d56:	bf00      	nop
 8001d58:	200002b4 	.word	0x200002b4

08001d5c <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8001d5c:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001d5e:	4b0a      	ldr	r3, [pc, #40]	; (8001d88 <_sbrk+0x2c>)
{
 8001d60:	4602      	mov	r2, r0
	if (heap_end == 0)
 8001d62:	6819      	ldr	r1, [r3, #0]
 8001d64:	b909      	cbnz	r1, 8001d6a <_sbrk+0xe>
		heap_end = &end;
 8001d66:	4909      	ldr	r1, [pc, #36]	; (8001d8c <_sbrk+0x30>)
 8001d68:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8001d6a:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8001d6c:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8001d6e:	4402      	add	r2, r0
 8001d70:	428a      	cmp	r2, r1
 8001d72:	d906      	bls.n	8001d82 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001d74:	f000 f858 	bl	8001e28 <__errno>
 8001d78:	230c      	movs	r3, #12
 8001d7a:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8001d7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d80:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8001d82:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8001d84:	bd08      	pop	{r3, pc}
 8001d86:	bf00      	nop
 8001d88:	2000008c 	.word	0x2000008c
 8001d8c:	20000338 	.word	0x20000338

08001d90 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001d90:	4b0f      	ldr	r3, [pc, #60]	; (8001dd0 <SystemInit+0x40>)
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	f042 0201 	orr.w	r2, r2, #1
 8001d98:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001d9a:	6859      	ldr	r1, [r3, #4]
 8001d9c:	4a0d      	ldr	r2, [pc, #52]	; (8001dd4 <SystemInit+0x44>)
 8001d9e:	400a      	ands	r2, r1
 8001da0:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001da8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001dac:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001db4:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001db6:	685a      	ldr	r2, [r3, #4]
 8001db8:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001dbc:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001dbe:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001dc2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001dc4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001dc8:	4b03      	ldr	r3, [pc, #12]	; (8001dd8 <SystemInit+0x48>)
 8001dca:	609a      	str	r2, [r3, #8]
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	f8ff0000 	.word	0xf8ff0000
 8001dd8:	e000ed00 	.word	0xe000ed00

08001ddc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001ddc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001dde:	e003      	b.n	8001de8 <LoopCopyDataInit>

08001de0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001de0:	4b0b      	ldr	r3, [pc, #44]	; (8001e10 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001de2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001de4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001de6:	3104      	adds	r1, #4

08001de8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001de8:	480a      	ldr	r0, [pc, #40]	; (8001e14 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001dea:	4b0b      	ldr	r3, [pc, #44]	; (8001e18 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001dec:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001dee:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001df0:	d3f6      	bcc.n	8001de0 <CopyDataInit>
  ldr r2, =_sbss
 8001df2:	4a0a      	ldr	r2, [pc, #40]	; (8001e1c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001df4:	e002      	b.n	8001dfc <LoopFillZerobss>

08001df6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001df6:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001df8:	f842 3b04 	str.w	r3, [r2], #4

08001dfc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001dfc:	4b08      	ldr	r3, [pc, #32]	; (8001e20 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001dfe:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001e00:	d3f9      	bcc.n	8001df6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001e02:	f7ff ffc5 	bl	8001d90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e06:	f000 f815 	bl	8001e34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e0a:	f7ff fe77 	bl	8001afc <main>
  bx lr
 8001e0e:	4770      	bx	lr
  ldr r3, =_sidata
 8001e10:	080027d8 	.word	0x080027d8
  ldr r0, =_sdata
 8001e14:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001e18:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8001e1c:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8001e20:	20000338 	.word	0x20000338

08001e24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e24:	e7fe      	b.n	8001e24 <ADC1_2_IRQHandler>
	...

08001e28 <__errno>:
 8001e28:	4b01      	ldr	r3, [pc, #4]	; (8001e30 <__errno+0x8>)
 8001e2a:	6818      	ldr	r0, [r3, #0]
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	2000000c 	.word	0x2000000c

08001e34 <__libc_init_array>:
 8001e34:	b570      	push	{r4, r5, r6, lr}
 8001e36:	2500      	movs	r5, #0
 8001e38:	4e0c      	ldr	r6, [pc, #48]	; (8001e6c <__libc_init_array+0x38>)
 8001e3a:	4c0d      	ldr	r4, [pc, #52]	; (8001e70 <__libc_init_array+0x3c>)
 8001e3c:	1ba4      	subs	r4, r4, r6
 8001e3e:	10a4      	asrs	r4, r4, #2
 8001e40:	42a5      	cmp	r5, r4
 8001e42:	d109      	bne.n	8001e58 <__libc_init_array+0x24>
 8001e44:	f000 fc66 	bl	8002714 <_init>
 8001e48:	2500      	movs	r5, #0
 8001e4a:	4e0a      	ldr	r6, [pc, #40]	; (8001e74 <__libc_init_array+0x40>)
 8001e4c:	4c0a      	ldr	r4, [pc, #40]	; (8001e78 <__libc_init_array+0x44>)
 8001e4e:	1ba4      	subs	r4, r4, r6
 8001e50:	10a4      	asrs	r4, r4, #2
 8001e52:	42a5      	cmp	r5, r4
 8001e54:	d105      	bne.n	8001e62 <__libc_init_array+0x2e>
 8001e56:	bd70      	pop	{r4, r5, r6, pc}
 8001e58:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001e5c:	4798      	blx	r3
 8001e5e:	3501      	adds	r5, #1
 8001e60:	e7ee      	b.n	8001e40 <__libc_init_array+0xc>
 8001e62:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001e66:	4798      	blx	r3
 8001e68:	3501      	adds	r5, #1
 8001e6a:	e7f2      	b.n	8001e52 <__libc_init_array+0x1e>
 8001e6c:	080027d0 	.word	0x080027d0
 8001e70:	080027d0 	.word	0x080027d0
 8001e74:	080027d0 	.word	0x080027d0
 8001e78:	080027d4 	.word	0x080027d4

08001e7c <memset>:
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	4402      	add	r2, r0
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d100      	bne.n	8001e86 <memset+0xa>
 8001e84:	4770      	bx	lr
 8001e86:	f803 1b01 	strb.w	r1, [r3], #1
 8001e8a:	e7f9      	b.n	8001e80 <memset+0x4>

08001e8c <sniprintf>:
 8001e8c:	b40c      	push	{r2, r3}
 8001e8e:	b530      	push	{r4, r5, lr}
 8001e90:	4b17      	ldr	r3, [pc, #92]	; (8001ef0 <sniprintf+0x64>)
 8001e92:	1e0c      	subs	r4, r1, #0
 8001e94:	b09d      	sub	sp, #116	; 0x74
 8001e96:	681d      	ldr	r5, [r3, #0]
 8001e98:	da08      	bge.n	8001eac <sniprintf+0x20>
 8001e9a:	238b      	movs	r3, #139	; 0x8b
 8001e9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ea0:	602b      	str	r3, [r5, #0]
 8001ea2:	b01d      	add	sp, #116	; 0x74
 8001ea4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001ea8:	b002      	add	sp, #8
 8001eaa:	4770      	bx	lr
 8001eac:	f44f 7302 	mov.w	r3, #520	; 0x208
 8001eb0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8001eb4:	bf0c      	ite	eq
 8001eb6:	4623      	moveq	r3, r4
 8001eb8:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8001ebc:	9304      	str	r3, [sp, #16]
 8001ebe:	9307      	str	r3, [sp, #28]
 8001ec0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ec4:	9002      	str	r0, [sp, #8]
 8001ec6:	9006      	str	r0, [sp, #24]
 8001ec8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8001ecc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8001ece:	ab21      	add	r3, sp, #132	; 0x84
 8001ed0:	a902      	add	r1, sp, #8
 8001ed2:	4628      	mov	r0, r5
 8001ed4:	9301      	str	r3, [sp, #4]
 8001ed6:	f000 f871 	bl	8001fbc <_svfiprintf_r>
 8001eda:	1c43      	adds	r3, r0, #1
 8001edc:	bfbc      	itt	lt
 8001ede:	238b      	movlt	r3, #139	; 0x8b
 8001ee0:	602b      	strlt	r3, [r5, #0]
 8001ee2:	2c00      	cmp	r4, #0
 8001ee4:	d0dd      	beq.n	8001ea2 <sniprintf+0x16>
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	9b02      	ldr	r3, [sp, #8]
 8001eea:	701a      	strb	r2, [r3, #0]
 8001eec:	e7d9      	b.n	8001ea2 <sniprintf+0x16>
 8001eee:	bf00      	nop
 8001ef0:	2000000c 	.word	0x2000000c

08001ef4 <strcpy>:
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001efa:	f803 2b01 	strb.w	r2, [r3], #1
 8001efe:	2a00      	cmp	r2, #0
 8001f00:	d1f9      	bne.n	8001ef6 <strcpy+0x2>
 8001f02:	4770      	bx	lr

08001f04 <__ssputs_r>:
 8001f04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f08:	688e      	ldr	r6, [r1, #8]
 8001f0a:	4682      	mov	sl, r0
 8001f0c:	429e      	cmp	r6, r3
 8001f0e:	460c      	mov	r4, r1
 8001f10:	4691      	mov	r9, r2
 8001f12:	4698      	mov	r8, r3
 8001f14:	d835      	bhi.n	8001f82 <__ssputs_r+0x7e>
 8001f16:	898a      	ldrh	r2, [r1, #12]
 8001f18:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001f1c:	d031      	beq.n	8001f82 <__ssputs_r+0x7e>
 8001f1e:	2302      	movs	r3, #2
 8001f20:	6825      	ldr	r5, [r4, #0]
 8001f22:	6909      	ldr	r1, [r1, #16]
 8001f24:	1a6f      	subs	r7, r5, r1
 8001f26:	6965      	ldr	r5, [r4, #20]
 8001f28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001f2c:	fb95 f5f3 	sdiv	r5, r5, r3
 8001f30:	f108 0301 	add.w	r3, r8, #1
 8001f34:	443b      	add	r3, r7
 8001f36:	429d      	cmp	r5, r3
 8001f38:	bf38      	it	cc
 8001f3a:	461d      	movcc	r5, r3
 8001f3c:	0553      	lsls	r3, r2, #21
 8001f3e:	d531      	bpl.n	8001fa4 <__ssputs_r+0xa0>
 8001f40:	4629      	mov	r1, r5
 8001f42:	f000 fb47 	bl	80025d4 <_malloc_r>
 8001f46:	4606      	mov	r6, r0
 8001f48:	b950      	cbnz	r0, 8001f60 <__ssputs_r+0x5c>
 8001f4a:	230c      	movs	r3, #12
 8001f4c:	f8ca 3000 	str.w	r3, [sl]
 8001f50:	89a3      	ldrh	r3, [r4, #12]
 8001f52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f5a:	81a3      	strh	r3, [r4, #12]
 8001f5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f60:	463a      	mov	r2, r7
 8001f62:	6921      	ldr	r1, [r4, #16]
 8001f64:	f000 fac4 	bl	80024f0 <memcpy>
 8001f68:	89a3      	ldrh	r3, [r4, #12]
 8001f6a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001f6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f72:	81a3      	strh	r3, [r4, #12]
 8001f74:	6126      	str	r6, [r4, #16]
 8001f76:	443e      	add	r6, r7
 8001f78:	6026      	str	r6, [r4, #0]
 8001f7a:	4646      	mov	r6, r8
 8001f7c:	6165      	str	r5, [r4, #20]
 8001f7e:	1bed      	subs	r5, r5, r7
 8001f80:	60a5      	str	r5, [r4, #8]
 8001f82:	4546      	cmp	r6, r8
 8001f84:	bf28      	it	cs
 8001f86:	4646      	movcs	r6, r8
 8001f88:	4649      	mov	r1, r9
 8001f8a:	4632      	mov	r2, r6
 8001f8c:	6820      	ldr	r0, [r4, #0]
 8001f8e:	f000 faba 	bl	8002506 <memmove>
 8001f92:	68a3      	ldr	r3, [r4, #8]
 8001f94:	2000      	movs	r0, #0
 8001f96:	1b9b      	subs	r3, r3, r6
 8001f98:	60a3      	str	r3, [r4, #8]
 8001f9a:	6823      	ldr	r3, [r4, #0]
 8001f9c:	441e      	add	r6, r3
 8001f9e:	6026      	str	r6, [r4, #0]
 8001fa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001fa4:	462a      	mov	r2, r5
 8001fa6:	f000 fb73 	bl	8002690 <_realloc_r>
 8001faa:	4606      	mov	r6, r0
 8001fac:	2800      	cmp	r0, #0
 8001fae:	d1e1      	bne.n	8001f74 <__ssputs_r+0x70>
 8001fb0:	6921      	ldr	r1, [r4, #16]
 8001fb2:	4650      	mov	r0, sl
 8001fb4:	f000 fac2 	bl	800253c <_free_r>
 8001fb8:	e7c7      	b.n	8001f4a <__ssputs_r+0x46>
	...

08001fbc <_svfiprintf_r>:
 8001fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fc0:	b09d      	sub	sp, #116	; 0x74
 8001fc2:	9303      	str	r3, [sp, #12]
 8001fc4:	898b      	ldrh	r3, [r1, #12]
 8001fc6:	4680      	mov	r8, r0
 8001fc8:	061c      	lsls	r4, r3, #24
 8001fca:	460d      	mov	r5, r1
 8001fcc:	4616      	mov	r6, r2
 8001fce:	d50f      	bpl.n	8001ff0 <_svfiprintf_r+0x34>
 8001fd0:	690b      	ldr	r3, [r1, #16]
 8001fd2:	b96b      	cbnz	r3, 8001ff0 <_svfiprintf_r+0x34>
 8001fd4:	2140      	movs	r1, #64	; 0x40
 8001fd6:	f000 fafd 	bl	80025d4 <_malloc_r>
 8001fda:	6028      	str	r0, [r5, #0]
 8001fdc:	6128      	str	r0, [r5, #16]
 8001fde:	b928      	cbnz	r0, 8001fec <_svfiprintf_r+0x30>
 8001fe0:	230c      	movs	r3, #12
 8001fe2:	f8c8 3000 	str.w	r3, [r8]
 8001fe6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001fea:	e0c4      	b.n	8002176 <_svfiprintf_r+0x1ba>
 8001fec:	2340      	movs	r3, #64	; 0x40
 8001fee:	616b      	str	r3, [r5, #20]
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	9309      	str	r3, [sp, #36]	; 0x24
 8001ff4:	2320      	movs	r3, #32
 8001ff6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001ffa:	2330      	movs	r3, #48	; 0x30
 8001ffc:	f04f 0b01 	mov.w	fp, #1
 8002000:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002004:	4637      	mov	r7, r6
 8002006:	463c      	mov	r4, r7
 8002008:	f814 3b01 	ldrb.w	r3, [r4], #1
 800200c:	2b00      	cmp	r3, #0
 800200e:	d13c      	bne.n	800208a <_svfiprintf_r+0xce>
 8002010:	ebb7 0a06 	subs.w	sl, r7, r6
 8002014:	d00b      	beq.n	800202e <_svfiprintf_r+0x72>
 8002016:	4653      	mov	r3, sl
 8002018:	4632      	mov	r2, r6
 800201a:	4629      	mov	r1, r5
 800201c:	4640      	mov	r0, r8
 800201e:	f7ff ff71 	bl	8001f04 <__ssputs_r>
 8002022:	3001      	adds	r0, #1
 8002024:	f000 80a2 	beq.w	800216c <_svfiprintf_r+0x1b0>
 8002028:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800202a:	4453      	add	r3, sl
 800202c:	9309      	str	r3, [sp, #36]	; 0x24
 800202e:	783b      	ldrb	r3, [r7, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	f000 809b 	beq.w	800216c <_svfiprintf_r+0x1b0>
 8002036:	2300      	movs	r3, #0
 8002038:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800203c:	9304      	str	r3, [sp, #16]
 800203e:	9307      	str	r3, [sp, #28]
 8002040:	9205      	str	r2, [sp, #20]
 8002042:	9306      	str	r3, [sp, #24]
 8002044:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002048:	931a      	str	r3, [sp, #104]	; 0x68
 800204a:	2205      	movs	r2, #5
 800204c:	7821      	ldrb	r1, [r4, #0]
 800204e:	4850      	ldr	r0, [pc, #320]	; (8002190 <_svfiprintf_r+0x1d4>)
 8002050:	f000 fa40 	bl	80024d4 <memchr>
 8002054:	1c67      	adds	r7, r4, #1
 8002056:	9b04      	ldr	r3, [sp, #16]
 8002058:	b9d8      	cbnz	r0, 8002092 <_svfiprintf_r+0xd6>
 800205a:	06d9      	lsls	r1, r3, #27
 800205c:	bf44      	itt	mi
 800205e:	2220      	movmi	r2, #32
 8002060:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002064:	071a      	lsls	r2, r3, #28
 8002066:	bf44      	itt	mi
 8002068:	222b      	movmi	r2, #43	; 0x2b
 800206a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800206e:	7822      	ldrb	r2, [r4, #0]
 8002070:	2a2a      	cmp	r2, #42	; 0x2a
 8002072:	d016      	beq.n	80020a2 <_svfiprintf_r+0xe6>
 8002074:	2100      	movs	r1, #0
 8002076:	200a      	movs	r0, #10
 8002078:	9a07      	ldr	r2, [sp, #28]
 800207a:	4627      	mov	r7, r4
 800207c:	783b      	ldrb	r3, [r7, #0]
 800207e:	3401      	adds	r4, #1
 8002080:	3b30      	subs	r3, #48	; 0x30
 8002082:	2b09      	cmp	r3, #9
 8002084:	d950      	bls.n	8002128 <_svfiprintf_r+0x16c>
 8002086:	b1c9      	cbz	r1, 80020bc <_svfiprintf_r+0x100>
 8002088:	e011      	b.n	80020ae <_svfiprintf_r+0xf2>
 800208a:	2b25      	cmp	r3, #37	; 0x25
 800208c:	d0c0      	beq.n	8002010 <_svfiprintf_r+0x54>
 800208e:	4627      	mov	r7, r4
 8002090:	e7b9      	b.n	8002006 <_svfiprintf_r+0x4a>
 8002092:	4a3f      	ldr	r2, [pc, #252]	; (8002190 <_svfiprintf_r+0x1d4>)
 8002094:	463c      	mov	r4, r7
 8002096:	1a80      	subs	r0, r0, r2
 8002098:	fa0b f000 	lsl.w	r0, fp, r0
 800209c:	4318      	orrs	r0, r3
 800209e:	9004      	str	r0, [sp, #16]
 80020a0:	e7d3      	b.n	800204a <_svfiprintf_r+0x8e>
 80020a2:	9a03      	ldr	r2, [sp, #12]
 80020a4:	1d11      	adds	r1, r2, #4
 80020a6:	6812      	ldr	r2, [r2, #0]
 80020a8:	9103      	str	r1, [sp, #12]
 80020aa:	2a00      	cmp	r2, #0
 80020ac:	db01      	blt.n	80020b2 <_svfiprintf_r+0xf6>
 80020ae:	9207      	str	r2, [sp, #28]
 80020b0:	e004      	b.n	80020bc <_svfiprintf_r+0x100>
 80020b2:	4252      	negs	r2, r2
 80020b4:	f043 0302 	orr.w	r3, r3, #2
 80020b8:	9207      	str	r2, [sp, #28]
 80020ba:	9304      	str	r3, [sp, #16]
 80020bc:	783b      	ldrb	r3, [r7, #0]
 80020be:	2b2e      	cmp	r3, #46	; 0x2e
 80020c0:	d10d      	bne.n	80020de <_svfiprintf_r+0x122>
 80020c2:	787b      	ldrb	r3, [r7, #1]
 80020c4:	1c79      	adds	r1, r7, #1
 80020c6:	2b2a      	cmp	r3, #42	; 0x2a
 80020c8:	d132      	bne.n	8002130 <_svfiprintf_r+0x174>
 80020ca:	9b03      	ldr	r3, [sp, #12]
 80020cc:	3702      	adds	r7, #2
 80020ce:	1d1a      	adds	r2, r3, #4
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	9203      	str	r2, [sp, #12]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	bfb8      	it	lt
 80020d8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80020dc:	9305      	str	r3, [sp, #20]
 80020de:	4c2d      	ldr	r4, [pc, #180]	; (8002194 <_svfiprintf_r+0x1d8>)
 80020e0:	2203      	movs	r2, #3
 80020e2:	7839      	ldrb	r1, [r7, #0]
 80020e4:	4620      	mov	r0, r4
 80020e6:	f000 f9f5 	bl	80024d4 <memchr>
 80020ea:	b138      	cbz	r0, 80020fc <_svfiprintf_r+0x140>
 80020ec:	2340      	movs	r3, #64	; 0x40
 80020ee:	1b00      	subs	r0, r0, r4
 80020f0:	fa03 f000 	lsl.w	r0, r3, r0
 80020f4:	9b04      	ldr	r3, [sp, #16]
 80020f6:	3701      	adds	r7, #1
 80020f8:	4303      	orrs	r3, r0
 80020fa:	9304      	str	r3, [sp, #16]
 80020fc:	7839      	ldrb	r1, [r7, #0]
 80020fe:	2206      	movs	r2, #6
 8002100:	4825      	ldr	r0, [pc, #148]	; (8002198 <_svfiprintf_r+0x1dc>)
 8002102:	1c7e      	adds	r6, r7, #1
 8002104:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002108:	f000 f9e4 	bl	80024d4 <memchr>
 800210c:	2800      	cmp	r0, #0
 800210e:	d035      	beq.n	800217c <_svfiprintf_r+0x1c0>
 8002110:	4b22      	ldr	r3, [pc, #136]	; (800219c <_svfiprintf_r+0x1e0>)
 8002112:	b9fb      	cbnz	r3, 8002154 <_svfiprintf_r+0x198>
 8002114:	9b03      	ldr	r3, [sp, #12]
 8002116:	3307      	adds	r3, #7
 8002118:	f023 0307 	bic.w	r3, r3, #7
 800211c:	3308      	adds	r3, #8
 800211e:	9303      	str	r3, [sp, #12]
 8002120:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002122:	444b      	add	r3, r9
 8002124:	9309      	str	r3, [sp, #36]	; 0x24
 8002126:	e76d      	b.n	8002004 <_svfiprintf_r+0x48>
 8002128:	fb00 3202 	mla	r2, r0, r2, r3
 800212c:	2101      	movs	r1, #1
 800212e:	e7a4      	b.n	800207a <_svfiprintf_r+0xbe>
 8002130:	2300      	movs	r3, #0
 8002132:	240a      	movs	r4, #10
 8002134:	4618      	mov	r0, r3
 8002136:	9305      	str	r3, [sp, #20]
 8002138:	460f      	mov	r7, r1
 800213a:	783a      	ldrb	r2, [r7, #0]
 800213c:	3101      	adds	r1, #1
 800213e:	3a30      	subs	r2, #48	; 0x30
 8002140:	2a09      	cmp	r2, #9
 8002142:	d903      	bls.n	800214c <_svfiprintf_r+0x190>
 8002144:	2b00      	cmp	r3, #0
 8002146:	d0ca      	beq.n	80020de <_svfiprintf_r+0x122>
 8002148:	9005      	str	r0, [sp, #20]
 800214a:	e7c8      	b.n	80020de <_svfiprintf_r+0x122>
 800214c:	fb04 2000 	mla	r0, r4, r0, r2
 8002150:	2301      	movs	r3, #1
 8002152:	e7f1      	b.n	8002138 <_svfiprintf_r+0x17c>
 8002154:	ab03      	add	r3, sp, #12
 8002156:	9300      	str	r3, [sp, #0]
 8002158:	462a      	mov	r2, r5
 800215a:	4b11      	ldr	r3, [pc, #68]	; (80021a0 <_svfiprintf_r+0x1e4>)
 800215c:	a904      	add	r1, sp, #16
 800215e:	4640      	mov	r0, r8
 8002160:	f3af 8000 	nop.w
 8002164:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8002168:	4681      	mov	r9, r0
 800216a:	d1d9      	bne.n	8002120 <_svfiprintf_r+0x164>
 800216c:	89ab      	ldrh	r3, [r5, #12]
 800216e:	065b      	lsls	r3, r3, #25
 8002170:	f53f af39 	bmi.w	8001fe6 <_svfiprintf_r+0x2a>
 8002174:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002176:	b01d      	add	sp, #116	; 0x74
 8002178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800217c:	ab03      	add	r3, sp, #12
 800217e:	9300      	str	r3, [sp, #0]
 8002180:	462a      	mov	r2, r5
 8002182:	4b07      	ldr	r3, [pc, #28]	; (80021a0 <_svfiprintf_r+0x1e4>)
 8002184:	a904      	add	r1, sp, #16
 8002186:	4640      	mov	r0, r8
 8002188:	f000 f884 	bl	8002294 <_printf_i>
 800218c:	e7ea      	b.n	8002164 <_svfiprintf_r+0x1a8>
 800218e:	bf00      	nop
 8002190:	0800279d 	.word	0x0800279d
 8002194:	080027a3 	.word	0x080027a3
 8002198:	080027a7 	.word	0x080027a7
 800219c:	00000000 	.word	0x00000000
 80021a0:	08001f05 	.word	0x08001f05

080021a4 <_printf_common>:
 80021a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80021a8:	4691      	mov	r9, r2
 80021aa:	461f      	mov	r7, r3
 80021ac:	688a      	ldr	r2, [r1, #8]
 80021ae:	690b      	ldr	r3, [r1, #16]
 80021b0:	4606      	mov	r6, r0
 80021b2:	4293      	cmp	r3, r2
 80021b4:	bfb8      	it	lt
 80021b6:	4613      	movlt	r3, r2
 80021b8:	f8c9 3000 	str.w	r3, [r9]
 80021bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80021c0:	460c      	mov	r4, r1
 80021c2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80021c6:	b112      	cbz	r2, 80021ce <_printf_common+0x2a>
 80021c8:	3301      	adds	r3, #1
 80021ca:	f8c9 3000 	str.w	r3, [r9]
 80021ce:	6823      	ldr	r3, [r4, #0]
 80021d0:	0699      	lsls	r1, r3, #26
 80021d2:	bf42      	ittt	mi
 80021d4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80021d8:	3302      	addmi	r3, #2
 80021da:	f8c9 3000 	strmi.w	r3, [r9]
 80021de:	6825      	ldr	r5, [r4, #0]
 80021e0:	f015 0506 	ands.w	r5, r5, #6
 80021e4:	d107      	bne.n	80021f6 <_printf_common+0x52>
 80021e6:	f104 0a19 	add.w	sl, r4, #25
 80021ea:	68e3      	ldr	r3, [r4, #12]
 80021ec:	f8d9 2000 	ldr.w	r2, [r9]
 80021f0:	1a9b      	subs	r3, r3, r2
 80021f2:	429d      	cmp	r5, r3
 80021f4:	db2a      	blt.n	800224c <_printf_common+0xa8>
 80021f6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80021fa:	6822      	ldr	r2, [r4, #0]
 80021fc:	3300      	adds	r3, #0
 80021fe:	bf18      	it	ne
 8002200:	2301      	movne	r3, #1
 8002202:	0692      	lsls	r2, r2, #26
 8002204:	d42f      	bmi.n	8002266 <_printf_common+0xc2>
 8002206:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800220a:	4639      	mov	r1, r7
 800220c:	4630      	mov	r0, r6
 800220e:	47c0      	blx	r8
 8002210:	3001      	adds	r0, #1
 8002212:	d022      	beq.n	800225a <_printf_common+0xb6>
 8002214:	6823      	ldr	r3, [r4, #0]
 8002216:	68e5      	ldr	r5, [r4, #12]
 8002218:	f003 0306 	and.w	r3, r3, #6
 800221c:	2b04      	cmp	r3, #4
 800221e:	bf18      	it	ne
 8002220:	2500      	movne	r5, #0
 8002222:	f8d9 2000 	ldr.w	r2, [r9]
 8002226:	f04f 0900 	mov.w	r9, #0
 800222a:	bf08      	it	eq
 800222c:	1aad      	subeq	r5, r5, r2
 800222e:	68a3      	ldr	r3, [r4, #8]
 8002230:	6922      	ldr	r2, [r4, #16]
 8002232:	bf08      	it	eq
 8002234:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002238:	4293      	cmp	r3, r2
 800223a:	bfc4      	itt	gt
 800223c:	1a9b      	subgt	r3, r3, r2
 800223e:	18ed      	addgt	r5, r5, r3
 8002240:	341a      	adds	r4, #26
 8002242:	454d      	cmp	r5, r9
 8002244:	d11b      	bne.n	800227e <_printf_common+0xda>
 8002246:	2000      	movs	r0, #0
 8002248:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800224c:	2301      	movs	r3, #1
 800224e:	4652      	mov	r2, sl
 8002250:	4639      	mov	r1, r7
 8002252:	4630      	mov	r0, r6
 8002254:	47c0      	blx	r8
 8002256:	3001      	adds	r0, #1
 8002258:	d103      	bne.n	8002262 <_printf_common+0xbe>
 800225a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800225e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002262:	3501      	adds	r5, #1
 8002264:	e7c1      	b.n	80021ea <_printf_common+0x46>
 8002266:	2030      	movs	r0, #48	; 0x30
 8002268:	18e1      	adds	r1, r4, r3
 800226a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800226e:	1c5a      	adds	r2, r3, #1
 8002270:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002274:	4422      	add	r2, r4
 8002276:	3302      	adds	r3, #2
 8002278:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800227c:	e7c3      	b.n	8002206 <_printf_common+0x62>
 800227e:	2301      	movs	r3, #1
 8002280:	4622      	mov	r2, r4
 8002282:	4639      	mov	r1, r7
 8002284:	4630      	mov	r0, r6
 8002286:	47c0      	blx	r8
 8002288:	3001      	adds	r0, #1
 800228a:	d0e6      	beq.n	800225a <_printf_common+0xb6>
 800228c:	f109 0901 	add.w	r9, r9, #1
 8002290:	e7d7      	b.n	8002242 <_printf_common+0x9e>
	...

08002294 <_printf_i>:
 8002294:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002298:	4617      	mov	r7, r2
 800229a:	7e0a      	ldrb	r2, [r1, #24]
 800229c:	b085      	sub	sp, #20
 800229e:	2a6e      	cmp	r2, #110	; 0x6e
 80022a0:	4698      	mov	r8, r3
 80022a2:	4606      	mov	r6, r0
 80022a4:	460c      	mov	r4, r1
 80022a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80022a8:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80022ac:	f000 80bc 	beq.w	8002428 <_printf_i+0x194>
 80022b0:	d81a      	bhi.n	80022e8 <_printf_i+0x54>
 80022b2:	2a63      	cmp	r2, #99	; 0x63
 80022b4:	d02e      	beq.n	8002314 <_printf_i+0x80>
 80022b6:	d80a      	bhi.n	80022ce <_printf_i+0x3a>
 80022b8:	2a00      	cmp	r2, #0
 80022ba:	f000 80c8 	beq.w	800244e <_printf_i+0x1ba>
 80022be:	2a58      	cmp	r2, #88	; 0x58
 80022c0:	f000 808a 	beq.w	80023d8 <_printf_i+0x144>
 80022c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80022c8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80022cc:	e02a      	b.n	8002324 <_printf_i+0x90>
 80022ce:	2a64      	cmp	r2, #100	; 0x64
 80022d0:	d001      	beq.n	80022d6 <_printf_i+0x42>
 80022d2:	2a69      	cmp	r2, #105	; 0x69
 80022d4:	d1f6      	bne.n	80022c4 <_printf_i+0x30>
 80022d6:	6821      	ldr	r1, [r4, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	f011 0f80 	tst.w	r1, #128	; 0x80
 80022de:	d023      	beq.n	8002328 <_printf_i+0x94>
 80022e0:	1d11      	adds	r1, r2, #4
 80022e2:	6019      	str	r1, [r3, #0]
 80022e4:	6813      	ldr	r3, [r2, #0]
 80022e6:	e027      	b.n	8002338 <_printf_i+0xa4>
 80022e8:	2a73      	cmp	r2, #115	; 0x73
 80022ea:	f000 80b4 	beq.w	8002456 <_printf_i+0x1c2>
 80022ee:	d808      	bhi.n	8002302 <_printf_i+0x6e>
 80022f0:	2a6f      	cmp	r2, #111	; 0x6f
 80022f2:	d02a      	beq.n	800234a <_printf_i+0xb6>
 80022f4:	2a70      	cmp	r2, #112	; 0x70
 80022f6:	d1e5      	bne.n	80022c4 <_printf_i+0x30>
 80022f8:	680a      	ldr	r2, [r1, #0]
 80022fa:	f042 0220 	orr.w	r2, r2, #32
 80022fe:	600a      	str	r2, [r1, #0]
 8002300:	e003      	b.n	800230a <_printf_i+0x76>
 8002302:	2a75      	cmp	r2, #117	; 0x75
 8002304:	d021      	beq.n	800234a <_printf_i+0xb6>
 8002306:	2a78      	cmp	r2, #120	; 0x78
 8002308:	d1dc      	bne.n	80022c4 <_printf_i+0x30>
 800230a:	2278      	movs	r2, #120	; 0x78
 800230c:	496f      	ldr	r1, [pc, #444]	; (80024cc <_printf_i+0x238>)
 800230e:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8002312:	e064      	b.n	80023de <_printf_i+0x14a>
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800231a:	1d11      	adds	r1, r2, #4
 800231c:	6019      	str	r1, [r3, #0]
 800231e:	6813      	ldr	r3, [r2, #0]
 8002320:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002324:	2301      	movs	r3, #1
 8002326:	e0a3      	b.n	8002470 <_printf_i+0x1dc>
 8002328:	f011 0f40 	tst.w	r1, #64	; 0x40
 800232c:	f102 0104 	add.w	r1, r2, #4
 8002330:	6019      	str	r1, [r3, #0]
 8002332:	d0d7      	beq.n	80022e4 <_printf_i+0x50>
 8002334:	f9b2 3000 	ldrsh.w	r3, [r2]
 8002338:	2b00      	cmp	r3, #0
 800233a:	da03      	bge.n	8002344 <_printf_i+0xb0>
 800233c:	222d      	movs	r2, #45	; 0x2d
 800233e:	425b      	negs	r3, r3
 8002340:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002344:	4962      	ldr	r1, [pc, #392]	; (80024d0 <_printf_i+0x23c>)
 8002346:	220a      	movs	r2, #10
 8002348:	e017      	b.n	800237a <_printf_i+0xe6>
 800234a:	6820      	ldr	r0, [r4, #0]
 800234c:	6819      	ldr	r1, [r3, #0]
 800234e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002352:	d003      	beq.n	800235c <_printf_i+0xc8>
 8002354:	1d08      	adds	r0, r1, #4
 8002356:	6018      	str	r0, [r3, #0]
 8002358:	680b      	ldr	r3, [r1, #0]
 800235a:	e006      	b.n	800236a <_printf_i+0xd6>
 800235c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002360:	f101 0004 	add.w	r0, r1, #4
 8002364:	6018      	str	r0, [r3, #0]
 8002366:	d0f7      	beq.n	8002358 <_printf_i+0xc4>
 8002368:	880b      	ldrh	r3, [r1, #0]
 800236a:	2a6f      	cmp	r2, #111	; 0x6f
 800236c:	bf14      	ite	ne
 800236e:	220a      	movne	r2, #10
 8002370:	2208      	moveq	r2, #8
 8002372:	4957      	ldr	r1, [pc, #348]	; (80024d0 <_printf_i+0x23c>)
 8002374:	2000      	movs	r0, #0
 8002376:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800237a:	6865      	ldr	r5, [r4, #4]
 800237c:	2d00      	cmp	r5, #0
 800237e:	60a5      	str	r5, [r4, #8]
 8002380:	f2c0 809c 	blt.w	80024bc <_printf_i+0x228>
 8002384:	6820      	ldr	r0, [r4, #0]
 8002386:	f020 0004 	bic.w	r0, r0, #4
 800238a:	6020      	str	r0, [r4, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d13f      	bne.n	8002410 <_printf_i+0x17c>
 8002390:	2d00      	cmp	r5, #0
 8002392:	f040 8095 	bne.w	80024c0 <_printf_i+0x22c>
 8002396:	4675      	mov	r5, lr
 8002398:	2a08      	cmp	r2, #8
 800239a:	d10b      	bne.n	80023b4 <_printf_i+0x120>
 800239c:	6823      	ldr	r3, [r4, #0]
 800239e:	07da      	lsls	r2, r3, #31
 80023a0:	d508      	bpl.n	80023b4 <_printf_i+0x120>
 80023a2:	6923      	ldr	r3, [r4, #16]
 80023a4:	6862      	ldr	r2, [r4, #4]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	bfde      	ittt	le
 80023aa:	2330      	movle	r3, #48	; 0x30
 80023ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 80023b0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80023b4:	ebae 0305 	sub.w	r3, lr, r5
 80023b8:	6123      	str	r3, [r4, #16]
 80023ba:	f8cd 8000 	str.w	r8, [sp]
 80023be:	463b      	mov	r3, r7
 80023c0:	aa03      	add	r2, sp, #12
 80023c2:	4621      	mov	r1, r4
 80023c4:	4630      	mov	r0, r6
 80023c6:	f7ff feed 	bl	80021a4 <_printf_common>
 80023ca:	3001      	adds	r0, #1
 80023cc:	d155      	bne.n	800247a <_printf_i+0x1e6>
 80023ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80023d2:	b005      	add	sp, #20
 80023d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80023d8:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80023dc:	493c      	ldr	r1, [pc, #240]	; (80024d0 <_printf_i+0x23c>)
 80023de:	6822      	ldr	r2, [r4, #0]
 80023e0:	6818      	ldr	r0, [r3, #0]
 80023e2:	f012 0f80 	tst.w	r2, #128	; 0x80
 80023e6:	f100 0504 	add.w	r5, r0, #4
 80023ea:	601d      	str	r5, [r3, #0]
 80023ec:	d001      	beq.n	80023f2 <_printf_i+0x15e>
 80023ee:	6803      	ldr	r3, [r0, #0]
 80023f0:	e002      	b.n	80023f8 <_printf_i+0x164>
 80023f2:	0655      	lsls	r5, r2, #25
 80023f4:	d5fb      	bpl.n	80023ee <_printf_i+0x15a>
 80023f6:	8803      	ldrh	r3, [r0, #0]
 80023f8:	07d0      	lsls	r0, r2, #31
 80023fa:	bf44      	itt	mi
 80023fc:	f042 0220 	orrmi.w	r2, r2, #32
 8002400:	6022      	strmi	r2, [r4, #0]
 8002402:	b91b      	cbnz	r3, 800240c <_printf_i+0x178>
 8002404:	6822      	ldr	r2, [r4, #0]
 8002406:	f022 0220 	bic.w	r2, r2, #32
 800240a:	6022      	str	r2, [r4, #0]
 800240c:	2210      	movs	r2, #16
 800240e:	e7b1      	b.n	8002374 <_printf_i+0xe0>
 8002410:	4675      	mov	r5, lr
 8002412:	fbb3 f0f2 	udiv	r0, r3, r2
 8002416:	fb02 3310 	mls	r3, r2, r0, r3
 800241a:	5ccb      	ldrb	r3, [r1, r3]
 800241c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002420:	4603      	mov	r3, r0
 8002422:	2800      	cmp	r0, #0
 8002424:	d1f5      	bne.n	8002412 <_printf_i+0x17e>
 8002426:	e7b7      	b.n	8002398 <_printf_i+0x104>
 8002428:	6808      	ldr	r0, [r1, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002430:	6949      	ldr	r1, [r1, #20]
 8002432:	d004      	beq.n	800243e <_printf_i+0x1aa>
 8002434:	1d10      	adds	r0, r2, #4
 8002436:	6018      	str	r0, [r3, #0]
 8002438:	6813      	ldr	r3, [r2, #0]
 800243a:	6019      	str	r1, [r3, #0]
 800243c:	e007      	b.n	800244e <_printf_i+0x1ba>
 800243e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002442:	f102 0004 	add.w	r0, r2, #4
 8002446:	6018      	str	r0, [r3, #0]
 8002448:	6813      	ldr	r3, [r2, #0]
 800244a:	d0f6      	beq.n	800243a <_printf_i+0x1a6>
 800244c:	8019      	strh	r1, [r3, #0]
 800244e:	2300      	movs	r3, #0
 8002450:	4675      	mov	r5, lr
 8002452:	6123      	str	r3, [r4, #16]
 8002454:	e7b1      	b.n	80023ba <_printf_i+0x126>
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	1d11      	adds	r1, r2, #4
 800245a:	6019      	str	r1, [r3, #0]
 800245c:	6815      	ldr	r5, [r2, #0]
 800245e:	2100      	movs	r1, #0
 8002460:	6862      	ldr	r2, [r4, #4]
 8002462:	4628      	mov	r0, r5
 8002464:	f000 f836 	bl	80024d4 <memchr>
 8002468:	b108      	cbz	r0, 800246e <_printf_i+0x1da>
 800246a:	1b40      	subs	r0, r0, r5
 800246c:	6060      	str	r0, [r4, #4]
 800246e:	6863      	ldr	r3, [r4, #4]
 8002470:	6123      	str	r3, [r4, #16]
 8002472:	2300      	movs	r3, #0
 8002474:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002478:	e79f      	b.n	80023ba <_printf_i+0x126>
 800247a:	6923      	ldr	r3, [r4, #16]
 800247c:	462a      	mov	r2, r5
 800247e:	4639      	mov	r1, r7
 8002480:	4630      	mov	r0, r6
 8002482:	47c0      	blx	r8
 8002484:	3001      	adds	r0, #1
 8002486:	d0a2      	beq.n	80023ce <_printf_i+0x13a>
 8002488:	6823      	ldr	r3, [r4, #0]
 800248a:	079b      	lsls	r3, r3, #30
 800248c:	d507      	bpl.n	800249e <_printf_i+0x20a>
 800248e:	2500      	movs	r5, #0
 8002490:	f104 0919 	add.w	r9, r4, #25
 8002494:	68e3      	ldr	r3, [r4, #12]
 8002496:	9a03      	ldr	r2, [sp, #12]
 8002498:	1a9b      	subs	r3, r3, r2
 800249a:	429d      	cmp	r5, r3
 800249c:	db05      	blt.n	80024aa <_printf_i+0x216>
 800249e:	68e0      	ldr	r0, [r4, #12]
 80024a0:	9b03      	ldr	r3, [sp, #12]
 80024a2:	4298      	cmp	r0, r3
 80024a4:	bfb8      	it	lt
 80024a6:	4618      	movlt	r0, r3
 80024a8:	e793      	b.n	80023d2 <_printf_i+0x13e>
 80024aa:	2301      	movs	r3, #1
 80024ac:	464a      	mov	r2, r9
 80024ae:	4639      	mov	r1, r7
 80024b0:	4630      	mov	r0, r6
 80024b2:	47c0      	blx	r8
 80024b4:	3001      	adds	r0, #1
 80024b6:	d08a      	beq.n	80023ce <_printf_i+0x13a>
 80024b8:	3501      	adds	r5, #1
 80024ba:	e7eb      	b.n	8002494 <_printf_i+0x200>
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d1a7      	bne.n	8002410 <_printf_i+0x17c>
 80024c0:	780b      	ldrb	r3, [r1, #0]
 80024c2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80024c6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80024ca:	e765      	b.n	8002398 <_printf_i+0x104>
 80024cc:	080027bf 	.word	0x080027bf
 80024d0:	080027ae 	.word	0x080027ae

080024d4 <memchr>:
 80024d4:	b510      	push	{r4, lr}
 80024d6:	b2c9      	uxtb	r1, r1
 80024d8:	4402      	add	r2, r0
 80024da:	4290      	cmp	r0, r2
 80024dc:	4603      	mov	r3, r0
 80024de:	d101      	bne.n	80024e4 <memchr+0x10>
 80024e0:	2000      	movs	r0, #0
 80024e2:	bd10      	pop	{r4, pc}
 80024e4:	781c      	ldrb	r4, [r3, #0]
 80024e6:	3001      	adds	r0, #1
 80024e8:	428c      	cmp	r4, r1
 80024ea:	d1f6      	bne.n	80024da <memchr+0x6>
 80024ec:	4618      	mov	r0, r3
 80024ee:	bd10      	pop	{r4, pc}

080024f0 <memcpy>:
 80024f0:	b510      	push	{r4, lr}
 80024f2:	1e43      	subs	r3, r0, #1
 80024f4:	440a      	add	r2, r1
 80024f6:	4291      	cmp	r1, r2
 80024f8:	d100      	bne.n	80024fc <memcpy+0xc>
 80024fa:	bd10      	pop	{r4, pc}
 80024fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002500:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002504:	e7f7      	b.n	80024f6 <memcpy+0x6>

08002506 <memmove>:
 8002506:	4288      	cmp	r0, r1
 8002508:	b510      	push	{r4, lr}
 800250a:	eb01 0302 	add.w	r3, r1, r2
 800250e:	d803      	bhi.n	8002518 <memmove+0x12>
 8002510:	1e42      	subs	r2, r0, #1
 8002512:	4299      	cmp	r1, r3
 8002514:	d10c      	bne.n	8002530 <memmove+0x2a>
 8002516:	bd10      	pop	{r4, pc}
 8002518:	4298      	cmp	r0, r3
 800251a:	d2f9      	bcs.n	8002510 <memmove+0xa>
 800251c:	1881      	adds	r1, r0, r2
 800251e:	1ad2      	subs	r2, r2, r3
 8002520:	42d3      	cmn	r3, r2
 8002522:	d100      	bne.n	8002526 <memmove+0x20>
 8002524:	bd10      	pop	{r4, pc}
 8002526:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800252a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800252e:	e7f7      	b.n	8002520 <memmove+0x1a>
 8002530:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002534:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002538:	e7eb      	b.n	8002512 <memmove+0xc>
	...

0800253c <_free_r>:
 800253c:	b538      	push	{r3, r4, r5, lr}
 800253e:	4605      	mov	r5, r0
 8002540:	2900      	cmp	r1, #0
 8002542:	d043      	beq.n	80025cc <_free_r+0x90>
 8002544:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002548:	1f0c      	subs	r4, r1, #4
 800254a:	2b00      	cmp	r3, #0
 800254c:	bfb8      	it	lt
 800254e:	18e4      	addlt	r4, r4, r3
 8002550:	f000 f8d4 	bl	80026fc <__malloc_lock>
 8002554:	4a1e      	ldr	r2, [pc, #120]	; (80025d0 <_free_r+0x94>)
 8002556:	6813      	ldr	r3, [r2, #0]
 8002558:	4610      	mov	r0, r2
 800255a:	b933      	cbnz	r3, 800256a <_free_r+0x2e>
 800255c:	6063      	str	r3, [r4, #4]
 800255e:	6014      	str	r4, [r2, #0]
 8002560:	4628      	mov	r0, r5
 8002562:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002566:	f000 b8ca 	b.w	80026fe <__malloc_unlock>
 800256a:	42a3      	cmp	r3, r4
 800256c:	d90b      	bls.n	8002586 <_free_r+0x4a>
 800256e:	6821      	ldr	r1, [r4, #0]
 8002570:	1862      	adds	r2, r4, r1
 8002572:	4293      	cmp	r3, r2
 8002574:	bf01      	itttt	eq
 8002576:	681a      	ldreq	r2, [r3, #0]
 8002578:	685b      	ldreq	r3, [r3, #4]
 800257a:	1852      	addeq	r2, r2, r1
 800257c:	6022      	streq	r2, [r4, #0]
 800257e:	6063      	str	r3, [r4, #4]
 8002580:	6004      	str	r4, [r0, #0]
 8002582:	e7ed      	b.n	8002560 <_free_r+0x24>
 8002584:	4613      	mov	r3, r2
 8002586:	685a      	ldr	r2, [r3, #4]
 8002588:	b10a      	cbz	r2, 800258e <_free_r+0x52>
 800258a:	42a2      	cmp	r2, r4
 800258c:	d9fa      	bls.n	8002584 <_free_r+0x48>
 800258e:	6819      	ldr	r1, [r3, #0]
 8002590:	1858      	adds	r0, r3, r1
 8002592:	42a0      	cmp	r0, r4
 8002594:	d10b      	bne.n	80025ae <_free_r+0x72>
 8002596:	6820      	ldr	r0, [r4, #0]
 8002598:	4401      	add	r1, r0
 800259a:	1858      	adds	r0, r3, r1
 800259c:	4282      	cmp	r2, r0
 800259e:	6019      	str	r1, [r3, #0]
 80025a0:	d1de      	bne.n	8002560 <_free_r+0x24>
 80025a2:	6810      	ldr	r0, [r2, #0]
 80025a4:	6852      	ldr	r2, [r2, #4]
 80025a6:	4401      	add	r1, r0
 80025a8:	6019      	str	r1, [r3, #0]
 80025aa:	605a      	str	r2, [r3, #4]
 80025ac:	e7d8      	b.n	8002560 <_free_r+0x24>
 80025ae:	d902      	bls.n	80025b6 <_free_r+0x7a>
 80025b0:	230c      	movs	r3, #12
 80025b2:	602b      	str	r3, [r5, #0]
 80025b4:	e7d4      	b.n	8002560 <_free_r+0x24>
 80025b6:	6820      	ldr	r0, [r4, #0]
 80025b8:	1821      	adds	r1, r4, r0
 80025ba:	428a      	cmp	r2, r1
 80025bc:	bf01      	itttt	eq
 80025be:	6811      	ldreq	r1, [r2, #0]
 80025c0:	6852      	ldreq	r2, [r2, #4]
 80025c2:	1809      	addeq	r1, r1, r0
 80025c4:	6021      	streq	r1, [r4, #0]
 80025c6:	6062      	str	r2, [r4, #4]
 80025c8:	605c      	str	r4, [r3, #4]
 80025ca:	e7c9      	b.n	8002560 <_free_r+0x24>
 80025cc:	bd38      	pop	{r3, r4, r5, pc}
 80025ce:	bf00      	nop
 80025d0:	20000090 	.word	0x20000090

080025d4 <_malloc_r>:
 80025d4:	b570      	push	{r4, r5, r6, lr}
 80025d6:	1ccd      	adds	r5, r1, #3
 80025d8:	f025 0503 	bic.w	r5, r5, #3
 80025dc:	3508      	adds	r5, #8
 80025de:	2d0c      	cmp	r5, #12
 80025e0:	bf38      	it	cc
 80025e2:	250c      	movcc	r5, #12
 80025e4:	2d00      	cmp	r5, #0
 80025e6:	4606      	mov	r6, r0
 80025e8:	db01      	blt.n	80025ee <_malloc_r+0x1a>
 80025ea:	42a9      	cmp	r1, r5
 80025ec:	d903      	bls.n	80025f6 <_malloc_r+0x22>
 80025ee:	230c      	movs	r3, #12
 80025f0:	6033      	str	r3, [r6, #0]
 80025f2:	2000      	movs	r0, #0
 80025f4:	bd70      	pop	{r4, r5, r6, pc}
 80025f6:	f000 f881 	bl	80026fc <__malloc_lock>
 80025fa:	4a23      	ldr	r2, [pc, #140]	; (8002688 <_malloc_r+0xb4>)
 80025fc:	6814      	ldr	r4, [r2, #0]
 80025fe:	4621      	mov	r1, r4
 8002600:	b991      	cbnz	r1, 8002628 <_malloc_r+0x54>
 8002602:	4c22      	ldr	r4, [pc, #136]	; (800268c <_malloc_r+0xb8>)
 8002604:	6823      	ldr	r3, [r4, #0]
 8002606:	b91b      	cbnz	r3, 8002610 <_malloc_r+0x3c>
 8002608:	4630      	mov	r0, r6
 800260a:	f000 f867 	bl	80026dc <_sbrk_r>
 800260e:	6020      	str	r0, [r4, #0]
 8002610:	4629      	mov	r1, r5
 8002612:	4630      	mov	r0, r6
 8002614:	f000 f862 	bl	80026dc <_sbrk_r>
 8002618:	1c43      	adds	r3, r0, #1
 800261a:	d126      	bne.n	800266a <_malloc_r+0x96>
 800261c:	230c      	movs	r3, #12
 800261e:	4630      	mov	r0, r6
 8002620:	6033      	str	r3, [r6, #0]
 8002622:	f000 f86c 	bl	80026fe <__malloc_unlock>
 8002626:	e7e4      	b.n	80025f2 <_malloc_r+0x1e>
 8002628:	680b      	ldr	r3, [r1, #0]
 800262a:	1b5b      	subs	r3, r3, r5
 800262c:	d41a      	bmi.n	8002664 <_malloc_r+0x90>
 800262e:	2b0b      	cmp	r3, #11
 8002630:	d90f      	bls.n	8002652 <_malloc_r+0x7e>
 8002632:	600b      	str	r3, [r1, #0]
 8002634:	18cc      	adds	r4, r1, r3
 8002636:	50cd      	str	r5, [r1, r3]
 8002638:	4630      	mov	r0, r6
 800263a:	f000 f860 	bl	80026fe <__malloc_unlock>
 800263e:	f104 000b 	add.w	r0, r4, #11
 8002642:	1d23      	adds	r3, r4, #4
 8002644:	f020 0007 	bic.w	r0, r0, #7
 8002648:	1ac3      	subs	r3, r0, r3
 800264a:	d01b      	beq.n	8002684 <_malloc_r+0xb0>
 800264c:	425a      	negs	r2, r3
 800264e:	50e2      	str	r2, [r4, r3]
 8002650:	bd70      	pop	{r4, r5, r6, pc}
 8002652:	428c      	cmp	r4, r1
 8002654:	bf0b      	itete	eq
 8002656:	6863      	ldreq	r3, [r4, #4]
 8002658:	684b      	ldrne	r3, [r1, #4]
 800265a:	6013      	streq	r3, [r2, #0]
 800265c:	6063      	strne	r3, [r4, #4]
 800265e:	bf18      	it	ne
 8002660:	460c      	movne	r4, r1
 8002662:	e7e9      	b.n	8002638 <_malloc_r+0x64>
 8002664:	460c      	mov	r4, r1
 8002666:	6849      	ldr	r1, [r1, #4]
 8002668:	e7ca      	b.n	8002600 <_malloc_r+0x2c>
 800266a:	1cc4      	adds	r4, r0, #3
 800266c:	f024 0403 	bic.w	r4, r4, #3
 8002670:	42a0      	cmp	r0, r4
 8002672:	d005      	beq.n	8002680 <_malloc_r+0xac>
 8002674:	1a21      	subs	r1, r4, r0
 8002676:	4630      	mov	r0, r6
 8002678:	f000 f830 	bl	80026dc <_sbrk_r>
 800267c:	3001      	adds	r0, #1
 800267e:	d0cd      	beq.n	800261c <_malloc_r+0x48>
 8002680:	6025      	str	r5, [r4, #0]
 8002682:	e7d9      	b.n	8002638 <_malloc_r+0x64>
 8002684:	bd70      	pop	{r4, r5, r6, pc}
 8002686:	bf00      	nop
 8002688:	20000090 	.word	0x20000090
 800268c:	20000094 	.word	0x20000094

08002690 <_realloc_r>:
 8002690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002692:	4607      	mov	r7, r0
 8002694:	4614      	mov	r4, r2
 8002696:	460e      	mov	r6, r1
 8002698:	b921      	cbnz	r1, 80026a4 <_realloc_r+0x14>
 800269a:	4611      	mov	r1, r2
 800269c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80026a0:	f7ff bf98 	b.w	80025d4 <_malloc_r>
 80026a4:	b922      	cbnz	r2, 80026b0 <_realloc_r+0x20>
 80026a6:	f7ff ff49 	bl	800253c <_free_r>
 80026aa:	4625      	mov	r5, r4
 80026ac:	4628      	mov	r0, r5
 80026ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80026b0:	f000 f826 	bl	8002700 <_malloc_usable_size_r>
 80026b4:	4284      	cmp	r4, r0
 80026b6:	d90f      	bls.n	80026d8 <_realloc_r+0x48>
 80026b8:	4621      	mov	r1, r4
 80026ba:	4638      	mov	r0, r7
 80026bc:	f7ff ff8a 	bl	80025d4 <_malloc_r>
 80026c0:	4605      	mov	r5, r0
 80026c2:	2800      	cmp	r0, #0
 80026c4:	d0f2      	beq.n	80026ac <_realloc_r+0x1c>
 80026c6:	4631      	mov	r1, r6
 80026c8:	4622      	mov	r2, r4
 80026ca:	f7ff ff11 	bl	80024f0 <memcpy>
 80026ce:	4631      	mov	r1, r6
 80026d0:	4638      	mov	r0, r7
 80026d2:	f7ff ff33 	bl	800253c <_free_r>
 80026d6:	e7e9      	b.n	80026ac <_realloc_r+0x1c>
 80026d8:	4635      	mov	r5, r6
 80026da:	e7e7      	b.n	80026ac <_realloc_r+0x1c>

080026dc <_sbrk_r>:
 80026dc:	b538      	push	{r3, r4, r5, lr}
 80026de:	2300      	movs	r3, #0
 80026e0:	4c05      	ldr	r4, [pc, #20]	; (80026f8 <_sbrk_r+0x1c>)
 80026e2:	4605      	mov	r5, r0
 80026e4:	4608      	mov	r0, r1
 80026e6:	6023      	str	r3, [r4, #0]
 80026e8:	f7ff fb38 	bl	8001d5c <_sbrk>
 80026ec:	1c43      	adds	r3, r0, #1
 80026ee:	d102      	bne.n	80026f6 <_sbrk_r+0x1a>
 80026f0:	6823      	ldr	r3, [r4, #0]
 80026f2:	b103      	cbz	r3, 80026f6 <_sbrk_r+0x1a>
 80026f4:	602b      	str	r3, [r5, #0]
 80026f6:	bd38      	pop	{r3, r4, r5, pc}
 80026f8:	20000334 	.word	0x20000334

080026fc <__malloc_lock>:
 80026fc:	4770      	bx	lr

080026fe <__malloc_unlock>:
 80026fe:	4770      	bx	lr

08002700 <_malloc_usable_size_r>:
 8002700:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8002704:	2800      	cmp	r0, #0
 8002706:	f1a0 0004 	sub.w	r0, r0, #4
 800270a:	bfbc      	itt	lt
 800270c:	580b      	ldrlt	r3, [r1, r0]
 800270e:	18c0      	addlt	r0, r0, r3
 8002710:	4770      	bx	lr
	...

08002714 <_init>:
 8002714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002716:	bf00      	nop
 8002718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800271a:	bc08      	pop	{r3}
 800271c:	469e      	mov	lr, r3
 800271e:	4770      	bx	lr

08002720 <_fini>:
 8002720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002722:	bf00      	nop
 8002724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002726:	bc08      	pop	{r3}
 8002728:	469e      	mov	lr, r3
 800272a:	4770      	bx	lr
