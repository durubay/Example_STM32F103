
GSM_F103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002390  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000025c  0800249c  0800249c  0001249c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080026f8  080026f8  000126f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080026fc  080026fc  000126fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000000  08002700  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000178  20000070  08002770  00020070  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200001e8  08002770  000201e8  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000e675  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000021de  00000000  00000000  0002e70e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006390  00000000  00000000  000308ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000009a0  00000000  00000000  00036c80  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000d10  00000000  00000000  00037620  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00004c6d  00000000  00000000  00038330  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003879  00000000  00000000  0003cf9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00040816  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001f7c  00000000  00000000  00040894  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002484 	.word	0x08002484

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002484 	.word	0x08002484

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800015c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800015e:	4b0e      	ldr	r3, [pc, #56]	; (8000198 <HAL_InitTick+0x3c>)
{
 8000160:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000162:	7818      	ldrb	r0, [r3, #0]
 8000164:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000168:	fbb3 f3f0 	udiv	r3, r3, r0
 800016c:	4a0b      	ldr	r2, [pc, #44]	; (800019c <HAL_InitTick+0x40>)
 800016e:	6810      	ldr	r0, [r2, #0]
 8000170:	fbb0 f0f3 	udiv	r0, r0, r3
 8000174:	f000 f8a0 	bl	80002b8 <HAL_SYSTICK_Config>
 8000178:	4604      	mov	r4, r0
 800017a:	b958      	cbnz	r0, 8000194 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800017c:	2d0f      	cmp	r5, #15
 800017e:	d809      	bhi.n	8000194 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000180:	4602      	mov	r2, r0
 8000182:	4629      	mov	r1, r5
 8000184:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000188:	f000 f854 	bl	8000234 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <HAL_InitTick+0x44>)
 800018e:	4620      	mov	r0, r4
 8000190:	601d      	str	r5, [r3, #0]
 8000192:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000194:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000196:	bd38      	pop	{r3, r4, r5, pc}
 8000198:	20000000 	.word	0x20000000
 800019c:	20000008 	.word	0x20000008
 80001a0:	20000004 	.word	0x20000004

080001a4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001a4:	4a07      	ldr	r2, [pc, #28]	; (80001c4 <HAL_Init+0x20>)
{
 80001a6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001a8:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001aa:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001ac:	f043 0310 	orr.w	r3, r3, #16
 80001b0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001b2:	f000 f82d 	bl	8000210 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001b6:	2000      	movs	r0, #0
 80001b8:	f7ff ffd0 	bl	800015c <HAL_InitTick>
  HAL_MspInit();
 80001bc:	f001 fb0a 	bl	80017d4 <HAL_MspInit>
}
 80001c0:	2000      	movs	r0, #0
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	40022000 	.word	0x40022000

080001c8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001c8:	4a03      	ldr	r2, [pc, #12]	; (80001d8 <HAL_IncTick+0x10>)
 80001ca:	4b04      	ldr	r3, [pc, #16]	; (80001dc <HAL_IncTick+0x14>)
 80001cc:	6811      	ldr	r1, [r2, #0]
 80001ce:	781b      	ldrb	r3, [r3, #0]
 80001d0:	440b      	add	r3, r1
 80001d2:	6013      	str	r3, [r2, #0]
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	20000120 	.word	0x20000120
 80001dc:	20000000 	.word	0x20000000

080001e0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001e0:	4b01      	ldr	r3, [pc, #4]	; (80001e8 <HAL_GetTick+0x8>)
 80001e2:	6818      	ldr	r0, [r3, #0]
}
 80001e4:	4770      	bx	lr
 80001e6:	bf00      	nop
 80001e8:	20000120 	.word	0x20000120

080001ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80001ec:	b538      	push	{r3, r4, r5, lr}
 80001ee:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80001f0:	f7ff fff6 	bl	80001e0 <HAL_GetTick>
 80001f4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001f6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80001f8:	bf1e      	ittt	ne
 80001fa:	4b04      	ldrne	r3, [pc, #16]	; (800020c <HAL_Delay+0x20>)
 80001fc:	781b      	ldrbne	r3, [r3, #0]
 80001fe:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000200:	f7ff ffee 	bl	80001e0 <HAL_GetTick>
 8000204:	1b40      	subs	r0, r0, r5
 8000206:	4284      	cmp	r4, r0
 8000208:	d8fa      	bhi.n	8000200 <HAL_Delay+0x14>
  {
  }
}
 800020a:	bd38      	pop	{r3, r4, r5, pc}
 800020c:	20000000 	.word	0x20000000

08000210 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000210:	4a07      	ldr	r2, [pc, #28]	; (8000230 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000212:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000214:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000216:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800021a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800021e:	041b      	lsls	r3, r3, #16
 8000220:	0c1b      	lsrs	r3, r3, #16
 8000222:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000226:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800022a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800022c:	60d3      	str	r3, [r2, #12]
 800022e:	4770      	bx	lr
 8000230:	e000ed00 	.word	0xe000ed00

08000234 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000234:	4b17      	ldr	r3, [pc, #92]	; (8000294 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000236:	b530      	push	{r4, r5, lr}
 8000238:	68dc      	ldr	r4, [r3, #12]
 800023a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800023e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000242:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000244:	2b04      	cmp	r3, #4
 8000246:	bf28      	it	cs
 8000248:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800024a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800024c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000250:	bf98      	it	ls
 8000252:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000254:	fa05 f303 	lsl.w	r3, r5, r3
 8000258:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800025c:	bf88      	it	hi
 800025e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000260:	4019      	ands	r1, r3
 8000262:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000264:	fa05 f404 	lsl.w	r4, r5, r4
 8000268:	3c01      	subs	r4, #1
 800026a:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 800026c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800026e:	ea42 0201 	orr.w	r2, r2, r1
 8000272:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000276:	bfa9      	itett	ge
 8000278:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027c:	4b06      	ldrlt	r3, [pc, #24]	; (8000298 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027e:	b2d2      	uxtbge	r2, r2
 8000280:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000284:	bfbb      	ittet	lt
 8000286:	f000 000f 	andlt.w	r0, r0, #15
 800028a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800028c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000290:	541a      	strblt	r2, [r3, r0]
 8000292:	bd30      	pop	{r4, r5, pc}
 8000294:	e000ed00 	.word	0xe000ed00
 8000298:	e000ed14 	.word	0xe000ed14

0800029c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800029c:	2800      	cmp	r0, #0
 800029e:	db08      	blt.n	80002b2 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002a0:	2301      	movs	r3, #1
 80002a2:	0942      	lsrs	r2, r0, #5
 80002a4:	f000 001f 	and.w	r0, r0, #31
 80002a8:	fa03 f000 	lsl.w	r0, r3, r0
 80002ac:	4b01      	ldr	r3, [pc, #4]	; (80002b4 <HAL_NVIC_EnableIRQ+0x18>)
 80002ae:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80002b2:	4770      	bx	lr
 80002b4:	e000e100 	.word	0xe000e100

080002b8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002b8:	3801      	subs	r0, #1
 80002ba:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002be:	d20a      	bcs.n	80002d6 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c0:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002c2:	4b06      	ldr	r3, [pc, #24]	; (80002dc <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c4:	4a06      	ldr	r2, [pc, #24]	; (80002e0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002c6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002cc:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002ce:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002d0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002d2:	601a      	str	r2, [r3, #0]
 80002d4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002d6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002d8:	4770      	bx	lr
 80002da:	bf00      	nop
 80002dc:	e000e010 	.word	0xe000e010
 80002e0:	e000ed00 	.word	0xe000ed00

080002e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80002e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80002e8:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 80002ea:	4626      	mov	r6, r4
 80002ec:	4b66      	ldr	r3, [pc, #408]	; (8000488 <HAL_GPIO_Init+0x1a4>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80002ee:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 8000498 <HAL_GPIO_Init+0x1b4>
 80002f2:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 800049c <HAL_GPIO_Init+0x1b8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80002f6:	680a      	ldr	r2, [r1, #0]
 80002f8:	fa32 f506 	lsrs.w	r5, r2, r6
 80002fc:	d102      	bne.n	8000304 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 80002fe:	b003      	add	sp, #12
 8000300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8000304:	f04f 0801 	mov.w	r8, #1
 8000308:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800030c:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 8000310:	4590      	cmp	r8, r2
 8000312:	d17f      	bne.n	8000414 <HAL_GPIO_Init+0x130>
      switch (GPIO_Init->Mode)
 8000314:	684d      	ldr	r5, [r1, #4]
 8000316:	2d12      	cmp	r5, #18
 8000318:	f000 80aa 	beq.w	8000470 <HAL_GPIO_Init+0x18c>
 800031c:	f200 8083 	bhi.w	8000426 <HAL_GPIO_Init+0x142>
 8000320:	2d02      	cmp	r5, #2
 8000322:	f000 80a2 	beq.w	800046a <HAL_GPIO_Init+0x186>
 8000326:	d877      	bhi.n	8000418 <HAL_GPIO_Init+0x134>
 8000328:	2d00      	cmp	r5, #0
 800032a:	f000 8089 	beq.w	8000440 <HAL_GPIO_Init+0x15c>
 800032e:	2d01      	cmp	r5, #1
 8000330:	f000 8099 	beq.w	8000466 <HAL_GPIO_Init+0x182>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000334:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000338:	2aff      	cmp	r2, #255	; 0xff
 800033a:	bf93      	iteet	ls
 800033c:	4682      	movls	sl, r0
 800033e:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000342:	3d08      	subhi	r5, #8
 8000344:	f8d0 b000 	ldrls.w	fp, [r0]
 8000348:	bf92      	itee	ls
 800034a:	00b5      	lslls	r5, r6, #2
 800034c:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000350:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000352:	fa09 f805 	lsl.w	r8, r9, r5
 8000356:	ea2b 0808 	bic.w	r8, fp, r8
 800035a:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800035e:	bf88      	it	hi
 8000360:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000364:	ea48 0505 	orr.w	r5, r8, r5
 8000368:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800036c:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000370:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000374:	d04e      	beq.n	8000414 <HAL_GPIO_Init+0x130>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000376:	4d45      	ldr	r5, [pc, #276]	; (800048c <HAL_GPIO_Init+0x1a8>)
 8000378:	4f44      	ldr	r7, [pc, #272]	; (800048c <HAL_GPIO_Init+0x1a8>)
 800037a:	69ad      	ldr	r5, [r5, #24]
 800037c:	f026 0803 	bic.w	r8, r6, #3
 8000380:	f045 0501 	orr.w	r5, r5, #1
 8000384:	61bd      	str	r5, [r7, #24]
 8000386:	69bd      	ldr	r5, [r7, #24]
 8000388:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 800038c:	f005 0501 	and.w	r5, r5, #1
 8000390:	9501      	str	r5, [sp, #4]
 8000392:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000396:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800039a:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800039c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 80003a0:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80003a4:	fa09 f90b 	lsl.w	r9, r9, fp
 80003a8:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80003ac:	4d38      	ldr	r5, [pc, #224]	; (8000490 <HAL_GPIO_Init+0x1ac>)
 80003ae:	42a8      	cmp	r0, r5
 80003b0:	d063      	beq.n	800047a <HAL_GPIO_Init+0x196>
 80003b2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003b6:	42a8      	cmp	r0, r5
 80003b8:	d061      	beq.n	800047e <HAL_GPIO_Init+0x19a>
 80003ba:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003be:	42a8      	cmp	r0, r5
 80003c0:	d05f      	beq.n	8000482 <HAL_GPIO_Init+0x19e>
 80003c2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003c6:	42a8      	cmp	r0, r5
 80003c8:	bf0c      	ite	eq
 80003ca:	2503      	moveq	r5, #3
 80003cc:	2504      	movne	r5, #4
 80003ce:	fa05 f50b 	lsl.w	r5, r5, fp
 80003d2:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 80003d6:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 80003da:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80003dc:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80003e0:	bf14      	ite	ne
 80003e2:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80003e4:	4395      	biceq	r5, r2
 80003e6:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 80003e8:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80003ea:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80003ee:	bf14      	ite	ne
 80003f0:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80003f2:	4395      	biceq	r5, r2
 80003f4:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 80003f6:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80003f8:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80003fc:	bf14      	ite	ne
 80003fe:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000400:	4395      	biceq	r5, r2
 8000402:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8000404:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000406:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800040a:	bf14      	ite	ne
 800040c:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800040e:	ea25 0202 	biceq.w	r2, r5, r2
 8000412:	60da      	str	r2, [r3, #12]
	position++;
 8000414:	3601      	adds	r6, #1
 8000416:	e76e      	b.n	80002f6 <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 8000418:	2d03      	cmp	r5, #3
 800041a:	d022      	beq.n	8000462 <HAL_GPIO_Init+0x17e>
 800041c:	2d11      	cmp	r5, #17
 800041e:	d189      	bne.n	8000334 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000420:	68cc      	ldr	r4, [r1, #12]
 8000422:	3404      	adds	r4, #4
          break;
 8000424:	e786      	b.n	8000334 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8000426:	4f1b      	ldr	r7, [pc, #108]	; (8000494 <HAL_GPIO_Init+0x1b0>)
 8000428:	42bd      	cmp	r5, r7
 800042a:	d009      	beq.n	8000440 <HAL_GPIO_Init+0x15c>
 800042c:	d812      	bhi.n	8000454 <HAL_GPIO_Init+0x170>
 800042e:	f8df 9070 	ldr.w	r9, [pc, #112]	; 80004a0 <HAL_GPIO_Init+0x1bc>
 8000432:	454d      	cmp	r5, r9
 8000434:	d004      	beq.n	8000440 <HAL_GPIO_Init+0x15c>
 8000436:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 800043a:	454d      	cmp	r5, r9
 800043c:	f47f af7a 	bne.w	8000334 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000440:	688c      	ldr	r4, [r1, #8]
 8000442:	b1c4      	cbz	r4, 8000476 <HAL_GPIO_Init+0x192>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000444:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 8000446:	bf0c      	ite	eq
 8000448:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 800044c:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000450:	2408      	movs	r4, #8
 8000452:	e76f      	b.n	8000334 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8000454:	4575      	cmp	r5, lr
 8000456:	d0f3      	beq.n	8000440 <HAL_GPIO_Init+0x15c>
 8000458:	4565      	cmp	r5, ip
 800045a:	d0f1      	beq.n	8000440 <HAL_GPIO_Init+0x15c>
 800045c:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80004a4 <HAL_GPIO_Init+0x1c0>
 8000460:	e7eb      	b.n	800043a <HAL_GPIO_Init+0x156>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000462:	2400      	movs	r4, #0
 8000464:	e766      	b.n	8000334 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000466:	68cc      	ldr	r4, [r1, #12]
          break;
 8000468:	e764      	b.n	8000334 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800046a:	68cc      	ldr	r4, [r1, #12]
 800046c:	3408      	adds	r4, #8
          break;
 800046e:	e761      	b.n	8000334 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000470:	68cc      	ldr	r4, [r1, #12]
 8000472:	340c      	adds	r4, #12
          break;
 8000474:	e75e      	b.n	8000334 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000476:	2404      	movs	r4, #4
 8000478:	e75c      	b.n	8000334 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800047a:	2500      	movs	r5, #0
 800047c:	e7a7      	b.n	80003ce <HAL_GPIO_Init+0xea>
 800047e:	2501      	movs	r5, #1
 8000480:	e7a5      	b.n	80003ce <HAL_GPIO_Init+0xea>
 8000482:	2502      	movs	r5, #2
 8000484:	e7a3      	b.n	80003ce <HAL_GPIO_Init+0xea>
 8000486:	bf00      	nop
 8000488:	40010400 	.word	0x40010400
 800048c:	40021000 	.word	0x40021000
 8000490:	40010800 	.word	0x40010800
 8000494:	10210000 	.word	0x10210000
 8000498:	10310000 	.word	0x10310000
 800049c:	10320000 	.word	0x10320000
 80004a0:	10110000 	.word	0x10110000
 80004a4:	10220000 	.word	0x10220000

080004a8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80004a8:	b10a      	cbz	r2, 80004ae <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80004aa:	6101      	str	r1, [r0, #16]
 80004ac:	4770      	bx	lr
 80004ae:	0409      	lsls	r1, r1, #16
 80004b0:	e7fb      	b.n	80004aa <HAL_GPIO_WritePin+0x2>

080004b2 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80004b2:	68c3      	ldr	r3, [r0, #12]
 80004b4:	420b      	tst	r3, r1
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80004b6:	bf14      	ite	ne
 80004b8:	6141      	strne	r1, [r0, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80004ba:	6101      	streq	r1, [r0, #16]
 80004bc:	4770      	bx	lr
	...

080004c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80004c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80004c4:	4605      	mov	r5, r0
 80004c6:	b908      	cbnz	r0, 80004cc <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 80004c8:	2001      	movs	r0, #1
 80004ca:	e03c      	b.n	8000546 <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004cc:	6803      	ldr	r3, [r0, #0]
 80004ce:	07db      	lsls	r3, r3, #31
 80004d0:	d410      	bmi.n	80004f4 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80004d2:	682b      	ldr	r3, [r5, #0]
 80004d4:	079f      	lsls	r7, r3, #30
 80004d6:	d45d      	bmi.n	8000594 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80004d8:	682b      	ldr	r3, [r5, #0]
 80004da:	0719      	lsls	r1, r3, #28
 80004dc:	f100 8094 	bmi.w	8000608 <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80004e0:	682b      	ldr	r3, [r5, #0]
 80004e2:	075a      	lsls	r2, r3, #29
 80004e4:	f100 80be 	bmi.w	8000664 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80004e8:	69e8      	ldr	r0, [r5, #28]
 80004ea:	2800      	cmp	r0, #0
 80004ec:	f040 812c 	bne.w	8000748 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 80004f0:	2000      	movs	r0, #0
 80004f2:	e028      	b.n	8000546 <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80004f4:	4c8f      	ldr	r4, [pc, #572]	; (8000734 <HAL_RCC_OscConfig+0x274>)
 80004f6:	6863      	ldr	r3, [r4, #4]
 80004f8:	f003 030c 	and.w	r3, r3, #12
 80004fc:	2b04      	cmp	r3, #4
 80004fe:	d007      	beq.n	8000510 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000500:	6863      	ldr	r3, [r4, #4]
 8000502:	f003 030c 	and.w	r3, r3, #12
 8000506:	2b08      	cmp	r3, #8
 8000508:	d109      	bne.n	800051e <HAL_RCC_OscConfig+0x5e>
 800050a:	6863      	ldr	r3, [r4, #4]
 800050c:	03de      	lsls	r6, r3, #15
 800050e:	d506      	bpl.n	800051e <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000510:	6823      	ldr	r3, [r4, #0]
 8000512:	039c      	lsls	r4, r3, #14
 8000514:	d5dd      	bpl.n	80004d2 <HAL_RCC_OscConfig+0x12>
 8000516:	686b      	ldr	r3, [r5, #4]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d1da      	bne.n	80004d2 <HAL_RCC_OscConfig+0x12>
 800051c:	e7d4      	b.n	80004c8 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800051e:	686b      	ldr	r3, [r5, #4]
 8000520:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000524:	d112      	bne.n	800054c <HAL_RCC_OscConfig+0x8c>
 8000526:	6823      	ldr	r3, [r4, #0]
 8000528:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800052c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800052e:	f7ff fe57 	bl	80001e0 <HAL_GetTick>
 8000532:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000534:	6823      	ldr	r3, [r4, #0]
 8000536:	0398      	lsls	r0, r3, #14
 8000538:	d4cb      	bmi.n	80004d2 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800053a:	f7ff fe51 	bl	80001e0 <HAL_GetTick>
 800053e:	1b80      	subs	r0, r0, r6
 8000540:	2864      	cmp	r0, #100	; 0x64
 8000542:	d9f7      	bls.n	8000534 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000544:	2003      	movs	r0, #3
}
 8000546:	b002      	add	sp, #8
 8000548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800054c:	b99b      	cbnz	r3, 8000576 <HAL_RCC_OscConfig+0xb6>
 800054e:	6823      	ldr	r3, [r4, #0]
 8000550:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000554:	6023      	str	r3, [r4, #0]
 8000556:	6823      	ldr	r3, [r4, #0]
 8000558:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800055c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800055e:	f7ff fe3f 	bl	80001e0 <HAL_GetTick>
 8000562:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000564:	6823      	ldr	r3, [r4, #0]
 8000566:	0399      	lsls	r1, r3, #14
 8000568:	d5b3      	bpl.n	80004d2 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800056a:	f7ff fe39 	bl	80001e0 <HAL_GetTick>
 800056e:	1b80      	subs	r0, r0, r6
 8000570:	2864      	cmp	r0, #100	; 0x64
 8000572:	d9f7      	bls.n	8000564 <HAL_RCC_OscConfig+0xa4>
 8000574:	e7e6      	b.n	8000544 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000576:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800057a:	6823      	ldr	r3, [r4, #0]
 800057c:	d103      	bne.n	8000586 <HAL_RCC_OscConfig+0xc6>
 800057e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000582:	6023      	str	r3, [r4, #0]
 8000584:	e7cf      	b.n	8000526 <HAL_RCC_OscConfig+0x66>
 8000586:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800058a:	6023      	str	r3, [r4, #0]
 800058c:	6823      	ldr	r3, [r4, #0]
 800058e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000592:	e7cb      	b.n	800052c <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000594:	4c67      	ldr	r4, [pc, #412]	; (8000734 <HAL_RCC_OscConfig+0x274>)
 8000596:	6863      	ldr	r3, [r4, #4]
 8000598:	f013 0f0c 	tst.w	r3, #12
 800059c:	d007      	beq.n	80005ae <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800059e:	6863      	ldr	r3, [r4, #4]
 80005a0:	f003 030c 	and.w	r3, r3, #12
 80005a4:	2b08      	cmp	r3, #8
 80005a6:	d110      	bne.n	80005ca <HAL_RCC_OscConfig+0x10a>
 80005a8:	6863      	ldr	r3, [r4, #4]
 80005aa:	03da      	lsls	r2, r3, #15
 80005ac:	d40d      	bmi.n	80005ca <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80005ae:	6823      	ldr	r3, [r4, #0]
 80005b0:	079b      	lsls	r3, r3, #30
 80005b2:	d502      	bpl.n	80005ba <HAL_RCC_OscConfig+0xfa>
 80005b4:	692b      	ldr	r3, [r5, #16]
 80005b6:	2b01      	cmp	r3, #1
 80005b8:	d186      	bne.n	80004c8 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80005ba:	6823      	ldr	r3, [r4, #0]
 80005bc:	696a      	ldr	r2, [r5, #20]
 80005be:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80005c2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80005c6:	6023      	str	r3, [r4, #0]
 80005c8:	e786      	b.n	80004d8 <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80005ca:	692a      	ldr	r2, [r5, #16]
 80005cc:	4b5a      	ldr	r3, [pc, #360]	; (8000738 <HAL_RCC_OscConfig+0x278>)
 80005ce:	b16a      	cbz	r2, 80005ec <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 80005d0:	2201      	movs	r2, #1
 80005d2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80005d4:	f7ff fe04 	bl	80001e0 <HAL_GetTick>
 80005d8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80005da:	6823      	ldr	r3, [r4, #0]
 80005dc:	079f      	lsls	r7, r3, #30
 80005de:	d4ec      	bmi.n	80005ba <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80005e0:	f7ff fdfe 	bl	80001e0 <HAL_GetTick>
 80005e4:	1b80      	subs	r0, r0, r6
 80005e6:	2802      	cmp	r0, #2
 80005e8:	d9f7      	bls.n	80005da <HAL_RCC_OscConfig+0x11a>
 80005ea:	e7ab      	b.n	8000544 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80005ec:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80005ee:	f7ff fdf7 	bl	80001e0 <HAL_GetTick>
 80005f2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80005f4:	6823      	ldr	r3, [r4, #0]
 80005f6:	0798      	lsls	r0, r3, #30
 80005f8:	f57f af6e 	bpl.w	80004d8 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80005fc:	f7ff fdf0 	bl	80001e0 <HAL_GetTick>
 8000600:	1b80      	subs	r0, r0, r6
 8000602:	2802      	cmp	r0, #2
 8000604:	d9f6      	bls.n	80005f4 <HAL_RCC_OscConfig+0x134>
 8000606:	e79d      	b.n	8000544 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000608:	69aa      	ldr	r2, [r5, #24]
 800060a:	4c4a      	ldr	r4, [pc, #296]	; (8000734 <HAL_RCC_OscConfig+0x274>)
 800060c:	4b4b      	ldr	r3, [pc, #300]	; (800073c <HAL_RCC_OscConfig+0x27c>)
 800060e:	b1da      	cbz	r2, 8000648 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8000610:	2201      	movs	r2, #1
 8000612:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000614:	f7ff fde4 	bl	80001e0 <HAL_GetTick>
 8000618:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800061a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800061c:	079b      	lsls	r3, r3, #30
 800061e:	d50d      	bpl.n	800063c <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000620:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000624:	4b46      	ldr	r3, [pc, #280]	; (8000740 <HAL_RCC_OscConfig+0x280>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	fbb3 f3f2 	udiv	r3, r3, r2
 800062c:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800062e:	bf00      	nop
  }
  while (Delay --);
 8000630:	9b01      	ldr	r3, [sp, #4]
 8000632:	1e5a      	subs	r2, r3, #1
 8000634:	9201      	str	r2, [sp, #4]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d1f9      	bne.n	800062e <HAL_RCC_OscConfig+0x16e>
 800063a:	e751      	b.n	80004e0 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800063c:	f7ff fdd0 	bl	80001e0 <HAL_GetTick>
 8000640:	1b80      	subs	r0, r0, r6
 8000642:	2802      	cmp	r0, #2
 8000644:	d9e9      	bls.n	800061a <HAL_RCC_OscConfig+0x15a>
 8000646:	e77d      	b.n	8000544 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000648:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800064a:	f7ff fdc9 	bl	80001e0 <HAL_GetTick>
 800064e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000650:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000652:	079f      	lsls	r7, r3, #30
 8000654:	f57f af44 	bpl.w	80004e0 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000658:	f7ff fdc2 	bl	80001e0 <HAL_GetTick>
 800065c:	1b80      	subs	r0, r0, r6
 800065e:	2802      	cmp	r0, #2
 8000660:	d9f6      	bls.n	8000650 <HAL_RCC_OscConfig+0x190>
 8000662:	e76f      	b.n	8000544 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000664:	4c33      	ldr	r4, [pc, #204]	; (8000734 <HAL_RCC_OscConfig+0x274>)
 8000666:	69e3      	ldr	r3, [r4, #28]
 8000668:	00d8      	lsls	r0, r3, #3
 800066a:	d424      	bmi.n	80006b6 <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 800066c:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800066e:	69e3      	ldr	r3, [r4, #28]
 8000670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000674:	61e3      	str	r3, [r4, #28]
 8000676:	69e3      	ldr	r3, [r4, #28]
 8000678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800067c:	9300      	str	r3, [sp, #0]
 800067e:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000680:	4e30      	ldr	r6, [pc, #192]	; (8000744 <HAL_RCC_OscConfig+0x284>)
 8000682:	6833      	ldr	r3, [r6, #0]
 8000684:	05d9      	lsls	r1, r3, #23
 8000686:	d518      	bpl.n	80006ba <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000688:	68eb      	ldr	r3, [r5, #12]
 800068a:	2b01      	cmp	r3, #1
 800068c:	d126      	bne.n	80006dc <HAL_RCC_OscConfig+0x21c>
 800068e:	6a23      	ldr	r3, [r4, #32]
 8000690:	f043 0301 	orr.w	r3, r3, #1
 8000694:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000696:	f7ff fda3 	bl	80001e0 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800069a:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800069e:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80006a0:	6a23      	ldr	r3, [r4, #32]
 80006a2:	079b      	lsls	r3, r3, #30
 80006a4:	d53f      	bpl.n	8000726 <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 80006a6:	2f00      	cmp	r7, #0
 80006a8:	f43f af1e 	beq.w	80004e8 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 80006ac:	69e3      	ldr	r3, [r4, #28]
 80006ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80006b2:	61e3      	str	r3, [r4, #28]
 80006b4:	e718      	b.n	80004e8 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 80006b6:	2700      	movs	r7, #0
 80006b8:	e7e2      	b.n	8000680 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80006ba:	6833      	ldr	r3, [r6, #0]
 80006bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006c0:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80006c2:	f7ff fd8d 	bl	80001e0 <HAL_GetTick>
 80006c6:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80006c8:	6833      	ldr	r3, [r6, #0]
 80006ca:	05da      	lsls	r2, r3, #23
 80006cc:	d4dc      	bmi.n	8000688 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80006ce:	f7ff fd87 	bl	80001e0 <HAL_GetTick>
 80006d2:	eba0 0008 	sub.w	r0, r0, r8
 80006d6:	2864      	cmp	r0, #100	; 0x64
 80006d8:	d9f6      	bls.n	80006c8 <HAL_RCC_OscConfig+0x208>
 80006da:	e733      	b.n	8000544 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006dc:	b9ab      	cbnz	r3, 800070a <HAL_RCC_OscConfig+0x24a>
 80006de:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80006e0:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006e4:	f023 0301 	bic.w	r3, r3, #1
 80006e8:	6223      	str	r3, [r4, #32]
 80006ea:	6a23      	ldr	r3, [r4, #32]
 80006ec:	f023 0304 	bic.w	r3, r3, #4
 80006f0:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80006f2:	f7ff fd75 	bl	80001e0 <HAL_GetTick>
 80006f6:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80006f8:	6a23      	ldr	r3, [r4, #32]
 80006fa:	0798      	lsls	r0, r3, #30
 80006fc:	d5d3      	bpl.n	80006a6 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80006fe:	f7ff fd6f 	bl	80001e0 <HAL_GetTick>
 8000702:	1b80      	subs	r0, r0, r6
 8000704:	4540      	cmp	r0, r8
 8000706:	d9f7      	bls.n	80006f8 <HAL_RCC_OscConfig+0x238>
 8000708:	e71c      	b.n	8000544 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800070a:	2b05      	cmp	r3, #5
 800070c:	6a23      	ldr	r3, [r4, #32]
 800070e:	d103      	bne.n	8000718 <HAL_RCC_OscConfig+0x258>
 8000710:	f043 0304 	orr.w	r3, r3, #4
 8000714:	6223      	str	r3, [r4, #32]
 8000716:	e7ba      	b.n	800068e <HAL_RCC_OscConfig+0x1ce>
 8000718:	f023 0301 	bic.w	r3, r3, #1
 800071c:	6223      	str	r3, [r4, #32]
 800071e:	6a23      	ldr	r3, [r4, #32]
 8000720:	f023 0304 	bic.w	r3, r3, #4
 8000724:	e7b6      	b.n	8000694 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000726:	f7ff fd5b 	bl	80001e0 <HAL_GetTick>
 800072a:	eba0 0008 	sub.w	r0, r0, r8
 800072e:	42b0      	cmp	r0, r6
 8000730:	d9b6      	bls.n	80006a0 <HAL_RCC_OscConfig+0x1e0>
 8000732:	e707      	b.n	8000544 <HAL_RCC_OscConfig+0x84>
 8000734:	40021000 	.word	0x40021000
 8000738:	42420000 	.word	0x42420000
 800073c:	42420480 	.word	0x42420480
 8000740:	20000008 	.word	0x20000008
 8000744:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000748:	4b2a      	ldr	r3, [pc, #168]	; (80007f4 <HAL_RCC_OscConfig+0x334>)
 800074a:	685a      	ldr	r2, [r3, #4]
 800074c:	461c      	mov	r4, r3
 800074e:	f002 020c 	and.w	r2, r2, #12
 8000752:	2a08      	cmp	r2, #8
 8000754:	d03d      	beq.n	80007d2 <HAL_RCC_OscConfig+0x312>
 8000756:	2300      	movs	r3, #0
 8000758:	4e27      	ldr	r6, [pc, #156]	; (80007f8 <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800075a:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800075c:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800075e:	d12b      	bne.n	80007b8 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 8000760:	f7ff fd3e 	bl	80001e0 <HAL_GetTick>
 8000764:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000766:	6823      	ldr	r3, [r4, #0]
 8000768:	0199      	lsls	r1, r3, #6
 800076a:	d41f      	bmi.n	80007ac <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800076c:	6a2b      	ldr	r3, [r5, #32]
 800076e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000772:	d105      	bne.n	8000780 <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000774:	6862      	ldr	r2, [r4, #4]
 8000776:	68a9      	ldr	r1, [r5, #8]
 8000778:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800077c:	430a      	orrs	r2, r1
 800077e:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000780:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000782:	6862      	ldr	r2, [r4, #4]
 8000784:	430b      	orrs	r3, r1
 8000786:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800078a:	4313      	orrs	r3, r2
 800078c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800078e:	2301      	movs	r3, #1
 8000790:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000792:	f7ff fd25 	bl	80001e0 <HAL_GetTick>
 8000796:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000798:	6823      	ldr	r3, [r4, #0]
 800079a:	019a      	lsls	r2, r3, #6
 800079c:	f53f aea8 	bmi.w	80004f0 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80007a0:	f7ff fd1e 	bl	80001e0 <HAL_GetTick>
 80007a4:	1b40      	subs	r0, r0, r5
 80007a6:	2802      	cmp	r0, #2
 80007a8:	d9f6      	bls.n	8000798 <HAL_RCC_OscConfig+0x2d8>
 80007aa:	e6cb      	b.n	8000544 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80007ac:	f7ff fd18 	bl	80001e0 <HAL_GetTick>
 80007b0:	1bc0      	subs	r0, r0, r7
 80007b2:	2802      	cmp	r0, #2
 80007b4:	d9d7      	bls.n	8000766 <HAL_RCC_OscConfig+0x2a6>
 80007b6:	e6c5      	b.n	8000544 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 80007b8:	f7ff fd12 	bl	80001e0 <HAL_GetTick>
 80007bc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80007be:	6823      	ldr	r3, [r4, #0]
 80007c0:	019b      	lsls	r3, r3, #6
 80007c2:	f57f ae95 	bpl.w	80004f0 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80007c6:	f7ff fd0b 	bl	80001e0 <HAL_GetTick>
 80007ca:	1b40      	subs	r0, r0, r5
 80007cc:	2802      	cmp	r0, #2
 80007ce:	d9f6      	bls.n	80007be <HAL_RCC_OscConfig+0x2fe>
 80007d0:	e6b8      	b.n	8000544 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80007d2:	2801      	cmp	r0, #1
 80007d4:	f43f aeb7 	beq.w	8000546 <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 80007d8:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80007da:	6a2b      	ldr	r3, [r5, #32]
 80007dc:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 80007e0:	429a      	cmp	r2, r3
 80007e2:	f47f ae71 	bne.w	80004c8 <HAL_RCC_OscConfig+0x8>
 80007e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80007e8:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 80007ec:	1ac0      	subs	r0, r0, r3
 80007ee:	bf18      	it	ne
 80007f0:	2001      	movne	r0, #1
 80007f2:	e6a8      	b.n	8000546 <HAL_RCC_OscConfig+0x86>
 80007f4:	40021000 	.word	0x40021000
 80007f8:	42420060 	.word	0x42420060

080007fc <HAL_RCC_GetSysClockFreq>:
{
 80007fc:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80007fe:	4b19      	ldr	r3, [pc, #100]	; (8000864 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8000800:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000802:	ac02      	add	r4, sp, #8
 8000804:	f103 0510 	add.w	r5, r3, #16
 8000808:	4622      	mov	r2, r4
 800080a:	6818      	ldr	r0, [r3, #0]
 800080c:	6859      	ldr	r1, [r3, #4]
 800080e:	3308      	adds	r3, #8
 8000810:	c203      	stmia	r2!, {r0, r1}
 8000812:	42ab      	cmp	r3, r5
 8000814:	4614      	mov	r4, r2
 8000816:	d1f7      	bne.n	8000808 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000818:	2301      	movs	r3, #1
 800081a:	f88d 3004 	strb.w	r3, [sp, #4]
 800081e:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8000820:	4911      	ldr	r1, [pc, #68]	; (8000868 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000822:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8000826:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000828:	f003 020c 	and.w	r2, r3, #12
 800082c:	2a08      	cmp	r2, #8
 800082e:	d117      	bne.n	8000860 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000830:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000834:	a806      	add	r0, sp, #24
 8000836:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000838:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800083a:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800083e:	d50c      	bpl.n	800085a <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000840:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000842:	480a      	ldr	r0, [pc, #40]	; (800086c <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000844:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000848:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800084a:	aa06      	add	r2, sp, #24
 800084c:	4413      	add	r3, r2
 800084e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000852:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000856:	b007      	add	sp, #28
 8000858:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800085a:	4805      	ldr	r0, [pc, #20]	; (8000870 <HAL_RCC_GetSysClockFreq+0x74>)
 800085c:	4350      	muls	r0, r2
 800085e:	e7fa      	b.n	8000856 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8000860:	4802      	ldr	r0, [pc, #8]	; (800086c <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8000862:	e7f8      	b.n	8000856 <HAL_RCC_GetSysClockFreq+0x5a>
 8000864:	0800249c 	.word	0x0800249c
 8000868:	40021000 	.word	0x40021000
 800086c:	007a1200 	.word	0x007a1200
 8000870:	003d0900 	.word	0x003d0900

08000874 <HAL_RCC_ClockConfig>:
{
 8000874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000878:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800087a:	4604      	mov	r4, r0
 800087c:	b910      	cbnz	r0, 8000884 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800087e:	2001      	movs	r0, #1
 8000880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000884:	4a45      	ldr	r2, [pc, #276]	; (800099c <HAL_RCC_ClockConfig+0x128>)
 8000886:	6813      	ldr	r3, [r2, #0]
 8000888:	f003 0307 	and.w	r3, r3, #7
 800088c:	428b      	cmp	r3, r1
 800088e:	d329      	bcc.n	80008e4 <HAL_RCC_ClockConfig+0x70>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000890:	6821      	ldr	r1, [r4, #0]
 8000892:	078e      	lsls	r6, r1, #30
 8000894:	d431      	bmi.n	80008fa <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000896:	07ca      	lsls	r2, r1, #31
 8000898:	d444      	bmi.n	8000924 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800089a:	4a40      	ldr	r2, [pc, #256]	; (800099c <HAL_RCC_ClockConfig+0x128>)
 800089c:	6813      	ldr	r3, [r2, #0]
 800089e:	f003 0307 	and.w	r3, r3, #7
 80008a2:	429d      	cmp	r5, r3
 80008a4:	d367      	bcc.n	8000976 <HAL_RCC_ClockConfig+0x102>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80008a6:	6822      	ldr	r2, [r4, #0]
 80008a8:	4d3d      	ldr	r5, [pc, #244]	; (80009a0 <HAL_RCC_ClockConfig+0x12c>)
 80008aa:	f012 0f04 	tst.w	r2, #4
 80008ae:	d16e      	bne.n	800098e <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80008b0:	0713      	lsls	r3, r2, #28
 80008b2:	d506      	bpl.n	80008c2 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80008b4:	686b      	ldr	r3, [r5, #4]
 80008b6:	6922      	ldr	r2, [r4, #16]
 80008b8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80008bc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80008c0:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80008c2:	f7ff ff9b 	bl	80007fc <HAL_RCC_GetSysClockFreq>
 80008c6:	686b      	ldr	r3, [r5, #4]
 80008c8:	4a36      	ldr	r2, [pc, #216]	; (80009a4 <HAL_RCC_ClockConfig+0x130>)
 80008ca:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80008ce:	5cd3      	ldrb	r3, [r2, r3]
 80008d0:	40d8      	lsrs	r0, r3
 80008d2:	4b35      	ldr	r3, [pc, #212]	; (80009a8 <HAL_RCC_ClockConfig+0x134>)
 80008d4:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80008d6:	4b35      	ldr	r3, [pc, #212]	; (80009ac <HAL_RCC_ClockConfig+0x138>)
 80008d8:	6818      	ldr	r0, [r3, #0]
 80008da:	f7ff fc3f 	bl	800015c <HAL_InitTick>
  return HAL_OK;
 80008de:	2000      	movs	r0, #0
 80008e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80008e4:	6813      	ldr	r3, [r2, #0]
 80008e6:	f023 0307 	bic.w	r3, r3, #7
 80008ea:	430b      	orrs	r3, r1
 80008ec:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80008ee:	6813      	ldr	r3, [r2, #0]
 80008f0:	f003 0307 	and.w	r3, r3, #7
 80008f4:	4299      	cmp	r1, r3
 80008f6:	d1c2      	bne.n	800087e <HAL_RCC_ClockConfig+0xa>
 80008f8:	e7ca      	b.n	8000890 <HAL_RCC_ClockConfig+0x1c>
 80008fa:	4b29      	ldr	r3, [pc, #164]	; (80009a0 <HAL_RCC_ClockConfig+0x12c>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80008fc:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000900:	bf1e      	ittt	ne
 8000902:	685a      	ldrne	r2, [r3, #4]
 8000904:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8000908:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800090a:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800090c:	bf42      	ittt	mi
 800090e:	685a      	ldrmi	r2, [r3, #4]
 8000910:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8000914:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000916:	685a      	ldr	r2, [r3, #4]
 8000918:	68a0      	ldr	r0, [r4, #8]
 800091a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800091e:	4302      	orrs	r2, r0
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	e7b8      	b.n	8000896 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000924:	6862      	ldr	r2, [r4, #4]
 8000926:	4e1e      	ldr	r6, [pc, #120]	; (80009a0 <HAL_RCC_ClockConfig+0x12c>)
 8000928:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800092a:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800092c:	d11b      	bne.n	8000966 <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800092e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000932:	d0a4      	beq.n	800087e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000934:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000936:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800093a:	f023 0303 	bic.w	r3, r3, #3
 800093e:	4313      	orrs	r3, r2
 8000940:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000942:	f7ff fc4d 	bl	80001e0 <HAL_GetTick>
 8000946:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000948:	6873      	ldr	r3, [r6, #4]
 800094a:	6862      	ldr	r2, [r4, #4]
 800094c:	f003 030c 	and.w	r3, r3, #12
 8000950:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000954:	d0a1      	beq.n	800089a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000956:	f7ff fc43 	bl	80001e0 <HAL_GetTick>
 800095a:	1bc0      	subs	r0, r0, r7
 800095c:	4540      	cmp	r0, r8
 800095e:	d9f3      	bls.n	8000948 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8000960:	2003      	movs	r0, #3
}
 8000962:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000966:	2a02      	cmp	r2, #2
 8000968:	d102      	bne.n	8000970 <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800096a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800096e:	e7e0      	b.n	8000932 <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000970:	f013 0f02 	tst.w	r3, #2
 8000974:	e7dd      	b.n	8000932 <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000976:	6813      	ldr	r3, [r2, #0]
 8000978:	f023 0307 	bic.w	r3, r3, #7
 800097c:	432b      	orrs	r3, r5
 800097e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000980:	6813      	ldr	r3, [r2, #0]
 8000982:	f003 0307 	and.w	r3, r3, #7
 8000986:	429d      	cmp	r5, r3
 8000988:	f47f af79 	bne.w	800087e <HAL_RCC_ClockConfig+0xa>
 800098c:	e78b      	b.n	80008a6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800098e:	686b      	ldr	r3, [r5, #4]
 8000990:	68e1      	ldr	r1, [r4, #12]
 8000992:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000996:	430b      	orrs	r3, r1
 8000998:	606b      	str	r3, [r5, #4]
 800099a:	e789      	b.n	80008b0 <HAL_RCC_ClockConfig+0x3c>
 800099c:	40022000 	.word	0x40022000
 80009a0:	40021000 	.word	0x40021000
 80009a4:	080026aa 	.word	0x080026aa
 80009a8:	20000008 	.word	0x20000008
 80009ac:	20000004 	.word	0x20000004

080009b0 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80009b0:	4b04      	ldr	r3, [pc, #16]	; (80009c4 <HAL_RCC_GetPCLK1Freq+0x14>)
 80009b2:	4a05      	ldr	r2, [pc, #20]	; (80009c8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80009b4:	685b      	ldr	r3, [r3, #4]
 80009b6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80009ba:	5cd3      	ldrb	r3, [r2, r3]
 80009bc:	4a03      	ldr	r2, [pc, #12]	; (80009cc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80009be:	6810      	ldr	r0, [r2, #0]
}
 80009c0:	40d8      	lsrs	r0, r3
 80009c2:	4770      	bx	lr
 80009c4:	40021000 	.word	0x40021000
 80009c8:	080026ba 	.word	0x080026ba
 80009cc:	20000008 	.word	0x20000008

080009d0 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80009d0:	4b04      	ldr	r3, [pc, #16]	; (80009e4 <HAL_RCC_GetPCLK2Freq+0x14>)
 80009d2:	4a05      	ldr	r2, [pc, #20]	; (80009e8 <HAL_RCC_GetPCLK2Freq+0x18>)
 80009d4:	685b      	ldr	r3, [r3, #4]
 80009d6:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80009da:	5cd3      	ldrb	r3, [r2, r3]
 80009dc:	4a03      	ldr	r2, [pc, #12]	; (80009ec <HAL_RCC_GetPCLK2Freq+0x1c>)
 80009de:	6810      	ldr	r0, [r2, #0]
}
 80009e0:	40d8      	lsrs	r0, r3
 80009e2:	4770      	bx	lr
 80009e4:	40021000 	.word	0x40021000
 80009e8:	080026ba 	.word	0x080026ba
 80009ec:	20000008 	.word	0x20000008

080009f0 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80009f0:	6803      	ldr	r3, [r0, #0]
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
}
 80009f2:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80009f4:	68da      	ldr	r2, [r3, #12]
 80009f6:	f042 0201 	orr.w	r2, r2, #1
 80009fa:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80009fc:	689a      	ldr	r2, [r3, #8]
 80009fe:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000a02:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 8000a04:	bf1e      	ittt	ne
 8000a06:	681a      	ldrne	r2, [r3, #0]
 8000a08:	f042 0201 	orrne.w	r2, r2, #1
 8000a0c:	601a      	strne	r2, [r3, #0]
}
 8000a0e:	4770      	bx	lr

08000a10 <HAL_TIM_OC_DelayElapsedCallback>:
 8000a10:	4770      	bx	lr

08000a12 <HAL_TIM_IC_CaptureCallback>:
 8000a12:	4770      	bx	lr

08000a14 <HAL_TIM_PWM_PulseFinishedCallback>:
 8000a14:	4770      	bx	lr

08000a16 <HAL_TIM_TriggerCallback>:
 8000a16:	4770      	bx	lr

08000a18 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000a18:	6803      	ldr	r3, [r0, #0]
{
 8000a1a:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000a1c:	691a      	ldr	r2, [r3, #16]
{
 8000a1e:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000a20:	0791      	lsls	r1, r2, #30
 8000a22:	d50e      	bpl.n	8000a42 <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8000a24:	68da      	ldr	r2, [r3, #12]
 8000a26:	0792      	lsls	r2, r2, #30
 8000a28:	d50b      	bpl.n	8000a42 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000a2a:	f06f 0202 	mvn.w	r2, #2
 8000a2e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000a30:	2201      	movs	r2, #1

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000a32:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000a34:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000a36:	079b      	lsls	r3, r3, #30
 8000a38:	d077      	beq.n	8000b2a <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8000a3a:	f7ff ffea 	bl	8000a12 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000a42:	6823      	ldr	r3, [r4, #0]
 8000a44:	691a      	ldr	r2, [r3, #16]
 8000a46:	0750      	lsls	r0, r2, #29
 8000a48:	d510      	bpl.n	8000a6c <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8000a4a:	68da      	ldr	r2, [r3, #12]
 8000a4c:	0751      	lsls	r1, r2, #29
 8000a4e:	d50d      	bpl.n	8000a6c <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000a50:	f06f 0204 	mvn.w	r2, #4
 8000a54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000a56:	2202      	movs	r2, #2
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000a58:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000a5a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000a5c:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000a60:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000a62:	d068      	beq.n	8000b36 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8000a64:	f7ff ffd5 	bl	8000a12 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000a6c:	6823      	ldr	r3, [r4, #0]
 8000a6e:	691a      	ldr	r2, [r3, #16]
 8000a70:	0712      	lsls	r2, r2, #28
 8000a72:	d50f      	bpl.n	8000a94 <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8000a74:	68da      	ldr	r2, [r3, #12]
 8000a76:	0710      	lsls	r0, r2, #28
 8000a78:	d50c      	bpl.n	8000a94 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000a7a:	f06f 0208 	mvn.w	r2, #8
 8000a7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000a80:	2204      	movs	r2, #4
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000a82:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000a84:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000a86:	0799      	lsls	r1, r3, #30
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000a88:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000a8a:	d05a      	beq.n	8000b42 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8000a8c:	f7ff ffc1 	bl	8000a12 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000a90:	2300      	movs	r3, #0
 8000a92:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000a94:	6823      	ldr	r3, [r4, #0]
 8000a96:	691a      	ldr	r2, [r3, #16]
 8000a98:	06d2      	lsls	r2, r2, #27
 8000a9a:	d510      	bpl.n	8000abe <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8000a9c:	68da      	ldr	r2, [r3, #12]
 8000a9e:	06d0      	lsls	r0, r2, #27
 8000aa0:	d50d      	bpl.n	8000abe <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000aa2:	f06f 0210 	mvn.w	r2, #16
 8000aa6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000aa8:	2208      	movs	r2, #8
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000aaa:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000aac:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000aae:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000ab2:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000ab4:	d04b      	beq.n	8000b4e <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8000ab6:	f7ff ffac 	bl	8000a12 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000aba:	2300      	movs	r3, #0
 8000abc:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000abe:	6823      	ldr	r3, [r4, #0]
 8000ac0:	691a      	ldr	r2, [r3, #16]
 8000ac2:	07d1      	lsls	r1, r2, #31
 8000ac4:	d508      	bpl.n	8000ad8 <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8000ac6:	68da      	ldr	r2, [r3, #12]
 8000ac8:	07d2      	lsls	r2, r2, #31
 8000aca:	d505      	bpl.n	8000ad8 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000acc:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8000ad0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000ad2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8000ad4:	f000 fb80 	bl	80011d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000ad8:	6823      	ldr	r3, [r4, #0]
 8000ada:	691a      	ldr	r2, [r3, #16]
 8000adc:	0610      	lsls	r0, r2, #24
 8000ade:	d508      	bpl.n	8000af2 <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8000ae0:	68da      	ldr	r2, [r3, #12]
 8000ae2:	0611      	lsls	r1, r2, #24
 8000ae4:	d505      	bpl.n	8000af2 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000ae6:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8000aea:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000aec:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8000aee:	f000 f944 	bl	8000d7a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000af2:	6823      	ldr	r3, [r4, #0]
 8000af4:	691a      	ldr	r2, [r3, #16]
 8000af6:	0652      	lsls	r2, r2, #25
 8000af8:	d508      	bpl.n	8000b0c <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8000afa:	68da      	ldr	r2, [r3, #12]
 8000afc:	0650      	lsls	r0, r2, #25
 8000afe:	d505      	bpl.n	8000b0c <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000b00:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8000b04:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000b06:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8000b08:	f7ff ff85 	bl	8000a16 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000b0c:	6823      	ldr	r3, [r4, #0]
 8000b0e:	691a      	ldr	r2, [r3, #16]
 8000b10:	0691      	lsls	r1, r2, #26
 8000b12:	d522      	bpl.n	8000b5a <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8000b14:	68da      	ldr	r2, [r3, #12]
 8000b16:	0692      	lsls	r2, r2, #26
 8000b18:	d51f      	bpl.n	8000b5a <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000b1a:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8000b1e:	4620      	mov	r0, r4
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8000b20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000b24:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8000b26:	f000 b927 	b.w	8000d78 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000b2a:	f7ff ff71 	bl	8000a10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000b2e:	4620      	mov	r0, r4
 8000b30:	f7ff ff70 	bl	8000a14 <HAL_TIM_PWM_PulseFinishedCallback>
 8000b34:	e783      	b.n	8000a3e <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000b36:	f7ff ff6b 	bl	8000a10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000b3a:	4620      	mov	r0, r4
 8000b3c:	f7ff ff6a 	bl	8000a14 <HAL_TIM_PWM_PulseFinishedCallback>
 8000b40:	e792      	b.n	8000a68 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000b42:	f7ff ff65 	bl	8000a10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000b46:	4620      	mov	r0, r4
 8000b48:	f7ff ff64 	bl	8000a14 <HAL_TIM_PWM_PulseFinishedCallback>
 8000b4c:	e7a0      	b.n	8000a90 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000b4e:	f7ff ff5f 	bl	8000a10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000b52:	4620      	mov	r0, r4
 8000b54:	f7ff ff5e 	bl	8000a14 <HAL_TIM_PWM_PulseFinishedCallback>
 8000b58:	e7af      	b.n	8000aba <HAL_TIM_IRQHandler+0xa2>
 8000b5a:	bd10      	pop	{r4, pc}

08000b5c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000b5c:	4a1a      	ldr	r2, [pc, #104]	; (8000bc8 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8000b5e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000b60:	4290      	cmp	r0, r2
 8000b62:	d00a      	beq.n	8000b7a <TIM_Base_SetConfig+0x1e>
 8000b64:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000b68:	d007      	beq.n	8000b7a <TIM_Base_SetConfig+0x1e>
 8000b6a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8000b6e:	4290      	cmp	r0, r2
 8000b70:	d003      	beq.n	8000b7a <TIM_Base_SetConfig+0x1e>
 8000b72:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000b76:	4290      	cmp	r0, r2
 8000b78:	d115      	bne.n	8000ba6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8000b7a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000b7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000b80:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000b82:	4a11      	ldr	r2, [pc, #68]	; (8000bc8 <TIM_Base_SetConfig+0x6c>)
 8000b84:	4290      	cmp	r0, r2
 8000b86:	d00a      	beq.n	8000b9e <TIM_Base_SetConfig+0x42>
 8000b88:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000b8c:	d007      	beq.n	8000b9e <TIM_Base_SetConfig+0x42>
 8000b8e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8000b92:	4290      	cmp	r0, r2
 8000b94:	d003      	beq.n	8000b9e <TIM_Base_SetConfig+0x42>
 8000b96:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000b9a:	4290      	cmp	r0, r2
 8000b9c:	d103      	bne.n	8000ba6 <TIM_Base_SetConfig+0x4a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000b9e:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000ba0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000ba4:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8000ba6:	694a      	ldr	r2, [r1, #20]
 8000ba8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000bac:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8000bae:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000bb0:	688b      	ldr	r3, [r1, #8]
 8000bb2:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8000bb4:	680b      	ldr	r3, [r1, #0]
 8000bb6:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000bb8:	4b03      	ldr	r3, [pc, #12]	; (8000bc8 <TIM_Base_SetConfig+0x6c>)
 8000bba:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8000bbc:	bf04      	itt	eq
 8000bbe:	690b      	ldreq	r3, [r1, #16]
 8000bc0:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	6143      	str	r3, [r0, #20]
 8000bc6:	4770      	bx	lr
 8000bc8:	40012c00 	.word	0x40012c00

08000bcc <HAL_TIM_Base_Init>:
{
 8000bcc:	b510      	push	{r4, lr}
  if (htim == NULL)
 8000bce:	4604      	mov	r4, r0
 8000bd0:	b1a0      	cbz	r0, 8000bfc <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8000bd2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000bd6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000bda:	b91b      	cbnz	r3, 8000be4 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000bdc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8000be0:	f000 fe1a 	bl	8001818 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8000be4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000be6:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8000be8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000bec:	1d21      	adds	r1, r4, #4
 8000bee:	f7ff ffb5 	bl	8000b5c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8000bf2:	2301      	movs	r3, #1
  return HAL_OK;
 8000bf4:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8000bf6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8000bfa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000bfc:	2001      	movs	r0, #1
}
 8000bfe:	bd10      	pop	{r4, pc}

08000c00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8000c00:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8000c02:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000c04:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000c06:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000c0a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8000c0e:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8000c10:	6083      	str	r3, [r0, #8]
 8000c12:	bd10      	pop	{r4, pc}

08000c14 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8000c14:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8000c18:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8000c1a:	2b01      	cmp	r3, #1
{
 8000c1c:	4604      	mov	r4, r0
 8000c1e:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8000c22:	d019      	beq.n	8000c58 <HAL_TIM_ConfigClockSource+0x44>
 8000c24:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8000c26:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8000c2a:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8000c2c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8000c30:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000c32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000c36:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8000c3a:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8000c3c:	680b      	ldr	r3, [r1, #0]
 8000c3e:	2b40      	cmp	r3, #64	; 0x40
 8000c40:	d065      	beq.n	8000d0e <HAL_TIM_ConfigClockSource+0xfa>
 8000c42:	d815      	bhi.n	8000c70 <HAL_TIM_ConfigClockSource+0x5c>
 8000c44:	2b10      	cmp	r3, #16
 8000c46:	d00c      	beq.n	8000c62 <HAL_TIM_ConfigClockSource+0x4e>
 8000c48:	d807      	bhi.n	8000c5a <HAL_TIM_ConfigClockSource+0x46>
 8000c4a:	b153      	cbz	r3, 8000c62 <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 8000c4c:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8000c4e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8000c50:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8000c54:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8000c58:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8000c5a:	2b20      	cmp	r3, #32
 8000c5c:	d001      	beq.n	8000c62 <HAL_TIM_ConfigClockSource+0x4e>
 8000c5e:	2b30      	cmp	r3, #48	; 0x30
 8000c60:	d1f4      	bne.n	8000c4c <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 8000c62:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8000c64:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8000c68:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	e01a      	b.n	8000ca6 <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 8000c70:	2b60      	cmp	r3, #96	; 0x60
 8000c72:	d034      	beq.n	8000cde <HAL_TIM_ConfigClockSource+0xca>
 8000c74:	d819      	bhi.n	8000caa <HAL_TIM_ConfigClockSource+0x96>
 8000c76:	2b50      	cmp	r3, #80	; 0x50
 8000c78:	d1e8      	bne.n	8000c4c <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8000c7a:	684a      	ldr	r2, [r1, #4]
 8000c7c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8000c7e:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000c80:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000c82:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000c86:	f025 0501 	bic.w	r5, r5, #1
 8000c8a:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000c8c:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8000c8e:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000c90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000c94:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8000c98:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8000c9a:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8000c9c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8000c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8000ca2:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8000ca6:	6083      	str	r3, [r0, #8]
 8000ca8:	e7d0      	b.n	8000c4c <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 8000caa:	2b70      	cmp	r3, #112	; 0x70
 8000cac:	d00c      	beq.n	8000cc8 <HAL_TIM_ConfigClockSource+0xb4>
 8000cae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000cb2:	d1cb      	bne.n	8000c4c <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 8000cb4:	68cb      	ldr	r3, [r1, #12]
 8000cb6:	684a      	ldr	r2, [r1, #4]
 8000cb8:	6889      	ldr	r1, [r1, #8]
 8000cba:	f7ff ffa1 	bl	8000c00 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8000cbe:	6822      	ldr	r2, [r4, #0]
 8000cc0:	6893      	ldr	r3, [r2, #8]
 8000cc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cc6:	e008      	b.n	8000cda <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 8000cc8:	68cb      	ldr	r3, [r1, #12]
 8000cca:	684a      	ldr	r2, [r1, #4]
 8000ccc:	6889      	ldr	r1, [r1, #8]
 8000cce:	f7ff ff97 	bl	8000c00 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8000cd2:	6822      	ldr	r2, [r4, #0]
 8000cd4:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8000cd6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8000cda:	6093      	str	r3, [r2, #8]
      break;
 8000cdc:	e7b6      	b.n	8000c4c <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8000cde:	684d      	ldr	r5, [r1, #4]
 8000ce0:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000ce2:	6a01      	ldr	r1, [r0, #32]
 8000ce4:	f021 0110 	bic.w	r1, r1, #16
 8000ce8:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000cea:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8000cec:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8000cee:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8000cf2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8000cf6:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8000cfa:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8000cfe:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8000d00:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8000d02:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8000d04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8000d08:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8000d0c:	e7cb      	b.n	8000ca6 <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8000d0e:	684a      	ldr	r2, [r1, #4]
 8000d10:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8000d12:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000d14:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000d16:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000d1a:	f025 0501 	bic.w	r5, r5, #1
 8000d1e:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000d20:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8000d22:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000d24:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000d28:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8000d2c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8000d2e:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8000d30:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8000d32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8000d36:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8000d3a:	e7b4      	b.n	8000ca6 <HAL_TIM_ConfigClockSource+0x92>

08000d3c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8000d3c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8000d40:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	f04f 0302 	mov.w	r3, #2
 8000d48:	d014      	beq.n	8000d74 <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8000d4a:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8000d4c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8000d50:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8000d52:	68a3      	ldr	r3, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8000d54:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8000d56:	6849      	ldr	r1, [r1, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 8000d58:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 8000d5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8000d60:	430b      	orrs	r3, r1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8000d62:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8000d64:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8000d66:	60a3      	str	r3, [r4, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8000d6e:	2300      	movs	r3, #0
 8000d70:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8000d74:	4618      	mov	r0, r3

  return HAL_OK;
}
 8000d76:	bd30      	pop	{r4, r5, pc}

08000d78 <HAL_TIMEx_CommutCallback>:
 8000d78:	4770      	bx	lr

08000d7a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8000d7a:	4770      	bx	lr

08000d7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000d7c:	b538      	push	{r3, r4, r5, lr}
 8000d7e:	4605      	mov	r5, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000d80:	6803      	ldr	r3, [r0, #0]
 8000d82:	68c1      	ldr	r1, [r0, #12]
 8000d84:	691a      	ldr	r2, [r3, #16]
 8000d86:	2419      	movs	r4, #25
 8000d88:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000d8c:	430a      	orrs	r2, r1
 8000d8e:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000d90:	6882      	ldr	r2, [r0, #8]
 8000d92:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8000d94:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000d96:	4302      	orrs	r2, r0
 8000d98:	6968      	ldr	r0, [r5, #20]
  MODIFY_REG(huart->Instance->CR1,
 8000d9a:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8000d9e:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000da2:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8000da4:	430a      	orrs	r2, r1
 8000da6:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000da8:	695a      	ldr	r2, [r3, #20]
 8000daa:	69a9      	ldr	r1, [r5, #24]
 8000dac:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000db0:	430a      	orrs	r2, r1
 8000db2:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8000db4:	4a0d      	ldr	r2, [pc, #52]	; (8000dec <UART_SetConfig+0x70>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d114      	bne.n	8000de4 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8000dba:	f7ff fe09 	bl	80009d0 <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8000dbe:	4360      	muls	r0, r4
 8000dc0:	686c      	ldr	r4, [r5, #4]
 8000dc2:	2264      	movs	r2, #100	; 0x64
 8000dc4:	00a4      	lsls	r4, r4, #2
 8000dc6:	fbb0 f0f4 	udiv	r0, r0, r4
 8000dca:	fbb0 f4f2 	udiv	r4, r0, r2
 8000dce:	fb02 0314 	mls	r3, r2, r4, r0
 8000dd2:	011b      	lsls	r3, r3, #4
 8000dd4:	3332      	adds	r3, #50	; 0x32
 8000dd6:	fbb3 f3f2 	udiv	r3, r3, r2
 8000dda:	6829      	ldr	r1, [r5, #0]
 8000ddc:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8000de0:	608b      	str	r3, [r1, #8]
 8000de2:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8000de4:	f7ff fde4 	bl	80009b0 <HAL_RCC_GetPCLK1Freq>
 8000de8:	e7e9      	b.n	8000dbe <UART_SetConfig+0x42>
 8000dea:	bf00      	nop
 8000dec:	40013800 	.word	0x40013800

08000df0 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8000df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000df2:	4604      	mov	r4, r0
 8000df4:	460e      	mov	r6, r1
 8000df6:	4617      	mov	r7, r2
 8000df8:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8000dfa:	6821      	ldr	r1, [r4, #0]
 8000dfc:	680b      	ldr	r3, [r1, #0]
 8000dfe:	ea36 0303 	bics.w	r3, r6, r3
 8000e02:	d101      	bne.n	8000e08 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8000e04:	2000      	movs	r0, #0
}
 8000e06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000e08:	1c6b      	adds	r3, r5, #1
 8000e0a:	d0f7      	beq.n	8000dfc <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000e0c:	b995      	cbnz	r5, 8000e34 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000e0e:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8000e10:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000e12:	68da      	ldr	r2, [r3, #12]
 8000e14:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8000e18:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000e1a:	695a      	ldr	r2, [r3, #20]
 8000e1c:	f022 0201 	bic.w	r2, r2, #1
 8000e20:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8000e22:	2320      	movs	r3, #32
 8000e24:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8000e28:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8000e32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000e34:	f7ff f9d4 	bl	80001e0 <HAL_GetTick>
 8000e38:	1bc0      	subs	r0, r0, r7
 8000e3a:	4285      	cmp	r5, r0
 8000e3c:	d2dd      	bcs.n	8000dfa <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8000e3e:	e7e6      	b.n	8000e0e <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08000e40 <HAL_UART_Init>:
{
 8000e40:	b510      	push	{r4, lr}
  if (huart == NULL)
 8000e42:	4604      	mov	r4, r0
 8000e44:	b340      	cbz	r0, 8000e98 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8000e46:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000e4a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000e4e:	b91b      	cbnz	r3, 8000e58 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8000e50:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8000e54:	f000 fcfe 	bl	8001854 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8000e58:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8000e5a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8000e5c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8000e60:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8000e62:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8000e64:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000e68:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8000e6a:	f7ff ff87 	bl	8000d7c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000e6e:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000e70:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000e72:	691a      	ldr	r2, [r3, #16]
 8000e74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000e78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000e7a:	695a      	ldr	r2, [r3, #20]
 8000e7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000e80:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8000e82:	68da      	ldr	r2, [r3, #12]
 8000e84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000e88:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8000e8a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000e8c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8000e8e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8000e92:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8000e96:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000e98:	2001      	movs	r0, #1
}
 8000e9a:	bd10      	pop	{r4, pc}

08000e9c <HAL_UART_Transmit>:
{
 8000e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ea0:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8000ea2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8000ea6:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8000ea8:	2b20      	cmp	r3, #32
{
 8000eaa:	460d      	mov	r5, r1
 8000eac:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8000eae:	d14e      	bne.n	8000f4e <HAL_UART_Transmit+0xb2>
    if ((pData == NULL) || (Size == 0U))
 8000eb0:	2900      	cmp	r1, #0
 8000eb2:	d049      	beq.n	8000f48 <HAL_UART_Transmit+0xac>
 8000eb4:	2a00      	cmp	r2, #0
 8000eb6:	d047      	beq.n	8000f48 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8000eb8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d046      	beq.n	8000f4e <HAL_UART_Transmit+0xb2>
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000eca:	2321      	movs	r3, #33	; 0x21
 8000ecc:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8000ed0:	f7ff f986 	bl	80001e0 <HAL_GetTick>
 8000ed4:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 8000ed6:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8000eda:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8000ede:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8000ee0:	b29b      	uxth	r3, r3
 8000ee2:	b96b      	cbnz	r3, 8000f00 <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8000ee4:	463b      	mov	r3, r7
 8000ee6:	4632      	mov	r2, r6
 8000ee8:	2140      	movs	r1, #64	; 0x40
 8000eea:	4620      	mov	r0, r4
 8000eec:	f7ff ff80 	bl	8000df0 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000ef0:	b9a8      	cbnz	r0, 8000f1e <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8000ef2:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8000ef4:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8000ef8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8000efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8000f00:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000f02:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8000f04:	3b01      	subs	r3, #1
 8000f06:	b29b      	uxth	r3, r3
 8000f08:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000f0a:	68a3      	ldr	r3, [r4, #8]
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000f0c:	2180      	movs	r1, #128	; 0x80
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000f0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000f12:	4620      	mov	r0, r4
 8000f14:	463b      	mov	r3, r7
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000f16:	d10e      	bne.n	8000f36 <HAL_UART_Transmit+0x9a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000f18:	f7ff ff6a 	bl	8000df0 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000f1c:	b110      	cbz	r0, 8000f24 <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 8000f1e:	2003      	movs	r0, #3
 8000f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8000f24:	882b      	ldrh	r3, [r5, #0]
 8000f26:	6822      	ldr	r2, [r4, #0]
 8000f28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000f2c:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8000f2e:	6923      	ldr	r3, [r4, #16]
 8000f30:	b943      	cbnz	r3, 8000f44 <HAL_UART_Transmit+0xa8>
          pData += 2U;
 8000f32:	3502      	adds	r5, #2
 8000f34:	e7d3      	b.n	8000ede <HAL_UART_Transmit+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000f36:	f7ff ff5b 	bl	8000df0 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000f3a:	2800      	cmp	r0, #0
 8000f3c:	d1ef      	bne.n	8000f1e <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8000f3e:	6823      	ldr	r3, [r4, #0]
 8000f40:	782a      	ldrb	r2, [r5, #0]
 8000f42:	605a      	str	r2, [r3, #4]
 8000f44:	3501      	adds	r5, #1
 8000f46:	e7ca      	b.n	8000ede <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8000f48:	2001      	movs	r0, #1
 8000f4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8000f4e:	2002      	movs	r0, #2
}
 8000f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000f54 <replac_string>:
extern UART_HandleTypeDef huart3;

///////////////////////// Функция для замены смволов \r и \n на пробелы ////////////////////////////
void replac_string(char *src)
{
	if(!src) return;
 8000f54:	b110      	cbz	r0, 8000f5c <replac_string+0x8>

	for(;*src; src++)
	{
		if(*src == '\n' || *src == '\r') *src = ' ';
 8000f56:	2220      	movs	r2, #32
	for(;*src; src++)
 8000f58:	7803      	ldrb	r3, [r0, #0]
 8000f5a:	b903      	cbnz	r3, 8000f5e <replac_string+0xa>
 8000f5c:	4770      	bx	lr
		if(*src == '\n' || *src == '\r') *src = ' ';
 8000f5e:	2b0a      	cmp	r3, #10
 8000f60:	d001      	beq.n	8000f66 <replac_string+0x12>
 8000f62:	2b0d      	cmp	r3, #13
 8000f64:	d100      	bne.n	8000f68 <replac_string+0x14>
 8000f66:	7002      	strb	r2, [r0, #0]
	for(;*src; src++)
 8000f68:	3001      	adds	r0, #1
 8000f6a:	e7f5      	b.n	8000f58 <replac_string+0x4>

08000f6c <set_comand>:
	}
}

///////////////////////// Функция для отправки настроечных команд, в цикле лучше не использовать ////////////////////////////
void set_comand(char *buff)
{
 8000f6c:	b570      	push	{r4, r5, r6, lr}
 8000f6e:	4606      	mov	r6, r0
 8000f70:	b0aa      	sub	sp, #168	; 0xa8
	char str[SEND_STR_SIZE] = {0,};
 8000f72:	ac02      	add	r4, sp, #8
 8000f74:	2240      	movs	r2, #64	; 0x40
 8000f76:	2100      	movs	r1, #0
 8000f78:	4620      	mov	r0, r4
 8000f7a:	f000 fe17 	bl	8001bac <memset>
	snprintf(str, SEND_STR_SIZE, "%s\r\n", buff);
 8000f7e:	4633      	mov	r3, r6
 8000f80:	4a47      	ldr	r2, [pc, #284]	; (80010a0 <set_comand+0x134>)
 8000f82:	2140      	movs	r1, #64	; 0x40
 8000f84:	4620      	mov	r0, r4
 8000f86:	f000 fe19 	bl	8001bbc <sniprintf>
	HAL_UART_Transmit(GSM, (uint8_t*)str, strlen(str), 1000);
 8000f8a:	4620      	mov	r0, r4
 8000f8c:	f7ff f8de 	bl	800014c <strlen>
 8000f90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f94:	b282      	uxth	r2, r0
 8000f96:	4621      	mov	r1, r4
 8000f98:	4842      	ldr	r0, [pc, #264]	; (80010a4 <set_comand+0x138>)
 8000f9a:	f7ff ff7f 	bl	8000e9c <HAL_UART_Transmit>
	HAL_Delay(100);
 8000f9e:	2064      	movs	r0, #100	; 0x64
 8000fa0:	f7ff f924 	bl	80001ec <HAL_Delay>

	memset(str, 0, SEND_STR_SIZE);
 8000fa4:	2240      	movs	r2, #64	; 0x40
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	4620      	mov	r0, r4
 8000faa:	f000 fdff 	bl	8001bac <memset>

	if(gsm_available()) //если модуль что-то прислал
 8000fae:	f000 fd61 	bl	8001a74 <gsm_available>
 8000fb2:	2800      	cmp	r0, #0
 8000fb4:	d072      	beq.n	800109c <set_comand+0x130>
 8000fb6:	2500      	movs	r5, #0
	{
		uint16_t i = 0;

		while(gsm_available())
 8000fb8:	f000 fd5c 	bl	8001a74 <gsm_available>
 8000fbc:	b128      	cbz	r0, 8000fca <set_comand+0x5e>
		{
			str[i++] = gsm_read();
 8000fbe:	f000 fd65 	bl	8001a8c <gsm_read>
 8000fc2:	5560      	strb	r0, [r4, r5]
 8000fc4:	3501      	adds	r5, #1
			if(i > SEND_STR_SIZE - 1) break;
 8000fc6:	2d40      	cmp	r5, #64	; 0x40
 8000fc8:	d12f      	bne.n	800102a <set_comand+0xbe>
			HAL_Delay(1);
		}

		replac_string(str);
 8000fca:	4620      	mov	r0, r4
 8000fcc:	f7ff ffc2 	bl	8000f54 <replac_string>

		char *p = NULL;

		if((p = strstr(str, "+CPAS:")) != NULL)
 8000fd0:	4935      	ldr	r1, [pc, #212]	; (80010a8 <set_comand+0x13c>)
 8000fd2:	4620      	mov	r0, r4
 8000fd4:	f000 fe34 	bl	8001c40 <strstr>
 8000fd8:	4605      	mov	r5, r0
 8000fda:	bb50      	cbnz	r0, 8001032 <set_comand+0xc6>
					HAL_GPIO_TogglePin(ER_LED_GPIO_Port, ER_LED_Pin);
					HAL_Delay(100);
				}
			}
		}
		else if((p = strstr(str, "+CREG:")) != NULL)
 8000fdc:	4933      	ldr	r1, [pc, #204]	; (80010ac <set_comand+0x140>)
 8000fde:	4620      	mov	r0, r4
 8000fe0:	f000 fe2e 	bl	8001c40 <strstr>
 8000fe4:	4605      	mov	r5, r0
 8000fe6:	2800      	cmp	r0, #0
 8000fe8:	d042      	beq.n	8001070 <set_comand+0x104>
		{
			if(strstr(str, "0,1") == NULL)
 8000fea:	4931      	ldr	r1, [pc, #196]	; (80010b0 <set_comand+0x144>)
 8000fec:	4620      	mov	r0, r4
 8000fee:	f000 fe27 	bl	8001c40 <strstr>
 8000ff2:	2800      	cmp	r0, #0
 8000ff4:	d13c      	bne.n	8001070 <set_comand+0x104>
			{
				HAL_UART_Transmit(DEBUG, (uint8_t*)p, strlen(p), 1000);
 8000ff6:	4628      	mov	r0, r5
 8000ff8:	f7ff f8a8 	bl	800014c <strlen>
 8000ffc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001000:	b282      	uxth	r2, r0
 8001002:	4629      	mov	r1, r5
 8001004:	482b      	ldr	r0, [pc, #172]	; (80010b4 <set_comand+0x148>)
 8001006:	f7ff ff49 	bl	8000e9c <HAL_UART_Transmit>
				HAL_UART_Transmit(DEBUG, (uint8_t*)"\n+CREG not ready, must be '0,1'\n", strlen("\n+CREG not ready, must be '0,1'\n"), 1000);
 800100a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800100e:	2220      	movs	r2, #32
 8001010:	4929      	ldr	r1, [pc, #164]	; (80010b8 <set_comand+0x14c>)
 8001012:	4828      	ldr	r0, [pc, #160]	; (80010b4 <set_comand+0x148>)
 8001014:	f7ff ff42 	bl	8000e9c <HAL_UART_Transmit>

				while(1)
				{
					HAL_GPIO_TogglePin(ER_LED_GPIO_Port, ER_LED_Pin);
 8001018:	4c28      	ldr	r4, [pc, #160]	; (80010bc <set_comand+0x150>)
 800101a:	4620      	mov	r0, r4
 800101c:	2180      	movs	r1, #128	; 0x80
 800101e:	f7ff fa48 	bl	80004b2 <HAL_GPIO_TogglePin>
					HAL_Delay(100);
 8001022:	2064      	movs	r0, #100	; 0x64
 8001024:	f7ff f8e2 	bl	80001ec <HAL_Delay>
 8001028:	e7f7      	b.n	800101a <set_comand+0xae>
			HAL_Delay(1);
 800102a:	2001      	movs	r0, #1
 800102c:	f7ff f8de 	bl	80001ec <HAL_Delay>
 8001030:	e7c2      	b.n	8000fb8 <set_comand+0x4c>
			if(strstr(str, "0") == NULL)
 8001032:	2130      	movs	r1, #48	; 0x30
 8001034:	4620      	mov	r0, r4
 8001036:	f000 fdf5 	bl	8001c24 <strchr>
 800103a:	b9c8      	cbnz	r0, 8001070 <set_comand+0x104>
				HAL_UART_Transmit(DEBUG, (uint8_t*)p, strlen(p), 1000);
 800103c:	4628      	mov	r0, r5
 800103e:	f7ff f885 	bl	800014c <strlen>
 8001042:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001046:	b282      	uxth	r2, r0
 8001048:	4629      	mov	r1, r5
 800104a:	481a      	ldr	r0, [pc, #104]	; (80010b4 <set_comand+0x148>)
 800104c:	f7ff ff26 	bl	8000e9c <HAL_UART_Transmit>
				HAL_UART_Transmit(DEBUG, (uint8_t*)"\n+CPAS not ready, must be '0'\n", strlen("\n+CPAS not ready, must be '0'\n"), 1000);
 8001050:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001054:	221e      	movs	r2, #30
 8001056:	491a      	ldr	r1, [pc, #104]	; (80010c0 <set_comand+0x154>)
 8001058:	4816      	ldr	r0, [pc, #88]	; (80010b4 <set_comand+0x148>)
 800105a:	f7ff ff1f 	bl	8000e9c <HAL_UART_Transmit>
					HAL_GPIO_TogglePin(ER_LED_GPIO_Port, ER_LED_Pin);
 800105e:	4c17      	ldr	r4, [pc, #92]	; (80010bc <set_comand+0x150>)
 8001060:	4620      	mov	r0, r4
 8001062:	2180      	movs	r1, #128	; 0x80
 8001064:	f7ff fa25 	bl	80004b2 <HAL_GPIO_TogglePin>
					HAL_Delay(100);
 8001068:	2064      	movs	r0, #100	; 0x64
 800106a:	f7ff f8bf 	bl	80001ec <HAL_Delay>
 800106e:	e7f7      	b.n	8001060 <set_comand+0xf4>
			}
		}

		p = 0;

		char dbg_str[SEND_STR_SIZE + 32] = {0,};
 8001070:	2260      	movs	r2, #96	; 0x60
 8001072:	2100      	movs	r1, #0
 8001074:	a812      	add	r0, sp, #72	; 0x48
 8001076:	f000 fd99 	bl	8001bac <memset>
		snprintf(dbg_str, SEND_STR_SIZE + 32, "%s %s\n", buff, str);
 800107a:	4633      	mov	r3, r6
 800107c:	4a11      	ldr	r2, [pc, #68]	; (80010c4 <set_comand+0x158>)
 800107e:	2160      	movs	r1, #96	; 0x60
 8001080:	9400      	str	r4, [sp, #0]
 8001082:	a812      	add	r0, sp, #72	; 0x48
 8001084:	f000 fd9a 	bl	8001bbc <sniprintf>
		HAL_UART_Transmit(DEBUG, (uint8_t*)dbg_str, strlen(dbg_str), 1000);
 8001088:	a812      	add	r0, sp, #72	; 0x48
 800108a:	f7ff f85f 	bl	800014c <strlen>
 800108e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001092:	b282      	uxth	r2, r0
 8001094:	a912      	add	r1, sp, #72	; 0x48
 8001096:	4807      	ldr	r0, [pc, #28]	; (80010b4 <set_comand+0x148>)
 8001098:	f7ff ff00 	bl	8000e9c <HAL_UART_Transmit>
	}
}
 800109c:	b02a      	add	sp, #168	; 0xa8
 800109e:	bd70      	pop	{r4, r5, r6, pc}
 80010a0:	080024d1 	.word	0x080024d1
 80010a4:	200001a4 	.word	0x200001a4
 80010a8:	080024d6 	.word	0x080024d6
 80010ac:	080024fc 	.word	0x080024fc
 80010b0:	08002503 	.word	0x08002503
 80010b4:	20000164 	.word	0x20000164
 80010b8:	08002507 	.word	0x08002507
 80010bc:	40010800 	.word	0x40010800
 80010c0:	080024dd 	.word	0x080024dd
 80010c4:	08002528 	.word	0x08002528

080010c8 <balance>:

/////////////////////// Функции для использования в цикле //////////////////////////
void balance(void)
{
 80010c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	char ATD[] = "ATD#100#;\r\n"; // баланс (бабло)
 80010ca:	4a0a      	ldr	r2, [pc, #40]	; (80010f4 <balance+0x2c>)
 80010cc:	ab01      	add	r3, sp, #4
 80010ce:	6810      	ldr	r0, [r2, #0]
 80010d0:	6851      	ldr	r1, [r2, #4]
 80010d2:	c303      	stmia	r3!, {r0, r1}
 80010d4:	6890      	ldr	r0, [r2, #8]
 80010d6:	6018      	str	r0, [r3, #0]
	HAL_UART_Transmit(GSM, (uint8_t*)ATD, strlen(ATD), 1000);
 80010d8:	a801      	add	r0, sp, #4
 80010da:	f7ff f837 	bl	800014c <strlen>
 80010de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010e2:	b282      	uxth	r2, r0
 80010e4:	a901      	add	r1, sp, #4
 80010e6:	4804      	ldr	r0, [pc, #16]	; (80010f8 <balance+0x30>)
 80010e8:	f7ff fed8 	bl	8000e9c <HAL_UART_Transmit>
}
 80010ec:	b005      	add	sp, #20
 80010ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80010f2:	bf00      	nop
 80010f4:	080024ac 	.word	0x080024ac
 80010f8:	200001a4 	.word	0x200001a4

080010fc <disable_connection>:

void disable_connection(void)
{
 80010fc:	b507      	push	{r0, r1, r2, lr}
	char ATH[] = "ATH\r\n"; // сбросить все соединения
 80010fe:	4b09      	ldr	r3, [pc, #36]	; (8001124 <disable_connection+0x28>)
 8001100:	6818      	ldr	r0, [r3, #0]
 8001102:	889b      	ldrh	r3, [r3, #4]
 8001104:	9000      	str	r0, [sp, #0]
	HAL_UART_Transmit(GSM, (uint8_t*)ATH, strlen(ATH), 1000);
 8001106:	4668      	mov	r0, sp
	char ATH[] = "ATH\r\n"; // сбросить все соединения
 8001108:	f8ad 3004 	strh.w	r3, [sp, #4]
	HAL_UART_Transmit(GSM, (uint8_t*)ATH, strlen(ATH), 1000);
 800110c:	f7ff f81e 	bl	800014c <strlen>
 8001110:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001114:	b282      	uxth	r2, r0
 8001116:	4669      	mov	r1, sp
 8001118:	4803      	ldr	r0, [pc, #12]	; (8001128 <disable_connection+0x2c>)
 800111a:	f7ff febf 	bl	8000e9c <HAL_UART_Transmit>
}
 800111e:	b003      	add	sp, #12
 8001120:	f85d fb04 	ldr.w	pc, [sp], #4
 8001124:	080024cb 	.word	0x080024cb
 8001128:	200001a4 	.word	0x200001a4

0800112c <call>:

void call(void)
{
 800112c:	b570      	push	{r4, r5, r6, lr}
 800112e:	b086      	sub	sp, #24
	char ATD[] = "ATD+79819555551;\r\n"; // позвонить
 8001130:	aa01      	add	r2, sp, #4
 8001132:	4615      	mov	r5, r2
 8001134:	4b0d      	ldr	r3, [pc, #52]	; (800116c <call+0x40>)
 8001136:	f103 0610 	add.w	r6, r3, #16
 800113a:	4614      	mov	r4, r2
 800113c:	6818      	ldr	r0, [r3, #0]
 800113e:	6859      	ldr	r1, [r3, #4]
 8001140:	3308      	adds	r3, #8
 8001142:	c403      	stmia	r4!, {r0, r1}
 8001144:	42b3      	cmp	r3, r6
 8001146:	4622      	mov	r2, r4
 8001148:	d1f7      	bne.n	800113a <call+0xe>
 800114a:	8819      	ldrh	r1, [r3, #0]
 800114c:	789b      	ldrb	r3, [r3, #2]
 800114e:	8021      	strh	r1, [r4, #0]
 8001150:	70a3      	strb	r3, [r4, #2]
	HAL_UART_Transmit(GSM, (uint8_t*)ATD, strlen(ATD), 1000);
 8001152:	4628      	mov	r0, r5
 8001154:	f7fe fffa 	bl	800014c <strlen>
 8001158:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800115c:	b282      	uxth	r2, r0
 800115e:	4629      	mov	r1, r5
 8001160:	4803      	ldr	r0, [pc, #12]	; (8001170 <call+0x44>)
 8001162:	f7ff fe9b 	bl	8000e9c <HAL_UART_Transmit>
}
 8001166:	b006      	add	sp, #24
 8001168:	bd70      	pop	{r4, r5, r6, pc}
 800116a:	bf00      	nop
 800116c:	080024b8 	.word	0x080024b8
 8001170:	200001a4 	.word	0x200001a4

08001174 <clear_string>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/////////////////// удалить символы \r и \n из строки //////////////////////
static void clear_string(char *src)
{
 8001174:	b510      	push	{r4, lr}
	char *dst = NULL;
	if(!src) return;
 8001176:	b128      	cbz	r0, 8001184 <clear_string+0x10>
 8001178:	4601      	mov	r1, r0
 800117a:	2200      	movs	r2, #0
		if(i < 2 && (*src == '\n' || *src == '\r'))
		{
			i++;
			continue;
		}
		else if(*src == '\n' || *src == '\r') *src = ' ';
 800117c:	2420      	movs	r4, #32
	for(dst = src; *src; src++)
 800117e:	7803      	ldrb	r3, [r0, #0]
 8001180:	b90b      	cbnz	r3, 8001186 <clear_string+0x12>

		*dst++ = *src;
	}

	*dst = 0;
 8001182:	700b      	strb	r3, [r1, #0]
 8001184:	bd10      	pop	{r4, pc}
		if(i < 2 && (*src == '\n' || *src == '\r'))
 8001186:	2a01      	cmp	r2, #1
 8001188:	d807      	bhi.n	800119a <clear_string+0x26>
 800118a:	2b0a      	cmp	r3, #10
 800118c:	d001      	beq.n	8001192 <clear_string+0x1e>
 800118e:	2b0d      	cmp	r3, #13
 8001190:	d108      	bne.n	80011a4 <clear_string+0x30>
			i++;
 8001192:	3201      	adds	r2, #1
 8001194:	b2d2      	uxtb	r2, r2
	for(dst = src; *src; src++)
 8001196:	3001      	adds	r0, #1
 8001198:	e7f1      	b.n	800117e <clear_string+0xa>
		else if(*src == '\n' || *src == '\r') *src = ' ';
 800119a:	2b0a      	cmp	r3, #10
 800119c:	d001      	beq.n	80011a2 <clear_string+0x2e>
 800119e:	2b0d      	cmp	r3, #13
 80011a0:	d100      	bne.n	80011a4 <clear_string+0x30>
 80011a2:	7004      	strb	r4, [r0, #0]
		*dst++ = *src;
 80011a4:	7803      	ldrb	r3, [r0, #0]
 80011a6:	3101      	adds	r1, #1
 80011a8:	f801 3c01 	strb.w	r3, [r1, #-1]
 80011ac:	e7f3      	b.n	8001196 <clear_string+0x22>
	...

080011b0 <MX_USART1_UART_Init>:

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 57600;
 80011b0:	f44f 4c61 	mov.w	ip, #57600	; 0xe100
  huart1.Instance = USART1;
 80011b4:	4806      	ldr	r0, [pc, #24]	; (80011d0 <MX_USART1_UART_Init+0x20>)
  huart1.Init.BaudRate = 57600;
 80011b6:	4b07      	ldr	r3, [pc, #28]	; (80011d4 <MX_USART1_UART_Init+0x24>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011b8:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 57600;
 80011ba:	e880 1008 	stmia.w	r0, {r3, ip}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011be:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011c0:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011c2:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011c4:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011c6:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011c8:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011ca:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011cc:	f7ff be38 	b.w	8000e40 <HAL_UART_Init>
 80011d0:	200001a4 	.word	0x200001a4
 80011d4:	40013800 	.word	0x40013800

080011d8 <HAL_TIM_PeriodElapsedCallback>:
	if(htim->Instance == TIM4)
 80011d8:	6802      	ldr	r2, [r0, #0]
 80011da:	4b03      	ldr	r3, [pc, #12]	; (80011e8 <HAL_TIM_PeriodElapsedCallback+0x10>)
 80011dc:	429a      	cmp	r2, r3
		flag = 1;
 80011de:	bf02      	ittt	eq
 80011e0:	2201      	moveq	r2, #1
 80011e2:	4b02      	ldreq	r3, [pc, #8]	; (80011ec <HAL_TIM_PeriodElapsedCallback+0x14>)
 80011e4:	701a      	strbeq	r2, [r3, #0]
 80011e6:	4770      	bx	lr
 80011e8:	40000800 	.word	0x40000800
 80011ec:	2000008c 	.word	0x2000008c

080011f0 <chek_speed>:
{
 80011f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	  if(i == 0) sp = 2400;
 80011f4:	f44f 6316 	mov.w	r3, #2400	; 0x960
  for(uint8_t i = 0; i < 7; i++)
 80011f8:	2500      	movs	r5, #0
	  huart1.Instance = USART1;
 80011fa:	4e3d      	ldr	r6, [pc, #244]	; (80012f0 <chek_speed+0x100>)
 80011fc:	4f3d      	ldr	r7, [pc, #244]	; (80012f4 <chek_speed+0x104>)
	  HAL_UART_Transmit(GSM, (uint8_t*)"AT\r\n", strlen("AT\r\n"), 1000);
 80011fe:	f8df 8108 	ldr.w	r8, [pc, #264]	; 8001308 <chek_speed+0x118>
{
 8001202:	b094      	sub	sp, #80	; 0x50
	  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001204:	2400      	movs	r4, #0
	  huart1.Init.BaudRate = sp;
 8001206:	6073      	str	r3, [r6, #4]
	  huart1.Init.Mode = UART_MODE_TX_RX;
 8001208:	230c      	movs	r3, #12
	  if (HAL_UART_Init(&huart1) != HAL_OK)
 800120a:	4839      	ldr	r0, [pc, #228]	; (80012f0 <chek_speed+0x100>)
	  huart1.Init.Mode = UART_MODE_TX_RX;
 800120c:	6173      	str	r3, [r6, #20]
	  huart1.Instance = USART1;
 800120e:	6037      	str	r7, [r6, #0]
	  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001210:	60b4      	str	r4, [r6, #8]
	  huart1.Init.StopBits = UART_STOPBITS_1;
 8001212:	60f4      	str	r4, [r6, #12]
	  huart1.Init.Parity = UART_PARITY_NONE;
 8001214:	6134      	str	r4, [r6, #16]
	  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001216:	61b4      	str	r4, [r6, #24]
	  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001218:	61f4      	str	r4, [r6, #28]
	  if (HAL_UART_Init(&huart1) != HAL_OK)
 800121a:	f7ff fe11 	bl	8000e40 <HAL_UART_Init>
	  char str[16] = {0,};
 800121e:	2210      	movs	r2, #16
 8001220:	4621      	mov	r1, r4
 8001222:	4668      	mov	r0, sp
 8001224:	f000 fcc2 	bl	8001bac <memset>
	  HAL_UART_Transmit(GSM, (uint8_t*)"AT\r\n", strlen("AT\r\n"), 1000);
 8001228:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800122c:	2204      	movs	r2, #4
 800122e:	4641      	mov	r1, r8
 8001230:	482f      	ldr	r0, [pc, #188]	; (80012f0 <chek_speed+0x100>)
 8001232:	f7ff fe33 	bl	8000e9c <HAL_UART_Transmit>
	  HAL_Delay(300);
 8001236:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800123a:	f7fe ffd7 	bl	80001ec <HAL_Delay>
	  if(gsm_available()) //если модуль что-то прислал
 800123e:	f000 fc19 	bl	8001a74 <gsm_available>
 8001242:	2800      	cmp	r0, #0
 8001244:	d041      	beq.n	80012ca <chek_speed+0xda>
		  while(gsm_available())
 8001246:	f000 fc15 	bl	8001a74 <gsm_available>
 800124a:	b130      	cbz	r0, 800125a <chek_speed+0x6a>
			  str[i++] = gsm_read();
 800124c:	f000 fc1e 	bl	8001a8c <gsm_read>
 8001250:	f80d 0004 	strb.w	r0, [sp, r4]
 8001254:	3401      	adds	r4, #1
			  if(i > 15) break;
 8001256:	2c10      	cmp	r4, #16
 8001258:	d133      	bne.n	80012c2 <chek_speed+0xd2>
		  if(strstr(str, "OK") != NULL)
 800125a:	4927      	ldr	r1, [pc, #156]	; (80012f8 <chek_speed+0x108>)
 800125c:	4668      	mov	r0, sp
 800125e:	f000 fcef 	bl	8001c40 <strstr>
 8001262:	b390      	cbz	r0, 80012ca <chek_speed+0xda>
			  char buf[64] = {0,};
 8001264:	2240      	movs	r2, #64	; 0x40
 8001266:	2100      	movs	r1, #0
 8001268:	a804      	add	r0, sp, #16
 800126a:	f000 fc9f 	bl	8001bac <memset>
			  snprintf(buf, 64, "Uart modem was %lu, switched to 57600\n", huart1.Init.BaudRate);
 800126e:	6873      	ldr	r3, [r6, #4]
 8001270:	4a22      	ldr	r2, [pc, #136]	; (80012fc <chek_speed+0x10c>)
 8001272:	2140      	movs	r1, #64	; 0x40
 8001274:	a804      	add	r0, sp, #16
 8001276:	f000 fca1 	bl	8001bbc <sniprintf>
			  HAL_UART_Transmit(DEBUG, (uint8_t*)buf, strlen(buf), 100);
 800127a:	a804      	add	r0, sp, #16
 800127c:	f7fe ff66 	bl	800014c <strlen>
 8001280:	2364      	movs	r3, #100	; 0x64
 8001282:	b282      	uxth	r2, r0
 8001284:	a904      	add	r1, sp, #16
 8001286:	481e      	ldr	r0, [pc, #120]	; (8001300 <chek_speed+0x110>)
 8001288:	f7ff fe08 	bl	8000e9c <HAL_UART_Transmit>
			  HAL_UART_Transmit(GSM, (uint8_t*)"AT+IPR=57600\r\n", strlen("AT+IPR=57600\r\n"), 1000);
 800128c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001290:	220e      	movs	r2, #14
 8001292:	491c      	ldr	r1, [pc, #112]	; (8001304 <chek_speed+0x114>)
 8001294:	4816      	ldr	r0, [pc, #88]	; (80012f0 <chek_speed+0x100>)
 8001296:	f7ff fe01 	bl	8000e9c <HAL_UART_Transmit>
			  HAL_Delay(250);
 800129a:	20fa      	movs	r0, #250	; 0xfa
 800129c:	f7fe ffa6 	bl	80001ec <HAL_Delay>
			  MX_USART1_UART_Init();
 80012a0:	f7ff ff86 	bl	80011b0 <MX_USART1_UART_Init>
}
 80012a4:	b014      	add	sp, #80	; 0x50
 80012a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	  else if(i == 1) sp = 4800;
 80012aa:	f44f 5396 	mov.w	r3, #4800	; 0x12c0
 80012ae:	e7a9      	b.n	8001204 <chek_speed+0x14>
	  else if(i == 2) sp = 9600;
 80012b0:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80012b4:	e7a6      	b.n	8001204 <chek_speed+0x14>
	  else if(i == 3) sp = 19200;
 80012b6:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
 80012ba:	e7a3      	b.n	8001204 <chek_speed+0x14>
	  else if(i == 4) sp = 38400;
 80012bc:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 80012c0:	e7a0      	b.n	8001204 <chek_speed+0x14>
			  HAL_Delay(2);
 80012c2:	2002      	movs	r0, #2
 80012c4:	f7fe ff92 	bl	80001ec <HAL_Delay>
 80012c8:	e7bd      	b.n	8001246 <chek_speed+0x56>
  for(uint8_t i = 0; i < 7; i++)
 80012ca:	3501      	adds	r5, #1
 80012cc:	b2ed      	uxtb	r5, r5
 80012ce:	2d07      	cmp	r5, #7
 80012d0:	d0e8      	beq.n	80012a4 <chek_speed+0xb4>
	  else if(i == 1) sp = 4800;
 80012d2:	2d01      	cmp	r5, #1
 80012d4:	d0e9      	beq.n	80012aa <chek_speed+0xba>
	  else if(i == 2) sp = 9600;
 80012d6:	2d02      	cmp	r5, #2
 80012d8:	d0ea      	beq.n	80012b0 <chek_speed+0xc0>
	  else if(i == 3) sp = 19200;
 80012da:	2d03      	cmp	r5, #3
 80012dc:	d0eb      	beq.n	80012b6 <chek_speed+0xc6>
	  else if(i == 4) sp = 38400;
 80012de:	2d04      	cmp	r5, #4
 80012e0:	d0ec      	beq.n	80012bc <chek_speed+0xcc>
	  else if(i == 6) sp = 115200;
 80012e2:	2d05      	cmp	r5, #5
 80012e4:	bf0c      	ite	eq
 80012e6:	f44f 4361 	moveq.w	r3, #57600	; 0xe100
 80012ea:	f44f 33e1 	movne.w	r3, #115200	; 0x1c200
 80012ee:	e789      	b.n	8001204 <chek_speed+0x14>
 80012f0:	200001a4 	.word	0x200001a4
 80012f4:	40013800 	.word	0x40013800
 80012f8:	08002534 	.word	0x08002534
 80012fc:	08002537 	.word	0x08002537
 8001300:	20000164 	.word	0x20000164
 8001304:	0800255e 	.word	0x0800255e
 8001308:	0800252f 	.word	0x0800252f

0800130c <SystemClock_Config>:
{
 800130c:	b510      	push	{r4, lr}
 800130e:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001310:	2228      	movs	r2, #40	; 0x28
 8001312:	2100      	movs	r1, #0
 8001314:	a806      	add	r0, sp, #24
 8001316:	f000 fc49 	bl	8001bac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800131a:	2100      	movs	r1, #0
 800131c:	2214      	movs	r2, #20
 800131e:	a801      	add	r0, sp, #4
 8001320:	f000 fc44 	bl	8001bac <memset>
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001324:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001328:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800132a:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800132c:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800132e:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001330:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001334:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001336:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001338:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800133a:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800133c:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800133e:	f7ff f8bf 	bl	80004c0 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001342:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001344:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001348:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800134a:	2300      	movs	r3, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800134c:	4621      	mov	r1, r4
 800134e:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001350:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001352:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001354:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001356:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001358:	f7ff fa8c 	bl	8000874 <HAL_RCC_ClockConfig>
}
 800135c:	b010      	add	sp, #64	; 0x40
 800135e:	bd10      	pop	{r4, pc}

08001360 <main>:
{
 8001360:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001364:	b0ad      	sub	sp, #180	; 0xb4
  HAL_Init();
 8001366:	f7fe ff1d 	bl	80001a4 <HAL_Init>
  SystemClock_Config();
 800136a:	f7ff ffcf 	bl	800130c <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136e:	2210      	movs	r2, #16
 8001370:	2100      	movs	r1, #0
 8001372:	a81c      	add	r0, sp, #112	; 0x70
 8001374:	f000 fc1a 	bl	8001bac <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001378:	4bb1      	ldr	r3, [pc, #708]	; (8001640 <main+0x2e0>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ON_RELAY_Pin|ER_LED_Pin, GPIO_PIN_RESET);
 800137a:	2181      	movs	r1, #129	; 0x81
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800137c:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, ON_RELAY_Pin|ER_LED_Pin, GPIO_PIN_RESET);
 800137e:	48b1      	ldr	r0, [pc, #708]	; (8001644 <main+0x2e4>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001380:	f042 0220 	orr.w	r2, r2, #32
 8001384:	619a      	str	r2, [r3, #24]
 8001386:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pins : ON_RELAY_Pin ER_LED_Pin */
  GPIO_InitStruct.Pin = ON_RELAY_Pin|ER_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	2500      	movs	r5, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800138a:	f002 0220 	and.w	r2, r2, #32
 800138e:	9201      	str	r2, [sp, #4]
 8001390:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001392:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001394:	f04f 0801 	mov.w	r8, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001398:	f042 0204 	orr.w	r2, r2, #4
 800139c:	619a      	str	r2, [r3, #24]
 800139e:	699a      	ldr	r2, [r3, #24]
  htim4.Instance = TIM4;
 80013a0:	4ea9      	ldr	r6, [pc, #676]	; (8001648 <main+0x2e8>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a2:	f002 0204 	and.w	r2, r2, #4
 80013a6:	9202      	str	r2, [sp, #8]
 80013a8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013aa:	699a      	ldr	r2, [r3, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013ac:	ac0c      	add	r4, sp, #48	; 0x30
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ae:	f042 0208 	orr.w	r2, r2, #8
 80013b2:	619a      	str	r2, [r3, #24]
 80013b4:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, ON_RELAY_Pin|ER_LED_Pin, GPIO_PIN_RESET);
 80013b6:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b8:	f003 0308 	and.w	r3, r3, #8
 80013bc:	9303      	str	r3, [sp, #12]
 80013be:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOA, ON_RELAY_Pin|ER_LED_Pin, GPIO_PIN_RESET);
 80013c0:	f7ff f872 	bl	80004a8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = ON_RELAY_Pin|ER_LED_Pin;
 80013c4:	2381      	movs	r3, #129	; 0x81
 80013c6:	931c      	str	r3, [sp, #112]	; 0x70
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c8:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ca:	a91c      	add	r1, sp, #112	; 0x70
 80013cc:	489d      	ldr	r0, [pc, #628]	; (8001644 <main+0x2e4>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ce:	931f      	str	r3, [sp, #124]	; 0x7c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	951e      	str	r5, [sp, #120]	; 0x78
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d6:	f7fe ff85 	bl	80002e4 <HAL_GPIO_Init>
  MX_USART1_UART_Init();
 80013da:	f7ff fee9 	bl	80011b0 <MX_USART1_UART_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013de:	4629      	mov	r1, r5
 80013e0:	2210      	movs	r2, #16
 80013e2:	a81c      	add	r0, sp, #112	; 0x70
 80013e4:	f000 fbe2 	bl	8001bac <memset>
  htim4.Init.Prescaler = 7199;
 80013e8:	f641 431f 	movw	r3, #7199	; 0x1c1f
 80013ec:	4a97      	ldr	r2, [pc, #604]	; (800164c <main+0x2ec>)
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80013ee:	4630      	mov	r0, r6
  htim4.Init.Prescaler = 7199;
 80013f0:	e886 000c 	stmia.w	r6, {r2, r3}
  htim4.Init.Period = 9999;
 80013f4:	f242 730f 	movw	r3, #9999	; 0x270f
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013f8:	60b5      	str	r5, [r6, #8]
  htim4.Init.Period = 9999;
 80013fa:	60f3      	str	r3, [r6, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013fc:	6135      	str	r5, [r6, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013fe:	61b5      	str	r5, [r6, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001400:	950c      	str	r5, [sp, #48]	; 0x30
 8001402:	6065      	str	r5, [r4, #4]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001404:	f7ff fbe2 	bl	8000bcc <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001408:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800140c:	a91c      	add	r1, sp, #112	; 0x70
 800140e:	4630      	mov	r0, r6
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001410:	931c      	str	r3, [sp, #112]	; 0x70
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001412:	f7ff fbff 	bl	8000c14 <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001416:	4621      	mov	r1, r4
 8001418:	4630      	mov	r0, r6
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800141a:	950c      	str	r5, [sp, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800141c:	950d      	str	r5, [sp, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800141e:	f7ff fc8d 	bl	8000d3c <HAL_TIMEx_MasterConfigSynchronization>
  huart3.Init.BaudRate = 57600;
 8001422:	f44f 4361 	mov.w	r3, #57600	; 0xe100
  huart3.Instance = USART3;
 8001426:	4f8a      	ldr	r7, [pc, #552]	; (8001650 <main+0x2f0>)
  huart3.Init.BaudRate = 57600;
 8001428:	498a      	ldr	r1, [pc, #552]	; (8001654 <main+0x2f4>)
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800142a:	4638      	mov	r0, r7
  huart3.Init.BaudRate = 57600;
 800142c:	e887 000a 	stmia.w	r7, {r1, r3}
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001430:	230c      	movs	r3, #12
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001432:	60bd      	str	r5, [r7, #8]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001434:	617b      	str	r3, [r7, #20]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001436:	60fd      	str	r5, [r7, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001438:	613d      	str	r5, [r7, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800143a:	61bd      	str	r5, [r7, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800143c:	61fd      	str	r5, [r7, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800143e:	f7ff fcff 	bl	8000e40 <HAL_UART_Init>
  HAL_Delay(1000);
 8001442:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001446:	f7fe fed1 	bl	80001ec <HAL_Delay>
  HAL_GPIO_WritePin(ON_RELAY_GPIO_Port, ON_RELAY_Pin, GPIO_PIN_SET);
 800144a:	4641      	mov	r1, r8
 800144c:	4642      	mov	r2, r8
 800144e:	487d      	ldr	r0, [pc, #500]	; (8001644 <main+0x2e4>)
 8001450:	f7ff f82a 	bl	80004a8 <HAL_GPIO_WritePin>
  HAL_Delay(5000); // задержка чтоб модем успел раздуплиться, если его включение происходит вместе с включением МК
 8001454:	f241 3088 	movw	r0, #5000	; 0x1388
 8001458:	f7fe fec8 	bl	80001ec <HAL_Delay>
  __HAL_UART_ENABLE_IT(GSM, UART_IT_RXNE);
 800145c:	4b7e      	ldr	r3, [pc, #504]	; (8001658 <main+0x2f8>)
		if(strstr(buf, "RING") != NULL) // ЕСЛИ ЭТО ЗВОНОК
 800145e:	f8df 8278 	ldr.w	r8, [pc, #632]	; 80016d8 <main+0x378>
  __HAL_UART_ENABLE_IT(GSM, UART_IT_RXNE);
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	68d3      	ldr	r3, [r2, #12]
 8001466:	f043 0320 	orr.w	r3, r3, #32
 800146a:	60d3      	str	r3, [r2, #12]
  __HAL_UART_ENABLE_IT(DEBUG, UART_IT_RXNE);
 800146c:	683a      	ldr	r2, [r7, #0]
			snprintf(str, GSM_RX_BUFFER_SIZE, "%s\n", buf);
 800146e:	4f7b      	ldr	r7, [pc, #492]	; (800165c <main+0x2fc>)
  __HAL_UART_ENABLE_IT(DEBUG, UART_IT_RXNE);
 8001470:	68d3      	ldr	r3, [r2, #12]
 8001472:	f043 0320 	orr.w	r3, r3, #32
 8001476:	60d3      	str	r3, [r2, #12]
  chek_speed(); // проверка и установка скорости 19200, нужна один раз
 8001478:	f7ff feba 	bl	80011f0 <chek_speed>
  set_comand(ATCPAS);  // проверка статуса модема
 800147c:	4878      	ldr	r0, [pc, #480]	; (8001660 <main+0x300>)
 800147e:	f7ff fd75 	bl	8000f6c <set_comand>
  set_comand(ATCREG);  // проверка регистрации в сети - должен вернуть  +CREG: 0,1
 8001482:	4878      	ldr	r0, [pc, #480]	; (8001664 <main+0x304>)
 8001484:	f7ff fd72 	bl	8000f6c <set_comand>
  set_comand(ATCLIP1); // включить АОН
 8001488:	4877      	ldr	r0, [pc, #476]	; (8001668 <main+0x308>)
 800148a:	f7ff fd6f 	bl	8000f6c <set_comand>
  set_comand(ATE);     // отключить «эхо»
 800148e:	4877      	ldr	r0, [pc, #476]	; (800166c <main+0x30c>)
 8001490:	f7ff fd6c 	bl	8000f6c <set_comand>
  set_comand(ATS);     // поднимать трубку только "вручную"
 8001494:	4876      	ldr	r0, [pc, #472]	; (8001670 <main+0x310>)
 8001496:	f7ff fd69 	bl	8000f6c <set_comand>
  set_comand(ATDDET);  // включить DTMF
 800149a:	4876      	ldr	r0, [pc, #472]	; (8001674 <main+0x314>)
 800149c:	f7ff fd66 	bl	8000f6c <set_comand>
  set_comand(ATCMGF);    // устанавливает текстовый режим смс-сообщения
 80014a0:	4875      	ldr	r0, [pc, #468]	; (8001678 <main+0x318>)
 80014a2:	f7ff fd63 	bl	8000f6c <set_comand>
  set_comand(ATCPBS);    // открывает доступ к данным телефонной книги SIM-карты
 80014a6:	4875      	ldr	r0, [pc, #468]	; (800167c <main+0x31c>)
 80014a8:	f7ff fd60 	bl	8000f6c <set_comand>
  set_comand(ATCSCS);    // кодировка текста - GSM
 80014ac:	4874      	ldr	r0, [pc, #464]	; (8001680 <main+0x320>)
 80014ae:	f7ff fd5d 	bl	8000f6c <set_comand>
  set_comand(ATCNMI);    // настройка вывода смс в консоль
 80014b2:	4874      	ldr	r0, [pc, #464]	; (8001684 <main+0x324>)
 80014b4:	f7ff fd5a 	bl	8000f6c <set_comand>
  set_comand(ATIPR);       // скорость usart'a модема
 80014b8:	4873      	ldr	r0, [pc, #460]	; (8001688 <main+0x328>)
 80014ba:	f7ff fd57 	bl	8000f6c <set_comand>
  set_comand(ATI);         // название и версия модуля
 80014be:	4873      	ldr	r0, [pc, #460]	; (800168c <main+0x32c>)
 80014c0:	f7ff fd54 	bl	8000f6c <set_comand>
  set_comand(ATCGSN);      // считывание IMEI из EEPROM
 80014c4:	4872      	ldr	r0, [pc, #456]	; (8001690 <main+0x330>)
 80014c6:	f7ff fd51 	bl	8000f6c <set_comand>
  set_comand(ATCSPN);      // оператор сети
 80014ca:	4872      	ldr	r0, [pc, #456]	; (8001694 <main+0x334>)
 80014cc:	f7ff fd4e 	bl	8000f6c <set_comand>
  HAL_TIM_Base_Start_IT(&htim4);
 80014d0:	4630      	mov	r0, r6
 80014d2:	f7ff fa8d 	bl	80009f0 <HAL_TIM_Base_Start_IT>
  char buf[GSM_RX_BUFFER_SIZE] = {0,};
 80014d6:	2240      	movs	r2, #64	; 0x40
 80014d8:	4629      	mov	r1, r5
 80014da:	4620      	mov	r0, r4
 80014dc:	f000 fb66 	bl	8001bac <memset>
  char str[GSM_RX_BUFFER_SIZE] = {0,};
 80014e0:	2240      	movs	r2, #64	; 0x40
 80014e2:	4629      	mov	r1, r5
 80014e4:	a81c      	add	r0, sp, #112	; 0x70
 80014e6:	f000 fb61 	bl	8001bac <memset>
	if(flag == 1)
 80014ea:	4e6b      	ldr	r6, [pc, #428]	; (8001698 <main+0x338>)
 80014ec:	7833      	ldrb	r3, [r6, #0]
 80014ee:	2b01      	cmp	r3, #1
		flag = 0;
 80014f0:	bf04      	itt	eq
 80014f2:	2300      	moveq	r3, #0
 80014f4:	7033      	strbeq	r3, [r6, #0]
	if(gsm_available()) //если модуль что-то прислал
 80014f6:	f000 fabd 	bl	8001a74 <gsm_available>
 80014fa:	2800      	cmp	r0, #0
 80014fc:	f000 8123 	beq.w	8001746 <main+0x3e6>
		memset(buf, 0, GSM_RX_BUFFER_SIZE);
 8001500:	2240      	movs	r2, #64	; 0x40
 8001502:	2100      	movs	r1, #0
 8001504:	4620      	mov	r0, r4
 8001506:	f000 fb51 	bl	8001bac <memset>
		while(gsm_available())
 800150a:	2500      	movs	r5, #0
 800150c:	f000 fab2 	bl	8001a74 <gsm_available>
 8001510:	b128      	cbz	r0, 800151e <main+0x1be>
			buf[i++] = gsm_read();
 8001512:	f000 fabb 	bl	8001a8c <gsm_read>
 8001516:	5560      	strb	r0, [r4, r5]
 8001518:	3501      	adds	r5, #1
			if(i > GSM_RX_BUFFER_SIZE - 1) break;
 800151a:	2d40      	cmp	r5, #64	; 0x40
 800151c:	d127      	bne.n	800156e <main+0x20e>
		clear_string(buf); // очищаем строку от символов \r и \n
 800151e:	4620      	mov	r0, r4
 8001520:	f7ff fe28 	bl	8001174 <clear_string>
		if(strstr(buf, "RING") != NULL) // ЕСЛИ ЭТО ЗВОНОК
 8001524:	4641      	mov	r1, r8
 8001526:	4620      	mov	r0, r4
 8001528:	f000 fb8a 	bl	8001c40 <strstr>
 800152c:	bb18      	cbnz	r0, 8001576 <main+0x216>
		else if(strstr(buf, "+CMT:") != NULL) // ЕСЛИ ЭТО SMS
 800152e:	495b      	ldr	r1, [pc, #364]	; (800169c <main+0x33c>)
 8001530:	4620      	mov	r0, r4
 8001532:	f000 fb85 	bl	8001c40 <strstr>
 8001536:	2800      	cmp	r0, #0
 8001538:	d060      	beq.n	80015fc <main+0x29c>
			if(strstr(buf, "9815555596") != NULL) // проверяем от кого смс
 800153a:	4959      	ldr	r1, [pc, #356]	; (80016a0 <main+0x340>)
 800153c:	4620      	mov	r0, r4
 800153e:	f000 fb7f 	bl	8001c40 <strstr>
				HAL_UART_Transmit(DEBUG, (uint8_t*)"Sms my number\n", strlen("Sms my number\n"), 1000);
 8001542:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
			if(strstr(buf, "9815555596") != NULL) // проверяем от кого смс
 8001546:	2800      	cmp	r0, #0
 8001548:	d055      	beq.n	80015f6 <main+0x296>
				HAL_UART_Transmit(DEBUG, (uint8_t*)"Sms my number\n", strlen("Sms my number\n"), 1000);
 800154a:	4956      	ldr	r1, [pc, #344]	; (80016a4 <main+0x344>)
 800154c:	220e      	movs	r2, #14
 800154e:	4840      	ldr	r0, [pc, #256]	; (8001650 <main+0x2f0>)
 8001550:	f7ff fca4 	bl	8000e9c <HAL_UART_Transmit>
				if(strstr(buf, "Hello") != NULL)
 8001554:	4954      	ldr	r1, [pc, #336]	; (80016a8 <main+0x348>)
 8001556:	4620      	mov	r0, r4
 8001558:	f000 fb72 	bl	8001c40 <strstr>
 800155c:	b3c0      	cbz	r0, 80015d0 <main+0x270>
					HAL_UART_Transmit(DEBUG, (uint8_t*)"Reciv Hello\n", strlen("Reciv Hello\n"), 1000);
 800155e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001562:	220c      	movs	r2, #12
 8001564:	4951      	ldr	r1, [pc, #324]	; (80016ac <main+0x34c>)
				HAL_UART_Transmit(DEBUG, (uint8_t*)"Unknow number sms\n", strlen("Unknow number sms\n"), 1000);
 8001566:	483a      	ldr	r0, [pc, #232]	; (8001650 <main+0x2f0>)
 8001568:	f7ff fc98 	bl	8000e9c <HAL_UART_Transmit>
 800156c:	e037      	b.n	80015de <main+0x27e>
			HAL_Delay(1);
 800156e:	2001      	movs	r0, #1
 8001570:	f7fe fe3c 	bl	80001ec <HAL_Delay>
 8001574:	e7ca      	b.n	800150c <main+0x1ac>
			HAL_Delay(30); // ждём когда придёт то, что после RING
 8001576:	201e      	movs	r0, #30
 8001578:	f7fe fe38 	bl	80001ec <HAL_Delay>
			memset(buf, 0, GSM_RX_BUFFER_SIZE);
 800157c:	2240      	movs	r2, #64	; 0x40
 800157e:	2100      	movs	r1, #0
 8001580:	4620      	mov	r0, r4
 8001582:	f000 fb13 	bl	8001bac <memset>
			while(gsm_available())
 8001586:	2500      	movs	r5, #0
 8001588:	f000 fa74 	bl	8001a74 <gsm_available>
 800158c:	b128      	cbz	r0, 800159a <main+0x23a>
				buf[i++] = gsm_read();
 800158e:	f000 fa7d 	bl	8001a8c <gsm_read>
 8001592:	5560      	strb	r0, [r4, r5]
 8001594:	3501      	adds	r5, #1
				if(i > GSM_RX_BUFFER_SIZE - 1) break;
 8001596:	2d40      	cmp	r5, #64	; 0x40
 8001598:	d10c      	bne.n	80015b4 <main+0x254>
			clear_string(buf);
 800159a:	4620      	mov	r0, r4
 800159c:	f7ff fdea 	bl	8001174 <clear_string>
			if(strstr(buf, "9834567891") != NULL) // если звонит нужный номер
 80015a0:	4943      	ldr	r1, [pc, #268]	; (80016b0 <main+0x350>)
 80015a2:	4620      	mov	r0, r4
 80015a4:	f000 fb4c 	bl	8001c40 <strstr>
 80015a8:	b940      	cbnz	r0, 80015bc <main+0x25c>
				HAL_UART_Transmit(DEBUG, (uint8_t*)"Unknow number\n", strlen("Unknow number\n"), 1000);
 80015aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ae:	220e      	movs	r2, #14
 80015b0:	4940      	ldr	r1, [pc, #256]	; (80016b4 <main+0x354>)
 80015b2:	e007      	b.n	80015c4 <main+0x264>
				HAL_Delay(1);
 80015b4:	2001      	movs	r0, #1
 80015b6:	f7fe fe19 	bl	80001ec <HAL_Delay>
 80015ba:	e7e5      	b.n	8001588 <main+0x228>
				HAL_UART_Transmit(DEBUG, (uint8_t*)"My number\n", strlen("My number\n"), 1000);
 80015bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015c0:	220a      	movs	r2, #10
 80015c2:	493d      	ldr	r1, [pc, #244]	; (80016b8 <main+0x358>)
				HAL_UART_Transmit(DEBUG, (uint8_t*)"DTMF Button 1\n", strlen("DTMF Button 1\n"), 1000);
 80015c4:	4822      	ldr	r0, [pc, #136]	; (8001650 <main+0x2f0>)
 80015c6:	f7ff fc69 	bl	8000e9c <HAL_UART_Transmit>
			disable_connection(); // разрываем соединение, или не разрываем (в зависимости от того, что вам нужно)
 80015ca:	f7ff fd97 	bl	80010fc <disable_connection>
 80015ce:	e006      	b.n	80015de <main+0x27e>
				else if(strstr(buf, "Call") != NULL) // если прилетело слово "Call" то звоним
 80015d0:	493a      	ldr	r1, [pc, #232]	; (80016bc <main+0x35c>)
 80015d2:	4620      	mov	r0, r4
 80015d4:	f000 fb34 	bl	8001c40 <strstr>
 80015d8:	b120      	cbz	r0, 80015e4 <main+0x284>
					call(); // номер указать в файле gsm.c
 80015da:	f7ff fda7 	bl	800112c <call>
			snprintf(str, GSM_RX_BUFFER_SIZE, "%s\n", buf);
 80015de:	4623      	mov	r3, r4
 80015e0:	463a      	mov	r2, r7
 80015e2:	e0a2      	b.n	800172a <main+0x3ca>
				else if(strstr(buf, "Money") != NULL) // если отпрвить sms со словом "Money", то в ответ придёт смс с балансом (деньги) на модеме
 80015e4:	4936      	ldr	r1, [pc, #216]	; (80016c0 <main+0x360>)
 80015e6:	4620      	mov	r0, r4
 80015e8:	f000 fb2a 	bl	8001c40 <strstr>
 80015ec:	2800      	cmp	r0, #0
 80015ee:	d0f6      	beq.n	80015de <main+0x27e>
					balance(); // посылаем команду узнать баланс (мтс)
 80015f0:	f7ff fd6a 	bl	80010c8 <balance>
 80015f4:	e7f3      	b.n	80015de <main+0x27e>
				HAL_UART_Transmit(DEBUG, (uint8_t*)"Unknow number sms\n", strlen("Unknow number sms\n"), 1000);
 80015f6:	2212      	movs	r2, #18
 80015f8:	4932      	ldr	r1, [pc, #200]	; (80016c4 <main+0x364>)
 80015fa:	e7b4      	b.n	8001566 <main+0x206>
		else if(strstr(buf, "+CUSD") != NULL)  // ЕСЛИ ЭТО СТРОКА С БАЛАНСОМ
 80015fc:	4932      	ldr	r1, [pc, #200]	; (80016c8 <main+0x368>)
 80015fe:	4620      	mov	r0, r4
 8001600:	f000 fb1e 	bl	8001c40 <strstr>
 8001604:	2800      	cmp	r0, #0
 8001606:	d1ea      	bne.n	80015de <main+0x27e>
		else if(strstr(buf, "+DTMF") != NULL)  //ЕСЛИ ЭТО DTMF СИГНАЛ
 8001608:	4930      	ldr	r1, [pc, #192]	; (80016cc <main+0x36c>)
 800160a:	4620      	mov	r0, r4
 800160c:	f000 fb18 	bl	8001c40 <strstr>
 8001610:	4605      	mov	r5, r0
 8001612:	2800      	cmp	r0, #0
 8001614:	d062      	beq.n	80016dc <main+0x37c>
			if(strstr(buf, "0") != NULL) // если пришёл сигнал кнопки 0
 8001616:	2130      	movs	r1, #48	; 0x30
 8001618:	4620      	mov	r0, r4
 800161a:	f000 fb03 	bl	8001c24 <strchr>
 800161e:	b120      	cbz	r0, 800162a <main+0x2ca>
				HAL_UART_Transmit(DEBUG, (uint8_t*)"DTMF Button 0\n", strlen("DTMF Button 0\n"), 1000);
 8001620:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001624:	220e      	movs	r2, #14
 8001626:	492a      	ldr	r1, [pc, #168]	; (80016d0 <main+0x370>)
 8001628:	e7cc      	b.n	80015c4 <main+0x264>
			else if(strstr(buf, "1") != NULL) // если пришёл сигнал кнопки 1
 800162a:	2131      	movs	r1, #49	; 0x31
 800162c:	4620      	mov	r0, r4
 800162e:	f000 faf9 	bl	8001c24 <strchr>
 8001632:	2800      	cmp	r0, #0
 8001634:	d0c9      	beq.n	80015ca <main+0x26a>
				HAL_UART_Transmit(DEBUG, (uint8_t*)"DTMF Button 1\n", strlen("DTMF Button 1\n"), 1000);
 8001636:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800163a:	220e      	movs	r2, #14
 800163c:	4925      	ldr	r1, [pc, #148]	; (80016d4 <main+0x374>)
 800163e:	e7c1      	b.n	80015c4 <main+0x264>
 8001640:	40021000 	.word	0x40021000
 8001644:	40010800 	.word	0x40010800
 8001648:	20000124 	.word	0x20000124
 800164c:	40000800 	.word	0x40000800
 8001650:	20000164 	.word	0x20000164
 8001654:	40004800 	.word	0x40004800
 8001658:	200001a4 	.word	0x200001a4
 800165c:	080026a6 	.word	0x080026a6
 8001660:	0800256d 	.word	0x0800256d
 8001664:	08002575 	.word	0x08002575
 8001668:	0800257e 	.word	0x0800257e
 800166c:	08002588 	.word	0x08002588
 8001670:	0800258d 	.word	0x0800258d
 8001674:	08002594 	.word	0x08002594
 8001678:	0800259e 	.word	0x0800259e
 800167c:	080025a8 	.word	0x080025a8
 8001680:	080025b5 	.word	0x080025b5
 8001684:	080025c3 	.word	0x080025c3
 8001688:	080025d5 	.word	0x080025d5
 800168c:	080025dd 	.word	0x080025dd
 8001690:	080025e1 	.word	0x080025e1
 8001694:	080025e9 	.word	0x080025e9
 8001698:	2000008c 	.word	0x2000008c
 800169c:	0800261c 	.word	0x0800261c
 80016a0:	08002622 	.word	0x08002622
 80016a4:	0800262d 	.word	0x0800262d
 80016a8:	0800263c 	.word	0x0800263c
 80016ac:	08002642 	.word	0x08002642
 80016b0:	080025f7 	.word	0x080025f7
 80016b4:	0800260d 	.word	0x0800260d
 80016b8:	08002602 	.word	0x08002602
 80016bc:	0800264f 	.word	0x0800264f
 80016c0:	08002654 	.word	0x08002654
 80016c4:	0800265a 	.word	0x0800265a
 80016c8:	0800266d 	.word	0x0800266d
 80016cc:	08002673 	.word	0x08002673
 80016d0:	08002679 	.word	0x08002679
 80016d4:	08002688 	.word	0x08002688
 80016d8:	080025f2 	.word	0x080025f2
		else if(strstr(buf, "+CCLK") != NULL)  // ЕСЛИ ЭТО ДАТА/ВРЕМЯ
 80016dc:	4938      	ldr	r1, [pc, #224]	; (80017c0 <main+0x460>)
 80016de:	4620      	mov	r0, r4
 80016e0:	f000 faae 	bl	8001c40 <strstr>
 80016e4:	2800      	cmp	r0, #0
 80016e6:	f43f af7a 	beq.w	80015de <main+0x27e>
			replac_string(buf);
 80016ea:	4620      	mov	r0, r4
			char res[32] = {0,};
 80016ec:	f10d 0910 	add.w	r9, sp, #16
			replac_string(buf);
 80016f0:	f7ff fc30 	bl	8000f54 <replac_string>
			char res[32] = {0,};
 80016f4:	2220      	movs	r2, #32
 80016f6:	4629      	mov	r1, r5
 80016f8:	4648      	mov	r0, r9
 80016fa:	f000 fa57 	bl	8001bac <memset>
 80016fe:	4628      	mov	r0, r5
				if(buf[i] == '"')
 8001700:	5c23      	ldrb	r3, [r4, r0]
 8001702:	b2c1      	uxtb	r1, r0
 8001704:	2b22      	cmp	r3, #34	; 0x22
 8001706:	d152      	bne.n	80017ae <main+0x44e>
					i++;
 8001708:	2300      	movs	r3, #0
						if(buf[i] == ',') buf[i] = ' ';
 800170a:	2520      	movs	r5, #32
					i++;
 800170c:	3101      	adds	r1, #1
 800170e:	b2c9      	uxtb	r1, r1
						if(buf[i] == '+')
 8001710:	18ca      	adds	r2, r1, r3
 8001712:	a82c      	add	r0, sp, #176	; 0xb0
 8001714:	b2d2      	uxtb	r2, r2
 8001716:	4402      	add	r2, r0
 8001718:	f812 0c80 	ldrb.w	r0, [r2, #-128]
 800171c:	282b      	cmp	r0, #43	; 0x2b
 800171e:	d13a      	bne.n	8001796 <main+0x436>
							buf[i] = 0;
 8001720:	2300      	movs	r3, #0
 8001722:	f802 3c80 	strb.w	r3, [r2, #-128]
			snprintf(str, GSM_RX_BUFFER_SIZE, "DateTime %s\n", res);
 8001726:	464b      	mov	r3, r9
 8001728:	4a26      	ldr	r2, [pc, #152]	; (80017c4 <main+0x464>)
 800172a:	2140      	movs	r1, #64	; 0x40
 800172c:	a81c      	add	r0, sp, #112	; 0x70
 800172e:	f000 fa45 	bl	8001bbc <sniprintf>
			HAL_UART_Transmit(DEBUG, (uint8_t*)str, strlen(str), 1000);
 8001732:	a81c      	add	r0, sp, #112	; 0x70
 8001734:	f7fe fd0a 	bl	800014c <strlen>
 8001738:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800173c:	b282      	uxth	r2, r0
 800173e:	a91c      	add	r1, sp, #112	; 0x70
 8001740:	4821      	ldr	r0, [pc, #132]	; (80017c8 <main+0x468>)
 8001742:	f7ff fbab 	bl	8000e9c <HAL_UART_Transmit>
	if(dbg_available()) //если послали в терминал какую-то команду, то она перенаправиться в модем
 8001746:	f000 f9bb 	bl	8001ac0 <dbg_available>
 800174a:	2800      	cmp	r0, #0
 800174c:	f43f aece 	beq.w	80014ec <main+0x18c>
		memset(buf, 0, GSM_RX_BUFFER_SIZE);
 8001750:	2240      	movs	r2, #64	; 0x40
 8001752:	2100      	movs	r1, #0
 8001754:	4620      	mov	r0, r4
 8001756:	f000 fa29 	bl	8001bac <memset>
		while(dbg_available())
 800175a:	2500      	movs	r5, #0
 800175c:	f000 f9b0 	bl	8001ac0 <dbg_available>
 8001760:	b128      	cbz	r0, 800176e <main+0x40e>
			buf[i++] = dbg_read();
 8001762:	f000 f9b9 	bl	8001ad8 <dbg_read>
 8001766:	5560      	strb	r0, [r4, r5]
 8001768:	3501      	adds	r5, #1
			if(i > GSM_RX_BUFFER_SIZE - 1) break;
 800176a:	2d40      	cmp	r5, #64	; 0x40
 800176c:	d123      	bne.n	80017b6 <main+0x456>
		clear_string(buf);
 800176e:	4620      	mov	r0, r4
 8001770:	f7ff fd00 	bl	8001174 <clear_string>
		snprintf(str, GSM_RX_BUFFER_SIZE, "%s\r\n", buf);
 8001774:	4623      	mov	r3, r4
 8001776:	4a15      	ldr	r2, [pc, #84]	; (80017cc <main+0x46c>)
 8001778:	2140      	movs	r1, #64	; 0x40
 800177a:	a81c      	add	r0, sp, #112	; 0x70
 800177c:	f000 fa1e 	bl	8001bbc <sniprintf>
		HAL_UART_Transmit(GSM, (uint8_t*)str, strlen(str), 1000);
 8001780:	a81c      	add	r0, sp, #112	; 0x70
 8001782:	f7fe fce3 	bl	800014c <strlen>
 8001786:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800178a:	b282      	uxth	r2, r0
 800178c:	a91c      	add	r1, sp, #112	; 0x70
 800178e:	4810      	ldr	r0, [pc, #64]	; (80017d0 <main+0x470>)
 8001790:	f7ff fb84 	bl	8000e9c <HAL_UART_Transmit>
 8001794:	e6aa      	b.n	80014ec <main+0x18c>
						if(buf[i] == ',') buf[i] = ' ';
 8001796:	282c      	cmp	r0, #44	; 0x2c
 8001798:	bf08      	it	eq
 800179a:	f802 5c80 	strbeq.w	r5, [r2, #-128]
						res[j] = buf[i];
 800179e:	f812 2c80 	ldrb.w	r2, [r2, #-128]
 80017a2:	f809 2003 	strb.w	r2, [r9, r3]
 80017a6:	3301      	adds	r3, #1
					for(uint8_t j = 0; j < 20; i++, j++)
 80017a8:	2b14      	cmp	r3, #20
 80017aa:	d1b1      	bne.n	8001710 <main+0x3b0>
 80017ac:	e7bb      	b.n	8001726 <main+0x3c6>
 80017ae:	3001      	adds	r0, #1
			for(uint8_t i = 0; i < GSM_RX_BUFFER_SIZE; i++)
 80017b0:	2840      	cmp	r0, #64	; 0x40
 80017b2:	d1a5      	bne.n	8001700 <main+0x3a0>
 80017b4:	e7b7      	b.n	8001726 <main+0x3c6>
			HAL_Delay(1);
 80017b6:	2001      	movs	r0, #1
 80017b8:	f7fe fd18 	bl	80001ec <HAL_Delay>
 80017bc:	e7ce      	b.n	800175c <main+0x3fc>
 80017be:	bf00      	nop
 80017c0:	08002697 	.word	0x08002697
 80017c4:	0800269d 	.word	0x0800269d
 80017c8:	20000164 	.word	0x20000164
 80017cc:	080024d1 	.word	0x080024d1
 80017d0:	200001a4 	.word	0x200001a4

080017d4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017d4:	4b0e      	ldr	r3, [pc, #56]	; (8001810 <HAL_MspInit+0x3c>)
{
 80017d6:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80017d8:	699a      	ldr	r2, [r3, #24]
 80017da:	f042 0201 	orr.w	r2, r2, #1
 80017de:	619a      	str	r2, [r3, #24]
 80017e0:	699a      	ldr	r2, [r3, #24]
 80017e2:	f002 0201 	and.w	r2, r2, #1
 80017e6:	9200      	str	r2, [sp, #0]
 80017e8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ea:	69da      	ldr	r2, [r3, #28]
 80017ec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80017f0:	61da      	str	r2, [r3, #28]
 80017f2:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80017f4:	4a07      	ldr	r2, [pc, #28]	; (8001814 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80017f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017fa:	9301      	str	r3, [sp, #4]
 80017fc:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80017fe:	6853      	ldr	r3, [r2, #4]
 8001800:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001804:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001808:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800180a:	b002      	add	sp, #8
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	40021000 	.word	0x40021000
 8001814:	40010000 	.word	0x40010000

08001818 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001818:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM4)
 800181a:	4b0d      	ldr	r3, [pc, #52]	; (8001850 <HAL_TIM_Base_MspInit+0x38>)
 800181c:	6802      	ldr	r2, [r0, #0]
 800181e:	429a      	cmp	r2, r3
 8001820:	d112      	bne.n	8001848 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001822:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001826:	69da      	ldr	r2, [r3, #28]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 7, 0);
 8001828:	201e      	movs	r0, #30
    __HAL_RCC_TIM4_CLK_ENABLE();
 800182a:	f042 0204 	orr.w	r2, r2, #4
 800182e:	61da      	str	r2, [r3, #28]
 8001830:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 7, 0);
 8001832:	2200      	movs	r2, #0
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001834:	f003 0304 	and.w	r3, r3, #4
 8001838:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM4_IRQn, 7, 0);
 800183a:	2107      	movs	r1, #7
    __HAL_RCC_TIM4_CLK_ENABLE();
 800183c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM4_IRQn, 7, 0);
 800183e:	f7fe fcf9 	bl	8000234 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001842:	201e      	movs	r0, #30
 8001844:	f7fe fd2a 	bl	800029c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001848:	b003      	add	sp, #12
 800184a:	f85d fb04 	ldr.w	pc, [sp], #4
 800184e:	bf00      	nop
 8001850:	40000800 	.word	0x40000800

08001854 <HAL_UART_MspInit>:
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001854:	2210      	movs	r2, #16
{
 8001856:	b510      	push	{r4, lr}
 8001858:	4604      	mov	r4, r0
 800185a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800185c:	eb0d 0002 	add.w	r0, sp, r2
 8001860:	2100      	movs	r1, #0
 8001862:	f000 f9a3 	bl	8001bac <memset>
  if(huart->Instance==USART1)
 8001866:	6823      	ldr	r3, [r4, #0]
 8001868:	4a33      	ldr	r2, [pc, #204]	; (8001938 <HAL_UART_MspInit+0xe4>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d131      	bne.n	80018d2 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800186e:	4b33      	ldr	r3, [pc, #204]	; (800193c <HAL_UART_MspInit+0xe8>)
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001870:	a904      	add	r1, sp, #16
    __HAL_RCC_USART1_CLK_ENABLE();
 8001872:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001874:	4832      	ldr	r0, [pc, #200]	; (8001940 <HAL_UART_MspInit+0xec>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001876:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800187a:	619a      	str	r2, [r3, #24]
 800187c:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800187e:	2400      	movs	r4, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 8001880:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001884:	9200      	str	r2, [sp, #0]
 8001886:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001888:	699a      	ldr	r2, [r3, #24]
 800188a:	f042 0204 	orr.w	r2, r2, #4
 800188e:	619a      	str	r2, [r3, #24]
 8001890:	699b      	ldr	r3, [r3, #24]
 8001892:	f003 0304 	and.w	r3, r3, #4
 8001896:	9301      	str	r3, [sp, #4]
 8001898:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800189a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800189e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a0:	2302      	movs	r3, #2
 80018a2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018a4:	2303      	movs	r3, #3
 80018a6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a8:	f7fe fd1c 	bl	80002e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80018ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b0:	a904      	add	r1, sp, #16
 80018b2:	4823      	ldr	r0, [pc, #140]	; (8001940 <HAL_UART_MspInit+0xec>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80018b4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018b6:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b8:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ba:	f7fe fd13 	bl	80002e4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80018be:	2025      	movs	r0, #37	; 0x25
 80018c0:	4622      	mov	r2, r4
 80018c2:	2105      	movs	r1, #5
 80018c4:	f7fe fcb6 	bl	8000234 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80018c8:	2025      	movs	r0, #37	; 0x25
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 6, 0);
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80018ca:	f7fe fce7 	bl	800029c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80018ce:	b008      	add	sp, #32
 80018d0:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART3)
 80018d2:	4a1c      	ldr	r2, [pc, #112]	; (8001944 <HAL_UART_MspInit+0xf0>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d1fa      	bne.n	80018ce <HAL_UART_MspInit+0x7a>
    __HAL_RCC_USART3_CLK_ENABLE();
 80018d8:	4b18      	ldr	r3, [pc, #96]	; (800193c <HAL_UART_MspInit+0xe8>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018da:	a904      	add	r1, sp, #16
    __HAL_RCC_USART3_CLK_ENABLE();
 80018dc:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018de:	481a      	ldr	r0, [pc, #104]	; (8001948 <HAL_UART_MspInit+0xf4>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80018e0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80018e4:	61da      	str	r2, [r3, #28]
 80018e6:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018e8:	2400      	movs	r4, #0
    __HAL_RCC_USART3_CLK_ENABLE();
 80018ea:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80018ee:	9202      	str	r2, [sp, #8]
 80018f0:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018f2:	699a      	ldr	r2, [r3, #24]
 80018f4:	f042 0208 	orr.w	r2, r2, #8
 80018f8:	619a      	str	r2, [r3, #24]
 80018fa:	699b      	ldr	r3, [r3, #24]
 80018fc:	f003 0308 	and.w	r3, r3, #8
 8001900:	9303      	str	r3, [sp, #12]
 8001902:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001904:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001908:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190a:	2302      	movs	r3, #2
 800190c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800190e:	2303      	movs	r3, #3
 8001910:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001912:	f7fe fce7 	bl	80002e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001916:	f44f 6300 	mov.w	r3, #2048	; 0x800
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800191a:	a904      	add	r1, sp, #16
 800191c:	480a      	ldr	r0, [pc, #40]	; (8001948 <HAL_UART_MspInit+0xf4>)
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800191e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001920:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001922:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001924:	f7fe fcde 	bl	80002e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 6, 0);
 8001928:	2027      	movs	r0, #39	; 0x27
 800192a:	4622      	mov	r2, r4
 800192c:	2106      	movs	r1, #6
 800192e:	f7fe fc81 	bl	8000234 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001932:	2027      	movs	r0, #39	; 0x27
 8001934:	e7c9      	b.n	80018ca <HAL_UART_MspInit+0x76>
 8001936:	bf00      	nop
 8001938:	40013800 	.word	0x40013800
 800193c:	40021000 	.word	0x40021000
 8001940:	40010800 	.word	0x40010800
 8001944:	40004800 	.word	0x40004800
 8001948:	40010c00 	.word	0x40010c00

0800194c <NMI_Handler>:
 800194c:	4770      	bx	lr

0800194e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800194e:	e7fe      	b.n	800194e <HardFault_Handler>

08001950 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001950:	e7fe      	b.n	8001950 <MemManage_Handler>

08001952 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001952:	e7fe      	b.n	8001952 <BusFault_Handler>

08001954 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001954:	e7fe      	b.n	8001954 <UsageFault_Handler>

08001956 <SVC_Handler>:
 8001956:	4770      	bx	lr

08001958 <DebugMon_Handler>:
 8001958:	4770      	bx	lr

0800195a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800195a:	4770      	bx	lr

0800195c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800195c:	f7fe bc34 	b.w	80001c8 <HAL_IncTick>

08001960 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001960:	4801      	ldr	r0, [pc, #4]	; (8001968 <TIM4_IRQHandler+0x8>)
 8001962:	f7ff b859 	b.w	8000a18 <HAL_TIM_IRQHandler>
 8001966:	bf00      	nop
 8001968:	20000124 	.word	0x20000124

0800196c <USART1_IRQHandler>:
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */
	if(((huart1.Instance->SR & USART_SR_RXNE) != RESET) && ((huart1.Instance->CR1 & USART_CR1_RXNEIE) != RESET))
 800196c:	4b0c      	ldr	r3, [pc, #48]	; (80019a0 <USART1_IRQHandler+0x34>)
{
 800196e:	b510      	push	{r4, lr}
	if(((huart1.Instance->SR & USART_SR_RXNE) != RESET) && ((huart1.Instance->CR1 & USART_CR1_RXNEIE) != RESET))
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	0691      	lsls	r1, r2, #26
 8001976:	d512      	bpl.n	800199e <USART1_IRQHandler+0x32>
 8001978:	68da      	ldr	r2, [r3, #12]
 800197a:	0692      	lsls	r2, r2, #26
 800197c:	d50f      	bpl.n	800199e <USART1_IRQHandler+0x32>
	{
		uint8_t rbyte = (uint8_t)(huart1.Instance->DR & (uint8_t)0x00FF); // читает байт из регистра
		gsm_rx_buffer_index_t i = (uint16_t)(gsm_rx_buffer_head + 1) % GSM_RX_BUFFER_SIZE;
 800197e:	4a09      	ldr	r2, [pc, #36]	; (80019a4 <USART1_IRQHandler+0x38>)
		uint8_t rbyte = (uint8_t)(huart1.Instance->DR & (uint8_t)0x00FF); // читает байт из регистра
 8001980:	6859      	ldr	r1, [r3, #4]

		if(i != gsm_rx_buffer_tail)
 8001982:	4809      	ldr	r0, [pc, #36]	; (80019a8 <USART1_IRQHandler+0x3c>)
		gsm_rx_buffer_index_t i = (uint16_t)(gsm_rx_buffer_head + 1) % GSM_RX_BUFFER_SIZE;
 8001984:	7813      	ldrb	r3, [r2, #0]
		if(i != gsm_rx_buffer_tail)
 8001986:	7800      	ldrb	r0, [r0, #0]
		gsm_rx_buffer_index_t i = (uint16_t)(gsm_rx_buffer_head + 1) % GSM_RX_BUFFER_SIZE;
 8001988:	3301      	adds	r3, #1
 800198a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		if(i != gsm_rx_buffer_tail)
 800198e:	4283      	cmp	r3, r0
		{
			gsm_rx_buffer[gsm_rx_buffer_head] = rbyte;
 8001990:	bf1c      	itt	ne
 8001992:	7810      	ldrbne	r0, [r2, #0]
 8001994:	4c05      	ldrne	r4, [pc, #20]	; (80019ac <USART1_IRQHandler+0x40>)
		uint8_t rbyte = (uint8_t)(huart1.Instance->DR & (uint8_t)0x00FF); // читает байт из регистра
 8001996:	b2c9      	uxtb	r1, r1
			gsm_rx_buffer[gsm_rx_buffer_head] = rbyte;
 8001998:	bf1c      	itt	ne
 800199a:	5421      	strbne	r1, [r4, r0]
			gsm_rx_buffer_head = i;
 800199c:	7013      	strbne	r3, [r2, #0]
 800199e:	bd10      	pop	{r4, pc}
 80019a0:	200001a4 	.word	0x200001a4
 80019a4:	20000116 	.word	0x20000116
 80019a8:	20000117 	.word	0x20000117
 80019ac:	200000d6 	.word	0x200000d6

080019b0 <USART3_IRQHandler>:
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */
	if(((huart3.Instance->SR & USART_SR_RXNE) != RESET) && ((huart3.Instance->CR1 & USART_CR1_RXNEIE) != RESET))
 80019b0:	4b0c      	ldr	r3, [pc, #48]	; (80019e4 <USART3_IRQHandler+0x34>)
{
 80019b2:	b510      	push	{r4, lr}
	if(((huart3.Instance->SR & USART_SR_RXNE) != RESET) && ((huart3.Instance->CR1 & USART_CR1_RXNEIE) != RESET))
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	0691      	lsls	r1, r2, #26
 80019ba:	d512      	bpl.n	80019e2 <USART3_IRQHandler+0x32>
 80019bc:	68da      	ldr	r2, [r3, #12]
 80019be:	0692      	lsls	r2, r2, #26
 80019c0:	d50f      	bpl.n	80019e2 <USART3_IRQHandler+0x32>
	{
		uint8_t rbyte = (uint8_t)(huart3.Instance->DR & (uint8_t)0x00FF); // читает байт из регистра
		dbg_rx_buffer_index_t i = (uint16_t)(dbg_rx_buffer_head + 1) % DBG_RX_BUFFER_SIZE;
 80019c2:	4a09      	ldr	r2, [pc, #36]	; (80019e8 <USART3_IRQHandler+0x38>)
		uint8_t rbyte = (uint8_t)(huart3.Instance->DR & (uint8_t)0x00FF); // читает байт из регистра
 80019c4:	6859      	ldr	r1, [r3, #4]

		if(i != dbg_rx_buffer_tail)
 80019c6:	4809      	ldr	r0, [pc, #36]	; (80019ec <USART3_IRQHandler+0x3c>)
		dbg_rx_buffer_index_t i = (uint16_t)(dbg_rx_buffer_head + 1) % DBG_RX_BUFFER_SIZE;
 80019c8:	7813      	ldrb	r3, [r2, #0]
		if(i != dbg_rx_buffer_tail)
 80019ca:	7800      	ldrb	r0, [r0, #0]
		dbg_rx_buffer_index_t i = (uint16_t)(dbg_rx_buffer_head + 1) % DBG_RX_BUFFER_SIZE;
 80019cc:	3301      	adds	r3, #1
 80019ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		if(i != dbg_rx_buffer_tail)
 80019d2:	4283      	cmp	r3, r0
		{
			dbg_rx_buffer[dbg_rx_buffer_head] = rbyte;
 80019d4:	bf1c      	itt	ne
 80019d6:	7810      	ldrbne	r0, [r2, #0]
 80019d8:	4c05      	ldrne	r4, [pc, #20]	; (80019f0 <USART3_IRQHandler+0x40>)
		uint8_t rbyte = (uint8_t)(huart3.Instance->DR & (uint8_t)0x00FF); // читает байт из регистра
 80019da:	b2c9      	uxtb	r1, r1
			dbg_rx_buffer[dbg_rx_buffer_head] = rbyte;
 80019dc:	bf1c      	itt	ne
 80019de:	5421      	strbne	r1, [r4, r0]
			dbg_rx_buffer_head = i;
 80019e0:	7013      	strbne	r3, [r2, #0]
 80019e2:	bd10      	pop	{r4, pc}
 80019e4:	20000164 	.word	0x20000164
 80019e8:	200000d4 	.word	0x200000d4
 80019ec:	200000d5 	.word	0x200000d5
 80019f0:	20000094 	.word	0x20000094

080019f4 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80019f4:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80019f6:	4b0a      	ldr	r3, [pc, #40]	; (8001a20 <_sbrk+0x2c>)
{
 80019f8:	4602      	mov	r2, r0
	if (heap_end == 0)
 80019fa:	6819      	ldr	r1, [r3, #0]
 80019fc:	b909      	cbnz	r1, 8001a02 <_sbrk+0xe>
		heap_end = &end;
 80019fe:	4909      	ldr	r1, [pc, #36]	; (8001a24 <_sbrk+0x30>)
 8001a00:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8001a02:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8001a04:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8001a06:	4402      	add	r2, r0
 8001a08:	428a      	cmp	r2, r1
 8001a0a:	d906      	bls.n	8001a1a <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001a0c:	f000 f8a4 	bl	8001b58 <__errno>
 8001a10:	230c      	movs	r3, #12
 8001a12:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8001a14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a18:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8001a1a:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8001a1c:	bd08      	pop	{r3, pc}
 8001a1e:	bf00      	nop
 8001a20:	20000090 	.word	0x20000090
 8001a24:	200001e8 	.word	0x200001e8

08001a28 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001a28:	4b0f      	ldr	r3, [pc, #60]	; (8001a68 <SystemInit+0x40>)
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	f042 0201 	orr.w	r2, r2, #1
 8001a30:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001a32:	6859      	ldr	r1, [r3, #4]
 8001a34:	4a0d      	ldr	r2, [pc, #52]	; (8001a6c <SystemInit+0x44>)
 8001a36:	400a      	ands	r2, r1
 8001a38:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001a40:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001a44:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001a4c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001a4e:	685a      	ldr	r2, [r3, #4]
 8001a50:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001a54:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001a56:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001a5a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001a5c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a60:	4b03      	ldr	r3, [pc, #12]	; (8001a70 <SystemInit+0x48>)
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	f8ff0000 	.word	0xf8ff0000
 8001a70:	e000ed00 	.word	0xe000ed00

08001a74 <gsm_available>:
volatile gsm_rx_buffer_index_t gsm_rx_buffer_tail = 0;
uint8_t gsm_rx_buffer[GSM_RX_BUFFER_SIZE] = {0,};

int16_t gsm_available(void)
{
	return ((uint16_t)(GSM_RX_BUFFER_SIZE + gsm_rx_buffer_head - gsm_rx_buffer_tail)) % GSM_RX_BUFFER_SIZE;
 8001a74:	4b03      	ldr	r3, [pc, #12]	; (8001a84 <gsm_available+0x10>)
 8001a76:	7818      	ldrb	r0, [r3, #0]
 8001a78:	4b03      	ldr	r3, [pc, #12]	; (8001a88 <gsm_available+0x14>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	1ac0      	subs	r0, r0, r3
}
 8001a7e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8001a82:	4770      	bx	lr
 8001a84:	20000116 	.word	0x20000116
 8001a88:	20000117 	.word	0x20000117

08001a8c <gsm_read>:

int16_t gsm_read(void)
{
	if(gsm_rx_buffer_head == gsm_rx_buffer_tail)
 8001a8c:	4b09      	ldr	r3, [pc, #36]	; (8001ab4 <gsm_read+0x28>)
 8001a8e:	4a0a      	ldr	r2, [pc, #40]	; (8001ab8 <gsm_read+0x2c>)
 8001a90:	7819      	ldrb	r1, [r3, #0]
 8001a92:	7813      	ldrb	r3, [r2, #0]
 8001a94:	4299      	cmp	r1, r3
 8001a96:	d009      	beq.n	8001aac <gsm_read+0x20>
	{
		return -1;
	}
	else
	{
		unsigned char c = gsm_rx_buffer[gsm_rx_buffer_tail];
 8001a98:	7813      	ldrb	r3, [r2, #0]
 8001a9a:	4908      	ldr	r1, [pc, #32]	; (8001abc <gsm_read+0x30>)
 8001a9c:	5cc8      	ldrb	r0, [r1, r3]
		gsm_rx_buffer_tail = (gsm_rx_buffer_index_t)(gsm_rx_buffer_tail + 1) % GSM_RX_BUFFER_SIZE;
 8001a9e:	7813      	ldrb	r3, [r2, #0]
		return c;
 8001aa0:	b200      	sxth	r0, r0
		gsm_rx_buffer_tail = (gsm_rx_buffer_index_t)(gsm_rx_buffer_tail + 1) % GSM_RX_BUFFER_SIZE;
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001aa8:	7013      	strb	r3, [r2, #0]
		return c;
 8001aaa:	4770      	bx	lr
		return -1;
 8001aac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
}
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	20000116 	.word	0x20000116
 8001ab8:	20000117 	.word	0x20000117
 8001abc:	200000d6 	.word	0x200000d6

08001ac0 <dbg_available>:
volatile dbg_rx_buffer_index_t dbg_rx_buffer_tail = 0;
uint8_t dbg_rx_buffer[DBG_RX_BUFFER_SIZE] = {0,};

int16_t dbg_available(void)
{
	return ((uint16_t)(DBG_RX_BUFFER_SIZE + dbg_rx_buffer_head - dbg_rx_buffer_tail)) % DBG_RX_BUFFER_SIZE;
 8001ac0:	4b03      	ldr	r3, [pc, #12]	; (8001ad0 <dbg_available+0x10>)
 8001ac2:	7818      	ldrb	r0, [r3, #0]
 8001ac4:	4b03      	ldr	r3, [pc, #12]	; (8001ad4 <dbg_available+0x14>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	1ac0      	subs	r0, r0, r3
}
 8001aca:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8001ace:	4770      	bx	lr
 8001ad0:	200000d4 	.word	0x200000d4
 8001ad4:	200000d5 	.word	0x200000d5

08001ad8 <dbg_read>:

int16_t dbg_read(void)
{
	if(dbg_rx_buffer_head == dbg_rx_buffer_tail)
 8001ad8:	4b09      	ldr	r3, [pc, #36]	; (8001b00 <dbg_read+0x28>)
 8001ada:	4a0a      	ldr	r2, [pc, #40]	; (8001b04 <dbg_read+0x2c>)
 8001adc:	7819      	ldrb	r1, [r3, #0]
 8001ade:	7813      	ldrb	r3, [r2, #0]
 8001ae0:	4299      	cmp	r1, r3
 8001ae2:	d009      	beq.n	8001af8 <dbg_read+0x20>
	{
		return -1;
	}
	else
	{
		uint8_t c = dbg_rx_buffer[dbg_rx_buffer_tail];
 8001ae4:	7813      	ldrb	r3, [r2, #0]
 8001ae6:	4908      	ldr	r1, [pc, #32]	; (8001b08 <dbg_read+0x30>)
 8001ae8:	5cc8      	ldrb	r0, [r1, r3]
		dbg_rx_buffer_tail = (dbg_rx_buffer_index_t)(dbg_rx_buffer_tail + 1) % DBG_RX_BUFFER_SIZE;
 8001aea:	7813      	ldrb	r3, [r2, #0]
		return c;
 8001aec:	b200      	sxth	r0, r0
		dbg_rx_buffer_tail = (dbg_rx_buffer_index_t)(dbg_rx_buffer_tail + 1) % DBG_RX_BUFFER_SIZE;
 8001aee:	3301      	adds	r3, #1
 8001af0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001af4:	7013      	strb	r3, [r2, #0]
		return c;
 8001af6:	4770      	bx	lr
		return -1;
 8001af8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
}
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	200000d4 	.word	0x200000d4
 8001b04:	200000d5 	.word	0x200000d5
 8001b08:	20000094 	.word	0x20000094

08001b0c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001b0c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001b0e:	e003      	b.n	8001b18 <LoopCopyDataInit>

08001b10 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001b10:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001b12:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001b14:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001b16:	3104      	adds	r1, #4

08001b18 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001b18:	480a      	ldr	r0, [pc, #40]	; (8001b44 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001b1a:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001b1c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001b1e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001b20:	d3f6      	bcc.n	8001b10 <CopyDataInit>
  ldr r2, =_sbss
 8001b22:	4a0a      	ldr	r2, [pc, #40]	; (8001b4c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001b24:	e002      	b.n	8001b2c <LoopFillZerobss>

08001b26 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001b26:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001b28:	f842 3b04 	str.w	r3, [r2], #4

08001b2c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001b2c:	4b08      	ldr	r3, [pc, #32]	; (8001b50 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001b2e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001b30:	d3f9      	bcc.n	8001b26 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b32:	f7ff ff79 	bl	8001a28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b36:	f000 f815 	bl	8001b64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b3a:	f7ff fc11 	bl	8001360 <main>
  bx lr
 8001b3e:	4770      	bx	lr
  ldr r3, =_sidata
 8001b40:	08002700 	.word	0x08002700
  ldr r0, =_sdata
 8001b44:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001b48:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8001b4c:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8001b50:	200001e8 	.word	0x200001e8

08001b54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b54:	e7fe      	b.n	8001b54 <ADC1_2_IRQHandler>
	...

08001b58 <__errno>:
 8001b58:	4b01      	ldr	r3, [pc, #4]	; (8001b60 <__errno+0x8>)
 8001b5a:	6818      	ldr	r0, [r3, #0]
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	2000000c 	.word	0x2000000c

08001b64 <__libc_init_array>:
 8001b64:	b570      	push	{r4, r5, r6, lr}
 8001b66:	2500      	movs	r5, #0
 8001b68:	4e0c      	ldr	r6, [pc, #48]	; (8001b9c <__libc_init_array+0x38>)
 8001b6a:	4c0d      	ldr	r4, [pc, #52]	; (8001ba0 <__libc_init_array+0x3c>)
 8001b6c:	1ba4      	subs	r4, r4, r6
 8001b6e:	10a4      	asrs	r4, r4, #2
 8001b70:	42a5      	cmp	r5, r4
 8001b72:	d109      	bne.n	8001b88 <__libc_init_array+0x24>
 8001b74:	f000 fc86 	bl	8002484 <_init>
 8001b78:	2500      	movs	r5, #0
 8001b7a:	4e0a      	ldr	r6, [pc, #40]	; (8001ba4 <__libc_init_array+0x40>)
 8001b7c:	4c0a      	ldr	r4, [pc, #40]	; (8001ba8 <__libc_init_array+0x44>)
 8001b7e:	1ba4      	subs	r4, r4, r6
 8001b80:	10a4      	asrs	r4, r4, #2
 8001b82:	42a5      	cmp	r5, r4
 8001b84:	d105      	bne.n	8001b92 <__libc_init_array+0x2e>
 8001b86:	bd70      	pop	{r4, r5, r6, pc}
 8001b88:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001b8c:	4798      	blx	r3
 8001b8e:	3501      	adds	r5, #1
 8001b90:	e7ee      	b.n	8001b70 <__libc_init_array+0xc>
 8001b92:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001b96:	4798      	blx	r3
 8001b98:	3501      	adds	r5, #1
 8001b9a:	e7f2      	b.n	8001b82 <__libc_init_array+0x1e>
 8001b9c:	080026f8 	.word	0x080026f8
 8001ba0:	080026f8 	.word	0x080026f8
 8001ba4:	080026f8 	.word	0x080026f8
 8001ba8:	080026fc 	.word	0x080026fc

08001bac <memset>:
 8001bac:	4603      	mov	r3, r0
 8001bae:	4402      	add	r2, r0
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d100      	bne.n	8001bb6 <memset+0xa>
 8001bb4:	4770      	bx	lr
 8001bb6:	f803 1b01 	strb.w	r1, [r3], #1
 8001bba:	e7f9      	b.n	8001bb0 <memset+0x4>

08001bbc <sniprintf>:
 8001bbc:	b40c      	push	{r2, r3}
 8001bbe:	b530      	push	{r4, r5, lr}
 8001bc0:	4b17      	ldr	r3, [pc, #92]	; (8001c20 <sniprintf+0x64>)
 8001bc2:	1e0c      	subs	r4, r1, #0
 8001bc4:	b09d      	sub	sp, #116	; 0x74
 8001bc6:	681d      	ldr	r5, [r3, #0]
 8001bc8:	da08      	bge.n	8001bdc <sniprintf+0x20>
 8001bca:	238b      	movs	r3, #139	; 0x8b
 8001bcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001bd0:	602b      	str	r3, [r5, #0]
 8001bd2:	b01d      	add	sp, #116	; 0x74
 8001bd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001bd8:	b002      	add	sp, #8
 8001bda:	4770      	bx	lr
 8001bdc:	f44f 7302 	mov.w	r3, #520	; 0x208
 8001be0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8001be4:	bf0c      	ite	eq
 8001be6:	4623      	moveq	r3, r4
 8001be8:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8001bec:	9304      	str	r3, [sp, #16]
 8001bee:	9307      	str	r3, [sp, #28]
 8001bf0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bf4:	9002      	str	r0, [sp, #8]
 8001bf6:	9006      	str	r0, [sp, #24]
 8001bf8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8001bfc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8001bfe:	ab21      	add	r3, sp, #132	; 0x84
 8001c00:	a902      	add	r1, sp, #8
 8001c02:	4628      	mov	r0, r5
 8001c04:	9301      	str	r3, [sp, #4]
 8001c06:	f000 f891 	bl	8001d2c <_svfiprintf_r>
 8001c0a:	1c43      	adds	r3, r0, #1
 8001c0c:	bfbc      	itt	lt
 8001c0e:	238b      	movlt	r3, #139	; 0x8b
 8001c10:	602b      	strlt	r3, [r5, #0]
 8001c12:	2c00      	cmp	r4, #0
 8001c14:	d0dd      	beq.n	8001bd2 <sniprintf+0x16>
 8001c16:	2200      	movs	r2, #0
 8001c18:	9b02      	ldr	r3, [sp, #8]
 8001c1a:	701a      	strb	r2, [r3, #0]
 8001c1c:	e7d9      	b.n	8001bd2 <sniprintf+0x16>
 8001c1e:	bf00      	nop
 8001c20:	2000000c 	.word	0x2000000c

08001c24 <strchr>:
 8001c24:	b2c9      	uxtb	r1, r1
 8001c26:	4603      	mov	r3, r0
 8001c28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001c2c:	b11a      	cbz	r2, 8001c36 <strchr+0x12>
 8001c2e:	4291      	cmp	r1, r2
 8001c30:	d1f9      	bne.n	8001c26 <strchr+0x2>
 8001c32:	4618      	mov	r0, r3
 8001c34:	4770      	bx	lr
 8001c36:	2900      	cmp	r1, #0
 8001c38:	bf0c      	ite	eq
 8001c3a:	4618      	moveq	r0, r3
 8001c3c:	2000      	movne	r0, #0
 8001c3e:	4770      	bx	lr

08001c40 <strstr>:
 8001c40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c42:	7803      	ldrb	r3, [r0, #0]
 8001c44:	b133      	cbz	r3, 8001c54 <strstr+0x14>
 8001c46:	4603      	mov	r3, r0
 8001c48:	4618      	mov	r0, r3
 8001c4a:	1c5e      	adds	r6, r3, #1
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	b933      	cbnz	r3, 8001c5e <strstr+0x1e>
 8001c50:	4618      	mov	r0, r3
 8001c52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c54:	780b      	ldrb	r3, [r1, #0]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	bf18      	it	ne
 8001c5a:	2000      	movne	r0, #0
 8001c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c5e:	1e4d      	subs	r5, r1, #1
 8001c60:	1e44      	subs	r4, r0, #1
 8001c62:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8001c66:	2a00      	cmp	r2, #0
 8001c68:	d0f3      	beq.n	8001c52 <strstr+0x12>
 8001c6a:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 8001c6e:	4633      	mov	r3, r6
 8001c70:	4297      	cmp	r7, r2
 8001c72:	d0f6      	beq.n	8001c62 <strstr+0x22>
 8001c74:	e7e8      	b.n	8001c48 <strstr+0x8>

08001c76 <__ssputs_r>:
 8001c76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001c7a:	688e      	ldr	r6, [r1, #8]
 8001c7c:	4682      	mov	sl, r0
 8001c7e:	429e      	cmp	r6, r3
 8001c80:	460c      	mov	r4, r1
 8001c82:	4691      	mov	r9, r2
 8001c84:	4698      	mov	r8, r3
 8001c86:	d835      	bhi.n	8001cf4 <__ssputs_r+0x7e>
 8001c88:	898a      	ldrh	r2, [r1, #12]
 8001c8a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001c8e:	d031      	beq.n	8001cf4 <__ssputs_r+0x7e>
 8001c90:	2302      	movs	r3, #2
 8001c92:	6825      	ldr	r5, [r4, #0]
 8001c94:	6909      	ldr	r1, [r1, #16]
 8001c96:	1a6f      	subs	r7, r5, r1
 8001c98:	6965      	ldr	r5, [r4, #20]
 8001c9a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001c9e:	fb95 f5f3 	sdiv	r5, r5, r3
 8001ca2:	f108 0301 	add.w	r3, r8, #1
 8001ca6:	443b      	add	r3, r7
 8001ca8:	429d      	cmp	r5, r3
 8001caa:	bf38      	it	cc
 8001cac:	461d      	movcc	r5, r3
 8001cae:	0553      	lsls	r3, r2, #21
 8001cb0:	d531      	bpl.n	8001d16 <__ssputs_r+0xa0>
 8001cb2:	4629      	mov	r1, r5
 8001cb4:	f000 fb46 	bl	8002344 <_malloc_r>
 8001cb8:	4606      	mov	r6, r0
 8001cba:	b950      	cbnz	r0, 8001cd2 <__ssputs_r+0x5c>
 8001cbc:	230c      	movs	r3, #12
 8001cbe:	f8ca 3000 	str.w	r3, [sl]
 8001cc2:	89a3      	ldrh	r3, [r4, #12]
 8001cc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001cc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ccc:	81a3      	strh	r3, [r4, #12]
 8001cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001cd2:	463a      	mov	r2, r7
 8001cd4:	6921      	ldr	r1, [r4, #16]
 8001cd6:	f000 fac3 	bl	8002260 <memcpy>
 8001cda:	89a3      	ldrh	r3, [r4, #12]
 8001cdc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001ce0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ce4:	81a3      	strh	r3, [r4, #12]
 8001ce6:	6126      	str	r6, [r4, #16]
 8001ce8:	443e      	add	r6, r7
 8001cea:	6026      	str	r6, [r4, #0]
 8001cec:	4646      	mov	r6, r8
 8001cee:	6165      	str	r5, [r4, #20]
 8001cf0:	1bed      	subs	r5, r5, r7
 8001cf2:	60a5      	str	r5, [r4, #8]
 8001cf4:	4546      	cmp	r6, r8
 8001cf6:	bf28      	it	cs
 8001cf8:	4646      	movcs	r6, r8
 8001cfa:	4649      	mov	r1, r9
 8001cfc:	4632      	mov	r2, r6
 8001cfe:	6820      	ldr	r0, [r4, #0]
 8001d00:	f000 fab9 	bl	8002276 <memmove>
 8001d04:	68a3      	ldr	r3, [r4, #8]
 8001d06:	2000      	movs	r0, #0
 8001d08:	1b9b      	subs	r3, r3, r6
 8001d0a:	60a3      	str	r3, [r4, #8]
 8001d0c:	6823      	ldr	r3, [r4, #0]
 8001d0e:	441e      	add	r6, r3
 8001d10:	6026      	str	r6, [r4, #0]
 8001d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d16:	462a      	mov	r2, r5
 8001d18:	f000 fb72 	bl	8002400 <_realloc_r>
 8001d1c:	4606      	mov	r6, r0
 8001d1e:	2800      	cmp	r0, #0
 8001d20:	d1e1      	bne.n	8001ce6 <__ssputs_r+0x70>
 8001d22:	6921      	ldr	r1, [r4, #16]
 8001d24:	4650      	mov	r0, sl
 8001d26:	f000 fac1 	bl	80022ac <_free_r>
 8001d2a:	e7c7      	b.n	8001cbc <__ssputs_r+0x46>

08001d2c <_svfiprintf_r>:
 8001d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d30:	b09d      	sub	sp, #116	; 0x74
 8001d32:	9303      	str	r3, [sp, #12]
 8001d34:	898b      	ldrh	r3, [r1, #12]
 8001d36:	4680      	mov	r8, r0
 8001d38:	061c      	lsls	r4, r3, #24
 8001d3a:	460d      	mov	r5, r1
 8001d3c:	4616      	mov	r6, r2
 8001d3e:	d50f      	bpl.n	8001d60 <_svfiprintf_r+0x34>
 8001d40:	690b      	ldr	r3, [r1, #16]
 8001d42:	b96b      	cbnz	r3, 8001d60 <_svfiprintf_r+0x34>
 8001d44:	2140      	movs	r1, #64	; 0x40
 8001d46:	f000 fafd 	bl	8002344 <_malloc_r>
 8001d4a:	6028      	str	r0, [r5, #0]
 8001d4c:	6128      	str	r0, [r5, #16]
 8001d4e:	b928      	cbnz	r0, 8001d5c <_svfiprintf_r+0x30>
 8001d50:	230c      	movs	r3, #12
 8001d52:	f8c8 3000 	str.w	r3, [r8]
 8001d56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d5a:	e0c4      	b.n	8001ee6 <_svfiprintf_r+0x1ba>
 8001d5c:	2340      	movs	r3, #64	; 0x40
 8001d5e:	616b      	str	r3, [r5, #20]
 8001d60:	2300      	movs	r3, #0
 8001d62:	9309      	str	r3, [sp, #36]	; 0x24
 8001d64:	2320      	movs	r3, #32
 8001d66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001d6a:	2330      	movs	r3, #48	; 0x30
 8001d6c:	f04f 0b01 	mov.w	fp, #1
 8001d70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001d74:	4637      	mov	r7, r6
 8001d76:	463c      	mov	r4, r7
 8001d78:	f814 3b01 	ldrb.w	r3, [r4], #1
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d13c      	bne.n	8001dfa <_svfiprintf_r+0xce>
 8001d80:	ebb7 0a06 	subs.w	sl, r7, r6
 8001d84:	d00b      	beq.n	8001d9e <_svfiprintf_r+0x72>
 8001d86:	4653      	mov	r3, sl
 8001d88:	4632      	mov	r2, r6
 8001d8a:	4629      	mov	r1, r5
 8001d8c:	4640      	mov	r0, r8
 8001d8e:	f7ff ff72 	bl	8001c76 <__ssputs_r>
 8001d92:	3001      	adds	r0, #1
 8001d94:	f000 80a2 	beq.w	8001edc <_svfiprintf_r+0x1b0>
 8001d98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001d9a:	4453      	add	r3, sl
 8001d9c:	9309      	str	r3, [sp, #36]	; 0x24
 8001d9e:	783b      	ldrb	r3, [r7, #0]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	f000 809b 	beq.w	8001edc <_svfiprintf_r+0x1b0>
 8001da6:	2300      	movs	r3, #0
 8001da8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001dac:	9304      	str	r3, [sp, #16]
 8001dae:	9307      	str	r3, [sp, #28]
 8001db0:	9205      	str	r2, [sp, #20]
 8001db2:	9306      	str	r3, [sp, #24]
 8001db4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001db8:	931a      	str	r3, [sp, #104]	; 0x68
 8001dba:	2205      	movs	r2, #5
 8001dbc:	7821      	ldrb	r1, [r4, #0]
 8001dbe:	4850      	ldr	r0, [pc, #320]	; (8001f00 <_svfiprintf_r+0x1d4>)
 8001dc0:	f000 fa40 	bl	8002244 <memchr>
 8001dc4:	1c67      	adds	r7, r4, #1
 8001dc6:	9b04      	ldr	r3, [sp, #16]
 8001dc8:	b9d8      	cbnz	r0, 8001e02 <_svfiprintf_r+0xd6>
 8001dca:	06d9      	lsls	r1, r3, #27
 8001dcc:	bf44      	itt	mi
 8001dce:	2220      	movmi	r2, #32
 8001dd0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001dd4:	071a      	lsls	r2, r3, #28
 8001dd6:	bf44      	itt	mi
 8001dd8:	222b      	movmi	r2, #43	; 0x2b
 8001dda:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001dde:	7822      	ldrb	r2, [r4, #0]
 8001de0:	2a2a      	cmp	r2, #42	; 0x2a
 8001de2:	d016      	beq.n	8001e12 <_svfiprintf_r+0xe6>
 8001de4:	2100      	movs	r1, #0
 8001de6:	200a      	movs	r0, #10
 8001de8:	9a07      	ldr	r2, [sp, #28]
 8001dea:	4627      	mov	r7, r4
 8001dec:	783b      	ldrb	r3, [r7, #0]
 8001dee:	3401      	adds	r4, #1
 8001df0:	3b30      	subs	r3, #48	; 0x30
 8001df2:	2b09      	cmp	r3, #9
 8001df4:	d950      	bls.n	8001e98 <_svfiprintf_r+0x16c>
 8001df6:	b1c9      	cbz	r1, 8001e2c <_svfiprintf_r+0x100>
 8001df8:	e011      	b.n	8001e1e <_svfiprintf_r+0xf2>
 8001dfa:	2b25      	cmp	r3, #37	; 0x25
 8001dfc:	d0c0      	beq.n	8001d80 <_svfiprintf_r+0x54>
 8001dfe:	4627      	mov	r7, r4
 8001e00:	e7b9      	b.n	8001d76 <_svfiprintf_r+0x4a>
 8001e02:	4a3f      	ldr	r2, [pc, #252]	; (8001f00 <_svfiprintf_r+0x1d4>)
 8001e04:	463c      	mov	r4, r7
 8001e06:	1a80      	subs	r0, r0, r2
 8001e08:	fa0b f000 	lsl.w	r0, fp, r0
 8001e0c:	4318      	orrs	r0, r3
 8001e0e:	9004      	str	r0, [sp, #16]
 8001e10:	e7d3      	b.n	8001dba <_svfiprintf_r+0x8e>
 8001e12:	9a03      	ldr	r2, [sp, #12]
 8001e14:	1d11      	adds	r1, r2, #4
 8001e16:	6812      	ldr	r2, [r2, #0]
 8001e18:	9103      	str	r1, [sp, #12]
 8001e1a:	2a00      	cmp	r2, #0
 8001e1c:	db01      	blt.n	8001e22 <_svfiprintf_r+0xf6>
 8001e1e:	9207      	str	r2, [sp, #28]
 8001e20:	e004      	b.n	8001e2c <_svfiprintf_r+0x100>
 8001e22:	4252      	negs	r2, r2
 8001e24:	f043 0302 	orr.w	r3, r3, #2
 8001e28:	9207      	str	r2, [sp, #28]
 8001e2a:	9304      	str	r3, [sp, #16]
 8001e2c:	783b      	ldrb	r3, [r7, #0]
 8001e2e:	2b2e      	cmp	r3, #46	; 0x2e
 8001e30:	d10d      	bne.n	8001e4e <_svfiprintf_r+0x122>
 8001e32:	787b      	ldrb	r3, [r7, #1]
 8001e34:	1c79      	adds	r1, r7, #1
 8001e36:	2b2a      	cmp	r3, #42	; 0x2a
 8001e38:	d132      	bne.n	8001ea0 <_svfiprintf_r+0x174>
 8001e3a:	9b03      	ldr	r3, [sp, #12]
 8001e3c:	3702      	adds	r7, #2
 8001e3e:	1d1a      	adds	r2, r3, #4
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	9203      	str	r2, [sp, #12]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	bfb8      	it	lt
 8001e48:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8001e4c:	9305      	str	r3, [sp, #20]
 8001e4e:	4c2d      	ldr	r4, [pc, #180]	; (8001f04 <_svfiprintf_r+0x1d8>)
 8001e50:	2203      	movs	r2, #3
 8001e52:	7839      	ldrb	r1, [r7, #0]
 8001e54:	4620      	mov	r0, r4
 8001e56:	f000 f9f5 	bl	8002244 <memchr>
 8001e5a:	b138      	cbz	r0, 8001e6c <_svfiprintf_r+0x140>
 8001e5c:	2340      	movs	r3, #64	; 0x40
 8001e5e:	1b00      	subs	r0, r0, r4
 8001e60:	fa03 f000 	lsl.w	r0, r3, r0
 8001e64:	9b04      	ldr	r3, [sp, #16]
 8001e66:	3701      	adds	r7, #1
 8001e68:	4303      	orrs	r3, r0
 8001e6a:	9304      	str	r3, [sp, #16]
 8001e6c:	7839      	ldrb	r1, [r7, #0]
 8001e6e:	2206      	movs	r2, #6
 8001e70:	4825      	ldr	r0, [pc, #148]	; (8001f08 <_svfiprintf_r+0x1dc>)
 8001e72:	1c7e      	adds	r6, r7, #1
 8001e74:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001e78:	f000 f9e4 	bl	8002244 <memchr>
 8001e7c:	2800      	cmp	r0, #0
 8001e7e:	d035      	beq.n	8001eec <_svfiprintf_r+0x1c0>
 8001e80:	4b22      	ldr	r3, [pc, #136]	; (8001f0c <_svfiprintf_r+0x1e0>)
 8001e82:	b9fb      	cbnz	r3, 8001ec4 <_svfiprintf_r+0x198>
 8001e84:	9b03      	ldr	r3, [sp, #12]
 8001e86:	3307      	adds	r3, #7
 8001e88:	f023 0307 	bic.w	r3, r3, #7
 8001e8c:	3308      	adds	r3, #8
 8001e8e:	9303      	str	r3, [sp, #12]
 8001e90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001e92:	444b      	add	r3, r9
 8001e94:	9309      	str	r3, [sp, #36]	; 0x24
 8001e96:	e76d      	b.n	8001d74 <_svfiprintf_r+0x48>
 8001e98:	fb00 3202 	mla	r2, r0, r2, r3
 8001e9c:	2101      	movs	r1, #1
 8001e9e:	e7a4      	b.n	8001dea <_svfiprintf_r+0xbe>
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	240a      	movs	r4, #10
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	9305      	str	r3, [sp, #20]
 8001ea8:	460f      	mov	r7, r1
 8001eaa:	783a      	ldrb	r2, [r7, #0]
 8001eac:	3101      	adds	r1, #1
 8001eae:	3a30      	subs	r2, #48	; 0x30
 8001eb0:	2a09      	cmp	r2, #9
 8001eb2:	d903      	bls.n	8001ebc <_svfiprintf_r+0x190>
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d0ca      	beq.n	8001e4e <_svfiprintf_r+0x122>
 8001eb8:	9005      	str	r0, [sp, #20]
 8001eba:	e7c8      	b.n	8001e4e <_svfiprintf_r+0x122>
 8001ebc:	fb04 2000 	mla	r0, r4, r0, r2
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e7f1      	b.n	8001ea8 <_svfiprintf_r+0x17c>
 8001ec4:	ab03      	add	r3, sp, #12
 8001ec6:	9300      	str	r3, [sp, #0]
 8001ec8:	462a      	mov	r2, r5
 8001eca:	4b11      	ldr	r3, [pc, #68]	; (8001f10 <_svfiprintf_r+0x1e4>)
 8001ecc:	a904      	add	r1, sp, #16
 8001ece:	4640      	mov	r0, r8
 8001ed0:	f3af 8000 	nop.w
 8001ed4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8001ed8:	4681      	mov	r9, r0
 8001eda:	d1d9      	bne.n	8001e90 <_svfiprintf_r+0x164>
 8001edc:	89ab      	ldrh	r3, [r5, #12]
 8001ede:	065b      	lsls	r3, r3, #25
 8001ee0:	f53f af39 	bmi.w	8001d56 <_svfiprintf_r+0x2a>
 8001ee4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001ee6:	b01d      	add	sp, #116	; 0x74
 8001ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001eec:	ab03      	add	r3, sp, #12
 8001eee:	9300      	str	r3, [sp, #0]
 8001ef0:	462a      	mov	r2, r5
 8001ef2:	4b07      	ldr	r3, [pc, #28]	; (8001f10 <_svfiprintf_r+0x1e4>)
 8001ef4:	a904      	add	r1, sp, #16
 8001ef6:	4640      	mov	r0, r8
 8001ef8:	f000 f884 	bl	8002004 <_printf_i>
 8001efc:	e7ea      	b.n	8001ed4 <_svfiprintf_r+0x1a8>
 8001efe:	bf00      	nop
 8001f00:	080026c2 	.word	0x080026c2
 8001f04:	080026c8 	.word	0x080026c8
 8001f08:	080026cc 	.word	0x080026cc
 8001f0c:	00000000 	.word	0x00000000
 8001f10:	08001c77 	.word	0x08001c77

08001f14 <_printf_common>:
 8001f14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f18:	4691      	mov	r9, r2
 8001f1a:	461f      	mov	r7, r3
 8001f1c:	688a      	ldr	r2, [r1, #8]
 8001f1e:	690b      	ldr	r3, [r1, #16]
 8001f20:	4606      	mov	r6, r0
 8001f22:	4293      	cmp	r3, r2
 8001f24:	bfb8      	it	lt
 8001f26:	4613      	movlt	r3, r2
 8001f28:	f8c9 3000 	str.w	r3, [r9]
 8001f2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001f30:	460c      	mov	r4, r1
 8001f32:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001f36:	b112      	cbz	r2, 8001f3e <_printf_common+0x2a>
 8001f38:	3301      	adds	r3, #1
 8001f3a:	f8c9 3000 	str.w	r3, [r9]
 8001f3e:	6823      	ldr	r3, [r4, #0]
 8001f40:	0699      	lsls	r1, r3, #26
 8001f42:	bf42      	ittt	mi
 8001f44:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001f48:	3302      	addmi	r3, #2
 8001f4a:	f8c9 3000 	strmi.w	r3, [r9]
 8001f4e:	6825      	ldr	r5, [r4, #0]
 8001f50:	f015 0506 	ands.w	r5, r5, #6
 8001f54:	d107      	bne.n	8001f66 <_printf_common+0x52>
 8001f56:	f104 0a19 	add.w	sl, r4, #25
 8001f5a:	68e3      	ldr	r3, [r4, #12]
 8001f5c:	f8d9 2000 	ldr.w	r2, [r9]
 8001f60:	1a9b      	subs	r3, r3, r2
 8001f62:	429d      	cmp	r5, r3
 8001f64:	db2a      	blt.n	8001fbc <_printf_common+0xa8>
 8001f66:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001f6a:	6822      	ldr	r2, [r4, #0]
 8001f6c:	3300      	adds	r3, #0
 8001f6e:	bf18      	it	ne
 8001f70:	2301      	movne	r3, #1
 8001f72:	0692      	lsls	r2, r2, #26
 8001f74:	d42f      	bmi.n	8001fd6 <_printf_common+0xc2>
 8001f76:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001f7a:	4639      	mov	r1, r7
 8001f7c:	4630      	mov	r0, r6
 8001f7e:	47c0      	blx	r8
 8001f80:	3001      	adds	r0, #1
 8001f82:	d022      	beq.n	8001fca <_printf_common+0xb6>
 8001f84:	6823      	ldr	r3, [r4, #0]
 8001f86:	68e5      	ldr	r5, [r4, #12]
 8001f88:	f003 0306 	and.w	r3, r3, #6
 8001f8c:	2b04      	cmp	r3, #4
 8001f8e:	bf18      	it	ne
 8001f90:	2500      	movne	r5, #0
 8001f92:	f8d9 2000 	ldr.w	r2, [r9]
 8001f96:	f04f 0900 	mov.w	r9, #0
 8001f9a:	bf08      	it	eq
 8001f9c:	1aad      	subeq	r5, r5, r2
 8001f9e:	68a3      	ldr	r3, [r4, #8]
 8001fa0:	6922      	ldr	r2, [r4, #16]
 8001fa2:	bf08      	it	eq
 8001fa4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	bfc4      	itt	gt
 8001fac:	1a9b      	subgt	r3, r3, r2
 8001fae:	18ed      	addgt	r5, r5, r3
 8001fb0:	341a      	adds	r4, #26
 8001fb2:	454d      	cmp	r5, r9
 8001fb4:	d11b      	bne.n	8001fee <_printf_common+0xda>
 8001fb6:	2000      	movs	r0, #0
 8001fb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	4652      	mov	r2, sl
 8001fc0:	4639      	mov	r1, r7
 8001fc2:	4630      	mov	r0, r6
 8001fc4:	47c0      	blx	r8
 8001fc6:	3001      	adds	r0, #1
 8001fc8:	d103      	bne.n	8001fd2 <_printf_common+0xbe>
 8001fca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001fce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001fd2:	3501      	adds	r5, #1
 8001fd4:	e7c1      	b.n	8001f5a <_printf_common+0x46>
 8001fd6:	2030      	movs	r0, #48	; 0x30
 8001fd8:	18e1      	adds	r1, r4, r3
 8001fda:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001fde:	1c5a      	adds	r2, r3, #1
 8001fe0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001fe4:	4422      	add	r2, r4
 8001fe6:	3302      	adds	r3, #2
 8001fe8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001fec:	e7c3      	b.n	8001f76 <_printf_common+0x62>
 8001fee:	2301      	movs	r3, #1
 8001ff0:	4622      	mov	r2, r4
 8001ff2:	4639      	mov	r1, r7
 8001ff4:	4630      	mov	r0, r6
 8001ff6:	47c0      	blx	r8
 8001ff8:	3001      	adds	r0, #1
 8001ffa:	d0e6      	beq.n	8001fca <_printf_common+0xb6>
 8001ffc:	f109 0901 	add.w	r9, r9, #1
 8002000:	e7d7      	b.n	8001fb2 <_printf_common+0x9e>
	...

08002004 <_printf_i>:
 8002004:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002008:	4617      	mov	r7, r2
 800200a:	7e0a      	ldrb	r2, [r1, #24]
 800200c:	b085      	sub	sp, #20
 800200e:	2a6e      	cmp	r2, #110	; 0x6e
 8002010:	4698      	mov	r8, r3
 8002012:	4606      	mov	r6, r0
 8002014:	460c      	mov	r4, r1
 8002016:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002018:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800201c:	f000 80bc 	beq.w	8002198 <_printf_i+0x194>
 8002020:	d81a      	bhi.n	8002058 <_printf_i+0x54>
 8002022:	2a63      	cmp	r2, #99	; 0x63
 8002024:	d02e      	beq.n	8002084 <_printf_i+0x80>
 8002026:	d80a      	bhi.n	800203e <_printf_i+0x3a>
 8002028:	2a00      	cmp	r2, #0
 800202a:	f000 80c8 	beq.w	80021be <_printf_i+0x1ba>
 800202e:	2a58      	cmp	r2, #88	; 0x58
 8002030:	f000 808a 	beq.w	8002148 <_printf_i+0x144>
 8002034:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002038:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800203c:	e02a      	b.n	8002094 <_printf_i+0x90>
 800203e:	2a64      	cmp	r2, #100	; 0x64
 8002040:	d001      	beq.n	8002046 <_printf_i+0x42>
 8002042:	2a69      	cmp	r2, #105	; 0x69
 8002044:	d1f6      	bne.n	8002034 <_printf_i+0x30>
 8002046:	6821      	ldr	r1, [r4, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800204e:	d023      	beq.n	8002098 <_printf_i+0x94>
 8002050:	1d11      	adds	r1, r2, #4
 8002052:	6019      	str	r1, [r3, #0]
 8002054:	6813      	ldr	r3, [r2, #0]
 8002056:	e027      	b.n	80020a8 <_printf_i+0xa4>
 8002058:	2a73      	cmp	r2, #115	; 0x73
 800205a:	f000 80b4 	beq.w	80021c6 <_printf_i+0x1c2>
 800205e:	d808      	bhi.n	8002072 <_printf_i+0x6e>
 8002060:	2a6f      	cmp	r2, #111	; 0x6f
 8002062:	d02a      	beq.n	80020ba <_printf_i+0xb6>
 8002064:	2a70      	cmp	r2, #112	; 0x70
 8002066:	d1e5      	bne.n	8002034 <_printf_i+0x30>
 8002068:	680a      	ldr	r2, [r1, #0]
 800206a:	f042 0220 	orr.w	r2, r2, #32
 800206e:	600a      	str	r2, [r1, #0]
 8002070:	e003      	b.n	800207a <_printf_i+0x76>
 8002072:	2a75      	cmp	r2, #117	; 0x75
 8002074:	d021      	beq.n	80020ba <_printf_i+0xb6>
 8002076:	2a78      	cmp	r2, #120	; 0x78
 8002078:	d1dc      	bne.n	8002034 <_printf_i+0x30>
 800207a:	2278      	movs	r2, #120	; 0x78
 800207c:	496f      	ldr	r1, [pc, #444]	; (800223c <_printf_i+0x238>)
 800207e:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8002082:	e064      	b.n	800214e <_printf_i+0x14a>
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800208a:	1d11      	adds	r1, r2, #4
 800208c:	6019      	str	r1, [r3, #0]
 800208e:	6813      	ldr	r3, [r2, #0]
 8002090:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002094:	2301      	movs	r3, #1
 8002096:	e0a3      	b.n	80021e0 <_printf_i+0x1dc>
 8002098:	f011 0f40 	tst.w	r1, #64	; 0x40
 800209c:	f102 0104 	add.w	r1, r2, #4
 80020a0:	6019      	str	r1, [r3, #0]
 80020a2:	d0d7      	beq.n	8002054 <_printf_i+0x50>
 80020a4:	f9b2 3000 	ldrsh.w	r3, [r2]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	da03      	bge.n	80020b4 <_printf_i+0xb0>
 80020ac:	222d      	movs	r2, #45	; 0x2d
 80020ae:	425b      	negs	r3, r3
 80020b0:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80020b4:	4962      	ldr	r1, [pc, #392]	; (8002240 <_printf_i+0x23c>)
 80020b6:	220a      	movs	r2, #10
 80020b8:	e017      	b.n	80020ea <_printf_i+0xe6>
 80020ba:	6820      	ldr	r0, [r4, #0]
 80020bc:	6819      	ldr	r1, [r3, #0]
 80020be:	f010 0f80 	tst.w	r0, #128	; 0x80
 80020c2:	d003      	beq.n	80020cc <_printf_i+0xc8>
 80020c4:	1d08      	adds	r0, r1, #4
 80020c6:	6018      	str	r0, [r3, #0]
 80020c8:	680b      	ldr	r3, [r1, #0]
 80020ca:	e006      	b.n	80020da <_printf_i+0xd6>
 80020cc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80020d0:	f101 0004 	add.w	r0, r1, #4
 80020d4:	6018      	str	r0, [r3, #0]
 80020d6:	d0f7      	beq.n	80020c8 <_printf_i+0xc4>
 80020d8:	880b      	ldrh	r3, [r1, #0]
 80020da:	2a6f      	cmp	r2, #111	; 0x6f
 80020dc:	bf14      	ite	ne
 80020de:	220a      	movne	r2, #10
 80020e0:	2208      	moveq	r2, #8
 80020e2:	4957      	ldr	r1, [pc, #348]	; (8002240 <_printf_i+0x23c>)
 80020e4:	2000      	movs	r0, #0
 80020e6:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80020ea:	6865      	ldr	r5, [r4, #4]
 80020ec:	2d00      	cmp	r5, #0
 80020ee:	60a5      	str	r5, [r4, #8]
 80020f0:	f2c0 809c 	blt.w	800222c <_printf_i+0x228>
 80020f4:	6820      	ldr	r0, [r4, #0]
 80020f6:	f020 0004 	bic.w	r0, r0, #4
 80020fa:	6020      	str	r0, [r4, #0]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d13f      	bne.n	8002180 <_printf_i+0x17c>
 8002100:	2d00      	cmp	r5, #0
 8002102:	f040 8095 	bne.w	8002230 <_printf_i+0x22c>
 8002106:	4675      	mov	r5, lr
 8002108:	2a08      	cmp	r2, #8
 800210a:	d10b      	bne.n	8002124 <_printf_i+0x120>
 800210c:	6823      	ldr	r3, [r4, #0]
 800210e:	07da      	lsls	r2, r3, #31
 8002110:	d508      	bpl.n	8002124 <_printf_i+0x120>
 8002112:	6923      	ldr	r3, [r4, #16]
 8002114:	6862      	ldr	r2, [r4, #4]
 8002116:	429a      	cmp	r2, r3
 8002118:	bfde      	ittt	le
 800211a:	2330      	movle	r3, #48	; 0x30
 800211c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002120:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002124:	ebae 0305 	sub.w	r3, lr, r5
 8002128:	6123      	str	r3, [r4, #16]
 800212a:	f8cd 8000 	str.w	r8, [sp]
 800212e:	463b      	mov	r3, r7
 8002130:	aa03      	add	r2, sp, #12
 8002132:	4621      	mov	r1, r4
 8002134:	4630      	mov	r0, r6
 8002136:	f7ff feed 	bl	8001f14 <_printf_common>
 800213a:	3001      	adds	r0, #1
 800213c:	d155      	bne.n	80021ea <_printf_i+0x1e6>
 800213e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002142:	b005      	add	sp, #20
 8002144:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002148:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800214c:	493c      	ldr	r1, [pc, #240]	; (8002240 <_printf_i+0x23c>)
 800214e:	6822      	ldr	r2, [r4, #0]
 8002150:	6818      	ldr	r0, [r3, #0]
 8002152:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002156:	f100 0504 	add.w	r5, r0, #4
 800215a:	601d      	str	r5, [r3, #0]
 800215c:	d001      	beq.n	8002162 <_printf_i+0x15e>
 800215e:	6803      	ldr	r3, [r0, #0]
 8002160:	e002      	b.n	8002168 <_printf_i+0x164>
 8002162:	0655      	lsls	r5, r2, #25
 8002164:	d5fb      	bpl.n	800215e <_printf_i+0x15a>
 8002166:	8803      	ldrh	r3, [r0, #0]
 8002168:	07d0      	lsls	r0, r2, #31
 800216a:	bf44      	itt	mi
 800216c:	f042 0220 	orrmi.w	r2, r2, #32
 8002170:	6022      	strmi	r2, [r4, #0]
 8002172:	b91b      	cbnz	r3, 800217c <_printf_i+0x178>
 8002174:	6822      	ldr	r2, [r4, #0]
 8002176:	f022 0220 	bic.w	r2, r2, #32
 800217a:	6022      	str	r2, [r4, #0]
 800217c:	2210      	movs	r2, #16
 800217e:	e7b1      	b.n	80020e4 <_printf_i+0xe0>
 8002180:	4675      	mov	r5, lr
 8002182:	fbb3 f0f2 	udiv	r0, r3, r2
 8002186:	fb02 3310 	mls	r3, r2, r0, r3
 800218a:	5ccb      	ldrb	r3, [r1, r3]
 800218c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002190:	4603      	mov	r3, r0
 8002192:	2800      	cmp	r0, #0
 8002194:	d1f5      	bne.n	8002182 <_printf_i+0x17e>
 8002196:	e7b7      	b.n	8002108 <_printf_i+0x104>
 8002198:	6808      	ldr	r0, [r1, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	f010 0f80 	tst.w	r0, #128	; 0x80
 80021a0:	6949      	ldr	r1, [r1, #20]
 80021a2:	d004      	beq.n	80021ae <_printf_i+0x1aa>
 80021a4:	1d10      	adds	r0, r2, #4
 80021a6:	6018      	str	r0, [r3, #0]
 80021a8:	6813      	ldr	r3, [r2, #0]
 80021aa:	6019      	str	r1, [r3, #0]
 80021ac:	e007      	b.n	80021be <_printf_i+0x1ba>
 80021ae:	f010 0f40 	tst.w	r0, #64	; 0x40
 80021b2:	f102 0004 	add.w	r0, r2, #4
 80021b6:	6018      	str	r0, [r3, #0]
 80021b8:	6813      	ldr	r3, [r2, #0]
 80021ba:	d0f6      	beq.n	80021aa <_printf_i+0x1a6>
 80021bc:	8019      	strh	r1, [r3, #0]
 80021be:	2300      	movs	r3, #0
 80021c0:	4675      	mov	r5, lr
 80021c2:	6123      	str	r3, [r4, #16]
 80021c4:	e7b1      	b.n	800212a <_printf_i+0x126>
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	1d11      	adds	r1, r2, #4
 80021ca:	6019      	str	r1, [r3, #0]
 80021cc:	6815      	ldr	r5, [r2, #0]
 80021ce:	2100      	movs	r1, #0
 80021d0:	6862      	ldr	r2, [r4, #4]
 80021d2:	4628      	mov	r0, r5
 80021d4:	f000 f836 	bl	8002244 <memchr>
 80021d8:	b108      	cbz	r0, 80021de <_printf_i+0x1da>
 80021da:	1b40      	subs	r0, r0, r5
 80021dc:	6060      	str	r0, [r4, #4]
 80021de:	6863      	ldr	r3, [r4, #4]
 80021e0:	6123      	str	r3, [r4, #16]
 80021e2:	2300      	movs	r3, #0
 80021e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80021e8:	e79f      	b.n	800212a <_printf_i+0x126>
 80021ea:	6923      	ldr	r3, [r4, #16]
 80021ec:	462a      	mov	r2, r5
 80021ee:	4639      	mov	r1, r7
 80021f0:	4630      	mov	r0, r6
 80021f2:	47c0      	blx	r8
 80021f4:	3001      	adds	r0, #1
 80021f6:	d0a2      	beq.n	800213e <_printf_i+0x13a>
 80021f8:	6823      	ldr	r3, [r4, #0]
 80021fa:	079b      	lsls	r3, r3, #30
 80021fc:	d507      	bpl.n	800220e <_printf_i+0x20a>
 80021fe:	2500      	movs	r5, #0
 8002200:	f104 0919 	add.w	r9, r4, #25
 8002204:	68e3      	ldr	r3, [r4, #12]
 8002206:	9a03      	ldr	r2, [sp, #12]
 8002208:	1a9b      	subs	r3, r3, r2
 800220a:	429d      	cmp	r5, r3
 800220c:	db05      	blt.n	800221a <_printf_i+0x216>
 800220e:	68e0      	ldr	r0, [r4, #12]
 8002210:	9b03      	ldr	r3, [sp, #12]
 8002212:	4298      	cmp	r0, r3
 8002214:	bfb8      	it	lt
 8002216:	4618      	movlt	r0, r3
 8002218:	e793      	b.n	8002142 <_printf_i+0x13e>
 800221a:	2301      	movs	r3, #1
 800221c:	464a      	mov	r2, r9
 800221e:	4639      	mov	r1, r7
 8002220:	4630      	mov	r0, r6
 8002222:	47c0      	blx	r8
 8002224:	3001      	adds	r0, #1
 8002226:	d08a      	beq.n	800213e <_printf_i+0x13a>
 8002228:	3501      	adds	r5, #1
 800222a:	e7eb      	b.n	8002204 <_printf_i+0x200>
 800222c:	2b00      	cmp	r3, #0
 800222e:	d1a7      	bne.n	8002180 <_printf_i+0x17c>
 8002230:	780b      	ldrb	r3, [r1, #0]
 8002232:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002236:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800223a:	e765      	b.n	8002108 <_printf_i+0x104>
 800223c:	080026e4 	.word	0x080026e4
 8002240:	080026d3 	.word	0x080026d3

08002244 <memchr>:
 8002244:	b510      	push	{r4, lr}
 8002246:	b2c9      	uxtb	r1, r1
 8002248:	4402      	add	r2, r0
 800224a:	4290      	cmp	r0, r2
 800224c:	4603      	mov	r3, r0
 800224e:	d101      	bne.n	8002254 <memchr+0x10>
 8002250:	2000      	movs	r0, #0
 8002252:	bd10      	pop	{r4, pc}
 8002254:	781c      	ldrb	r4, [r3, #0]
 8002256:	3001      	adds	r0, #1
 8002258:	428c      	cmp	r4, r1
 800225a:	d1f6      	bne.n	800224a <memchr+0x6>
 800225c:	4618      	mov	r0, r3
 800225e:	bd10      	pop	{r4, pc}

08002260 <memcpy>:
 8002260:	b510      	push	{r4, lr}
 8002262:	1e43      	subs	r3, r0, #1
 8002264:	440a      	add	r2, r1
 8002266:	4291      	cmp	r1, r2
 8002268:	d100      	bne.n	800226c <memcpy+0xc>
 800226a:	bd10      	pop	{r4, pc}
 800226c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002270:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002274:	e7f7      	b.n	8002266 <memcpy+0x6>

08002276 <memmove>:
 8002276:	4288      	cmp	r0, r1
 8002278:	b510      	push	{r4, lr}
 800227a:	eb01 0302 	add.w	r3, r1, r2
 800227e:	d803      	bhi.n	8002288 <memmove+0x12>
 8002280:	1e42      	subs	r2, r0, #1
 8002282:	4299      	cmp	r1, r3
 8002284:	d10c      	bne.n	80022a0 <memmove+0x2a>
 8002286:	bd10      	pop	{r4, pc}
 8002288:	4298      	cmp	r0, r3
 800228a:	d2f9      	bcs.n	8002280 <memmove+0xa>
 800228c:	1881      	adds	r1, r0, r2
 800228e:	1ad2      	subs	r2, r2, r3
 8002290:	42d3      	cmn	r3, r2
 8002292:	d100      	bne.n	8002296 <memmove+0x20>
 8002294:	bd10      	pop	{r4, pc}
 8002296:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800229a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800229e:	e7f7      	b.n	8002290 <memmove+0x1a>
 80022a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80022a4:	f802 4f01 	strb.w	r4, [r2, #1]!
 80022a8:	e7eb      	b.n	8002282 <memmove+0xc>
	...

080022ac <_free_r>:
 80022ac:	b538      	push	{r3, r4, r5, lr}
 80022ae:	4605      	mov	r5, r0
 80022b0:	2900      	cmp	r1, #0
 80022b2:	d043      	beq.n	800233c <_free_r+0x90>
 80022b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80022b8:	1f0c      	subs	r4, r1, #4
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	bfb8      	it	lt
 80022be:	18e4      	addlt	r4, r4, r3
 80022c0:	f000 f8d4 	bl	800246c <__malloc_lock>
 80022c4:	4a1e      	ldr	r2, [pc, #120]	; (8002340 <_free_r+0x94>)
 80022c6:	6813      	ldr	r3, [r2, #0]
 80022c8:	4610      	mov	r0, r2
 80022ca:	b933      	cbnz	r3, 80022da <_free_r+0x2e>
 80022cc:	6063      	str	r3, [r4, #4]
 80022ce:	6014      	str	r4, [r2, #0]
 80022d0:	4628      	mov	r0, r5
 80022d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80022d6:	f000 b8ca 	b.w	800246e <__malloc_unlock>
 80022da:	42a3      	cmp	r3, r4
 80022dc:	d90b      	bls.n	80022f6 <_free_r+0x4a>
 80022de:	6821      	ldr	r1, [r4, #0]
 80022e0:	1862      	adds	r2, r4, r1
 80022e2:	4293      	cmp	r3, r2
 80022e4:	bf01      	itttt	eq
 80022e6:	681a      	ldreq	r2, [r3, #0]
 80022e8:	685b      	ldreq	r3, [r3, #4]
 80022ea:	1852      	addeq	r2, r2, r1
 80022ec:	6022      	streq	r2, [r4, #0]
 80022ee:	6063      	str	r3, [r4, #4]
 80022f0:	6004      	str	r4, [r0, #0]
 80022f2:	e7ed      	b.n	80022d0 <_free_r+0x24>
 80022f4:	4613      	mov	r3, r2
 80022f6:	685a      	ldr	r2, [r3, #4]
 80022f8:	b10a      	cbz	r2, 80022fe <_free_r+0x52>
 80022fa:	42a2      	cmp	r2, r4
 80022fc:	d9fa      	bls.n	80022f4 <_free_r+0x48>
 80022fe:	6819      	ldr	r1, [r3, #0]
 8002300:	1858      	adds	r0, r3, r1
 8002302:	42a0      	cmp	r0, r4
 8002304:	d10b      	bne.n	800231e <_free_r+0x72>
 8002306:	6820      	ldr	r0, [r4, #0]
 8002308:	4401      	add	r1, r0
 800230a:	1858      	adds	r0, r3, r1
 800230c:	4282      	cmp	r2, r0
 800230e:	6019      	str	r1, [r3, #0]
 8002310:	d1de      	bne.n	80022d0 <_free_r+0x24>
 8002312:	6810      	ldr	r0, [r2, #0]
 8002314:	6852      	ldr	r2, [r2, #4]
 8002316:	4401      	add	r1, r0
 8002318:	6019      	str	r1, [r3, #0]
 800231a:	605a      	str	r2, [r3, #4]
 800231c:	e7d8      	b.n	80022d0 <_free_r+0x24>
 800231e:	d902      	bls.n	8002326 <_free_r+0x7a>
 8002320:	230c      	movs	r3, #12
 8002322:	602b      	str	r3, [r5, #0]
 8002324:	e7d4      	b.n	80022d0 <_free_r+0x24>
 8002326:	6820      	ldr	r0, [r4, #0]
 8002328:	1821      	adds	r1, r4, r0
 800232a:	428a      	cmp	r2, r1
 800232c:	bf01      	itttt	eq
 800232e:	6811      	ldreq	r1, [r2, #0]
 8002330:	6852      	ldreq	r2, [r2, #4]
 8002332:	1809      	addeq	r1, r1, r0
 8002334:	6021      	streq	r1, [r4, #0]
 8002336:	6062      	str	r2, [r4, #4]
 8002338:	605c      	str	r4, [r3, #4]
 800233a:	e7c9      	b.n	80022d0 <_free_r+0x24>
 800233c:	bd38      	pop	{r3, r4, r5, pc}
 800233e:	bf00      	nop
 8002340:	20000118 	.word	0x20000118

08002344 <_malloc_r>:
 8002344:	b570      	push	{r4, r5, r6, lr}
 8002346:	1ccd      	adds	r5, r1, #3
 8002348:	f025 0503 	bic.w	r5, r5, #3
 800234c:	3508      	adds	r5, #8
 800234e:	2d0c      	cmp	r5, #12
 8002350:	bf38      	it	cc
 8002352:	250c      	movcc	r5, #12
 8002354:	2d00      	cmp	r5, #0
 8002356:	4606      	mov	r6, r0
 8002358:	db01      	blt.n	800235e <_malloc_r+0x1a>
 800235a:	42a9      	cmp	r1, r5
 800235c:	d903      	bls.n	8002366 <_malloc_r+0x22>
 800235e:	230c      	movs	r3, #12
 8002360:	6033      	str	r3, [r6, #0]
 8002362:	2000      	movs	r0, #0
 8002364:	bd70      	pop	{r4, r5, r6, pc}
 8002366:	f000 f881 	bl	800246c <__malloc_lock>
 800236a:	4a23      	ldr	r2, [pc, #140]	; (80023f8 <_malloc_r+0xb4>)
 800236c:	6814      	ldr	r4, [r2, #0]
 800236e:	4621      	mov	r1, r4
 8002370:	b991      	cbnz	r1, 8002398 <_malloc_r+0x54>
 8002372:	4c22      	ldr	r4, [pc, #136]	; (80023fc <_malloc_r+0xb8>)
 8002374:	6823      	ldr	r3, [r4, #0]
 8002376:	b91b      	cbnz	r3, 8002380 <_malloc_r+0x3c>
 8002378:	4630      	mov	r0, r6
 800237a:	f000 f867 	bl	800244c <_sbrk_r>
 800237e:	6020      	str	r0, [r4, #0]
 8002380:	4629      	mov	r1, r5
 8002382:	4630      	mov	r0, r6
 8002384:	f000 f862 	bl	800244c <_sbrk_r>
 8002388:	1c43      	adds	r3, r0, #1
 800238a:	d126      	bne.n	80023da <_malloc_r+0x96>
 800238c:	230c      	movs	r3, #12
 800238e:	4630      	mov	r0, r6
 8002390:	6033      	str	r3, [r6, #0]
 8002392:	f000 f86c 	bl	800246e <__malloc_unlock>
 8002396:	e7e4      	b.n	8002362 <_malloc_r+0x1e>
 8002398:	680b      	ldr	r3, [r1, #0]
 800239a:	1b5b      	subs	r3, r3, r5
 800239c:	d41a      	bmi.n	80023d4 <_malloc_r+0x90>
 800239e:	2b0b      	cmp	r3, #11
 80023a0:	d90f      	bls.n	80023c2 <_malloc_r+0x7e>
 80023a2:	600b      	str	r3, [r1, #0]
 80023a4:	18cc      	adds	r4, r1, r3
 80023a6:	50cd      	str	r5, [r1, r3]
 80023a8:	4630      	mov	r0, r6
 80023aa:	f000 f860 	bl	800246e <__malloc_unlock>
 80023ae:	f104 000b 	add.w	r0, r4, #11
 80023b2:	1d23      	adds	r3, r4, #4
 80023b4:	f020 0007 	bic.w	r0, r0, #7
 80023b8:	1ac3      	subs	r3, r0, r3
 80023ba:	d01b      	beq.n	80023f4 <_malloc_r+0xb0>
 80023bc:	425a      	negs	r2, r3
 80023be:	50e2      	str	r2, [r4, r3]
 80023c0:	bd70      	pop	{r4, r5, r6, pc}
 80023c2:	428c      	cmp	r4, r1
 80023c4:	bf0b      	itete	eq
 80023c6:	6863      	ldreq	r3, [r4, #4]
 80023c8:	684b      	ldrne	r3, [r1, #4]
 80023ca:	6013      	streq	r3, [r2, #0]
 80023cc:	6063      	strne	r3, [r4, #4]
 80023ce:	bf18      	it	ne
 80023d0:	460c      	movne	r4, r1
 80023d2:	e7e9      	b.n	80023a8 <_malloc_r+0x64>
 80023d4:	460c      	mov	r4, r1
 80023d6:	6849      	ldr	r1, [r1, #4]
 80023d8:	e7ca      	b.n	8002370 <_malloc_r+0x2c>
 80023da:	1cc4      	adds	r4, r0, #3
 80023dc:	f024 0403 	bic.w	r4, r4, #3
 80023e0:	42a0      	cmp	r0, r4
 80023e2:	d005      	beq.n	80023f0 <_malloc_r+0xac>
 80023e4:	1a21      	subs	r1, r4, r0
 80023e6:	4630      	mov	r0, r6
 80023e8:	f000 f830 	bl	800244c <_sbrk_r>
 80023ec:	3001      	adds	r0, #1
 80023ee:	d0cd      	beq.n	800238c <_malloc_r+0x48>
 80023f0:	6025      	str	r5, [r4, #0]
 80023f2:	e7d9      	b.n	80023a8 <_malloc_r+0x64>
 80023f4:	bd70      	pop	{r4, r5, r6, pc}
 80023f6:	bf00      	nop
 80023f8:	20000118 	.word	0x20000118
 80023fc:	2000011c 	.word	0x2000011c

08002400 <_realloc_r>:
 8002400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002402:	4607      	mov	r7, r0
 8002404:	4614      	mov	r4, r2
 8002406:	460e      	mov	r6, r1
 8002408:	b921      	cbnz	r1, 8002414 <_realloc_r+0x14>
 800240a:	4611      	mov	r1, r2
 800240c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002410:	f7ff bf98 	b.w	8002344 <_malloc_r>
 8002414:	b922      	cbnz	r2, 8002420 <_realloc_r+0x20>
 8002416:	f7ff ff49 	bl	80022ac <_free_r>
 800241a:	4625      	mov	r5, r4
 800241c:	4628      	mov	r0, r5
 800241e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002420:	f000 f826 	bl	8002470 <_malloc_usable_size_r>
 8002424:	4284      	cmp	r4, r0
 8002426:	d90f      	bls.n	8002448 <_realloc_r+0x48>
 8002428:	4621      	mov	r1, r4
 800242a:	4638      	mov	r0, r7
 800242c:	f7ff ff8a 	bl	8002344 <_malloc_r>
 8002430:	4605      	mov	r5, r0
 8002432:	2800      	cmp	r0, #0
 8002434:	d0f2      	beq.n	800241c <_realloc_r+0x1c>
 8002436:	4631      	mov	r1, r6
 8002438:	4622      	mov	r2, r4
 800243a:	f7ff ff11 	bl	8002260 <memcpy>
 800243e:	4631      	mov	r1, r6
 8002440:	4638      	mov	r0, r7
 8002442:	f7ff ff33 	bl	80022ac <_free_r>
 8002446:	e7e9      	b.n	800241c <_realloc_r+0x1c>
 8002448:	4635      	mov	r5, r6
 800244a:	e7e7      	b.n	800241c <_realloc_r+0x1c>

0800244c <_sbrk_r>:
 800244c:	b538      	push	{r3, r4, r5, lr}
 800244e:	2300      	movs	r3, #0
 8002450:	4c05      	ldr	r4, [pc, #20]	; (8002468 <_sbrk_r+0x1c>)
 8002452:	4605      	mov	r5, r0
 8002454:	4608      	mov	r0, r1
 8002456:	6023      	str	r3, [r4, #0]
 8002458:	f7ff facc 	bl	80019f4 <_sbrk>
 800245c:	1c43      	adds	r3, r0, #1
 800245e:	d102      	bne.n	8002466 <_sbrk_r+0x1a>
 8002460:	6823      	ldr	r3, [r4, #0]
 8002462:	b103      	cbz	r3, 8002466 <_sbrk_r+0x1a>
 8002464:	602b      	str	r3, [r5, #0]
 8002466:	bd38      	pop	{r3, r4, r5, pc}
 8002468:	200001e4 	.word	0x200001e4

0800246c <__malloc_lock>:
 800246c:	4770      	bx	lr

0800246e <__malloc_unlock>:
 800246e:	4770      	bx	lr

08002470 <_malloc_usable_size_r>:
 8002470:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8002474:	2800      	cmp	r0, #0
 8002476:	f1a0 0004 	sub.w	r0, r0, #4
 800247a:	bfbc      	itt	lt
 800247c:	580b      	ldrlt	r3, [r1, r0]
 800247e:	18c0      	addlt	r0, r0, r3
 8002480:	4770      	bx	lr
	...

08002484 <_init>:
 8002484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002486:	bf00      	nop
 8002488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800248a:	bc08      	pop	{r3}
 800248c:	469e      	mov	lr, r3
 800248e:	4770      	bx	lr

08002490 <_fini>:
 8002490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002492:	bf00      	nop
 8002494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002496:	bc08      	pop	{r3}
 8002498:	469e      	mov	lr, r3
 800249a:	4770      	bx	lr
