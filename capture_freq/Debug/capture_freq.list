
capture_freq.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040fc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000298  08004210  08004210  00014210  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080044a8  080044a8  000144a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080044ac  080044ac  000144ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001dc  20000000  080044b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000f4  200001dc  0800468c  000201dc  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200002d0  0800468c  000202d0  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
  9 .debug_info   000112a0  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002357  00000000  00000000  000314a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005efc  00000000  00000000  000337fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000008b8  00000000  00000000  000396f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000b88  00000000  00000000  00039fb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000048b8  00000000  00000000  0003ab38  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000349e  00000000  00000000  0003f3f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004288e  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002390  00000000  00000000  0004290c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	080041f4 	.word	0x080041f4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	080041f4 	.word	0x080041f4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f092 0f00 	teq	r2, #0
 800044a:	bf14      	ite	ne
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	4770      	bxeq	lr
 8000452:	b530      	push	{r4, r5, lr}
 8000454:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000460:	e720      	b.n	80002a4 <__adddf3+0x138>
 8000462:	bf00      	nop

08000464 <__aeabi_ul2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f04f 0500 	mov.w	r5, #0
 8000472:	e00a      	b.n	800048a <__aeabi_l2d+0x16>

08000474 <__aeabi_l2d>:
 8000474:	ea50 0201 	orrs.w	r2, r0, r1
 8000478:	bf08      	it	eq
 800047a:	4770      	bxeq	lr
 800047c:	b530      	push	{r4, r5, lr}
 800047e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000482:	d502      	bpl.n	800048a <__aeabi_l2d+0x16>
 8000484:	4240      	negs	r0, r0
 8000486:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000492:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000496:	f43f aedc 	beq.w	8000252 <__adddf3+0xe6>
 800049a:	f04f 0203 	mov.w	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b2:	f1c2 0320 	rsb	r3, r2, #32
 80004b6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ba:	fa20 f002 	lsr.w	r0, r0, r2
 80004be:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c2:	ea40 000e 	orr.w	r0, r0, lr
 80004c6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ca:	4414      	add	r4, r2
 80004cc:	e6c1      	b.n	8000252 <__adddf3+0xe6>
 80004ce:	bf00      	nop

080004d0 <__aeabi_dmul>:
 80004d0:	b570      	push	{r4, r5, r6, lr}
 80004d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004de:	bf1d      	ittte	ne
 80004e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004e4:	ea94 0f0c 	teqne	r4, ip
 80004e8:	ea95 0f0c 	teqne	r5, ip
 80004ec:	f000 f8de 	bleq	80006ac <__aeabi_dmul+0x1dc>
 80004f0:	442c      	add	r4, r5
 80004f2:	ea81 0603 	eor.w	r6, r1, r3
 80004f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000502:	bf18      	it	ne
 8000504:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000508:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800050c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000510:	d038      	beq.n	8000584 <__aeabi_dmul+0xb4>
 8000512:	fba0 ce02 	umull	ip, lr, r0, r2
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800051e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000522:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000526:	f04f 0600 	mov.w	r6, #0
 800052a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800052e:	f09c 0f00 	teq	ip, #0
 8000532:	bf18      	it	ne
 8000534:	f04e 0e01 	orrne.w	lr, lr, #1
 8000538:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800053c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000540:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000544:	d204      	bcs.n	8000550 <__aeabi_dmul+0x80>
 8000546:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800054a:	416d      	adcs	r5, r5
 800054c:	eb46 0606 	adc.w	r6, r6, r6
 8000550:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000554:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000558:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800055c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000560:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000564:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000568:	bf88      	it	hi
 800056a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800056e:	d81e      	bhi.n	80005ae <__aeabi_dmul+0xde>
 8000570:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000574:	bf08      	it	eq
 8000576:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800057a:	f150 0000 	adcs.w	r0, r0, #0
 800057e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000582:	bd70      	pop	{r4, r5, r6, pc}
 8000584:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000588:	ea46 0101 	orr.w	r1, r6, r1
 800058c:	ea40 0002 	orr.w	r0, r0, r2
 8000590:	ea81 0103 	eor.w	r1, r1, r3
 8000594:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000598:	bfc2      	ittt	gt
 800059a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800059e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005a2:	bd70      	popgt	{r4, r5, r6, pc}
 80005a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a8:	f04f 0e00 	mov.w	lr, #0
 80005ac:	3c01      	subs	r4, #1
 80005ae:	f300 80ab 	bgt.w	8000708 <__aeabi_dmul+0x238>
 80005b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005b6:	bfde      	ittt	le
 80005b8:	2000      	movle	r0, #0
 80005ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005be:	bd70      	pople	{r4, r5, r6, pc}
 80005c0:	f1c4 0400 	rsb	r4, r4, #0
 80005c4:	3c20      	subs	r4, #32
 80005c6:	da35      	bge.n	8000634 <__aeabi_dmul+0x164>
 80005c8:	340c      	adds	r4, #12
 80005ca:	dc1b      	bgt.n	8000604 <__aeabi_dmul+0x134>
 80005cc:	f104 0414 	add.w	r4, r4, #20
 80005d0:	f1c4 0520 	rsb	r5, r4, #32
 80005d4:	fa00 f305 	lsl.w	r3, r0, r5
 80005d8:	fa20 f004 	lsr.w	r0, r0, r4
 80005dc:	fa01 f205 	lsl.w	r2, r1, r5
 80005e0:	ea40 0002 	orr.w	r0, r0, r2
 80005e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f0:	fa21 f604 	lsr.w	r6, r1, r4
 80005f4:	eb42 0106 	adc.w	r1, r2, r6
 80005f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005fc:	bf08      	it	eq
 80005fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f1c4 040c 	rsb	r4, r4, #12
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f304 	lsl.w	r3, r0, r4
 8000610:	fa20 f005 	lsr.w	r0, r0, r5
 8000614:	fa01 f204 	lsl.w	r2, r1, r4
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000620:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000624:	f141 0100 	adc.w	r1, r1, #0
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 0520 	rsb	r5, r4, #32
 8000638:	fa00 f205 	lsl.w	r2, r0, r5
 800063c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000640:	fa20 f304 	lsr.w	r3, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea43 0302 	orr.w	r3, r3, r2
 800064c:	fa21 f004 	lsr.w	r0, r1, r4
 8000650:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000654:	fa21 f204 	lsr.w	r2, r1, r4
 8000658:	ea20 0002 	bic.w	r0, r0, r2
 800065c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f094 0f00 	teq	r4, #0
 8000670:	d10f      	bne.n	8000692 <__aeabi_dmul+0x1c2>
 8000672:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000676:	0040      	lsls	r0, r0, #1
 8000678:	eb41 0101 	adc.w	r1, r1, r1
 800067c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000680:	bf08      	it	eq
 8000682:	3c01      	subeq	r4, #1
 8000684:	d0f7      	beq.n	8000676 <__aeabi_dmul+0x1a6>
 8000686:	ea41 0106 	orr.w	r1, r1, r6
 800068a:	f095 0f00 	teq	r5, #0
 800068e:	bf18      	it	ne
 8000690:	4770      	bxne	lr
 8000692:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000696:	0052      	lsls	r2, r2, #1
 8000698:	eb43 0303 	adc.w	r3, r3, r3
 800069c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a0:	bf08      	it	eq
 80006a2:	3d01      	subeq	r5, #1
 80006a4:	d0f7      	beq.n	8000696 <__aeabi_dmul+0x1c6>
 80006a6:	ea43 0306 	orr.w	r3, r3, r6
 80006aa:	4770      	bx	lr
 80006ac:	ea94 0f0c 	teq	r4, ip
 80006b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006b4:	bf18      	it	ne
 80006b6:	ea95 0f0c 	teqne	r5, ip
 80006ba:	d00c      	beq.n	80006d6 <__aeabi_dmul+0x206>
 80006bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c0:	bf18      	it	ne
 80006c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006c6:	d1d1      	bne.n	800066c <__aeabi_dmul+0x19c>
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	f04f 0000 	mov.w	r0, #0
 80006d4:	bd70      	pop	{r4, r5, r6, pc}
 80006d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006da:	bf06      	itte	eq
 80006dc:	4610      	moveq	r0, r2
 80006de:	4619      	moveq	r1, r3
 80006e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e4:	d019      	beq.n	800071a <__aeabi_dmul+0x24a>
 80006e6:	ea94 0f0c 	teq	r4, ip
 80006ea:	d102      	bne.n	80006f2 <__aeabi_dmul+0x222>
 80006ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f0:	d113      	bne.n	800071a <__aeabi_dmul+0x24a>
 80006f2:	ea95 0f0c 	teq	r5, ip
 80006f6:	d105      	bne.n	8000704 <__aeabi_dmul+0x234>
 80006f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006fc:	bf1c      	itt	ne
 80006fe:	4610      	movne	r0, r2
 8000700:	4619      	movne	r1, r3
 8000702:	d10a      	bne.n	800071a <__aeabi_dmul+0x24a>
 8000704:	ea81 0103 	eor.w	r1, r1, r3
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000710:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000714:	f04f 0000 	mov.w	r0, #0
 8000718:	bd70      	pop	{r4, r5, r6, pc}
 800071a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800071e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000722:	bd70      	pop	{r4, r5, r6, pc}

08000724 <__aeabi_ddiv>:
 8000724:	b570      	push	{r4, r5, r6, lr}
 8000726:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800072a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800072e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000732:	bf1d      	ittte	ne
 8000734:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000738:	ea94 0f0c 	teqne	r4, ip
 800073c:	ea95 0f0c 	teqne	r5, ip
 8000740:	f000 f8a7 	bleq	8000892 <__aeabi_ddiv+0x16e>
 8000744:	eba4 0405 	sub.w	r4, r4, r5
 8000748:	ea81 0e03 	eor.w	lr, r1, r3
 800074c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000750:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000754:	f000 8088 	beq.w	8000868 <__aeabi_ddiv+0x144>
 8000758:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800075c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000760:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000764:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000768:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800076c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000770:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000774:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000778:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800077c:	429d      	cmp	r5, r3
 800077e:	bf08      	it	eq
 8000780:	4296      	cmpeq	r6, r2
 8000782:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000786:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800078a:	d202      	bcs.n	8000792 <__aeabi_ddiv+0x6e>
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	1ab6      	subs	r6, r6, r2
 8000794:	eb65 0503 	sbc.w	r5, r5, r3
 8000798:	085b      	lsrs	r3, r3, #1
 800079a:	ea4f 0232 	mov.w	r2, r2, rrx
 800079e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ae:	bf22      	ittt	cs
 80007b0:	1ab6      	subcs	r6, r6, r2
 80007b2:	4675      	movcs	r5, lr
 80007b4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b8:	085b      	lsrs	r3, r3, #1
 80007ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000800:	ea55 0e06 	orrs.w	lr, r5, r6
 8000804:	d018      	beq.n	8000838 <__aeabi_ddiv+0x114>
 8000806:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800080a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800080e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000812:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000816:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800081a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800081e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000822:	d1c0      	bne.n	80007a6 <__aeabi_ddiv+0x82>
 8000824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000828:	d10b      	bne.n	8000842 <__aeabi_ddiv+0x11e>
 800082a:	ea41 0100 	orr.w	r1, r1, r0
 800082e:	f04f 0000 	mov.w	r0, #0
 8000832:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000836:	e7b6      	b.n	80007a6 <__aeabi_ddiv+0x82>
 8000838:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800083c:	bf04      	itt	eq
 800083e:	4301      	orreq	r1, r0
 8000840:	2000      	moveq	r0, #0
 8000842:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000846:	bf88      	it	hi
 8000848:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800084c:	f63f aeaf 	bhi.w	80005ae <__aeabi_dmul+0xde>
 8000850:	ebb5 0c03 	subs.w	ip, r5, r3
 8000854:	bf04      	itt	eq
 8000856:	ebb6 0c02 	subseq.w	ip, r6, r2
 800085a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800085e:	f150 0000 	adcs.w	r0, r0, #0
 8000862:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000866:	bd70      	pop	{r4, r5, r6, pc}
 8000868:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800086c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000870:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000874:	bfc2      	ittt	gt
 8000876:	ebd4 050c 	rsbsgt	r5, r4, ip
 800087a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800087e:	bd70      	popgt	{r4, r5, r6, pc}
 8000880:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000884:	f04f 0e00 	mov.w	lr, #0
 8000888:	3c01      	subs	r4, #1
 800088a:	e690      	b.n	80005ae <__aeabi_dmul+0xde>
 800088c:	ea45 0e06 	orr.w	lr, r5, r6
 8000890:	e68d      	b.n	80005ae <__aeabi_dmul+0xde>
 8000892:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000896:	ea94 0f0c 	teq	r4, ip
 800089a:	bf08      	it	eq
 800089c:	ea95 0f0c 	teqeq	r5, ip
 80008a0:	f43f af3b 	beq.w	800071a <__aeabi_dmul+0x24a>
 80008a4:	ea94 0f0c 	teq	r4, ip
 80008a8:	d10a      	bne.n	80008c0 <__aeabi_ddiv+0x19c>
 80008aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ae:	f47f af34 	bne.w	800071a <__aeabi_dmul+0x24a>
 80008b2:	ea95 0f0c 	teq	r5, ip
 80008b6:	f47f af25 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ba:	4610      	mov	r0, r2
 80008bc:	4619      	mov	r1, r3
 80008be:	e72c      	b.n	800071a <__aeabi_dmul+0x24a>
 80008c0:	ea95 0f0c 	teq	r5, ip
 80008c4:	d106      	bne.n	80008d4 <__aeabi_ddiv+0x1b0>
 80008c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ca:	f43f aefd 	beq.w	80006c8 <__aeabi_dmul+0x1f8>
 80008ce:	4610      	mov	r0, r2
 80008d0:	4619      	mov	r1, r3
 80008d2:	e722      	b.n	800071a <__aeabi_dmul+0x24a>
 80008d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d8:	bf18      	it	ne
 80008da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008de:	f47f aec5 	bne.w	800066c <__aeabi_dmul+0x19c>
 80008e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008e6:	f47f af0d 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008ee:	f47f aeeb 	bne.w	80006c8 <__aeabi_dmul+0x1f8>
 80008f2:	e712      	b.n	800071a <__aeabi_dmul+0x24a>

080008f4 <__gedf2>:
 80008f4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80008f8:	e006      	b.n	8000908 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__ledf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	e002      	b.n	8000908 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__cmpdf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	f84d cd04 	str.w	ip, [sp, #-4]!
 800090c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000910:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000914:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000918:	bf18      	it	ne
 800091a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800091e:	d01b      	beq.n	8000958 <__cmpdf2+0x54>
 8000920:	b001      	add	sp, #4
 8000922:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000926:	bf0c      	ite	eq
 8000928:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800092c:	ea91 0f03 	teqne	r1, r3
 8000930:	bf02      	ittt	eq
 8000932:	ea90 0f02 	teqeq	r0, r2
 8000936:	2000      	moveq	r0, #0
 8000938:	4770      	bxeq	lr
 800093a:	f110 0f00 	cmn.w	r0, #0
 800093e:	ea91 0f03 	teq	r1, r3
 8000942:	bf58      	it	pl
 8000944:	4299      	cmppl	r1, r3
 8000946:	bf08      	it	eq
 8000948:	4290      	cmpeq	r0, r2
 800094a:	bf2c      	ite	cs
 800094c:	17d8      	asrcs	r0, r3, #31
 800094e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000952:	f040 0001 	orr.w	r0, r0, #1
 8000956:	4770      	bx	lr
 8000958:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	d102      	bne.n	8000968 <__cmpdf2+0x64>
 8000962:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000966:	d107      	bne.n	8000978 <__cmpdf2+0x74>
 8000968:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800096c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000970:	d1d6      	bne.n	8000920 <__cmpdf2+0x1c>
 8000972:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000976:	d0d3      	beq.n	8000920 <__cmpdf2+0x1c>
 8000978:	f85d 0b04 	ldr.w	r0, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop

08000980 <__aeabi_cdrcmple>:
 8000980:	4684      	mov	ip, r0
 8000982:	4610      	mov	r0, r2
 8000984:	4662      	mov	r2, ip
 8000986:	468c      	mov	ip, r1
 8000988:	4619      	mov	r1, r3
 800098a:	4663      	mov	r3, ip
 800098c:	e000      	b.n	8000990 <__aeabi_cdcmpeq>
 800098e:	bf00      	nop

08000990 <__aeabi_cdcmpeq>:
 8000990:	b501      	push	{r0, lr}
 8000992:	f7ff ffb7 	bl	8000904 <__cmpdf2>
 8000996:	2800      	cmp	r0, #0
 8000998:	bf48      	it	mi
 800099a:	f110 0f00 	cmnmi.w	r0, #0
 800099e:	bd01      	pop	{r0, pc}

080009a0 <__aeabi_dcmpeq>:
 80009a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a4:	f7ff fff4 	bl	8000990 <__aeabi_cdcmpeq>
 80009a8:	bf0c      	ite	eq
 80009aa:	2001      	moveq	r0, #1
 80009ac:	2000      	movne	r0, #0
 80009ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b2:	bf00      	nop

080009b4 <__aeabi_dcmplt>:
 80009b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b8:	f7ff ffea 	bl	8000990 <__aeabi_cdcmpeq>
 80009bc:	bf34      	ite	cc
 80009be:	2001      	movcc	r0, #1
 80009c0:	2000      	movcs	r0, #0
 80009c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009c6:	bf00      	nop

080009c8 <__aeabi_dcmple>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff ffe0 	bl	8000990 <__aeabi_cdcmpeq>
 80009d0:	bf94      	ite	ls
 80009d2:	2001      	movls	r0, #1
 80009d4:	2000      	movhi	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmpge>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffce 	bl	8000980 <__aeabi_cdrcmple>
 80009e4:	bf94      	ite	ls
 80009e6:	2001      	movls	r0, #1
 80009e8:	2000      	movhi	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmpgt>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffc4 	bl	8000980 <__aeabi_cdrcmple>
 80009f8:	bf34      	ite	cc
 80009fa:	2001      	movcc	r0, #1
 80009fc:	2000      	movcs	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpun>:
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	d102      	bne.n	8000a14 <__aeabi_dcmpun+0x10>
 8000a0e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a12:	d10a      	bne.n	8000a2a <__aeabi_dcmpun+0x26>
 8000a14:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a1c:	d102      	bne.n	8000a24 <__aeabi_dcmpun+0x20>
 8000a1e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a22:	d102      	bne.n	8000a2a <__aeabi_dcmpun+0x26>
 8000a24:	f04f 0000 	mov.w	r0, #0
 8000a28:	4770      	bx	lr
 8000a2a:	f04f 0001 	mov.w	r0, #1
 8000a2e:	4770      	bx	lr

08000a30 <__aeabi_d2iz>:
 8000a30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a34:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a38:	d215      	bcs.n	8000a66 <__aeabi_d2iz+0x36>
 8000a3a:	d511      	bpl.n	8000a60 <__aeabi_d2iz+0x30>
 8000a3c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a40:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a44:	d912      	bls.n	8000a6c <__aeabi_d2iz+0x3c>
 8000a46:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a52:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a56:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5a:	bf18      	it	ne
 8000a5c:	4240      	negne	r0, r0
 8000a5e:	4770      	bx	lr
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6a:	d105      	bne.n	8000a78 <__aeabi_d2iz+0x48>
 8000a6c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a70:	bf08      	it	eq
 8000a72:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a76:	4770      	bx	lr
 8000a78:	f04f 0000 	mov.w	r0, #0
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop

08000a80 <__aeabi_d2f>:
 8000a80:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a84:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a88:	bf24      	itt	cs
 8000a8a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a8e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a92:	d90d      	bls.n	8000ab0 <__aeabi_d2f+0x30>
 8000a94:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a98:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a9c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aa4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa8:	bf08      	it	eq
 8000aaa:	f020 0001 	biceq.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ab4:	d121      	bne.n	8000afa <__aeabi_d2f+0x7a>
 8000ab6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aba:	bfbc      	itt	lt
 8000abc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac0:	4770      	bxlt	lr
 8000ac2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ac6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aca:	f1c2 0218 	rsb	r2, r2, #24
 8000ace:	f1c2 0c20 	rsb	ip, r2, #32
 8000ad2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ad6:	fa20 f002 	lsr.w	r0, r0, r2
 8000ada:	bf18      	it	ne
 8000adc:	f040 0001 	orrne.w	r0, r0, #1
 8000ae0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000aec:	ea40 000c 	orr.w	r0, r0, ip
 8000af0:	fa23 f302 	lsr.w	r3, r3, r2
 8000af4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af8:	e7cc      	b.n	8000a94 <__aeabi_d2f+0x14>
 8000afa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000afe:	d107      	bne.n	8000b10 <__aeabi_d2f+0x90>
 8000b00:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b04:	bf1e      	ittt	ne
 8000b06:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b0a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b0e:	4770      	bxne	lr
 8000b10:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b14:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b18:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop

08000b20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b20:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b22:	4b0e      	ldr	r3, [pc, #56]	; (8000b5c <HAL_InitTick+0x3c>)
{
 8000b24:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b26:	7818      	ldrb	r0, [r3, #0]
 8000b28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b2c:	fbb3 f3f0 	udiv	r3, r3, r0
 8000b30:	4a0b      	ldr	r2, [pc, #44]	; (8000b60 <HAL_InitTick+0x40>)
 8000b32:	6810      	ldr	r0, [r2, #0]
 8000b34:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b38:	f000 f88c 	bl	8000c54 <HAL_SYSTICK_Config>
 8000b3c:	4604      	mov	r4, r0
 8000b3e:	b958      	cbnz	r0, 8000b58 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b40:	2d0f      	cmp	r5, #15
 8000b42:	d809      	bhi.n	8000b58 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b44:	4602      	mov	r2, r0
 8000b46:	4629      	mov	r1, r5
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b4c:	f000 f842 	bl	8000bd4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b50:	4b04      	ldr	r3, [pc, #16]	; (8000b64 <HAL_InitTick+0x44>)
 8000b52:	4620      	mov	r0, r4
 8000b54:	601d      	str	r5, [r3, #0]
 8000b56:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000b58:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000b5a:	bd38      	pop	{r3, r4, r5, pc}
 8000b5c:	20000000 	.word	0x20000000
 8000b60:	20000008 	.word	0x20000008
 8000b64:	20000004 	.word	0x20000004

08000b68 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b68:	4a07      	ldr	r2, [pc, #28]	; (8000b88 <HAL_Init+0x20>)
{
 8000b6a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b6c:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b6e:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b70:	f043 0310 	orr.w	r3, r3, #16
 8000b74:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b76:	f000 f81b 	bl	8000bb0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b7a:	2000      	movs	r0, #0
 8000b7c:	f7ff ffd0 	bl	8000b20 <HAL_InitTick>
  HAL_MspInit();
 8000b80:	f001 f970 	bl	8001e64 <HAL_MspInit>
}
 8000b84:	2000      	movs	r0, #0
 8000b86:	bd08      	pop	{r3, pc}
 8000b88:	40022000 	.word	0x40022000

08000b8c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000b8c:	4a03      	ldr	r2, [pc, #12]	; (8000b9c <HAL_IncTick+0x10>)
 8000b8e:	4b04      	ldr	r3, [pc, #16]	; (8000ba0 <HAL_IncTick+0x14>)
 8000b90:	6811      	ldr	r1, [r2, #0]
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	440b      	add	r3, r1
 8000b96:	6013      	str	r3, [r2, #0]
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	20000208 	.word	0x20000208
 8000ba0:	20000000 	.word	0x20000000

08000ba4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000ba4:	4b01      	ldr	r3, [pc, #4]	; (8000bac <HAL_GetTick+0x8>)
 8000ba6:	6818      	ldr	r0, [r3, #0]
}
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	20000208 	.word	0x20000208

08000bb0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bb0:	4a07      	ldr	r2, [pc, #28]	; (8000bd0 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000bb2:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bb4:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000bb6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bba:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000bbe:	041b      	lsls	r3, r3, #16
 8000bc0:	0c1b      	lsrs	r3, r3, #16
 8000bc2:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000bca:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000bcc:	60d3      	str	r3, [r2, #12]
 8000bce:	4770      	bx	lr
 8000bd0:	e000ed00 	.word	0xe000ed00

08000bd4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bd4:	4b17      	ldr	r3, [pc, #92]	; (8000c34 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bd6:	b530      	push	{r4, r5, lr}
 8000bd8:	68dc      	ldr	r4, [r3, #12]
 8000bda:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bde:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000be2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000be4:	2b04      	cmp	r3, #4
 8000be6:	bf28      	it	cs
 8000be8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bea:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bec:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bf0:	bf98      	it	ls
 8000bf2:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf4:	fa05 f303 	lsl.w	r3, r5, r3
 8000bf8:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bfc:	bf88      	it	hi
 8000bfe:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c00:	4019      	ands	r1, r3
 8000c02:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c04:	fa05 f404 	lsl.w	r4, r5, r4
 8000c08:	3c01      	subs	r4, #1
 8000c0a:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000c0c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c0e:	ea42 0201 	orr.w	r2, r2, r1
 8000c12:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c16:	bfaf      	iteee	ge
 8000c18:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c1c:	4b06      	ldrlt	r3, [pc, #24]	; (8000c38 <HAL_NVIC_SetPriority+0x64>)
 8000c1e:	f000 000f 	andlt.w	r0, r0, #15
 8000c22:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c24:	bfa5      	ittet	ge
 8000c26:	b2d2      	uxtbge	r2, r2
 8000c28:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2c:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2e:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000c32:	bd30      	pop	{r4, r5, pc}
 8000c34:	e000ed00 	.word	0xe000ed00
 8000c38:	e000ed14 	.word	0xe000ed14

08000c3c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	0942      	lsrs	r2, r0, #5
 8000c40:	f000 001f 	and.w	r0, r0, #31
 8000c44:	fa03 f000 	lsl.w	r0, r3, r0
 8000c48:	4b01      	ldr	r3, [pc, #4]	; (8000c50 <HAL_NVIC_EnableIRQ+0x14>)
 8000c4a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000c4e:	4770      	bx	lr
 8000c50:	e000e100 	.word	0xe000e100

08000c54 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c54:	3801      	subs	r0, #1
 8000c56:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c5a:	d20a      	bcs.n	8000c72 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c5c:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c5e:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c60:	4a06      	ldr	r2, [pc, #24]	; (8000c7c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c62:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c64:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c68:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c6a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c6c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000c72:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	e000e010 	.word	0xe000e010
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8000c84:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000c86:	4616      	mov	r6, r2
 8000c88:	4b65      	ldr	r3, [pc, #404]	; (8000e20 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c8a:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8000e30 <HAL_GPIO_Init+0x1b0>
 8000c8e:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8000e34 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 8000c92:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c96:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8000c98:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c9c:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8000ca0:	45a0      	cmp	r8, r4
 8000ca2:	d17f      	bne.n	8000da4 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8000ca4:	684d      	ldr	r5, [r1, #4]
 8000ca6:	2d12      	cmp	r5, #18
 8000ca8:	f000 80af 	beq.w	8000e0a <HAL_GPIO_Init+0x18a>
 8000cac:	f200 8088 	bhi.w	8000dc0 <HAL_GPIO_Init+0x140>
 8000cb0:	2d02      	cmp	r5, #2
 8000cb2:	f000 80a7 	beq.w	8000e04 <HAL_GPIO_Init+0x184>
 8000cb6:	d87c      	bhi.n	8000db2 <HAL_GPIO_Init+0x132>
 8000cb8:	2d00      	cmp	r5, #0
 8000cba:	f000 808e 	beq.w	8000dda <HAL_GPIO_Init+0x15a>
 8000cbe:	2d01      	cmp	r5, #1
 8000cc0:	f000 809e 	beq.w	8000e00 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000cc4:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000cc8:	2cff      	cmp	r4, #255	; 0xff
 8000cca:	bf93      	iteet	ls
 8000ccc:	4682      	movls	sl, r0
 8000cce:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000cd2:	3d08      	subhi	r5, #8
 8000cd4:	f8d0 b000 	ldrls.w	fp, [r0]
 8000cd8:	bf92      	itee	ls
 8000cda:	00b5      	lslls	r5, r6, #2
 8000cdc:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000ce0:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ce2:	fa09 f805 	lsl.w	r8, r9, r5
 8000ce6:	ea2b 0808 	bic.w	r8, fp, r8
 8000cea:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000cee:	bf88      	it	hi
 8000cf0:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000cf4:	ea48 0505 	orr.w	r5, r8, r5
 8000cf8:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cfc:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000d00:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000d04:	d04e      	beq.n	8000da4 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d06:	4d47      	ldr	r5, [pc, #284]	; (8000e24 <HAL_GPIO_Init+0x1a4>)
 8000d08:	4f46      	ldr	r7, [pc, #280]	; (8000e24 <HAL_GPIO_Init+0x1a4>)
 8000d0a:	69ad      	ldr	r5, [r5, #24]
 8000d0c:	f026 0803 	bic.w	r8, r6, #3
 8000d10:	f045 0501 	orr.w	r5, r5, #1
 8000d14:	61bd      	str	r5, [r7, #24]
 8000d16:	69bd      	ldr	r5, [r7, #24]
 8000d18:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000d1c:	f005 0501 	and.w	r5, r5, #1
 8000d20:	9501      	str	r5, [sp, #4]
 8000d22:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000d26:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d2a:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000d2c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8000d30:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000d34:	fa09 f90b 	lsl.w	r9, r9, fp
 8000d38:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d3c:	4d3a      	ldr	r5, [pc, #232]	; (8000e28 <HAL_GPIO_Init+0x1a8>)
 8000d3e:	42a8      	cmp	r0, r5
 8000d40:	d068      	beq.n	8000e14 <HAL_GPIO_Init+0x194>
 8000d42:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d46:	42a8      	cmp	r0, r5
 8000d48:	d066      	beq.n	8000e18 <HAL_GPIO_Init+0x198>
 8000d4a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d4e:	42a8      	cmp	r0, r5
 8000d50:	d064      	beq.n	8000e1c <HAL_GPIO_Init+0x19c>
 8000d52:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d56:	42a8      	cmp	r0, r5
 8000d58:	bf0c      	ite	eq
 8000d5a:	2503      	moveq	r5, #3
 8000d5c:	2504      	movne	r5, #4
 8000d5e:	fa05 f50b 	lsl.w	r5, r5, fp
 8000d62:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 8000d66:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d6a:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d6c:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000d70:	bf14      	ite	ne
 8000d72:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d74:	43a5      	biceq	r5, r4
 8000d76:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d78:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d7a:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000d7e:	bf14      	ite	ne
 8000d80:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d82:	43a5      	biceq	r5, r4
 8000d84:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d86:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d88:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d8c:	bf14      	ite	ne
 8000d8e:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d90:	43a5      	biceq	r5, r4
 8000d92:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d94:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d96:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d9a:	bf14      	ite	ne
 8000d9c:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d9e:	ea25 0404 	biceq.w	r4, r5, r4
 8000da2:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000da4:	3601      	adds	r6, #1
 8000da6:	2e10      	cmp	r6, #16
 8000da8:	f47f af73 	bne.w	8000c92 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8000dac:	b003      	add	sp, #12
 8000dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8000db2:	2d03      	cmp	r5, #3
 8000db4:	d022      	beq.n	8000dfc <HAL_GPIO_Init+0x17c>
 8000db6:	2d11      	cmp	r5, #17
 8000db8:	d184      	bne.n	8000cc4 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000dba:	68ca      	ldr	r2, [r1, #12]
 8000dbc:	3204      	adds	r2, #4
          break;
 8000dbe:	e781      	b.n	8000cc4 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000dc0:	4f1a      	ldr	r7, [pc, #104]	; (8000e2c <HAL_GPIO_Init+0x1ac>)
 8000dc2:	42bd      	cmp	r5, r7
 8000dc4:	d009      	beq.n	8000dda <HAL_GPIO_Init+0x15a>
 8000dc6:	d812      	bhi.n	8000dee <HAL_GPIO_Init+0x16e>
 8000dc8:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8000e38 <HAL_GPIO_Init+0x1b8>
 8000dcc:	454d      	cmp	r5, r9
 8000dce:	d004      	beq.n	8000dda <HAL_GPIO_Init+0x15a>
 8000dd0:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000dd4:	454d      	cmp	r5, r9
 8000dd6:	f47f af75 	bne.w	8000cc4 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000dda:	688a      	ldr	r2, [r1, #8]
 8000ddc:	b1c2      	cbz	r2, 8000e10 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000dde:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000de0:	bf0c      	ite	eq
 8000de2:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000de6:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000dea:	2208      	movs	r2, #8
 8000dec:	e76a      	b.n	8000cc4 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000dee:	4575      	cmp	r5, lr
 8000df0:	d0f3      	beq.n	8000dda <HAL_GPIO_Init+0x15a>
 8000df2:	4565      	cmp	r5, ip
 8000df4:	d0f1      	beq.n	8000dda <HAL_GPIO_Init+0x15a>
 8000df6:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000e3c <HAL_GPIO_Init+0x1bc>
 8000dfa:	e7eb      	b.n	8000dd4 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	e761      	b.n	8000cc4 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e00:	68ca      	ldr	r2, [r1, #12]
          break;
 8000e02:	e75f      	b.n	8000cc4 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e04:	68ca      	ldr	r2, [r1, #12]
 8000e06:	3208      	adds	r2, #8
          break;
 8000e08:	e75c      	b.n	8000cc4 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e0a:	68ca      	ldr	r2, [r1, #12]
 8000e0c:	320c      	adds	r2, #12
          break;
 8000e0e:	e759      	b.n	8000cc4 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e10:	2204      	movs	r2, #4
 8000e12:	e757      	b.n	8000cc4 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e14:	2500      	movs	r5, #0
 8000e16:	e7a2      	b.n	8000d5e <HAL_GPIO_Init+0xde>
 8000e18:	2501      	movs	r5, #1
 8000e1a:	e7a0      	b.n	8000d5e <HAL_GPIO_Init+0xde>
 8000e1c:	2502      	movs	r5, #2
 8000e1e:	e79e      	b.n	8000d5e <HAL_GPIO_Init+0xde>
 8000e20:	40010400 	.word	0x40010400
 8000e24:	40021000 	.word	0x40021000
 8000e28:	40010800 	.word	0x40010800
 8000e2c:	10210000 	.word	0x10210000
 8000e30:	10310000 	.word	0x10310000
 8000e34:	10320000 	.word	0x10320000
 8000e38:	10110000 	.word	0x10110000
 8000e3c:	10220000 	.word	0x10220000

08000e40 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e40:	6803      	ldr	r3, [r0, #0]
{
 8000e42:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e46:	07db      	lsls	r3, r3, #31
{
 8000e48:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e4a:	d410      	bmi.n	8000e6e <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e4c:	682b      	ldr	r3, [r5, #0]
 8000e4e:	079f      	lsls	r7, r3, #30
 8000e50:	d45e      	bmi.n	8000f10 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e52:	682b      	ldr	r3, [r5, #0]
 8000e54:	0719      	lsls	r1, r3, #28
 8000e56:	f100 8095 	bmi.w	8000f84 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e5a:	682b      	ldr	r3, [r5, #0]
 8000e5c:	075a      	lsls	r2, r3, #29
 8000e5e:	f100 80bf 	bmi.w	8000fe0 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e62:	69ea      	ldr	r2, [r5, #28]
 8000e64:	2a00      	cmp	r2, #0
 8000e66:	f040 812d 	bne.w	80010c4 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000e6a:	2000      	movs	r0, #0
 8000e6c:	e014      	b.n	8000e98 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000e6e:	4c90      	ldr	r4, [pc, #576]	; (80010b0 <HAL_RCC_OscConfig+0x270>)
 8000e70:	6863      	ldr	r3, [r4, #4]
 8000e72:	f003 030c 	and.w	r3, r3, #12
 8000e76:	2b04      	cmp	r3, #4
 8000e78:	d007      	beq.n	8000e8a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e7a:	6863      	ldr	r3, [r4, #4]
 8000e7c:	f003 030c 	and.w	r3, r3, #12
 8000e80:	2b08      	cmp	r3, #8
 8000e82:	d10c      	bne.n	8000e9e <HAL_RCC_OscConfig+0x5e>
 8000e84:	6863      	ldr	r3, [r4, #4]
 8000e86:	03de      	lsls	r6, r3, #15
 8000e88:	d509      	bpl.n	8000e9e <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e8a:	6823      	ldr	r3, [r4, #0]
 8000e8c:	039c      	lsls	r4, r3, #14
 8000e8e:	d5dd      	bpl.n	8000e4c <HAL_RCC_OscConfig+0xc>
 8000e90:	686b      	ldr	r3, [r5, #4]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d1da      	bne.n	8000e4c <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000e96:	2001      	movs	r0, #1
}
 8000e98:	b002      	add	sp, #8
 8000e9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e9e:	686b      	ldr	r3, [r5, #4]
 8000ea0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ea4:	d110      	bne.n	8000ec8 <HAL_RCC_OscConfig+0x88>
 8000ea6:	6823      	ldr	r3, [r4, #0]
 8000ea8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eac:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000eae:	f7ff fe79 	bl	8000ba4 <HAL_GetTick>
 8000eb2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eb4:	6823      	ldr	r3, [r4, #0]
 8000eb6:	0398      	lsls	r0, r3, #14
 8000eb8:	d4c8      	bmi.n	8000e4c <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000eba:	f7ff fe73 	bl	8000ba4 <HAL_GetTick>
 8000ebe:	1b80      	subs	r0, r0, r6
 8000ec0:	2864      	cmp	r0, #100	; 0x64
 8000ec2:	d9f7      	bls.n	8000eb4 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000ec4:	2003      	movs	r0, #3
 8000ec6:	e7e7      	b.n	8000e98 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ec8:	b99b      	cbnz	r3, 8000ef2 <HAL_RCC_OscConfig+0xb2>
 8000eca:	6823      	ldr	r3, [r4, #0]
 8000ecc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ed0:	6023      	str	r3, [r4, #0]
 8000ed2:	6823      	ldr	r3, [r4, #0]
 8000ed4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ed8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000eda:	f7ff fe63 	bl	8000ba4 <HAL_GetTick>
 8000ede:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ee0:	6823      	ldr	r3, [r4, #0]
 8000ee2:	0399      	lsls	r1, r3, #14
 8000ee4:	d5b2      	bpl.n	8000e4c <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ee6:	f7ff fe5d 	bl	8000ba4 <HAL_GetTick>
 8000eea:	1b80      	subs	r0, r0, r6
 8000eec:	2864      	cmp	r0, #100	; 0x64
 8000eee:	d9f7      	bls.n	8000ee0 <HAL_RCC_OscConfig+0xa0>
 8000ef0:	e7e8      	b.n	8000ec4 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ef2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ef6:	6823      	ldr	r3, [r4, #0]
 8000ef8:	d103      	bne.n	8000f02 <HAL_RCC_OscConfig+0xc2>
 8000efa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000efe:	6023      	str	r3, [r4, #0]
 8000f00:	e7d1      	b.n	8000ea6 <HAL_RCC_OscConfig+0x66>
 8000f02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f06:	6023      	str	r3, [r4, #0]
 8000f08:	6823      	ldr	r3, [r4, #0]
 8000f0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f0e:	e7cd      	b.n	8000eac <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000f10:	4c67      	ldr	r4, [pc, #412]	; (80010b0 <HAL_RCC_OscConfig+0x270>)
 8000f12:	6863      	ldr	r3, [r4, #4]
 8000f14:	f013 0f0c 	tst.w	r3, #12
 8000f18:	d007      	beq.n	8000f2a <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f1a:	6863      	ldr	r3, [r4, #4]
 8000f1c:	f003 030c 	and.w	r3, r3, #12
 8000f20:	2b08      	cmp	r3, #8
 8000f22:	d110      	bne.n	8000f46 <HAL_RCC_OscConfig+0x106>
 8000f24:	6863      	ldr	r3, [r4, #4]
 8000f26:	03da      	lsls	r2, r3, #15
 8000f28:	d40d      	bmi.n	8000f46 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f2a:	6823      	ldr	r3, [r4, #0]
 8000f2c:	079b      	lsls	r3, r3, #30
 8000f2e:	d502      	bpl.n	8000f36 <HAL_RCC_OscConfig+0xf6>
 8000f30:	692b      	ldr	r3, [r5, #16]
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d1af      	bne.n	8000e96 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f36:	6823      	ldr	r3, [r4, #0]
 8000f38:	696a      	ldr	r2, [r5, #20]
 8000f3a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000f3e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000f42:	6023      	str	r3, [r4, #0]
 8000f44:	e785      	b.n	8000e52 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f46:	692a      	ldr	r2, [r5, #16]
 8000f48:	4b5a      	ldr	r3, [pc, #360]	; (80010b4 <HAL_RCC_OscConfig+0x274>)
 8000f4a:	b16a      	cbz	r2, 8000f68 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000f50:	f7ff fe28 	bl	8000ba4 <HAL_GetTick>
 8000f54:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f56:	6823      	ldr	r3, [r4, #0]
 8000f58:	079f      	lsls	r7, r3, #30
 8000f5a:	d4ec      	bmi.n	8000f36 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f5c:	f7ff fe22 	bl	8000ba4 <HAL_GetTick>
 8000f60:	1b80      	subs	r0, r0, r6
 8000f62:	2802      	cmp	r0, #2
 8000f64:	d9f7      	bls.n	8000f56 <HAL_RCC_OscConfig+0x116>
 8000f66:	e7ad      	b.n	8000ec4 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000f68:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000f6a:	f7ff fe1b 	bl	8000ba4 <HAL_GetTick>
 8000f6e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f70:	6823      	ldr	r3, [r4, #0]
 8000f72:	0798      	lsls	r0, r3, #30
 8000f74:	f57f af6d 	bpl.w	8000e52 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f78:	f7ff fe14 	bl	8000ba4 <HAL_GetTick>
 8000f7c:	1b80      	subs	r0, r0, r6
 8000f7e:	2802      	cmp	r0, #2
 8000f80:	d9f6      	bls.n	8000f70 <HAL_RCC_OscConfig+0x130>
 8000f82:	e79f      	b.n	8000ec4 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f84:	69aa      	ldr	r2, [r5, #24]
 8000f86:	4c4a      	ldr	r4, [pc, #296]	; (80010b0 <HAL_RCC_OscConfig+0x270>)
 8000f88:	4b4b      	ldr	r3, [pc, #300]	; (80010b8 <HAL_RCC_OscConfig+0x278>)
 8000f8a:	b1da      	cbz	r2, 8000fc4 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000f90:	f7ff fe08 	bl	8000ba4 <HAL_GetTick>
 8000f94:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000f98:	079b      	lsls	r3, r3, #30
 8000f9a:	d50d      	bpl.n	8000fb8 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000f9c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000fa0:	4b46      	ldr	r3, [pc, #280]	; (80010bc <HAL_RCC_OscConfig+0x27c>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	fbb3 f3f2 	udiv	r3, r3, r2
 8000fa8:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000faa:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000fac:	9b01      	ldr	r3, [sp, #4]
 8000fae:	1e5a      	subs	r2, r3, #1
 8000fb0:	9201      	str	r2, [sp, #4]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d1f9      	bne.n	8000faa <HAL_RCC_OscConfig+0x16a>
 8000fb6:	e750      	b.n	8000e5a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000fb8:	f7ff fdf4 	bl	8000ba4 <HAL_GetTick>
 8000fbc:	1b80      	subs	r0, r0, r6
 8000fbe:	2802      	cmp	r0, #2
 8000fc0:	d9e9      	bls.n	8000f96 <HAL_RCC_OscConfig+0x156>
 8000fc2:	e77f      	b.n	8000ec4 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000fc4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000fc6:	f7ff fded 	bl	8000ba4 <HAL_GetTick>
 8000fca:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fcc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000fce:	079f      	lsls	r7, r3, #30
 8000fd0:	f57f af43 	bpl.w	8000e5a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000fd4:	f7ff fde6 	bl	8000ba4 <HAL_GetTick>
 8000fd8:	1b80      	subs	r0, r0, r6
 8000fda:	2802      	cmp	r0, #2
 8000fdc:	d9f6      	bls.n	8000fcc <HAL_RCC_OscConfig+0x18c>
 8000fde:	e771      	b.n	8000ec4 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fe0:	4c33      	ldr	r4, [pc, #204]	; (80010b0 <HAL_RCC_OscConfig+0x270>)
 8000fe2:	69e3      	ldr	r3, [r4, #28]
 8000fe4:	00d8      	lsls	r0, r3, #3
 8000fe6:	d424      	bmi.n	8001032 <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8000fe8:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fea:	69e3      	ldr	r3, [r4, #28]
 8000fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ff0:	61e3      	str	r3, [r4, #28]
 8000ff2:	69e3      	ldr	r3, [r4, #28]
 8000ff4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff8:	9300      	str	r3, [sp, #0]
 8000ffa:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ffc:	4e30      	ldr	r6, [pc, #192]	; (80010c0 <HAL_RCC_OscConfig+0x280>)
 8000ffe:	6833      	ldr	r3, [r6, #0]
 8001000:	05d9      	lsls	r1, r3, #23
 8001002:	d518      	bpl.n	8001036 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001004:	68eb      	ldr	r3, [r5, #12]
 8001006:	2b01      	cmp	r3, #1
 8001008:	d126      	bne.n	8001058 <HAL_RCC_OscConfig+0x218>
 800100a:	6a23      	ldr	r3, [r4, #32]
 800100c:	f043 0301 	orr.w	r3, r3, #1
 8001010:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001012:	f7ff fdc7 	bl	8000ba4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001016:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800101a:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800101c:	6a23      	ldr	r3, [r4, #32]
 800101e:	079b      	lsls	r3, r3, #30
 8001020:	d53f      	bpl.n	80010a2 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8001022:	2f00      	cmp	r7, #0
 8001024:	f43f af1d 	beq.w	8000e62 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001028:	69e3      	ldr	r3, [r4, #28]
 800102a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800102e:	61e3      	str	r3, [r4, #28]
 8001030:	e717      	b.n	8000e62 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8001032:	2700      	movs	r7, #0
 8001034:	e7e2      	b.n	8000ffc <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001036:	6833      	ldr	r3, [r6, #0]
 8001038:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800103c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800103e:	f7ff fdb1 	bl	8000ba4 <HAL_GetTick>
 8001042:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001044:	6833      	ldr	r3, [r6, #0]
 8001046:	05da      	lsls	r2, r3, #23
 8001048:	d4dc      	bmi.n	8001004 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800104a:	f7ff fdab 	bl	8000ba4 <HAL_GetTick>
 800104e:	eba0 0008 	sub.w	r0, r0, r8
 8001052:	2864      	cmp	r0, #100	; 0x64
 8001054:	d9f6      	bls.n	8001044 <HAL_RCC_OscConfig+0x204>
 8001056:	e735      	b.n	8000ec4 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001058:	b9ab      	cbnz	r3, 8001086 <HAL_RCC_OscConfig+0x246>
 800105a:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800105c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001060:	f023 0301 	bic.w	r3, r3, #1
 8001064:	6223      	str	r3, [r4, #32]
 8001066:	6a23      	ldr	r3, [r4, #32]
 8001068:	f023 0304 	bic.w	r3, r3, #4
 800106c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800106e:	f7ff fd99 	bl	8000ba4 <HAL_GetTick>
 8001072:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001074:	6a23      	ldr	r3, [r4, #32]
 8001076:	0798      	lsls	r0, r3, #30
 8001078:	d5d3      	bpl.n	8001022 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800107a:	f7ff fd93 	bl	8000ba4 <HAL_GetTick>
 800107e:	1b80      	subs	r0, r0, r6
 8001080:	4540      	cmp	r0, r8
 8001082:	d9f7      	bls.n	8001074 <HAL_RCC_OscConfig+0x234>
 8001084:	e71e      	b.n	8000ec4 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001086:	2b05      	cmp	r3, #5
 8001088:	6a23      	ldr	r3, [r4, #32]
 800108a:	d103      	bne.n	8001094 <HAL_RCC_OscConfig+0x254>
 800108c:	f043 0304 	orr.w	r3, r3, #4
 8001090:	6223      	str	r3, [r4, #32]
 8001092:	e7ba      	b.n	800100a <HAL_RCC_OscConfig+0x1ca>
 8001094:	f023 0301 	bic.w	r3, r3, #1
 8001098:	6223      	str	r3, [r4, #32]
 800109a:	6a23      	ldr	r3, [r4, #32]
 800109c:	f023 0304 	bic.w	r3, r3, #4
 80010a0:	e7b6      	b.n	8001010 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010a2:	f7ff fd7f 	bl	8000ba4 <HAL_GetTick>
 80010a6:	eba0 0008 	sub.w	r0, r0, r8
 80010aa:	42b0      	cmp	r0, r6
 80010ac:	d9b6      	bls.n	800101c <HAL_RCC_OscConfig+0x1dc>
 80010ae:	e709      	b.n	8000ec4 <HAL_RCC_OscConfig+0x84>
 80010b0:	40021000 	.word	0x40021000
 80010b4:	42420000 	.word	0x42420000
 80010b8:	42420480 	.word	0x42420480
 80010bc:	20000008 	.word	0x20000008
 80010c0:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010c4:	4c22      	ldr	r4, [pc, #136]	; (8001150 <HAL_RCC_OscConfig+0x310>)
 80010c6:	6863      	ldr	r3, [r4, #4]
 80010c8:	f003 030c 	and.w	r3, r3, #12
 80010cc:	2b08      	cmp	r3, #8
 80010ce:	f43f aee2 	beq.w	8000e96 <HAL_RCC_OscConfig+0x56>
 80010d2:	2300      	movs	r3, #0
 80010d4:	4e1f      	ldr	r6, [pc, #124]	; (8001154 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010d6:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80010d8:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010da:	d12b      	bne.n	8001134 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 80010dc:	f7ff fd62 	bl	8000ba4 <HAL_GetTick>
 80010e0:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010e2:	6823      	ldr	r3, [r4, #0]
 80010e4:	0199      	lsls	r1, r3, #6
 80010e6:	d41f      	bmi.n	8001128 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80010e8:	6a2b      	ldr	r3, [r5, #32]
 80010ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010ee:	d105      	bne.n	80010fc <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80010f0:	6862      	ldr	r2, [r4, #4]
 80010f2:	68a9      	ldr	r1, [r5, #8]
 80010f4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80010f8:	430a      	orrs	r2, r1
 80010fa:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010fc:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80010fe:	6862      	ldr	r2, [r4, #4]
 8001100:	430b      	orrs	r3, r1
 8001102:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001106:	4313      	orrs	r3, r2
 8001108:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800110a:	2301      	movs	r3, #1
 800110c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800110e:	f7ff fd49 	bl	8000ba4 <HAL_GetTick>
 8001112:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001114:	6823      	ldr	r3, [r4, #0]
 8001116:	019a      	lsls	r2, r3, #6
 8001118:	f53f aea7 	bmi.w	8000e6a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800111c:	f7ff fd42 	bl	8000ba4 <HAL_GetTick>
 8001120:	1b40      	subs	r0, r0, r5
 8001122:	2802      	cmp	r0, #2
 8001124:	d9f6      	bls.n	8001114 <HAL_RCC_OscConfig+0x2d4>
 8001126:	e6cd      	b.n	8000ec4 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001128:	f7ff fd3c 	bl	8000ba4 <HAL_GetTick>
 800112c:	1bc0      	subs	r0, r0, r7
 800112e:	2802      	cmp	r0, #2
 8001130:	d9d7      	bls.n	80010e2 <HAL_RCC_OscConfig+0x2a2>
 8001132:	e6c7      	b.n	8000ec4 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8001134:	f7ff fd36 	bl	8000ba4 <HAL_GetTick>
 8001138:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800113a:	6823      	ldr	r3, [r4, #0]
 800113c:	019b      	lsls	r3, r3, #6
 800113e:	f57f ae94 	bpl.w	8000e6a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001142:	f7ff fd2f 	bl	8000ba4 <HAL_GetTick>
 8001146:	1b40      	subs	r0, r0, r5
 8001148:	2802      	cmp	r0, #2
 800114a:	d9f6      	bls.n	800113a <HAL_RCC_OscConfig+0x2fa>
 800114c:	e6ba      	b.n	8000ec4 <HAL_RCC_OscConfig+0x84>
 800114e:	bf00      	nop
 8001150:	40021000 	.word	0x40021000
 8001154:	42420060 	.word	0x42420060

08001158 <HAL_RCC_GetSysClockFreq>:
{
 8001158:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800115a:	4b19      	ldr	r3, [pc, #100]	; (80011c0 <HAL_RCC_GetSysClockFreq+0x68>)
{
 800115c:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800115e:	ac02      	add	r4, sp, #8
 8001160:	f103 0510 	add.w	r5, r3, #16
 8001164:	4622      	mov	r2, r4
 8001166:	6818      	ldr	r0, [r3, #0]
 8001168:	6859      	ldr	r1, [r3, #4]
 800116a:	3308      	adds	r3, #8
 800116c:	c203      	stmia	r2!, {r0, r1}
 800116e:	42ab      	cmp	r3, r5
 8001170:	4614      	mov	r4, r2
 8001172:	d1f7      	bne.n	8001164 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001174:	2301      	movs	r3, #1
 8001176:	f88d 3004 	strb.w	r3, [sp, #4]
 800117a:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 800117c:	4911      	ldr	r1, [pc, #68]	; (80011c4 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800117e:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8001182:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001184:	f003 020c 	and.w	r2, r3, #12
 8001188:	2a08      	cmp	r2, #8
 800118a:	d117      	bne.n	80011bc <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800118c:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001190:	a806      	add	r0, sp, #24
 8001192:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001194:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001196:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800119a:	d50c      	bpl.n	80011b6 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800119c:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800119e:	480a      	ldr	r0, [pc, #40]	; (80011c8 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80011a0:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80011a4:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80011a6:	aa06      	add	r2, sp, #24
 80011a8:	4413      	add	r3, r2
 80011aa:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80011ae:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80011b2:	b007      	add	sp, #28
 80011b4:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80011b6:	4805      	ldr	r0, [pc, #20]	; (80011cc <HAL_RCC_GetSysClockFreq+0x74>)
 80011b8:	4350      	muls	r0, r2
 80011ba:	e7fa      	b.n	80011b2 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 80011bc:	4802      	ldr	r0, [pc, #8]	; (80011c8 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 80011be:	e7f8      	b.n	80011b2 <HAL_RCC_GetSysClockFreq+0x5a>
 80011c0:	08004210 	.word	0x08004210
 80011c4:	40021000 	.word	0x40021000
 80011c8:	007a1200 	.word	0x007a1200
 80011cc:	003d0900 	.word	0x003d0900

080011d0 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80011d0:	4a54      	ldr	r2, [pc, #336]	; (8001324 <HAL_RCC_ClockConfig+0x154>)
{
 80011d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80011d6:	6813      	ldr	r3, [r2, #0]
{
 80011d8:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80011da:	f003 0307 	and.w	r3, r3, #7
 80011de:	428b      	cmp	r3, r1
{
 80011e0:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80011e2:	d32a      	bcc.n	800123a <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011e4:	6829      	ldr	r1, [r5, #0]
 80011e6:	078c      	lsls	r4, r1, #30
 80011e8:	d434      	bmi.n	8001254 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011ea:	07ca      	lsls	r2, r1, #31
 80011ec:	d447      	bmi.n	800127e <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80011ee:	4a4d      	ldr	r2, [pc, #308]	; (8001324 <HAL_RCC_ClockConfig+0x154>)
 80011f0:	6813      	ldr	r3, [r2, #0]
 80011f2:	f003 0307 	and.w	r3, r3, #7
 80011f6:	429e      	cmp	r6, r3
 80011f8:	f0c0 8082 	bcc.w	8001300 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011fc:	682a      	ldr	r2, [r5, #0]
 80011fe:	4c4a      	ldr	r4, [pc, #296]	; (8001328 <HAL_RCC_ClockConfig+0x158>)
 8001200:	f012 0f04 	tst.w	r2, #4
 8001204:	f040 8087 	bne.w	8001316 <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001208:	0713      	lsls	r3, r2, #28
 800120a:	d506      	bpl.n	800121a <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800120c:	6863      	ldr	r3, [r4, #4]
 800120e:	692a      	ldr	r2, [r5, #16]
 8001210:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001214:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001218:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800121a:	f7ff ff9d 	bl	8001158 <HAL_RCC_GetSysClockFreq>
 800121e:	6863      	ldr	r3, [r4, #4]
 8001220:	4a42      	ldr	r2, [pc, #264]	; (800132c <HAL_RCC_ClockConfig+0x15c>)
 8001222:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001226:	5cd3      	ldrb	r3, [r2, r3]
 8001228:	40d8      	lsrs	r0, r3
 800122a:	4b41      	ldr	r3, [pc, #260]	; (8001330 <HAL_RCC_ClockConfig+0x160>)
 800122c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800122e:	2000      	movs	r0, #0
 8001230:	f7ff fc76 	bl	8000b20 <HAL_InitTick>
  return HAL_OK;
 8001234:	2000      	movs	r0, #0
}
 8001236:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800123a:	6813      	ldr	r3, [r2, #0]
 800123c:	f023 0307 	bic.w	r3, r3, #7
 8001240:	430b      	orrs	r3, r1
 8001242:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001244:	6813      	ldr	r3, [r2, #0]
 8001246:	f003 0307 	and.w	r3, r3, #7
 800124a:	4299      	cmp	r1, r3
 800124c:	d0ca      	beq.n	80011e4 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 800124e:	2001      	movs	r0, #1
 8001250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001254:	4b34      	ldr	r3, [pc, #208]	; (8001328 <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001256:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800125a:	bf1e      	ittt	ne
 800125c:	685a      	ldrne	r2, [r3, #4]
 800125e:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8001262:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001264:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001266:	bf42      	ittt	mi
 8001268:	685a      	ldrmi	r2, [r3, #4]
 800126a:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 800126e:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001270:	685a      	ldr	r2, [r3, #4]
 8001272:	68a8      	ldr	r0, [r5, #8]
 8001274:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001278:	4302      	orrs	r2, r0
 800127a:	605a      	str	r2, [r3, #4]
 800127c:	e7b5      	b.n	80011ea <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800127e:	686a      	ldr	r2, [r5, #4]
 8001280:	4c29      	ldr	r4, [pc, #164]	; (8001328 <HAL_RCC_ClockConfig+0x158>)
 8001282:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001284:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001286:	d11c      	bne.n	80012c2 <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001288:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800128c:	d0df      	beq.n	800124e <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800128e:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001290:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001294:	f023 0303 	bic.w	r3, r3, #3
 8001298:	4313      	orrs	r3, r2
 800129a:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 800129c:	f7ff fc82 	bl	8000ba4 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012a0:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 80012a2:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d114      	bne.n	80012d2 <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80012a8:	6863      	ldr	r3, [r4, #4]
 80012aa:	f003 030c 	and.w	r3, r3, #12
 80012ae:	2b04      	cmp	r3, #4
 80012b0:	d09d      	beq.n	80011ee <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012b2:	f7ff fc77 	bl	8000ba4 <HAL_GetTick>
 80012b6:	1bc0      	subs	r0, r0, r7
 80012b8:	4540      	cmp	r0, r8
 80012ba:	d9f5      	bls.n	80012a8 <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 80012bc:	2003      	movs	r0, #3
 80012be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012c2:	2a02      	cmp	r2, #2
 80012c4:	d102      	bne.n	80012cc <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012c6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80012ca:	e7df      	b.n	800128c <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012cc:	f013 0f02 	tst.w	r3, #2
 80012d0:	e7dc      	b.n	800128c <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d10f      	bne.n	80012f6 <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012d6:	6863      	ldr	r3, [r4, #4]
 80012d8:	f003 030c 	and.w	r3, r3, #12
 80012dc:	2b08      	cmp	r3, #8
 80012de:	d086      	beq.n	80011ee <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012e0:	f7ff fc60 	bl	8000ba4 <HAL_GetTick>
 80012e4:	1bc0      	subs	r0, r0, r7
 80012e6:	4540      	cmp	r0, r8
 80012e8:	d9f5      	bls.n	80012d6 <HAL_RCC_ClockConfig+0x106>
 80012ea:	e7e7      	b.n	80012bc <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012ec:	f7ff fc5a 	bl	8000ba4 <HAL_GetTick>
 80012f0:	1bc0      	subs	r0, r0, r7
 80012f2:	4540      	cmp	r0, r8
 80012f4:	d8e2      	bhi.n	80012bc <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80012f6:	6863      	ldr	r3, [r4, #4]
 80012f8:	f013 0f0c 	tst.w	r3, #12
 80012fc:	d1f6      	bne.n	80012ec <HAL_RCC_ClockConfig+0x11c>
 80012fe:	e776      	b.n	80011ee <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001300:	6813      	ldr	r3, [r2, #0]
 8001302:	f023 0307 	bic.w	r3, r3, #7
 8001306:	4333      	orrs	r3, r6
 8001308:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800130a:	6813      	ldr	r3, [r2, #0]
 800130c:	f003 0307 	and.w	r3, r3, #7
 8001310:	429e      	cmp	r6, r3
 8001312:	d19c      	bne.n	800124e <HAL_RCC_ClockConfig+0x7e>
 8001314:	e772      	b.n	80011fc <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001316:	6863      	ldr	r3, [r4, #4]
 8001318:	68e9      	ldr	r1, [r5, #12]
 800131a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800131e:	430b      	orrs	r3, r1
 8001320:	6063      	str	r3, [r4, #4]
 8001322:	e771      	b.n	8001208 <HAL_RCC_ClockConfig+0x38>
 8001324:	40022000 	.word	0x40022000
 8001328:	40021000 	.word	0x40021000
 800132c:	08004237 	.word	0x08004237
 8001330:	20000008 	.word	0x20000008

08001334 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001334:	4b04      	ldr	r3, [pc, #16]	; (8001348 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001336:	4a05      	ldr	r2, [pc, #20]	; (800134c <HAL_RCC_GetPCLK1Freq+0x18>)
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800133e:	5cd3      	ldrb	r3, [r2, r3]
 8001340:	4a03      	ldr	r2, [pc, #12]	; (8001350 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001342:	6810      	ldr	r0, [r2, #0]
}    
 8001344:	40d8      	lsrs	r0, r3
 8001346:	4770      	bx	lr
 8001348:	40021000 	.word	0x40021000
 800134c:	08004247 	.word	0x08004247
 8001350:	20000008 	.word	0x20000008

08001354 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001354:	4b04      	ldr	r3, [pc, #16]	; (8001368 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001356:	4a05      	ldr	r2, [pc, #20]	; (800136c <HAL_RCC_GetPCLK2Freq+0x18>)
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800135e:	5cd3      	ldrb	r3, [r2, r3]
 8001360:	4a03      	ldr	r2, [pc, #12]	; (8001370 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001362:	6810      	ldr	r0, [r2, #0]
} 
 8001364:	40d8      	lsrs	r0, r3
 8001366:	4770      	bx	lr
 8001368:	40021000 	.word	0x40021000
 800136c:	08004247 	.word	0x08004247
 8001370:	20000008 	.word	0x20000008

08001374 <TIM_SlaveTimer_SetConfig>:
  uint32_t tmpsmcr = 0U;
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001374:	6803      	ldr	r3, [r0, #0]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8001376:	6848      	ldr	r0, [r1, #4]
  tmpsmcr = htim->Instance->SMCR;
 8001378:	689a      	ldr	r2, [r3, #8]
{
 800137a:	b530      	push	{r4, r5, lr}
  tmpsmcr &= ~TIM_SMCR_TS;
 800137c:	f022 0270 	bic.w	r2, r2, #112	; 0x70

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8001380:	680c      	ldr	r4, [r1, #0]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8001382:	4302      	orrs	r2, r0
  tmpsmcr &= ~TIM_SMCR_SMS;
 8001384:	f022 0207 	bic.w	r2, r2, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8001388:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800138a:	2850      	cmp	r0, #80	; 0x50
  htim->Instance->SMCR = tmpsmcr;
 800138c:	609a      	str	r2, [r3, #8]
  switch (sSlaveConfig->InputTrigger)
 800138e:	d021      	beq.n	80013d4 <TIM_SlaveTimer_SetConfig+0x60>
 8001390:	d802      	bhi.n	8001398 <TIM_SlaveTimer_SetConfig+0x24>
 8001392:	2840      	cmp	r0, #64	; 0x40
 8001394:	d010      	beq.n	80013b8 <TIM_SlaveTimer_SetConfig+0x44>
 8001396:	bd30      	pop	{r4, r5, pc}
 8001398:	2860      	cmp	r0, #96	; 0x60
 800139a:	d02d      	beq.n	80013f8 <TIM_SlaveTimer_SetConfig+0x84>
 800139c:	2870      	cmp	r0, #112	; 0x70
 800139e:	d13d      	bne.n	800141c <TIM_SlaveTimer_SetConfig+0xa8>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80013a0:	68ca      	ldr	r2, [r1, #12]
 80013a2:	688c      	ldr	r4, [r1, #8]
  tmpsmcr = TIMx->SMCR;
 80013a4:	6898      	ldr	r0, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80013a6:	6909      	ldr	r1, [r1, #16]
 80013a8:	4322      	orrs	r2, r4
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80013aa:	f420 407f 	bic.w	r0, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80013ae:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80013b2:	4302      	orrs	r2, r0

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80013b4:	609a      	str	r2, [r3, #8]
 80013b6:	bd30      	pop	{r4, r5, pc}
      tmpccer = htim->Instance->CCER;
 80013b8:	6a18      	ldr	r0, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80013ba:	6a1a      	ldr	r2, [r3, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80013bc:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80013be:	f022 0201 	bic.w	r2, r2, #1
 80013c2:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80013c4:	699a      	ldr	r2, [r3, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80013c6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80013ca:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 80013ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80013d0:	6218      	str	r0, [r3, #32]
    break;
 80013d2:	bd30      	pop	{r4, r5, pc}
      TIM_TI1_ConfigInputStage(htim->Instance,
 80013d4:	6888      	ldr	r0, [r1, #8]
 80013d6:	690d      	ldr	r5, [r1, #16]
  tmpccer = TIMx->CCER;
 80013d8:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80013da:	6a1c      	ldr	r4, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80013dc:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80013e0:	f024 0401 	bic.w	r4, r4, #1
 80013e4:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80013e6:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 80013e8:	4301      	orrs	r1, r0
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80013ea:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80013ee:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80013f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80013f4:	6219      	str	r1, [r3, #32]
 80013f6:	bd30      	pop	{r4, r5, pc}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80013f8:	6a18      	ldr	r0, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80013fa:	688c      	ldr	r4, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80013fc:	f020 0010 	bic.w	r0, r0, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001400:	690d      	ldr	r5, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001402:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001404:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8001406:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001408:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800140c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001410:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8001414:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8001418:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800141a:	621a      	str	r2, [r3, #32]
 800141c:	bd30      	pop	{r4, r5, pc}

0800141e <HAL_TIM_Base_Start>:
  htim->State= HAL_TIM_STATE_BUSY;
 800141e:	2302      	movs	r3, #2
  __HAL_TIM_ENABLE(htim);
 8001420:	6802      	ldr	r2, [r0, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8001422:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE(htim);
 8001426:	6813      	ldr	r3, [r2, #0]
 8001428:	f043 0301 	orr.w	r3, r3, #1
 800142c:	6013      	str	r3, [r2, #0]
  htim->State= HAL_TIM_STATE_READY;
 800142e:	2301      	movs	r3, #1
 8001430:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8001434:	2000      	movs	r0, #0
 8001436:	4770      	bx	lr

08001438 <HAL_TIM_SlaveConfigSynchronization>:
{
 8001438:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800143a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800143e:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8001440:	2b01      	cmp	r3, #1
 8001442:	f04f 0302 	mov.w	r3, #2
 8001446:	d015      	beq.n	8001474 <HAL_TIM_SlaveConfigSynchronization+0x3c>
 8001448:	2501      	movs	r5, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800144a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 800144e:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  TIM_SlaveTimer_SetConfig(htim, sSlaveConfig);
 8001452:	f7ff ff8f 	bl	8001374 <TIM_SlaveTimer_SetConfig>
  __HAL_UNLOCK(htim);
 8001456:	2000      	movs	r0, #0
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8001458:	6823      	ldr	r3, [r4, #0]
 800145a:	68da      	ldr	r2, [r3, #12]
 800145c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001460:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8001462:	68da      	ldr	r2, [r3, #12]
 8001464:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001468:	60da      	str	r2, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 800146a:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800146e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8001472:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8001474:	4618      	mov	r0, r3
    }
 8001476:	bd38      	pop	{r3, r4, r5, pc}

08001478 <HAL_TIM_ReadCapturedValue>:
  __HAL_LOCK(htim);
 8001478:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800147c:	2b01      	cmp	r3, #1
 800147e:	d01c      	beq.n	80014ba <HAL_TIM_ReadCapturedValue+0x42>
  switch (Channel)
 8001480:	290c      	cmp	r1, #12
 8001482:	d818      	bhi.n	80014b6 <HAL_TIM_ReadCapturedValue+0x3e>
 8001484:	e8df f001 	tbb	[pc, r1]
 8001488:	17171707 	.word	0x17171707
 800148c:	1717170e 	.word	0x1717170e
 8001490:	17171711 	.word	0x17171711
 8001494:	14          	.byte	0x14
 8001495:	00          	.byte	0x00
      tmpreg =  htim->Instance->CCR1;
 8001496:	6803      	ldr	r3, [r0, #0]
 8001498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  __HAL_UNLOCK(htim);
 800149a:	2200      	movs	r2, #0
 800149c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR2;
 80014a4:	6803      	ldr	r3, [r0, #0]
 80014a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      break;
 80014a8:	e7f7      	b.n	800149a <HAL_TIM_ReadCapturedValue+0x22>
      tmpreg =   htim->Instance->CCR3;
 80014aa:	6803      	ldr	r3, [r0, #0]
 80014ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      break;
 80014ae:	e7f4      	b.n	800149a <HAL_TIM_ReadCapturedValue+0x22>
      tmpreg =   htim->Instance->CCR4;
 80014b0:	6803      	ldr	r3, [r0, #0]
 80014b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
      break;
 80014b4:	e7f1      	b.n	800149a <HAL_TIM_ReadCapturedValue+0x22>
  uint32_t tmpreg = 0U;
 80014b6:	2300      	movs	r3, #0
 80014b8:	e7ef      	b.n	800149a <HAL_TIM_ReadCapturedValue+0x22>
  __HAL_LOCK(htim);
 80014ba:	2302      	movs	r3, #2
 80014bc:	e7f0      	b.n	80014a0 <HAL_TIM_ReadCapturedValue+0x28>

080014be <HAL_TIM_PeriodElapsedCallback>:
 80014be:	4770      	bx	lr

080014c0 <HAL_TIM_OC_DelayElapsedCallback>:
 80014c0:	4770      	bx	lr

080014c2 <HAL_TIM_PWM_PulseFinishedCallback>:
 80014c2:	4770      	bx	lr

080014c4 <HAL_TIM_TriggerCallback>:
 80014c4:	4770      	bx	lr

080014c6 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80014c6:	6803      	ldr	r3, [r0, #0]
{
 80014c8:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80014ca:	691a      	ldr	r2, [r3, #16]
{
 80014cc:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80014ce:	0791      	lsls	r1, r2, #30
 80014d0:	d50e      	bpl.n	80014f0 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80014d2:	68da      	ldr	r2, [r3, #12]
 80014d4:	0792      	lsls	r2, r2, #30
 80014d6:	d50b      	bpl.n	80014f0 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80014d8:	f06f 0202 	mvn.w	r2, #2
 80014dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80014de:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80014e0:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80014e2:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80014e4:	079b      	lsls	r3, r3, #30
 80014e6:	d077      	beq.n	80015d8 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 80014e8:	f000 fb92 	bl	8001c10 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80014ec:	2300      	movs	r3, #0
 80014ee:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80014f0:	6823      	ldr	r3, [r4, #0]
 80014f2:	691a      	ldr	r2, [r3, #16]
 80014f4:	0750      	lsls	r0, r2, #29
 80014f6:	d510      	bpl.n	800151a <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80014f8:	68da      	ldr	r2, [r3, #12]
 80014fa:	0751      	lsls	r1, r2, #29
 80014fc:	d50d      	bpl.n	800151a <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80014fe:	f06f 0204 	mvn.w	r2, #4
 8001502:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001504:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001506:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001508:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800150a:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800150e:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001510:	d068      	beq.n	80015e4 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8001512:	f000 fb7d 	bl	8001c10 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001516:	2300      	movs	r3, #0
 8001518:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800151a:	6823      	ldr	r3, [r4, #0]
 800151c:	691a      	ldr	r2, [r3, #16]
 800151e:	0712      	lsls	r2, r2, #28
 8001520:	d50f      	bpl.n	8001542 <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001522:	68da      	ldr	r2, [r3, #12]
 8001524:	0710      	lsls	r0, r2, #28
 8001526:	d50c      	bpl.n	8001542 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001528:	f06f 0208 	mvn.w	r2, #8
 800152c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800152e:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001530:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001532:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001534:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8001536:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001538:	d05a      	beq.n	80015f0 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800153a:	f000 fb69 	bl	8001c10 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800153e:	2300      	movs	r3, #0
 8001540:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001542:	6823      	ldr	r3, [r4, #0]
 8001544:	691a      	ldr	r2, [r3, #16]
 8001546:	06d2      	lsls	r2, r2, #27
 8001548:	d510      	bpl.n	800156c <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800154a:	68da      	ldr	r2, [r3, #12]
 800154c:	06d0      	lsls	r0, r2, #27
 800154e:	d50d      	bpl.n	800156c <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001550:	f06f 0210 	mvn.w	r2, #16
 8001554:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001556:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001558:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800155a:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800155c:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8001560:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001562:	d04b      	beq.n	80015fc <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8001564:	f000 fb54 	bl	8001c10 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001568:	2300      	movs	r3, #0
 800156a:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800156c:	6823      	ldr	r3, [r4, #0]
 800156e:	691a      	ldr	r2, [r3, #16]
 8001570:	07d1      	lsls	r1, r2, #31
 8001572:	d508      	bpl.n	8001586 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001574:	68da      	ldr	r2, [r3, #12]
 8001576:	07d2      	lsls	r2, r2, #31
 8001578:	d505      	bpl.n	8001586 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800157a:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800157e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001580:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001582:	f7ff ff9c 	bl	80014be <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001586:	6823      	ldr	r3, [r4, #0]
 8001588:	691a      	ldr	r2, [r3, #16]
 800158a:	0610      	lsls	r0, r2, #24
 800158c:	d508      	bpl.n	80015a0 <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800158e:	68da      	ldr	r2, [r3, #12]
 8001590:	0611      	lsls	r1, r2, #24
 8001592:	d505      	bpl.n	80015a0 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001594:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8001598:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800159a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800159c:	f000 f9e5 	bl	800196a <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80015a0:	6823      	ldr	r3, [r4, #0]
 80015a2:	691a      	ldr	r2, [r3, #16]
 80015a4:	0652      	lsls	r2, r2, #25
 80015a6:	d508      	bpl.n	80015ba <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80015a8:	68da      	ldr	r2, [r3, #12]
 80015aa:	0650      	lsls	r0, r2, #25
 80015ac:	d505      	bpl.n	80015ba <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80015ae:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 80015b2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80015b4:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80015b6:	f7ff ff85 	bl	80014c4 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80015ba:	6823      	ldr	r3, [r4, #0]
 80015bc:	691a      	ldr	r2, [r3, #16]
 80015be:	0691      	lsls	r1, r2, #26
 80015c0:	d522      	bpl.n	8001608 <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80015c2:	68da      	ldr	r2, [r3, #12]
 80015c4:	0692      	lsls	r2, r2, #26
 80015c6:	d51f      	bpl.n	8001608 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80015c8:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 80015cc:	4620      	mov	r0, r4
}
 80015ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80015d2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80015d4:	f000 b9c8 	b.w	8001968 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80015d8:	f7ff ff72 	bl	80014c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015dc:	4620      	mov	r0, r4
 80015de:	f7ff ff70 	bl	80014c2 <HAL_TIM_PWM_PulseFinishedCallback>
 80015e2:	e783      	b.n	80014ec <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015e4:	f7ff ff6c 	bl	80014c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015e8:	4620      	mov	r0, r4
 80015ea:	f7ff ff6a 	bl	80014c2 <HAL_TIM_PWM_PulseFinishedCallback>
 80015ee:	e792      	b.n	8001516 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015f0:	f7ff ff66 	bl	80014c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015f4:	4620      	mov	r0, r4
 80015f6:	f7ff ff64 	bl	80014c2 <HAL_TIM_PWM_PulseFinishedCallback>
 80015fa:	e7a0      	b.n	800153e <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015fc:	f7ff ff60 	bl	80014c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001600:	4620      	mov	r0, r4
 8001602:	f7ff ff5e 	bl	80014c2 <HAL_TIM_PWM_PulseFinishedCallback>
 8001606:	e7af      	b.n	8001568 <HAL_TIM_IRQHandler+0xa2>
 8001608:	bd10      	pop	{r4, pc}
	...

0800160c <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800160c:	4a1a      	ldr	r2, [pc, #104]	; (8001678 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 800160e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001610:	4290      	cmp	r0, r2
 8001612:	d00a      	beq.n	800162a <TIM_Base_SetConfig+0x1e>
 8001614:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001618:	d007      	beq.n	800162a <TIM_Base_SetConfig+0x1e>
 800161a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800161e:	4290      	cmp	r0, r2
 8001620:	d003      	beq.n	800162a <TIM_Base_SetConfig+0x1e>
 8001622:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001626:	4290      	cmp	r0, r2
 8001628:	d115      	bne.n	8001656 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 800162a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800162c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001630:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001632:	4a11      	ldr	r2, [pc, #68]	; (8001678 <TIM_Base_SetConfig+0x6c>)
 8001634:	4290      	cmp	r0, r2
 8001636:	d00a      	beq.n	800164e <TIM_Base_SetConfig+0x42>
 8001638:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800163c:	d007      	beq.n	800164e <TIM_Base_SetConfig+0x42>
 800163e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001642:	4290      	cmp	r0, r2
 8001644:	d003      	beq.n	800164e <TIM_Base_SetConfig+0x42>
 8001646:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800164a:	4290      	cmp	r0, r2
 800164c:	d103      	bne.n	8001656 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800164e:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001650:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001654:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001656:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8001658:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 800165c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800165e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001660:	688b      	ldr	r3, [r1, #8]
 8001662:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001664:	680b      	ldr	r3, [r1, #0]
 8001666:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001668:	4b03      	ldr	r3, [pc, #12]	; (8001678 <TIM_Base_SetConfig+0x6c>)
 800166a:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 800166c:	bf04      	itt	eq
 800166e:	690b      	ldreq	r3, [r1, #16]
 8001670:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8001672:	2301      	movs	r3, #1
 8001674:	6143      	str	r3, [r0, #20]
 8001676:	4770      	bx	lr
 8001678:	40012c00 	.word	0x40012c00

0800167c <HAL_TIM_Base_Init>:
{
 800167c:	b510      	push	{r4, lr}
  if(htim == NULL)
 800167e:	4604      	mov	r4, r0
 8001680:	b1a0      	cbz	r0, 80016ac <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001682:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001686:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800168a:	b91b      	cbnz	r3, 8001694 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800168c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001690:	f000 fc0a 	bl	8001ea8 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001694:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001696:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8001698:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800169c:	1d21      	adds	r1, r4, #4
 800169e:	f7ff ffb5 	bl	800160c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80016a2:	2301      	movs	r3, #1
  return HAL_OK;
 80016a4:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80016a6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80016aa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80016ac:	2001      	movs	r0, #1
}
 80016ae:	bd10      	pop	{r4, pc}

080016b0 <HAL_TIM_IC_Init>:
{
 80016b0:	b510      	push	{r4, lr}
  if(htim == NULL)
 80016b2:	4604      	mov	r4, r0
 80016b4:	b1a0      	cbz	r0, 80016e0 <HAL_TIM_IC_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80016b6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80016ba:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80016be:	b91b      	cbnz	r3, 80016c8 <HAL_TIM_IC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80016c0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 80016c4:	f000 fc04 	bl	8001ed0 <HAL_TIM_IC_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80016c8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80016ca:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 80016cc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80016d0:	1d21      	adds	r1, r4, #4
 80016d2:	f7ff ff9b 	bl	800160c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80016d6:	2301      	movs	r3, #1
  return HAL_OK;
 80016d8:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80016da:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80016de:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80016e0:	2001      	movs	r0, #1
}
 80016e2:	bd10      	pop	{r4, pc}

080016e4 <TIM_TI1_SetConfig>:
{
 80016e4:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80016e6:	6a04      	ldr	r4, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80016e8:	4e12      	ldr	r6, [pc, #72]	; (8001734 <TIM_TI1_SetConfig+0x50>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80016ea:	f024 0401 	bic.w	r4, r4, #1
 80016ee:	6204      	str	r4, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80016f0:	42b0      	cmp	r0, r6
  tmpccmr1 = TIMx->CCMR1;
 80016f2:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 80016f4:	6a05      	ldr	r5, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80016f6:	d00a      	beq.n	800170e <TIM_TI1_SetConfig+0x2a>
 80016f8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80016fc:	d007      	beq.n	800170e <TIM_TI1_SetConfig+0x2a>
 80016fe:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 8001702:	42b0      	cmp	r0, r6
 8001704:	d003      	beq.n	800170e <TIM_TI1_SetConfig+0x2a>
 8001706:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800170a:	42b0      	cmp	r0, r6
 800170c:	d10f      	bne.n	800172e <TIM_TI1_SetConfig+0x4a>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800170e:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 8001712:	4322      	orrs	r2, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8001714:	011b      	lsls	r3, r3, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001716:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800171a:	b2db      	uxtb	r3, r3
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800171c:	f025 050a 	bic.w	r5, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8001720:	f001 010a 	and.w	r1, r1, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8001724:	431a      	orrs	r2, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8001726:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 8001728:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800172a:	6201      	str	r1, [r0, #32]
}
 800172c:	bd70      	pop	{r4, r5, r6, pc}
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800172e:	f044 0201 	orr.w	r2, r4, #1
 8001732:	e7ef      	b.n	8001714 <TIM_TI1_SetConfig+0x30>
 8001734:	40012c00 	.word	0x40012c00

08001738 <HAL_TIM_IC_ConfigChannel>:
{
 8001738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 800173a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800173e:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8001740:	2b01      	cmp	r3, #1
{
 8001742:	460d      	mov	r5, r1
 8001744:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001748:	d019      	beq.n	800177e <HAL_TIM_IC_ConfigChannel+0x46>
 800174a:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800174c:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8001750:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  if (Channel == TIM_CHANNEL_1)
 8001754:	b9a2      	cbnz	r2, 8001780 <HAL_TIM_IC_ConfigChannel+0x48>
    TIM_TI1_SetConfig(htim->Instance,
 8001756:	68cb      	ldr	r3, [r1, #12]
 8001758:	6820      	ldr	r0, [r4, #0]
 800175a:	c906      	ldmia	r1, {r1, r2}
 800175c:	f7ff ffc2 	bl	80016e4 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001760:	6823      	ldr	r3, [r4, #0]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001762:	68a9      	ldr	r1, [r5, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001764:	699a      	ldr	r2, [r3, #24]
 8001766:	f022 020c 	bic.w	r2, r2, #12
 800176a:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800176c:	699a      	ldr	r2, [r3, #24]
 800176e:	430a      	orrs	r2, r1
 8001770:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8001772:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001774:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001776:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800177a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800177e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (Channel == TIM_CHANNEL_2)
 8001780:	2a04      	cmp	r2, #4
 8001782:	688e      	ldr	r6, [r1, #8]
 8001784:	6823      	ldr	r3, [r4, #0]
 8001786:	c982      	ldmia	r1, {r1, r7}
 8001788:	68e8      	ldr	r0, [r5, #12]
 800178a:	d11f      	bne.n	80017cc <HAL_TIM_IC_ConfigChannel+0x94>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800178c:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800178e:	0300      	lsls	r0, r0, #12
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001790:	f022 0210 	bic.w	r2, r2, #16
 8001794:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001796:	699a      	ldr	r2, [r3, #24]
  tmpccer = TIMx->CCER;
 8001798:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800179a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800179e:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80017a2:	b280      	uxth	r0, r0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80017a4:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80017a8:	0109      	lsls	r1, r1, #4
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80017aa:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80017ac:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80017b0:	f025 00a0 	bic.w	r0, r5, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80017b4:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1 ;
 80017b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80017b8:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80017ba:	699a      	ldr	r2, [r3, #24]
 80017bc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80017c0:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80017c2:	699a      	ldr	r2, [r3, #24]
 80017c4:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 80017c8:	619e      	str	r6, [r3, #24]
 80017ca:	e7d2      	b.n	8001772 <HAL_TIM_IC_ConfigChannel+0x3a>
  else if (Channel == TIM_CHANNEL_3)
 80017cc:	2a08      	cmp	r2, #8
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80017ce:	6a1a      	ldr	r2, [r3, #32]
  else if (Channel == TIM_CHANNEL_3)
 80017d0:	d11c      	bne.n	800180c <HAL_TIM_IC_ConfigChannel+0xd4>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80017d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80017d6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80017d8:	69da      	ldr	r2, [r3, #28]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80017da:	0100      	lsls	r0, r0, #4
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80017dc:	f022 0203 	bic.w	r2, r2, #3
  tmpccer = TIMx->CCER;
 80017e0:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr2 |= TIM_ICSelection;
 80017e2:	433a      	orrs	r2, r7
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80017e4:	b2c0      	uxtb	r0, r0
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80017e6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P));
 80017ea:	0209      	lsls	r1, r1, #8
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80017ec:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P));
 80017ee:	f401 7100 	and.w	r1, r1, #512	; 0x200
  tmpccer &= ~(TIM_CCER_CC3P);
 80017f2:	f425 7000 	bic.w	r0, r5, #512	; 0x200
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P));
 80017f6:	4301      	orrs	r1, r0
  TIMx->CCMR2 = tmpccmr2;
 80017f8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80017fa:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80017fc:	69da      	ldr	r2, [r3, #28]
 80017fe:	f022 020c 	bic.w	r2, r2, #12
 8001802:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8001804:	69da      	ldr	r2, [r3, #28]
 8001806:	4316      	orrs	r6, r2
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001808:	61de      	str	r6, [r3, #28]
 800180a:	e7b2      	b.n	8001772 <HAL_TIM_IC_ConfigChannel+0x3a>
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800180c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001810:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001812:	69da      	ldr	r2, [r3, #28]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001814:	0300      	lsls	r0, r0, #12
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8001816:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccer = TIMx->CCER;
 800181a:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800181c:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8001820:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001824:	b280      	uxth	r0, r0
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8001826:	0309      	lsls	r1, r1, #12
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001828:	4310      	orrs	r0, r2
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 800182a:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
  tmpccer &= ~TIM_CCER_CC4P;
 800182e:	f425 5200 	bic.w	r2, r5, #8192	; 0x2000
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8001832:	4311      	orrs	r1, r2
  TIMx->CCMR2 = tmpccmr2;
 8001834:	61d8      	str	r0, [r3, #28]
  TIMx->CCER = tmpccer ;
 8001836:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8001838:	69da      	ldr	r2, [r3, #28]
 800183a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800183e:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001840:	69da      	ldr	r2, [r3, #28]
 8001842:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 8001846:	e7df      	b.n	8001808 <HAL_TIM_IC_ConfigChannel+0xd0>

08001848 <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001848:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 800184a:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800184c:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << Channel;
 800184e:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8001850:	ea23 0304 	bic.w	r3, r3, r4
 8001854:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8001856:	6a03      	ldr	r3, [r0, #32]
 8001858:	408a      	lsls	r2, r1
 800185a:	431a      	orrs	r2, r3
 800185c:	6202      	str	r2, [r0, #32]
 800185e:	bd10      	pop	{r4, pc}

08001860 <HAL_TIM_IC_Start_IT>:
{
 8001860:	b510      	push	{r4, lr}
 8001862:	4604      	mov	r4, r0
  switch (Channel)
 8001864:	290c      	cmp	r1, #12
 8001866:	d80d      	bhi.n	8001884 <HAL_TIM_IC_Start_IT+0x24>
 8001868:	e8df f001 	tbb	[pc, r1]
 800186c:	0c0c0c07 	.word	0x0c0c0c07
 8001870:	0c0c0c17 	.word	0x0c0c0c17
 8001874:	0c0c0c1c 	.word	0x0c0c0c1c
 8001878:	21          	.byte	0x21
 8001879:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800187a:	6802      	ldr	r2, [r0, #0]
 800187c:	68d3      	ldr	r3, [r2, #12]
 800187e:	f043 0302 	orr.w	r3, r3, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001882:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001884:	6820      	ldr	r0, [r4, #0]
 8001886:	2201      	movs	r2, #1
 8001888:	f7ff ffde 	bl	8001848 <TIM_CCxChannelCmd>
  __HAL_TIM_ENABLE(htim);
 800188c:	6822      	ldr	r2, [r4, #0]
}
 800188e:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 8001890:	6813      	ldr	r3, [r2, #0]
 8001892:	f043 0301 	orr.w	r3, r3, #1
 8001896:	6013      	str	r3, [r2, #0]
}
 8001898:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800189a:	6802      	ldr	r2, [r0, #0]
 800189c:	68d3      	ldr	r3, [r2, #12]
 800189e:	f043 0304 	orr.w	r3, r3, #4
 80018a2:	e7ee      	b.n	8001882 <HAL_TIM_IC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80018a4:	6802      	ldr	r2, [r0, #0]
 80018a6:	68d3      	ldr	r3, [r2, #12]
 80018a8:	f043 0308 	orr.w	r3, r3, #8
 80018ac:	e7e9      	b.n	8001882 <HAL_TIM_IC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80018ae:	6802      	ldr	r2, [r0, #0]
 80018b0:	68d3      	ldr	r3, [r2, #12]
 80018b2:	f043 0310 	orr.w	r3, r3, #16
 80018b6:	e7e4      	b.n	8001882 <HAL_TIM_IC_Start_IT+0x22>

080018b8 <HAL_TIM_IC_Stop_IT>:
{
 80018b8:	b510      	push	{r4, lr}
 80018ba:	4604      	mov	r4, r0
  switch (Channel)
 80018bc:	290c      	cmp	r1, #12
 80018be:	d80d      	bhi.n	80018dc <HAL_TIM_IC_Stop_IT+0x24>
 80018c0:	e8df f001 	tbb	[pc, r1]
 80018c4:	0c0c0c07 	.word	0x0c0c0c07
 80018c8:	0c0c0c21 	.word	0x0c0c0c21
 80018cc:	0c0c0c26 	.word	0x0c0c0c26
 80018d0:	2b          	.byte	0x2b
 80018d1:	00          	.byte	0x00
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80018d2:	6802      	ldr	r2, [r0, #0]
 80018d4:	68d3      	ldr	r3, [r2, #12]
 80018d6:	f023 0302 	bic.w	r3, r3, #2
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80018da:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80018dc:	2200      	movs	r2, #0
 80018de:	6820      	ldr	r0, [r4, #0]
 80018e0:	f7ff ffb2 	bl	8001848 <TIM_CCxChannelCmd>
  __HAL_TIM_DISABLE(htim);
 80018e4:	f241 1211 	movw	r2, #4369	; 0x1111
 80018e8:	6823      	ldr	r3, [r4, #0]
 80018ea:	6a19      	ldr	r1, [r3, #32]
 80018ec:	4211      	tst	r1, r2
 80018ee:	d108      	bne.n	8001902 <HAL_TIM_IC_Stop_IT+0x4a>
 80018f0:	f240 4244 	movw	r2, #1092	; 0x444
 80018f4:	6a19      	ldr	r1, [r3, #32]
 80018f6:	4211      	tst	r1, r2
 80018f8:	bf02      	ittt	eq
 80018fa:	681a      	ldreq	r2, [r3, #0]
 80018fc:	f022 0201 	biceq.w	r2, r2, #1
 8001900:	601a      	streq	r2, [r3, #0]
}
 8001902:	2000      	movs	r0, #0
 8001904:	bd10      	pop	{r4, pc}
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8001906:	6802      	ldr	r2, [r0, #0]
 8001908:	68d3      	ldr	r3, [r2, #12]
 800190a:	f023 0304 	bic.w	r3, r3, #4
 800190e:	e7e4      	b.n	80018da <HAL_TIM_IC_Stop_IT+0x22>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8001910:	6802      	ldr	r2, [r0, #0]
 8001912:	68d3      	ldr	r3, [r2, #12]
 8001914:	f023 0308 	bic.w	r3, r3, #8
 8001918:	e7df      	b.n	80018da <HAL_TIM_IC_Stop_IT+0x22>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800191a:	6802      	ldr	r2, [r0, #0]
 800191c:	68d3      	ldr	r3, [r2, #12]
 800191e:	f023 0310 	bic.w	r3, r3, #16
 8001922:	e7da      	b.n	80018da <HAL_TIM_IC_Stop_IT+0x22>

08001924 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8001924:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001928:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 800192a:	2b01      	cmp	r3, #1
 800192c:	f04f 0302 	mov.w	r3, #2
 8001930:	d018      	beq.n	8001964 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 8001932:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001936:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001938:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800193a:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800193c:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800193e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001942:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001944:	685a      	ldr	r2, [r3, #4]
 8001946:	4322      	orrs	r2, r4
 8001948:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 800194a:	689a      	ldr	r2, [r3, #8]
 800194c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001950:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001952:	689a      	ldr	r2, [r3, #8]
 8001954:	430a      	orrs	r2, r1
 8001956:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8001958:	2301      	movs	r3, #1
 800195a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800195e:	2300      	movs	r3, #0
 8001960:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001964:	4618      	mov	r0, r3

  return HAL_OK;
}
 8001966:	bd10      	pop	{r4, pc}

08001968 <HAL_TIMEx_CommutationCallback>:
 8001968:	4770      	bx	lr

0800196a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800196a:	4770      	bx	lr

0800196c <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800196c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001970:	6805      	ldr	r5, [r0, #0]
 8001972:	68c2      	ldr	r2, [r0, #12]
 8001974:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001976:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001978:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800197c:	4313      	orrs	r3, r2
 800197e:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001980:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 8001982:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001984:	430b      	orrs	r3, r1
 8001986:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8001988:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 800198c:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001990:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8001992:	4313      	orrs	r3, r2
 8001994:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001996:	696b      	ldr	r3, [r5, #20]
 8001998:	6982      	ldr	r2, [r0, #24]
 800199a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800199e:	4313      	orrs	r3, r2
 80019a0:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80019a2:	4b40      	ldr	r3, [pc, #256]	; (8001aa4 <UART_SetConfig+0x138>)
{
 80019a4:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 80019a6:	429d      	cmp	r5, r3
 80019a8:	f04f 0419 	mov.w	r4, #25
 80019ac:	d146      	bne.n	8001a3c <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80019ae:	f7ff fcd1 	bl	8001354 <HAL_RCC_GetPCLK2Freq>
 80019b2:	fb04 f300 	mul.w	r3, r4, r0
 80019b6:	f8d9 6004 	ldr.w	r6, [r9, #4]
 80019ba:	f04f 0864 	mov.w	r8, #100	; 0x64
 80019be:	00b6      	lsls	r6, r6, #2
 80019c0:	fbb3 f3f6 	udiv	r3, r3, r6
 80019c4:	fbb3 f3f8 	udiv	r3, r3, r8
 80019c8:	011e      	lsls	r6, r3, #4
 80019ca:	f7ff fcc3 	bl	8001354 <HAL_RCC_GetPCLK2Freq>
 80019ce:	4360      	muls	r0, r4
 80019d0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	fbb0 f7f3 	udiv	r7, r0, r3
 80019da:	f7ff fcbb 	bl	8001354 <HAL_RCC_GetPCLK2Freq>
 80019de:	4360      	muls	r0, r4
 80019e0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80019ea:	fbb3 f3f8 	udiv	r3, r3, r8
 80019ee:	fb08 7313 	mls	r3, r8, r3, r7
 80019f2:	011b      	lsls	r3, r3, #4
 80019f4:	3332      	adds	r3, #50	; 0x32
 80019f6:	fbb3 f3f8 	udiv	r3, r3, r8
 80019fa:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 80019fe:	f7ff fca9 	bl	8001354 <HAL_RCC_GetPCLK2Freq>
 8001a02:	4360      	muls	r0, r4
 8001a04:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8001a08:	0092      	lsls	r2, r2, #2
 8001a0a:	fbb0 faf2 	udiv	sl, r0, r2
 8001a0e:	f7ff fca1 	bl	8001354 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001a12:	4360      	muls	r0, r4
 8001a14:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a1e:	fbb3 f3f8 	udiv	r3, r3, r8
 8001a22:	fb08 a313 	mls	r3, r8, r3, sl
 8001a26:	011b      	lsls	r3, r3, #4
 8001a28:	3332      	adds	r3, #50	; 0x32
 8001a2a:	fbb3 f3f8 	udiv	r3, r3, r8
 8001a2e:	f003 030f 	and.w	r3, r3, #15
 8001a32:	433b      	orrs	r3, r7
 8001a34:	4433      	add	r3, r6
 8001a36:	60ab      	str	r3, [r5, #8]
 8001a38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a3c:	f7ff fc7a 	bl	8001334 <HAL_RCC_GetPCLK1Freq>
 8001a40:	fb04 f300 	mul.w	r3, r4, r0
 8001a44:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8001a48:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001a4c:	00b6      	lsls	r6, r6, #2
 8001a4e:	fbb3 f3f6 	udiv	r3, r3, r6
 8001a52:	fbb3 f3f8 	udiv	r3, r3, r8
 8001a56:	011e      	lsls	r6, r3, #4
 8001a58:	f7ff fc6c 	bl	8001334 <HAL_RCC_GetPCLK1Freq>
 8001a5c:	4360      	muls	r0, r4
 8001a5e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	fbb0 f7f3 	udiv	r7, r0, r3
 8001a68:	f7ff fc64 	bl	8001334 <HAL_RCC_GetPCLK1Freq>
 8001a6c:	4360      	muls	r0, r4
 8001a6e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a78:	fbb3 f3f8 	udiv	r3, r3, r8
 8001a7c:	fb08 7313 	mls	r3, r8, r3, r7
 8001a80:	011b      	lsls	r3, r3, #4
 8001a82:	3332      	adds	r3, #50	; 0x32
 8001a84:	fbb3 f3f8 	udiv	r3, r3, r8
 8001a88:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8001a8c:	f7ff fc52 	bl	8001334 <HAL_RCC_GetPCLK1Freq>
 8001a90:	4360      	muls	r0, r4
 8001a92:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8001a96:	0092      	lsls	r2, r2, #2
 8001a98:	fbb0 faf2 	udiv	sl, r0, r2
 8001a9c:	f7ff fc4a 	bl	8001334 <HAL_RCC_GetPCLK1Freq>
 8001aa0:	e7b7      	b.n	8001a12 <UART_SetConfig+0xa6>
 8001aa2:	bf00      	nop
 8001aa4:	40013800 	.word	0x40013800

08001aa8 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8001aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001aaa:	4604      	mov	r4, r0
 8001aac:	460e      	mov	r6, r1
 8001aae:	4617      	mov	r7, r2
 8001ab0:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8001ab2:	6821      	ldr	r1, [r4, #0]
 8001ab4:	680b      	ldr	r3, [r1, #0]
 8001ab6:	ea36 0303 	bics.w	r3, r6, r3
 8001aba:	d101      	bne.n	8001ac0 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8001abc:	2000      	movs	r0, #0
}
 8001abe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001ac0:	1c6b      	adds	r3, r5, #1
 8001ac2:	d0f7      	beq.n	8001ab4 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001ac4:	b995      	cbnz	r5, 8001aec <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001ac6:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8001ac8:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001aca:	68da      	ldr	r2, [r3, #12]
 8001acc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001ad0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ad2:	695a      	ldr	r2, [r3, #20]
 8001ad4:	f022 0201 	bic.w	r2, r2, #1
 8001ad8:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001ada:	2320      	movs	r3, #32
 8001adc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001ae0:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8001aea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001aec:	f7ff f85a 	bl	8000ba4 <HAL_GetTick>
 8001af0:	1bc0      	subs	r0, r0, r7
 8001af2:	4285      	cmp	r5, r0
 8001af4:	d2dd      	bcs.n	8001ab2 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8001af6:	e7e6      	b.n	8001ac6 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08001af8 <HAL_UART_Init>:
{
 8001af8:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001afa:	4604      	mov	r4, r0
 8001afc:	b340      	cbz	r0, 8001b50 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001afe:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001b02:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001b06:	b91b      	cbnz	r3, 8001b10 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001b08:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001b0c:	f000 fa14 	bl	8001f38 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001b10:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001b12:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001b14:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001b18:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8001b1a:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8001b1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001b20:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001b22:	f7ff ff23 	bl	800196c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b26:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b28:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b2a:	691a      	ldr	r2, [r3, #16]
 8001b2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001b30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b32:	695a      	ldr	r2, [r3, #20]
 8001b34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001b38:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001b3a:	68da      	ldr	r2, [r3, #12]
 8001b3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b40:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 8001b42:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b44:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001b46:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001b4a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001b4e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001b50:	2001      	movs	r0, #1
}
 8001b52:	bd10      	pop	{r4, pc}

08001b54 <HAL_UART_Transmit>:
{
 8001b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b58:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8001b5a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8001b5e:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_READY)
 8001b60:	2b20      	cmp	r3, #32
{
 8001b62:	460d      	mov	r5, r1
 8001b64:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8001b66:	d14e      	bne.n	8001c06 <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0U))
 8001b68:	2900      	cmp	r1, #0
 8001b6a:	d049      	beq.n	8001c00 <HAL_UART_Transmit+0xac>
 8001b6c:	2a00      	cmp	r2, #0
 8001b6e:	d047      	beq.n	8001c00 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8001b70:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d046      	beq.n	8001c06 <HAL_UART_Transmit+0xb2>
 8001b78:	2301      	movs	r3, #1
 8001b7a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b82:	2321      	movs	r3, #33	; 0x21
 8001b84:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001b88:	f7ff f80c 	bl	8000ba4 <HAL_GetTick>
 8001b8c:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 8001b8e:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8001b92:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8001b96:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	b96b      	cbnz	r3, 8001bb8 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001b9c:	463b      	mov	r3, r7
 8001b9e:	4632      	mov	r2, r6
 8001ba0:	2140      	movs	r1, #64	; 0x40
 8001ba2:	4620      	mov	r0, r4
 8001ba4:	f7ff ff80 	bl	8001aa8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001ba8:	b9a8      	cbnz	r0, 8001bd6 <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8001baa:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8001bac:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8001bb0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8001bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8001bb8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001bba:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8001bbc:	3b01      	subs	r3, #1
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001bc2:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001bc4:	2180      	movs	r1, #128	; 0x80
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001bc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001bca:	4620      	mov	r0, r4
 8001bcc:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001bce:	d10e      	bne.n	8001bee <HAL_UART_Transmit+0x9a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001bd0:	f7ff ff6a 	bl	8001aa8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001bd4:	b110      	cbz	r0, 8001bdc <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 8001bd6:	2003      	movs	r0, #3
 8001bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001bdc:	882b      	ldrh	r3, [r5, #0]
 8001bde:	6822      	ldr	r2, [r4, #0]
 8001be0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001be4:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001be6:	6923      	ldr	r3, [r4, #16]
 8001be8:	b943      	cbnz	r3, 8001bfc <HAL_UART_Transmit+0xa8>
          pData +=2U;
 8001bea:	3502      	adds	r5, #2
 8001bec:	e7d3      	b.n	8001b96 <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001bee:	f7ff ff5b 	bl	8001aa8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001bf2:	2800      	cmp	r0, #0
 8001bf4:	d1ef      	bne.n	8001bd6 <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001bf6:	6823      	ldr	r3, [r4, #0]
 8001bf8:	782a      	ldrb	r2, [r5, #0]
 8001bfa:	605a      	str	r2, [r3, #4]
 8001bfc:	3501      	adds	r5, #1
 8001bfe:	e7ca      	b.n	8001b96 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8001c00:	2001      	movs	r0, #1
 8001c02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8001c06:	2002      	movs	r0, #2
}
 8001c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c0c:	0000      	movs	r0, r0
	...

08001c10 <HAL_TIM_IC_CaptureCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if(htim == &htim4)
 8001c14:	4b30      	ldr	r3, [pc, #192]	; (8001cd8 <HAL_TIM_IC_CaptureCallback+0xc8>)
{
 8001c16:	b09a      	sub	sp, #104	; 0x68
	if(htim == &htim4)
 8001c18:	4298      	cmp	r0, r3
{
 8001c1a:	4604      	mov	r4, r0
	if(htim == &htim4)
 8001c1c:	d110      	bne.n	8001c40 <HAL_TIM_IC_CaptureCallback+0x30>
	{
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8001c1e:	7f03      	ldrb	r3, [r0, #28]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d10d      	bne.n	8001c40 <HAL_TIM_IC_CaptureCallback+0x30>
		{
			count++;
 8001c24:	4d2d      	ldr	r5, [pc, #180]	; (8001cdc <HAL_TIM_IC_CaptureCallback+0xcc>)
 8001c26:	782b      	ldrb	r3, [r5, #0]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	702b      	strb	r3, [r5, #0]

			if(count == 1)
 8001c2e:	782b      	ldrb	r3, [r5, #0]
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d108      	bne.n	8001c46 <HAL_TIM_IC_CaptureCallback+0x36>
			{
				__HAL_TIM_SET_COUNTER(&htim4, 0x0000);
 8001c34:	2300      	movs	r3, #0
 8001c36:	6802      	ldr	r2, [r0, #0]
 8001c38:	6253      	str	r3, [r2, #36]	; 0x24
				__HAL_TIM_SET_COUNTER(&htim3, 0x0000);
 8001c3a:	4a29      	ldr	r2, [pc, #164]	; (8001ce0 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8001c3c:	6812      	ldr	r2, [r2, #0]
 8001c3e:	6253      	str	r3, [r2, #36]	; 0x24

				HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
			}
		}
	}
}
 8001c40:	b01a      	add	sp, #104	; 0x68
 8001c42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			else if(count == 2)
 8001c46:	782b      	ldrb	r3, [r5, #0]
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d1f9      	bne.n	8001c40 <HAL_TIM_IC_CaptureCallback+0x30>
				count = 0;
 8001c4c:	2600      	movs	r6, #0
				HAL_TIM_IC_Stop_IT(&htim4, TIM_CHANNEL_1);
 8001c4e:	2100      	movs	r1, #0
 8001c50:	f7ff fe32 	bl	80018b8 <HAL_TIM_IC_Stop_IT>
				uint16_t count_main = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 8001c54:	4631      	mov	r1, r6
 8001c56:	4620      	mov	r0, r4
				count = 0;
 8001c58:	702e      	strb	r6, [r5, #0]
				uint16_t count_main = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 8001c5a:	f7ff fc0d 	bl	8001478 <HAL_TIM_ReadCapturedValue>
 8001c5e:	4680      	mov	r8, r0
				uint16_t count_secondary = __HAL_TIM_GET_COUNTER(&htim3);
 8001c60:	4b1f      	ldr	r3, [pc, #124]	; (8001ce0 <HAL_TIM_IC_CaptureCallback+0xd0>)
				char str[96] = {0,};
 8001c62:	2260      	movs	r2, #96	; 0x60
				uint16_t count_secondary = __HAL_TIM_GET_COUNTER(&htim3);
 8001c64:	681b      	ldr	r3, [r3, #0]
				char str[96] = {0,};
 8001c66:	4631      	mov	r1, r6
				uint16_t count_secondary = __HAL_TIM_GET_COUNTER(&htim3);
 8001c68:	6a5f      	ldr	r7, [r3, #36]	; 0x24
				uint16_t arr = __HAL_TIM_GET_AUTORELOAD(&htim3);
 8001c6a:	6add      	ldr	r5, [r3, #44]	; 0x2c
				char str[96] = {0,};
 8001c6c:	a802      	add	r0, sp, #8
 8001c6e:	f000 fa3f 	bl	80020f0 <memset>
				uint32_t res = count_main + (count_secondary * arr) + count_secondary;
 8001c72:	b2bf      	uxth	r7, r7
 8001c74:	b2ad      	uxth	r5, r5
 8001c76:	fa1f f088 	uxth.w	r0, r8
 8001c7a:	fb07 0005 	mla	r0, r7, r5, r0
				float freq = 1 / (res / 1000000.0);
 8001c7e:	4438      	add	r0, r7
 8001c80:	f7fe fbb0 	bl	80003e4 <__aeabi_ui2d>
 8001c84:	a312      	add	r3, pc, #72	; (adr r3, 8001cd0 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8001c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c8a:	f7fe fd4b 	bl	8000724 <__aeabi_ddiv>
 8001c8e:	460b      	mov	r3, r1
 8001c90:	4602      	mov	r2, r0
 8001c92:	4914      	ldr	r1, [pc, #80]	; (8001ce4 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8001c94:	2000      	movs	r0, #0
 8001c96:	f7fe fd45 	bl	8000724 <__aeabi_ddiv>
 8001c9a:	f7fe fef1 	bl	8000a80 <__aeabi_d2f>
				snprintf(str, 96, "Capture Freq: %.3f Hz\n", (float)freq);
 8001c9e:	f7fe fbc3 	bl	8000428 <__aeabi_f2d>
 8001ca2:	4a11      	ldr	r2, [pc, #68]	; (8001ce8 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8001ca4:	e9cd 0100 	strd	r0, r1, [sp]
 8001ca8:	2160      	movs	r1, #96	; 0x60
 8001caa:	a802      	add	r0, sp, #8
 8001cac:	f000 fe8a 	bl	80029c4 <sniprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 8001cb0:	a802      	add	r0, sp, #8
 8001cb2:	f7fe fa4d 	bl	8000150 <strlen>
 8001cb6:	a902      	add	r1, sp, #8
 8001cb8:	b282      	uxth	r2, r0
 8001cba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cbe:	480b      	ldr	r0, [pc, #44]	; (8001cec <HAL_TIM_IC_CaptureCallback+0xdc>)
 8001cc0:	f7ff ff48 	bl	8001b54 <HAL_UART_Transmit>
				HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8001cc4:	4631      	mov	r1, r6
 8001cc6:	4620      	mov	r0, r4
 8001cc8:	f7ff fdca 	bl	8001860 <HAL_TIM_IC_Start_IT>
}
 8001ccc:	e7b8      	b.n	8001c40 <HAL_TIM_IC_CaptureCallback+0x30>
 8001cce:	bf00      	nop
 8001cd0:	00000000 	.word	0x00000000
 8001cd4:	412e8480 	.word	0x412e8480
 8001cd8:	2000020c 	.word	0x2000020c
 8001cdc:	200001f8 	.word	0x200001f8
 8001ce0:	2000024c 	.word	0x2000024c
 8001ce4:	3ff00000 	.word	0x3ff00000
 8001ce8:	08004220 	.word	0x08004220
 8001cec:	2000028c 	.word	0x2000028c

08001cf0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cf0:	b510      	push	{r4, lr}
 8001cf2:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cf4:	2228      	movs	r2, #40	; 0x28
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	a806      	add	r0, sp, #24
 8001cfa:	f000 f9f9 	bl	80020f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cfe:	2100      	movs	r1, #0
 8001d00:	2214      	movs	r2, #20
 8001d02:	a801      	add	r0, sp, #4
 8001d04:	f000 f9f4 	bl	80020f0 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d0c:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d0e:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d10:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d12:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001d14:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d18:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d1a:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d1c:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001d1e:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d20:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d22:	f7ff f88d 	bl	8000e40 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d26:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d28:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d2c:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d2e:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d30:	4621      	mov	r1, r4
 8001d32:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d34:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d36:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d38:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d3a:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d3c:	f7ff fa48 	bl	80011d0 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8001d40:	b010      	add	sp, #64	; 0x40
 8001d42:	bd10      	pop	{r4, pc}

08001d44 <main>:

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d44:	2400      	movs	r4, #0
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b08a      	sub	sp, #40	; 0x28
  HAL_Init();
 8001d4a:	f7fe ff0d 	bl	8000b68 <HAL_Init>
  SystemClock_Config();
 8001d4e:	f7ff ffcf 	bl	8001cf0 <SystemClock_Config>
  */
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d52:	4b3d      	ldr	r3, [pc, #244]	; (8001e48 <main+0x104>)
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001d54:	4621      	mov	r1, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d56:	699a      	ldr	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001d58:	a805      	add	r0, sp, #20
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d5a:	f042 0220 	orr.w	r2, r2, #32
 8001d5e:	619a      	str	r2, [r3, #24]
 8001d60:	699a      	ldr	r2, [r3, #24]
  htim4.Init.Period = 65535;
 8001d62:	f64f 77ff 	movw	r7, #65535	; 0xffff
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d66:	f002 0220 	and.w	r2, r2, #32
 8001d6a:	9200      	str	r2, [sp, #0]
 8001d6c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d6e:	699a      	ldr	r2, [r3, #24]
  htim4.Instance = TIM4;
 8001d70:	4e36      	ldr	r6, [pc, #216]	; (8001e4c <main+0x108>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d72:	f042 0204 	orr.w	r2, r2, #4
 8001d76:	619a      	str	r2, [r3, #24]
 8001d78:	699a      	ldr	r2, [r3, #24]
  htim3.Instance = TIM3;
 8001d7a:	4d35      	ldr	r5, [pc, #212]	; (8001e50 <main+0x10c>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d7c:	f002 0204 	and.w	r2, r2, #4
 8001d80:	9201      	str	r2, [sp, #4]
 8001d82:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d84:	699a      	ldr	r2, [r3, #24]
 8001d86:	f042 0208 	orr.w	r2, r2, #8
 8001d8a:	619a      	str	r2, [r3, #24]
 8001d8c:	699b      	ldr	r3, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001d8e:	2210      	movs	r2, #16
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d90:	f003 0308 	and.w	r3, r3, #8
 8001d94:	9302      	str	r3, [sp, #8]
 8001d96:	9b02      	ldr	r3, [sp, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d98:	9403      	str	r4, [sp, #12]
 8001d9a:	9404      	str	r4, [sp, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001d9c:	f000 f9a8 	bl	80020f0 <memset>
  htim4.Init.Prescaler = 71;
 8001da0:	2347      	movs	r3, #71	; 0x47
 8001da2:	4a2c      	ldr	r2, [pc, #176]	; (8001e54 <main+0x110>)
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001da4:	4630      	mov	r0, r6
  htim4.Init.Prescaler = 71;
 8001da6:	e886 000c 	stmia.w	r6, {r2, r3}
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001daa:	60b4      	str	r4, [r6, #8]
  htim4.Init.Period = 65535;
 8001dac:	60f7      	str	r7, [r6, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dae:	6134      	str	r4, [r6, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001db0:	61b4      	str	r4, [r6, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001db2:	f7ff fc7d 	bl	80016b0 <HAL_TIM_IC_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001db6:	2320      	movs	r3, #32
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001db8:	a903      	add	r1, sp, #12
 8001dba:	4630      	mov	r0, r6
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001dbc:	9303      	str	r3, [sp, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dbe:	9404      	str	r4, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001dc0:	f7ff fdb0 	bl	8001924 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001dc4:	2301      	movs	r3, #1
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001dc6:	4622      	mov	r2, r4
 8001dc8:	a905      	add	r1, sp, #20
 8001dca:	4630      	mov	r0, r6
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001dcc:	9306      	str	r3, [sp, #24]
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001dce:	9405      	str	r4, [sp, #20]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001dd0:	9407      	str	r4, [sp, #28]
  sConfigIC.ICFilter = 0;
 8001dd2:	9408      	str	r4, [sp, #32]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001dd4:	f7ff fcb0 	bl	8001738 <HAL_TIM_IC_ConfigChannel>
  huart1.Init.BaudRate = 115200;
 8001dd8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart1.Instance = USART1;
 8001ddc:	481e      	ldr	r0, [pc, #120]	; (8001e58 <main+0x114>)
  huart1.Init.BaudRate = 115200;
 8001dde:	491f      	ldr	r1, [pc, #124]	; (8001e5c <main+0x118>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001de0:	6084      	str	r4, [r0, #8]
  huart1.Init.BaudRate = 115200;
 8001de2:	e880 000a 	stmia.w	r0, {r1, r3}
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001de6:	230c      	movs	r3, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001de8:	60c4      	str	r4, [r0, #12]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001dea:	6143      	str	r3, [r0, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001dec:	6104      	str	r4, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dee:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001df0:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001df2:	f7ff fe81 	bl	8001af8 <HAL_UART_Init>
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001df6:	2214      	movs	r2, #20
 8001df8:	4621      	mov	r1, r4
 8001dfa:	eb0d 0002 	add.w	r0, sp, r2
 8001dfe:	f000 f977 	bl	80020f0 <memset>
  htim3.Instance = TIM3;
 8001e02:	4b17      	ldr	r3, [pc, #92]	; (8001e60 <main+0x11c>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001e04:	4628      	mov	r0, r5
  htim3.Init.Prescaler = 0;
 8001e06:	e885 0018 	stmia.w	r5, {r3, r4}
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e0a:	9403      	str	r4, [sp, #12]
 8001e0c:	9404      	str	r4, [sp, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e0e:	60ac      	str	r4, [r5, #8]
  htim3.Init.Period = 65535;
 8001e10:	60ef      	str	r7, [r5, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e12:	612c      	str	r4, [r5, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e14:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001e16:	f7ff fc31 	bl	800167c <HAL_TIM_Base_Init>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8001e1a:	2307      	movs	r3, #7
 8001e1c:	9305      	str	r3, [sp, #20]
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 8001e1e:	2330      	movs	r3, #48	; 0x30
  if (HAL_TIM_SlaveConfigSynchronization(&htim3, &sSlaveConfig) != HAL_OK)
 8001e20:	a905      	add	r1, sp, #20
 8001e22:	4628      	mov	r0, r5
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 8001e24:	9306      	str	r3, [sp, #24]
  if (HAL_TIM_SlaveConfigSynchronization(&htim3, &sSlaveConfig) != HAL_OK)
 8001e26:	f7ff fb07 	bl	8001438 <HAL_TIM_SlaveConfigSynchronization>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e2a:	a903      	add	r1, sp, #12
 8001e2c:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e2e:	9403      	str	r4, [sp, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e30:	9404      	str	r4, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e32:	f7ff fd77 	bl	8001924 <HAL_TIMEx_MasterConfigSynchronization>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8001e36:	4621      	mov	r1, r4
 8001e38:	4630      	mov	r0, r6
 8001e3a:	f7ff fd11 	bl	8001860 <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start(&htim3);
 8001e3e:	4628      	mov	r0, r5
 8001e40:	f7ff faed 	bl	800141e <HAL_TIM_Base_Start>
 8001e44:	e7fe      	b.n	8001e44 <main+0x100>
 8001e46:	bf00      	nop
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	2000020c 	.word	0x2000020c
 8001e50:	2000024c 	.word	0x2000024c
 8001e54:	40000800 	.word	0x40000800
 8001e58:	2000028c 	.word	0x2000028c
 8001e5c:	40013800 	.word	0x40013800
 8001e60:	40000400 	.word	0x40000400

08001e64 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e64:	4b0e      	ldr	r3, [pc, #56]	; (8001ea0 <HAL_MspInit+0x3c>)
{
 8001e66:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e68:	699a      	ldr	r2, [r3, #24]
 8001e6a:	f042 0201 	orr.w	r2, r2, #1
 8001e6e:	619a      	str	r2, [r3, #24]
 8001e70:	699a      	ldr	r2, [r3, #24]
 8001e72:	f002 0201 	and.w	r2, r2, #1
 8001e76:	9200      	str	r2, [sp, #0]
 8001e78:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e7a:	69da      	ldr	r2, [r3, #28]
 8001e7c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001e80:	61da      	str	r2, [r3, #28]
 8001e82:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001e84:	4a07      	ldr	r2, [pc, #28]	; (8001ea4 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e8a:	9301      	str	r3, [sp, #4]
 8001e8c:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001e8e:	6853      	ldr	r3, [r2, #4]
 8001e90:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001e94:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e98:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e9a:	b002      	add	sp, #8
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	40010000 	.word	0x40010000

08001ea8 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM3)
 8001ea8:	6802      	ldr	r2, [r0, #0]
 8001eaa:	4b08      	ldr	r3, [pc, #32]	; (8001ecc <HAL_TIM_Base_MspInit+0x24>)
{
 8001eac:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM3)
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d10a      	bne.n	8001ec8 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001eb2:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 8001eb6:	69da      	ldr	r2, [r3, #28]
 8001eb8:	f042 0202 	orr.w	r2, r2, #2
 8001ebc:	61da      	str	r2, [r3, #28]
 8001ebe:	69db      	ldr	r3, [r3, #28]
 8001ec0:	f003 0302 	and.w	r3, r3, #2
 8001ec4:	9301      	str	r3, [sp, #4]
 8001ec6:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001ec8:	b002      	add	sp, #8
 8001eca:	4770      	bx	lr
 8001ecc:	40000400 	.word	0x40000400

08001ed0 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001ed0:	b510      	push	{r4, lr}
 8001ed2:	4604      	mov	r4, r0
 8001ed4:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed6:	2210      	movs	r2, #16
 8001ed8:	2100      	movs	r1, #0
 8001eda:	a802      	add	r0, sp, #8
 8001edc:	f000 f908 	bl	80020f0 <memset>
  if(htim_ic->Instance==TIM4)
 8001ee0:	6822      	ldr	r2, [r4, #0]
 8001ee2:	4b13      	ldr	r3, [pc, #76]	; (8001f30 <HAL_TIM_IC_MspInit+0x60>)
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d121      	bne.n	8001f2c <HAL_TIM_IC_MspInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ee8:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001eec:	69da      	ldr	r2, [r3, #28]
    PB6     ------> TIM4_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eee:	a902      	add	r1, sp, #8
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ef0:	f042 0204 	orr.w	r2, r2, #4
 8001ef4:	61da      	str	r2, [r3, #28]
 8001ef6:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ef8:	480e      	ldr	r0, [pc, #56]	; (8001f34 <HAL_TIM_IC_MspInit+0x64>)
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001efa:	f002 0204 	and.w	r2, r2, #4
 8001efe:	9200      	str	r2, [sp, #0]
 8001f00:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f02:	699a      	ldr	r2, [r3, #24]
 8001f04:	f042 0208 	orr.w	r2, r2, #8
 8001f08:	619a      	str	r2, [r3, #24]
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	f003 0308 	and.w	r3, r3, #8
 8001f10:	9301      	str	r3, [sp, #4]
 8001f12:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001f14:	2340      	movs	r3, #64	; 0x40
 8001f16:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f18:	f7fe feb2 	bl	8000c80 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	201e      	movs	r0, #30
 8001f20:	4611      	mov	r1, r2
 8001f22:	f7fe fe57 	bl	8000bd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001f26:	201e      	movs	r0, #30
 8001f28:	f7fe fe88 	bl	8000c3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001f2c:	b006      	add	sp, #24
 8001f2e:	bd10      	pop	{r4, pc}
 8001f30:	40000800 	.word	0x40000800
 8001f34:	40010c00 	.word	0x40010c00

08001f38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f38:	b510      	push	{r4, lr}
 8001f3a:	4604      	mov	r4, r0
 8001f3c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f3e:	2210      	movs	r2, #16
 8001f40:	2100      	movs	r1, #0
 8001f42:	a802      	add	r0, sp, #8
 8001f44:	f000 f8d4 	bl	80020f0 <memset>
  if(huart->Instance==USART1)
 8001f48:	6822      	ldr	r2, [r4, #0]
 8001f4a:	4b17      	ldr	r3, [pc, #92]	; (8001fa8 <HAL_UART_MspInit+0x70>)
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d128      	bne.n	8001fa2 <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f50:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001f54:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f56:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f58:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f5c:	619a      	str	r2, [r3, #24]
 8001f5e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f60:	4812      	ldr	r0, [pc, #72]	; (8001fac <HAL_UART_MspInit+0x74>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f62:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001f66:	9200      	str	r2, [sp, #0]
 8001f68:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f6a:	699a      	ldr	r2, [r3, #24]
 8001f6c:	f042 0204 	orr.w	r2, r2, #4
 8001f70:	619a      	str	r2, [r3, #24]
 8001f72:	699b      	ldr	r3, [r3, #24]
 8001f74:	f003 0304 	and.w	r3, r3, #4
 8001f78:	9301      	str	r3, [sp, #4]
 8001f7a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f80:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f82:	2302      	movs	r3, #2
 8001f84:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f86:	2303      	movs	r3, #3
 8001f88:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f8a:	f7fe fe79 	bl	8000c80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f92:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f94:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f96:	a902      	add	r1, sp, #8
 8001f98:	4804      	ldr	r0, [pc, #16]	; (8001fac <HAL_UART_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f9a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f9e:	f7fe fe6f 	bl	8000c80 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001fa2:	b006      	add	sp, #24
 8001fa4:	bd10      	pop	{r4, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40013800 	.word	0x40013800
 8001fac:	40010800 	.word	0x40010800

08001fb0 <NMI_Handler>:
 8001fb0:	4770      	bx	lr

08001fb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fb2:	e7fe      	b.n	8001fb2 <HardFault_Handler>

08001fb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fb4:	e7fe      	b.n	8001fb4 <MemManage_Handler>

08001fb6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fb6:	e7fe      	b.n	8001fb6 <BusFault_Handler>

08001fb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fb8:	e7fe      	b.n	8001fb8 <UsageFault_Handler>

08001fba <SVC_Handler>:
 8001fba:	4770      	bx	lr

08001fbc <DebugMon_Handler>:
 8001fbc:	4770      	bx	lr

08001fbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fbe:	4770      	bx	lr

08001fc0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fc0:	f7fe bde4 	b.w	8000b8c <HAL_IncTick>

08001fc4 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001fc4:	4801      	ldr	r0, [pc, #4]	; (8001fcc <TIM4_IRQHandler+0x8>)
 8001fc6:	f7ff ba7e 	b.w	80014c6 <HAL_TIM_IRQHandler>
 8001fca:	bf00      	nop
 8001fcc:	2000020c 	.word	0x2000020c

08001fd0 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8001fd0:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001fd2:	4b0a      	ldr	r3, [pc, #40]	; (8001ffc <_sbrk+0x2c>)
{
 8001fd4:	4602      	mov	r2, r0
	if (heap_end == 0)
 8001fd6:	6819      	ldr	r1, [r3, #0]
 8001fd8:	b909      	cbnz	r1, 8001fde <_sbrk+0xe>
		heap_end = &end;
 8001fda:	4909      	ldr	r1, [pc, #36]	; (8002000 <_sbrk+0x30>)
 8001fdc:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8001fde:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8001fe0:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8001fe2:	4402      	add	r2, r0
 8001fe4:	428a      	cmp	r2, r1
 8001fe6:	d906      	bls.n	8001ff6 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001fe8:	f000 f858 	bl	800209c <__errno>
 8001fec:	230c      	movs	r3, #12
 8001fee:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8001ff0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ff4:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8001ff6:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8001ff8:	bd08      	pop	{r3, pc}
 8001ffa:	bf00      	nop
 8001ffc:	200001fc 	.word	0x200001fc
 8002000:	200002d0 	.word	0x200002d0

08002004 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002004:	4b0f      	ldr	r3, [pc, #60]	; (8002044 <SystemInit+0x40>)
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	f042 0201 	orr.w	r2, r2, #1
 800200c:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800200e:	6859      	ldr	r1, [r3, #4]
 8002010:	4a0d      	ldr	r2, [pc, #52]	; (8002048 <SystemInit+0x44>)
 8002012:	400a      	ands	r2, r1
 8002014:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800201c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002020:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002028:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800202a:	685a      	ldr	r2, [r3, #4]
 800202c:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002030:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002032:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002036:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002038:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800203c:	4b03      	ldr	r3, [pc, #12]	; (800204c <SystemInit+0x48>)
 800203e:	609a      	str	r2, [r3, #8]
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	40021000 	.word	0x40021000
 8002048:	f8ff0000 	.word	0xf8ff0000
 800204c:	e000ed00 	.word	0xe000ed00

08002050 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002050:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002052:	e003      	b.n	800205c <LoopCopyDataInit>

08002054 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002054:	4b0b      	ldr	r3, [pc, #44]	; (8002084 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002056:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002058:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800205a:	3104      	adds	r1, #4

0800205c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800205c:	480a      	ldr	r0, [pc, #40]	; (8002088 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800205e:	4b0b      	ldr	r3, [pc, #44]	; (800208c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002060:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002062:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002064:	d3f6      	bcc.n	8002054 <CopyDataInit>
  ldr r2, =_sbss
 8002066:	4a0a      	ldr	r2, [pc, #40]	; (8002090 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002068:	e002      	b.n	8002070 <LoopFillZerobss>

0800206a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800206a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800206c:	f842 3b04 	str.w	r3, [r2], #4

08002070 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002070:	4b08      	ldr	r3, [pc, #32]	; (8002094 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002072:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002074:	d3f9      	bcc.n	800206a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002076:	f7ff ffc5 	bl	8002004 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800207a:	f000 f815 	bl	80020a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800207e:	f7ff fe61 	bl	8001d44 <main>
  bx lr
 8002082:	4770      	bx	lr
  ldr r3, =_sidata
 8002084:	080044b0 	.word	0x080044b0
  ldr r0, =_sdata
 8002088:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800208c:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 8002090:	200001dc 	.word	0x200001dc
  ldr r3, = _ebss
 8002094:	200002d0 	.word	0x200002d0

08002098 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002098:	e7fe      	b.n	8002098 <ADC1_2_IRQHandler>
	...

0800209c <__errno>:
 800209c:	4b01      	ldr	r3, [pc, #4]	; (80020a4 <__errno+0x8>)
 800209e:	6818      	ldr	r0, [r3, #0]
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	2000000c 	.word	0x2000000c

080020a8 <__libc_init_array>:
 80020a8:	b570      	push	{r4, r5, r6, lr}
 80020aa:	2500      	movs	r5, #0
 80020ac:	4e0c      	ldr	r6, [pc, #48]	; (80020e0 <__libc_init_array+0x38>)
 80020ae:	4c0d      	ldr	r4, [pc, #52]	; (80020e4 <__libc_init_array+0x3c>)
 80020b0:	1ba4      	subs	r4, r4, r6
 80020b2:	10a4      	asrs	r4, r4, #2
 80020b4:	42a5      	cmp	r5, r4
 80020b6:	d109      	bne.n	80020cc <__libc_init_array+0x24>
 80020b8:	f002 f89c 	bl	80041f4 <_init>
 80020bc:	2500      	movs	r5, #0
 80020be:	4e0a      	ldr	r6, [pc, #40]	; (80020e8 <__libc_init_array+0x40>)
 80020c0:	4c0a      	ldr	r4, [pc, #40]	; (80020ec <__libc_init_array+0x44>)
 80020c2:	1ba4      	subs	r4, r4, r6
 80020c4:	10a4      	asrs	r4, r4, #2
 80020c6:	42a5      	cmp	r5, r4
 80020c8:	d105      	bne.n	80020d6 <__libc_init_array+0x2e>
 80020ca:	bd70      	pop	{r4, r5, r6, pc}
 80020cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80020d0:	4798      	blx	r3
 80020d2:	3501      	adds	r5, #1
 80020d4:	e7ee      	b.n	80020b4 <__libc_init_array+0xc>
 80020d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80020da:	4798      	blx	r3
 80020dc:	3501      	adds	r5, #1
 80020de:	e7f2      	b.n	80020c6 <__libc_init_array+0x1e>
 80020e0:	080044a8 	.word	0x080044a8
 80020e4:	080044a8 	.word	0x080044a8
 80020e8:	080044a8 	.word	0x080044a8
 80020ec:	080044ac 	.word	0x080044ac

080020f0 <memset>:
 80020f0:	4603      	mov	r3, r0
 80020f2:	4402      	add	r2, r0
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d100      	bne.n	80020fa <memset+0xa>
 80020f8:	4770      	bx	lr
 80020fa:	f803 1b01 	strb.w	r1, [r3], #1
 80020fe:	e7f9      	b.n	80020f4 <memset+0x4>

08002100 <__cvt>:
 8002100:	2b00      	cmp	r3, #0
 8002102:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002106:	461e      	mov	r6, r3
 8002108:	bfbb      	ittet	lt
 800210a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800210e:	461e      	movlt	r6, r3
 8002110:	2300      	movge	r3, #0
 8002112:	232d      	movlt	r3, #45	; 0x2d
 8002114:	b088      	sub	sp, #32
 8002116:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8002118:	9912      	ldr	r1, [sp, #72]	; 0x48
 800211a:	f027 0720 	bic.w	r7, r7, #32
 800211e:	2f46      	cmp	r7, #70	; 0x46
 8002120:	4614      	mov	r4, r2
 8002122:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8002124:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8002128:	700b      	strb	r3, [r1, #0]
 800212a:	d004      	beq.n	8002136 <__cvt+0x36>
 800212c:	2f45      	cmp	r7, #69	; 0x45
 800212e:	d100      	bne.n	8002132 <__cvt+0x32>
 8002130:	3501      	adds	r5, #1
 8002132:	2302      	movs	r3, #2
 8002134:	e000      	b.n	8002138 <__cvt+0x38>
 8002136:	2303      	movs	r3, #3
 8002138:	aa07      	add	r2, sp, #28
 800213a:	9204      	str	r2, [sp, #16]
 800213c:	aa06      	add	r2, sp, #24
 800213e:	9203      	str	r2, [sp, #12]
 8002140:	e88d 0428 	stmia.w	sp, {r3, r5, sl}
 8002144:	4622      	mov	r2, r4
 8002146:	4633      	mov	r3, r6
 8002148:	f000 fcfe 	bl	8002b48 <_dtoa_r>
 800214c:	2f47      	cmp	r7, #71	; 0x47
 800214e:	4680      	mov	r8, r0
 8002150:	d102      	bne.n	8002158 <__cvt+0x58>
 8002152:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002154:	07db      	lsls	r3, r3, #31
 8002156:	d526      	bpl.n	80021a6 <__cvt+0xa6>
 8002158:	2f46      	cmp	r7, #70	; 0x46
 800215a:	eb08 0905 	add.w	r9, r8, r5
 800215e:	d111      	bne.n	8002184 <__cvt+0x84>
 8002160:	f898 3000 	ldrb.w	r3, [r8]
 8002164:	2b30      	cmp	r3, #48	; 0x30
 8002166:	d10a      	bne.n	800217e <__cvt+0x7e>
 8002168:	2200      	movs	r2, #0
 800216a:	2300      	movs	r3, #0
 800216c:	4620      	mov	r0, r4
 800216e:	4631      	mov	r1, r6
 8002170:	f7fe fc16 	bl	80009a0 <__aeabi_dcmpeq>
 8002174:	b918      	cbnz	r0, 800217e <__cvt+0x7e>
 8002176:	f1c5 0501 	rsb	r5, r5, #1
 800217a:	f8ca 5000 	str.w	r5, [sl]
 800217e:	f8da 3000 	ldr.w	r3, [sl]
 8002182:	4499      	add	r9, r3
 8002184:	2200      	movs	r2, #0
 8002186:	2300      	movs	r3, #0
 8002188:	4620      	mov	r0, r4
 800218a:	4631      	mov	r1, r6
 800218c:	f7fe fc08 	bl	80009a0 <__aeabi_dcmpeq>
 8002190:	b938      	cbnz	r0, 80021a2 <__cvt+0xa2>
 8002192:	2230      	movs	r2, #48	; 0x30
 8002194:	9b07      	ldr	r3, [sp, #28]
 8002196:	4599      	cmp	r9, r3
 8002198:	d905      	bls.n	80021a6 <__cvt+0xa6>
 800219a:	1c59      	adds	r1, r3, #1
 800219c:	9107      	str	r1, [sp, #28]
 800219e:	701a      	strb	r2, [r3, #0]
 80021a0:	e7f8      	b.n	8002194 <__cvt+0x94>
 80021a2:	f8cd 901c 	str.w	r9, [sp, #28]
 80021a6:	4640      	mov	r0, r8
 80021a8:	9b07      	ldr	r3, [sp, #28]
 80021aa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80021ac:	eba3 0308 	sub.w	r3, r3, r8
 80021b0:	6013      	str	r3, [r2, #0]
 80021b2:	b008      	add	sp, #32
 80021b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080021b8 <__exponent>:
 80021b8:	4603      	mov	r3, r0
 80021ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80021bc:	2900      	cmp	r1, #0
 80021be:	f803 2b02 	strb.w	r2, [r3], #2
 80021c2:	bfb6      	itet	lt
 80021c4:	222d      	movlt	r2, #45	; 0x2d
 80021c6:	222b      	movge	r2, #43	; 0x2b
 80021c8:	4249      	neglt	r1, r1
 80021ca:	2909      	cmp	r1, #9
 80021cc:	7042      	strb	r2, [r0, #1]
 80021ce:	dd21      	ble.n	8002214 <__exponent+0x5c>
 80021d0:	f10d 0207 	add.w	r2, sp, #7
 80021d4:	4617      	mov	r7, r2
 80021d6:	260a      	movs	r6, #10
 80021d8:	fb91 f5f6 	sdiv	r5, r1, r6
 80021dc:	fb06 1115 	mls	r1, r6, r5, r1
 80021e0:	2d09      	cmp	r5, #9
 80021e2:	f101 0130 	add.w	r1, r1, #48	; 0x30
 80021e6:	f802 1c01 	strb.w	r1, [r2, #-1]
 80021ea:	f102 34ff 	add.w	r4, r2, #4294967295	; 0xffffffff
 80021ee:	4629      	mov	r1, r5
 80021f0:	dc09      	bgt.n	8002206 <__exponent+0x4e>
 80021f2:	3130      	adds	r1, #48	; 0x30
 80021f4:	3a02      	subs	r2, #2
 80021f6:	f804 1c01 	strb.w	r1, [r4, #-1]
 80021fa:	42ba      	cmp	r2, r7
 80021fc:	461c      	mov	r4, r3
 80021fe:	d304      	bcc.n	800220a <__exponent+0x52>
 8002200:	1a20      	subs	r0, r4, r0
 8002202:	b003      	add	sp, #12
 8002204:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002206:	4622      	mov	r2, r4
 8002208:	e7e6      	b.n	80021d8 <__exponent+0x20>
 800220a:	f812 1b01 	ldrb.w	r1, [r2], #1
 800220e:	f803 1b01 	strb.w	r1, [r3], #1
 8002212:	e7f2      	b.n	80021fa <__exponent+0x42>
 8002214:	2230      	movs	r2, #48	; 0x30
 8002216:	461c      	mov	r4, r3
 8002218:	4411      	add	r1, r2
 800221a:	f804 2b02 	strb.w	r2, [r4], #2
 800221e:	7059      	strb	r1, [r3, #1]
 8002220:	e7ee      	b.n	8002200 <__exponent+0x48>
	...

08002224 <_printf_float>:
 8002224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002228:	b091      	sub	sp, #68	; 0x44
 800222a:	460c      	mov	r4, r1
 800222c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800222e:	4693      	mov	fp, r2
 8002230:	461e      	mov	r6, r3
 8002232:	4605      	mov	r5, r0
 8002234:	f001 fa5c 	bl	80036f0 <_localeconv_r>
 8002238:	6803      	ldr	r3, [r0, #0]
 800223a:	4618      	mov	r0, r3
 800223c:	9309      	str	r3, [sp, #36]	; 0x24
 800223e:	f7fd ff87 	bl	8000150 <strlen>
 8002242:	2300      	movs	r3, #0
 8002244:	930e      	str	r3, [sp, #56]	; 0x38
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	900a      	str	r0, [sp, #40]	; 0x28
 800224a:	3307      	adds	r3, #7
 800224c:	f023 0307 	bic.w	r3, r3, #7
 8002250:	f103 0208 	add.w	r2, r3, #8
 8002254:	f894 8018 	ldrb.w	r8, [r4, #24]
 8002258:	f8d4 a000 	ldr.w	sl, [r4]
 800225c:	603a      	str	r2, [r7, #0]
 800225e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002262:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002266:	f8d4 904c 	ldr.w	r9, [r4, #76]	; 0x4c
 800226a:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 800226c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8002270:	930b      	str	r3, [sp, #44]	; 0x2c
 8002272:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002276:	4ba6      	ldr	r3, [pc, #664]	; (8002510 <_printf_float+0x2ec>)
 8002278:	4638      	mov	r0, r7
 800227a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800227c:	f7fe fbc2 	bl	8000a04 <__aeabi_dcmpun>
 8002280:	2800      	cmp	r0, #0
 8002282:	f040 81f7 	bne.w	8002674 <_printf_float+0x450>
 8002286:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800228a:	4ba1      	ldr	r3, [pc, #644]	; (8002510 <_printf_float+0x2ec>)
 800228c:	4638      	mov	r0, r7
 800228e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002290:	f7fe fb9a 	bl	80009c8 <__aeabi_dcmple>
 8002294:	2800      	cmp	r0, #0
 8002296:	f040 81ed 	bne.w	8002674 <_printf_float+0x450>
 800229a:	2200      	movs	r2, #0
 800229c:	2300      	movs	r3, #0
 800229e:	4638      	mov	r0, r7
 80022a0:	4649      	mov	r1, r9
 80022a2:	f7fe fb87 	bl	80009b4 <__aeabi_dcmplt>
 80022a6:	b110      	cbz	r0, 80022ae <_printf_float+0x8a>
 80022a8:	232d      	movs	r3, #45	; 0x2d
 80022aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80022ae:	4b99      	ldr	r3, [pc, #612]	; (8002514 <_printf_float+0x2f0>)
 80022b0:	4f99      	ldr	r7, [pc, #612]	; (8002518 <_printf_float+0x2f4>)
 80022b2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80022b6:	bf98      	it	ls
 80022b8:	461f      	movls	r7, r3
 80022ba:	2303      	movs	r3, #3
 80022bc:	f04f 0900 	mov.w	r9, #0
 80022c0:	6123      	str	r3, [r4, #16]
 80022c2:	f02a 0304 	bic.w	r3, sl, #4
 80022c6:	6023      	str	r3, [r4, #0]
 80022c8:	9600      	str	r6, [sp, #0]
 80022ca:	465b      	mov	r3, fp
 80022cc:	aa0f      	add	r2, sp, #60	; 0x3c
 80022ce:	4621      	mov	r1, r4
 80022d0:	4628      	mov	r0, r5
 80022d2:	f000 f9df 	bl	8002694 <_printf_common>
 80022d6:	3001      	adds	r0, #1
 80022d8:	f040 809a 	bne.w	8002410 <_printf_float+0x1ec>
 80022dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022e0:	b011      	add	sp, #68	; 0x44
 80022e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80022e6:	6862      	ldr	r2, [r4, #4]
 80022e8:	a80e      	add	r0, sp, #56	; 0x38
 80022ea:	1c53      	adds	r3, r2, #1
 80022ec:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
 80022f0:	f44a 6380 	orr.w	r3, sl, #1024	; 0x400
 80022f4:	d141      	bne.n	800237a <_printf_float+0x156>
 80022f6:	2206      	movs	r2, #6
 80022f8:	6062      	str	r2, [r4, #4]
 80022fa:	2100      	movs	r1, #0
 80022fc:	6023      	str	r3, [r4, #0]
 80022fe:	9301      	str	r3, [sp, #4]
 8002300:	6863      	ldr	r3, [r4, #4]
 8002302:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8002306:	9005      	str	r0, [sp, #20]
 8002308:	9202      	str	r2, [sp, #8]
 800230a:	9300      	str	r3, [sp, #0]
 800230c:	463a      	mov	r2, r7
 800230e:	464b      	mov	r3, r9
 8002310:	9106      	str	r1, [sp, #24]
 8002312:	f8cd 8010 	str.w	r8, [sp, #16]
 8002316:	f8cd e00c 	str.w	lr, [sp, #12]
 800231a:	4628      	mov	r0, r5
 800231c:	f7ff fef0 	bl	8002100 <__cvt>
 8002320:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8002324:	2b47      	cmp	r3, #71	; 0x47
 8002326:	4607      	mov	r7, r0
 8002328:	d109      	bne.n	800233e <_printf_float+0x11a>
 800232a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800232c:	1cd8      	adds	r0, r3, #3
 800232e:	db02      	blt.n	8002336 <_printf_float+0x112>
 8002330:	6862      	ldr	r2, [r4, #4]
 8002332:	4293      	cmp	r3, r2
 8002334:	dd59      	ble.n	80023ea <_printf_float+0x1c6>
 8002336:	f1a8 0802 	sub.w	r8, r8, #2
 800233a:	fa5f f888 	uxtb.w	r8, r8
 800233e:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8002342:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002344:	d836      	bhi.n	80023b4 <_printf_float+0x190>
 8002346:	3901      	subs	r1, #1
 8002348:	4642      	mov	r2, r8
 800234a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800234e:	910d      	str	r1, [sp, #52]	; 0x34
 8002350:	f7ff ff32 	bl	80021b8 <__exponent>
 8002354:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002356:	4681      	mov	r9, r0
 8002358:	1883      	adds	r3, r0, r2
 800235a:	2a01      	cmp	r2, #1
 800235c:	6123      	str	r3, [r4, #16]
 800235e:	dc02      	bgt.n	8002366 <_printf_float+0x142>
 8002360:	6822      	ldr	r2, [r4, #0]
 8002362:	07d1      	lsls	r1, r2, #31
 8002364:	d501      	bpl.n	800236a <_printf_float+0x146>
 8002366:	3301      	adds	r3, #1
 8002368:	6123      	str	r3, [r4, #16]
 800236a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800236e:	2b00      	cmp	r3, #0
 8002370:	d0aa      	beq.n	80022c8 <_printf_float+0xa4>
 8002372:	232d      	movs	r3, #45	; 0x2d
 8002374:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002378:	e7a6      	b.n	80022c8 <_printf_float+0xa4>
 800237a:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 800237e:	d002      	beq.n	8002386 <_printf_float+0x162>
 8002380:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002384:	d1b9      	bne.n	80022fa <_printf_float+0xd6>
 8002386:	b19a      	cbz	r2, 80023b0 <_printf_float+0x18c>
 8002388:	2100      	movs	r1, #0
 800238a:	9106      	str	r1, [sp, #24]
 800238c:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8002390:	e88d 000c 	stmia.w	sp, {r2, r3}
 8002394:	6023      	str	r3, [r4, #0]
 8002396:	9005      	str	r0, [sp, #20]
 8002398:	463a      	mov	r2, r7
 800239a:	f8cd 8010 	str.w	r8, [sp, #16]
 800239e:	f8cd e00c 	str.w	lr, [sp, #12]
 80023a2:	9102      	str	r1, [sp, #8]
 80023a4:	464b      	mov	r3, r9
 80023a6:	4628      	mov	r0, r5
 80023a8:	f7ff feaa 	bl	8002100 <__cvt>
 80023ac:	4607      	mov	r7, r0
 80023ae:	e7bc      	b.n	800232a <_printf_float+0x106>
 80023b0:	2201      	movs	r2, #1
 80023b2:	e7a1      	b.n	80022f8 <_printf_float+0xd4>
 80023b4:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80023b8:	d119      	bne.n	80023ee <_printf_float+0x1ca>
 80023ba:	2900      	cmp	r1, #0
 80023bc:	6863      	ldr	r3, [r4, #4]
 80023be:	dd0c      	ble.n	80023da <_printf_float+0x1b6>
 80023c0:	6121      	str	r1, [r4, #16]
 80023c2:	b913      	cbnz	r3, 80023ca <_printf_float+0x1a6>
 80023c4:	6822      	ldr	r2, [r4, #0]
 80023c6:	07d2      	lsls	r2, r2, #31
 80023c8:	d502      	bpl.n	80023d0 <_printf_float+0x1ac>
 80023ca:	3301      	adds	r3, #1
 80023cc:	440b      	add	r3, r1
 80023ce:	6123      	str	r3, [r4, #16]
 80023d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80023d2:	f04f 0900 	mov.w	r9, #0
 80023d6:	65a3      	str	r3, [r4, #88]	; 0x58
 80023d8:	e7c7      	b.n	800236a <_printf_float+0x146>
 80023da:	b913      	cbnz	r3, 80023e2 <_printf_float+0x1be>
 80023dc:	6822      	ldr	r2, [r4, #0]
 80023de:	07d0      	lsls	r0, r2, #31
 80023e0:	d501      	bpl.n	80023e6 <_printf_float+0x1c2>
 80023e2:	3302      	adds	r3, #2
 80023e4:	e7f3      	b.n	80023ce <_printf_float+0x1aa>
 80023e6:	2301      	movs	r3, #1
 80023e8:	e7f1      	b.n	80023ce <_printf_float+0x1aa>
 80023ea:	f04f 0867 	mov.w	r8, #103	; 0x67
 80023ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80023f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80023f2:	4293      	cmp	r3, r2
 80023f4:	db05      	blt.n	8002402 <_printf_float+0x1de>
 80023f6:	6822      	ldr	r2, [r4, #0]
 80023f8:	6123      	str	r3, [r4, #16]
 80023fa:	07d1      	lsls	r1, r2, #31
 80023fc:	d5e8      	bpl.n	80023d0 <_printf_float+0x1ac>
 80023fe:	3301      	adds	r3, #1
 8002400:	e7e5      	b.n	80023ce <_printf_float+0x1aa>
 8002402:	2b00      	cmp	r3, #0
 8002404:	bfcc      	ite	gt
 8002406:	2301      	movgt	r3, #1
 8002408:	f1c3 0302 	rsble	r3, r3, #2
 800240c:	4413      	add	r3, r2
 800240e:	e7de      	b.n	80023ce <_printf_float+0x1aa>
 8002410:	6823      	ldr	r3, [r4, #0]
 8002412:	055a      	lsls	r2, r3, #21
 8002414:	d407      	bmi.n	8002426 <_printf_float+0x202>
 8002416:	6923      	ldr	r3, [r4, #16]
 8002418:	463a      	mov	r2, r7
 800241a:	4659      	mov	r1, fp
 800241c:	4628      	mov	r0, r5
 800241e:	47b0      	blx	r6
 8002420:	3001      	adds	r0, #1
 8002422:	d12a      	bne.n	800247a <_printf_float+0x256>
 8002424:	e75a      	b.n	80022dc <_printf_float+0xb8>
 8002426:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800242a:	f240 80dc 	bls.w	80025e6 <_printf_float+0x3c2>
 800242e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002432:	2200      	movs	r2, #0
 8002434:	2300      	movs	r3, #0
 8002436:	f7fe fab3 	bl	80009a0 <__aeabi_dcmpeq>
 800243a:	2800      	cmp	r0, #0
 800243c:	d039      	beq.n	80024b2 <_printf_float+0x28e>
 800243e:	2301      	movs	r3, #1
 8002440:	4a36      	ldr	r2, [pc, #216]	; (800251c <_printf_float+0x2f8>)
 8002442:	4659      	mov	r1, fp
 8002444:	4628      	mov	r0, r5
 8002446:	47b0      	blx	r6
 8002448:	3001      	adds	r0, #1
 800244a:	f43f af47 	beq.w	80022dc <_printf_float+0xb8>
 800244e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002450:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002452:	429a      	cmp	r2, r3
 8002454:	db02      	blt.n	800245c <_printf_float+0x238>
 8002456:	6823      	ldr	r3, [r4, #0]
 8002458:	07d8      	lsls	r0, r3, #31
 800245a:	d50e      	bpl.n	800247a <_printf_float+0x256>
 800245c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800245e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002460:	4659      	mov	r1, fp
 8002462:	4628      	mov	r0, r5
 8002464:	47b0      	blx	r6
 8002466:	3001      	adds	r0, #1
 8002468:	f43f af38 	beq.w	80022dc <_printf_float+0xb8>
 800246c:	2700      	movs	r7, #0
 800246e:	f104 081a 	add.w	r8, r4, #26
 8002472:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002474:	3b01      	subs	r3, #1
 8002476:	429f      	cmp	r7, r3
 8002478:	db11      	blt.n	800249e <_printf_float+0x27a>
 800247a:	6823      	ldr	r3, [r4, #0]
 800247c:	079f      	lsls	r7, r3, #30
 800247e:	d508      	bpl.n	8002492 <_printf_float+0x26e>
 8002480:	2700      	movs	r7, #0
 8002482:	f104 0819 	add.w	r8, r4, #25
 8002486:	68e3      	ldr	r3, [r4, #12]
 8002488:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800248a:	1a9b      	subs	r3, r3, r2
 800248c:	429f      	cmp	r7, r3
 800248e:	f2c0 80e7 	blt.w	8002660 <_printf_float+0x43c>
 8002492:	68e0      	ldr	r0, [r4, #12]
 8002494:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002496:	4298      	cmp	r0, r3
 8002498:	bfb8      	it	lt
 800249a:	4618      	movlt	r0, r3
 800249c:	e720      	b.n	80022e0 <_printf_float+0xbc>
 800249e:	2301      	movs	r3, #1
 80024a0:	4642      	mov	r2, r8
 80024a2:	4659      	mov	r1, fp
 80024a4:	4628      	mov	r0, r5
 80024a6:	47b0      	blx	r6
 80024a8:	3001      	adds	r0, #1
 80024aa:	f43f af17 	beq.w	80022dc <_printf_float+0xb8>
 80024ae:	3701      	adds	r7, #1
 80024b0:	e7df      	b.n	8002472 <_printf_float+0x24e>
 80024b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	dc33      	bgt.n	8002520 <_printf_float+0x2fc>
 80024b8:	2301      	movs	r3, #1
 80024ba:	4a18      	ldr	r2, [pc, #96]	; (800251c <_printf_float+0x2f8>)
 80024bc:	4659      	mov	r1, fp
 80024be:	4628      	mov	r0, r5
 80024c0:	47b0      	blx	r6
 80024c2:	3001      	adds	r0, #1
 80024c4:	f43f af0a 	beq.w	80022dc <_printf_float+0xb8>
 80024c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80024ca:	b923      	cbnz	r3, 80024d6 <_printf_float+0x2b2>
 80024cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80024ce:	b913      	cbnz	r3, 80024d6 <_printf_float+0x2b2>
 80024d0:	6823      	ldr	r3, [r4, #0]
 80024d2:	07d9      	lsls	r1, r3, #31
 80024d4:	d5d1      	bpl.n	800247a <_printf_float+0x256>
 80024d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80024d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80024da:	4659      	mov	r1, fp
 80024dc:	4628      	mov	r0, r5
 80024de:	47b0      	blx	r6
 80024e0:	3001      	adds	r0, #1
 80024e2:	f43f aefb 	beq.w	80022dc <_printf_float+0xb8>
 80024e6:	f04f 0800 	mov.w	r8, #0
 80024ea:	f104 091a 	add.w	r9, r4, #26
 80024ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80024f0:	425b      	negs	r3, r3
 80024f2:	4598      	cmp	r8, r3
 80024f4:	db01      	blt.n	80024fa <_printf_float+0x2d6>
 80024f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80024f8:	e78e      	b.n	8002418 <_printf_float+0x1f4>
 80024fa:	2301      	movs	r3, #1
 80024fc:	464a      	mov	r2, r9
 80024fe:	4659      	mov	r1, fp
 8002500:	4628      	mov	r0, r5
 8002502:	47b0      	blx	r6
 8002504:	3001      	adds	r0, #1
 8002506:	f43f aee9 	beq.w	80022dc <_printf_float+0xb8>
 800250a:	f108 0801 	add.w	r8, r8, #1
 800250e:	e7ee      	b.n	80024ee <_printf_float+0x2ca>
 8002510:	7fefffff 	.word	0x7fefffff
 8002514:	0800424f 	.word	0x0800424f
 8002518:	08004253 	.word	0x08004253
 800251c:	0800425f 	.word	0x0800425f
 8002520:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002522:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002524:	429a      	cmp	r2, r3
 8002526:	bfa8      	it	ge
 8002528:	461a      	movge	r2, r3
 800252a:	2a00      	cmp	r2, #0
 800252c:	4690      	mov	r8, r2
 800252e:	dc36      	bgt.n	800259e <_printf_float+0x37a>
 8002530:	f04f 0a00 	mov.w	sl, #0
 8002534:	f104 031a 	add.w	r3, r4, #26
 8002538:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 800253c:	930b      	str	r3, [sp, #44]	; 0x2c
 800253e:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8002542:	eba9 0308 	sub.w	r3, r9, r8
 8002546:	459a      	cmp	sl, r3
 8002548:	db31      	blt.n	80025ae <_printf_float+0x38a>
 800254a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800254c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800254e:	429a      	cmp	r2, r3
 8002550:	db38      	blt.n	80025c4 <_printf_float+0x3a0>
 8002552:	6823      	ldr	r3, [r4, #0]
 8002554:	07da      	lsls	r2, r3, #31
 8002556:	d435      	bmi.n	80025c4 <_printf_float+0x3a0>
 8002558:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800255a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800255c:	eba3 0209 	sub.w	r2, r3, r9
 8002560:	eba3 0801 	sub.w	r8, r3, r1
 8002564:	4590      	cmp	r8, r2
 8002566:	bfa8      	it	ge
 8002568:	4690      	movge	r8, r2
 800256a:	f1b8 0f00 	cmp.w	r8, #0
 800256e:	dc31      	bgt.n	80025d4 <_printf_float+0x3b0>
 8002570:	2700      	movs	r7, #0
 8002572:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8002576:	f104 091a 	add.w	r9, r4, #26
 800257a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800257c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800257e:	1a9b      	subs	r3, r3, r2
 8002580:	eba3 0308 	sub.w	r3, r3, r8
 8002584:	429f      	cmp	r7, r3
 8002586:	f6bf af78 	bge.w	800247a <_printf_float+0x256>
 800258a:	2301      	movs	r3, #1
 800258c:	464a      	mov	r2, r9
 800258e:	4659      	mov	r1, fp
 8002590:	4628      	mov	r0, r5
 8002592:	47b0      	blx	r6
 8002594:	3001      	adds	r0, #1
 8002596:	f43f aea1 	beq.w	80022dc <_printf_float+0xb8>
 800259a:	3701      	adds	r7, #1
 800259c:	e7ed      	b.n	800257a <_printf_float+0x356>
 800259e:	4613      	mov	r3, r2
 80025a0:	4659      	mov	r1, fp
 80025a2:	463a      	mov	r2, r7
 80025a4:	4628      	mov	r0, r5
 80025a6:	47b0      	blx	r6
 80025a8:	3001      	adds	r0, #1
 80025aa:	d1c1      	bne.n	8002530 <_printf_float+0x30c>
 80025ac:	e696      	b.n	80022dc <_printf_float+0xb8>
 80025ae:	2301      	movs	r3, #1
 80025b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80025b2:	4659      	mov	r1, fp
 80025b4:	4628      	mov	r0, r5
 80025b6:	47b0      	blx	r6
 80025b8:	3001      	adds	r0, #1
 80025ba:	f43f ae8f 	beq.w	80022dc <_printf_float+0xb8>
 80025be:	f10a 0a01 	add.w	sl, sl, #1
 80025c2:	e7bc      	b.n	800253e <_printf_float+0x31a>
 80025c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80025c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80025c8:	4659      	mov	r1, fp
 80025ca:	4628      	mov	r0, r5
 80025cc:	47b0      	blx	r6
 80025ce:	3001      	adds	r0, #1
 80025d0:	d1c2      	bne.n	8002558 <_printf_float+0x334>
 80025d2:	e683      	b.n	80022dc <_printf_float+0xb8>
 80025d4:	4643      	mov	r3, r8
 80025d6:	eb07 0209 	add.w	r2, r7, r9
 80025da:	4659      	mov	r1, fp
 80025dc:	4628      	mov	r0, r5
 80025de:	47b0      	blx	r6
 80025e0:	3001      	adds	r0, #1
 80025e2:	d1c5      	bne.n	8002570 <_printf_float+0x34c>
 80025e4:	e67a      	b.n	80022dc <_printf_float+0xb8>
 80025e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80025e8:	2a01      	cmp	r2, #1
 80025ea:	dc01      	bgt.n	80025f0 <_printf_float+0x3cc>
 80025ec:	07db      	lsls	r3, r3, #31
 80025ee:	d534      	bpl.n	800265a <_printf_float+0x436>
 80025f0:	2301      	movs	r3, #1
 80025f2:	463a      	mov	r2, r7
 80025f4:	4659      	mov	r1, fp
 80025f6:	4628      	mov	r0, r5
 80025f8:	47b0      	blx	r6
 80025fa:	3001      	adds	r0, #1
 80025fc:	f43f ae6e 	beq.w	80022dc <_printf_float+0xb8>
 8002600:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002602:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002604:	4659      	mov	r1, fp
 8002606:	4628      	mov	r0, r5
 8002608:	47b0      	blx	r6
 800260a:	3001      	adds	r0, #1
 800260c:	f43f ae66 	beq.w	80022dc <_printf_float+0xb8>
 8002610:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002614:	2200      	movs	r2, #0
 8002616:	2300      	movs	r3, #0
 8002618:	f7fe f9c2 	bl	80009a0 <__aeabi_dcmpeq>
 800261c:	b150      	cbz	r0, 8002634 <_printf_float+0x410>
 800261e:	2700      	movs	r7, #0
 8002620:	f104 081a 	add.w	r8, r4, #26
 8002624:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002626:	3b01      	subs	r3, #1
 8002628:	429f      	cmp	r7, r3
 800262a:	db0c      	blt.n	8002646 <_printf_float+0x422>
 800262c:	464b      	mov	r3, r9
 800262e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002632:	e6f2      	b.n	800241a <_printf_float+0x1f6>
 8002634:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002636:	1c7a      	adds	r2, r7, #1
 8002638:	3b01      	subs	r3, #1
 800263a:	4659      	mov	r1, fp
 800263c:	4628      	mov	r0, r5
 800263e:	47b0      	blx	r6
 8002640:	3001      	adds	r0, #1
 8002642:	d1f3      	bne.n	800262c <_printf_float+0x408>
 8002644:	e64a      	b.n	80022dc <_printf_float+0xb8>
 8002646:	2301      	movs	r3, #1
 8002648:	4642      	mov	r2, r8
 800264a:	4659      	mov	r1, fp
 800264c:	4628      	mov	r0, r5
 800264e:	47b0      	blx	r6
 8002650:	3001      	adds	r0, #1
 8002652:	f43f ae43 	beq.w	80022dc <_printf_float+0xb8>
 8002656:	3701      	adds	r7, #1
 8002658:	e7e4      	b.n	8002624 <_printf_float+0x400>
 800265a:	2301      	movs	r3, #1
 800265c:	463a      	mov	r2, r7
 800265e:	e7ec      	b.n	800263a <_printf_float+0x416>
 8002660:	2301      	movs	r3, #1
 8002662:	4642      	mov	r2, r8
 8002664:	4659      	mov	r1, fp
 8002666:	4628      	mov	r0, r5
 8002668:	47b0      	blx	r6
 800266a:	3001      	adds	r0, #1
 800266c:	f43f ae36 	beq.w	80022dc <_printf_float+0xb8>
 8002670:	3701      	adds	r7, #1
 8002672:	e708      	b.n	8002486 <_printf_float+0x262>
 8002674:	463a      	mov	r2, r7
 8002676:	464b      	mov	r3, r9
 8002678:	4638      	mov	r0, r7
 800267a:	4649      	mov	r1, r9
 800267c:	f7fe f9c2 	bl	8000a04 <__aeabi_dcmpun>
 8002680:	2800      	cmp	r0, #0
 8002682:	f43f ae30 	beq.w	80022e6 <_printf_float+0xc2>
 8002686:	4b01      	ldr	r3, [pc, #4]	; (800268c <_printf_float+0x468>)
 8002688:	4f01      	ldr	r7, [pc, #4]	; (8002690 <_printf_float+0x46c>)
 800268a:	e612      	b.n	80022b2 <_printf_float+0x8e>
 800268c:	08004257 	.word	0x08004257
 8002690:	0800425b 	.word	0x0800425b

08002694 <_printf_common>:
 8002694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002698:	4691      	mov	r9, r2
 800269a:	461f      	mov	r7, r3
 800269c:	688a      	ldr	r2, [r1, #8]
 800269e:	690b      	ldr	r3, [r1, #16]
 80026a0:	4606      	mov	r6, r0
 80026a2:	4293      	cmp	r3, r2
 80026a4:	bfb8      	it	lt
 80026a6:	4613      	movlt	r3, r2
 80026a8:	f8c9 3000 	str.w	r3, [r9]
 80026ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80026b0:	460c      	mov	r4, r1
 80026b2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80026b6:	b112      	cbz	r2, 80026be <_printf_common+0x2a>
 80026b8:	3301      	adds	r3, #1
 80026ba:	f8c9 3000 	str.w	r3, [r9]
 80026be:	6823      	ldr	r3, [r4, #0]
 80026c0:	0699      	lsls	r1, r3, #26
 80026c2:	bf42      	ittt	mi
 80026c4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80026c8:	3302      	addmi	r3, #2
 80026ca:	f8c9 3000 	strmi.w	r3, [r9]
 80026ce:	6825      	ldr	r5, [r4, #0]
 80026d0:	f015 0506 	ands.w	r5, r5, #6
 80026d4:	d107      	bne.n	80026e6 <_printf_common+0x52>
 80026d6:	f104 0a19 	add.w	sl, r4, #25
 80026da:	68e3      	ldr	r3, [r4, #12]
 80026dc:	f8d9 2000 	ldr.w	r2, [r9]
 80026e0:	1a9b      	subs	r3, r3, r2
 80026e2:	429d      	cmp	r5, r3
 80026e4:	db2a      	blt.n	800273c <_printf_common+0xa8>
 80026e6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80026ea:	6822      	ldr	r2, [r4, #0]
 80026ec:	3300      	adds	r3, #0
 80026ee:	bf18      	it	ne
 80026f0:	2301      	movne	r3, #1
 80026f2:	0692      	lsls	r2, r2, #26
 80026f4:	d42f      	bmi.n	8002756 <_printf_common+0xc2>
 80026f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80026fa:	4639      	mov	r1, r7
 80026fc:	4630      	mov	r0, r6
 80026fe:	47c0      	blx	r8
 8002700:	3001      	adds	r0, #1
 8002702:	d022      	beq.n	800274a <_printf_common+0xb6>
 8002704:	6823      	ldr	r3, [r4, #0]
 8002706:	68e5      	ldr	r5, [r4, #12]
 8002708:	f003 0306 	and.w	r3, r3, #6
 800270c:	2b04      	cmp	r3, #4
 800270e:	bf18      	it	ne
 8002710:	2500      	movne	r5, #0
 8002712:	f8d9 2000 	ldr.w	r2, [r9]
 8002716:	f04f 0900 	mov.w	r9, #0
 800271a:	bf08      	it	eq
 800271c:	1aad      	subeq	r5, r5, r2
 800271e:	68a3      	ldr	r3, [r4, #8]
 8002720:	6922      	ldr	r2, [r4, #16]
 8002722:	bf08      	it	eq
 8002724:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002728:	4293      	cmp	r3, r2
 800272a:	bfc4      	itt	gt
 800272c:	1a9b      	subgt	r3, r3, r2
 800272e:	18ed      	addgt	r5, r5, r3
 8002730:	341a      	adds	r4, #26
 8002732:	454d      	cmp	r5, r9
 8002734:	d11b      	bne.n	800276e <_printf_common+0xda>
 8002736:	2000      	movs	r0, #0
 8002738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800273c:	2301      	movs	r3, #1
 800273e:	4652      	mov	r2, sl
 8002740:	4639      	mov	r1, r7
 8002742:	4630      	mov	r0, r6
 8002744:	47c0      	blx	r8
 8002746:	3001      	adds	r0, #1
 8002748:	d103      	bne.n	8002752 <_printf_common+0xbe>
 800274a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800274e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002752:	3501      	adds	r5, #1
 8002754:	e7c1      	b.n	80026da <_printf_common+0x46>
 8002756:	2030      	movs	r0, #48	; 0x30
 8002758:	18e1      	adds	r1, r4, r3
 800275a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800275e:	1c5a      	adds	r2, r3, #1
 8002760:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002764:	4422      	add	r2, r4
 8002766:	3302      	adds	r3, #2
 8002768:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800276c:	e7c3      	b.n	80026f6 <_printf_common+0x62>
 800276e:	2301      	movs	r3, #1
 8002770:	4622      	mov	r2, r4
 8002772:	4639      	mov	r1, r7
 8002774:	4630      	mov	r0, r6
 8002776:	47c0      	blx	r8
 8002778:	3001      	adds	r0, #1
 800277a:	d0e6      	beq.n	800274a <_printf_common+0xb6>
 800277c:	f109 0901 	add.w	r9, r9, #1
 8002780:	e7d7      	b.n	8002732 <_printf_common+0x9e>
	...

08002784 <_printf_i>:
 8002784:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002788:	4617      	mov	r7, r2
 800278a:	7e0a      	ldrb	r2, [r1, #24]
 800278c:	b085      	sub	sp, #20
 800278e:	2a6e      	cmp	r2, #110	; 0x6e
 8002790:	4698      	mov	r8, r3
 8002792:	4606      	mov	r6, r0
 8002794:	460c      	mov	r4, r1
 8002796:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002798:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800279c:	f000 80bc 	beq.w	8002918 <_printf_i+0x194>
 80027a0:	d81a      	bhi.n	80027d8 <_printf_i+0x54>
 80027a2:	2a63      	cmp	r2, #99	; 0x63
 80027a4:	d02e      	beq.n	8002804 <_printf_i+0x80>
 80027a6:	d80a      	bhi.n	80027be <_printf_i+0x3a>
 80027a8:	2a00      	cmp	r2, #0
 80027aa:	f000 80c8 	beq.w	800293e <_printf_i+0x1ba>
 80027ae:	2a58      	cmp	r2, #88	; 0x58
 80027b0:	f000 808a 	beq.w	80028c8 <_printf_i+0x144>
 80027b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80027b8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80027bc:	e02a      	b.n	8002814 <_printf_i+0x90>
 80027be:	2a64      	cmp	r2, #100	; 0x64
 80027c0:	d001      	beq.n	80027c6 <_printf_i+0x42>
 80027c2:	2a69      	cmp	r2, #105	; 0x69
 80027c4:	d1f6      	bne.n	80027b4 <_printf_i+0x30>
 80027c6:	6821      	ldr	r1, [r4, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	f011 0f80 	tst.w	r1, #128	; 0x80
 80027ce:	d023      	beq.n	8002818 <_printf_i+0x94>
 80027d0:	1d11      	adds	r1, r2, #4
 80027d2:	6019      	str	r1, [r3, #0]
 80027d4:	6813      	ldr	r3, [r2, #0]
 80027d6:	e027      	b.n	8002828 <_printf_i+0xa4>
 80027d8:	2a73      	cmp	r2, #115	; 0x73
 80027da:	f000 80b4 	beq.w	8002946 <_printf_i+0x1c2>
 80027de:	d808      	bhi.n	80027f2 <_printf_i+0x6e>
 80027e0:	2a6f      	cmp	r2, #111	; 0x6f
 80027e2:	d02a      	beq.n	800283a <_printf_i+0xb6>
 80027e4:	2a70      	cmp	r2, #112	; 0x70
 80027e6:	d1e5      	bne.n	80027b4 <_printf_i+0x30>
 80027e8:	680a      	ldr	r2, [r1, #0]
 80027ea:	f042 0220 	orr.w	r2, r2, #32
 80027ee:	600a      	str	r2, [r1, #0]
 80027f0:	e003      	b.n	80027fa <_printf_i+0x76>
 80027f2:	2a75      	cmp	r2, #117	; 0x75
 80027f4:	d021      	beq.n	800283a <_printf_i+0xb6>
 80027f6:	2a78      	cmp	r2, #120	; 0x78
 80027f8:	d1dc      	bne.n	80027b4 <_printf_i+0x30>
 80027fa:	2278      	movs	r2, #120	; 0x78
 80027fc:	496f      	ldr	r1, [pc, #444]	; (80029bc <_printf_i+0x238>)
 80027fe:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8002802:	e064      	b.n	80028ce <_printf_i+0x14a>
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800280a:	1d11      	adds	r1, r2, #4
 800280c:	6019      	str	r1, [r3, #0]
 800280e:	6813      	ldr	r3, [r2, #0]
 8002810:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002814:	2301      	movs	r3, #1
 8002816:	e0a3      	b.n	8002960 <_printf_i+0x1dc>
 8002818:	f011 0f40 	tst.w	r1, #64	; 0x40
 800281c:	f102 0104 	add.w	r1, r2, #4
 8002820:	6019      	str	r1, [r3, #0]
 8002822:	d0d7      	beq.n	80027d4 <_printf_i+0x50>
 8002824:	f9b2 3000 	ldrsh.w	r3, [r2]
 8002828:	2b00      	cmp	r3, #0
 800282a:	da03      	bge.n	8002834 <_printf_i+0xb0>
 800282c:	222d      	movs	r2, #45	; 0x2d
 800282e:	425b      	negs	r3, r3
 8002830:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002834:	4962      	ldr	r1, [pc, #392]	; (80029c0 <_printf_i+0x23c>)
 8002836:	220a      	movs	r2, #10
 8002838:	e017      	b.n	800286a <_printf_i+0xe6>
 800283a:	6820      	ldr	r0, [r4, #0]
 800283c:	6819      	ldr	r1, [r3, #0]
 800283e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002842:	d003      	beq.n	800284c <_printf_i+0xc8>
 8002844:	1d08      	adds	r0, r1, #4
 8002846:	6018      	str	r0, [r3, #0]
 8002848:	680b      	ldr	r3, [r1, #0]
 800284a:	e006      	b.n	800285a <_printf_i+0xd6>
 800284c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002850:	f101 0004 	add.w	r0, r1, #4
 8002854:	6018      	str	r0, [r3, #0]
 8002856:	d0f7      	beq.n	8002848 <_printf_i+0xc4>
 8002858:	880b      	ldrh	r3, [r1, #0]
 800285a:	2a6f      	cmp	r2, #111	; 0x6f
 800285c:	bf14      	ite	ne
 800285e:	220a      	movne	r2, #10
 8002860:	2208      	moveq	r2, #8
 8002862:	4957      	ldr	r1, [pc, #348]	; (80029c0 <_printf_i+0x23c>)
 8002864:	2000      	movs	r0, #0
 8002866:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800286a:	6865      	ldr	r5, [r4, #4]
 800286c:	2d00      	cmp	r5, #0
 800286e:	60a5      	str	r5, [r4, #8]
 8002870:	f2c0 809c 	blt.w	80029ac <_printf_i+0x228>
 8002874:	6820      	ldr	r0, [r4, #0]
 8002876:	f020 0004 	bic.w	r0, r0, #4
 800287a:	6020      	str	r0, [r4, #0]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d13f      	bne.n	8002900 <_printf_i+0x17c>
 8002880:	2d00      	cmp	r5, #0
 8002882:	f040 8095 	bne.w	80029b0 <_printf_i+0x22c>
 8002886:	4675      	mov	r5, lr
 8002888:	2a08      	cmp	r2, #8
 800288a:	d10b      	bne.n	80028a4 <_printf_i+0x120>
 800288c:	6823      	ldr	r3, [r4, #0]
 800288e:	07da      	lsls	r2, r3, #31
 8002890:	d508      	bpl.n	80028a4 <_printf_i+0x120>
 8002892:	6923      	ldr	r3, [r4, #16]
 8002894:	6862      	ldr	r2, [r4, #4]
 8002896:	429a      	cmp	r2, r3
 8002898:	bfde      	ittt	le
 800289a:	2330      	movle	r3, #48	; 0x30
 800289c:	f805 3c01 	strble.w	r3, [r5, #-1]
 80028a0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80028a4:	ebae 0305 	sub.w	r3, lr, r5
 80028a8:	6123      	str	r3, [r4, #16]
 80028aa:	f8cd 8000 	str.w	r8, [sp]
 80028ae:	463b      	mov	r3, r7
 80028b0:	aa03      	add	r2, sp, #12
 80028b2:	4621      	mov	r1, r4
 80028b4:	4630      	mov	r0, r6
 80028b6:	f7ff feed 	bl	8002694 <_printf_common>
 80028ba:	3001      	adds	r0, #1
 80028bc:	d155      	bne.n	800296a <_printf_i+0x1e6>
 80028be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028c2:	b005      	add	sp, #20
 80028c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80028c8:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80028cc:	493c      	ldr	r1, [pc, #240]	; (80029c0 <_printf_i+0x23c>)
 80028ce:	6822      	ldr	r2, [r4, #0]
 80028d0:	6818      	ldr	r0, [r3, #0]
 80028d2:	f012 0f80 	tst.w	r2, #128	; 0x80
 80028d6:	f100 0504 	add.w	r5, r0, #4
 80028da:	601d      	str	r5, [r3, #0]
 80028dc:	d001      	beq.n	80028e2 <_printf_i+0x15e>
 80028de:	6803      	ldr	r3, [r0, #0]
 80028e0:	e002      	b.n	80028e8 <_printf_i+0x164>
 80028e2:	0655      	lsls	r5, r2, #25
 80028e4:	d5fb      	bpl.n	80028de <_printf_i+0x15a>
 80028e6:	8803      	ldrh	r3, [r0, #0]
 80028e8:	07d0      	lsls	r0, r2, #31
 80028ea:	bf44      	itt	mi
 80028ec:	f042 0220 	orrmi.w	r2, r2, #32
 80028f0:	6022      	strmi	r2, [r4, #0]
 80028f2:	b91b      	cbnz	r3, 80028fc <_printf_i+0x178>
 80028f4:	6822      	ldr	r2, [r4, #0]
 80028f6:	f022 0220 	bic.w	r2, r2, #32
 80028fa:	6022      	str	r2, [r4, #0]
 80028fc:	2210      	movs	r2, #16
 80028fe:	e7b1      	b.n	8002864 <_printf_i+0xe0>
 8002900:	4675      	mov	r5, lr
 8002902:	fbb3 f0f2 	udiv	r0, r3, r2
 8002906:	fb02 3310 	mls	r3, r2, r0, r3
 800290a:	5ccb      	ldrb	r3, [r1, r3]
 800290c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002910:	4603      	mov	r3, r0
 8002912:	2800      	cmp	r0, #0
 8002914:	d1f5      	bne.n	8002902 <_printf_i+0x17e>
 8002916:	e7b7      	b.n	8002888 <_printf_i+0x104>
 8002918:	6808      	ldr	r0, [r1, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002920:	6949      	ldr	r1, [r1, #20]
 8002922:	d004      	beq.n	800292e <_printf_i+0x1aa>
 8002924:	1d10      	adds	r0, r2, #4
 8002926:	6018      	str	r0, [r3, #0]
 8002928:	6813      	ldr	r3, [r2, #0]
 800292a:	6019      	str	r1, [r3, #0]
 800292c:	e007      	b.n	800293e <_printf_i+0x1ba>
 800292e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002932:	f102 0004 	add.w	r0, r2, #4
 8002936:	6018      	str	r0, [r3, #0]
 8002938:	6813      	ldr	r3, [r2, #0]
 800293a:	d0f6      	beq.n	800292a <_printf_i+0x1a6>
 800293c:	8019      	strh	r1, [r3, #0]
 800293e:	2300      	movs	r3, #0
 8002940:	4675      	mov	r5, lr
 8002942:	6123      	str	r3, [r4, #16]
 8002944:	e7b1      	b.n	80028aa <_printf_i+0x126>
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	1d11      	adds	r1, r2, #4
 800294a:	6019      	str	r1, [r3, #0]
 800294c:	6815      	ldr	r5, [r2, #0]
 800294e:	2100      	movs	r1, #0
 8002950:	6862      	ldr	r2, [r4, #4]
 8002952:	4628      	mov	r0, r5
 8002954:	f000 fee2 	bl	800371c <memchr>
 8002958:	b108      	cbz	r0, 800295e <_printf_i+0x1da>
 800295a:	1b40      	subs	r0, r0, r5
 800295c:	6060      	str	r0, [r4, #4]
 800295e:	6863      	ldr	r3, [r4, #4]
 8002960:	6123      	str	r3, [r4, #16]
 8002962:	2300      	movs	r3, #0
 8002964:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002968:	e79f      	b.n	80028aa <_printf_i+0x126>
 800296a:	6923      	ldr	r3, [r4, #16]
 800296c:	462a      	mov	r2, r5
 800296e:	4639      	mov	r1, r7
 8002970:	4630      	mov	r0, r6
 8002972:	47c0      	blx	r8
 8002974:	3001      	adds	r0, #1
 8002976:	d0a2      	beq.n	80028be <_printf_i+0x13a>
 8002978:	6823      	ldr	r3, [r4, #0]
 800297a:	079b      	lsls	r3, r3, #30
 800297c:	d507      	bpl.n	800298e <_printf_i+0x20a>
 800297e:	2500      	movs	r5, #0
 8002980:	f104 0919 	add.w	r9, r4, #25
 8002984:	68e3      	ldr	r3, [r4, #12]
 8002986:	9a03      	ldr	r2, [sp, #12]
 8002988:	1a9b      	subs	r3, r3, r2
 800298a:	429d      	cmp	r5, r3
 800298c:	db05      	blt.n	800299a <_printf_i+0x216>
 800298e:	68e0      	ldr	r0, [r4, #12]
 8002990:	9b03      	ldr	r3, [sp, #12]
 8002992:	4298      	cmp	r0, r3
 8002994:	bfb8      	it	lt
 8002996:	4618      	movlt	r0, r3
 8002998:	e793      	b.n	80028c2 <_printf_i+0x13e>
 800299a:	2301      	movs	r3, #1
 800299c:	464a      	mov	r2, r9
 800299e:	4639      	mov	r1, r7
 80029a0:	4630      	mov	r0, r6
 80029a2:	47c0      	blx	r8
 80029a4:	3001      	adds	r0, #1
 80029a6:	d08a      	beq.n	80028be <_printf_i+0x13a>
 80029a8:	3501      	adds	r5, #1
 80029aa:	e7eb      	b.n	8002984 <_printf_i+0x200>
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d1a7      	bne.n	8002900 <_printf_i+0x17c>
 80029b0:	780b      	ldrb	r3, [r1, #0]
 80029b2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80029b6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80029ba:	e765      	b.n	8002888 <_printf_i+0x104>
 80029bc:	08004272 	.word	0x08004272
 80029c0:	08004261 	.word	0x08004261

080029c4 <sniprintf>:
 80029c4:	b40c      	push	{r2, r3}
 80029c6:	b530      	push	{r4, r5, lr}
 80029c8:	4b17      	ldr	r3, [pc, #92]	; (8002a28 <sniprintf+0x64>)
 80029ca:	1e0c      	subs	r4, r1, #0
 80029cc:	b09d      	sub	sp, #116	; 0x74
 80029ce:	681d      	ldr	r5, [r3, #0]
 80029d0:	da08      	bge.n	80029e4 <sniprintf+0x20>
 80029d2:	238b      	movs	r3, #139	; 0x8b
 80029d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80029d8:	602b      	str	r3, [r5, #0]
 80029da:	b01d      	add	sp, #116	; 0x74
 80029dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80029e0:	b002      	add	sp, #8
 80029e2:	4770      	bx	lr
 80029e4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80029e8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80029ec:	bf0c      	ite	eq
 80029ee:	4623      	moveq	r3, r4
 80029f0:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80029f4:	9304      	str	r3, [sp, #16]
 80029f6:	9307      	str	r3, [sp, #28]
 80029f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029fc:	9002      	str	r0, [sp, #8]
 80029fe:	9006      	str	r0, [sp, #24]
 8002a00:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002a04:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002a06:	ab21      	add	r3, sp, #132	; 0x84
 8002a08:	a902      	add	r1, sp, #8
 8002a0a:	4628      	mov	r0, r5
 8002a0c:	9301      	str	r3, [sp, #4]
 8002a0e:	f001 fa83 	bl	8003f18 <_svfiprintf_r>
 8002a12:	1c43      	adds	r3, r0, #1
 8002a14:	bfbc      	itt	lt
 8002a16:	238b      	movlt	r3, #139	; 0x8b
 8002a18:	602b      	strlt	r3, [r5, #0]
 8002a1a:	2c00      	cmp	r4, #0
 8002a1c:	d0dd      	beq.n	80029da <sniprintf+0x16>
 8002a1e:	2200      	movs	r2, #0
 8002a20:	9b02      	ldr	r3, [sp, #8]
 8002a22:	701a      	strb	r2, [r3, #0]
 8002a24:	e7d9      	b.n	80029da <sniprintf+0x16>
 8002a26:	bf00      	nop
 8002a28:	2000000c 	.word	0x2000000c

08002a2c <quorem>:
 8002a2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a30:	6903      	ldr	r3, [r0, #16]
 8002a32:	690c      	ldr	r4, [r1, #16]
 8002a34:	4680      	mov	r8, r0
 8002a36:	429c      	cmp	r4, r3
 8002a38:	f300 8082 	bgt.w	8002b40 <quorem+0x114>
 8002a3c:	3c01      	subs	r4, #1
 8002a3e:	f101 0714 	add.w	r7, r1, #20
 8002a42:	f100 0614 	add.w	r6, r0, #20
 8002a46:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8002a4a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8002a4e:	3501      	adds	r5, #1
 8002a50:	fbb0 f5f5 	udiv	r5, r0, r5
 8002a54:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8002a58:	eb06 030e 	add.w	r3, r6, lr
 8002a5c:	eb07 090e 	add.w	r9, r7, lr
 8002a60:	9301      	str	r3, [sp, #4]
 8002a62:	b38d      	cbz	r5, 8002ac8 <quorem+0x9c>
 8002a64:	f04f 0a00 	mov.w	sl, #0
 8002a68:	4638      	mov	r0, r7
 8002a6a:	46b4      	mov	ip, r6
 8002a6c:	46d3      	mov	fp, sl
 8002a6e:	f850 2b04 	ldr.w	r2, [r0], #4
 8002a72:	b293      	uxth	r3, r2
 8002a74:	fb05 a303 	mla	r3, r5, r3, sl
 8002a78:	0c12      	lsrs	r2, r2, #16
 8002a7a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8002a7e:	fb05 a202 	mla	r2, r5, r2, sl
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	ebab 0303 	sub.w	r3, fp, r3
 8002a88:	f8bc b000 	ldrh.w	fp, [ip]
 8002a8c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8002a90:	445b      	add	r3, fp
 8002a92:	fa1f fb82 	uxth.w	fp, r2
 8002a96:	f8dc 2000 	ldr.w	r2, [ip]
 8002a9a:	4581      	cmp	r9, r0
 8002a9c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8002aa0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002aaa:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8002aae:	f84c 3b04 	str.w	r3, [ip], #4
 8002ab2:	d2dc      	bcs.n	8002a6e <quorem+0x42>
 8002ab4:	f856 300e 	ldr.w	r3, [r6, lr]
 8002ab8:	b933      	cbnz	r3, 8002ac8 <quorem+0x9c>
 8002aba:	9b01      	ldr	r3, [sp, #4]
 8002abc:	3b04      	subs	r3, #4
 8002abe:	429e      	cmp	r6, r3
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	d331      	bcc.n	8002b28 <quorem+0xfc>
 8002ac4:	f8c8 4010 	str.w	r4, [r8, #16]
 8002ac8:	4640      	mov	r0, r8
 8002aca:	f001 f848 	bl	8003b5e <__mcmp>
 8002ace:	2800      	cmp	r0, #0
 8002ad0:	db26      	blt.n	8002b20 <quorem+0xf4>
 8002ad2:	4630      	mov	r0, r6
 8002ad4:	f04f 0e00 	mov.w	lr, #0
 8002ad8:	3501      	adds	r5, #1
 8002ada:	f857 1b04 	ldr.w	r1, [r7], #4
 8002ade:	f8d0 c000 	ldr.w	ip, [r0]
 8002ae2:	b28b      	uxth	r3, r1
 8002ae4:	ebae 0303 	sub.w	r3, lr, r3
 8002ae8:	fa1f f28c 	uxth.w	r2, ip
 8002aec:	4413      	add	r3, r2
 8002aee:	0c0a      	lsrs	r2, r1, #16
 8002af0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8002af4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002afe:	45b9      	cmp	r9, r7
 8002b00:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8002b04:	f840 3b04 	str.w	r3, [r0], #4
 8002b08:	d2e7      	bcs.n	8002ada <quorem+0xae>
 8002b0a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8002b0e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8002b12:	b92a      	cbnz	r2, 8002b20 <quorem+0xf4>
 8002b14:	3b04      	subs	r3, #4
 8002b16:	429e      	cmp	r6, r3
 8002b18:	461a      	mov	r2, r3
 8002b1a:	d30b      	bcc.n	8002b34 <quorem+0x108>
 8002b1c:	f8c8 4010 	str.w	r4, [r8, #16]
 8002b20:	4628      	mov	r0, r5
 8002b22:	b003      	add	sp, #12
 8002b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b28:	6812      	ldr	r2, [r2, #0]
 8002b2a:	3b04      	subs	r3, #4
 8002b2c:	2a00      	cmp	r2, #0
 8002b2e:	d1c9      	bne.n	8002ac4 <quorem+0x98>
 8002b30:	3c01      	subs	r4, #1
 8002b32:	e7c4      	b.n	8002abe <quorem+0x92>
 8002b34:	6812      	ldr	r2, [r2, #0]
 8002b36:	3b04      	subs	r3, #4
 8002b38:	2a00      	cmp	r2, #0
 8002b3a:	d1ef      	bne.n	8002b1c <quorem+0xf0>
 8002b3c:	3c01      	subs	r4, #1
 8002b3e:	e7ea      	b.n	8002b16 <quorem+0xea>
 8002b40:	2000      	movs	r0, #0
 8002b42:	e7ee      	b.n	8002b22 <quorem+0xf6>
 8002b44:	0000      	movs	r0, r0
	...

08002b48 <_dtoa_r>:
 8002b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b4c:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8002b4e:	b095      	sub	sp, #84	; 0x54
 8002b50:	4604      	mov	r4, r0
 8002b52:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8002b54:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002b58:	b93e      	cbnz	r6, 8002b6a <_dtoa_r+0x22>
 8002b5a:	2010      	movs	r0, #16
 8002b5c:	f000 fdd6 	bl	800370c <malloc>
 8002b60:	6260      	str	r0, [r4, #36]	; 0x24
 8002b62:	6046      	str	r6, [r0, #4]
 8002b64:	6086      	str	r6, [r0, #8]
 8002b66:	6006      	str	r6, [r0, #0]
 8002b68:	60c6      	str	r6, [r0, #12]
 8002b6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b6c:	6819      	ldr	r1, [r3, #0]
 8002b6e:	b151      	cbz	r1, 8002b86 <_dtoa_r+0x3e>
 8002b70:	685a      	ldr	r2, [r3, #4]
 8002b72:	2301      	movs	r3, #1
 8002b74:	4093      	lsls	r3, r2
 8002b76:	604a      	str	r2, [r1, #4]
 8002b78:	608b      	str	r3, [r1, #8]
 8002b7a:	4620      	mov	r0, r4
 8002b7c:	f000 fe1b 	bl	80037b6 <_Bfree>
 8002b80:	2200      	movs	r2, #0
 8002b82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b84:	601a      	str	r2, [r3, #0]
 8002b86:	9b03      	ldr	r3, [sp, #12]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	bfb7      	itett	lt
 8002b8c:	2301      	movlt	r3, #1
 8002b8e:	2300      	movge	r3, #0
 8002b90:	602b      	strlt	r3, [r5, #0]
 8002b92:	9b03      	ldrlt	r3, [sp, #12]
 8002b94:	bfae      	itee	ge
 8002b96:	602b      	strge	r3, [r5, #0]
 8002b98:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8002b9c:	9303      	strlt	r3, [sp, #12]
 8002b9e:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8002ba2:	4bab      	ldr	r3, [pc, #684]	; (8002e50 <_dtoa_r+0x308>)
 8002ba4:	ea33 0309 	bics.w	r3, r3, r9
 8002ba8:	d11b      	bne.n	8002be2 <_dtoa_r+0x9a>
 8002baa:	f242 730f 	movw	r3, #9999	; 0x270f
 8002bae:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002bb0:	6013      	str	r3, [r2, #0]
 8002bb2:	9b02      	ldr	r3, [sp, #8]
 8002bb4:	b923      	cbnz	r3, 8002bc0 <_dtoa_r+0x78>
 8002bb6:	f3c9 0013 	ubfx	r0, r9, #0, #20
 8002bba:	2800      	cmp	r0, #0
 8002bbc:	f000 8583 	beq.w	80036c6 <_dtoa_r+0xb7e>
 8002bc0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002bc2:	b953      	cbnz	r3, 8002bda <_dtoa_r+0x92>
 8002bc4:	4ba3      	ldr	r3, [pc, #652]	; (8002e54 <_dtoa_r+0x30c>)
 8002bc6:	e021      	b.n	8002c0c <_dtoa_r+0xc4>
 8002bc8:	4ba3      	ldr	r3, [pc, #652]	; (8002e58 <_dtoa_r+0x310>)
 8002bca:	9306      	str	r3, [sp, #24]
 8002bcc:	3308      	adds	r3, #8
 8002bce:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8002bd0:	6013      	str	r3, [r2, #0]
 8002bd2:	9806      	ldr	r0, [sp, #24]
 8002bd4:	b015      	add	sp, #84	; 0x54
 8002bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002bda:	4b9e      	ldr	r3, [pc, #632]	; (8002e54 <_dtoa_r+0x30c>)
 8002bdc:	9306      	str	r3, [sp, #24]
 8002bde:	3303      	adds	r3, #3
 8002be0:	e7f5      	b.n	8002bce <_dtoa_r+0x86>
 8002be2:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8002be6:	2200      	movs	r2, #0
 8002be8:	2300      	movs	r3, #0
 8002bea:	4630      	mov	r0, r6
 8002bec:	4639      	mov	r1, r7
 8002bee:	f7fd fed7 	bl	80009a0 <__aeabi_dcmpeq>
 8002bf2:	4680      	mov	r8, r0
 8002bf4:	b160      	cbz	r0, 8002c10 <_dtoa_r+0xc8>
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002bfa:	6013      	str	r3, [r2, #0]
 8002bfc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	f000 855e 	beq.w	80036c0 <_dtoa_r+0xb78>
 8002c04:	4b95      	ldr	r3, [pc, #596]	; (8002e5c <_dtoa_r+0x314>)
 8002c06:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8002c08:	6013      	str	r3, [r2, #0]
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	9306      	str	r3, [sp, #24]
 8002c0e:	e7e0      	b.n	8002bd2 <_dtoa_r+0x8a>
 8002c10:	ab12      	add	r3, sp, #72	; 0x48
 8002c12:	9301      	str	r3, [sp, #4]
 8002c14:	ab13      	add	r3, sp, #76	; 0x4c
 8002c16:	9300      	str	r3, [sp, #0]
 8002c18:	4632      	mov	r2, r6
 8002c1a:	463b      	mov	r3, r7
 8002c1c:	4620      	mov	r0, r4
 8002c1e:	f001 f817 	bl	8003c50 <__d2b>
 8002c22:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8002c26:	4682      	mov	sl, r0
 8002c28:	2d00      	cmp	r5, #0
 8002c2a:	d07d      	beq.n	8002d28 <_dtoa_r+0x1e0>
 8002c2c:	4630      	mov	r0, r6
 8002c2e:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8002c32:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8002c36:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8002c3a:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8002c3e:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8002c42:	2200      	movs	r2, #0
 8002c44:	4b86      	ldr	r3, [pc, #536]	; (8002e60 <_dtoa_r+0x318>)
 8002c46:	f7fd fa8f 	bl	8000168 <__aeabi_dsub>
 8002c4a:	a37b      	add	r3, pc, #492	; (adr r3, 8002e38 <_dtoa_r+0x2f0>)
 8002c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c50:	f7fd fc3e 	bl	80004d0 <__aeabi_dmul>
 8002c54:	a37a      	add	r3, pc, #488	; (adr r3, 8002e40 <_dtoa_r+0x2f8>)
 8002c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c5a:	f7fd fa87 	bl	800016c <__adddf3>
 8002c5e:	4606      	mov	r6, r0
 8002c60:	4628      	mov	r0, r5
 8002c62:	460f      	mov	r7, r1
 8002c64:	f7fd fbce 	bl	8000404 <__aeabi_i2d>
 8002c68:	a377      	add	r3, pc, #476	; (adr r3, 8002e48 <_dtoa_r+0x300>)
 8002c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c6e:	f7fd fc2f 	bl	80004d0 <__aeabi_dmul>
 8002c72:	4602      	mov	r2, r0
 8002c74:	460b      	mov	r3, r1
 8002c76:	4630      	mov	r0, r6
 8002c78:	4639      	mov	r1, r7
 8002c7a:	f7fd fa77 	bl	800016c <__adddf3>
 8002c7e:	4606      	mov	r6, r0
 8002c80:	460f      	mov	r7, r1
 8002c82:	f7fd fed5 	bl	8000a30 <__aeabi_d2iz>
 8002c86:	2200      	movs	r2, #0
 8002c88:	4683      	mov	fp, r0
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	4630      	mov	r0, r6
 8002c8e:	4639      	mov	r1, r7
 8002c90:	f7fd fe90 	bl	80009b4 <__aeabi_dcmplt>
 8002c94:	b158      	cbz	r0, 8002cae <_dtoa_r+0x166>
 8002c96:	4658      	mov	r0, fp
 8002c98:	f7fd fbb4 	bl	8000404 <__aeabi_i2d>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	4630      	mov	r0, r6
 8002ca2:	4639      	mov	r1, r7
 8002ca4:	f7fd fe7c 	bl	80009a0 <__aeabi_dcmpeq>
 8002ca8:	b908      	cbnz	r0, 8002cae <_dtoa_r+0x166>
 8002caa:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8002cae:	f1bb 0f16 	cmp.w	fp, #22
 8002cb2:	d858      	bhi.n	8002d66 <_dtoa_r+0x21e>
 8002cb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002cb8:	496a      	ldr	r1, [pc, #424]	; (8002e64 <_dtoa_r+0x31c>)
 8002cba:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8002cbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002cc2:	f7fd fe95 	bl	80009f0 <__aeabi_dcmpgt>
 8002cc6:	2800      	cmp	r0, #0
 8002cc8:	d04f      	beq.n	8002d6a <_dtoa_r+0x222>
 8002cca:	2300      	movs	r3, #0
 8002ccc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8002cd0:	930d      	str	r3, [sp, #52]	; 0x34
 8002cd2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002cd4:	1b5d      	subs	r5, r3, r5
 8002cd6:	1e6b      	subs	r3, r5, #1
 8002cd8:	9307      	str	r3, [sp, #28]
 8002cda:	bf43      	ittte	mi
 8002cdc:	2300      	movmi	r3, #0
 8002cde:	f1c5 0801 	rsbmi	r8, r5, #1
 8002ce2:	9307      	strmi	r3, [sp, #28]
 8002ce4:	f04f 0800 	movpl.w	r8, #0
 8002ce8:	f1bb 0f00 	cmp.w	fp, #0
 8002cec:	db3f      	blt.n	8002d6e <_dtoa_r+0x226>
 8002cee:	9b07      	ldr	r3, [sp, #28]
 8002cf0:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8002cf4:	445b      	add	r3, fp
 8002cf6:	9307      	str	r3, [sp, #28]
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	9308      	str	r3, [sp, #32]
 8002cfc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8002cfe:	2b09      	cmp	r3, #9
 8002d00:	f200 80b4 	bhi.w	8002e6c <_dtoa_r+0x324>
 8002d04:	2b05      	cmp	r3, #5
 8002d06:	bfc4      	itt	gt
 8002d08:	3b04      	subgt	r3, #4
 8002d0a:	931e      	strgt	r3, [sp, #120]	; 0x78
 8002d0c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8002d0e:	bfc8      	it	gt
 8002d10:	2600      	movgt	r6, #0
 8002d12:	f1a3 0302 	sub.w	r3, r3, #2
 8002d16:	bfd8      	it	le
 8002d18:	2601      	movle	r6, #1
 8002d1a:	2b03      	cmp	r3, #3
 8002d1c:	f200 80b2 	bhi.w	8002e84 <_dtoa_r+0x33c>
 8002d20:	e8df f003 	tbb	[pc, r3]
 8002d24:	782d8684 	.word	0x782d8684
 8002d28:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8002d2a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8002d2c:	441d      	add	r5, r3
 8002d2e:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8002d32:	2b20      	cmp	r3, #32
 8002d34:	dd11      	ble.n	8002d5a <_dtoa_r+0x212>
 8002d36:	9a02      	ldr	r2, [sp, #8]
 8002d38:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8002d3c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8002d40:	fa22 f000 	lsr.w	r0, r2, r0
 8002d44:	fa09 f303 	lsl.w	r3, r9, r3
 8002d48:	4318      	orrs	r0, r3
 8002d4a:	f7fd fb4b 	bl	80003e4 <__aeabi_ui2d>
 8002d4e:	2301      	movs	r3, #1
 8002d50:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8002d54:	3d01      	subs	r5, #1
 8002d56:	9310      	str	r3, [sp, #64]	; 0x40
 8002d58:	e773      	b.n	8002c42 <_dtoa_r+0xfa>
 8002d5a:	f1c3 0020 	rsb	r0, r3, #32
 8002d5e:	9b02      	ldr	r3, [sp, #8]
 8002d60:	fa03 f000 	lsl.w	r0, r3, r0
 8002d64:	e7f1      	b.n	8002d4a <_dtoa_r+0x202>
 8002d66:	2301      	movs	r3, #1
 8002d68:	e7b2      	b.n	8002cd0 <_dtoa_r+0x188>
 8002d6a:	900d      	str	r0, [sp, #52]	; 0x34
 8002d6c:	e7b1      	b.n	8002cd2 <_dtoa_r+0x18a>
 8002d6e:	f1cb 0300 	rsb	r3, fp, #0
 8002d72:	9308      	str	r3, [sp, #32]
 8002d74:	2300      	movs	r3, #0
 8002d76:	eba8 080b 	sub.w	r8, r8, fp
 8002d7a:	930c      	str	r3, [sp, #48]	; 0x30
 8002d7c:	e7be      	b.n	8002cfc <_dtoa_r+0x1b4>
 8002d7e:	2301      	movs	r3, #1
 8002d80:	9309      	str	r3, [sp, #36]	; 0x24
 8002d82:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	f340 8080 	ble.w	8002e8a <_dtoa_r+0x342>
 8002d8a:	4699      	mov	r9, r3
 8002d8c:	9304      	str	r3, [sp, #16]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	2104      	movs	r1, #4
 8002d92:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8002d94:	606a      	str	r2, [r5, #4]
 8002d96:	f101 0214 	add.w	r2, r1, #20
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d97a      	bls.n	8002e94 <_dtoa_r+0x34c>
 8002d9e:	6869      	ldr	r1, [r5, #4]
 8002da0:	4620      	mov	r0, r4
 8002da2:	f000 fcd4 	bl	800374e <_Balloc>
 8002da6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002da8:	6028      	str	r0, [r5, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f1b9 0f0e 	cmp.w	r9, #14
 8002db0:	9306      	str	r3, [sp, #24]
 8002db2:	f200 80f0 	bhi.w	8002f96 <_dtoa_r+0x44e>
 8002db6:	2e00      	cmp	r6, #0
 8002db8:	f000 80ed 	beq.w	8002f96 <_dtoa_r+0x44e>
 8002dbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002dc0:	f1bb 0f00 	cmp.w	fp, #0
 8002dc4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8002dc8:	dd79      	ble.n	8002ebe <_dtoa_r+0x376>
 8002dca:	4a26      	ldr	r2, [pc, #152]	; (8002e64 <_dtoa_r+0x31c>)
 8002dcc:	f00b 030f 	and.w	r3, fp, #15
 8002dd0:	ea4f 162b 	mov.w	r6, fp, asr #4
 8002dd4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8002dd8:	06f0      	lsls	r0, r6, #27
 8002dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dde:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8002de2:	d55c      	bpl.n	8002e9e <_dtoa_r+0x356>
 8002de4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8002de8:	4b1f      	ldr	r3, [pc, #124]	; (8002e68 <_dtoa_r+0x320>)
 8002dea:	2503      	movs	r5, #3
 8002dec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002df0:	f7fd fc98 	bl	8000724 <__aeabi_ddiv>
 8002df4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002df8:	f006 060f 	and.w	r6, r6, #15
 8002dfc:	4f1a      	ldr	r7, [pc, #104]	; (8002e68 <_dtoa_r+0x320>)
 8002dfe:	2e00      	cmp	r6, #0
 8002e00:	d14f      	bne.n	8002ea2 <_dtoa_r+0x35a>
 8002e02:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002e06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002e0a:	f7fd fc8b 	bl	8000724 <__aeabi_ddiv>
 8002e0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002e12:	e06e      	b.n	8002ef2 <_dtoa_r+0x3aa>
 8002e14:	2301      	movs	r3, #1
 8002e16:	9309      	str	r3, [sp, #36]	; 0x24
 8002e18:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8002e1a:	445b      	add	r3, fp
 8002e1c:	f103 0901 	add.w	r9, r3, #1
 8002e20:	9304      	str	r3, [sp, #16]
 8002e22:	464b      	mov	r3, r9
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	bfb8      	it	lt
 8002e28:	2301      	movlt	r3, #1
 8002e2a:	e7b0      	b.n	8002d8e <_dtoa_r+0x246>
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	e7a7      	b.n	8002d80 <_dtoa_r+0x238>
 8002e30:	2300      	movs	r3, #0
 8002e32:	e7f0      	b.n	8002e16 <_dtoa_r+0x2ce>
 8002e34:	f3af 8000 	nop.w
 8002e38:	636f4361 	.word	0x636f4361
 8002e3c:	3fd287a7 	.word	0x3fd287a7
 8002e40:	8b60c8b3 	.word	0x8b60c8b3
 8002e44:	3fc68a28 	.word	0x3fc68a28
 8002e48:	509f79fb 	.word	0x509f79fb
 8002e4c:	3fd34413 	.word	0x3fd34413
 8002e50:	7ff00000 	.word	0x7ff00000
 8002e54:	0800428c 	.word	0x0800428c
 8002e58:	08004283 	.word	0x08004283
 8002e5c:	08004260 	.word	0x08004260
 8002e60:	3ff80000 	.word	0x3ff80000
 8002e64:	080042b8 	.word	0x080042b8
 8002e68:	08004290 	.word	0x08004290
 8002e6c:	2601      	movs	r6, #1
 8002e6e:	2300      	movs	r3, #0
 8002e70:	9609      	str	r6, [sp, #36]	; 0x24
 8002e72:	931e      	str	r3, [sp, #120]	; 0x78
 8002e74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e78:	2200      	movs	r2, #0
 8002e7a:	9304      	str	r3, [sp, #16]
 8002e7c:	4699      	mov	r9, r3
 8002e7e:	2312      	movs	r3, #18
 8002e80:	921f      	str	r2, [sp, #124]	; 0x7c
 8002e82:	e784      	b.n	8002d8e <_dtoa_r+0x246>
 8002e84:	2301      	movs	r3, #1
 8002e86:	9309      	str	r3, [sp, #36]	; 0x24
 8002e88:	e7f4      	b.n	8002e74 <_dtoa_r+0x32c>
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	9304      	str	r3, [sp, #16]
 8002e8e:	4699      	mov	r9, r3
 8002e90:	461a      	mov	r2, r3
 8002e92:	e7f5      	b.n	8002e80 <_dtoa_r+0x338>
 8002e94:	686a      	ldr	r2, [r5, #4]
 8002e96:	0049      	lsls	r1, r1, #1
 8002e98:	3201      	adds	r2, #1
 8002e9a:	606a      	str	r2, [r5, #4]
 8002e9c:	e77b      	b.n	8002d96 <_dtoa_r+0x24e>
 8002e9e:	2502      	movs	r5, #2
 8002ea0:	e7ac      	b.n	8002dfc <_dtoa_r+0x2b4>
 8002ea2:	07f1      	lsls	r1, r6, #31
 8002ea4:	d508      	bpl.n	8002eb8 <_dtoa_r+0x370>
 8002ea6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002eaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002eae:	f7fd fb0f 	bl	80004d0 <__aeabi_dmul>
 8002eb2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8002eb6:	3501      	adds	r5, #1
 8002eb8:	1076      	asrs	r6, r6, #1
 8002eba:	3708      	adds	r7, #8
 8002ebc:	e79f      	b.n	8002dfe <_dtoa_r+0x2b6>
 8002ebe:	f000 80a5 	beq.w	800300c <_dtoa_r+0x4c4>
 8002ec2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8002ec6:	f1cb 0600 	rsb	r6, fp, #0
 8002eca:	4ba2      	ldr	r3, [pc, #648]	; (8003154 <_dtoa_r+0x60c>)
 8002ecc:	f006 020f 	and.w	r2, r6, #15
 8002ed0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed8:	f7fd fafa 	bl	80004d0 <__aeabi_dmul>
 8002edc:	2502      	movs	r5, #2
 8002ede:	2300      	movs	r3, #0
 8002ee0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002ee4:	4f9c      	ldr	r7, [pc, #624]	; (8003158 <_dtoa_r+0x610>)
 8002ee6:	1136      	asrs	r6, r6, #4
 8002ee8:	2e00      	cmp	r6, #0
 8002eea:	f040 8084 	bne.w	8002ff6 <_dtoa_r+0x4ae>
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d18d      	bne.n	8002e0e <_dtoa_r+0x2c6>
 8002ef2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	f000 808b 	beq.w	8003010 <_dtoa_r+0x4c8>
 8002efa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002efe:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8002f02:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002f06:	2200      	movs	r2, #0
 8002f08:	4b94      	ldr	r3, [pc, #592]	; (800315c <_dtoa_r+0x614>)
 8002f0a:	f7fd fd53 	bl	80009b4 <__aeabi_dcmplt>
 8002f0e:	2800      	cmp	r0, #0
 8002f10:	d07e      	beq.n	8003010 <_dtoa_r+0x4c8>
 8002f12:	f1b9 0f00 	cmp.w	r9, #0
 8002f16:	d07b      	beq.n	8003010 <_dtoa_r+0x4c8>
 8002f18:	9b04      	ldr	r3, [sp, #16]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	dd37      	ble.n	8002f8e <_dtoa_r+0x446>
 8002f1e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002f22:	2200      	movs	r2, #0
 8002f24:	4b8e      	ldr	r3, [pc, #568]	; (8003160 <_dtoa_r+0x618>)
 8002f26:	f7fd fad3 	bl	80004d0 <__aeabi_dmul>
 8002f2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002f2e:	9e04      	ldr	r6, [sp, #16]
 8002f30:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8002f34:	3501      	adds	r5, #1
 8002f36:	4628      	mov	r0, r5
 8002f38:	f7fd fa64 	bl	8000404 <__aeabi_i2d>
 8002f3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002f40:	f7fd fac6 	bl	80004d0 <__aeabi_dmul>
 8002f44:	4b87      	ldr	r3, [pc, #540]	; (8003164 <_dtoa_r+0x61c>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	f7fd f910 	bl	800016c <__adddf3>
 8002f4c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8002f50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002f52:	f1a3 7550 	sub.w	r5, r3, #54525952	; 0x3400000
 8002f56:	950b      	str	r5, [sp, #44]	; 0x2c
 8002f58:	2e00      	cmp	r6, #0
 8002f5a:	d15c      	bne.n	8003016 <_dtoa_r+0x4ce>
 8002f5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002f60:	2200      	movs	r2, #0
 8002f62:	4b81      	ldr	r3, [pc, #516]	; (8003168 <_dtoa_r+0x620>)
 8002f64:	f7fd f900 	bl	8000168 <__aeabi_dsub>
 8002f68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002f6a:	462b      	mov	r3, r5
 8002f6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002f70:	f7fd fd3e 	bl	80009f0 <__aeabi_dcmpgt>
 8002f74:	2800      	cmp	r0, #0
 8002f76:	f040 82f7 	bne.w	8003568 <_dtoa_r+0xa20>
 8002f7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002f7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002f80:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8002f84:	f7fd fd16 	bl	80009b4 <__aeabi_dcmplt>
 8002f88:	2800      	cmp	r0, #0
 8002f8a:	f040 82eb 	bne.w	8003564 <_dtoa_r+0xa1c>
 8002f8e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8002f92:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002f96:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	f2c0 8150 	blt.w	800323e <_dtoa_r+0x6f6>
 8002f9e:	f1bb 0f0e 	cmp.w	fp, #14
 8002fa2:	f300 814c 	bgt.w	800323e <_dtoa_r+0x6f6>
 8002fa6:	4b6b      	ldr	r3, [pc, #428]	; (8003154 <_dtoa_r+0x60c>)
 8002fa8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8002fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fb0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002fb4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	f280 80da 	bge.w	8003170 <_dtoa_r+0x628>
 8002fbc:	f1b9 0f00 	cmp.w	r9, #0
 8002fc0:	f300 80d6 	bgt.w	8003170 <_dtoa_r+0x628>
 8002fc4:	f040 82cd 	bne.w	8003562 <_dtoa_r+0xa1a>
 8002fc8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	4b66      	ldr	r3, [pc, #408]	; (8003168 <_dtoa_r+0x620>)
 8002fd0:	f7fd fa7e 	bl	80004d0 <__aeabi_dmul>
 8002fd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002fd8:	f7fd fd00 	bl	80009dc <__aeabi_dcmpge>
 8002fdc:	464e      	mov	r6, r9
 8002fde:	464f      	mov	r7, r9
 8002fe0:	2800      	cmp	r0, #0
 8002fe2:	f040 82a4 	bne.w	800352e <_dtoa_r+0x9e6>
 8002fe6:	9b06      	ldr	r3, [sp, #24]
 8002fe8:	9a06      	ldr	r2, [sp, #24]
 8002fea:	1c5d      	adds	r5, r3, #1
 8002fec:	2331      	movs	r3, #49	; 0x31
 8002fee:	f10b 0b01 	add.w	fp, fp, #1
 8002ff2:	7013      	strb	r3, [r2, #0]
 8002ff4:	e29f      	b.n	8003536 <_dtoa_r+0x9ee>
 8002ff6:	07f2      	lsls	r2, r6, #31
 8002ff8:	d505      	bpl.n	8003006 <_dtoa_r+0x4be>
 8002ffa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ffe:	f7fd fa67 	bl	80004d0 <__aeabi_dmul>
 8003002:	2301      	movs	r3, #1
 8003004:	3501      	adds	r5, #1
 8003006:	1076      	asrs	r6, r6, #1
 8003008:	3708      	adds	r7, #8
 800300a:	e76d      	b.n	8002ee8 <_dtoa_r+0x3a0>
 800300c:	2502      	movs	r5, #2
 800300e:	e770      	b.n	8002ef2 <_dtoa_r+0x3aa>
 8003010:	465f      	mov	r7, fp
 8003012:	464e      	mov	r6, r9
 8003014:	e78f      	b.n	8002f36 <_dtoa_r+0x3ee>
 8003016:	9a06      	ldr	r2, [sp, #24]
 8003018:	4b4e      	ldr	r3, [pc, #312]	; (8003154 <_dtoa_r+0x60c>)
 800301a:	4432      	add	r2, r6
 800301c:	9211      	str	r2, [sp, #68]	; 0x44
 800301e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003020:	1e71      	subs	r1, r6, #1
 8003022:	2a00      	cmp	r2, #0
 8003024:	d048      	beq.n	80030b8 <_dtoa_r+0x570>
 8003026:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800302a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800302e:	2000      	movs	r0, #0
 8003030:	494e      	ldr	r1, [pc, #312]	; (800316c <_dtoa_r+0x624>)
 8003032:	f7fd fb77 	bl	8000724 <__aeabi_ddiv>
 8003036:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800303a:	f7fd f895 	bl	8000168 <__aeabi_dsub>
 800303e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003042:	9d06      	ldr	r5, [sp, #24]
 8003044:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003048:	f7fd fcf2 	bl	8000a30 <__aeabi_d2iz>
 800304c:	4606      	mov	r6, r0
 800304e:	f7fd f9d9 	bl	8000404 <__aeabi_i2d>
 8003052:	4602      	mov	r2, r0
 8003054:	460b      	mov	r3, r1
 8003056:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800305a:	f7fd f885 	bl	8000168 <__aeabi_dsub>
 800305e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003062:	3630      	adds	r6, #48	; 0x30
 8003064:	f805 6b01 	strb.w	r6, [r5], #1
 8003068:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800306c:	f7fd fca2 	bl	80009b4 <__aeabi_dcmplt>
 8003070:	2800      	cmp	r0, #0
 8003072:	d164      	bne.n	800313e <_dtoa_r+0x5f6>
 8003074:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003078:	2000      	movs	r0, #0
 800307a:	4938      	ldr	r1, [pc, #224]	; (800315c <_dtoa_r+0x614>)
 800307c:	f7fd f874 	bl	8000168 <__aeabi_dsub>
 8003080:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003084:	f7fd fc96 	bl	80009b4 <__aeabi_dcmplt>
 8003088:	2800      	cmp	r0, #0
 800308a:	f040 80b9 	bne.w	8003200 <_dtoa_r+0x6b8>
 800308e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003090:	429d      	cmp	r5, r3
 8003092:	f43f af7c 	beq.w	8002f8e <_dtoa_r+0x446>
 8003096:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800309a:	2200      	movs	r2, #0
 800309c:	4b30      	ldr	r3, [pc, #192]	; (8003160 <_dtoa_r+0x618>)
 800309e:	f7fd fa17 	bl	80004d0 <__aeabi_dmul>
 80030a2:	2200      	movs	r2, #0
 80030a4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80030a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80030ac:	4b2c      	ldr	r3, [pc, #176]	; (8003160 <_dtoa_r+0x618>)
 80030ae:	f7fd fa0f 	bl	80004d0 <__aeabi_dmul>
 80030b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80030b6:	e7c5      	b.n	8003044 <_dtoa_r+0x4fc>
 80030b8:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80030bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80030c0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80030c4:	f7fd fa04 	bl	80004d0 <__aeabi_dmul>
 80030c8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80030cc:	9d06      	ldr	r5, [sp, #24]
 80030ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80030d2:	f7fd fcad 	bl	8000a30 <__aeabi_d2iz>
 80030d6:	4606      	mov	r6, r0
 80030d8:	f7fd f994 	bl	8000404 <__aeabi_i2d>
 80030dc:	4602      	mov	r2, r0
 80030de:	460b      	mov	r3, r1
 80030e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80030e4:	f7fd f840 	bl	8000168 <__aeabi_dsub>
 80030e8:	3630      	adds	r6, #48	; 0x30
 80030ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80030ec:	f805 6b01 	strb.w	r6, [r5], #1
 80030f0:	42ab      	cmp	r3, r5
 80030f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80030f6:	f04f 0200 	mov.w	r2, #0
 80030fa:	d124      	bne.n	8003146 <_dtoa_r+0x5fe>
 80030fc:	4b1b      	ldr	r3, [pc, #108]	; (800316c <_dtoa_r+0x624>)
 80030fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003102:	f7fd f833 	bl	800016c <__adddf3>
 8003106:	4602      	mov	r2, r0
 8003108:	460b      	mov	r3, r1
 800310a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800310e:	f7fd fc6f 	bl	80009f0 <__aeabi_dcmpgt>
 8003112:	2800      	cmp	r0, #0
 8003114:	d174      	bne.n	8003200 <_dtoa_r+0x6b8>
 8003116:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800311a:	2000      	movs	r0, #0
 800311c:	4913      	ldr	r1, [pc, #76]	; (800316c <_dtoa_r+0x624>)
 800311e:	f7fd f823 	bl	8000168 <__aeabi_dsub>
 8003122:	4602      	mov	r2, r0
 8003124:	460b      	mov	r3, r1
 8003126:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800312a:	f7fd fc43 	bl	80009b4 <__aeabi_dcmplt>
 800312e:	2800      	cmp	r0, #0
 8003130:	f43f af2d 	beq.w	8002f8e <_dtoa_r+0x446>
 8003134:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003138:	1e6a      	subs	r2, r5, #1
 800313a:	2b30      	cmp	r3, #48	; 0x30
 800313c:	d001      	beq.n	8003142 <_dtoa_r+0x5fa>
 800313e:	46bb      	mov	fp, r7
 8003140:	e04d      	b.n	80031de <_dtoa_r+0x696>
 8003142:	4615      	mov	r5, r2
 8003144:	e7f6      	b.n	8003134 <_dtoa_r+0x5ec>
 8003146:	4b06      	ldr	r3, [pc, #24]	; (8003160 <_dtoa_r+0x618>)
 8003148:	f7fd f9c2 	bl	80004d0 <__aeabi_dmul>
 800314c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003150:	e7bd      	b.n	80030ce <_dtoa_r+0x586>
 8003152:	bf00      	nop
 8003154:	080042b8 	.word	0x080042b8
 8003158:	08004290 	.word	0x08004290
 800315c:	3ff00000 	.word	0x3ff00000
 8003160:	40240000 	.word	0x40240000
 8003164:	401c0000 	.word	0x401c0000
 8003168:	40140000 	.word	0x40140000
 800316c:	3fe00000 	.word	0x3fe00000
 8003170:	9d06      	ldr	r5, [sp, #24]
 8003172:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003176:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800317a:	4630      	mov	r0, r6
 800317c:	4639      	mov	r1, r7
 800317e:	f7fd fad1 	bl	8000724 <__aeabi_ddiv>
 8003182:	f7fd fc55 	bl	8000a30 <__aeabi_d2iz>
 8003186:	4680      	mov	r8, r0
 8003188:	f7fd f93c 	bl	8000404 <__aeabi_i2d>
 800318c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003190:	f7fd f99e 	bl	80004d0 <__aeabi_dmul>
 8003194:	4602      	mov	r2, r0
 8003196:	460b      	mov	r3, r1
 8003198:	4630      	mov	r0, r6
 800319a:	4639      	mov	r1, r7
 800319c:	f7fc ffe4 	bl	8000168 <__aeabi_dsub>
 80031a0:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80031a4:	f805 6b01 	strb.w	r6, [r5], #1
 80031a8:	9e06      	ldr	r6, [sp, #24]
 80031aa:	4602      	mov	r2, r0
 80031ac:	1bae      	subs	r6, r5, r6
 80031ae:	45b1      	cmp	r9, r6
 80031b0:	460b      	mov	r3, r1
 80031b2:	d137      	bne.n	8003224 <_dtoa_r+0x6dc>
 80031b4:	f7fc ffda 	bl	800016c <__adddf3>
 80031b8:	4606      	mov	r6, r0
 80031ba:	460f      	mov	r7, r1
 80031bc:	4602      	mov	r2, r0
 80031be:	460b      	mov	r3, r1
 80031c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80031c4:	f7fd fbf6 	bl	80009b4 <__aeabi_dcmplt>
 80031c8:	b9c8      	cbnz	r0, 80031fe <_dtoa_r+0x6b6>
 80031ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80031ce:	4632      	mov	r2, r6
 80031d0:	463b      	mov	r3, r7
 80031d2:	f7fd fbe5 	bl	80009a0 <__aeabi_dcmpeq>
 80031d6:	b110      	cbz	r0, 80031de <_dtoa_r+0x696>
 80031d8:	f018 0f01 	tst.w	r8, #1
 80031dc:	d10f      	bne.n	80031fe <_dtoa_r+0x6b6>
 80031de:	4651      	mov	r1, sl
 80031e0:	4620      	mov	r0, r4
 80031e2:	f000 fae8 	bl	80037b6 <_Bfree>
 80031e6:	2300      	movs	r3, #0
 80031e8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80031ea:	702b      	strb	r3, [r5, #0]
 80031ec:	f10b 0301 	add.w	r3, fp, #1
 80031f0:	6013      	str	r3, [r2, #0]
 80031f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	f43f acec 	beq.w	8002bd2 <_dtoa_r+0x8a>
 80031fa:	601d      	str	r5, [r3, #0]
 80031fc:	e4e9      	b.n	8002bd2 <_dtoa_r+0x8a>
 80031fe:	465f      	mov	r7, fp
 8003200:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8003204:	1e6b      	subs	r3, r5, #1
 8003206:	2a39      	cmp	r2, #57	; 0x39
 8003208:	d106      	bne.n	8003218 <_dtoa_r+0x6d0>
 800320a:	9a06      	ldr	r2, [sp, #24]
 800320c:	429a      	cmp	r2, r3
 800320e:	d107      	bne.n	8003220 <_dtoa_r+0x6d8>
 8003210:	2330      	movs	r3, #48	; 0x30
 8003212:	7013      	strb	r3, [r2, #0]
 8003214:	4613      	mov	r3, r2
 8003216:	3701      	adds	r7, #1
 8003218:	781a      	ldrb	r2, [r3, #0]
 800321a:	3201      	adds	r2, #1
 800321c:	701a      	strb	r2, [r3, #0]
 800321e:	e78e      	b.n	800313e <_dtoa_r+0x5f6>
 8003220:	461d      	mov	r5, r3
 8003222:	e7ed      	b.n	8003200 <_dtoa_r+0x6b8>
 8003224:	2200      	movs	r2, #0
 8003226:	4bb5      	ldr	r3, [pc, #724]	; (80034fc <_dtoa_r+0x9b4>)
 8003228:	f7fd f952 	bl	80004d0 <__aeabi_dmul>
 800322c:	2200      	movs	r2, #0
 800322e:	2300      	movs	r3, #0
 8003230:	4606      	mov	r6, r0
 8003232:	460f      	mov	r7, r1
 8003234:	f7fd fbb4 	bl	80009a0 <__aeabi_dcmpeq>
 8003238:	2800      	cmp	r0, #0
 800323a:	d09c      	beq.n	8003176 <_dtoa_r+0x62e>
 800323c:	e7cf      	b.n	80031de <_dtoa_r+0x696>
 800323e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003240:	2a00      	cmp	r2, #0
 8003242:	f000 8129 	beq.w	8003498 <_dtoa_r+0x950>
 8003246:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003248:	2a01      	cmp	r2, #1
 800324a:	f300 810e 	bgt.w	800346a <_dtoa_r+0x922>
 800324e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003250:	2a00      	cmp	r2, #0
 8003252:	f000 8106 	beq.w	8003462 <_dtoa_r+0x91a>
 8003256:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800325a:	4645      	mov	r5, r8
 800325c:	9e08      	ldr	r6, [sp, #32]
 800325e:	9a07      	ldr	r2, [sp, #28]
 8003260:	2101      	movs	r1, #1
 8003262:	441a      	add	r2, r3
 8003264:	4620      	mov	r0, r4
 8003266:	4498      	add	r8, r3
 8003268:	9207      	str	r2, [sp, #28]
 800326a:	f000 fb44 	bl	80038f6 <__i2b>
 800326e:	4607      	mov	r7, r0
 8003270:	2d00      	cmp	r5, #0
 8003272:	dd0b      	ble.n	800328c <_dtoa_r+0x744>
 8003274:	9b07      	ldr	r3, [sp, #28]
 8003276:	2b00      	cmp	r3, #0
 8003278:	dd08      	ble.n	800328c <_dtoa_r+0x744>
 800327a:	42ab      	cmp	r3, r5
 800327c:	bfa8      	it	ge
 800327e:	462b      	movge	r3, r5
 8003280:	9a07      	ldr	r2, [sp, #28]
 8003282:	eba8 0803 	sub.w	r8, r8, r3
 8003286:	1aed      	subs	r5, r5, r3
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	9307      	str	r3, [sp, #28]
 800328c:	9b08      	ldr	r3, [sp, #32]
 800328e:	b1fb      	cbz	r3, 80032d0 <_dtoa_r+0x788>
 8003290:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003292:	2b00      	cmp	r3, #0
 8003294:	f000 8104 	beq.w	80034a0 <_dtoa_r+0x958>
 8003298:	2e00      	cmp	r6, #0
 800329a:	dd11      	ble.n	80032c0 <_dtoa_r+0x778>
 800329c:	4639      	mov	r1, r7
 800329e:	4632      	mov	r2, r6
 80032a0:	4620      	mov	r0, r4
 80032a2:	f000 fbbd 	bl	8003a20 <__pow5mult>
 80032a6:	4652      	mov	r2, sl
 80032a8:	4601      	mov	r1, r0
 80032aa:	4607      	mov	r7, r0
 80032ac:	4620      	mov	r0, r4
 80032ae:	f000 fb2b 	bl	8003908 <__multiply>
 80032b2:	4651      	mov	r1, sl
 80032b4:	900a      	str	r0, [sp, #40]	; 0x28
 80032b6:	4620      	mov	r0, r4
 80032b8:	f000 fa7d 	bl	80037b6 <_Bfree>
 80032bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80032be:	469a      	mov	sl, r3
 80032c0:	9b08      	ldr	r3, [sp, #32]
 80032c2:	1b9a      	subs	r2, r3, r6
 80032c4:	d004      	beq.n	80032d0 <_dtoa_r+0x788>
 80032c6:	4651      	mov	r1, sl
 80032c8:	4620      	mov	r0, r4
 80032ca:	f000 fba9 	bl	8003a20 <__pow5mult>
 80032ce:	4682      	mov	sl, r0
 80032d0:	2101      	movs	r1, #1
 80032d2:	4620      	mov	r0, r4
 80032d4:	f000 fb0f 	bl	80038f6 <__i2b>
 80032d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80032da:	4606      	mov	r6, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	f340 80e1 	ble.w	80034a4 <_dtoa_r+0x95c>
 80032e2:	461a      	mov	r2, r3
 80032e4:	4601      	mov	r1, r0
 80032e6:	4620      	mov	r0, r4
 80032e8:	f000 fb9a 	bl	8003a20 <__pow5mult>
 80032ec:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80032ee:	4606      	mov	r6, r0
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	f340 80da 	ble.w	80034aa <_dtoa_r+0x962>
 80032f6:	2300      	movs	r3, #0
 80032f8:	9308      	str	r3, [sp, #32]
 80032fa:	6933      	ldr	r3, [r6, #16]
 80032fc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8003300:	6918      	ldr	r0, [r3, #16]
 8003302:	f000 faaa 	bl	800385a <__hi0bits>
 8003306:	f1c0 0020 	rsb	r0, r0, #32
 800330a:	9b07      	ldr	r3, [sp, #28]
 800330c:	4418      	add	r0, r3
 800330e:	f010 001f 	ands.w	r0, r0, #31
 8003312:	f000 80f0 	beq.w	80034f6 <_dtoa_r+0x9ae>
 8003316:	f1c0 0320 	rsb	r3, r0, #32
 800331a:	2b04      	cmp	r3, #4
 800331c:	f340 80e2 	ble.w	80034e4 <_dtoa_r+0x99c>
 8003320:	9b07      	ldr	r3, [sp, #28]
 8003322:	f1c0 001c 	rsb	r0, r0, #28
 8003326:	4480      	add	r8, r0
 8003328:	4405      	add	r5, r0
 800332a:	4403      	add	r3, r0
 800332c:	9307      	str	r3, [sp, #28]
 800332e:	f1b8 0f00 	cmp.w	r8, #0
 8003332:	dd05      	ble.n	8003340 <_dtoa_r+0x7f8>
 8003334:	4651      	mov	r1, sl
 8003336:	4642      	mov	r2, r8
 8003338:	4620      	mov	r0, r4
 800333a:	f000 fbbf 	bl	8003abc <__lshift>
 800333e:	4682      	mov	sl, r0
 8003340:	9b07      	ldr	r3, [sp, #28]
 8003342:	2b00      	cmp	r3, #0
 8003344:	dd05      	ble.n	8003352 <_dtoa_r+0x80a>
 8003346:	4631      	mov	r1, r6
 8003348:	461a      	mov	r2, r3
 800334a:	4620      	mov	r0, r4
 800334c:	f000 fbb6 	bl	8003abc <__lshift>
 8003350:	4606      	mov	r6, r0
 8003352:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003354:	2b00      	cmp	r3, #0
 8003356:	f000 80d3 	beq.w	8003500 <_dtoa_r+0x9b8>
 800335a:	4631      	mov	r1, r6
 800335c:	4650      	mov	r0, sl
 800335e:	f000 fbfe 	bl	8003b5e <__mcmp>
 8003362:	2800      	cmp	r0, #0
 8003364:	f280 80cc 	bge.w	8003500 <_dtoa_r+0x9b8>
 8003368:	2300      	movs	r3, #0
 800336a:	4651      	mov	r1, sl
 800336c:	220a      	movs	r2, #10
 800336e:	4620      	mov	r0, r4
 8003370:	f000 fa38 	bl	80037e4 <__multadd>
 8003374:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003376:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800337a:	4682      	mov	sl, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	f000 81a9 	beq.w	80036d4 <_dtoa_r+0xb8c>
 8003382:	2300      	movs	r3, #0
 8003384:	4639      	mov	r1, r7
 8003386:	220a      	movs	r2, #10
 8003388:	4620      	mov	r0, r4
 800338a:	f000 fa2b 	bl	80037e4 <__multadd>
 800338e:	9b04      	ldr	r3, [sp, #16]
 8003390:	4607      	mov	r7, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	dc03      	bgt.n	800339e <_dtoa_r+0x856>
 8003396:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003398:	2b02      	cmp	r3, #2
 800339a:	f300 80b9 	bgt.w	8003510 <_dtoa_r+0x9c8>
 800339e:	2d00      	cmp	r5, #0
 80033a0:	dd05      	ble.n	80033ae <_dtoa_r+0x866>
 80033a2:	4639      	mov	r1, r7
 80033a4:	462a      	mov	r2, r5
 80033a6:	4620      	mov	r0, r4
 80033a8:	f000 fb88 	bl	8003abc <__lshift>
 80033ac:	4607      	mov	r7, r0
 80033ae:	9b08      	ldr	r3, [sp, #32]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f000 8110 	beq.w	80035d6 <_dtoa_r+0xa8e>
 80033b6:	6879      	ldr	r1, [r7, #4]
 80033b8:	4620      	mov	r0, r4
 80033ba:	f000 f9c8 	bl	800374e <_Balloc>
 80033be:	4605      	mov	r5, r0
 80033c0:	693a      	ldr	r2, [r7, #16]
 80033c2:	f107 010c 	add.w	r1, r7, #12
 80033c6:	3202      	adds	r2, #2
 80033c8:	0092      	lsls	r2, r2, #2
 80033ca:	300c      	adds	r0, #12
 80033cc:	f000 f9b4 	bl	8003738 <memcpy>
 80033d0:	2201      	movs	r2, #1
 80033d2:	4629      	mov	r1, r5
 80033d4:	4620      	mov	r0, r4
 80033d6:	f000 fb71 	bl	8003abc <__lshift>
 80033da:	9707      	str	r7, [sp, #28]
 80033dc:	4607      	mov	r7, r0
 80033de:	9b02      	ldr	r3, [sp, #8]
 80033e0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80033e4:	f003 0301 	and.w	r3, r3, #1
 80033e8:	9308      	str	r3, [sp, #32]
 80033ea:	4631      	mov	r1, r6
 80033ec:	4650      	mov	r0, sl
 80033ee:	f7ff fb1d 	bl	8002a2c <quorem>
 80033f2:	9907      	ldr	r1, [sp, #28]
 80033f4:	4605      	mov	r5, r0
 80033f6:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80033fa:	4650      	mov	r0, sl
 80033fc:	f000 fbaf 	bl	8003b5e <__mcmp>
 8003400:	463a      	mov	r2, r7
 8003402:	9002      	str	r0, [sp, #8]
 8003404:	4631      	mov	r1, r6
 8003406:	4620      	mov	r0, r4
 8003408:	f000 fbc3 	bl	8003b92 <__mdiff>
 800340c:	68c3      	ldr	r3, [r0, #12]
 800340e:	4602      	mov	r2, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	f040 80e2 	bne.w	80035da <_dtoa_r+0xa92>
 8003416:	4601      	mov	r1, r0
 8003418:	9009      	str	r0, [sp, #36]	; 0x24
 800341a:	4650      	mov	r0, sl
 800341c:	f000 fb9f 	bl	8003b5e <__mcmp>
 8003420:	4603      	mov	r3, r0
 8003422:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003424:	4611      	mov	r1, r2
 8003426:	4620      	mov	r0, r4
 8003428:	9309      	str	r3, [sp, #36]	; 0x24
 800342a:	f000 f9c4 	bl	80037b6 <_Bfree>
 800342e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003430:	2b00      	cmp	r3, #0
 8003432:	f040 80d4 	bne.w	80035de <_dtoa_r+0xa96>
 8003436:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003438:	2a00      	cmp	r2, #0
 800343a:	f040 80d0 	bne.w	80035de <_dtoa_r+0xa96>
 800343e:	9a08      	ldr	r2, [sp, #32]
 8003440:	2a00      	cmp	r2, #0
 8003442:	f040 80cc 	bne.w	80035de <_dtoa_r+0xa96>
 8003446:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800344a:	f000 80e8 	beq.w	800361e <_dtoa_r+0xad6>
 800344e:	9b02      	ldr	r3, [sp, #8]
 8003450:	2b00      	cmp	r3, #0
 8003452:	dd01      	ble.n	8003458 <_dtoa_r+0x910>
 8003454:	f105 0931 	add.w	r9, r5, #49	; 0x31
 8003458:	f108 0501 	add.w	r5, r8, #1
 800345c:	f888 9000 	strb.w	r9, [r8]
 8003460:	e06b      	b.n	800353a <_dtoa_r+0x9f2>
 8003462:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003464:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003468:	e6f7      	b.n	800325a <_dtoa_r+0x712>
 800346a:	9b08      	ldr	r3, [sp, #32]
 800346c:	f109 36ff 	add.w	r6, r9, #4294967295	; 0xffffffff
 8003470:	42b3      	cmp	r3, r6
 8003472:	bfb7      	itett	lt
 8003474:	9b08      	ldrlt	r3, [sp, #32]
 8003476:	1b9e      	subge	r6, r3, r6
 8003478:	1af2      	sublt	r2, r6, r3
 800347a:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800347c:	bfbf      	itttt	lt
 800347e:	9608      	strlt	r6, [sp, #32]
 8003480:	189b      	addlt	r3, r3, r2
 8003482:	930c      	strlt	r3, [sp, #48]	; 0x30
 8003484:	2600      	movlt	r6, #0
 8003486:	f1b9 0f00 	cmp.w	r9, #0
 800348a:	bfb9      	ittee	lt
 800348c:	eba8 0509 	sublt.w	r5, r8, r9
 8003490:	2300      	movlt	r3, #0
 8003492:	4645      	movge	r5, r8
 8003494:	464b      	movge	r3, r9
 8003496:	e6e2      	b.n	800325e <_dtoa_r+0x716>
 8003498:	9e08      	ldr	r6, [sp, #32]
 800349a:	4645      	mov	r5, r8
 800349c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800349e:	e6e7      	b.n	8003270 <_dtoa_r+0x728>
 80034a0:	9a08      	ldr	r2, [sp, #32]
 80034a2:	e710      	b.n	80032c6 <_dtoa_r+0x77e>
 80034a4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	dc18      	bgt.n	80034dc <_dtoa_r+0x994>
 80034aa:	9b02      	ldr	r3, [sp, #8]
 80034ac:	b9b3      	cbnz	r3, 80034dc <_dtoa_r+0x994>
 80034ae:	9b03      	ldr	r3, [sp, #12]
 80034b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80034b4:	b9a3      	cbnz	r3, 80034e0 <_dtoa_r+0x998>
 80034b6:	9b03      	ldr	r3, [sp, #12]
 80034b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80034bc:	0d1b      	lsrs	r3, r3, #20
 80034be:	051b      	lsls	r3, r3, #20
 80034c0:	b12b      	cbz	r3, 80034ce <_dtoa_r+0x986>
 80034c2:	9b07      	ldr	r3, [sp, #28]
 80034c4:	f108 0801 	add.w	r8, r8, #1
 80034c8:	3301      	adds	r3, #1
 80034ca:	9307      	str	r3, [sp, #28]
 80034cc:	2301      	movs	r3, #1
 80034ce:	9308      	str	r3, [sp, #32]
 80034d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	f47f af11 	bne.w	80032fa <_dtoa_r+0x7b2>
 80034d8:	2001      	movs	r0, #1
 80034da:	e716      	b.n	800330a <_dtoa_r+0x7c2>
 80034dc:	2300      	movs	r3, #0
 80034de:	e7f6      	b.n	80034ce <_dtoa_r+0x986>
 80034e0:	9b02      	ldr	r3, [sp, #8]
 80034e2:	e7f4      	b.n	80034ce <_dtoa_r+0x986>
 80034e4:	f43f af23 	beq.w	800332e <_dtoa_r+0x7e6>
 80034e8:	9a07      	ldr	r2, [sp, #28]
 80034ea:	331c      	adds	r3, #28
 80034ec:	441a      	add	r2, r3
 80034ee:	4498      	add	r8, r3
 80034f0:	441d      	add	r5, r3
 80034f2:	4613      	mov	r3, r2
 80034f4:	e71a      	b.n	800332c <_dtoa_r+0x7e4>
 80034f6:	4603      	mov	r3, r0
 80034f8:	e7f6      	b.n	80034e8 <_dtoa_r+0x9a0>
 80034fa:	bf00      	nop
 80034fc:	40240000 	.word	0x40240000
 8003500:	f1b9 0f00 	cmp.w	r9, #0
 8003504:	dc33      	bgt.n	800356e <_dtoa_r+0xa26>
 8003506:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003508:	2b02      	cmp	r3, #2
 800350a:	dd30      	ble.n	800356e <_dtoa_r+0xa26>
 800350c:	f8cd 9010 	str.w	r9, [sp, #16]
 8003510:	9b04      	ldr	r3, [sp, #16]
 8003512:	b963      	cbnz	r3, 800352e <_dtoa_r+0x9e6>
 8003514:	4631      	mov	r1, r6
 8003516:	2205      	movs	r2, #5
 8003518:	4620      	mov	r0, r4
 800351a:	f000 f963 	bl	80037e4 <__multadd>
 800351e:	4601      	mov	r1, r0
 8003520:	4606      	mov	r6, r0
 8003522:	4650      	mov	r0, sl
 8003524:	f000 fb1b 	bl	8003b5e <__mcmp>
 8003528:	2800      	cmp	r0, #0
 800352a:	f73f ad5c 	bgt.w	8002fe6 <_dtoa_r+0x49e>
 800352e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003530:	9d06      	ldr	r5, [sp, #24]
 8003532:	ea6f 0b03 	mvn.w	fp, r3
 8003536:	2300      	movs	r3, #0
 8003538:	9307      	str	r3, [sp, #28]
 800353a:	4631      	mov	r1, r6
 800353c:	4620      	mov	r0, r4
 800353e:	f000 f93a 	bl	80037b6 <_Bfree>
 8003542:	2f00      	cmp	r7, #0
 8003544:	f43f ae4b 	beq.w	80031de <_dtoa_r+0x696>
 8003548:	9b07      	ldr	r3, [sp, #28]
 800354a:	b12b      	cbz	r3, 8003558 <_dtoa_r+0xa10>
 800354c:	42bb      	cmp	r3, r7
 800354e:	d003      	beq.n	8003558 <_dtoa_r+0xa10>
 8003550:	4619      	mov	r1, r3
 8003552:	4620      	mov	r0, r4
 8003554:	f000 f92f 	bl	80037b6 <_Bfree>
 8003558:	4639      	mov	r1, r7
 800355a:	4620      	mov	r0, r4
 800355c:	f000 f92b 	bl	80037b6 <_Bfree>
 8003560:	e63d      	b.n	80031de <_dtoa_r+0x696>
 8003562:	2600      	movs	r6, #0
 8003564:	4637      	mov	r7, r6
 8003566:	e7e2      	b.n	800352e <_dtoa_r+0x9e6>
 8003568:	46bb      	mov	fp, r7
 800356a:	4637      	mov	r7, r6
 800356c:	e53b      	b.n	8002fe6 <_dtoa_r+0x49e>
 800356e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003570:	f8cd 9010 	str.w	r9, [sp, #16]
 8003574:	2b00      	cmp	r3, #0
 8003576:	f47f af12 	bne.w	800339e <_dtoa_r+0x856>
 800357a:	9d06      	ldr	r5, [sp, #24]
 800357c:	4631      	mov	r1, r6
 800357e:	4650      	mov	r0, sl
 8003580:	f7ff fa54 	bl	8002a2c <quorem>
 8003584:	9b06      	ldr	r3, [sp, #24]
 8003586:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800358a:	f805 9b01 	strb.w	r9, [r5], #1
 800358e:	9a04      	ldr	r2, [sp, #16]
 8003590:	1aeb      	subs	r3, r5, r3
 8003592:	429a      	cmp	r2, r3
 8003594:	f300 8081 	bgt.w	800369a <_dtoa_r+0xb52>
 8003598:	9b06      	ldr	r3, [sp, #24]
 800359a:	2a01      	cmp	r2, #1
 800359c:	bfac      	ite	ge
 800359e:	189b      	addge	r3, r3, r2
 80035a0:	3301      	addlt	r3, #1
 80035a2:	4698      	mov	r8, r3
 80035a4:	2300      	movs	r3, #0
 80035a6:	9307      	str	r3, [sp, #28]
 80035a8:	4651      	mov	r1, sl
 80035aa:	2201      	movs	r2, #1
 80035ac:	4620      	mov	r0, r4
 80035ae:	f000 fa85 	bl	8003abc <__lshift>
 80035b2:	4631      	mov	r1, r6
 80035b4:	4682      	mov	sl, r0
 80035b6:	f000 fad2 	bl	8003b5e <__mcmp>
 80035ba:	2800      	cmp	r0, #0
 80035bc:	dc34      	bgt.n	8003628 <_dtoa_r+0xae0>
 80035be:	d102      	bne.n	80035c6 <_dtoa_r+0xa7e>
 80035c0:	f019 0f01 	tst.w	r9, #1
 80035c4:	d130      	bne.n	8003628 <_dtoa_r+0xae0>
 80035c6:	4645      	mov	r5, r8
 80035c8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80035cc:	1e6a      	subs	r2, r5, #1
 80035ce:	2b30      	cmp	r3, #48	; 0x30
 80035d0:	d1b3      	bne.n	800353a <_dtoa_r+0x9f2>
 80035d2:	4615      	mov	r5, r2
 80035d4:	e7f8      	b.n	80035c8 <_dtoa_r+0xa80>
 80035d6:	4638      	mov	r0, r7
 80035d8:	e6ff      	b.n	80033da <_dtoa_r+0x892>
 80035da:	2301      	movs	r3, #1
 80035dc:	e722      	b.n	8003424 <_dtoa_r+0x8dc>
 80035de:	9a02      	ldr	r2, [sp, #8]
 80035e0:	2a00      	cmp	r2, #0
 80035e2:	db04      	blt.n	80035ee <_dtoa_r+0xaa6>
 80035e4:	d128      	bne.n	8003638 <_dtoa_r+0xaf0>
 80035e6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80035e8:	bb32      	cbnz	r2, 8003638 <_dtoa_r+0xaf0>
 80035ea:	9a08      	ldr	r2, [sp, #32]
 80035ec:	bb22      	cbnz	r2, 8003638 <_dtoa_r+0xaf0>
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	f77f af32 	ble.w	8003458 <_dtoa_r+0x910>
 80035f4:	4651      	mov	r1, sl
 80035f6:	2201      	movs	r2, #1
 80035f8:	4620      	mov	r0, r4
 80035fa:	f000 fa5f 	bl	8003abc <__lshift>
 80035fe:	4631      	mov	r1, r6
 8003600:	4682      	mov	sl, r0
 8003602:	f000 faac 	bl	8003b5e <__mcmp>
 8003606:	2800      	cmp	r0, #0
 8003608:	dc05      	bgt.n	8003616 <_dtoa_r+0xace>
 800360a:	f47f af25 	bne.w	8003458 <_dtoa_r+0x910>
 800360e:	f019 0f01 	tst.w	r9, #1
 8003612:	f43f af21 	beq.w	8003458 <_dtoa_r+0x910>
 8003616:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800361a:	f47f af1b 	bne.w	8003454 <_dtoa_r+0x90c>
 800361e:	2339      	movs	r3, #57	; 0x39
 8003620:	f108 0801 	add.w	r8, r8, #1
 8003624:	f808 3c01 	strb.w	r3, [r8, #-1]
 8003628:	4645      	mov	r5, r8
 800362a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800362e:	1e6a      	subs	r2, r5, #1
 8003630:	2b39      	cmp	r3, #57	; 0x39
 8003632:	d03a      	beq.n	80036aa <_dtoa_r+0xb62>
 8003634:	3301      	adds	r3, #1
 8003636:	e03f      	b.n	80036b8 <_dtoa_r+0xb70>
 8003638:	2b00      	cmp	r3, #0
 800363a:	f108 0501 	add.w	r5, r8, #1
 800363e:	dd05      	ble.n	800364c <_dtoa_r+0xb04>
 8003640:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8003644:	d0eb      	beq.n	800361e <_dtoa_r+0xad6>
 8003646:	f109 0901 	add.w	r9, r9, #1
 800364a:	e707      	b.n	800345c <_dtoa_r+0x914>
 800364c:	9b06      	ldr	r3, [sp, #24]
 800364e:	9a04      	ldr	r2, [sp, #16]
 8003650:	1aeb      	subs	r3, r5, r3
 8003652:	4293      	cmp	r3, r2
 8003654:	46a8      	mov	r8, r5
 8003656:	f805 9c01 	strb.w	r9, [r5, #-1]
 800365a:	d0a5      	beq.n	80035a8 <_dtoa_r+0xa60>
 800365c:	4651      	mov	r1, sl
 800365e:	2300      	movs	r3, #0
 8003660:	220a      	movs	r2, #10
 8003662:	4620      	mov	r0, r4
 8003664:	f000 f8be 	bl	80037e4 <__multadd>
 8003668:	9b07      	ldr	r3, [sp, #28]
 800366a:	4682      	mov	sl, r0
 800366c:	42bb      	cmp	r3, r7
 800366e:	f04f 020a 	mov.w	r2, #10
 8003672:	f04f 0300 	mov.w	r3, #0
 8003676:	9907      	ldr	r1, [sp, #28]
 8003678:	4620      	mov	r0, r4
 800367a:	d104      	bne.n	8003686 <_dtoa_r+0xb3e>
 800367c:	f000 f8b2 	bl	80037e4 <__multadd>
 8003680:	9007      	str	r0, [sp, #28]
 8003682:	4607      	mov	r7, r0
 8003684:	e6b1      	b.n	80033ea <_dtoa_r+0x8a2>
 8003686:	f000 f8ad 	bl	80037e4 <__multadd>
 800368a:	2300      	movs	r3, #0
 800368c:	9007      	str	r0, [sp, #28]
 800368e:	220a      	movs	r2, #10
 8003690:	4639      	mov	r1, r7
 8003692:	4620      	mov	r0, r4
 8003694:	f000 f8a6 	bl	80037e4 <__multadd>
 8003698:	e7f3      	b.n	8003682 <_dtoa_r+0xb3a>
 800369a:	4651      	mov	r1, sl
 800369c:	2300      	movs	r3, #0
 800369e:	220a      	movs	r2, #10
 80036a0:	4620      	mov	r0, r4
 80036a2:	f000 f89f 	bl	80037e4 <__multadd>
 80036a6:	4682      	mov	sl, r0
 80036a8:	e768      	b.n	800357c <_dtoa_r+0xa34>
 80036aa:	9b06      	ldr	r3, [sp, #24]
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d105      	bne.n	80036bc <_dtoa_r+0xb74>
 80036b0:	2331      	movs	r3, #49	; 0x31
 80036b2:	9a06      	ldr	r2, [sp, #24]
 80036b4:	f10b 0b01 	add.w	fp, fp, #1
 80036b8:	7013      	strb	r3, [r2, #0]
 80036ba:	e73e      	b.n	800353a <_dtoa_r+0x9f2>
 80036bc:	4615      	mov	r5, r2
 80036be:	e7b4      	b.n	800362a <_dtoa_r+0xae2>
 80036c0:	4b09      	ldr	r3, [pc, #36]	; (80036e8 <_dtoa_r+0xba0>)
 80036c2:	f7ff baa3 	b.w	8002c0c <_dtoa_r+0xc4>
 80036c6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	f47f aa7d 	bne.w	8002bc8 <_dtoa_r+0x80>
 80036ce:	4b07      	ldr	r3, [pc, #28]	; (80036ec <_dtoa_r+0xba4>)
 80036d0:	f7ff ba9c 	b.w	8002c0c <_dtoa_r+0xc4>
 80036d4:	9b04      	ldr	r3, [sp, #16]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	f73f af4f 	bgt.w	800357a <_dtoa_r+0xa32>
 80036dc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80036de:	2b02      	cmp	r3, #2
 80036e0:	f77f af4b 	ble.w	800357a <_dtoa_r+0xa32>
 80036e4:	e714      	b.n	8003510 <_dtoa_r+0x9c8>
 80036e6:	bf00      	nop
 80036e8:	0800425f 	.word	0x0800425f
 80036ec:	08004283 	.word	0x08004283

080036f0 <_localeconv_r>:
 80036f0:	4b04      	ldr	r3, [pc, #16]	; (8003704 <_localeconv_r+0x14>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	6a18      	ldr	r0, [r3, #32]
 80036f6:	4b04      	ldr	r3, [pc, #16]	; (8003708 <_localeconv_r+0x18>)
 80036f8:	2800      	cmp	r0, #0
 80036fa:	bf08      	it	eq
 80036fc:	4618      	moveq	r0, r3
 80036fe:	30f0      	adds	r0, #240	; 0xf0
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	2000000c 	.word	0x2000000c
 8003708:	20000070 	.word	0x20000070

0800370c <malloc>:
 800370c:	4b02      	ldr	r3, [pc, #8]	; (8003718 <malloc+0xc>)
 800370e:	4601      	mov	r1, r0
 8003710:	6818      	ldr	r0, [r3, #0]
 8003712:	f000 bb47 	b.w	8003da4 <_malloc_r>
 8003716:	bf00      	nop
 8003718:	2000000c 	.word	0x2000000c

0800371c <memchr>:
 800371c:	b510      	push	{r4, lr}
 800371e:	b2c9      	uxtb	r1, r1
 8003720:	4402      	add	r2, r0
 8003722:	4290      	cmp	r0, r2
 8003724:	4603      	mov	r3, r0
 8003726:	d101      	bne.n	800372c <memchr+0x10>
 8003728:	2000      	movs	r0, #0
 800372a:	bd10      	pop	{r4, pc}
 800372c:	781c      	ldrb	r4, [r3, #0]
 800372e:	3001      	adds	r0, #1
 8003730:	428c      	cmp	r4, r1
 8003732:	d1f6      	bne.n	8003722 <memchr+0x6>
 8003734:	4618      	mov	r0, r3
 8003736:	bd10      	pop	{r4, pc}

08003738 <memcpy>:
 8003738:	b510      	push	{r4, lr}
 800373a:	1e43      	subs	r3, r0, #1
 800373c:	440a      	add	r2, r1
 800373e:	4291      	cmp	r1, r2
 8003740:	d100      	bne.n	8003744 <memcpy+0xc>
 8003742:	bd10      	pop	{r4, pc}
 8003744:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003748:	f803 4f01 	strb.w	r4, [r3, #1]!
 800374c:	e7f7      	b.n	800373e <memcpy+0x6>

0800374e <_Balloc>:
 800374e:	b570      	push	{r4, r5, r6, lr}
 8003750:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003752:	4604      	mov	r4, r0
 8003754:	460e      	mov	r6, r1
 8003756:	b93d      	cbnz	r5, 8003768 <_Balloc+0x1a>
 8003758:	2010      	movs	r0, #16
 800375a:	f7ff ffd7 	bl	800370c <malloc>
 800375e:	6260      	str	r0, [r4, #36]	; 0x24
 8003760:	6045      	str	r5, [r0, #4]
 8003762:	6085      	str	r5, [r0, #8]
 8003764:	6005      	str	r5, [r0, #0]
 8003766:	60c5      	str	r5, [r0, #12]
 8003768:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800376a:	68eb      	ldr	r3, [r5, #12]
 800376c:	b183      	cbz	r3, 8003790 <_Balloc+0x42>
 800376e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8003776:	b9b8      	cbnz	r0, 80037a8 <_Balloc+0x5a>
 8003778:	2101      	movs	r1, #1
 800377a:	fa01 f506 	lsl.w	r5, r1, r6
 800377e:	1d6a      	adds	r2, r5, #5
 8003780:	0092      	lsls	r2, r2, #2
 8003782:	4620      	mov	r0, r4
 8003784:	f000 fab3 	bl	8003cee <_calloc_r>
 8003788:	b160      	cbz	r0, 80037a4 <_Balloc+0x56>
 800378a:	6046      	str	r6, [r0, #4]
 800378c:	6085      	str	r5, [r0, #8]
 800378e:	e00e      	b.n	80037ae <_Balloc+0x60>
 8003790:	2221      	movs	r2, #33	; 0x21
 8003792:	2104      	movs	r1, #4
 8003794:	4620      	mov	r0, r4
 8003796:	f000 faaa 	bl	8003cee <_calloc_r>
 800379a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800379c:	60e8      	str	r0, [r5, #12]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d1e4      	bne.n	800376e <_Balloc+0x20>
 80037a4:	2000      	movs	r0, #0
 80037a6:	bd70      	pop	{r4, r5, r6, pc}
 80037a8:	6802      	ldr	r2, [r0, #0]
 80037aa:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80037ae:	2300      	movs	r3, #0
 80037b0:	6103      	str	r3, [r0, #16]
 80037b2:	60c3      	str	r3, [r0, #12]
 80037b4:	bd70      	pop	{r4, r5, r6, pc}

080037b6 <_Bfree>:
 80037b6:	b570      	push	{r4, r5, r6, lr}
 80037b8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80037ba:	4606      	mov	r6, r0
 80037bc:	460d      	mov	r5, r1
 80037be:	b93c      	cbnz	r4, 80037d0 <_Bfree+0x1a>
 80037c0:	2010      	movs	r0, #16
 80037c2:	f7ff ffa3 	bl	800370c <malloc>
 80037c6:	6270      	str	r0, [r6, #36]	; 0x24
 80037c8:	6044      	str	r4, [r0, #4]
 80037ca:	6084      	str	r4, [r0, #8]
 80037cc:	6004      	str	r4, [r0, #0]
 80037ce:	60c4      	str	r4, [r0, #12]
 80037d0:	b13d      	cbz	r5, 80037e2 <_Bfree+0x2c>
 80037d2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80037d4:	686a      	ldr	r2, [r5, #4]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80037dc:	6029      	str	r1, [r5, #0]
 80037de:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80037e2:	bd70      	pop	{r4, r5, r6, pc}

080037e4 <__multadd>:
 80037e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037e8:	461f      	mov	r7, r3
 80037ea:	4606      	mov	r6, r0
 80037ec:	460c      	mov	r4, r1
 80037ee:	2300      	movs	r3, #0
 80037f0:	690d      	ldr	r5, [r1, #16]
 80037f2:	f101 0e14 	add.w	lr, r1, #20
 80037f6:	f8de 0000 	ldr.w	r0, [lr]
 80037fa:	3301      	adds	r3, #1
 80037fc:	b281      	uxth	r1, r0
 80037fe:	fb02 7101 	mla	r1, r2, r1, r7
 8003802:	0c00      	lsrs	r0, r0, #16
 8003804:	0c0f      	lsrs	r7, r1, #16
 8003806:	fb02 7000 	mla	r0, r2, r0, r7
 800380a:	b289      	uxth	r1, r1
 800380c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8003810:	429d      	cmp	r5, r3
 8003812:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8003816:	f84e 1b04 	str.w	r1, [lr], #4
 800381a:	dcec      	bgt.n	80037f6 <__multadd+0x12>
 800381c:	b1d7      	cbz	r7, 8003854 <__multadd+0x70>
 800381e:	68a3      	ldr	r3, [r4, #8]
 8003820:	429d      	cmp	r5, r3
 8003822:	db12      	blt.n	800384a <__multadd+0x66>
 8003824:	6861      	ldr	r1, [r4, #4]
 8003826:	4630      	mov	r0, r6
 8003828:	3101      	adds	r1, #1
 800382a:	f7ff ff90 	bl	800374e <_Balloc>
 800382e:	4680      	mov	r8, r0
 8003830:	6922      	ldr	r2, [r4, #16]
 8003832:	f104 010c 	add.w	r1, r4, #12
 8003836:	3202      	adds	r2, #2
 8003838:	0092      	lsls	r2, r2, #2
 800383a:	300c      	adds	r0, #12
 800383c:	f7ff ff7c 	bl	8003738 <memcpy>
 8003840:	4621      	mov	r1, r4
 8003842:	4630      	mov	r0, r6
 8003844:	f7ff ffb7 	bl	80037b6 <_Bfree>
 8003848:	4644      	mov	r4, r8
 800384a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800384e:	3501      	adds	r5, #1
 8003850:	615f      	str	r7, [r3, #20]
 8003852:	6125      	str	r5, [r4, #16]
 8003854:	4620      	mov	r0, r4
 8003856:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800385a <__hi0bits>:
 800385a:	0c02      	lsrs	r2, r0, #16
 800385c:	0412      	lsls	r2, r2, #16
 800385e:	4603      	mov	r3, r0
 8003860:	b9b2      	cbnz	r2, 8003890 <__hi0bits+0x36>
 8003862:	0403      	lsls	r3, r0, #16
 8003864:	2010      	movs	r0, #16
 8003866:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800386a:	bf04      	itt	eq
 800386c:	021b      	lsleq	r3, r3, #8
 800386e:	3008      	addeq	r0, #8
 8003870:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8003874:	bf04      	itt	eq
 8003876:	011b      	lsleq	r3, r3, #4
 8003878:	3004      	addeq	r0, #4
 800387a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800387e:	bf04      	itt	eq
 8003880:	009b      	lsleq	r3, r3, #2
 8003882:	3002      	addeq	r0, #2
 8003884:	2b00      	cmp	r3, #0
 8003886:	db06      	blt.n	8003896 <__hi0bits+0x3c>
 8003888:	005b      	lsls	r3, r3, #1
 800388a:	d503      	bpl.n	8003894 <__hi0bits+0x3a>
 800388c:	3001      	adds	r0, #1
 800388e:	4770      	bx	lr
 8003890:	2000      	movs	r0, #0
 8003892:	e7e8      	b.n	8003866 <__hi0bits+0xc>
 8003894:	2020      	movs	r0, #32
 8003896:	4770      	bx	lr

08003898 <__lo0bits>:
 8003898:	6803      	ldr	r3, [r0, #0]
 800389a:	4601      	mov	r1, r0
 800389c:	f013 0207 	ands.w	r2, r3, #7
 80038a0:	d00b      	beq.n	80038ba <__lo0bits+0x22>
 80038a2:	07da      	lsls	r2, r3, #31
 80038a4:	d423      	bmi.n	80038ee <__lo0bits+0x56>
 80038a6:	0798      	lsls	r0, r3, #30
 80038a8:	bf49      	itett	mi
 80038aa:	085b      	lsrmi	r3, r3, #1
 80038ac:	089b      	lsrpl	r3, r3, #2
 80038ae:	2001      	movmi	r0, #1
 80038b0:	600b      	strmi	r3, [r1, #0]
 80038b2:	bf5c      	itt	pl
 80038b4:	600b      	strpl	r3, [r1, #0]
 80038b6:	2002      	movpl	r0, #2
 80038b8:	4770      	bx	lr
 80038ba:	b298      	uxth	r0, r3
 80038bc:	b9a8      	cbnz	r0, 80038ea <__lo0bits+0x52>
 80038be:	2010      	movs	r0, #16
 80038c0:	0c1b      	lsrs	r3, r3, #16
 80038c2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80038c6:	bf04      	itt	eq
 80038c8:	0a1b      	lsreq	r3, r3, #8
 80038ca:	3008      	addeq	r0, #8
 80038cc:	071a      	lsls	r2, r3, #28
 80038ce:	bf04      	itt	eq
 80038d0:	091b      	lsreq	r3, r3, #4
 80038d2:	3004      	addeq	r0, #4
 80038d4:	079a      	lsls	r2, r3, #30
 80038d6:	bf04      	itt	eq
 80038d8:	089b      	lsreq	r3, r3, #2
 80038da:	3002      	addeq	r0, #2
 80038dc:	07da      	lsls	r2, r3, #31
 80038de:	d402      	bmi.n	80038e6 <__lo0bits+0x4e>
 80038e0:	085b      	lsrs	r3, r3, #1
 80038e2:	d006      	beq.n	80038f2 <__lo0bits+0x5a>
 80038e4:	3001      	adds	r0, #1
 80038e6:	600b      	str	r3, [r1, #0]
 80038e8:	4770      	bx	lr
 80038ea:	4610      	mov	r0, r2
 80038ec:	e7e9      	b.n	80038c2 <__lo0bits+0x2a>
 80038ee:	2000      	movs	r0, #0
 80038f0:	4770      	bx	lr
 80038f2:	2020      	movs	r0, #32
 80038f4:	4770      	bx	lr

080038f6 <__i2b>:
 80038f6:	b510      	push	{r4, lr}
 80038f8:	460c      	mov	r4, r1
 80038fa:	2101      	movs	r1, #1
 80038fc:	f7ff ff27 	bl	800374e <_Balloc>
 8003900:	2201      	movs	r2, #1
 8003902:	6144      	str	r4, [r0, #20]
 8003904:	6102      	str	r2, [r0, #16]
 8003906:	bd10      	pop	{r4, pc}

08003908 <__multiply>:
 8003908:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800390c:	4614      	mov	r4, r2
 800390e:	690a      	ldr	r2, [r1, #16]
 8003910:	6923      	ldr	r3, [r4, #16]
 8003912:	4689      	mov	r9, r1
 8003914:	429a      	cmp	r2, r3
 8003916:	bfbe      	ittt	lt
 8003918:	460b      	movlt	r3, r1
 800391a:	46a1      	movlt	r9, r4
 800391c:	461c      	movlt	r4, r3
 800391e:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8003922:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8003926:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800392a:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800392e:	eb07 060a 	add.w	r6, r7, sl
 8003932:	429e      	cmp	r6, r3
 8003934:	bfc8      	it	gt
 8003936:	3101      	addgt	r1, #1
 8003938:	f7ff ff09 	bl	800374e <_Balloc>
 800393c:	f100 0514 	add.w	r5, r0, #20
 8003940:	462b      	mov	r3, r5
 8003942:	2200      	movs	r2, #0
 8003944:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8003948:	4543      	cmp	r3, r8
 800394a:	d316      	bcc.n	800397a <__multiply+0x72>
 800394c:	f104 0214 	add.w	r2, r4, #20
 8003950:	f109 0114 	add.w	r1, r9, #20
 8003954:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8003958:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800395c:	9301      	str	r3, [sp, #4]
 800395e:	9c01      	ldr	r4, [sp, #4]
 8003960:	4613      	mov	r3, r2
 8003962:	4294      	cmp	r4, r2
 8003964:	d80c      	bhi.n	8003980 <__multiply+0x78>
 8003966:	2e00      	cmp	r6, #0
 8003968:	dd03      	ble.n	8003972 <__multiply+0x6a>
 800396a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800396e:	2b00      	cmp	r3, #0
 8003970:	d054      	beq.n	8003a1c <__multiply+0x114>
 8003972:	6106      	str	r6, [r0, #16]
 8003974:	b003      	add	sp, #12
 8003976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800397a:	f843 2b04 	str.w	r2, [r3], #4
 800397e:	e7e3      	b.n	8003948 <__multiply+0x40>
 8003980:	f8b3 a000 	ldrh.w	sl, [r3]
 8003984:	3204      	adds	r2, #4
 8003986:	f1ba 0f00 	cmp.w	sl, #0
 800398a:	d020      	beq.n	80039ce <__multiply+0xc6>
 800398c:	46ae      	mov	lr, r5
 800398e:	4689      	mov	r9, r1
 8003990:	f04f 0c00 	mov.w	ip, #0
 8003994:	f859 4b04 	ldr.w	r4, [r9], #4
 8003998:	f8be b000 	ldrh.w	fp, [lr]
 800399c:	b2a3      	uxth	r3, r4
 800399e:	fb0a b303 	mla	r3, sl, r3, fp
 80039a2:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 80039a6:	f8de 4000 	ldr.w	r4, [lr]
 80039aa:	4463      	add	r3, ip
 80039ac:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80039b0:	fb0a c40b 	mla	r4, sl, fp, ip
 80039b4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80039be:	454f      	cmp	r7, r9
 80039c0:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80039c4:	f84e 3b04 	str.w	r3, [lr], #4
 80039c8:	d8e4      	bhi.n	8003994 <__multiply+0x8c>
 80039ca:	f8ce c000 	str.w	ip, [lr]
 80039ce:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 80039d2:	f1b9 0f00 	cmp.w	r9, #0
 80039d6:	d01f      	beq.n	8003a18 <__multiply+0x110>
 80039d8:	46ae      	mov	lr, r5
 80039da:	468c      	mov	ip, r1
 80039dc:	f04f 0a00 	mov.w	sl, #0
 80039e0:	682b      	ldr	r3, [r5, #0]
 80039e2:	f8bc 4000 	ldrh.w	r4, [ip]
 80039e6:	f8be b002 	ldrh.w	fp, [lr, #2]
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	fb09 b404 	mla	r4, r9, r4, fp
 80039f0:	44a2      	add	sl, r4
 80039f2:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 80039f6:	f84e 3b04 	str.w	r3, [lr], #4
 80039fa:	f85c 3b04 	ldr.w	r3, [ip], #4
 80039fe:	f8be 4000 	ldrh.w	r4, [lr]
 8003a02:	0c1b      	lsrs	r3, r3, #16
 8003a04:	fb09 4303 	mla	r3, r9, r3, r4
 8003a08:	4567      	cmp	r7, ip
 8003a0a:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8003a0e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003a12:	d8e6      	bhi.n	80039e2 <__multiply+0xda>
 8003a14:	f8ce 3000 	str.w	r3, [lr]
 8003a18:	3504      	adds	r5, #4
 8003a1a:	e7a0      	b.n	800395e <__multiply+0x56>
 8003a1c:	3e01      	subs	r6, #1
 8003a1e:	e7a2      	b.n	8003966 <__multiply+0x5e>

08003a20 <__pow5mult>:
 8003a20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a24:	4615      	mov	r5, r2
 8003a26:	f012 0203 	ands.w	r2, r2, #3
 8003a2a:	4606      	mov	r6, r0
 8003a2c:	460f      	mov	r7, r1
 8003a2e:	d007      	beq.n	8003a40 <__pow5mult+0x20>
 8003a30:	4c21      	ldr	r4, [pc, #132]	; (8003ab8 <__pow5mult+0x98>)
 8003a32:	3a01      	subs	r2, #1
 8003a34:	2300      	movs	r3, #0
 8003a36:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8003a3a:	f7ff fed3 	bl	80037e4 <__multadd>
 8003a3e:	4607      	mov	r7, r0
 8003a40:	10ad      	asrs	r5, r5, #2
 8003a42:	d035      	beq.n	8003ab0 <__pow5mult+0x90>
 8003a44:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8003a46:	b93c      	cbnz	r4, 8003a58 <__pow5mult+0x38>
 8003a48:	2010      	movs	r0, #16
 8003a4a:	f7ff fe5f 	bl	800370c <malloc>
 8003a4e:	6270      	str	r0, [r6, #36]	; 0x24
 8003a50:	6044      	str	r4, [r0, #4]
 8003a52:	6084      	str	r4, [r0, #8]
 8003a54:	6004      	str	r4, [r0, #0]
 8003a56:	60c4      	str	r4, [r0, #12]
 8003a58:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8003a5c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003a60:	b94c      	cbnz	r4, 8003a76 <__pow5mult+0x56>
 8003a62:	f240 2171 	movw	r1, #625	; 0x271
 8003a66:	4630      	mov	r0, r6
 8003a68:	f7ff ff45 	bl	80038f6 <__i2b>
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	4604      	mov	r4, r0
 8003a70:	f8c8 0008 	str.w	r0, [r8, #8]
 8003a74:	6003      	str	r3, [r0, #0]
 8003a76:	f04f 0800 	mov.w	r8, #0
 8003a7a:	07eb      	lsls	r3, r5, #31
 8003a7c:	d50a      	bpl.n	8003a94 <__pow5mult+0x74>
 8003a7e:	4639      	mov	r1, r7
 8003a80:	4622      	mov	r2, r4
 8003a82:	4630      	mov	r0, r6
 8003a84:	f7ff ff40 	bl	8003908 <__multiply>
 8003a88:	4681      	mov	r9, r0
 8003a8a:	4639      	mov	r1, r7
 8003a8c:	4630      	mov	r0, r6
 8003a8e:	f7ff fe92 	bl	80037b6 <_Bfree>
 8003a92:	464f      	mov	r7, r9
 8003a94:	106d      	asrs	r5, r5, #1
 8003a96:	d00b      	beq.n	8003ab0 <__pow5mult+0x90>
 8003a98:	6820      	ldr	r0, [r4, #0]
 8003a9a:	b938      	cbnz	r0, 8003aac <__pow5mult+0x8c>
 8003a9c:	4622      	mov	r2, r4
 8003a9e:	4621      	mov	r1, r4
 8003aa0:	4630      	mov	r0, r6
 8003aa2:	f7ff ff31 	bl	8003908 <__multiply>
 8003aa6:	6020      	str	r0, [r4, #0]
 8003aa8:	f8c0 8000 	str.w	r8, [r0]
 8003aac:	4604      	mov	r4, r0
 8003aae:	e7e4      	b.n	8003a7a <__pow5mult+0x5a>
 8003ab0:	4638      	mov	r0, r7
 8003ab2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ab6:	bf00      	nop
 8003ab8:	08004380 	.word	0x08004380

08003abc <__lshift>:
 8003abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ac0:	460c      	mov	r4, r1
 8003ac2:	4607      	mov	r7, r0
 8003ac4:	4616      	mov	r6, r2
 8003ac6:	6923      	ldr	r3, [r4, #16]
 8003ac8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8003acc:	eb0a 0903 	add.w	r9, sl, r3
 8003ad0:	6849      	ldr	r1, [r1, #4]
 8003ad2:	68a3      	ldr	r3, [r4, #8]
 8003ad4:	f109 0501 	add.w	r5, r9, #1
 8003ad8:	42ab      	cmp	r3, r5
 8003ada:	db31      	blt.n	8003b40 <__lshift+0x84>
 8003adc:	4638      	mov	r0, r7
 8003ade:	f7ff fe36 	bl	800374e <_Balloc>
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	4680      	mov	r8, r0
 8003ae6:	4611      	mov	r1, r2
 8003ae8:	f100 0314 	add.w	r3, r0, #20
 8003aec:	4552      	cmp	r2, sl
 8003aee:	db2a      	blt.n	8003b46 <__lshift+0x8a>
 8003af0:	6920      	ldr	r0, [r4, #16]
 8003af2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003af6:	f104 0114 	add.w	r1, r4, #20
 8003afa:	f016 021f 	ands.w	r2, r6, #31
 8003afe:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8003b02:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8003b06:	d022      	beq.n	8003b4e <__lshift+0x92>
 8003b08:	2000      	movs	r0, #0
 8003b0a:	f1c2 0c20 	rsb	ip, r2, #32
 8003b0e:	680e      	ldr	r6, [r1, #0]
 8003b10:	4096      	lsls	r6, r2
 8003b12:	4330      	orrs	r0, r6
 8003b14:	f843 0b04 	str.w	r0, [r3], #4
 8003b18:	f851 0b04 	ldr.w	r0, [r1], #4
 8003b1c:	458e      	cmp	lr, r1
 8003b1e:	fa20 f00c 	lsr.w	r0, r0, ip
 8003b22:	d8f4      	bhi.n	8003b0e <__lshift+0x52>
 8003b24:	6018      	str	r0, [r3, #0]
 8003b26:	b108      	cbz	r0, 8003b2c <__lshift+0x70>
 8003b28:	f109 0502 	add.w	r5, r9, #2
 8003b2c:	3d01      	subs	r5, #1
 8003b2e:	4638      	mov	r0, r7
 8003b30:	f8c8 5010 	str.w	r5, [r8, #16]
 8003b34:	4621      	mov	r1, r4
 8003b36:	f7ff fe3e 	bl	80037b6 <_Bfree>
 8003b3a:	4640      	mov	r0, r8
 8003b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b40:	3101      	adds	r1, #1
 8003b42:	005b      	lsls	r3, r3, #1
 8003b44:	e7c8      	b.n	8003ad8 <__lshift+0x1c>
 8003b46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003b4a:	3201      	adds	r2, #1
 8003b4c:	e7ce      	b.n	8003aec <__lshift+0x30>
 8003b4e:	3b04      	subs	r3, #4
 8003b50:	f851 2b04 	ldr.w	r2, [r1], #4
 8003b54:	458e      	cmp	lr, r1
 8003b56:	f843 2f04 	str.w	r2, [r3, #4]!
 8003b5a:	d8f9      	bhi.n	8003b50 <__lshift+0x94>
 8003b5c:	e7e6      	b.n	8003b2c <__lshift+0x70>

08003b5e <__mcmp>:
 8003b5e:	6903      	ldr	r3, [r0, #16]
 8003b60:	690a      	ldr	r2, [r1, #16]
 8003b62:	b530      	push	{r4, r5, lr}
 8003b64:	1a9b      	subs	r3, r3, r2
 8003b66:	d10c      	bne.n	8003b82 <__mcmp+0x24>
 8003b68:	0092      	lsls	r2, r2, #2
 8003b6a:	3014      	adds	r0, #20
 8003b6c:	3114      	adds	r1, #20
 8003b6e:	1884      	adds	r4, r0, r2
 8003b70:	4411      	add	r1, r2
 8003b72:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8003b76:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8003b7a:	4295      	cmp	r5, r2
 8003b7c:	d003      	beq.n	8003b86 <__mcmp+0x28>
 8003b7e:	d305      	bcc.n	8003b8c <__mcmp+0x2e>
 8003b80:	2301      	movs	r3, #1
 8003b82:	4618      	mov	r0, r3
 8003b84:	bd30      	pop	{r4, r5, pc}
 8003b86:	42a0      	cmp	r0, r4
 8003b88:	d3f3      	bcc.n	8003b72 <__mcmp+0x14>
 8003b8a:	e7fa      	b.n	8003b82 <__mcmp+0x24>
 8003b8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b90:	e7f7      	b.n	8003b82 <__mcmp+0x24>

08003b92 <__mdiff>:
 8003b92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b96:	460d      	mov	r5, r1
 8003b98:	4607      	mov	r7, r0
 8003b9a:	4611      	mov	r1, r2
 8003b9c:	4628      	mov	r0, r5
 8003b9e:	4614      	mov	r4, r2
 8003ba0:	f7ff ffdd 	bl	8003b5e <__mcmp>
 8003ba4:	1e06      	subs	r6, r0, #0
 8003ba6:	d108      	bne.n	8003bba <__mdiff+0x28>
 8003ba8:	4631      	mov	r1, r6
 8003baa:	4638      	mov	r0, r7
 8003bac:	f7ff fdcf 	bl	800374e <_Balloc>
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	6146      	str	r6, [r0, #20]
 8003bb4:	6103      	str	r3, [r0, #16]
 8003bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bba:	bfa4      	itt	ge
 8003bbc:	4623      	movge	r3, r4
 8003bbe:	462c      	movge	r4, r5
 8003bc0:	4638      	mov	r0, r7
 8003bc2:	6861      	ldr	r1, [r4, #4]
 8003bc4:	bfa6      	itte	ge
 8003bc6:	461d      	movge	r5, r3
 8003bc8:	2600      	movge	r6, #0
 8003bca:	2601      	movlt	r6, #1
 8003bcc:	f7ff fdbf 	bl	800374e <_Balloc>
 8003bd0:	f04f 0c00 	mov.w	ip, #0
 8003bd4:	60c6      	str	r6, [r0, #12]
 8003bd6:	692b      	ldr	r3, [r5, #16]
 8003bd8:	6926      	ldr	r6, [r4, #16]
 8003bda:	f104 0214 	add.w	r2, r4, #20
 8003bde:	f105 0914 	add.w	r9, r5, #20
 8003be2:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8003be6:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8003bea:	f100 0114 	add.w	r1, r0, #20
 8003bee:	f852 ab04 	ldr.w	sl, [r2], #4
 8003bf2:	f859 5b04 	ldr.w	r5, [r9], #4
 8003bf6:	fa1f f38a 	uxth.w	r3, sl
 8003bfa:	4463      	add	r3, ip
 8003bfc:	b2ac      	uxth	r4, r5
 8003bfe:	1b1b      	subs	r3, r3, r4
 8003c00:	0c2c      	lsrs	r4, r5, #16
 8003c02:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8003c06:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8003c10:	45c8      	cmp	r8, r9
 8003c12:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8003c16:	4696      	mov	lr, r2
 8003c18:	f841 4b04 	str.w	r4, [r1], #4
 8003c1c:	d8e7      	bhi.n	8003bee <__mdiff+0x5c>
 8003c1e:	45be      	cmp	lr, r7
 8003c20:	d305      	bcc.n	8003c2e <__mdiff+0x9c>
 8003c22:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8003c26:	b18b      	cbz	r3, 8003c4c <__mdiff+0xba>
 8003c28:	6106      	str	r6, [r0, #16]
 8003c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c2e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8003c32:	b2a2      	uxth	r2, r4
 8003c34:	4462      	add	r2, ip
 8003c36:	1413      	asrs	r3, r2, #16
 8003c38:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8003c3c:	b292      	uxth	r2, r2
 8003c3e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8003c42:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8003c46:	f841 2b04 	str.w	r2, [r1], #4
 8003c4a:	e7e8      	b.n	8003c1e <__mdiff+0x8c>
 8003c4c:	3e01      	subs	r6, #1
 8003c4e:	e7e8      	b.n	8003c22 <__mdiff+0x90>

08003c50 <__d2b>:
 8003c50:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003c54:	461c      	mov	r4, r3
 8003c56:	2101      	movs	r1, #1
 8003c58:	4690      	mov	r8, r2
 8003c5a:	9e08      	ldr	r6, [sp, #32]
 8003c5c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8003c5e:	f7ff fd76 	bl	800374e <_Balloc>
 8003c62:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8003c66:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8003c6a:	4607      	mov	r7, r0
 8003c6c:	bb34      	cbnz	r4, 8003cbc <__d2b+0x6c>
 8003c6e:	9201      	str	r2, [sp, #4]
 8003c70:	f1b8 0f00 	cmp.w	r8, #0
 8003c74:	d027      	beq.n	8003cc6 <__d2b+0x76>
 8003c76:	a802      	add	r0, sp, #8
 8003c78:	f840 8d08 	str.w	r8, [r0, #-8]!
 8003c7c:	f7ff fe0c 	bl	8003898 <__lo0bits>
 8003c80:	9900      	ldr	r1, [sp, #0]
 8003c82:	b1f0      	cbz	r0, 8003cc2 <__d2b+0x72>
 8003c84:	9a01      	ldr	r2, [sp, #4]
 8003c86:	f1c0 0320 	rsb	r3, r0, #32
 8003c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8e:	430b      	orrs	r3, r1
 8003c90:	40c2      	lsrs	r2, r0
 8003c92:	617b      	str	r3, [r7, #20]
 8003c94:	9201      	str	r2, [sp, #4]
 8003c96:	9b01      	ldr	r3, [sp, #4]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	bf14      	ite	ne
 8003c9c:	2102      	movne	r1, #2
 8003c9e:	2101      	moveq	r1, #1
 8003ca0:	61bb      	str	r3, [r7, #24]
 8003ca2:	6139      	str	r1, [r7, #16]
 8003ca4:	b1c4      	cbz	r4, 8003cd8 <__d2b+0x88>
 8003ca6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8003caa:	4404      	add	r4, r0
 8003cac:	6034      	str	r4, [r6, #0]
 8003cae:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8003cb2:	6028      	str	r0, [r5, #0]
 8003cb4:	4638      	mov	r0, r7
 8003cb6:	b002      	add	sp, #8
 8003cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003cbc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003cc0:	e7d5      	b.n	8003c6e <__d2b+0x1e>
 8003cc2:	6179      	str	r1, [r7, #20]
 8003cc4:	e7e7      	b.n	8003c96 <__d2b+0x46>
 8003cc6:	a801      	add	r0, sp, #4
 8003cc8:	f7ff fde6 	bl	8003898 <__lo0bits>
 8003ccc:	2101      	movs	r1, #1
 8003cce:	9b01      	ldr	r3, [sp, #4]
 8003cd0:	6139      	str	r1, [r7, #16]
 8003cd2:	617b      	str	r3, [r7, #20]
 8003cd4:	3020      	adds	r0, #32
 8003cd6:	e7e5      	b.n	8003ca4 <__d2b+0x54>
 8003cd8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8003cdc:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8003ce0:	6030      	str	r0, [r6, #0]
 8003ce2:	6918      	ldr	r0, [r3, #16]
 8003ce4:	f7ff fdb9 	bl	800385a <__hi0bits>
 8003ce8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8003cec:	e7e1      	b.n	8003cb2 <__d2b+0x62>

08003cee <_calloc_r>:
 8003cee:	b538      	push	{r3, r4, r5, lr}
 8003cf0:	fb02 f401 	mul.w	r4, r2, r1
 8003cf4:	4621      	mov	r1, r4
 8003cf6:	f000 f855 	bl	8003da4 <_malloc_r>
 8003cfa:	4605      	mov	r5, r0
 8003cfc:	b118      	cbz	r0, 8003d06 <_calloc_r+0x18>
 8003cfe:	4622      	mov	r2, r4
 8003d00:	2100      	movs	r1, #0
 8003d02:	f7fe f9f5 	bl	80020f0 <memset>
 8003d06:	4628      	mov	r0, r5
 8003d08:	bd38      	pop	{r3, r4, r5, pc}
	...

08003d0c <_free_r>:
 8003d0c:	b538      	push	{r3, r4, r5, lr}
 8003d0e:	4605      	mov	r5, r0
 8003d10:	2900      	cmp	r1, #0
 8003d12:	d043      	beq.n	8003d9c <_free_r+0x90>
 8003d14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d18:	1f0c      	subs	r4, r1, #4
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	bfb8      	it	lt
 8003d1e:	18e4      	addlt	r4, r4, r3
 8003d20:	f000 fa2a 	bl	8004178 <__malloc_lock>
 8003d24:	4a1e      	ldr	r2, [pc, #120]	; (8003da0 <_free_r+0x94>)
 8003d26:	6813      	ldr	r3, [r2, #0]
 8003d28:	4610      	mov	r0, r2
 8003d2a:	b933      	cbnz	r3, 8003d3a <_free_r+0x2e>
 8003d2c:	6063      	str	r3, [r4, #4]
 8003d2e:	6014      	str	r4, [r2, #0]
 8003d30:	4628      	mov	r0, r5
 8003d32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d36:	f000 ba20 	b.w	800417a <__malloc_unlock>
 8003d3a:	42a3      	cmp	r3, r4
 8003d3c:	d90b      	bls.n	8003d56 <_free_r+0x4a>
 8003d3e:	6821      	ldr	r1, [r4, #0]
 8003d40:	1862      	adds	r2, r4, r1
 8003d42:	4293      	cmp	r3, r2
 8003d44:	bf01      	itttt	eq
 8003d46:	681a      	ldreq	r2, [r3, #0]
 8003d48:	685b      	ldreq	r3, [r3, #4]
 8003d4a:	1852      	addeq	r2, r2, r1
 8003d4c:	6022      	streq	r2, [r4, #0]
 8003d4e:	6063      	str	r3, [r4, #4]
 8003d50:	6004      	str	r4, [r0, #0]
 8003d52:	e7ed      	b.n	8003d30 <_free_r+0x24>
 8003d54:	4613      	mov	r3, r2
 8003d56:	685a      	ldr	r2, [r3, #4]
 8003d58:	b10a      	cbz	r2, 8003d5e <_free_r+0x52>
 8003d5a:	42a2      	cmp	r2, r4
 8003d5c:	d9fa      	bls.n	8003d54 <_free_r+0x48>
 8003d5e:	6819      	ldr	r1, [r3, #0]
 8003d60:	1858      	adds	r0, r3, r1
 8003d62:	42a0      	cmp	r0, r4
 8003d64:	d10b      	bne.n	8003d7e <_free_r+0x72>
 8003d66:	6820      	ldr	r0, [r4, #0]
 8003d68:	4401      	add	r1, r0
 8003d6a:	1858      	adds	r0, r3, r1
 8003d6c:	4282      	cmp	r2, r0
 8003d6e:	6019      	str	r1, [r3, #0]
 8003d70:	d1de      	bne.n	8003d30 <_free_r+0x24>
 8003d72:	6810      	ldr	r0, [r2, #0]
 8003d74:	6852      	ldr	r2, [r2, #4]
 8003d76:	4401      	add	r1, r0
 8003d78:	6019      	str	r1, [r3, #0]
 8003d7a:	605a      	str	r2, [r3, #4]
 8003d7c:	e7d8      	b.n	8003d30 <_free_r+0x24>
 8003d7e:	d902      	bls.n	8003d86 <_free_r+0x7a>
 8003d80:	230c      	movs	r3, #12
 8003d82:	602b      	str	r3, [r5, #0]
 8003d84:	e7d4      	b.n	8003d30 <_free_r+0x24>
 8003d86:	6820      	ldr	r0, [r4, #0]
 8003d88:	1821      	adds	r1, r4, r0
 8003d8a:	428a      	cmp	r2, r1
 8003d8c:	bf01      	itttt	eq
 8003d8e:	6811      	ldreq	r1, [r2, #0]
 8003d90:	6852      	ldreq	r2, [r2, #4]
 8003d92:	1809      	addeq	r1, r1, r0
 8003d94:	6021      	streq	r1, [r4, #0]
 8003d96:	6062      	str	r2, [r4, #4]
 8003d98:	605c      	str	r4, [r3, #4]
 8003d9a:	e7c9      	b.n	8003d30 <_free_r+0x24>
 8003d9c:	bd38      	pop	{r3, r4, r5, pc}
 8003d9e:	bf00      	nop
 8003da0:	20000200 	.word	0x20000200

08003da4 <_malloc_r>:
 8003da4:	b570      	push	{r4, r5, r6, lr}
 8003da6:	1ccd      	adds	r5, r1, #3
 8003da8:	f025 0503 	bic.w	r5, r5, #3
 8003dac:	3508      	adds	r5, #8
 8003dae:	2d0c      	cmp	r5, #12
 8003db0:	bf38      	it	cc
 8003db2:	250c      	movcc	r5, #12
 8003db4:	2d00      	cmp	r5, #0
 8003db6:	4606      	mov	r6, r0
 8003db8:	db01      	blt.n	8003dbe <_malloc_r+0x1a>
 8003dba:	42a9      	cmp	r1, r5
 8003dbc:	d903      	bls.n	8003dc6 <_malloc_r+0x22>
 8003dbe:	230c      	movs	r3, #12
 8003dc0:	6033      	str	r3, [r6, #0]
 8003dc2:	2000      	movs	r0, #0
 8003dc4:	bd70      	pop	{r4, r5, r6, pc}
 8003dc6:	f000 f9d7 	bl	8004178 <__malloc_lock>
 8003dca:	4a23      	ldr	r2, [pc, #140]	; (8003e58 <_malloc_r+0xb4>)
 8003dcc:	6814      	ldr	r4, [r2, #0]
 8003dce:	4621      	mov	r1, r4
 8003dd0:	b991      	cbnz	r1, 8003df8 <_malloc_r+0x54>
 8003dd2:	4c22      	ldr	r4, [pc, #136]	; (8003e5c <_malloc_r+0xb8>)
 8003dd4:	6823      	ldr	r3, [r4, #0]
 8003dd6:	b91b      	cbnz	r3, 8003de0 <_malloc_r+0x3c>
 8003dd8:	4630      	mov	r0, r6
 8003dda:	f000 f991 	bl	8004100 <_sbrk_r>
 8003dde:	6020      	str	r0, [r4, #0]
 8003de0:	4629      	mov	r1, r5
 8003de2:	4630      	mov	r0, r6
 8003de4:	f000 f98c 	bl	8004100 <_sbrk_r>
 8003de8:	1c43      	adds	r3, r0, #1
 8003dea:	d126      	bne.n	8003e3a <_malloc_r+0x96>
 8003dec:	230c      	movs	r3, #12
 8003dee:	4630      	mov	r0, r6
 8003df0:	6033      	str	r3, [r6, #0]
 8003df2:	f000 f9c2 	bl	800417a <__malloc_unlock>
 8003df6:	e7e4      	b.n	8003dc2 <_malloc_r+0x1e>
 8003df8:	680b      	ldr	r3, [r1, #0]
 8003dfa:	1b5b      	subs	r3, r3, r5
 8003dfc:	d41a      	bmi.n	8003e34 <_malloc_r+0x90>
 8003dfe:	2b0b      	cmp	r3, #11
 8003e00:	d90f      	bls.n	8003e22 <_malloc_r+0x7e>
 8003e02:	600b      	str	r3, [r1, #0]
 8003e04:	18cc      	adds	r4, r1, r3
 8003e06:	50cd      	str	r5, [r1, r3]
 8003e08:	4630      	mov	r0, r6
 8003e0a:	f000 f9b6 	bl	800417a <__malloc_unlock>
 8003e0e:	f104 000b 	add.w	r0, r4, #11
 8003e12:	1d23      	adds	r3, r4, #4
 8003e14:	f020 0007 	bic.w	r0, r0, #7
 8003e18:	1ac3      	subs	r3, r0, r3
 8003e1a:	d01b      	beq.n	8003e54 <_malloc_r+0xb0>
 8003e1c:	425a      	negs	r2, r3
 8003e1e:	50e2      	str	r2, [r4, r3]
 8003e20:	bd70      	pop	{r4, r5, r6, pc}
 8003e22:	428c      	cmp	r4, r1
 8003e24:	bf0b      	itete	eq
 8003e26:	6863      	ldreq	r3, [r4, #4]
 8003e28:	684b      	ldrne	r3, [r1, #4]
 8003e2a:	6013      	streq	r3, [r2, #0]
 8003e2c:	6063      	strne	r3, [r4, #4]
 8003e2e:	bf18      	it	ne
 8003e30:	460c      	movne	r4, r1
 8003e32:	e7e9      	b.n	8003e08 <_malloc_r+0x64>
 8003e34:	460c      	mov	r4, r1
 8003e36:	6849      	ldr	r1, [r1, #4]
 8003e38:	e7ca      	b.n	8003dd0 <_malloc_r+0x2c>
 8003e3a:	1cc4      	adds	r4, r0, #3
 8003e3c:	f024 0403 	bic.w	r4, r4, #3
 8003e40:	42a0      	cmp	r0, r4
 8003e42:	d005      	beq.n	8003e50 <_malloc_r+0xac>
 8003e44:	1a21      	subs	r1, r4, r0
 8003e46:	4630      	mov	r0, r6
 8003e48:	f000 f95a 	bl	8004100 <_sbrk_r>
 8003e4c:	3001      	adds	r0, #1
 8003e4e:	d0cd      	beq.n	8003dec <_malloc_r+0x48>
 8003e50:	6025      	str	r5, [r4, #0]
 8003e52:	e7d9      	b.n	8003e08 <_malloc_r+0x64>
 8003e54:	bd70      	pop	{r4, r5, r6, pc}
 8003e56:	bf00      	nop
 8003e58:	20000200 	.word	0x20000200
 8003e5c:	20000204 	.word	0x20000204

08003e60 <__ssputs_r>:
 8003e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e64:	688e      	ldr	r6, [r1, #8]
 8003e66:	4682      	mov	sl, r0
 8003e68:	429e      	cmp	r6, r3
 8003e6a:	460c      	mov	r4, r1
 8003e6c:	4691      	mov	r9, r2
 8003e6e:	4698      	mov	r8, r3
 8003e70:	d835      	bhi.n	8003ede <__ssputs_r+0x7e>
 8003e72:	898a      	ldrh	r2, [r1, #12]
 8003e74:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003e78:	d031      	beq.n	8003ede <__ssputs_r+0x7e>
 8003e7a:	2302      	movs	r3, #2
 8003e7c:	6825      	ldr	r5, [r4, #0]
 8003e7e:	6909      	ldr	r1, [r1, #16]
 8003e80:	1a6f      	subs	r7, r5, r1
 8003e82:	6965      	ldr	r5, [r4, #20]
 8003e84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003e88:	fb95 f5f3 	sdiv	r5, r5, r3
 8003e8c:	f108 0301 	add.w	r3, r8, #1
 8003e90:	443b      	add	r3, r7
 8003e92:	429d      	cmp	r5, r3
 8003e94:	bf38      	it	cc
 8003e96:	461d      	movcc	r5, r3
 8003e98:	0553      	lsls	r3, r2, #21
 8003e9a:	d531      	bpl.n	8003f00 <__ssputs_r+0xa0>
 8003e9c:	4629      	mov	r1, r5
 8003e9e:	f7ff ff81 	bl	8003da4 <_malloc_r>
 8003ea2:	4606      	mov	r6, r0
 8003ea4:	b950      	cbnz	r0, 8003ebc <__ssputs_r+0x5c>
 8003ea6:	230c      	movs	r3, #12
 8003ea8:	f8ca 3000 	str.w	r3, [sl]
 8003eac:	89a3      	ldrh	r3, [r4, #12]
 8003eae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003eb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003eb6:	81a3      	strh	r3, [r4, #12]
 8003eb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ebc:	463a      	mov	r2, r7
 8003ebe:	6921      	ldr	r1, [r4, #16]
 8003ec0:	f7ff fc3a 	bl	8003738 <memcpy>
 8003ec4:	89a3      	ldrh	r3, [r4, #12]
 8003ec6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003eca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ece:	81a3      	strh	r3, [r4, #12]
 8003ed0:	6126      	str	r6, [r4, #16]
 8003ed2:	443e      	add	r6, r7
 8003ed4:	6026      	str	r6, [r4, #0]
 8003ed6:	4646      	mov	r6, r8
 8003ed8:	6165      	str	r5, [r4, #20]
 8003eda:	1bed      	subs	r5, r5, r7
 8003edc:	60a5      	str	r5, [r4, #8]
 8003ede:	4546      	cmp	r6, r8
 8003ee0:	bf28      	it	cs
 8003ee2:	4646      	movcs	r6, r8
 8003ee4:	4649      	mov	r1, r9
 8003ee6:	4632      	mov	r2, r6
 8003ee8:	6820      	ldr	r0, [r4, #0]
 8003eea:	f000 f92b 	bl	8004144 <memmove>
 8003eee:	68a3      	ldr	r3, [r4, #8]
 8003ef0:	2000      	movs	r0, #0
 8003ef2:	1b9b      	subs	r3, r3, r6
 8003ef4:	60a3      	str	r3, [r4, #8]
 8003ef6:	6823      	ldr	r3, [r4, #0]
 8003ef8:	441e      	add	r6, r3
 8003efa:	6026      	str	r6, [r4, #0]
 8003efc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f00:	462a      	mov	r2, r5
 8003f02:	f000 f93b 	bl	800417c <_realloc_r>
 8003f06:	4606      	mov	r6, r0
 8003f08:	2800      	cmp	r0, #0
 8003f0a:	d1e1      	bne.n	8003ed0 <__ssputs_r+0x70>
 8003f0c:	6921      	ldr	r1, [r4, #16]
 8003f0e:	4650      	mov	r0, sl
 8003f10:	f7ff fefc 	bl	8003d0c <_free_r>
 8003f14:	e7c7      	b.n	8003ea6 <__ssputs_r+0x46>
	...

08003f18 <_svfiprintf_r>:
 8003f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f1c:	b09d      	sub	sp, #116	; 0x74
 8003f1e:	9303      	str	r3, [sp, #12]
 8003f20:	898b      	ldrh	r3, [r1, #12]
 8003f22:	4680      	mov	r8, r0
 8003f24:	061c      	lsls	r4, r3, #24
 8003f26:	460d      	mov	r5, r1
 8003f28:	4616      	mov	r6, r2
 8003f2a:	d50f      	bpl.n	8003f4c <_svfiprintf_r+0x34>
 8003f2c:	690b      	ldr	r3, [r1, #16]
 8003f2e:	b96b      	cbnz	r3, 8003f4c <_svfiprintf_r+0x34>
 8003f30:	2140      	movs	r1, #64	; 0x40
 8003f32:	f7ff ff37 	bl	8003da4 <_malloc_r>
 8003f36:	6028      	str	r0, [r5, #0]
 8003f38:	6128      	str	r0, [r5, #16]
 8003f3a:	b928      	cbnz	r0, 8003f48 <_svfiprintf_r+0x30>
 8003f3c:	230c      	movs	r3, #12
 8003f3e:	f8c8 3000 	str.w	r3, [r8]
 8003f42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f46:	e0c4      	b.n	80040d2 <_svfiprintf_r+0x1ba>
 8003f48:	2340      	movs	r3, #64	; 0x40
 8003f4a:	616b      	str	r3, [r5, #20]
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	9309      	str	r3, [sp, #36]	; 0x24
 8003f50:	2320      	movs	r3, #32
 8003f52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003f56:	2330      	movs	r3, #48	; 0x30
 8003f58:	f04f 0b01 	mov.w	fp, #1
 8003f5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003f60:	4637      	mov	r7, r6
 8003f62:	463c      	mov	r4, r7
 8003f64:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d13c      	bne.n	8003fe6 <_svfiprintf_r+0xce>
 8003f6c:	ebb7 0a06 	subs.w	sl, r7, r6
 8003f70:	d00b      	beq.n	8003f8a <_svfiprintf_r+0x72>
 8003f72:	4653      	mov	r3, sl
 8003f74:	4632      	mov	r2, r6
 8003f76:	4629      	mov	r1, r5
 8003f78:	4640      	mov	r0, r8
 8003f7a:	f7ff ff71 	bl	8003e60 <__ssputs_r>
 8003f7e:	3001      	adds	r0, #1
 8003f80:	f000 80a2 	beq.w	80040c8 <_svfiprintf_r+0x1b0>
 8003f84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f86:	4453      	add	r3, sl
 8003f88:	9309      	str	r3, [sp, #36]	; 0x24
 8003f8a:	783b      	ldrb	r3, [r7, #0]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	f000 809b 	beq.w	80040c8 <_svfiprintf_r+0x1b0>
 8003f92:	2300      	movs	r3, #0
 8003f94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003f98:	9304      	str	r3, [sp, #16]
 8003f9a:	9307      	str	r3, [sp, #28]
 8003f9c:	9205      	str	r2, [sp, #20]
 8003f9e:	9306      	str	r3, [sp, #24]
 8003fa0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003fa4:	931a      	str	r3, [sp, #104]	; 0x68
 8003fa6:	2205      	movs	r2, #5
 8003fa8:	7821      	ldrb	r1, [r4, #0]
 8003faa:	4850      	ldr	r0, [pc, #320]	; (80040ec <_svfiprintf_r+0x1d4>)
 8003fac:	f7ff fbb6 	bl	800371c <memchr>
 8003fb0:	1c67      	adds	r7, r4, #1
 8003fb2:	9b04      	ldr	r3, [sp, #16]
 8003fb4:	b9d8      	cbnz	r0, 8003fee <_svfiprintf_r+0xd6>
 8003fb6:	06d9      	lsls	r1, r3, #27
 8003fb8:	bf44      	itt	mi
 8003fba:	2220      	movmi	r2, #32
 8003fbc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003fc0:	071a      	lsls	r2, r3, #28
 8003fc2:	bf44      	itt	mi
 8003fc4:	222b      	movmi	r2, #43	; 0x2b
 8003fc6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003fca:	7822      	ldrb	r2, [r4, #0]
 8003fcc:	2a2a      	cmp	r2, #42	; 0x2a
 8003fce:	d016      	beq.n	8003ffe <_svfiprintf_r+0xe6>
 8003fd0:	2100      	movs	r1, #0
 8003fd2:	200a      	movs	r0, #10
 8003fd4:	9a07      	ldr	r2, [sp, #28]
 8003fd6:	4627      	mov	r7, r4
 8003fd8:	783b      	ldrb	r3, [r7, #0]
 8003fda:	3401      	adds	r4, #1
 8003fdc:	3b30      	subs	r3, #48	; 0x30
 8003fde:	2b09      	cmp	r3, #9
 8003fe0:	d950      	bls.n	8004084 <_svfiprintf_r+0x16c>
 8003fe2:	b1c9      	cbz	r1, 8004018 <_svfiprintf_r+0x100>
 8003fe4:	e011      	b.n	800400a <_svfiprintf_r+0xf2>
 8003fe6:	2b25      	cmp	r3, #37	; 0x25
 8003fe8:	d0c0      	beq.n	8003f6c <_svfiprintf_r+0x54>
 8003fea:	4627      	mov	r7, r4
 8003fec:	e7b9      	b.n	8003f62 <_svfiprintf_r+0x4a>
 8003fee:	4a3f      	ldr	r2, [pc, #252]	; (80040ec <_svfiprintf_r+0x1d4>)
 8003ff0:	463c      	mov	r4, r7
 8003ff2:	1a80      	subs	r0, r0, r2
 8003ff4:	fa0b f000 	lsl.w	r0, fp, r0
 8003ff8:	4318      	orrs	r0, r3
 8003ffa:	9004      	str	r0, [sp, #16]
 8003ffc:	e7d3      	b.n	8003fa6 <_svfiprintf_r+0x8e>
 8003ffe:	9a03      	ldr	r2, [sp, #12]
 8004000:	1d11      	adds	r1, r2, #4
 8004002:	6812      	ldr	r2, [r2, #0]
 8004004:	9103      	str	r1, [sp, #12]
 8004006:	2a00      	cmp	r2, #0
 8004008:	db01      	blt.n	800400e <_svfiprintf_r+0xf6>
 800400a:	9207      	str	r2, [sp, #28]
 800400c:	e004      	b.n	8004018 <_svfiprintf_r+0x100>
 800400e:	4252      	negs	r2, r2
 8004010:	f043 0302 	orr.w	r3, r3, #2
 8004014:	9207      	str	r2, [sp, #28]
 8004016:	9304      	str	r3, [sp, #16]
 8004018:	783b      	ldrb	r3, [r7, #0]
 800401a:	2b2e      	cmp	r3, #46	; 0x2e
 800401c:	d10d      	bne.n	800403a <_svfiprintf_r+0x122>
 800401e:	787b      	ldrb	r3, [r7, #1]
 8004020:	1c79      	adds	r1, r7, #1
 8004022:	2b2a      	cmp	r3, #42	; 0x2a
 8004024:	d132      	bne.n	800408c <_svfiprintf_r+0x174>
 8004026:	9b03      	ldr	r3, [sp, #12]
 8004028:	3702      	adds	r7, #2
 800402a:	1d1a      	adds	r2, r3, #4
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	9203      	str	r2, [sp, #12]
 8004030:	2b00      	cmp	r3, #0
 8004032:	bfb8      	it	lt
 8004034:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004038:	9305      	str	r3, [sp, #20]
 800403a:	4c2d      	ldr	r4, [pc, #180]	; (80040f0 <_svfiprintf_r+0x1d8>)
 800403c:	2203      	movs	r2, #3
 800403e:	7839      	ldrb	r1, [r7, #0]
 8004040:	4620      	mov	r0, r4
 8004042:	f7ff fb6b 	bl	800371c <memchr>
 8004046:	b138      	cbz	r0, 8004058 <_svfiprintf_r+0x140>
 8004048:	2340      	movs	r3, #64	; 0x40
 800404a:	1b00      	subs	r0, r0, r4
 800404c:	fa03 f000 	lsl.w	r0, r3, r0
 8004050:	9b04      	ldr	r3, [sp, #16]
 8004052:	3701      	adds	r7, #1
 8004054:	4303      	orrs	r3, r0
 8004056:	9304      	str	r3, [sp, #16]
 8004058:	7839      	ldrb	r1, [r7, #0]
 800405a:	2206      	movs	r2, #6
 800405c:	4825      	ldr	r0, [pc, #148]	; (80040f4 <_svfiprintf_r+0x1dc>)
 800405e:	1c7e      	adds	r6, r7, #1
 8004060:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004064:	f7ff fb5a 	bl	800371c <memchr>
 8004068:	2800      	cmp	r0, #0
 800406a:	d035      	beq.n	80040d8 <_svfiprintf_r+0x1c0>
 800406c:	4b22      	ldr	r3, [pc, #136]	; (80040f8 <_svfiprintf_r+0x1e0>)
 800406e:	b9fb      	cbnz	r3, 80040b0 <_svfiprintf_r+0x198>
 8004070:	9b03      	ldr	r3, [sp, #12]
 8004072:	3307      	adds	r3, #7
 8004074:	f023 0307 	bic.w	r3, r3, #7
 8004078:	3308      	adds	r3, #8
 800407a:	9303      	str	r3, [sp, #12]
 800407c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800407e:	444b      	add	r3, r9
 8004080:	9309      	str	r3, [sp, #36]	; 0x24
 8004082:	e76d      	b.n	8003f60 <_svfiprintf_r+0x48>
 8004084:	fb00 3202 	mla	r2, r0, r2, r3
 8004088:	2101      	movs	r1, #1
 800408a:	e7a4      	b.n	8003fd6 <_svfiprintf_r+0xbe>
 800408c:	2300      	movs	r3, #0
 800408e:	240a      	movs	r4, #10
 8004090:	4618      	mov	r0, r3
 8004092:	9305      	str	r3, [sp, #20]
 8004094:	460f      	mov	r7, r1
 8004096:	783a      	ldrb	r2, [r7, #0]
 8004098:	3101      	adds	r1, #1
 800409a:	3a30      	subs	r2, #48	; 0x30
 800409c:	2a09      	cmp	r2, #9
 800409e:	d903      	bls.n	80040a8 <_svfiprintf_r+0x190>
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d0ca      	beq.n	800403a <_svfiprintf_r+0x122>
 80040a4:	9005      	str	r0, [sp, #20]
 80040a6:	e7c8      	b.n	800403a <_svfiprintf_r+0x122>
 80040a8:	fb04 2000 	mla	r0, r4, r0, r2
 80040ac:	2301      	movs	r3, #1
 80040ae:	e7f1      	b.n	8004094 <_svfiprintf_r+0x17c>
 80040b0:	ab03      	add	r3, sp, #12
 80040b2:	9300      	str	r3, [sp, #0]
 80040b4:	462a      	mov	r2, r5
 80040b6:	4b11      	ldr	r3, [pc, #68]	; (80040fc <_svfiprintf_r+0x1e4>)
 80040b8:	a904      	add	r1, sp, #16
 80040ba:	4640      	mov	r0, r8
 80040bc:	f7fe f8b2 	bl	8002224 <_printf_float>
 80040c0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80040c4:	4681      	mov	r9, r0
 80040c6:	d1d9      	bne.n	800407c <_svfiprintf_r+0x164>
 80040c8:	89ab      	ldrh	r3, [r5, #12]
 80040ca:	065b      	lsls	r3, r3, #25
 80040cc:	f53f af39 	bmi.w	8003f42 <_svfiprintf_r+0x2a>
 80040d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80040d2:	b01d      	add	sp, #116	; 0x74
 80040d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040d8:	ab03      	add	r3, sp, #12
 80040da:	9300      	str	r3, [sp, #0]
 80040dc:	462a      	mov	r2, r5
 80040de:	4b07      	ldr	r3, [pc, #28]	; (80040fc <_svfiprintf_r+0x1e4>)
 80040e0:	a904      	add	r1, sp, #16
 80040e2:	4640      	mov	r0, r8
 80040e4:	f7fe fb4e 	bl	8002784 <_printf_i>
 80040e8:	e7ea      	b.n	80040c0 <_svfiprintf_r+0x1a8>
 80040ea:	bf00      	nop
 80040ec:	0800438c 	.word	0x0800438c
 80040f0:	08004392 	.word	0x08004392
 80040f4:	08004396 	.word	0x08004396
 80040f8:	08002225 	.word	0x08002225
 80040fc:	08003e61 	.word	0x08003e61

08004100 <_sbrk_r>:
 8004100:	b538      	push	{r3, r4, r5, lr}
 8004102:	2300      	movs	r3, #0
 8004104:	4c05      	ldr	r4, [pc, #20]	; (800411c <_sbrk_r+0x1c>)
 8004106:	4605      	mov	r5, r0
 8004108:	4608      	mov	r0, r1
 800410a:	6023      	str	r3, [r4, #0]
 800410c:	f7fd ff60 	bl	8001fd0 <_sbrk>
 8004110:	1c43      	adds	r3, r0, #1
 8004112:	d102      	bne.n	800411a <_sbrk_r+0x1a>
 8004114:	6823      	ldr	r3, [r4, #0]
 8004116:	b103      	cbz	r3, 800411a <_sbrk_r+0x1a>
 8004118:	602b      	str	r3, [r5, #0]
 800411a:	bd38      	pop	{r3, r4, r5, pc}
 800411c:	200002cc 	.word	0x200002cc

08004120 <__ascii_mbtowc>:
 8004120:	b082      	sub	sp, #8
 8004122:	b901      	cbnz	r1, 8004126 <__ascii_mbtowc+0x6>
 8004124:	a901      	add	r1, sp, #4
 8004126:	b142      	cbz	r2, 800413a <__ascii_mbtowc+0x1a>
 8004128:	b14b      	cbz	r3, 800413e <__ascii_mbtowc+0x1e>
 800412a:	7813      	ldrb	r3, [r2, #0]
 800412c:	600b      	str	r3, [r1, #0]
 800412e:	7812      	ldrb	r2, [r2, #0]
 8004130:	1c10      	adds	r0, r2, #0
 8004132:	bf18      	it	ne
 8004134:	2001      	movne	r0, #1
 8004136:	b002      	add	sp, #8
 8004138:	4770      	bx	lr
 800413a:	4610      	mov	r0, r2
 800413c:	e7fb      	b.n	8004136 <__ascii_mbtowc+0x16>
 800413e:	f06f 0001 	mvn.w	r0, #1
 8004142:	e7f8      	b.n	8004136 <__ascii_mbtowc+0x16>

08004144 <memmove>:
 8004144:	4288      	cmp	r0, r1
 8004146:	b510      	push	{r4, lr}
 8004148:	eb01 0302 	add.w	r3, r1, r2
 800414c:	d803      	bhi.n	8004156 <memmove+0x12>
 800414e:	1e42      	subs	r2, r0, #1
 8004150:	4299      	cmp	r1, r3
 8004152:	d10c      	bne.n	800416e <memmove+0x2a>
 8004154:	bd10      	pop	{r4, pc}
 8004156:	4298      	cmp	r0, r3
 8004158:	d2f9      	bcs.n	800414e <memmove+0xa>
 800415a:	1881      	adds	r1, r0, r2
 800415c:	1ad2      	subs	r2, r2, r3
 800415e:	42d3      	cmn	r3, r2
 8004160:	d100      	bne.n	8004164 <memmove+0x20>
 8004162:	bd10      	pop	{r4, pc}
 8004164:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004168:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800416c:	e7f7      	b.n	800415e <memmove+0x1a>
 800416e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004172:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004176:	e7eb      	b.n	8004150 <memmove+0xc>

08004178 <__malloc_lock>:
 8004178:	4770      	bx	lr

0800417a <__malloc_unlock>:
 800417a:	4770      	bx	lr

0800417c <_realloc_r>:
 800417c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800417e:	4607      	mov	r7, r0
 8004180:	4614      	mov	r4, r2
 8004182:	460e      	mov	r6, r1
 8004184:	b921      	cbnz	r1, 8004190 <_realloc_r+0x14>
 8004186:	4611      	mov	r1, r2
 8004188:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800418c:	f7ff be0a 	b.w	8003da4 <_malloc_r>
 8004190:	b922      	cbnz	r2, 800419c <_realloc_r+0x20>
 8004192:	f7ff fdbb 	bl	8003d0c <_free_r>
 8004196:	4625      	mov	r5, r4
 8004198:	4628      	mov	r0, r5
 800419a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800419c:	f000 f821 	bl	80041e2 <_malloc_usable_size_r>
 80041a0:	4284      	cmp	r4, r0
 80041a2:	d90f      	bls.n	80041c4 <_realloc_r+0x48>
 80041a4:	4621      	mov	r1, r4
 80041a6:	4638      	mov	r0, r7
 80041a8:	f7ff fdfc 	bl	8003da4 <_malloc_r>
 80041ac:	4605      	mov	r5, r0
 80041ae:	2800      	cmp	r0, #0
 80041b0:	d0f2      	beq.n	8004198 <_realloc_r+0x1c>
 80041b2:	4631      	mov	r1, r6
 80041b4:	4622      	mov	r2, r4
 80041b6:	f7ff fabf 	bl	8003738 <memcpy>
 80041ba:	4631      	mov	r1, r6
 80041bc:	4638      	mov	r0, r7
 80041be:	f7ff fda5 	bl	8003d0c <_free_r>
 80041c2:	e7e9      	b.n	8004198 <_realloc_r+0x1c>
 80041c4:	4635      	mov	r5, r6
 80041c6:	e7e7      	b.n	8004198 <_realloc_r+0x1c>

080041c8 <__ascii_wctomb>:
 80041c8:	b149      	cbz	r1, 80041de <__ascii_wctomb+0x16>
 80041ca:	2aff      	cmp	r2, #255	; 0xff
 80041cc:	bf8b      	itete	hi
 80041ce:	238a      	movhi	r3, #138	; 0x8a
 80041d0:	700a      	strbls	r2, [r1, #0]
 80041d2:	6003      	strhi	r3, [r0, #0]
 80041d4:	2001      	movls	r0, #1
 80041d6:	bf88      	it	hi
 80041d8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80041dc:	4770      	bx	lr
 80041de:	4608      	mov	r0, r1
 80041e0:	4770      	bx	lr

080041e2 <_malloc_usable_size_r>:
 80041e2:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80041e6:	2800      	cmp	r0, #0
 80041e8:	f1a0 0004 	sub.w	r0, r0, #4
 80041ec:	bfbc      	itt	lt
 80041ee:	580b      	ldrlt	r3, [r1, r0]
 80041f0:	18c0      	addlt	r0, r0, r3
 80041f2:	4770      	bx	lr

080041f4 <_init>:
 80041f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041f6:	bf00      	nop
 80041f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041fa:	bc08      	pop	{r3}
 80041fc:	469e      	mov	lr, r3
 80041fe:	4770      	bx	lr

08004200 <_fini>:
 8004200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004202:	bf00      	nop
 8004204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004206:	bc08      	pop	{r3}
 8004208:	469e      	mov	lr, r3
 800420a:	4770      	bx	lr
